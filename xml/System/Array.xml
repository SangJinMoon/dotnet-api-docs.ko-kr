<Type Name="Array" FullName="System.Array">
  <TypeSignature Language="C#" Value="public abstract class Array : ICloneable, System.Collections.IList, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Array extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList, class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Array" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Array&#xA;Implements ICloneable, IList, IStructuralComparable, IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Array abstract : ICloneable, System::Collections::IList, System::Collections::IStructuralComparable, System::Collections::IStructuralEquatable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="3f755-101">배열을 만들고, 조작하고, 검색 및 정렬하여 공용 언어 런타임에서 모든 배열의 기본 클래스 역할을 수행하도록 하는 메서드를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-101">Provides methods for creating, manipulating, searching, and sorting arrays, thereby serving as the base class for all arrays in the common language runtime.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-102"><xref:System.Array> 클래스가 않습니다의 일부가 <xref:System.Collections> 네임 스페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-102">The <xref:System.Array> class is not part of the <xref:System.Collections> namespaces.</span></span> <span data-ttu-id="3f755-103">그러나 여전히 이라고 컬렉션에 기반 하므로 <xref:System.Collections.IList> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-103">However, it is still considered a collection because it is based on the <xref:System.Collections.IList> interface.</span></span>  
  
 <span data-ttu-id="3f755-104"><xref:System.Array> 클래스는 배열을 지 원하는 언어 구현에 대 한 기본 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-104">The <xref:System.Array> class is the base class for language implementations that support arrays.</span></span> <span data-ttu-id="3f755-105">그러나 시스템 및 컴파일러에서 명시적으로 파생 될 수 있습니다는 <xref:System.Array> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-105">However, only the system and compilers can derive explicitly from the <xref:System.Array> class.</span></span> <span data-ttu-id="3f755-106">사용자는 언어에서 제공 하는 배열 구문을 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-106">Users should employ the array constructs provided by the language.</span></span>  
  
 <span data-ttu-id="3f755-107">요소에는 프로그램 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-107">An element is a value in an <xref:System.Array>.</span></span> <span data-ttu-id="3f755-108">길이 <xref:System.Array> 포함할 수 있는 요소의 총 수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-108">The length of an <xref:System.Array> is the total number of elements it can contain.</span></span> <span data-ttu-id="3f755-109">하 한 범위는 <xref:System.Array> 첫 번째 요소의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-109">The lower bound of an <xref:System.Array> is the index of its first element.</span></span> <span data-ttu-id="3f755-110"><xref:System.Array> 모든 하한값을 가질 수 있지만 그 값은 기본적으로 0입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-110">An <xref:System.Array> can have any lower bound, but it has a lower bound of zero by default.</span></span> <span data-ttu-id="3f755-111">인스턴스를 만들 때 다른 하 한을 정의할 수 있습니다는 <xref:System.Array> 클래스 사용 <xref:System.Array.CreateInstance%2A>합니다. 다차원 <xref:System.Array> 각 차원에 대해 서로 다른 범위를 가질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-111">A different lower bound can be defined when creating an instance of the <xref:System.Array> class using <xref:System.Array.CreateInstance%2A>.A multidimensional <xref:System.Array> can have different bounds for each dimension.</span></span> <span data-ttu-id="3f755-112">배열에는 최대 32 차원 초과 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-112">An array can have a maximum of 32 dimensions.</span></span>  
  
 <span data-ttu-id="3f755-113">클래스와 달리는 <xref:System.Collections> 네임 스페이스, <xref:System.Array> 용량이 고정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-113">Unlike the classes in the <xref:System.Collections> namespaces, <xref:System.Array> has a fixed capacity.</span></span> <span data-ttu-id="3f755-114">용량을 늘리려면 새 만들어야 <xref:System.Array> 필요한 용량으로 개체, 이전에서 요소를 복사 <xref:System.Array> 새 레코드로 개체를 삭제 하면 이전 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-114">To increase the capacity, you must create a new <xref:System.Array> object with the required capacity, copy the elements from the old <xref:System.Array> object to the new one, and delete the old <xref:System.Array>.</span></span>  
  
 <span data-ttu-id="3f755-115">기본적으로의 최대 크기는 <xref:System.Array> 은 2gb (기가바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-115">By default, the maximum size of an <xref:System.Array> is 2 gigabytes (GB).</span></span> <span data-ttu-id="3f755-116">64 비트 환경에서 크기 제한을 설정 하 여 방지할 수 있습니다는 `enabled` 특성에는 [gcAllowVeryLargeObjects](~/docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md) 구성 요소를 `true` 런타임 환경에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-116">In a 64-bit environment, you can avoid the size restriction by setting the `enabled` attribute of the [gcAllowVeryLargeObjects](~/docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md) configuration element to `true` in the run-time environment.</span></span> <span data-ttu-id="3f755-117">그러나 배열의 지정 된 차원 (바이트 배열 및 단일 바이트 구조의 배열에 대 한 0X7FFFFFC7)에 0X7FEFFFFF의 최대 인덱스는 총 4 십억 요소로 제한 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-117">However, the array will still be limited to a total of 4 billion elements, and to a maximum index of 0X7FEFFFFF in any given dimension (0X7FFFFFC7 for byte arrays and arrays of single-byte structures).</span></span>  
  
 <span data-ttu-id="3f755-118">1 차원 배열 구현는 <xref:System.Collections.Generic.IList%601?displayProperty=nameWithType>, <xref:System.Collections.Generic.ICollection%601?displayProperty=nameWithType>, <xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType>, <xref:System.Collections.Generic.IReadOnlyList%601?displayProperty=nameWithType> 및 <xref:System.Collections.Generic.IReadOnlyCollection%601?displayProperty=nameWithType> 제네릭 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-118">Single-dimensional arrays implement the <xref:System.Collections.Generic.IList%601?displayProperty=nameWithType>, <xref:System.Collections.Generic.ICollection%601?displayProperty=nameWithType>, <xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType>, <xref:System.Collections.Generic.IReadOnlyList%601?displayProperty=nameWithType> and <xref:System.Collections.Generic.IReadOnlyCollection%601?displayProperty=nameWithType> generic interfaces.</span></span> <span data-ttu-id="3f755-119">구현이 실행 시 배열에 제공 되 고 결과적으로, 제네릭 인터페이스에 대 한 선언 구문에 표시 되지 않습니다는 <xref:System.Array> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-119">The implementations are provided to arrays at run time, and as a result, the generic interfaces do not appear in the declaration syntax for the <xref:System.Array> class.</span></span> <span data-ttu-id="3f755-120">또한 제네릭 인터페이스의 형식 (명시적 인터페이스 구현)를 캐스팅 하 여만 액세스할 수 있는 인터페이스 멤버에 대 한 참조 항목 없음 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-120">In addition,  there are no reference topics for interface members that are accessible only by casting an array to the generic interface type (explicit interface implementations).</span></span> <span data-ttu-id="3f755-121">이러한 인터페이스 중 하나를 캐스팅할 때 알고 있어야 하 고는 구성원을 추가, 삽입 또는 제거 요소 throw <xref:System.NotSupportedException>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-121">The key thing to be aware of when you cast an array to one of these interfaces is that members which add, insert, or remove elements throw <xref:System.NotSupportedException>.</span></span>  
  
 <span data-ttu-id="3f755-122"><xref:System.Type> 개체 배열 형식 선언에 대 한 정보를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-122"><xref:System.Type> objects provide information about array type declarations.</span></span> <span data-ttu-id="3f755-123"><xref:System.Array> 배열 형식이 같은 개체를 공유 하는 동일한 <xref:System.Type> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-123"><xref:System.Array> objects with the same array type share the same <xref:System.Type> object.</span></span>  
  
 <span data-ttu-id="3f755-124"><xref:System.Type.IsArray%2A?displayProperty=nameWithType> 및 <xref:System.Type.GetElementType%2A?displayProperty=nameWithType> 예상된 결과에 반환 되지 않을 <xref:System.Array> 때문에 배열 형식으로 캐스팅 된 경우 <xref:System.Array>, 결과 배열이 아닌 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-124"><xref:System.Type.IsArray%2A?displayProperty=nameWithType> and <xref:System.Type.GetElementType%2A?displayProperty=nameWithType> might not return the expected results with <xref:System.Array> because if an array is cast to the type <xref:System.Array>, the result is an object, not an array.</span></span> <span data-ttu-id="3f755-125">즉, `typeof(System.Array).IsArray` 반환 `false`, 및 `typeof(System.Array).GetElementType` 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-125">That is, `typeof(System.Array).IsArray` returns `false`, and `typeof(System.Array).GetElementType` returns `null`.</span></span>  
  
 <span data-ttu-id="3f755-126"><xref:System.Array.Copy%2A?displayProperty=nameWithType> 동일한 유형 배열 간의 뿐만 아니라 하지만 서로 다른 형식의 표준 배열 간에 요소를 복사 하는 메서드, 형식 캐스팅을 자동으로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-126">The <xref:System.Array.Copy%2A?displayProperty=nameWithType> method copies elements not only between arrays of the same type but also between standard arrays of different types; it handles type casting automatically.</span></span>  
  
 <span data-ttu-id="3f755-127">일부 메서드와 같은 <xref:System.Array.CreateInstance%2A>, <xref:System.Array.Copy%2A>, <xref:System.Array.CopyTo%2A>, <xref:System.Array.GetValue%2A>, 및 <xref:System.Array.SetValue%2A>, 대용량 배열을 위한에 매개 변수로 64 비트 정수를 받아들이는 오버 로드를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-127">Some methods, such as <xref:System.Array.CreateInstance%2A>, <xref:System.Array.Copy%2A>, <xref:System.Array.CopyTo%2A>, <xref:System.Array.GetValue%2A>, and <xref:System.Array.SetValue%2A>, provide overloads that accept 64-bit integers as parameters to accommodate large capacity arrays.</span></span> <span data-ttu-id="3f755-128"><xref:System.Array.LongLength%2A> 및 <xref:System.Array.GetLongLength%2A> 배열의 길이 나타내는 64 비트 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-128"><xref:System.Array.LongLength%2A> and <xref:System.Array.GetLongLength%2A> return 64-bit integers indicating the length of the array.</span></span>  
  
 <span data-ttu-id="3f755-129"><xref:System.Array> 정렬할 보장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-129">The <xref:System.Array> is not guaranteed to be sorted.</span></span>  <span data-ttu-id="3f755-130">정렬 해야는 <xref:System.Array> 작업을 수행 하기 전에 (같은 <xref:System.Array.BinarySearch%2A>) 해야 하는 <xref:System.Array> 정렬할 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-130">You must sort the <xref:System.Array> prior to performing operations (such as <xref:System.Array.BinarySearch%2A>) that require the <xref:System.Array> to be sorted.</span></span>  
  
 <span data-ttu-id="3f755-131">사용 하는 <xref:System.Array> 네이티브 코드에 대 한 포인터의 개체는 지원 되지 않으며를 throw 합니다는 <xref:System.NotSupportedException> 여러 가지 방법에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-131">Using an <xref:System.Array> object of pointers in native code is not supported and will throw a <xref:System.NotSupportedException> for several methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-132">다음 코드 예제와 방법을 <xref:System.Array.Copy%2A?displayProperty=nameWithType> 간에 정수 형식의 배열 및 배열 형식의 요소를 복사 <xref:System.Object>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-132">The following code example shows how <xref:System.Array.Copy%2A?displayProperty=nameWithType> copies elements between an array of type integer and an array of type <xref:System.Object>.</span></span>  
  
 [!code-cpp[Classic Array Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array Example/CS/source.cs#1)]
 [!code-vb[Classic Array Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array Example/VB/source.vb#1)]  
  
 <span data-ttu-id="3f755-133">다음 코드 예제를 만들고 초기화는 <xref:System.Array> 해당 속성 및 해당 요소를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-133">The following code example creates and initializes an <xref:System.Array> and displays its properties and its elements.</span></span>  
  
 [!code-cpp[Classic Array Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array Example/CPP/source3.cpp#2)]
 [!code-csharp[Classic Array Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array Example/CS/source3.cs#2)]
 [!code-vb[Classic Array Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array Example/VB/source3.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="3f755-134">공용 정적 (<see langword="Shared" /> Visual basic에서)이 형식의 멤버는 스레드로부터 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-134">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="3f755-135">인터페이스 멤버는 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-135">Any instance members are not guaranteed to be thread safe.</span></span>  
  
 <span data-ttu-id="3f755-136">이 구현에서는 동기화 된 제공 하지 않습니다 (스레드로부터 안전함) 래퍼에 대 한는 <see cref="T:System.Array" />있지만.NET Framework 클래스에 따라 <see cref="T:System.Array" /> 사용 하 여 컬렉션의 동기화 된 버전 제공는 <see cref="P:System.Array.SyncRoot" /> 속성.</span><span class="sxs-lookup"><span data-stu-id="3f755-136">This implementation does not provide a synchronized (thread safe) wrapper for an <see cref="T:System.Array" />; however, .NET Framework classes based on <see cref="T:System.Array" /> provide their own synchronized version of the collection using the <see cref="P:System.Array.SyncRoot" /> property.</span></span>  
  
 <span data-ttu-id="3f755-137">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-137">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="3f755-138">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-138">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="3f755-139">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-139">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span></threadsafe>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Type" />
  </Docs>
  <Members>
    <Member MemberName="AsReadOnly&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; AsReadOnly&lt;T&gt; (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!!T&gt; AsReadOnly&lt;T&gt;(!!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.AsReadOnly``1(``0[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsReadOnly(Of T) (array As T()) As ReadOnlyCollection(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;T&gt; ^ AsReadOnly(cli::array &lt;T&gt; ^ array);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-140">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-140">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-141">읽기 전용 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 래퍼에서 래핑할 1차원 배열(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-141">The one-dimensional, zero-based array to wrap in a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper.</span></span></param>
        <summary><span data-ttu-id="3f755-142">지정한 배열의 읽기 전용 래퍼를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-142">Returns a read-only wrapper for the specified array.</span></span></summary>
        <returns><span data-ttu-id="3f755-143">지정한 배열의 읽기 전용 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 래퍼입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-143">A read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper for the specified array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-144">배열에 대 한 수정을 방지 하려면이 래퍼를 통해서만 배열을 노출 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-144">To prevent any modifications to the array, expose the array only through this wrapper.</span></span>  
  
 <span data-ttu-id="3f755-145">읽기 전용 컬렉션은 지정 된 컬렉션을 수정 하지 못하도록 하는 래퍼 컬렉션 따라서 기본 컬렉션이 변경 될 경우 읽기 전용 컬렉션 해당 변경 내용을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-145">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="3f755-146">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="3f755-146">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-147">다음 예에서는 읽기 전용 배열을 래핑하 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-147">The following example wraps an array in a read-only <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span></span>  
  
 [!code-cpp[System.Array.AsReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.AsReadOnly/CPP/arrayasreadonly.cpp#1)]
 [!code-csharp[System.Array.AsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.AsReadOnly/CS/arrayasreadonly.cs#1)]
 [!code-vb[System.Array.AsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.AsReadOnly/VB/arrayasreadonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-148"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-148"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BinarySearch">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3f755-149">이진 검색 알고리즘을 사용하여 1차원으로 정렬된 <see cref="T:System.Array" />에서 값을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-149">Searches a one-dimensional sorted <see cref="T:System.Array" /> for a value, using a binary search algorithm.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public static int BinarySearch (Array array, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch(class System.Array array, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.BinarySearch(System.Array,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int BinarySearch(Array ^ array, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="3f755-150">검색할 1차원으로 정렬된 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-150">The sorted one-dimensional <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="3f755-151">검색할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-151">The object to search for.</span></span></param>
        <summary><span data-ttu-id="3f755-152">배열의 각 요소 및 지정한 개체에서 구현되는 <see cref="T:System.IComparable" /> 인터페이스를 사용하여 1차원으로 정렬된 배열에서 특정 요소를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-152">Searches an entire one-dimensional sorted array for a specific element, using the <see cref="T:System.IComparable" /> interface implemented by each element of the array and by the specified object.</span></span></summary>
        <returns><span data-ttu-id="3f755-153"><paramref name="value" />가 있는 경우 지정된 <paramref name="array" />에 있는 지정된 <paramref name="value" />의 인덱스이고, 그렇지 않으면 음수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-153">The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number.</span></span> <span data-ttu-id="3f755-154"><paramref name="value" />가 없고 <paramref name="value" />가 <paramref name="array" />에 있는 하나 이상의 요소보다 작은 경우 <paramref name="value" />보다 큰 첫째 요소 인덱스의 비트 보수인 음수가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-154">If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />.</span></span> <span data-ttu-id="3f755-155"><paramref name="value" />가 없고 <paramref name="value" />가 <paramref name="array" />에 있는 모든 요소보다 큰 경우 마지막 요소에 1을 더한 인덱스의 비트 보수인 음수가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-155">If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1).</span></span> <span data-ttu-id="3f755-156">이 메서드가 정렬되지 않은 <paramref name="array" />를 사용하여 호출되면 <paramref name="value" />가 <paramref name="array" />에 있더라도 반환 값이 올바르지 않고 음수가 반환될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-156">If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-157">이 메서드는 음수 인덱스를 포함 하는 검색 배열을 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-157">This method does not support searching arrays that contain negative indexes.</span></span> <span data-ttu-id="3f755-158">`array` 이 메서드를 호출 하기 전에 정렬 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-158">`array` must be sorted before calling this method.</span></span>  
  
 <span data-ttu-id="3f755-159">경우는 <xref:System.Array> 지정 된 값이 포함 되지 않는 메서드가 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-159">If the <xref:System.Array> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="3f755-160">비트 보수 연산자를 적용할 수 있습니다 (~ C#에서는 `Not` Visual basic에서) 하는 인덱스를 생성할 음수 결과를 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-160">You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result  to produce an index.</span></span> <span data-ttu-id="3f755-161">이 인덱스는 하나는 배열의 상한 보다 크지 많은 경우 보다 더 큰 요소가 없는 `value` 배열에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-161">If this index is one greater than the upper bound of the array, there are no elements larger than `value` in the array.</span></span> <span data-ttu-id="3f755-162">그렇지 않으면 첫 번째 요소 보다 큰 인덱스를은 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-162">Otherwise, it is the index of the first element that is larger than `value`.</span></span>  
  
 <span data-ttu-id="3f755-163">중 하나 `value` 또는의 모든 요소가 `array` 구현 해야 합니다는 <xref:System.IComparable> 비교에 사용 되는 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-163">Either `value` or every element of `array` must implement the <xref:System.IComparable> interface, which is used for comparisons.</span></span> <span data-ttu-id="3f755-164">요소 `array` 에 정의 된 정렬 순서에 따라 값이 증가 이미 정렬 되어야 합니다는 <xref:System.IComparable> 구현을 제공 합니다; 그렇지 않으면 결과 잘못 되었을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-164">The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-165">경우`value` 를 구현 하지 않습니다는 <xref:System.IComparable> 인터페이스의 요소 `array` 에 대 한 테스트 되지 않습니다 <xref:System.IComparable> 검색을 시작 하기 전에.</span><span class="sxs-lookup"><span data-stu-id="3f755-165">If`value` does not implement the <xref:System.IComparable> interface, the elements of `array` are not tested for <xref:System.IComparable> before the search begins.</span></span> <span data-ttu-id="3f755-166">검색 구현 하지 않는 요소가 발견 하는 경우 예외가 throw 됩니다 <xref:System.IComparable>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-166">An exception is thrown if the search encounters an element that does not implement <xref:System.IComparable>.</span></span>  
  
 <span data-ttu-id="3f755-167">중복 되는 요소가 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-167">Duplicate elements are allowed.</span></span> <span data-ttu-id="3f755-168">경우는 <xref:System.Array> 크거나 둘 이상의 요소가 포함 되어 `value`, 메서드, 각 항목 중 하나에 것 뿐 아니라 첫 번째 인덱스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-168">If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.</span></span>  
  
 <span data-ttu-id="3f755-169">`null` 항상 다른 참조 형식과;와 비교할 수 있습니다. 와 비교할 따라서 `null` 예외가 생성 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-169">`null` can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-170">테스트, 모든 요소에 대해 `value` 을 적절 한 전달 <xref:System.IComparable> 경우 `value` 은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-170">For every element tested, `value` is passed to the appropriate <xref:System.IComparable> implementation, even if `value` is `null`.</span></span> <span data-ttu-id="3f755-171">즉,는 <xref:System.IComparable> 구현 지정된 된 요소를 비교 하는 방법을 결정 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-171">That is, the <xref:System.IComparable> implementation determines how a given element compares to `null`.</span></span>  
  
 <span data-ttu-id="3f755-172">이 메서드는는 O (로그 `n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-172">This method is an O(log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-173">다음 코드 예제를 사용 하는 방법을 보여 줍니다 <xref:System.Array.BinarySearch%2A> 의 특정 개체를 찾을 수는 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-173">The following code example shows how to use <xref:System.Array.BinarySearch%2A> to locate a specific object in an <xref:System.Array>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-174">배열의 해당 요소를 오름차순으로 정렬 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-174">The array is created with its elements in ascending sort order.</span></span> <span data-ttu-id="3f755-175"><xref:System.Array.BinarySearch%2A> 메서드를 사용 하려면 배열 오름차순으로 정렬 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-175">The <xref:System.Array.BinarySearch%2A> method requires the array to be sorted in ascending order.</span></span>  
  
 [!code-cpp[Classic Array.BinarySearch Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.BinarySearch Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.BinarySearch Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.BinarySearch Example/CS/source.cs#1)]
 [!code-vb[Classic Array.BinarySearch Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.BinarySearch Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-176"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-176"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="3f755-177"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-177"><paramref name="array" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-178"><paramref name="value" />의 형식이 <paramref name="array" />의 요소와 호환되지 않는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-178"><paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3f755-179"><paramref name="value" />가 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않으며 검색 중에 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 요소가 발견되었습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-179"><paramref name="value" /> does not implement the <see cref="T:System.IComparable" /> interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.Sort" />
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public static int BinarySearch (Array array, object value, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch(class System.Array array, object value, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int BinarySearch(Array ^ array, System::Object ^ value, System::Collections::IComparer ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="3f755-180">검색할 1차원으로 정렬된 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-180">The sorted one-dimensional <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="3f755-181">검색할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-181">The object to search for.</span></span></param>
        <param name="comparer"><span data-ttu-id="3f755-182">요소를 비교할 때 사용하는 <see cref="T:System.Collections.IComparer" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-182">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</span></span>  
  
 <span data-ttu-id="3f755-183">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-183">-or-</span></span>  
  
 <span data-ttu-id="3f755-184">각 요소의 <see cref="T:System.IComparable" /> 구현을 사용할 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-184"><see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</span></span></param>
        <summary><span data-ttu-id="3f755-185">지정한 <see cref="T:System.Collections.IComparer" /> 인터페이스를 사용하여 1차원으로 정렬된 전체 배열에서 값을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-185">Searches an entire one-dimensional sorted array for a value using the specified <see cref="T:System.Collections.IComparer" /> interface.</span></span></summary>
        <returns><span data-ttu-id="3f755-186"><paramref name="value" />가 있는 경우 지정된 <paramref name="array" />에 있는 지정된 <paramref name="value" />의 인덱스이고, 그렇지 않으면 음수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-186">The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number.</span></span> <span data-ttu-id="3f755-187"><paramref name="value" />가 없고 <paramref name="value" />가 <paramref name="array" />에 있는 하나 이상의 요소보다 작은 경우 <paramref name="value" />보다 큰 첫째 요소 인덱스의 비트 보수인 음수가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-187">If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />.</span></span> <span data-ttu-id="3f755-188"><paramref name="value" />가 없고 <paramref name="value" />가 <paramref name="array" />에 있는 모든 요소보다 큰 경우 마지막 요소에 1을 더한 인덱스의 비트 보수인 음수가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-188">If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1).</span></span> <span data-ttu-id="3f755-189">이 메서드가 정렬되지 않은 <paramref name="array" />를 사용하여 호출되면 <paramref name="value" />가 <paramref name="array" />에 있더라도 반환 값이 올바르지 않고 음수가 반환될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-189">If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-190">이 메서드는 음수 인덱스를 포함 하는 검색 배열을 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-190">This method does not support searching arrays that contain negative indexes.</span></span> <span data-ttu-id="3f755-191">`array` 이 메서드를 호출 하기 전에 정렬 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-191">`array` must be sorted before calling this method.</span></span>  
  
 <span data-ttu-id="3f755-192">경우는 <xref:System.Array> 지정 된 값이 포함 되지 않는 메서드가 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-192">If the <xref:System.Array> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="3f755-193">비트 보수 연산자를 적용할 수 있습니다 (~ C#에서는 `Not` Visual basic에서) 하는 인덱스를 생성할 음수 결과를 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-193">You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result  to produce an index.</span></span> <span data-ttu-id="3f755-194">이 인덱스는 하나는 배열의 상한 보다 크지 많은 경우 보다 더 큰 요소가 없는 `value` 배열에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-194">If this index is one greater than the upper bound of the array, there are no elements larger than `value` in the array.</span></span> <span data-ttu-id="3f755-195">그렇지 않으면 첫 번째 요소 보다 큰 인덱스를은 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-195">Otherwise, it is the index of the first element that is larger than `value`.</span></span>  
  
 <span data-ttu-id="3f755-196">비교자는 요소를 비교 하는 방법을 사용자 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-196">The comparer customizes how the elements are compared.</span></span> <span data-ttu-id="3f755-197">예를 들어, 사용할 수는 <xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType> 으로 대/소문자 구분 문자열 검색을 수행 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-197">For example, you can use a <xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType> as the comparer to perform case-insensitive string searches.</span></span>  
  
 <span data-ttu-id="3f755-198">경우 `comparer` 않습니다 `null`, 요소의 `array` 사용 하 여 지정된 된 값과 비교할 <xref:System.Collections.IComparer> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-198">If `comparer` is not `null`, the elements of `array` are compared to the specified value using the specified <xref:System.Collections.IComparer> implementation.</span></span> <span data-ttu-id="3f755-199">요소 `array` 값으로 정의 된 정렬 순서에 따라 증가 하도록 정렬 되어 있어야 `comparer`, 그렇지 않으면 결과가 올바르지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-199">The elements of `array` must already be sorted in increasing value according to the sort order defined by `comparer`; otherwise, the result might be incorrect.</span></span>  
  
 <span data-ttu-id="3f755-200">경우`comparer` 은 `null`, 비교를 수행를 사용 하는 <xref:System.IComparable> 또는 지정 된 값은 요소 자체에서 제공 되는 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-200">If`comparer` is `null`, the comparison is done using the <xref:System.IComparable> implementation provided by the element itself or by the specified value.</span></span> <span data-ttu-id="3f755-201">요소 `array` 에 정의 된 정렬 순서에 따라 값이 증가 이미 정렬 되어야 합니다는 <xref:System.IComparable> 구현을 제공 합니다; 그렇지 않으면 결과 잘못 되었을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-201">The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-202">경우 `comparer` 은 `null` 및 `value` 를 구현 하지 않습니다는 <xref:System.IComparable> 인터페이스의 요소 `array` 에 대 한 테스트 되지 않습니다 <xref:System.IComparable> 검색을 시작 하기 전에.</span><span class="sxs-lookup"><span data-stu-id="3f755-202">If `comparer` is `null` and `value` does not implement the <xref:System.IComparable> interface, the elements of `array` are not tested for <xref:System.IComparable> before the search begins.</span></span> <span data-ttu-id="3f755-203">검색 구현 하지 않는 요소가 발견 하는 경우 예외가 throw 됩니다 <xref:System.IComparable>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-203">An exception is thrown if the search encounters an element that does not implement <xref:System.IComparable>.</span></span>  
  
 <span data-ttu-id="3f755-204">중복 되는 요소가 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-204">Duplicate elements are allowed.</span></span> <span data-ttu-id="3f755-205">경우는 <xref:System.Array> 크거나 둘 이상의 요소가 포함 되어 `value`, 메서드, 각 항목 중 하나에 것 뿐 아니라 첫 번째 인덱스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-205">If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.</span></span>  
  
 <span data-ttu-id="3f755-206">`null` 항상 다른 참조 형식과;와 비교할 수 있습니다. 와 비교할 따라서 `null` 예외가 생성 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-206">`null` can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-207">테스트, 모든 요소에 대해 `value` 을 적절 한 전달 <xref:System.IComparable> 경우 `value` 은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-207">For every element tested, `value` is passed to the appropriate <xref:System.IComparable> implementation, even if `value` is `null`.</span></span> <span data-ttu-id="3f755-208">즉,는 <xref:System.IComparable> 구현 지정된 된 요소를 비교 하는 방법을 결정 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-208">That is, the <xref:System.IComparable> implementation determines how a given element compares to `null`.</span></span>  
  
 <span data-ttu-id="3f755-209">이 메서드는는 O (로그 `n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-209">This method is an O(log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-210"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-210"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="3f755-211"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-211"><paramref name="array" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-212"><paramref name="comparer" />가 <see langword="null" />이고 <paramref name="value" />가 <paramref name="array" />의 요소와 호환되지 않는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-212"><paramref name="comparer" /> is <see langword="null" />, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3f755-213"><paramref name="comparer" />가 <see langword="null" />이고, <paramref name="value" />가 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않으며 검색 중에 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 요소가 발견되었습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-213"><paramref name="comparer" /> is <see langword="null" />, <paramref name="value" /> does not implement the <see cref="T:System.IComparable" /> interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.Sort" />
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public static int BinarySearch (Array array, int index, int length, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch(class System.Array array, int32 index, int32 length, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int BinarySearch(Array ^ array, int index, int length, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="3f755-214">검색할 1차원으로 정렬된 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-214">The sorted one-dimensional <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="index"><span data-ttu-id="3f755-215">검색할 범위의 시작 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-215">The starting index of the range to search.</span></span></param>
        <param name="length"><span data-ttu-id="3f755-216">검색할 범위의 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-216">The length of the range to search.</span></span></param>
        <param name="value"><span data-ttu-id="3f755-217">검색할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-217">The object to search for.</span></span></param>
        <summary><span data-ttu-id="3f755-218">배열의 각 요소 및 지정한 값에서 구현되는 <see cref="T:System.IComparable" /> 인터페이스를 사용하여 1차원으로 정렬된 배열의 요소 범위에서 값을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-218">Searches a range of elements in a one-dimensional sorted array for a value, using the <see cref="T:System.IComparable" /> interface implemented by each element of the array and by the specified value.</span></span></summary>
        <returns><span data-ttu-id="3f755-219"><paramref name="value" />가 있는 경우 지정된 <paramref name="array" />에 있는 지정된 <paramref name="value" />의 인덱스이고, 그렇지 않으면 음수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-219">The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number.</span></span> <span data-ttu-id="3f755-220"><paramref name="value" />가 없고 <paramref name="value" />가 <paramref name="array" />에 있는 하나 이상의 요소보다 작은 경우 <paramref name="value" />보다 큰 첫째 요소 인덱스의 비트 보수인 음수가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-220">If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />.</span></span> <span data-ttu-id="3f755-221"><paramref name="value" />가 없고 <paramref name="value" />가 <paramref name="array" />에 있는 모든 요소보다 큰 경우 마지막 요소에 1을 더한 인덱스의 비트 보수인 음수가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-221">If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1).</span></span> <span data-ttu-id="3f755-222">이 메서드가 정렬되지 않은 <paramref name="array" />를 사용하여 호출되면 <paramref name="value" />가 <paramref name="array" />에 있더라도 반환 값이 올바르지 않고 음수가 반환될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-222">If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-223">이 메서드는 음수 인덱스를 포함 하는 검색 배열을 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-223">This method does not support searching arrays that contain negative indexes.</span></span> <span data-ttu-id="3f755-224">`array` 이 메서드를 호출 하기 전에 정렬 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-224">`array` must be sorted before calling this method.</span></span>  
  
 <span data-ttu-id="3f755-225">경우는 <xref:System.Array> 지정 된 값이 포함 되지 않는 메서드가 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-225">If the <xref:System.Array> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="3f755-226">비트 보수 연산자를 적용할 수 있습니다 (~ C#에서는 `Not` Visual basic에서) 하는 인덱스를 생성할 음수 결과를 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-226">You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result to produce an index.</span></span> <span data-ttu-id="3f755-227">이 인덱스는 하나는 배열의 상한 보다 크지 많은 경우 보다 더 큰 요소가 없는 `value` 배열에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-227">If this index is one greater than the upper bound of the array, there are no elements larger than `value` in the array.</span></span> <span data-ttu-id="3f755-228">그렇지 않으면 첫 번째 요소 보다 큰 인덱스를은 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-228">Otherwise, it is the index of the first element that is larger than `value`.</span></span>  
  
 <span data-ttu-id="3f755-229">중 하나 `value` 또는의 모든 요소가 `array` 구현 해야 합니다는 <xref:System.IComparable> 비교에 사용 되는 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-229">Either `value` or every element of `array` must implement the <xref:System.IComparable> interface, which is used for comparisons.</span></span> <span data-ttu-id="3f755-230">요소 `array` 에 정의 된 정렬 순서에 따라 값이 증가 이미 정렬 되어야 합니다는 <xref:System.IComparable> 구현을 제공 합니다; 그렇지 않으면 결과 잘못 되었을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-230">The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-231">경우 `value` 를 구현 하지 않습니다는 <xref:System.IComparable> 인터페이스의 요소 `array` 에 대 한 테스트 되지 않습니다 <xref:System.IComparable> 검색을 시작 하기 전에.</span><span class="sxs-lookup"><span data-stu-id="3f755-231">If `value` does not implement the <xref:System.IComparable> interface, the elements of `array` are not tested for <xref:System.IComparable> before the search begins.</span></span> <span data-ttu-id="3f755-232">검색 구현 하지 않는 요소가 발견 하는 경우 예외가 throw 됩니다 <xref:System.IComparable>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-232">An exception is thrown if the search encounters an element that does not implement <xref:System.IComparable>.</span></span>  
  
 <span data-ttu-id="3f755-233">중복 되는 요소가 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-233">Duplicate elements are allowed.</span></span> <span data-ttu-id="3f755-234">경우는 <xref:System.Array> 크거나 둘 이상의 요소가 포함 되어 `value`, 메서드, 각 항목 중 하나에 것 뿐 아니라 첫 번째 인덱스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-234">If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.</span></span>  
  
 <span data-ttu-id="3f755-235">`null` 항상 다른 참조 형식과;와 비교할 수 있습니다. 와 비교할 따라서 `null` 예외가 생성 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-235">`null` can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-236">테스트, 모든 요소에 대해 `value` 을 적절 한 전달 <xref:System.IComparable> 경우 `value` 은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-236">For every element tested, `value` is passed to the appropriate <xref:System.IComparable> implementation, even if `value` is `null`.</span></span> <span data-ttu-id="3f755-237">즉,는 <xref:System.IComparable> 구현 지정된 된 요소를 비교 하는 방법을 결정 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-237">That is, the <xref:System.IComparable> implementation determines how a given element compares to `null`.</span></span>  
  
 <span data-ttu-id="3f755-238">이 메서드는는 O (로그 `n`) 작업, 여기서 `n` 은 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-238">This method is an O(log `n`) operation, where `n` is `length`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-239"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-239"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="3f755-240"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-240"><paramref name="array" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-241"><paramref name="index" />가 <paramref name="array" />의 하한값보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-241"><paramref name="index" /> is less than the lower bound of <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="3f755-242">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-242">-or-</span></span>  
  
 <span data-ttu-id="3f755-243"><paramref name="length" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-243"><paramref name="length" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-244"><paramref name="index" /> 및 <paramref name="length" />가 <paramref name="array" />의 올바른 범위를 지정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-244"><paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="3f755-245">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-245">-or-</span></span>  
  
 <span data-ttu-id="3f755-246"><paramref name="value" />의 형식이 <paramref name="array" />의 요소와 호환되지 않는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-246"><paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3f755-247"><paramref name="value" />가 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않으며 검색 중에 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 요소가 발견되었습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-247"><paramref name="value" /> does not implement the <see cref="T:System.IComparable" /> interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.Sort" />
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public static int BinarySearch (Array array, int index, int length, object value, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch(class System.Array array, int32 index, int32 length, object value, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int BinarySearch(Array ^ array, int index, int length, System::Object ^ value, System::Collections::IComparer ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="3f755-248">검색할 1차원으로 정렬된 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-248">The sorted one-dimensional <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="index"><span data-ttu-id="3f755-249">검색할 범위의 시작 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-249">The starting index of the range to search.</span></span></param>
        <param name="length"><span data-ttu-id="3f755-250">검색할 범위의 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-250">The length of the range to search.</span></span></param>
        <param name="value"><span data-ttu-id="3f755-251">검색할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-251">The object to search for.</span></span></param>
        <param name="comparer"><span data-ttu-id="3f755-252">요소를 비교할 때 사용하는 <see cref="T:System.Collections.IComparer" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-252">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</span></span>  
  
 <span data-ttu-id="3f755-253">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-253">-or-</span></span>  
  
 <span data-ttu-id="3f755-254">각 요소의 <see cref="T:System.IComparable" /> 구현을 사용할 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-254"><see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</span></span></param>
        <summary><span data-ttu-id="3f755-255">지정한 <see cref="T:System.Collections.IComparer" /> 인터페이스를 사용하여 1차원으로 정렬된 배열의 요소 범위에서 값을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-255">Searches a range of elements in a one-dimensional sorted array for a value, using the specified <see cref="T:System.Collections.IComparer" /> interface.</span></span></summary>
        <returns><span data-ttu-id="3f755-256"><paramref name="value" />가 있는 경우 지정된 <paramref name="array" />에 있는 지정된 <paramref name="value" />의 인덱스이고, 그렇지 않으면 음수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-256">The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number.</span></span> <span data-ttu-id="3f755-257"><paramref name="value" />가 없고 <paramref name="value" />가 <paramref name="array" />에 있는 하나 이상의 요소보다 작은 경우 <paramref name="value" />보다 큰 첫째 요소 인덱스의 비트 보수인 음수가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-257">If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />.</span></span> <span data-ttu-id="3f755-258"><paramref name="value" />가 없고 <paramref name="value" />가 <paramref name="array" />에 있는 모든 요소보다 큰 경우 마지막 요소에 1을 더한 인덱스의 비트 보수인 음수가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-258">If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1).</span></span> <span data-ttu-id="3f755-259">이 메서드가 정렬되지 않은 <paramref name="array" />를 사용하여 호출되면 <paramref name="value" />가 <paramref name="array" />에 있더라도 반환 값이 올바르지 않고 음수가 반환될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-259">If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-260">이 메서드는 음수 인덱스를 포함 하는 검색 배열을 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-260">This method does not support searching arrays that contain negative indexes.</span></span> <span data-ttu-id="3f755-261">`array` 이 메서드를 호출 하기 전에 정렬 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-261">`array` must be sorted before calling this method.</span></span>  
  
 <span data-ttu-id="3f755-262">경우는 <xref:System.Array> 지정 된 값이 포함 되지 않는 메서드가 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-262">If the <xref:System.Array> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="3f755-263">비트 보수 연산자를 적용할 수 있습니다 (~ C#에서는 `Not` Visual basic에서) 하는 인덱스를 생성할 음수 결과를 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-263">You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result  to produce an index.</span></span> <span data-ttu-id="3f755-264">이 인덱스는 하나는 배열의 상한 보다 크지 많은 경우 보다 더 큰 요소가 없는 `value` 배열에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-264">If this index is one greater than the upper bound of the array, there are no elements larger than `value` in the array.</span></span> <span data-ttu-id="3f755-265">그렇지 않으면 첫 번째 요소 보다 큰 인덱스를은 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-265">Otherwise, it is the index of the first element that is larger than `value`.</span></span>  
  
 <span data-ttu-id="3f755-266">비교자는 요소를 비교 하는 방법을 사용자 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-266">The comparer customizes how the elements are compared.</span></span> <span data-ttu-id="3f755-267">예를 들어, 사용할 수는 <xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType> 으로 대/소문자 구분 문자열 검색을 수행 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-267">For example, you can use a <xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType> as the comparer to perform case-insensitive string searches.</span></span>  
  
 <span data-ttu-id="3f755-268">경우 `comparer` 않습니다 `null`, 요소의 `array` 사용 하 여 지정된 된 값과 비교할 <xref:System.Collections.IComparer> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-268">If `comparer` is not `null`, the elements of `array` are compared to the specified value using the specified <xref:System.Collections.IComparer> implementation.</span></span> <span data-ttu-id="3f755-269">요소 `array` 값으로 정의 된 정렬 순서에 따라 증가 하도록 정렬 되어 있어야 `comparer`, 그렇지 않으면 결과가 올바르지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-269">The elements of `array` must already be sorted in increasing value according to the sort order defined by `comparer`; otherwise, the result might be incorrect.</span></span>  
  
 <span data-ttu-id="3f755-270">경우 `comparer` 은 `null`, 비교를 수행를 사용 하는 <xref:System.IComparable> 또는 지정 된 값은 요소 자체에서 제공 되는 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-270">If `comparer` is `null`, the comparison is done using the <xref:System.IComparable> implementation provided by the element itself or by the specified value.</span></span> <span data-ttu-id="3f755-271">요소 `array` 에 정의 된 정렬 순서에 따라 값이 증가 이미 정렬 되어야 합니다는 <xref:System.IComparable> 구현을 제공 합니다; 그렇지 않으면 결과 잘못 되었을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-271">The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-272">경우 `comparer` 은 `null` 및 `value` 를 구현 하지 않습니다는 <xref:System.IComparable> 인터페이스의 요소 `array` 에 대 한 테스트 되지 않습니다 <xref:System.IComparable> 검색을 시작 하기 전에.</span><span class="sxs-lookup"><span data-stu-id="3f755-272">If `comparer` is `null` and `value` does not implement the <xref:System.IComparable> interface, the elements of `array` are not tested for <xref:System.IComparable> before the search begins.</span></span> <span data-ttu-id="3f755-273">검색 구현 하지 않는 요소가 발견 하는 경우 예외가 throw 됩니다 <xref:System.IComparable>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-273">An exception is thrown if the search encounters an element that does not implement <xref:System.IComparable>.</span></span>  
  
 <span data-ttu-id="3f755-274">중복 되는 요소가 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-274">Duplicate elements are allowed.</span></span> <span data-ttu-id="3f755-275">경우는 <xref:System.Array> 크거나 둘 이상의 요소가 포함 되어 `value`, 메서드, 각 항목 중 하나에 것 뿐 아니라 첫 번째 인덱스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-275">If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.</span></span>  
  
 <span data-ttu-id="3f755-276">`null` 항상 다른 참조 형식과;와 비교할 수 있습니다. 와 비교할 따라서 `null` 사용 하는 경우 예외를 생성 하지 않는 <xref:System.IComparable>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-276">`null` can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception when using <xref:System.IComparable>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-277">테스트, 모든 요소에 대해 `value` 을 적절 한 전달 <xref:System.IComparable> 경우 `value` 은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-277">For every element tested, `value` is passed to the appropriate <xref:System.IComparable> implementation, even if `value` is `null`.</span></span> <span data-ttu-id="3f755-278">즉,는 <xref:System.IComparable> 구현 지정된 된 요소를 비교 하는 방법을 결정 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-278">That is, the <xref:System.IComparable> implementation determines how a given element compares to `null`.</span></span>  
  
 <span data-ttu-id="3f755-279">이 메서드는는 O (로그 `n`) 작업, 여기서 `n` 은 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-279">This method is an O(log `n`) operation, where `n` is `length`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-280"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-280"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="3f755-281"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-281"><paramref name="array" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-282"><paramref name="index" />가 <paramref name="array" />의 하한값보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-282"><paramref name="index" /> is less than the lower bound of <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="3f755-283">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-283">-or-</span></span>  
  
 <span data-ttu-id="3f755-284"><paramref name="length" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-284"><paramref name="length" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-285"><paramref name="index" /> 및 <paramref name="length" />가 <paramref name="array" />의 올바른 범위를 지정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-285"><paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="3f755-286">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-286">-or-</span></span>  
  
 <span data-ttu-id="3f755-287"><paramref name="comparer" />가 <see langword="null" />이고 <paramref name="value" />가 <paramref name="array" />의 요소와 호환되지 않는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-287"><paramref name="comparer" /> is <see langword="null" />, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3f755-288"><paramref name="comparer" />가 <see langword="null" />이고, <paramref name="value" />가 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않으며 검색 중에 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 요소가 발견되었습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-288"><paramref name="comparer" /> is <see langword="null" />, <paramref name="value" /> does not implement the <see cref="T:System.IComparable" /> interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.Sort" />
      </Docs>
    </Member>
    <Member MemberName="BinarySearch&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int BinarySearch&lt;T&gt; (T[] array, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch&lt;T&gt;(!!T[] array, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.BinarySearch``1(``0[],``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BinarySearch(Of T) (array As T(), value As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int BinarySearch(cli::array &lt;T&gt; ^ array, T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-289">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-289">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-290">검색할 정렬된 1차원 <see cref="T:System.Array" />(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-290">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="3f755-291">검색할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-291">The object to search for.</span></span></param>
        <summary><span data-ttu-id="3f755-292"><see cref="T:System.Array" />의 각 요소 및 지정한 개체에서 구현되는 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스를 사용하여 1차원으로 정렬된 전체 배열에서 특정 요소를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-292">Searches an entire one-dimensional sorted array for a specific element, using the <see cref="T:System.IComparable`1" /> generic interface implemented by each element of the <see cref="T:System.Array" /> and by the specified object.</span></span></summary>
        <returns><span data-ttu-id="3f755-293"><paramref name="value" />가 있는 경우 지정된 <paramref name="array" />에 있는 지정된 <paramref name="value" />의 인덱스이고, 그렇지 않으면 음수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-293">The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number.</span></span> <span data-ttu-id="3f755-294"><paramref name="value" />가 없고 <paramref name="value" />가 <paramref name="array" />에 있는 하나 이상의 요소보다 작은 경우 <paramref name="value" />보다 큰 첫째 요소 인덱스의 비트 보수인 음수가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-294">If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />.</span></span> <span data-ttu-id="3f755-295"><paramref name="value" />가 없고 <paramref name="value" />가 <paramref name="array" />에 있는 모든 요소보다 큰 경우 마지막 요소에 1을 더한 인덱스의 비트 보수인 음수가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-295">If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1).</span></span> <span data-ttu-id="3f755-296">이 메서드가 정렬되지 않은 <paramref name="array" />를 사용하여 호출되면 <paramref name="value" />가 <paramref name="array" />에 있더라도 반환 값이 올바르지 않고 음수가 반환될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-296">If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-297">이 메서드는 음수 인덱스를 포함 하는 검색 배열을 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-297">This method does not support searching arrays that contain negative indexes.</span></span> <span data-ttu-id="3f755-298">`array` 이 메서드를 호출 하기 전에 정렬 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-298">`array` must be sorted before calling this method.</span></span>  
  
 <span data-ttu-id="3f755-299">경우 `array` 지정 된 값이 포함 되지 않는 메서드가 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-299">If `array` does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="3f755-300">비트 보수 연산자를 적용할 수 있습니다 (~ C#에서는 `Not` Visual basic에서) 하는 인덱스를 생성할 음수 결과를 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-300">You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result  to produce an index.</span></span> <span data-ttu-id="3f755-301">이 인덱스 배열 크기와 같은지는 요소가 없습니다 보다 큰 `value` 배열에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-301">If this index is equal to the size of the array, there are no elements larger than `value` in the array.</span></span> <span data-ttu-id="3f755-302">그렇지 않으면 첫 번째 요소 보다 큰 인덱스를은 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-302">Otherwise, it is the index of the first element that is larger than `value`.</span></span>  
  
 <span data-ttu-id="3f755-303">`T` 구현 해야 합니다는 <xref:System.IComparable%601> 제네릭 인터페이스는 비교에 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-303">`T` must implement the <xref:System.IComparable%601> generic interface, which is used for comparisons.</span></span> <span data-ttu-id="3f755-304">요소 `array` 에 정의 된 정렬 순서에 따라 값이 증가 이미 정렬 되어야 합니다는 <xref:System.IComparable%601> 구현을 제공 합니다; 그렇지 않으면 결과 잘못 되었을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-304">The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable%601> implementation; otherwise, the result might be incorrect.</span></span>  
  
 <span data-ttu-id="3f755-305">중복 되는 요소가 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-305">Duplicate elements are allowed.</span></span> <span data-ttu-id="3f755-306">경우는 <xref:System.Array> 크거나 둘 이상의 요소가 포함 되어 `value`, 메서드, 각 항목 중 하나에 것 뿐 아니라 첫 번째 인덱스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-306">If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.</span></span>  
  
 <span data-ttu-id="3f755-307">`null` 항상 다른 참조 형식과;와 비교할 수 있습니다. 와 비교할 따라서 `null` 예외가 생성 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-307">`null` can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-308">테스트, 모든 요소에 대해 `value` 을 적절 한 전달 <xref:System.IComparable%601> 경우 `value` 은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-308">For every element tested, `value` is passed to the appropriate <xref:System.IComparable%601> implementation, even if `value` is `null`.</span></span> <span data-ttu-id="3f755-309">즉,는 <xref:System.IComparable%601> 구현 지정된 된 요소를 비교 하는 방법을 결정 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-309">That is, the <xref:System.IComparable%601> implementation determines how a given element compares to `null`.</span></span>  
  
 <span data-ttu-id="3f755-310">이 메서드는는 O (로그 `n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-310">This method is an O(log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-311">다음 코드 예제는 <xref:System.Array.Sort%60%601%28%60%600%5B%5D%29> 제네릭 메서드 오버 로드와 <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%29> 제네릭 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-311">The following code example demonstrates the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%29> generic method overload and the <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%29> generic method overload.</span></span> <span data-ttu-id="3f755-312">임의의 순서로 문자열 배열을 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-312">An array of strings is created, in no particular order.</span></span>  
  
 <span data-ttu-id="3f755-313">배열은 표시 하 고 정렬 하 고 다시 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-313">The array is displayed, sorted, and displayed again.</span></span> <span data-ttu-id="3f755-314">배열을 사용 하기 위해 정렬 해야는 <xref:System.Array.BinarySearch%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-314">Arrays must be sorted in order to use the <xref:System.Array.BinarySearch%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-315">에 대 한 호출에서 <xref:System.Array.Sort%2A> 및 <xref:System.Array.BinarySearch%2A> Visual Basic, C# 및 c + + 첫 번째 인수의 형식에서 제네릭 형식 매개 변수의 형식을 유추 하기 때문에 제네릭 메서드를 호출 하는 제네릭이 다른 보이지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-315">The calls to the <xref:System.Array.Sort%2A> and <xref:System.Array.BinarySearch%2A> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument.</span></span> <span data-ttu-id="3f755-316">사용 하는 경우는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) Microsoft intermediate language MSIL ()을 검사 하려면 확인할 수 있습니다는 제네릭 메서드의 호출 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-316">If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</span></span>  
  
 <span data-ttu-id="3f755-317"><xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%29> 하나에 없는 배열과 하나는, 제네릭 메서드 오버 로드는 다음 두 개의 문자열을 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-317">The <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%29> generic method overload is then used to search for two strings, one that is not in the array and one that is.</span></span> <span data-ttu-id="3f755-318">배열 및 반환 값은 <xref:System.Array.BinarySearch%2A> 메서드에 전달 되는 `ShowWhere` 문자열이 발견 되 고 그렇지 않은 경우 요소 검색 문자열은 사이 해당 배열에 있는 경우 인덱스 값을 표시 하는 제네릭 메서드를 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-318">The array and the return value of the <xref:System.Array.BinarySearch%2A> method are passed to the `ShowWhere` generic method, which displays the index value if the string is found, and otherwise the elements the search string would fall between if it were in the array.</span></span> <span data-ttu-id="3f755-319">인덱스는 문자열 배열에 없는 경우에 음수 하므로 `ShowWhere` 메서드를 사용 하며 비트 보수 (에서 ~ C# 및 Visual c + + 연산자 `Xor`Visual Basic의-1) 검색 보다 큰 목록에서 첫 번째 요소의 인덱스를 가져옵니다 str 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-319">The index is negative if the string is not in the array, so the `ShowWhere` method takes the bitwise complement (the ~ operator in C# and Visual C++, `Xor`-1 in Visual Basic) to obtain the index of the first element in the list that is larger than the search string.</span></span>  
  
 [!code-cpp[Array_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_SortSearch/cpp/source.cpp#1)]
 [!code-csharp[Array_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_SortSearch/cs/source.cs#1)]
 [!code-vb[Array_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_SortSearch/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-320"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-320"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3f755-321"><paramref name="T" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스를 구현하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-321"><paramref name="T" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface.</span></span></exception>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.Sort" />
      </Docs>
    </Member>
    <Member MemberName="BinarySearch&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int BinarySearch&lt;T&gt; (T[] array, T value, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch&lt;T&gt;(!!T[] array, !!T value, class System.Collections.Generic.IComparer`1&lt;!!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BinarySearch(Of T) (array As T(), value As T, comparer As IComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int BinarySearch(cli::array &lt;T&gt; ^ array, T value, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="value" Type="T" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-322">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-322">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-323">검색할 정렬된 1차원 <see cref="T:System.Array" />(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-323">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="3f755-324">검색할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-324">The object to search for.</span></span></param>
        <param name="comparer"><span data-ttu-id="3f755-325">요소를 비교할 때 사용하는 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-325">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.</span></span>  
  
 <span data-ttu-id="3f755-326">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-326">-or-</span></span>  
  
 <span data-ttu-id="3f755-327">각 요소의 <see cref="T:System.IComparable`1" /> 구현을 사용할 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-327"><see langword="null" /> to use the <see cref="T:System.IComparable`1" /> implementation of each element.</span></span></param>
        <summary><span data-ttu-id="3f755-328">지정한 <see cref="T:System.Collections.Generic.IComparer`1" /> 제네릭 인터페이스를 사용하여 1차원으로 정렬된 전체 배열에서 값을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-328">Searches an entire one-dimensional sorted array for a value using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</span></span></summary>
        <returns><span data-ttu-id="3f755-329"><paramref name="value" />가 있는 경우 지정된 <paramref name="array" />에 있는 지정된 <paramref name="value" />의 인덱스이고, 그렇지 않으면 음수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-329">The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number.</span></span> <span data-ttu-id="3f755-330"><paramref name="value" />가 없고 <paramref name="value" />가 <paramref name="array" />에 있는 하나 이상의 요소보다 작은 경우 <paramref name="value" />보다 큰 첫째 요소 인덱스의 비트 보수인 음수가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-330">If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />.</span></span> <span data-ttu-id="3f755-331"><paramref name="value" />가 없고 <paramref name="value" />가 <paramref name="array" />에 있는 모든 요소보다 큰 경우 마지막 요소에 1을 더한 인덱스의 비트 보수인 음수가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-331">If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1).</span></span> <span data-ttu-id="3f755-332">이 메서드가 정렬되지 않은 <paramref name="array" />를 사용하여 호출되면 <paramref name="value" />가 <paramref name="array" />에 있더라도 반환 값이 올바르지 않고 음수가 반환될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-332">If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-333">이 메서드는 음수 인덱스를 포함 하는 검색 배열을 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-333">This method does not support searching arrays that contain negative indexes.</span></span> <span data-ttu-id="3f755-334">`array` 이 메서드를 호출 하기 전에 정렬 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-334">`array` must be sorted before calling this method.</span></span>  
  
 <span data-ttu-id="3f755-335">경우는 <xref:System.Array> 지정 된 값이 포함 되지 않는 메서드가 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-335">If the <xref:System.Array> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="3f755-336">비트 보수 연산자를 적용할 수 있습니다 (~ C#에서는 `Not` Visual basic에서) 하는 인덱스를 생성할 음수 결과를 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-336">You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result to produce an index.</span></span> <span data-ttu-id="3f755-337">이 인덱스 배열 크기와 같은지는 요소가 없습니다 보다 큰 `value` 배열에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-337">If this index is equal to the size of the array, there are no elements larger than `value` in the array.</span></span> <span data-ttu-id="3f755-338">그렇지 않으면 첫 번째 요소 보다 큰 인덱스를은 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-338">Otherwise, it is the index of the first element that is larger than `value`.</span></span>  
  
 <span data-ttu-id="3f755-339">비교자는 요소를 비교 하는 방법을 사용자 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-339">The comparer customizes how the elements are compared.</span></span> <span data-ttu-id="3f755-340">예를 들어, 사용할 수는 <xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType> 으로 대/소문자 구분 문자열 검색을 수행 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-340">For example, you can use a <xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType> as the comparer to perform case-insensitive string searches.</span></span>  
  
 <span data-ttu-id="3f755-341">경우 `comparer` 않습니다 `null`, 요소의 `array` 사용 하 여 지정된 된 값과 비교할 <xref:System.Collections.Generic.IComparer%601> 제네릭 인터페이스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-341">If `comparer` is not `null`, the elements of `array` are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> generic interface implementation.</span></span> <span data-ttu-id="3f755-342">요소 `array` 값으로 정의 된 정렬 순서에 따라 증가 하도록 정렬 되어 있어야 `comparer`, 그렇지 않으면 결과가 올바르지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-342">The elements of `array` must already be sorted in increasing value according to the sort order defined by `comparer`; otherwise, the result might be incorrect.</span></span>  
  
 <span data-ttu-id="3f755-343">경우 `comparer` 은 `null`, 비교를 수행를 사용 하는 <xref:System.IComparable%601> 에서 제공 하는 제네릭 인터페이스 구현을 `T`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-343">If `comparer` is `null`, the comparison is done using the <xref:System.IComparable%601> generic interface implementation provided by `T`.</span></span> <span data-ttu-id="3f755-344">요소 `array` 에 정의 된 정렬 순서에 따라 값이 증가 이미 정렬 되어야 합니다는 <xref:System.IComparable%601> 구현을 제공 합니다; 그렇지 않으면 결과 잘못 되었을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-344">The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable%601> implementation; otherwise, the result might be incorrect.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-345">경우 `comparer` 은 `null` 및 `value` 를 구현 하지 않습니다는 <xref:System.IComparable%601> 제네릭 인터페이스를 요소의 `array` 에 대 한 테스트 되지 않습니다 <xref:System.IComparable%601> 검색을 시작 하기 전에.</span><span class="sxs-lookup"><span data-stu-id="3f755-345">If `comparer` is `null` and `value` does not implement the <xref:System.IComparable%601> generic interface, the elements of `array` are not tested for <xref:System.IComparable%601> before the search begins.</span></span> <span data-ttu-id="3f755-346">검색 구현 하지 않는 요소가 발견 하는 경우 예외가 throw 됩니다 <xref:System.IComparable%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-346">An exception is thrown if the search encounters an element that does not implement <xref:System.IComparable%601>.</span></span>  
  
 <span data-ttu-id="3f755-347">중복 되는 요소가 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-347">Duplicate elements are allowed.</span></span> <span data-ttu-id="3f755-348">경우는 <xref:System.Array> 크거나 둘 이상의 요소가 포함 되어 `value`, 메서드, 각 항목 중 하나에 것 뿐 아니라 첫 번째 인덱스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-348">If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.</span></span>  
  
 <span data-ttu-id="3f755-349">`null` 항상 다른 참조 형식과;와 비교할 수 있습니다. 와 비교할 따라서 `null` 예외가 생성 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-349">`null` can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-350">테스트, 모든 요소에 대해 `value` 을 적절 한 전달 <xref:System.IComparable%601> 경우 `value` 은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-350">For every element tested, `value` is passed to the appropriate <xref:System.IComparable%601> implementation, even if `value` is `null`.</span></span> <span data-ttu-id="3f755-351">즉,는 <xref:System.IComparable%601> 구현 지정된 된 요소를 비교 하는 방법을 결정 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-351">That is, the <xref:System.IComparable%601> implementation determines how a given element compares to `null`.</span></span>  
  
 <span data-ttu-id="3f755-352">이 메서드는는 O (로그 `n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-352">This method is an O(log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-353">다음 예제는 <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 제네릭 메서드 오버 로드와 <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 제네릭 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-353">The following example demonstrates the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload and the <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload.</span></span>  
  
 <span data-ttu-id="3f755-354">코드 예제에서는 문자열에 대 한 대체 비교자 정의 `ReverseCompare`를 구현 하는 `IComparer<string>` (`IComparer(Of String)` Visual Basic의 `IComparer<String^>` Visual c + +에서) 제네릭 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-354">The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="3f755-355">비교자를 호출 하 여는 <xref:System.String.CompareTo%28System.String%29> 메서드를 문자열 높음-낮음 낮은-높은 대신 순서로 정렬 되도록 비교 대상의 순서를 반대로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-355">The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</span></span>  
  
 <span data-ttu-id="3f755-356">배열은 표시 하 고 정렬 하 고 다시 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-356">The array is displayed, sorted, and displayed again.</span></span> <span data-ttu-id="3f755-357">배열을 사용 하기 위해 정렬 해야는 <xref:System.Array.BinarySearch%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-357">Arrays must be sorted in order to use the <xref:System.Array.BinarySearch%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-358">에 대 한 호출에서 <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 및 <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> Visual Basic, C# 및 c + + 첫 번째 인수의 형식에서 제네릭 형식 매개 변수의 형식을 유추 하기 때문에 제네릭 메서드를 호출 하는 제네릭이 다른 보이지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-358">The calls to the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> and <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument.</span></span> <span data-ttu-id="3f755-359">사용 하는 경우는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) Microsoft intermediate language MSIL ()을 검사 하려면 확인할 수 있습니다는 제네릭 메서드의 호출 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-359">If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</span></span>  
  
 <span data-ttu-id="3f755-360"><xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 하나에 없는 배열과 하나는, 제네릭 메서드 오버 로드는 다음 두 개의 문자열을 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-360">The <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload is then used to search for two strings, one that is not in the array and one that is.</span></span> <span data-ttu-id="3f755-361">배열 및 반환 값은 <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 메서드에 전달 되는 `ShowWhere` 문자열이 발견 되 고 그렇지 않은 경우 요소 검색 문자열은 사이 해당 배열에 있는 경우 인덱스 값을 표시 하는 제네릭 메서드를 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-361">The array and the return value of the <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> method are passed to the `ShowWhere` generic method, which displays the index value if the string is found, and otherwise the elements the search string would fall between if it were in the array.</span></span> <span data-ttu-id="3f755-362">인덱스는 문자열이 n 경우 음수 배열에 하므로 `ShowWhere` 메서드를 사용 하며 비트 보수 (에서 ~ C# 및 Visual c + + 연산자 `Xor` Visual Basic의-1) 검색 stri 보다 큰 목록에서 첫 번째 요소의 인덱스를 가져옵니다 ng 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-362">The index is negative if the string is not n the array, so the `ShowWhere` method takes the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) to obtain the index of the first element in the list that is larger than the search string.</span></span>  
  
 [!code-cpp[Array_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_SortSearchComparer/cpp/source.cpp#1)]
 [!code-csharp[Array_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_SortSearchComparer/cs/source.cs#1)]
 [!code-vb[Array_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_SortSearchComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-363"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-363"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-364"><paramref name="comparer" />가 <see langword="null" />이고 <paramref name="value" />가 <paramref name="array" />의 요소와 호환되지 않는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-364"><paramref name="comparer" /> is <see langword="null" />, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3f755-365"><paramref name="comparer" />가 <see langword="null" />이고 <paramref name="T" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스를 구현하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-365"><paramref name="comparer" /> is <see langword="null" />, and <paramref name="T" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface</span></span></exception>
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.Sort" />
      </Docs>
    </Member>
    <Member MemberName="BinarySearch&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int BinarySearch&lt;T&gt; (T[] array, int index, int length, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch&lt;T&gt;(!!T[] array, int32 index, int32 length, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BinarySearch(Of T) (array As T(), index As Integer, length As Integer, value As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int BinarySearch(cli::array &lt;T&gt; ^ array, int index, int length, T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-366">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-366">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-367">검색할 정렬된 1차원 <see cref="T:System.Array" />(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-367">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="index"><span data-ttu-id="3f755-368">검색할 범위의 시작 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-368">The starting index of the range to search.</span></span></param>
        <param name="length"><span data-ttu-id="3f755-369">검색할 범위의 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-369">The length of the range to search.</span></span></param>
        <param name="value"><span data-ttu-id="3f755-370">검색할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-370">The object to search for.</span></span></param>
        <summary><span data-ttu-id="3f755-371"><see cref="T:System.Array" />의 각 요소 및 지정한 값에서 구현되는 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스를 사용하여 1차원으로 정렬된 배열의 요소 범위에서 값을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-371">Searches a range of elements in a one-dimensional sorted array for a value, using the <see cref="T:System.IComparable`1" /> generic interface implemented by each element of the <see cref="T:System.Array" /> and by the specified value.</span></span></summary>
        <returns><span data-ttu-id="3f755-372"><paramref name="value" />가 있는 경우 지정된 <paramref name="array" />에 있는 지정된 <paramref name="value" />의 인덱스이고, 그렇지 않으면 음수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-372">The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number.</span></span> <span data-ttu-id="3f755-373"><paramref name="value" />가 없고 <paramref name="value" />가 <paramref name="array" />에 있는 하나 이상의 요소보다 작은 경우 <paramref name="value" />보다 큰 첫째 요소 인덱스의 비트 보수인 음수가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-373">If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />.</span></span> <span data-ttu-id="3f755-374"><paramref name="value" />가 없고 <paramref name="value" />가 <paramref name="array" />에 있는 모든 요소보다 큰 경우 마지막 요소에 1을 더한 인덱스의 비트 보수인 음수가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-374">If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1).</span></span> <span data-ttu-id="3f755-375">이 메서드가 정렬되지 않은 <paramref name="array" />를 사용하여 호출되면 <paramref name="value" />가 <paramref name="array" />에 있더라도 반환 값이 올바르지 않고 음수가 반환될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-375">If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-376">이 메서드는 음수 인덱스를 포함 하는 검색 배열을 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-376">This method does not support searching arrays that contain negative indexes.</span></span> <span data-ttu-id="3f755-377">`array` 이 메서드를 호출 하기 전에 정렬 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-377">`array` must be sorted before calling this method.</span></span>  
  
 <span data-ttu-id="3f755-378">배열에 지정된 된 값이 없는 경우 메서드는 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-378">If the array does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="3f755-379">비트 보수 연산자를 적용할 수 있습니다 (~ C#에서는 `Not` Visual basic에서) 하는 인덱스를 생성할 음수 결과를 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-379">You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result  to produce an index.</span></span> <span data-ttu-id="3f755-380">이 인덱스 배열 크기와 같은지는 요소가 없습니다 보다 큰 `value` 배열에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-380">If this index is equal to the size of the array, there are no elements larger than `value` in the array.</span></span> <span data-ttu-id="3f755-381">그렇지 않으면 첫 번째 요소 보다 큰 인덱스를은 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-381">Otherwise, it is the index of the first element that is larger than `value`.</span></span>  
  
 <span data-ttu-id="3f755-382">`T` 구현 해야 합니다는 <xref:System.IComparable%601> 제네릭 인터페이스는 비교에 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-382">`T` must implement the <xref:System.IComparable%601> generic interface, which is used for comparisons.</span></span> <span data-ttu-id="3f755-383">요소 `array` 에 정의 된 정렬 순서에 따라 값이 증가 이미 정렬 되어야 합니다는 <xref:System.IComparable%601> 구현을 제공 합니다; 그렇지 않으면 결과 잘못 되었을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-383">The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable%601> implementation; otherwise, the result might be incorrect.</span></span>  
  
 <span data-ttu-id="3f755-384">중복 되는 요소가 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-384">Duplicate elements are allowed.</span></span> <span data-ttu-id="3f755-385">경우는 <xref:System.Array> 크거나 둘 이상의 요소가 포함 되어 `value`, 메서드, 각 항목 중 하나에 것 뿐 아니라 첫 번째 인덱스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-385">If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.</span></span>  
  
 <span data-ttu-id="3f755-386">`null` 항상 다른 참조 형식과;와 비교할 수 있습니다. 와 비교할 따라서 `null` 예외가 생성 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-386">`null` can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-387">테스트, 모든 요소에 대해 `value` 을 적절 한 전달 <xref:System.IComparable%601> 경우 `value` 은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-387">For every element tested, `value` is passed to the appropriate <xref:System.IComparable%601> implementation, even if `value` is `null`.</span></span> <span data-ttu-id="3f755-388">즉,는 <xref:System.IComparable%601> 구현 지정된 된 요소를 비교 하는 방법을 결정 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-388">That is, the <xref:System.IComparable%601> implementation determines how a given element compares to `null`.</span></span>  
  
 <span data-ttu-id="3f755-389">이 메서드는는 O (로그 `n`) 작업, 여기서 `n` 은 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-389">This method is an O(log `n`) operation, where `n` is `length`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-390"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-390"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-391"><paramref name="index" />가 <paramref name="array" />의 하한값보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-391"><paramref name="index" /> is less than the lower bound of <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="3f755-392">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-392">-or-</span></span>  
  
 <span data-ttu-id="3f755-393"><paramref name="length" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-393"><paramref name="length" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-394"><paramref name="index" /> 및 <paramref name="length" />가 <paramref name="array" />의 올바른 범위를 지정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-394"><paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="3f755-395">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-395">-or-</span></span>  
  
 <span data-ttu-id="3f755-396"><paramref name="value" />의 형식이 <paramref name="array" />의 요소와 호환되지 않는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-396"><paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3f755-397"><paramref name="T" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스를 구현하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-397"><paramref name="T" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface.</span></span></exception>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.Sort" />
      </Docs>
    </Member>
    <Member MemberName="BinarySearch&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int BinarySearch&lt;T&gt; (T[] array, int index, int length, T value, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BinarySearch&lt;T&gt;(!!T[] array, int32 index, int32 length, !!T value, class System.Collections.Generic.IComparer`1&lt;!!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BinarySearch(Of T) (array As T(), index As Integer, length As Integer, value As T, comparer As IComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int BinarySearch(cli::array &lt;T&gt; ^ array, int index, int length, T value, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="value" Type="T" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-398">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-398">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-399">검색할 정렬된 1차원 <see cref="T:System.Array" />(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-399">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="index"><span data-ttu-id="3f755-400">검색할 범위의 시작 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-400">The starting index of the range to search.</span></span></param>
        <param name="length"><span data-ttu-id="3f755-401">검색할 범위의 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-401">The length of the range to search.</span></span></param>
        <param name="value"><span data-ttu-id="3f755-402">검색할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-402">The object to search for.</span></span></param>
        <param name="comparer"><span data-ttu-id="3f755-403">요소를 비교할 때 사용하는 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-403">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.</span></span>  
  
 <span data-ttu-id="3f755-404">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-404">-or-</span></span>  
  
 <span data-ttu-id="3f755-405">각 요소의 <see cref="T:System.IComparable`1" /> 구현을 사용할 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-405"><see langword="null" /> to use the <see cref="T:System.IComparable`1" /> implementation of each element.</span></span></param>
        <summary><span data-ttu-id="3f755-406">지정한 <see cref="T:System.Collections.Generic.IComparer`1" /> 제네릭 인터페이스를 사용하여 1차원으로 정렬된 배열의 요소 범위에서 값을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-406">Searches a range of elements in a one-dimensional sorted array for a value, using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</span></span></summary>
        <returns><span data-ttu-id="3f755-407"><paramref name="value" />가 있는 경우 지정된 <paramref name="array" />에 있는 지정된 <paramref name="value" />의 인덱스이고, 그렇지 않으면 음수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-407">The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number.</span></span> <span data-ttu-id="3f755-408"><paramref name="value" />가 없고 <paramref name="value" />가 <paramref name="array" />에 있는 하나 이상의 요소보다 작은 경우 <paramref name="value" />보다 큰 첫째 요소 인덱스의 비트 보수인 음수가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-408">If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />.</span></span> <span data-ttu-id="3f755-409"><paramref name="value" />가 없고 <paramref name="value" />가 <paramref name="array" />에 있는 모든 요소보다 큰 경우 마지막 요소에 1을 더한 인덱스의 비트 보수인 음수가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-409">If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1).</span></span> <span data-ttu-id="3f755-410">이 메서드가 정렬되지 않은 <paramref name="array" />를 사용하여 호출되면 <paramref name="value" />가 <paramref name="array" />에 있더라도 반환 값이 올바르지 않고 음수가 반환될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-410">If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-411">이 메서드는 음수 인덱스를 포함 하는 검색 배열을 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-411">This method does not support searching arrays that contain negative indexes.</span></span> <span data-ttu-id="3f755-412">`array` 이 메서드를 호출 하기 전에 정렬 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-412">`array` must be sorted before calling this method.</span></span>  
  
 <span data-ttu-id="3f755-413">배열에 지정된 된 값이 없는 경우 메서드는 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-413">If the array does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="3f755-414">비트 보수 연산자를 적용할 수 있습니다 (~ C#에서는 `Not` Visual basic에서) 하는 인덱스를 생성할 음수 결과를 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-414">You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result  to produce an index.</span></span> <span data-ttu-id="3f755-415">이 인덱스 배열 크기와 같은지는 요소가 없습니다 보다 큰 `value` 배열에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-415">If this index is equal to the size of the array, there are no elements larger than `value` in the array.</span></span> <span data-ttu-id="3f755-416">그렇지 않으면 첫 번째 요소 보다 큰 인덱스를은 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-416">Otherwise, it is the index of the first element that is larger than `value`.</span></span>  
  
 <span data-ttu-id="3f755-417">비교자는 요소를 비교 하는 방법을 사용자 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-417">The comparer customizes how the elements are compared.</span></span> <span data-ttu-id="3f755-418">예를 들어, 사용할 수는 <xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType> 으로 대/소문자 구분 문자열 검색을 수행 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-418">For example, you can use a <xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType> as the comparer to perform case-insensitive string searches.</span></span>  
  
 <span data-ttu-id="3f755-419">경우 `comparer` 않습니다 `null`, 요소의 `array` 사용 하 여 지정된 된 값과 비교할 <xref:System.Collections.Generic.IComparer%601> 제네릭 인터페이스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-419">If `comparer` is not `null`, the elements of `array` are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> generic interface implementation.</span></span> <span data-ttu-id="3f755-420">요소 `array` 값으로 정의 된 정렬 순서에 따라 증가 하도록 정렬 되어 있어야 `comparer`, 그렇지 않으면 결과가 올바르지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-420">The elements of `array` must already be sorted in increasing value according to the sort order defined by `comparer`; otherwise, the result might be incorrect.</span></span>  
  
 <span data-ttu-id="3f755-421">경우 `comparer` 은 `null`, 비교를 수행를 사용 하는 <xref:System.IComparable%601> 형식을 위해 제공 되는 제네릭 인터페이스 구현을 `T`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-421">If `comparer` is `null`, the comparison is done using the <xref:System.IComparable%601> generic interface implementation provided for type `T`.</span></span> <span data-ttu-id="3f755-422">요소 `array` 에 정의 된 정렬 순서에 따라 값이 증가 이미 정렬 되어야 합니다는 <xref:System.IComparable%601> 구현을 제공 합니다; 그렇지 않으면 결과 잘못 되었을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-422">The elements of `array` must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable%601> implementation; otherwise, the result might be incorrect.</span></span>  
  
 <span data-ttu-id="3f755-423">중복 되는 요소가 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-423">Duplicate elements are allowed.</span></span> <span data-ttu-id="3f755-424">경우는 <xref:System.Array> 크거나 둘 이상의 요소가 포함 되어 `value`, 메서드, 각 항목 중 하나에 것 뿐 아니라 첫 번째 인덱스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-424">If the <xref:System.Array> contains more than one element equal to `value`, the method returns the index of only one of the occurrences, and not necessarily the first one.</span></span>  
  
 <span data-ttu-id="3f755-425">`null` 항상 다른 참조 형식과;와 비교할 수 있습니다. 와 비교할 따라서 `null` 사용 하는 경우 예외를 생성 하지 않는 <xref:System.IComparable%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-425">`null` can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception when using <xref:System.IComparable%601>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-426">테스트, 모든 요소에 대해 `value` 을 적절 한 전달 <xref:System.IComparable%601> 경우 `value` 은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-426">For every element tested, `value` is passed to the appropriate <xref:System.IComparable%601> implementation, even if `value` is `null`.</span></span> <span data-ttu-id="3f755-427">즉,는 <xref:System.IComparable%601> 구현 지정된 된 요소를 비교 하는 방법을 결정 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-427">That is, the <xref:System.IComparable%601> implementation determines how a given element compares to `null`.</span></span>  
  
 <span data-ttu-id="3f755-428">이 메서드는는 O (로그 `n`) 작업, 여기서 `n` 은 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-428">This method is an O(log `n`) operation, where `n` is `length`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-429"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-429"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-430"><paramref name="index" />가 <paramref name="array" />의 하한값보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-430"><paramref name="index" /> is less than the lower bound of <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="3f755-431">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-431">-or-</span></span>  
  
 <span data-ttu-id="3f755-432"><paramref name="length" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-432"><paramref name="length" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-433"><paramref name="index" /> 및 <paramref name="length" />가 <paramref name="array" />의 올바른 범위를 지정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-433"><paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="3f755-434">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-434">-or-</span></span>  
  
 <span data-ttu-id="3f755-435"><paramref name="comparer" />가 <see langword="null" />이고 <paramref name="value" />가 <paramref name="array" />의 요소와 호환되지 않는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-435"><paramref name="comparer" /> is <see langword="null" />, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3f755-436"><paramref name="comparer" />가 <see langword="null" />이고 <paramref name="T" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스를 구현하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-436"><paramref name="comparer" /> is <see langword="null" />, and <paramref name="T" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface.</span></span></exception>
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.Sort" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public static void Clear (Array array, int index, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Clear(class System.Array array, int32 index, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Clear(System.Array,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Clear(Array ^ array, int index, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="3f755-437">포함된 요소를 지울 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-437">The array whose elements need to be cleared.</span></span></param>
        <param name="index"><span data-ttu-id="3f755-438">지울 요소 범위의 시작 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-438">The starting index of the range of elements to clear.</span></span></param>
        <param name="length"><span data-ttu-id="3f755-439">지울 요소의 개수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-439">The number of elements to clear.</span></span></param>
        <summary><span data-ttu-id="3f755-440">배열의 각 요소 형식의 기본값으로 요소의 범위를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-440">Sets a range of elements in an array to the default value of each element type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-441">이 메서드는 배열의 각 요소에에서 요소 형식의 기본값으로 다시 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-441">This method resets each element in an array to the element type's default value.</span></span> <span data-ttu-id="3f755-442">참조 형식의 요소를 설정 하는 것 (포함 하 여 <xref:System.String> 요소)를 `null`, 다음 표에 표시 된 기본값으로 값 형식의 요소를 가져오거나 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-442">It sets elements of reference types (including <xref:System.String> elements) to `null`, and sets elements of value types to the default values shown in the following table.</span></span>  
  
|<span data-ttu-id="3f755-443">형식</span><span class="sxs-lookup"><span data-stu-id="3f755-443">Type</span></span>|<span data-ttu-id="3f755-444">값</span><span class="sxs-lookup"><span data-stu-id="3f755-444">Value</span></span>|  
|----------|-----------|  
|<xref:System.Boolean>|`false`|  
|<span data-ttu-id="3f755-445">모든 정수 계열 및 부동 소수점 숫자 형식</span><span class="sxs-lookup"><span data-stu-id="3f755-445">All integral and floating point numeric types</span></span>|<span data-ttu-id="3f755-446">0 (영)</span><span class="sxs-lookup"><span data-stu-id="3f755-446">0 (zero)</span></span>|  
|<xref:System.DateTime>|<xref:System.DateTime.MinValue?displayProperty=nameWithType>|  
|<span data-ttu-id="3f755-447">다른 값 형식</span><span class="sxs-lookup"><span data-stu-id="3f755-447">Other value types</span></span>|<span data-ttu-id="3f755-448">해당 형식의 필드의 기본값</span><span class="sxs-lookup"><span data-stu-id="3f755-448">Default value of the type's fields</span></span>|  
  
 <span data-ttu-id="3f755-449">범위의 요소 줄 바꿈을 행 다차원 배열에서 지워집니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-449">The range of cleared elements wrap from row to row in a multi-dimensional array.</span></span>  
  
 <span data-ttu-id="3f755-450">이 메서드는만; 요소의 값을 지웁니다. 요소 자체는 삭제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-450">This method only clears the values of the elements; it does not delete the elements themselves.</span></span> <span data-ttu-id="3f755-451">배열 크기가 고정 된 따라서 요소 추가 또는 제거할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-451">An array has a fixed size; therefore, elements cannot be added or removed.</span></span>  
  
 <span data-ttu-id="3f755-452">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-452">This method is an O(`n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-453">다음 예제에서는 <xref:System.Array.Clear%2A> 메서드를 1 차원, 2, 차원 및 3 차원 배열에 정수 값을 다시 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-453">The following example uses the <xref:System.Array.Clear%2A> method to reset integer values in a one-dimensional, two-dimensional, and three-dimensional array.</span></span>  
  
 [!code-csharp[System.Array.Clear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Clear/cs/example.cs#1)]
 [!code-vb[System.Array.Clear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Clear/vb/example.vb#1)]  
  
 <span data-ttu-id="3f755-454">다음 예제에서는 정의 `TimeZoneTime` 구조에 포함 하는 <xref:System.TimeZoneInfo> 필드와 <xref:System.DateTimeOffset> 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-454">The following example defines a `TimeZoneTime` structure that includes a <xref:System.TimeZoneInfo> field and a <xref:System.DateTimeOffset> field.</span></span> <span data-ttu-id="3f755-455">그런 다음 호출 하는 <xref:System.Array.Clear%2A> 의 두 요소 배열에서 요소 중 하나를 지우려면 메서드 `TimeZoneTime` 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-455">It then calls the <xref:System.Array.Clear%2A> method to clear one element in a two-element array of `TimeZoneTime` values.</span></span> <span data-ttu-id="3f755-456">기본값을 지워진된 요소 값을 설정 하는 메서드는 <xref:System.TimeZoneInfo> 개체 이며, `null`, 및의 기본값은 <xref:System.DateTimeOffset> 개체 이며, <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-456">The method sets the value of the cleared element to the default value of a <xref:System.TimeZoneInfo> object, which is `null`, and the default value of a <xref:System.DateTimeOffset> object, which is <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Array.Clear#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Clear/cs/clearstruct1.cs#2)]
 [!code-vb[System.Array.Clear#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Clear/vb/clearstruct1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-457"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-457"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="3f755-458"><paramref name="index" />가 <paramref name="array" />의 하한값보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-458"><paramref name="index" /> is less than the lower bound of <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="3f755-459">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-459">-or-</span></span>  
  
 <span data-ttu-id="3f755-460"><paramref name="length" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-460"><paramref name="length" /> is less than zero.</span></span>  
  
 <span data-ttu-id="3f755-461">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-461">-or-</span></span>  
  
 <span data-ttu-id="3f755-462"><paramref name="index" /> 및 <paramref name="length" /> 합계가 <paramref name="array" />의 크기보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-462">The sum of <paramref name="index" /> and <paramref name="length" /> is greater than the size of <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3f755-463"><see cref="T:System.Array" />의 부분 복사본을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-463">Creates a shallow copy of the <see cref="T:System.Array" />.</span></span></summary>
        <returns><span data-ttu-id="3f755-464"><see cref="T:System.Array" />의 부분 복사본입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-464">A shallow copy of the <see cref="T:System.Array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-465">단순 복사본을는 <xref:System.Array> 의 요소에만 복사는 <xref:System.Array>, 여부은 참조 형식 또는 값 형식 참조에서 참조 하는 개체를 복사 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-465">A shallow copy of an <xref:System.Array> copies only the elements of the <xref:System.Array>, whether they are reference types or value types, but it does not copy the objects that the references refer to.</span></span> <span data-ttu-id="3f755-466">새 참조 <xref:System.Array> 동일 하 게 지점 개체는 원래에서 참조 <xref:System.Array> 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-466">The references in the new <xref:System.Array> point to the same objects that the references in the original <xref:System.Array> point to.</span></span>  
  
 <span data-ttu-id="3f755-467">전체 복사본 하는 반면, 한 <xref:System.Array> 요소와 해당 요소에서 직접 또는 간접적으로 참조 하는 모든 항목을 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-467">In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="3f755-468">복제본은 동일한 <xref:System.Type> 원래 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-468">The clone is of the same <xref:System.Type> as the original <xref:System.Array>.</span></span>  
  
 <span data-ttu-id="3f755-469">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Array.Length%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-469">This method is an O(`n`) operation, where `n` is <xref:System.Array.Length%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-470">다음 코드 예제에서는 복제본을 <xref:System.Globalization.CultureInfo?displayProperty=nameWithType> 배열 하 고 단순 복사본의 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-470">The following code example clones a <xref:System.Globalization.CultureInfo?displayProperty=nameWithType> array and demonstrates the behavior of a shallow copy.</span></span>  
  
 [!code-cpp[System.Array.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Clone/CPP/arrayclone.cpp#1)]
 [!code-csharp[System.Array.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Clone/CS/arrayclone.cs#1)]
 [!code-vb[System.Array.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Clone/VB/arrayclone.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Array.Copy" />
        <altmember cref="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ConstrainedCopy">
      <MemberSignature Language="C#" Value="public static void ConstrainedCopy (Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ConstrainedCopy(class System.Array sourceArray, int32 sourceIndex, class System.Array destinationArray, int32 destinationIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ConstrainedCopy (sourceArray As Array, sourceIndex As Integer, destinationArray As Array, destinationIndex As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ConstrainedCopy(Array ^ sourceArray, int sourceIndex, Array ^ destinationArray, int destinationIndex, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArray" Type="System.Array" />
        <Parameter Name="sourceIndex" Type="System.Int32" />
        <Parameter Name="destinationArray" Type="System.Array" />
        <Parameter Name="destinationIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceArray"><span data-ttu-id="3f755-471">복사할 데이터가 포함된 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-471">The <see cref="T:System.Array" /> that contains the data to copy.</span></span></param>
        <param name="sourceIndex"><span data-ttu-id="3f755-472">복사가 시작되는 <c>sourceArray</c>의 인덱스를 나타내는 32비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-472">A 32-bit integer that represents the index in the <c>sourceArray</c> at which copying begins.</span></span></param>
        <param name="destinationArray"><span data-ttu-id="3f755-473">데이터를 받는 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-473">The <see cref="T:System.Array" /> that receives the data.</span></span></param>
        <param name="destinationIndex"><span data-ttu-id="3f755-474">저장이 시작되는 <c>destinationArray</c>의 인덱스를 나타내는 32비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-474">A 32-bit integer that represents the index in the <c>destinationArray</c> at which storing begins.</span></span></param>
        <param name="length"><span data-ttu-id="3f755-475">복사할 요소의 개수를 나타내는 32비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-475">A 32-bit integer that represents the number of elements to copy.</span></span></param>
        <summary><span data-ttu-id="3f755-476"><see cref="T:System.Array" />의 요소 범위를 지정한 소스 인덱스부터 복사하여 지정된 대상 인덱스부터 시작하는 다른 <see cref="T:System.Array" />에 붙여 넣습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-476">Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index.</span></span>  <span data-ttu-id="3f755-477">복사가 완료되지 않으면 모든 변경 내용이 취소되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-477">Guarantees that all changes are undone if the copy does not succeed completely.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-478">`sourceArray` 및 `destinationArray` 매개 변수에 동일한 차원 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-478">The `sourceArray` and `destinationArray` parameters must have the same number of dimensions.</span></span>  <span data-ttu-id="3f755-479">`sourceArray` 형식은 동일 하거나에서 파생 된는 `destinationArray` 입력; 그렇지 않으면는 <xref:System.ArrayTypeMismatchException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-479">The `sourceArray` type must be the same as or derived from the `destinationArray` type; otherwise, an <xref:System.ArrayTypeMismatchException> is thrown.</span></span>  <span data-ttu-id="3f755-480">와 달리 <xref:System.Array.Copy%2A>, <xref:System.Array.ConstrainedCopy%2A> 작업을 수행 하기 전에 배열 형식 호환성을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-480">Unlike <xref:System.Array.Copy%2A>, <xref:System.Array.ConstrainedCopy%2A> verifies the compatibility of the array types before performing any operation.</span></span>  
  
 <span data-ttu-id="3f755-481">다차원 배열 간에 복사 하는 경우 긴 1 차원 배열 처럼 동작 하며 행 (또는 열)은 개념상 놓여집니다 종단 간 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-481">When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end-to-end.</span></span> <span data-ttu-id="3f755-482">예를 들어 첫 번째 행 (또는 열)의 모든 4 개 요소와 두 번째 행 (또는 열)의 처음 두 요소 배열에 3 개의 행 (또는 열) 네 가지 요소로 된, 각 복사 6 개 요소 배열의 시작 부분에서 복사는 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-482">For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column).</span></span> <span data-ttu-id="3f755-483">세 번째 행 (또는 열)의 두 번째 요소부터 복사 하려면 `sourceIndex` 2를 더한 두 번째 행 (또는 열)의 길이 더한 첫 번째 행 (또는 열)의 상한을 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-483">To start copying from the second element of the third row (or column), `sourceIndex` must be the upper bound of the first row (or column) plus the length of the second row (or column) plus two.</span></span>  
  
 <span data-ttu-id="3f755-484">경우 `sourceArray` 및 `destinationArray` 겹치는 경우이 메서드는 동작 처럼의 원래 값 `sourceArray` 하기 전에 임시 위치에 보존 된 `destinationArray` 를 덮어씁니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-484">If `sourceArray` and `destinationArray` overlap, this method behaves as if the original values of `sourceArray` were preserved in a temporary location before `destinationArray` is overwritten.</span></span>  
  
 <span data-ttu-id="3f755-485">[C++]</span><span class="sxs-lookup"><span data-stu-id="3f755-485">[C++]</span></span>  
  
 <span data-ttu-id="3f755-486">이 메서드는 표준 C/c + + 함수와 동일 `memmove`이 아니라 `memcpy`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-486">This method is equivalent to the standard C/C++ function `memmove`, not `memcpy`.</span></span>  
  
 <span data-ttu-id="3f755-487">참조 형식 또는 값 형식의 배열을 배열의 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-487">The arrays can be reference-type arrays or value-type arrays.</span></span>  <span data-ttu-id="3f755-488">경우 `sourceArray` 및 `destinationArray` 두 참조 형식 배열 파일이 나 두 배열 형식의 <xref:System.Object>, 단순 복사가 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-488">If `sourceArray` and `destinationArray` are both reference-type arrays or are both arrays of type <xref:System.Object>, a shallow copy is performed.</span></span> <span data-ttu-id="3f755-489">단순 복사본을는 <xref:System.Array> 는 새로운 <xref:System.Array> 원본과 같은 요소에 대 한 참조가 포함 된 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-489">A shallow copy of an <xref:System.Array> is a new <xref:System.Array> containing references to the same elements as the original <xref:System.Array>.</span></span> <span data-ttu-id="3f755-490">요소는 요소에서 참조 하는 대상은 복사 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-490">The elements themselves or anything referenced by the elements are not copied.</span></span> <span data-ttu-id="3f755-491">전체 복사본 하는 반면, 한 <xref:System.Array> 요소와 해당 요소에서 직접 또는 간접적으로 참조 하는 모든 항목을 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-491">In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="3f755-492">이 메서드는 복사 하는 동안 예외를 throw 하는 경우는 `destinationArray` 변경 되지 않음; 따라서 <xref:System.Array.ConstrainedCopy%2A> 제약이 있는 실행 영역 내에서 사용할 수 (<xref:System.Runtime.ConstrainedExecution.Cer>).</span><span class="sxs-lookup"><span data-stu-id="3f755-492">If this method throws an exception while copying, the `destinationArray` remains unchanged; therefore, <xref:System.Array.ConstrainedCopy%2A> can be used within a constrained execution region (<xref:System.Runtime.ConstrainedExecution.Cer>).</span></span>  
  
 <span data-ttu-id="3f755-493">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-493">This method is an O(`n`) operation, where `n` is `length`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-494"><paramref name="sourceArray" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-494"><paramref name="sourceArray" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="3f755-495">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-495">-or-</span></span>  
  
 <span data-ttu-id="3f755-496"><paramref name="destinationArray" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-496"><paramref name="destinationArray" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="3f755-497"><paramref name="sourceArray" />와 <paramref name="destinationArray" />의 차수가 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-497"><paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</span></span></exception>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="3f755-498"><paramref name="sourceArray" /> 형식은 동일하지 않으며 <paramref name="destinationArray" /> 형식에서 파생되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-498">The <paramref name="sourceArray" /> type is neither the same as nor derived from the <paramref name="destinationArray" /> type.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="3f755-499"><paramref name="sourceArray" />의 하나 이상의 요소를 <paramref name="destinationArray" />의 형식으로 캐스팅할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-499">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-500"><paramref name="sourceIndex" />가 <paramref name="sourceArray" />의 첫 번째 차원 하한값보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-500"><paramref name="sourceIndex" /> is less than the lower bound of the first dimension of <paramref name="sourceArray" />.</span></span>  
  
 <span data-ttu-id="3f755-501">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-501">-or-</span></span>  
  
 <span data-ttu-id="3f755-502"><paramref name="destinationIndex" />가 <paramref name="destinationArray" />의 첫 번째 차원 하한값보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-502"><paramref name="destinationIndex" /> is less than the lower bound of the first dimension of <paramref name="destinationArray" />.</span></span>  
  
 <span data-ttu-id="3f755-503">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-503">-or-</span></span>  
  
 <span data-ttu-id="3f755-504"><paramref name="length" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-504"><paramref name="length" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-505"><paramref name="length" />가 <paramref name="sourceIndex" />부터 <paramref name="sourceArray" /> 끝까지의 요소 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-505"><paramref name="length" /> is greater than the number of elements from <paramref name="sourceIndex" /> to the end of <paramref name="sourceArray" />.</span></span>  
  
 <span data-ttu-id="3f755-506">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-506">-or-</span></span>  
  
 <span data-ttu-id="3f755-507"><paramref name="length" />가 <paramref name="destinationIndex" />부터 <paramref name="destinationArray" /> 끝까지의 요소 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-507"><paramref name="length" /> is greater than the number of elements from <paramref name="destinationIndex" /> to the end of <paramref name="destinationArray" />.</span></span></exception>
        <altmember cref="Overload:System.Array.Copy" />
        <altmember cref="M:System.Array.Clone" />
        <altmember cref="T:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute" />
        <altmember cref="T:System.Runtime.ConstrainedExecution.Cer" />
      </Docs>
    </Member>
    <Member MemberName="ConvertAll&lt;TInput,TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput[] ConvertAll&lt;TInput,TOutput&gt; (TInput[] array, Converter&lt;TInput,TOutput&gt; converter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput[] ConvertAll&lt;TInput, TOutput&gt;(!!TInput[] array, class System.Converter`2&lt;!!TInput, !!TOutput&gt; converter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.ConvertAll``2(``0[],System.Converter{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertAll(Of TInput, TOutput) (array As TInput(), converter As Converter(Of TInput, TOutput)) As TOutput()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput, typename TOutput&gt;&#xA; static cli::array &lt;TOutput&gt; ^ ConvertAll(cli::array &lt;TInput&gt; ^ array, Converter&lt;TInput, TOutput&gt; ^ converter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="TInput[]" />
        <Parameter Name="converter" Type="System.Converter&lt;TInput,TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TInput"><span data-ttu-id="3f755-508">소스 배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-508">The type of the elements of the source array.</span></span></typeparam>
        <typeparam name="TOutput"><span data-ttu-id="3f755-509">대상 배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-509">The type of the elements of the target array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-510">대상 형식으로 변환할 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-510">The one-dimensional, zero-based <see cref="T:System.Array" /> to convert to a target type.</span></span></param>
        <param name="converter"><span data-ttu-id="3f755-511">한 형식에서 다른 형식으로 각 요소를 변환하는 <see cref="T:System.Converter`2" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-511">A <see cref="T:System.Converter`2" /> that converts each element from one type to another type.</span></span></param>
        <summary><span data-ttu-id="3f755-512">한 형식의 배열을 다른 형식의 배열로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-512">Converts an array of one type to an array of another type.</span></span></summary>
        <returns><span data-ttu-id="3f755-513">소스 배열에서 변환된 요소를 포함하는 대상 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-513">An array of the target type containing the converted elements from the source array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-514"><xref:System.Converter%602> 개체를 대상 형식으로 변환 하는 메서드에 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-514">The <xref:System.Converter%602> is a delegate to a method that converts an object to the target type.</span></span>  <span data-ttu-id="3f755-515">요소 `array` 에 개별적으로 전달 되는 <xref:System.Converter%602>, 변환된 된 요소를 새 배열에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-515">The elements of `array` are individually passed to the <xref:System.Converter%602>, and the converted elements are saved in the new array.</span></span>  
  
 <span data-ttu-id="3f755-516">소스 `array` 그대로 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-516">The source `array` remains unchanged.</span></span>  
  
 <span data-ttu-id="3f755-517">이 메서드는 O는 (`n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-517">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-518">라는 메서드를 정의 하는 다음 코드 예제에서는 `PointFToPoint` 변환 하는 <xref:System.Drawing.PointF> 구조체는 <xref:System.Drawing.Point> 구조입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-518">The following code example defines a method named `PointFToPoint` that converts a <xref:System.Drawing.PointF> structure to a <xref:System.Drawing.Point> structure.</span></span> <span data-ttu-id="3f755-519">배열을 만듭니다 <xref:System.Drawing.PointF> 구조, 만들어집니다는 `Converter<PointF, Point>` 위임 (`Converter(Of PointF, Point)` Visual Basic의)을 나타내는 `PointFToPoint` 메서드를에 대리자를 전달는 <xref:System.Array.ConvertAll%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-519">The example then creates an array of <xref:System.Drawing.PointF> structures, creates a `Converter<PointF, Point>` delegate (`Converter(Of PointF, Point)` in Visual Basic) to represent the `PointFToPoint` method, and passes the delegate to the <xref:System.Array.ConvertAll%2A> method.</span></span> <span data-ttu-id="3f755-520"><xref:System.Array.ConvertAll%2A> 메서드 전달 하는 입력 목록의 각 요소는 `PointFToPoint` 메서드를 새 목록으로 변환된 된 요소를 배치 <xref:System.Drawing.Point> 구조입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-520">The <xref:System.Array.ConvertAll%2A> method passes each element of the input list to the `PointFToPoint` method and puts the converted elements into a new list of <xref:System.Drawing.Point> structures.</span></span> <span data-ttu-id="3f755-521">두 목록은 모두 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-521">Both lists are displayed.</span></span>  
  
 [!code-cpp[Array_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[Array_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_ConvertAll/cs/source.cs#1)]
 [!code-vb[Array_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_ConvertAll/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-522"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-522"><paramref name="array" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="3f755-523">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-523">-or-</span></span>  
  
 <span data-ttu-id="3f755-524"><paramref name="converter" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-524"><paramref name="converter" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Converter`2" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Copy">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3f755-525">한 <see cref="T:System.Array" />의 요소 범위를 다른 <see cref="T:System.Array" />에 복사하고 필요에 따라 형식 캐스팅 및 boxing을 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-525">Copies a range of elements in one <see cref="T:System.Array" /> to another <see cref="T:System.Array" /> and performs type casting and boxing as required.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (Array sourceArray, Array destinationArray, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(class System.Array sourceArray, class System.Array destinationArray, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Copy(System.Array,System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (sourceArray As Array, destinationArray As Array, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(Array ^ sourceArray, Array ^ destinationArray, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArray" Type="System.Array" />
        <Parameter Name="destinationArray" Type="System.Array" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceArray"><span data-ttu-id="3f755-526">복사할 데이터가 포함된 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-526">The <see cref="T:System.Array" /> that contains the data to copy.</span></span></param>
        <param name="destinationArray"><span data-ttu-id="3f755-527">데이터를 받는 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-527">The <see cref="T:System.Array" /> that receives the data.</span></span></param>
        <param name="length"><span data-ttu-id="3f755-528">복사할 요소의 개수를 나타내는 32비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-528">A 32-bit integer that represents the number of elements to copy.</span></span></param>
        <summary><span data-ttu-id="3f755-529"><see cref="T:System.Array" />의 요소 범위를 첫 번째 요소부터 복사하여 다른 <see cref="T:System.Array" />에 첫 번째 요소부터 붙여넣습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-529">Copies a range of elements from an <see cref="T:System.Array" /> starting at the first element and pastes them into another <see cref="T:System.Array" /> starting at the first element.</span></span> <span data-ttu-id="3f755-530">길이가 32비트 정수로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-530">The length is specified as a 32-bit integer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-531">`sourceArray` 및 `destinationArray` 매개 변수에 동일한 차원 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-531">The `sourceArray` and `destinationArray` parameters must have the same number of dimensions.</span></span> <span data-ttu-id="3f755-532">또한 `destinationArray` 해야 이미 있는 된 차원이 구분 하 고 요소 복사한 데이터를 수용 하기 위해 충분 한 수를가지고 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-532">In addition, `destinationArray` must already have been dimensioned and must have a sufficient number of elements to accommodate the copied data.</span></span>  
  
 <span data-ttu-id="3f755-533">다차원 배열 간에 복사 하는 경우 긴 1 차원 배열 처럼 동작 하며 행 (또는 열)은 개념상 놓여집니다 종단 간 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-533">When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end to end.</span></span> <span data-ttu-id="3f755-534">예를 들어 첫 번째 행 (또는 열)의 모든 4 개 요소와 두 번째 행 (또는 열)의 처음 두 요소 배열에 3 개의 행 (또는 열) 네 가지 요소로 된, 각 복사 6 개 요소 배열의 시작 부분에서 복사는 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-534">For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column).</span></span>  
  
 <span data-ttu-id="3f755-535">경우 `sourceArray` 및 `destinationArray` 겹치는 경우이 메서드는 동작 처럼의 원래 값 `sourceArray` 하기 전에 임시 위치에 보존 된 `destinationArray` 를 덮어씁니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-535">If `sourceArray` and `destinationArray` overlap, this method behaves as if the original values of `sourceArray` were preserved in a temporary location before `destinationArray` is overwritten.</span></span>  
  
 <span data-ttu-id="3f755-536">[C++]</span><span class="sxs-lookup"><span data-stu-id="3f755-536">[C++]</span></span>  
  
 <span data-ttu-id="3f755-537">이 메서드는 표준 C/c + + 함수와 동일 `memmove`이 아니라 `memcpy`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-537">This method is equivalent to the standard C/C++ function `memmove`, not `memcpy`.</span></span>  
  
 <span data-ttu-id="3f755-538">참조 형식 또는 값 형식의 배열을 배열의 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-538">The arrays can be reference-type arrays or value-type arrays.</span></span> <span data-ttu-id="3f755-539">형식 다운 캐스팅을 수행 해야 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="3f755-539">Type downcasting is performed, as required.</span></span>  
  
-   <span data-ttu-id="3f755-540">참조 형식 배열에서 값 형식의 배열에 복사할 경우 각 요소는 unboxed 하 고 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-540">When copying from a reference-type array to a value-type array, each element is unboxed and then copied.</span></span> <span data-ttu-id="3f755-541">값 형식의 배열에서 참조 형식 배열에 복사할 경우 각 요소는 boxed 하 고 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-541">When copying from a value-type array to a reference-type array, each element is boxed and then copied.</span></span>  
  
-   <span data-ttu-id="3f755-542">참조 형식 또는 값 형식의 배열에서 복사 하는 경우는 <xref:System.Object> 배열에는 <xref:System.Object> 각 값 또는 참조를 저장 하기 위해 만든 이며 다음 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-542">When copying from a reference-type or value-type array to an <xref:System.Object> array, an <xref:System.Object> is created to hold each value or reference and then copied.</span></span> <span data-ttu-id="3f755-543">복사 하는 경우는 <xref:System.Object> 배열에는 참조 형식 또는 값 형식의 배열 및 할당 가능 하지는 <xref:System.InvalidCastException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-543">When copying from an <xref:System.Object> array to a reference-type or value-type array and the assignment is not possible, an <xref:System.InvalidCastException> is thrown.</span></span>  
  
-   <span data-ttu-id="3f755-544">경우 `sourceArray` 및 `destinationArray` 두 참조 형식 배열 파일이 나 두 배열 형식의 <xref:System.Object>, 단순 복사가 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-544">If `sourceArray` and `destinationArray` are both reference-type arrays or are both arrays of type <xref:System.Object>, a shallow copy is performed.</span></span> <span data-ttu-id="3f755-545">단순 복사본을는 <xref:System.Array> 는 새로운 <xref:System.Array> 원본과 같은 요소에 대 한 참조가 포함 된 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-545">A shallow copy of an <xref:System.Array> is a new <xref:System.Array> containing references to the same elements as the original <xref:System.Array>.</span></span> <span data-ttu-id="3f755-546">요소는 요소에서 참조 하는 대상은 복사 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-546">The elements themselves or anything referenced by the elements are not copied.</span></span> <span data-ttu-id="3f755-547">전체 복사본 하는 반면, 한 <xref:System.Array> 요소와 해당 요소에서 직접 또는 간접적으로 참조 하는 모든 항목을 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-547">In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="3f755-548"><xref:System.ArrayTypeMismatchException> 배열은 호환 되지 않는 형식의 경우에 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-548">An <xref:System.ArrayTypeMismatchException> is thrown if the arrays are of incompatible types.</span></span> <span data-ttu-id="3f755-549">형식 호환성은 다음과 같이 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-549">Type compatibility is defined as follows:</span></span>  
  
-   <span data-ttu-id="3f755-550">형식이 자체와 호환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-550">A type is compatible with itself.</span></span>  
  
-   <span data-ttu-id="3f755-551">값 형식이 호환 <xref:System.Object> 및 해당 값 형식에서 구현 된 인터페이스 형식을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-551">A value type is compatible with <xref:System.Object> and with an interface type implemented by that value type.</span></span> <span data-ttu-id="3f755-552">값 형식은 해당 인터페이스를 직접 구현 하는 경우에 인터페이스에 연결 된 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-552">A value type is considered connected to an interface only if it implements that interface directly.</span></span> <span data-ttu-id="3f755-553">연결이 끊긴된 형식이 호환 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-553">Disconnected types are not compatible.</span></span>  
  
-   <span data-ttu-id="3f755-554">두 개의 내장 (미리 정의 된) 값 유형은 대상 형식으로 원본 유형에 서 복사 확대 변환 하는 경우에 호환입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-554">Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion.</span></span> <span data-ttu-id="3f755-555">확대 변환 되지 축소 변환 정보 손실 될 수 있지만 내용은 손실 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-555">A widening conversion never loses information, whereas a narrowing conversion can lose information.</span></span> <span data-ttu-id="3f755-556">예를 들어 32 비트 부호 있는 정수를 64 비트 부호 있는 정수로 변환 확대 변환 이며 64 비트 부호 있는 정수는 32 비트 부호 있는 정수로 변환 축소 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-556">For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion.</span></span> <span data-ttu-id="3f755-557">변환에 대 한 자세한 내용은 참조 <xref:System.Convert>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-557">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
-   <span data-ttu-id="3f755-558">비 내장 (사용자 정의 됨) 값 형식 자체와 호환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-558">A nonintrinsic (user-defined) value type is compatible only with itself.</span></span>  
  
-   <span data-ttu-id="3f755-559">열거형에 암시적 변환이 포함 <xref:System.Enum> 및 기본 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-559">Enumerations have an implicit conversion to <xref:System.Enum> and to their underlying type.</span></span>  
  
 <span data-ttu-id="3f755-560">하는 경우 모든 요소에 `sourceArray` 다운 캐스트 (예를 들어 파생된 클래스를 기본 클래스 또는 개체에 대 한 인터페이스) 필요 하나 이상의 요소에 해당 유형으로 캐스팅할 수 없습니다 및 `destinationArray`, <xref:System.InvalidCastException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-560">If every element in `sourceArray` requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in `destinationArray`, an <xref:System.InvalidCastException> is thrown.</span></span>  
  
 <span data-ttu-id="3f755-561">이 메서드가의 상태를 복사 하는 동안 예외가 throw `destinationArray` 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-561">If this method throws an exception while copying, the state of `destinationArray` is undefined.</span></span>  
  
 <span data-ttu-id="3f755-562">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-562">This method is an O(`n`) operation, where `n` is `length`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-563"><paramref name="sourceArray" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-563"><paramref name="sourceArray" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="3f755-564">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-564">-or-</span></span>  
  
 <span data-ttu-id="3f755-565"><paramref name="destinationArray" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-565"><paramref name="destinationArray" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="3f755-566"><paramref name="sourceArray" />와 <paramref name="destinationArray" />의 차수가 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-566"><paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</span></span></exception>
        <exception cref="T:System.ArrayTypeMismatchException">
          <span data-ttu-id="3f755-567"><paramref name="sourceArray" />와 <paramref name="destinationArray" />는 호환되지 않는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-567"><paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="3f755-568"><paramref name="sourceArray" />의 하나 이상의 요소를 <paramref name="destinationArray" />의 형식으로 캐스팅할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-568">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-569"><paramref name="length" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-569"><paramref name="length" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-570"><paramref name="length" />가 <paramref name="sourceArray" />의 요소 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-570"><paramref name="length" /> is greater than the number of elements in <paramref name="sourceArray" />.</span></span>  
  
 <span data-ttu-id="3f755-571">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-571">-or-</span></span>  
  
 <span data-ttu-id="3f755-572"><paramref name="length" />가 <paramref name="destinationArray" />의 요소 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-572"><paramref name="length" /> is greater than the number of elements in <paramref name="destinationArray" />.</span></span></exception>
        <altmember cref="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
        <altmember cref="M:System.Array.Clone" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (Array sourceArray, Array destinationArray, long length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(class System.Array sourceArray, class System.Array destinationArray, int64 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Copy(System.Array,System.Array,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (sourceArray As Array, destinationArray As Array, length As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(Array ^ sourceArray, Array ^ destinationArray, long length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArray" Type="System.Array" />
        <Parameter Name="destinationArray" Type="System.Array" />
        <Parameter Name="length" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="sourceArray"><span data-ttu-id="3f755-573">복사할 데이터가 포함된 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-573">The <see cref="T:System.Array" /> that contains the data to copy.</span></span></param>
        <param name="destinationArray"><span data-ttu-id="3f755-574">데이터를 받는 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-574">The <see cref="T:System.Array" /> that receives the data.</span></span></param>
        <param name="length"><span data-ttu-id="3f755-575">복사할 요소의 개수를 나타내는 64비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-575">A 64-bit integer that represents the number of elements to copy.</span></span> <span data-ttu-id="3f755-576">정수는 0과 <see cref="F:System.Int32.MaxValue" />(포함) 사이여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-576">The integer must be between zero and <see cref="F:System.Int32.MaxValue" />, inclusive.</span></span></param>
        <summary><span data-ttu-id="3f755-577"><see cref="T:System.Array" />의 요소 범위를 첫 번째 요소부터 복사하여 다른 <see cref="T:System.Array" />에 첫 번째 요소부터 붙여넣습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-577">Copies a range of elements from an <see cref="T:System.Array" /> starting at the first element and pastes them into another <see cref="T:System.Array" /> starting at the first element.</span></span> <span data-ttu-id="3f755-578">길이가 64비트 정수로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-578">The length is specified as a 64-bit integer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-579">`sourceArray` 및 `destinationArray` 매개 변수에 동일한 차원 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-579">The `sourceArray` and `destinationArray` parameters must have the same number of dimensions.</span></span> <span data-ttu-id="3f755-580">또한 `destinationArray` 해야 이미 있는 된 차원이 구분 하 고 요소 복사한 데이터를 수용 하기 위해 충분 한 수를가지고 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-580">In addition, `destinationArray` must already have been dimensioned and must have a sufficient number of elements to accommodate the copied data.</span></span>  
  
 <span data-ttu-id="3f755-581">다차원 배열 간에 복사 하는 경우 긴 1 차원 배열 처럼 동작 하며 행 (또는 열)은 개념상 놓여집니다 종단 간 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-581">When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end to end.</span></span> <span data-ttu-id="3f755-582">예를 들어 첫 번째 행 (또는 열)의 모든 4 개 요소와 두 번째 행 (또는 열)의 처음 두 요소 배열에 3 개의 행 (또는 열) 네 가지 요소로 된, 각 복사 6 개 요소 배열의 시작 부분에서 복사는 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-582">For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column).</span></span>  
  
 <span data-ttu-id="3f755-583">경우 `sourceArray` 및 `destinationArray` 겹치는 경우이 메서드는 동작 처럼의 원래 값 `sourceArray` 하기 전에 임시 위치에 보존 된 `destinationArray` 를 덮어씁니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-583">If `sourceArray` and `destinationArray` overlap, this method behaves as if the original values of `sourceArray` were preserved in a temporary location before `destinationArray` is overwritten.</span></span>  
  
 <span data-ttu-id="3f755-584">[C++]</span><span class="sxs-lookup"><span data-stu-id="3f755-584">[C++]</span></span>  
  
 <span data-ttu-id="3f755-585">이 메서드는 표준 C/c + + 함수와 동일 `memmove`이 아니라 `memcpy`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-585">This method is equivalent to the standard C/C++ function `memmove`, not `memcpy`.</span></span>  
  
 <span data-ttu-id="3f755-586">참조 형식 또는 값 형식의 배열을 배열의 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-586">The arrays can be reference-type arrays or value-type arrays.</span></span> <span data-ttu-id="3f755-587">형식 다운 캐스팅을 수행 해야 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="3f755-587">Type downcasting is performed, as required.</span></span>  
  
-   <span data-ttu-id="3f755-588">참조 형식 배열에서 값 형식의 배열에 복사할 경우 각 요소는 unboxed 하 고 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-588">When copying from a reference-type array to a value-type array, each element is unboxed and then copied.</span></span> <span data-ttu-id="3f755-589">값 형식의 배열에서 참조 형식 배열에 복사할 경우 각 요소는 boxed 하 고 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-589">When copying from a value-type array to a reference-type array, each element is boxed and then copied.</span></span>  
  
-   <span data-ttu-id="3f755-590">참조 형식 또는 값 형식의 배열에서 복사 하는 경우는 <xref:System.Object> 배열에는 <xref:System.Object> 각 값 또는 참조를 저장 하기 위해 만든 이며 다음 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-590">When copying from a reference-type or value-type array to an <xref:System.Object> array, an <xref:System.Object> is created to hold each value or reference and then copied.</span></span> <span data-ttu-id="3f755-591">복사 하는 경우는 <xref:System.Object> 배열에는 참조 형식 또는 값 형식의 배열 및 할당 가능 하지는 <xref:System.InvalidCastException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-591">When copying from an <xref:System.Object> array to a reference-type or value-type array and the assignment is not possible, an <xref:System.InvalidCastException> is thrown.</span></span>  
  
-   <span data-ttu-id="3f755-592">경우 `sourceArray` 및 `destinationArray` 두 참조 형식 배열 파일이 나 두 배열 형식의 <xref:System.Object>, 단순 복사가 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-592">If `sourceArray` and `destinationArray` are both reference-type arrays or are both arrays of type <xref:System.Object>, a shallow copy is performed.</span></span> <span data-ttu-id="3f755-593">단순 복사본을는 <xref:System.Array> 는 새로운 <xref:System.Array> 원본과 같은 요소에 대 한 참조가 포함 된 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-593">A shallow copy of an <xref:System.Array> is a new <xref:System.Array> containing references to the same elements as the original <xref:System.Array>.</span></span> <span data-ttu-id="3f755-594">요소는 요소에서 참조 하는 대상은 복사 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-594">The elements themselves or anything referenced by the elements are not copied.</span></span> <span data-ttu-id="3f755-595">전체 복사본 하는 반면, 한 <xref:System.Array> 요소와 해당 요소에서 직접 또는 간접적으로 참조 하는 모든 항목을 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-595">In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="3f755-596"><xref:System.ArrayTypeMismatchException> 배열은 호환 되지 않는 형식의 경우에 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-596">An <xref:System.ArrayTypeMismatchException> is thrown if the arrays are of incompatible types.</span></span> <span data-ttu-id="3f755-597">형식 호환성은 다음과 같이 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-597">Type compatibility is defined as follows:</span></span>  
  
-   <span data-ttu-id="3f755-598">형식이 자체와 호환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-598">A type is compatible with itself.</span></span>  
  
-   <span data-ttu-id="3f755-599">값 형식이 호환 <xref:System.Object> 및 해당 값 형식에서 구현 된 인터페이스 형식을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-599">A value type is compatible with <xref:System.Object> and with an interface type implemented by that value type.</span></span> <span data-ttu-id="3f755-600">값 형식은 해당 인터페이스를 직접 구현 하는 경우에 인터페이스에 연결 된 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-600">A value type is considered connected to an interface only if it implements that interface directly.</span></span> <span data-ttu-id="3f755-601">연결이 끊긴된 형식이 호환 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-601">Disconnected types are not compatible.</span></span>  
  
-   <span data-ttu-id="3f755-602">두 개의 내장 (미리 정의 된) 값 유형은 대상 형식으로 원본 유형에 서 복사 확대 변환 하는 경우에 호환입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-602">Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion.</span></span> <span data-ttu-id="3f755-603">확대 변환 되지 축소 변환 정보 손실 될 수 있지만 내용은 손실 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-603">A widening conversion never loses information, whereas a narrowing conversion can lose information.</span></span> <span data-ttu-id="3f755-604">예를 들어 32 비트 부호 있는 정수를 64 비트 부호 있는 정수로 변환 확대 변환 이며 64 비트 부호 있는 정수는 32 비트 부호 있는 정수로 변환 축소 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-604">For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion.</span></span> <span data-ttu-id="3f755-605">변환에 대 한 자세한 내용은 참조 <xref:System.Convert>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-605">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
-   <span data-ttu-id="3f755-606">비 내장 (사용자 정의 됨) 값 형식 자체와 호환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-606">A nonintrinsic (user-defined) value type is compatible only with itself.</span></span>  
  
-   <span data-ttu-id="3f755-607">열거형에 암시적 변환이 포함 <xref:System.Enum> 및 기본 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-607">Enumerations have an implicit conversion to <xref:System.Enum> and to their underlying type.</span></span>  
  
 <span data-ttu-id="3f755-608">하는 경우 모든 요소에 `sourceArray` 다운 캐스트 (예를 들어 파생된 클래스를 기본 클래스 또는 개체에 대 한 인터페이스) 필요 하나 이상의 요소에 해당 유형으로 캐스팅할 수 없습니다 및 `destinationArray`, <xref:System.InvalidCastException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-608">If every element in `sourceArray` requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in `destinationArray`, an <xref:System.InvalidCastException> is thrown.</span></span>  
  
 <span data-ttu-id="3f755-609">이 메서드가의 상태를 복사 하는 동안 예외가 throw `destinationArray` 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-609">If this method throws an exception while copying, the state of `destinationArray` is undefined.</span></span>  
  
 <span data-ttu-id="3f755-610">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-610">This method is an O(`n`) operation, where `n` is `length`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-611"><paramref name="sourceArray" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-611"><paramref name="sourceArray" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="3f755-612">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-612">-or-</span></span>  
  
 <span data-ttu-id="3f755-613"><paramref name="destinationArray" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-613"><paramref name="destinationArray" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="3f755-614"><paramref name="sourceArray" />와 <paramref name="destinationArray" />의 차수가 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-614"><paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</span></span></exception>
        <exception cref="T:System.ArrayTypeMismatchException">
          <span data-ttu-id="3f755-615"><paramref name="sourceArray" />와 <paramref name="destinationArray" />는 호환되지 않는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-615"><paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="3f755-616"><paramref name="sourceArray" />의 하나 이상의 요소를 <paramref name="destinationArray" />의 형식으로 캐스팅할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-616">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-617"><paramref name="length" />가 0보다 작거나 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-617"><paramref name="length" /> is less than 0 or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-618"><paramref name="length" />가 <paramref name="sourceArray" />의 요소 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-618"><paramref name="length" /> is greater than the number of elements in <paramref name="sourceArray" />.</span></span>  
  
 <span data-ttu-id="3f755-619">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-619">-or-</span></span>  
  
 <span data-ttu-id="3f755-620"><paramref name="length" />가 <paramref name="destinationArray" />의 요소 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-620"><paramref name="length" /> is greater than the number of elements in <paramref name="destinationArray" />.</span></span></exception>
        <altmember cref="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
        <altmember cref="M:System.Array.Clone" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(class System.Array sourceArray, int32 sourceIndex, class System.Array destinationArray, int32 destinationIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (sourceArray As Array, sourceIndex As Integer, destinationArray As Array, destinationIndex As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(Array ^ sourceArray, int sourceIndex, Array ^ destinationArray, int destinationIndex, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArray" Type="System.Array" />
        <Parameter Name="sourceIndex" Type="System.Int32" />
        <Parameter Name="destinationArray" Type="System.Array" />
        <Parameter Name="destinationIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceArray"><span data-ttu-id="3f755-621">복사할 데이터가 포함된 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-621">The <see cref="T:System.Array" /> that contains the data to copy.</span></span></param>
        <param name="sourceIndex"><span data-ttu-id="3f755-622">복사가 시작되는 <c>sourceArray</c>의 인덱스를 나타내는 32비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-622">A 32-bit integer that represents the index in the <c>sourceArray</c> at which copying begins.</span></span></param>
        <param name="destinationArray"><span data-ttu-id="3f755-623">데이터를 받는 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-623">The <see cref="T:System.Array" /> that receives the data.</span></span></param>
        <param name="destinationIndex"><span data-ttu-id="3f755-624">저장이 시작되는 <c>destinationArray</c>의 인덱스를 나타내는 32비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-624">A 32-bit integer that represents the index in the <c>destinationArray</c> at which storing begins.</span></span></param>
        <param name="length"><span data-ttu-id="3f755-625">복사할 요소의 개수를 나타내는 32비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-625">A 32-bit integer that represents the number of elements to copy.</span></span></param>
        <summary><span data-ttu-id="3f755-626"><see cref="T:System.Array" />의 요소 범위를 지정한 소스 인덱스부터 복사하여 지정된 대상 인덱스부터 시작하는 다른 <see cref="T:System.Array" />에 붙여 넣습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-626">Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index.</span></span> <span data-ttu-id="3f755-627">길이와 인덱스가 32비트 정수로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-627">The length and the indexes are specified as 32-bit integers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-628">`sourceArray` 및 `destinationArray` 매개 변수에 동일한 차원 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-628">The `sourceArray` and `destinationArray` parameters must have the same number of dimensions.</span></span> <span data-ttu-id="3f755-629">또한 `destinationArray` 해야 이미 있는 된 차원이 구분 하 고 충분 한 수의 요소에서 시작을 있어야는 `destinationIndex` 복사한 데이터를 수용 하기 위해 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-629">In addition, `destinationArray` must already have been dimensioned and must have a sufficient number of elements starting from the `destinationIndex` position to accommodate the copied data.</span></span>  
  
 <span data-ttu-id="3f755-630">다차원 배열 간에 복사 하는 경우 긴 1 차원 배열 처럼 동작 하며 행 (또는 열)은 개념상 놓여집니다 종단 간 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-630">When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end-to-end.</span></span> <span data-ttu-id="3f755-631">예를 들어 첫 번째 행 (또는 열)의 모든 4 개 요소와 두 번째 행 (또는 열)의 처음 두 요소 배열에 3 개의 행 (또는 열) 네 가지 요소로 된, 각 복사 6 개 요소 배열의 시작 부분에서 복사는 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-631">For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column).</span></span> <span data-ttu-id="3f755-632">세 번째 행 (또는 열)의 두 번째 요소부터 복사 하려면 `sourceIndex` 2를 더한 두 번째 행 (또는 열)의 길이 더한 첫 번째 행 (또는 열)의 상한을 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-632">To start copying from the second element of the third row (or column), `sourceIndex` must be the upper bound of the first row (or column) plus the length of the second row (or column) plus two.</span></span>  
  
 <span data-ttu-id="3f755-633">경우 `sourceArray` 및 `destinationArray` 겹치는 경우이 메서드는 동작 처럼의 원래 값 `sourceArray` 하기 전에 임시 위치에 보존 된 `destinationArray` 를 덮어씁니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-633">If `sourceArray` and `destinationArray` overlap, this method behaves as if the original values of `sourceArray` were preserved in a temporary location before `destinationArray` is overwritten.</span></span>  
  
 <span data-ttu-id="3f755-634">[C++]</span><span class="sxs-lookup"><span data-stu-id="3f755-634">[C++]</span></span>  
  
 <span data-ttu-id="3f755-635">이 메서드는 표준 C/c + + 함수와 동일 `memmove`이 아니라 `memcpy`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-635">This method is equivalent to the standard C/C++ function `memmove`, not `memcpy`.</span></span>  
  
 <span data-ttu-id="3f755-636">참조 형식 또는 값 형식의 배열을 배열의 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-636">The arrays can be reference-type arrays or value-type arrays.</span></span> <span data-ttu-id="3f755-637">형식 다운 캐스팅을 수행 해야 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="3f755-637">Type downcasting is performed, as required.</span></span>  
  
-   <span data-ttu-id="3f755-638">참조 형식 배열에서 값 형식의 배열에 복사할 경우 각 요소는 unboxed 하 고 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-638">When copying from a reference-type array to a value-type array, each element is unboxed and then copied.</span></span> <span data-ttu-id="3f755-639">값 형식의 배열에서 참조 형식 배열에 복사할 경우 각 요소는 boxed 하 고 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-639">When copying from a value-type array to a reference-type array, each element is boxed and then copied.</span></span>  
  
-   <span data-ttu-id="3f755-640">참조 형식 또는 값 형식의 배열에서 복사 하는 경우는 <xref:System.Object> 배열에는 <xref:System.Object> 각 값 또는 참조를 저장 하기 위해 만든 이며 다음 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-640">When copying from a reference-type or value-type array to an <xref:System.Object> array, an <xref:System.Object> is created to hold each value or reference and then copied.</span></span> <span data-ttu-id="3f755-641">복사 하는 경우는 <xref:System.Object> 배열에는 참조 형식 또는 값 형식의 배열 및 할당 가능 하지는 <xref:System.InvalidCastException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-641">When copying from an <xref:System.Object> array to a reference-type or value-type array and the assignment is not possible, an <xref:System.InvalidCastException> is thrown.</span></span>  
  
-   <span data-ttu-id="3f755-642">경우 `sourceArray` 및 `destinationArray` 두 참조 형식 배열 파일이 나 두 배열 형식의 <xref:System.Object>, 단순 복사가 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-642">If `sourceArray` and `destinationArray` are both reference-type arrays or are both arrays of type <xref:System.Object>, a shallow copy is performed.</span></span> <span data-ttu-id="3f755-643">단순 복사본을는 <xref:System.Array> 는 새로운 <xref:System.Array> 원본과 같은 요소에 대 한 참조가 포함 된 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-643">A shallow copy of an <xref:System.Array> is a new <xref:System.Array> containing references to the same elements as the original <xref:System.Array>.</span></span> <span data-ttu-id="3f755-644">요소는 요소에서 참조 하는 대상은 복사 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-644">The elements themselves or anything referenced by the elements are not copied.</span></span> <span data-ttu-id="3f755-645">전체 복사본 하는 반면, 한 <xref:System.Array> 요소와 해당 요소에서 직접 또는 간접적으로 참조 하는 모든 항목을 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-645">In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="3f755-646"><xref:System.ArrayTypeMismatchException> 배열은 호환 되지 않는 형식의 경우에 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-646">An <xref:System.ArrayTypeMismatchException> is thrown if the arrays are of incompatible types.</span></span> <span data-ttu-id="3f755-647">형식 호환성은 다음과 같이 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-647">Type compatibility is defined as follows:</span></span>  
  
-   <span data-ttu-id="3f755-648">형식이 자체와 호환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-648">A type is compatible with itself.</span></span>  
  
-   <span data-ttu-id="3f755-649">값 형식이 호환 <xref:System.Object> 및 해당 값 형식에서 구현 된 인터페이스 형식을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-649">A value type is compatible with <xref:System.Object> and with an interface type implemented by that value type.</span></span> <span data-ttu-id="3f755-650">값 형식은 해당 인터페이스를 직접 구현 하는 경우에 인터페이스에 연결 된 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-650">A value type is considered connected to an interface only if it implements that interface directly.</span></span> <span data-ttu-id="3f755-651">연결이 끊긴된 형식이 호환 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-651">Disconnected types are not compatible.</span></span>  
  
-   <span data-ttu-id="3f755-652">두 개의 내장 (미리 정의 된) 값 유형은 대상 형식으로 원본 유형에 서 복사 확대 변환 하는 경우에 호환입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-652">Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion.</span></span> <span data-ttu-id="3f755-653">확대 변환 되지 축소 변환 정보 손실 될 수 있지만 내용은 손실 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-653">A widening conversion never loses information, whereas a narrowing conversion can lose information.</span></span> <span data-ttu-id="3f755-654">예를 들어 32 비트 부호 있는 정수를 64 비트 부호 있는 정수로 변환 확대 변환 이며 64 비트 부호 있는 정수는 32 비트 부호 있는 정수로 변환 축소 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-654">For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion.</span></span> <span data-ttu-id="3f755-655">변환에 대 한 자세한 내용은 참조 <xref:System.Convert>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-655">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
-   <span data-ttu-id="3f755-656">비 내장 (사용자 정의 됨) 값 형식 자체와 호환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-656">A nonintrinsic (user-defined) value type is compatible only with itself.</span></span>  
  
-   <span data-ttu-id="3f755-657">열거형에 암시적 변환이 포함 <xref:System.Enum> 및 기본 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-657">Enumerations have an implicit conversion to <xref:System.Enum> and to their underlying type.</span></span>  
  
 <span data-ttu-id="3f755-658">하는 경우 모든 요소에 `sourceArray` 다운 캐스트 (예를 들어 파생된 클래스를 기본 클래스 또는 개체에 대 한 인터페이스) 필요 하나 이상의 요소에 해당 유형으로 캐스팅할 수 없습니다 및 `destinationArray`, <xref:System.InvalidCastException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-658">If every element in `sourceArray` requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in `destinationArray`, an <xref:System.InvalidCastException> is thrown.</span></span>  
  
 <span data-ttu-id="3f755-659">이 메서드가의 상태를 복사 하는 동안 예외가 throw `destinationArray` 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-659">If this method throws an exception while copying, the state of `destinationArray` is undefined.</span></span>  
  
 <span data-ttu-id="3f755-660">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-660">This method is an O(`n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-661">다음 코드 예제에서는 하나를 복사 하는 방법을 보여 줍니다. <xref:System.Array> 형식의 <xref:System.Object> 다른 <xref:System.Array> 정수 형식의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-661">The following code example shows how to copy from one <xref:System.Array> of type <xref:System.Object> to another <xref:System.Array> of type integer.</span></span>  
  
 [!code-cpp[Classic Array.Copy1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.Copy1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.Copy1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.Copy1 Example/CS/source.cs#1)]
 [!code-vb[Classic Array.Copy1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.Copy1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-662"><paramref name="sourceArray" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-662"><paramref name="sourceArray" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="3f755-663">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-663">-or-</span></span>  
  
 <span data-ttu-id="3f755-664"><paramref name="destinationArray" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-664"><paramref name="destinationArray" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="3f755-665"><paramref name="sourceArray" />와 <paramref name="destinationArray" />의 차수가 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-665"><paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</span></span></exception>
        <exception cref="T:System.ArrayTypeMismatchException">
          <span data-ttu-id="3f755-666"><paramref name="sourceArray" />와 <paramref name="destinationArray" />는 호환되지 않는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-666"><paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="3f755-667"><paramref name="sourceArray" />의 하나 이상의 요소를 <paramref name="destinationArray" />의 형식으로 캐스팅할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-667">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-668"><paramref name="sourceIndex" />가 <paramref name="sourceArray" />의 첫 번째 차원 하한값보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-668"><paramref name="sourceIndex" /> is less than the lower bound of the first dimension of <paramref name="sourceArray" />.</span></span>  
  
 <span data-ttu-id="3f755-669">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-669">-or-</span></span>  
  
 <span data-ttu-id="3f755-670"><paramref name="destinationIndex" />가 <paramref name="destinationArray" />의 첫 번째 차원 하한값보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-670"><paramref name="destinationIndex" /> is less than the lower bound of the first dimension of <paramref name="destinationArray" />.</span></span>  
  
 <span data-ttu-id="3f755-671">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-671">-or-</span></span>  
  
 <span data-ttu-id="3f755-672"><paramref name="length" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-672"><paramref name="length" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-673"><paramref name="length" />가 <paramref name="sourceIndex" />부터 <paramref name="sourceArray" /> 끝까지의 요소 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-673"><paramref name="length" /> is greater than the number of elements from <paramref name="sourceIndex" /> to the end of <paramref name="sourceArray" />.</span></span>  
  
 <span data-ttu-id="3f755-674">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-674">-or-</span></span>  
  
 <span data-ttu-id="3f755-675"><paramref name="length" />가 <paramref name="destinationIndex" />부터 <paramref name="destinationArray" /> 끝까지의 요소 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-675"><paramref name="length" /> is greater than the number of elements from <paramref name="destinationIndex" /> to the end of <paramref name="destinationArray" />.</span></span></exception>
        <altmember cref="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
        <altmember cref="M:System.Array.Clone" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (Array sourceArray, long sourceIndex, Array destinationArray, long destinationIndex, long length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(class System.Array sourceArray, int64 sourceIndex, class System.Array destinationArray, int64 destinationIndex, int64 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (sourceArray As Array, sourceIndex As Long, destinationArray As Array, destinationIndex As Long, length As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(Array ^ sourceArray, long sourceIndex, Array ^ destinationArray, long destinationIndex, long length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArray" Type="System.Array" />
        <Parameter Name="sourceIndex" Type="System.Int64" />
        <Parameter Name="destinationArray" Type="System.Array" />
        <Parameter Name="destinationIndex" Type="System.Int64" />
        <Parameter Name="length" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="sourceArray"><span data-ttu-id="3f755-676">복사할 데이터가 포함된 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-676">The <see cref="T:System.Array" /> that contains the data to copy.</span></span></param>
        <param name="sourceIndex"><span data-ttu-id="3f755-677">복사가 시작되는 <c>sourceArray</c>의 인덱스를 나타내는 64비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-677">A 64-bit integer that represents the index in the <c>sourceArray</c> at which copying begins.</span></span></param>
        <param name="destinationArray"><span data-ttu-id="3f755-678">데이터를 받는 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-678">The <see cref="T:System.Array" /> that receives the data.</span></span></param>
        <param name="destinationIndex"><span data-ttu-id="3f755-679">저장이 시작되는 <c>destinationArray</c>의 인덱스를 나타내는 64비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-679">A 64-bit integer that represents the index in the <c>destinationArray</c> at which storing begins.</span></span></param>
        <param name="length"><span data-ttu-id="3f755-680">복사할 요소의 개수를 나타내는 64비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-680">A 64-bit integer that represents the number of elements to copy.</span></span> <span data-ttu-id="3f755-681">정수는 0과 <see cref="F:System.Int32.MaxValue" />(포함) 사이여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-681">The integer must be between zero and <see cref="F:System.Int32.MaxValue" />, inclusive.</span></span></param>
        <summary><span data-ttu-id="3f755-682"><see cref="T:System.Array" />의 요소 범위를 지정한 소스 인덱스부터 복사하여 지정된 대상 인덱스부터 시작하는 다른 <see cref="T:System.Array" />에 붙여 넣습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-682">Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index.</span></span> <span data-ttu-id="3f755-683">길이와 인덱스가 64비트 정수로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-683">The length and the indexes are specified as 64-bit integers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-684">`sourceArray` 및 `destinationArray` 매개 변수에 동일한 차원 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-684">The `sourceArray` and `destinationArray` parameters must have the same number of dimensions.</span></span> <span data-ttu-id="3f755-685">또한 `destinationArray` 해야 이미 있는 된 차원이 구분 하 고 충분 한 수의 요소에서 시작을 있어야는 `destinationIndex` 복사한 데이터를 수용 하기 위해 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-685">In addition, `destinationArray` must already have been dimensioned and must have a sufficient number of elements starting from the `destinationIndex` position to accommodate the copied data.</span></span>  
  
 <span data-ttu-id="3f755-686">다차원 배열 간에 복사 하는 경우 긴 1 차원 배열 처럼 동작 하며 행 (또는 열)은 개념상 놓여집니다 종단 간 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-686">When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end-to-end.</span></span> <span data-ttu-id="3f755-687">예를 들어 첫 번째 행 (또는 열)의 모든 4 개 요소와 두 번째 행 (또는 열)의 처음 두 요소 배열에 3 개의 행 (또는 열) 네 가지 요소로 된, 각 복사 6 개 요소 배열의 시작 부분에서 복사는 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-687">For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column).</span></span> <span data-ttu-id="3f755-688">세 번째 행 (또는 열)의 두 번째 요소부터 복사 하려면 `sourceIndex` 2를 더한 두 번째 행 (또는 열)의 길이 더한 첫 번째 행 (또는 열)의 상한을 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-688">To start copying from the second element of the third row (or column), `sourceIndex` must be the upper bound of the first row (or column) plus the length of the second row (or column) plus two.</span></span>  
  
 <span data-ttu-id="3f755-689">경우 `sourceArray` 및 `destinationArray` 겹치는 경우이 메서드는 동작 처럼의 원래 값 `sourceArray` 하기 전에 임시 위치에 보존 된 `destinationArray` 를 덮어씁니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-689">If `sourceArray` and `destinationArray` overlap, this method behaves as if the original values of `sourceArray` were preserved in a temporary location before `destinationArray` is overwritten.</span></span>  
  
 <span data-ttu-id="3f755-690">[C++]</span><span class="sxs-lookup"><span data-stu-id="3f755-690">[C++]</span></span>  
  
 <span data-ttu-id="3f755-691">이 메서드는 표준 C/c + + 함수와 동일 `memmove`이 아니라 `memcpy`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-691">This method is equivalent to the standard C/C++ function `memmove`, not `memcpy`.</span></span>  
  
 <span data-ttu-id="3f755-692">참조 형식 또는 값 형식의 배열을 배열의 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-692">The arrays can be reference-type arrays or value-type arrays.</span></span> <span data-ttu-id="3f755-693">형식 다운 캐스팅을 수행 해야 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="3f755-693">Type downcasting is performed, as required.</span></span>  
  
-   <span data-ttu-id="3f755-694">참조 형식 배열에서 값 형식의 배열에 복사할 경우 각 요소는 unboxed 하 고 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-694">When copying from a reference-type array to a value-type array, each element is unboxed and then copied.</span></span> <span data-ttu-id="3f755-695">값 형식의 배열에서 참조 형식 배열에 복사할 경우 각 요소는 boxed 하 고 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-695">When copying from a value-type array to a reference-type array, each element is boxed and then copied.</span></span>  
  
-   <span data-ttu-id="3f755-696">참조 형식 또는 값 형식의 배열에서 복사 하는 경우는 <xref:System.Object> 배열에는 <xref:System.Object> 각 값 또는 참조를 저장 하기 위해 만든 이며 다음 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-696">When copying from a reference-type or value-type array to an <xref:System.Object> array, an <xref:System.Object> is created to hold each value or reference and then copied.</span></span> <span data-ttu-id="3f755-697">복사 하는 경우는 <xref:System.Object> 배열에는 참조 형식 또는 값 형식의 배열 및 할당 가능 하지는 <xref:System.InvalidCastException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-697">When copying from an <xref:System.Object> array to a reference-type or value-type array and the assignment is not possible, an <xref:System.InvalidCastException> is thrown.</span></span>  
  
-   <span data-ttu-id="3f755-698">경우 `sourceArray` 및 `destinationArray` 두 참조 형식 배열 파일이 나 두 배열 형식의 <xref:System.Object>, 단순 복사가 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-698">If `sourceArray` and `destinationArray` are both reference-type arrays or are both arrays of type <xref:System.Object>, a shallow copy is performed.</span></span> <span data-ttu-id="3f755-699">단순 복사본을는 <xref:System.Array> 는 새로운 <xref:System.Array> 원본과 같은 요소에 대 한 참조가 포함 된 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-699">A shallow copy of an <xref:System.Array> is a new <xref:System.Array> containing references to the same elements as the original <xref:System.Array>.</span></span> <span data-ttu-id="3f755-700">요소는 요소에서 참조 하는 대상은 복사 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-700">The elements themselves or anything referenced by the elements are not copied.</span></span> <span data-ttu-id="3f755-701">전체 복사본 하는 반면, 한 <xref:System.Array> 요소와 해당 요소에서 직접 또는 간접적으로 참조 하는 모든 항목을 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-701">In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="3f755-702"><xref:System.ArrayTypeMismatchException> 배열은 호환 되지 않는 형식의 경우에 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-702">An <xref:System.ArrayTypeMismatchException> is thrown if the arrays are of incompatible types.</span></span> <span data-ttu-id="3f755-703">형식 호환성은 다음과 같이 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-703">Type compatibility is defined as follows:</span></span>  
  
-   <span data-ttu-id="3f755-704">형식이 자체와 호환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-704">A type is compatible with itself.</span></span>  
  
-   <span data-ttu-id="3f755-705">값 형식이 호환 <xref:System.Object> 및 해당 값 형식에서 구현 된 인터페이스 형식을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-705">A value type is compatible with <xref:System.Object> and with an interface type implemented by that value type.</span></span> <span data-ttu-id="3f755-706">값 형식은 해당 인터페이스를 직접 구현 하는 경우에 인터페이스에 연결 된 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-706">A value type is considered connected to an interface only if it implements that interface directly.</span></span> <span data-ttu-id="3f755-707">연결이 끊긴된 형식이 호환 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-707">Disconnected types are not compatible.</span></span>  
  
-   <span data-ttu-id="3f755-708">두 개의 내장 (미리 정의 된) 값 유형은 대상 형식으로 원본 유형에 서 복사 확대 변환 하는 경우에 호환입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-708">Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion.</span></span> <span data-ttu-id="3f755-709">확대 변환 되지 축소 변환 정보 손실 될 수 있지만 내용은 손실 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-709">A widening conversion never loses information, whereas a narrowing conversion can lose information.</span></span> <span data-ttu-id="3f755-710">예를 들어 32 비트 부호 있는 정수를 64 비트 부호 있는 정수로 변환 확대 변환 이며 64 비트 부호 있는 정수는 32 비트 부호 있는 정수로 변환 축소 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-710">For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion.</span></span> <span data-ttu-id="3f755-711">변환에 대 한 자세한 내용은 참조 <xref:System.Convert>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-711">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
-   <span data-ttu-id="3f755-712">비 내장 (사용자 정의 됨) 값 형식 자체와 호환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-712">A nonintrinsic (user-defined) value type is compatible only with itself.</span></span>  
  
-   <span data-ttu-id="3f755-713">열거형에 암시적 변환이 포함 <xref:System.Enum> 및 기본 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-713">Enumerations have an implicit conversion to <xref:System.Enum> and to their underlying type.</span></span>  
  
 <span data-ttu-id="3f755-714">하는 경우 모든 요소에 `sourceArray` 다운 캐스트 (예를 들어 파생된 클래스를 기본 클래스 또는 개체에 대 한 인터페이스) 필요 하나 이상의 요소에 해당 유형으로 캐스팅할 수 없습니다 및 `destinationArray`, <xref:System.InvalidCastException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-714">If every element in `sourceArray` requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in `destinationArray`, an <xref:System.InvalidCastException> is thrown.</span></span>  
  
 <span data-ttu-id="3f755-715">이 메서드가의 상태를 복사 하는 동안 예외가 throw `destinationArray` 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-715">If this method throws an exception while copying, the state of `destinationArray` is undefined.</span></span>  
  
 <span data-ttu-id="3f755-716">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-716">This method is an O(`n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-717">다음 코드 예제에서는 하나를 복사 하는 방법을 보여 줍니다. <xref:System.Array> 형식의 <xref:System.Object> 다른 <xref:System.Array> 정수 형식의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-717">The following code example shows how to copy from one <xref:System.Array> of type <xref:System.Object> to another <xref:System.Array> of type integer.</span></span>  
  
 [!code-cpp[Classic Array.Copy1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.Copy1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.Copy1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.Copy1 Example/CS/source.cs#1)]
 [!code-vb[Classic Array.Copy1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.Copy1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-718"><paramref name="sourceArray" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-718"><paramref name="sourceArray" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="3f755-719">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-719">-or-</span></span>  
  
 <span data-ttu-id="3f755-720"><paramref name="destinationArray" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-720"><paramref name="destinationArray" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="3f755-721"><paramref name="sourceArray" />와 <paramref name="destinationArray" />의 차수가 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-721"><paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</span></span></exception>
        <exception cref="T:System.ArrayTypeMismatchException">
          <span data-ttu-id="3f755-722"><paramref name="sourceArray" />와 <paramref name="destinationArray" />는 호환되지 않는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-722"><paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="3f755-723"><paramref name="sourceArray" />의 하나 이상의 요소를 <paramref name="destinationArray" />의 형식으로 캐스팅할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-723">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-724"><paramref name="sourceIndex" />가 <paramref name="sourceArray" />의 유효한 인덱스 범위를 벗어납니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-724"><paramref name="sourceIndex" /> is outside the range of valid indexes for the <paramref name="sourceArray" />.</span></span>  
  
 <span data-ttu-id="3f755-725">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-725">-or-</span></span>  
  
 <span data-ttu-id="3f755-726"><paramref name="destinationIndex" />가 <paramref name="destinationArray" />의 유효한 인덱스 범위를 벗어납니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-726"><paramref name="destinationIndex" /> is outside the range of valid indexes for the <paramref name="destinationArray" />.</span></span>  
  
 <span data-ttu-id="3f755-727">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-727">-or-</span></span>  
  
 <span data-ttu-id="3f755-728"><paramref name="length" />가 0보다 작거나 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-728"><paramref name="length" /> is less than 0 or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-729"><paramref name="length" />가 <paramref name="sourceIndex" />부터 <paramref name="sourceArray" /> 끝까지의 요소 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-729"><paramref name="length" /> is greater than the number of elements from <paramref name="sourceIndex" /> to the end of <paramref name="sourceArray" />.</span></span>  
  
 <span data-ttu-id="3f755-730">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-730">-or-</span></span>  
  
 <span data-ttu-id="3f755-731"><paramref name="length" />가 <paramref name="destinationIndex" />부터 <paramref name="destinationArray" /> 끝까지의 요소 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-731"><paramref name="length" /> is greater than the number of elements from <paramref name="destinationIndex" /> to the end of <paramref name="destinationArray" />.</span></span></exception>
        <altmember cref="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
        <altmember cref="M:System.Array.Clone" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3f755-732">현재 1차원 배열의 모든 요소를 지정된 1차원 배열에 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-732">Copies all the elements of the current one-dimensional array to the specified one-dimensional array.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="3f755-733">현재 배열에서 복사한 요소의 대상인 1차원 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-733">The one-dimensional array that is the destination of the elements copied from the current array.</span></span></param>
        <param name="index"><span data-ttu-id="3f755-734">복사가 시작되는 <c>array</c>의 인덱스를 나타내는 32비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-734">A 32-bit integer that represents the index in <c>array</c> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="3f755-735">현재 1차원 배열의 모든 요소를 지정된 대상 배열 인덱스부터 시작하여 지정된 1차원 배열에 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-735">Copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index.</span></span> <span data-ttu-id="3f755-736">인덱스가 32비트 정수로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-736">The index is specified as a 32-bit integer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-737">현재 배열 인스턴스의 모든 요소를 복사 하는이 메서드는 `array` 인덱스부터 대상 배열 `index`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-737">This method copies all the elements of the current array instance to the `array` destination array, starting at index `index`.</span></span> <span data-ttu-id="3f755-738">`array` 대상 배열 해야 이미 있는 된 차원이 구분 된 및 요소 복사 된 요소에 맞게 충분 한 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-738">The `array` destination array must already have been dimensioned and must have a sufficient number of elements to accommodate the copied elements.</span></span> <span data-ttu-id="3f755-739">그렇지 않으면 메서드에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-739">Otherwise, the method throws an exception.</span></span>  
  
 <span data-ttu-id="3f755-740">이 메서드는 지원의 <xref:System.Collections.ICollection?displayProperty=nameWithType> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-740">This method supports the <xref:System.Collections.ICollection?displayProperty=nameWithType> interface.</span></span> <span data-ttu-id="3f755-741">구현 하는 경우 <xref:System.Collections.ICollection?displayProperty=nameWithType> 가 사용 하 여 명시적으로 필요한 <xref:System.Array.Copy%2A> 추가 간접 참조를 방지 하려면.</span><span class="sxs-lookup"><span data-stu-id="3f755-741">If implementing <xref:System.Collections.ICollection?displayProperty=nameWithType> is not explicitly required, use <xref:System.Array.Copy%2A> to avoid an extra indirection.</span></span>  
  
 <span data-ttu-id="3f755-742">이 메서드가의 상태를 복사 하는 동안 예외가 throw `array` 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-742">If this method throws an exception while copying, the state of `array` is undefined.</span></span>  
  
 <span data-ttu-id="3f755-743">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Array.Length%2A>합니다. 단순 복사만 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-743">This method is an O(`n`) operation, where `n` is <xref:System.Array.Length%2A>.It performs a shallow copy only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-744">다음 코드 예제를 복사 하는 방법을 보여 줍니다는 <xref:System.Array> 다른 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-744">The following code example shows how to copy an <xref:System.Array> to another <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Array.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Array.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/VB/source.vb#1)]  
  
 <span data-ttu-id="3f755-745">다음 코드 예제를 복사 하는 방법을 보여 줍니다는 <xref:System.Array> 다른 <xref:System.Array> 생기는 0이 아닌 배열은 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-745">The following code example shows how to copy an <xref:System.Array> to another <xref:System.Array> with a nonzero lower bound.</span></span> <span data-ttu-id="3f755-746">전체 소스 <xref:System.Array> 복사 대상의 기존 요소를 덮어쓰는 빈 요소를 포함 하 여 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-746">Note that the entire source <xref:System.Array> is copied, including empty elements that overwrite existing elements in the target <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Array.CopyTo Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Array.CopyTo Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CS/source.cs#2)]
 [!code-vb[Classic Array.CopyTo Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-747"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-747"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-748"><paramref name="index" />가 <paramref name="array" />의 하한값보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-748"><paramref name="index" /> is less than the lower bound of <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-749"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-749"><paramref name="array" /> is multidimensional.</span></span>  
  
 <span data-ttu-id="3f755-750">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-750">-or-</span></span>  
  
 <span data-ttu-id="3f755-751">소스 배열의 요소 개수가 <paramref name="index" />부터 대상 <paramref name="array" /> 끝까지의 사용 가능한 요소 개수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-751">The number of elements in the source array is greater than the available number of elements from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="3f755-752">소스 <see cref="T:System.Array" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-752">The type of the source <see cref="T:System.Array" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="3f755-753">소스 배열이 다차원입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-753">The source array is multidimensional.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="3f755-754"><see cref="T:System.Array" /> 소스에서 하나 이상의 요소를 <paramref name="array" />의 대상 형식으로 캐스팅할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-754">At least one element in the source <see cref="T:System.Array" /> cannot be cast to the type of destination <paramref name="array" />.</span></span></exception>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="M:System.Array.Copy(System.Array,System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, long index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Array array, int64 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.CopyTo(System.Array,System.Int64)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(Array ^ array, long index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="3f755-755">현재 배열에서 복사한 요소의 대상인 1차원 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-755">The one-dimensional array that is the destination of the elements copied from the current array.</span></span></param>
        <param name="index"><span data-ttu-id="3f755-756">복사가 시작되는 <c>array</c>의 인덱스를 나타내는 64비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-756">A 64-bit integer that represents the index in <c>array</c> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="3f755-757">현재 1차원 배열의 모든 요소를 지정된 대상 배열 인덱스부터 시작하여 지정된 1차원 배열에 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-757">Copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index.</span></span> <span data-ttu-id="3f755-758">인덱스가 64비트 정수로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-758">The index is specified as a 64-bit integer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-759">현재 배열 인스턴스의 모든 요소를 복사 하는이 메서드는 `array` 인덱스부터 대상 배열 `index`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-759">This method copies all the elements of the current array instance to the `array` destination array, starting at index `index`.</span></span> <span data-ttu-id="3f755-760">`array` 대상 배열 해야 이미 있는 된 차원이 구분 된 및 요소 복사 된 요소에 맞게 충분 한 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-760">The `array` destination array must already have been dimensioned and must have a sufficient number of elements to accommodate the copied elements.</span></span> <span data-ttu-id="3f755-761">그렇지 않으면 메서드에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-761">Otherwise, the method throws an exception.</span></span>  
  
 <span data-ttu-id="3f755-762">이 메서드는 지원의 <xref:System.Collections.ICollection?displayProperty=nameWithType> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-762">This method supports the <xref:System.Collections.ICollection?displayProperty=nameWithType> interface.</span></span> <span data-ttu-id="3f755-763">구현 하는 경우 <xref:System.Collections.ICollection?displayProperty=nameWithType> 가 사용 하 여 명시적으로 필요한 <xref:System.Array.Copy%2A> 추가 간접 참조를 방지 하려면.</span><span class="sxs-lookup"><span data-stu-id="3f755-763">If implementing <xref:System.Collections.ICollection?displayProperty=nameWithType> is not explicitly required, use <xref:System.Array.Copy%2A> to avoid an extra indirection.</span></span>  
  
 <span data-ttu-id="3f755-764">이 메서드가의 상태를 복사 하는 동안 예외가 throw `array` 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-764">If this method throws an exception while copying, the state of `array` is undefined.</span></span>  
  
 <span data-ttu-id="3f755-765">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Array.Length%2A>합니다. 단순 복사만 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-765">This method is an O(`n`) operation, where `n` is <xref:System.Array.Length%2A>.It performs a shallow copy only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-766">다음 코드 예제를 복사 하는 방법을 보여 줍니다는 <xref:System.Array> 다른 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-766">The following code example shows how to copy an <xref:System.Array> to another <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Array.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Array.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/VB/source.vb#1)]  
  
 <span data-ttu-id="3f755-767">다음 코드 예제를 복사 하는 방법을 보여 줍니다는 <xref:System.Array> 다른 <xref:System.Array> 생기는 0이 아닌 배열은 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-767">The following code example shows how to copy an <xref:System.Array> to another <xref:System.Array> with a nonzero lower bound.</span></span> <span data-ttu-id="3f755-768">전체 소스 <xref:System.Array> 복사 대상의 기존 요소를 덮어쓰는 빈 요소를 포함 하 여 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-768">Note that the entire source <xref:System.Array> is copied, including empty elements that overwrite existing elements in the target <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Array.CopyTo Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Array.CopyTo Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/CS/source.cs#2)]
 [!code-vb[Classic Array.CopyTo Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CopyTo Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-769"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-769"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-770"><paramref name="index" />가 <paramref name="array" />의 유효한 인덱스 범위를 벗어납니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-770"><paramref name="index" /> is outside the range of valid indexes for <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-771"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-771"><paramref name="array" /> is multidimensional.</span></span>  
  
 <span data-ttu-id="3f755-772">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-772">-or-</span></span>  
  
 <span data-ttu-id="3f755-773">소스 배열의 요소 개수가 <paramref name="index" />부터 대상 <paramref name="array" /> 끝까지의 사용 가능한 요소 개수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-773">The number of elements in the source array is greater than the available number of elements from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="3f755-774">소스 <see cref="T:System.Array" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-774">The type of the source <see cref="T:System.Array" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="3f755-775">소스 <see cref="T:System.Array" />가 다차원입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-775">The source <see cref="T:System.Array" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="3f755-776"><see cref="T:System.Array" /> 소스에서 하나 이상의 요소를 <paramref name="array" />의 대상 형식으로 캐스팅할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-776">At least one element in the source <see cref="T:System.Array" /> cannot be cast to the type of destination <paramref name="array" />.</span></span></exception>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="M:System.Array.Copy(System.Array,System.Array,System.Int64)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstance">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3f755-777"><see cref="T:System.Array" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-777">Initializes a new instance of the <see cref="T:System.Array" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static Array CreateInstance (Type elementType, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Array CreateInstance(class System.Type elementType, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.CreateInstance(System.Type,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance (elementType As Type, length As Integer) As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Array ^ CreateInstance(Type ^ elementType, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="System.Type" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="elementType"><span data-ttu-id="3f755-778">만들 <see cref="T:System.Array" />의 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-778">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</span></span></param>
        <param name="length"><span data-ttu-id="3f755-779">만들 <see cref="T:System.Array" />의 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-779">The size of the <see cref="T:System.Array" /> to create.</span></span></param>
        <summary><span data-ttu-id="3f755-780">지정한 <see cref="T:System.Type" /> 및 길이를 가진 인덱스가 0부터 시작하는 1차원 <see cref="T:System.Array" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-780">Creates a one-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and length, with zero-based indexing.</span></span></summary>
        <returns><span data-ttu-id="3f755-781">지정한 <see cref="T:System.Type" /> 및 지정한 길이를 가진 인덱스가 0부터 시작하는 새 1차원 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-781">A new one-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length, using zero-based indexing.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-782">대부분의 클래스와 달리 <xref:System.Array> 제공는 <xref:System.Array.CreateInstance%2A> 메서드 런타임에 바인딩된 액세스를 허용 하는 공용 생성자를 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-782">Unlike most classes, <xref:System.Array> provides the <xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.</span></span>  
  
 <span data-ttu-id="3f755-783">요소 참조 형식으로 초기화 됩니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-783">Reference-type elements are initialized to `null`.</span></span> <span data-ttu-id="3f755-784">값 형식 요소를 0으로 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-784">Value-type elements are initialized to zero.</span></span>  
  
 <span data-ttu-id="3f755-785">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-785">This method is an O(`n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-786">다음 코드 예제를 만들고 1 차원 초기화 하는 방법을 보여 줍니다 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-786">The following code example shows how to create and initialize a one-dimensional <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Array.CreateInstance Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CreateInstance Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.CreateInstance Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CreateInstance Example/CS/source.cs#1)]
 [!code-vb[Classic Array.CreateInstance Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CreateInstance Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-787"><paramref name="elementType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-787"><paramref name="elementType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-788"><paramref name="elementType" />은 유효한 <see cref="T:System.Type" />이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-788"><paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="3f755-789"><paramref name="elementType" />은 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-789"><paramref name="elementType" /> is not supported.</span></span> <span data-ttu-id="3f755-790">예를 들면 <see cref="T:System.Void" />는 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-790">For example, <see cref="T:System.Void" /> is not supported.</span></span>  
  
 <span data-ttu-id="3f755-791">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-791">-or-</span></span>  
  
 <span data-ttu-id="3f755-792"><paramref name="elementType" />이 개방형 제네릭 형식인 경우.</span><span class="sxs-lookup"><span data-stu-id="3f755-792"><paramref name="elementType" /> is an open generic type.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-793"><paramref name="length" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-793"><paramref name="length" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static Array CreateInstance (Type elementType, params int[] lengths);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Array CreateInstance(class System.Type elementType, int32[] lengths) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.CreateInstance(System.Type,System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance (elementType As Type, ParamArray lengths As Integer()) As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Array ^ CreateInstance(Type ^ elementType, ... cli::array &lt;int&gt; ^ lengths);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="System.Type" />
        <Parameter Name="lengths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="elementType"><span data-ttu-id="3f755-794">만들 <see cref="T:System.Array" />의 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-794">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</span></span></param>
        <param name="lengths"><span data-ttu-id="3f755-795">만들 <see cref="T:System.Array" />의 각 차원 크기를 나타내는 32비트 정수 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-795">An array of 32-bit integers that represent the size of each dimension of the <see cref="T:System.Array" /> to create.</span></span></param>
        <summary><span data-ttu-id="3f755-796">지정한 <see cref="T:System.Type" /> 및 차원 길이를 가진 인덱스가 0부터 시작하는 다차원 <see cref="T:System.Array" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-796">Creates a multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and dimension lengths, with zero-based indexing.</span></span> <span data-ttu-id="3f755-797">차원 길이가 32비트 정수 배열로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-797">The dimension lengths are specified in an array of 32-bit integers.</span></span></summary>
        <returns><span data-ttu-id="3f755-798">지정한 <see cref="T:System.Type" /> 및 각 차원에 대해 지정한 길이를 가진 인덱스가 0부터 시작하는 새 다차원 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-798">A new multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length for each dimension, using zero-based indexing.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-799">대부분의 클래스와 달리 <xref:System.Array> 제공는 <xref:System.Array.CreateInstance%2A> 메서드 런타임에 바인딩된 액세스를 허용 하는 공용 생성자를 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-799">Unlike most classes, <xref:System.Array> provides the <xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.</span></span>  
  
 <span data-ttu-id="3f755-800">에 있는 요소의 수는 `lengths` 새 배열 차원 수와 동일 해야 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-800">The number of elements in the `lengths` array must equal the number of dimensions in the new <xref:System.Array>.</span></span> <span data-ttu-id="3f755-801">각 요소는 `lengths` 배열 새에서 해당 차원의 길이 지정 해야 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-801">Each element of the `lengths` array must specify the length of the corresponding dimension in the new <xref:System.Array>.</span></span>  
  
 <span data-ttu-id="3f755-802">요소 참조 형식으로 초기화 됩니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-802">Reference-type elements are initialized to `null`.</span></span> <span data-ttu-id="3f755-803">값 형식 요소를 0으로 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-803">Value-type elements are initialized to zero.</span></span>  
  
 <span data-ttu-id="3f755-804">이 메서드는 O는 (`n`) 작업, 여기서 `n` 에 있는 모든 값의 곱 `lengths`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-804">This method is an O(`n`) operation, where `n` is the product of all values in `lengths`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-805">다음 코드 예제에서는 만들고 다차원 초기화 하는 방법을 보여 줍니다. <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-805">The following code example shows how to create and initialize a multidimensional <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Array.CreateInstance3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CreateInstance3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.CreateInstance3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CreateInstance3 Example/CS/source.cs#1)]
 [!code-vb[Classic Array.CreateInstance3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CreateInstance3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-806"><paramref name="elementType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-806"><paramref name="elementType" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="3f755-807">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-807">-or-</span></span>  
  
 <span data-ttu-id="3f755-808"><paramref name="lengths" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-808"><paramref name="lengths" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-809"><paramref name="elementType" />은 유효한 <see cref="T:System.Type" />이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-809"><paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.</span></span>  
  
 <span data-ttu-id="3f755-810">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-810">-or-</span></span>  
  
 <span data-ttu-id="3f755-811"><paramref name="lengths" /> 배열에 1개 미만의 요소가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-811">The <paramref name="lengths" /> array contains less than one element.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="3f755-812"><paramref name="elementType" />은 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-812"><paramref name="elementType" /> is not supported.</span></span> <span data-ttu-id="3f755-813">예를 들면 <see cref="T:System.Void" />는 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-813">For example, <see cref="T:System.Void" /> is not supported.</span></span>  
  
 <span data-ttu-id="3f755-814">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-814">-or-</span></span>  
  
 <span data-ttu-id="3f755-815"><paramref name="elementType" />은 개방형 제네릭 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-815"><paramref name="elementType" /> is an open generic type.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3f755-816"><paramref name="lengths" />의 값이 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-816">Any value in <paramref name="lengths" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static Array CreateInstance (Type elementType, params long[] lengths);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Array CreateInstance(class System.Type elementType, int64[] lengths) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.CreateInstance(System.Type,System.Int64[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance (elementType As Type, ParamArray lengths As Long()) As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Array ^ CreateInstance(Type ^ elementType, ... cli::array &lt;long&gt; ^ lengths);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="System.Type" />
        <Parameter Name="lengths" Type="System.Int64[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="elementType"><span data-ttu-id="3f755-817">만들 <see cref="T:System.Array" />의 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-817">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</span></span></param>
        <param name="lengths"><span data-ttu-id="3f755-818">만들 <see cref="T:System.Array" />의 각 차원 크기를 나타내는 64비트 정수 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-818">An array of 64-bit integers that represent the size of each dimension of the <see cref="T:System.Array" /> to create.</span></span> <span data-ttu-id="3f755-819">배열의 각 정수는 0과 <see cref="F:System.Int32.MaxValue" /> 사이여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-819">Each integer in the array must be between zero and <see cref="F:System.Int32.MaxValue" />, inclusive.</span></span></param>
        <summary><span data-ttu-id="3f755-820">지정한 <see cref="T:System.Type" /> 및 차원 길이를 가진 인덱스가 0부터 시작하는 다차원 <see cref="T:System.Array" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-820">Creates a multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and dimension lengths, with zero-based indexing.</span></span> <span data-ttu-id="3f755-821">차원 길이가 64비트 정수 배열로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-821">The dimension lengths are specified in an array of 64-bit integers.</span></span></summary>
        <returns><span data-ttu-id="3f755-822">지정한 <see cref="T:System.Type" /> 및 각 차원에 대해 지정한 길이를 가진 인덱스가 0부터 시작하는 새 다차원 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-822">A new multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length for each dimension, using zero-based indexing.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-823">대부분의 클래스와 달리 <xref:System.Array> 제공는 <xref:System.Array.CreateInstance%2A> 메서드 런타임에 바인딩된 액세스를 허용 하는 공용 생성자를 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-823">Unlike most classes, <xref:System.Array> provides the <xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.</span></span>  
  
 <span data-ttu-id="3f755-824">에 있는 요소의 수는 `lengths` 새 배열 차원 수와 동일 해야 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-824">The number of elements in the `lengths` array must equal the number of dimensions in the new <xref:System.Array>.</span></span> <span data-ttu-id="3f755-825">각 요소는 `lengths` 배열 새에서 해당 차원의 길이 지정 해야 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-825">Each element of the `lengths` array must specify the length of the corresponding dimension in the new <xref:System.Array>.</span></span>  
  
 <span data-ttu-id="3f755-826">요소 참조 형식으로 초기화 됩니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-826">Reference-type elements are initialized to `null`.</span></span> <span data-ttu-id="3f755-827">값 형식 요소를 0으로 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-827">Value-type elements are initialized to zero.</span></span>  
  
 <span data-ttu-id="3f755-828">이 메서드는 O는 (`n`) 작업, 여기서 `n` 에 있는 모든 값의 곱 `lengths`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-828">This method is an O(`n`) operation, where `n` is the product of all values in `lengths`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-829">다음 코드 예제에서는 만들고 다차원 초기화 하는 방법을 보여 줍니다. <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-829">The following code example shows how to create and initialize a multidimensional <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Array.CreateInstance3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CreateInstance3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.CreateInstance3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CreateInstance3 Example/CS/source.cs#1)]
 [!code-vb[Classic Array.CreateInstance3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CreateInstance3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-830"><paramref name="elementType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-830"><paramref name="elementType" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="3f755-831">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-831">-or-</span></span>  
  
 <span data-ttu-id="3f755-832"><paramref name="lengths" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-832"><paramref name="lengths" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-833"><paramref name="elementType" />은 유효한 <see cref="T:System.Type" />이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-833"><paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.</span></span>  
  
 <span data-ttu-id="3f755-834">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-834">-or-</span></span>  
  
 <span data-ttu-id="3f755-835"><paramref name="lengths" /> 배열에 1개 미만의 요소가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-835">The <paramref name="lengths" /> array contains less than one element.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="3f755-836"><paramref name="elementType" />은 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-836"><paramref name="elementType" /> is not supported.</span></span> <span data-ttu-id="3f755-837">예를 들면 <see cref="T:System.Void" />는 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-837">For example, <see cref="T:System.Void" /> is not supported.</span></span>  
  
 <span data-ttu-id="3f755-838">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-838">-or-</span></span>  
  
 <span data-ttu-id="3f755-839"><paramref name="elementType" />이 개방형 제네릭 형식인 경우.</span><span class="sxs-lookup"><span data-stu-id="3f755-839"><paramref name="elementType" /> is an open generic type.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3f755-840"><paramref name="lengths" />의 값이 0보다 작거나 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-840">Any value in <paramref name="lengths" /> is less than zero or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static Array CreateInstance (Type elementType, int length1, int length2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Array CreateInstance(class System.Type elementType, int32 length1, int32 length2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance (elementType As Type, length1 As Integer, length2 As Integer) As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Array ^ CreateInstance(Type ^ elementType, int length1, int length2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="System.Type" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="elementType"><span data-ttu-id="3f755-841">만들 <see cref="T:System.Array" />의 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-841">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</span></span></param>
        <param name="length1"><span data-ttu-id="3f755-842">만들 <see cref="T:System.Array" />의 첫 번째 차원 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-842">The size of the first dimension of the <see cref="T:System.Array" /> to create.</span></span></param>
        <param name="length2"><span data-ttu-id="3f755-843">만들 <see cref="T:System.Array" />의 두 번째 차원 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-843">The size of the second dimension of the <see cref="T:System.Array" /> to create.</span></span></param>
        <summary><span data-ttu-id="3f755-844">0부터 시작하는 인덱스를 사용하여 지정된 <see cref="T:System.Type" /> 및 차원 길이의 2차원 <see cref="T:System.Array" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-844">Creates a two-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and dimension lengths, with zero-based indexing.</span></span></summary>
        <returns><span data-ttu-id="3f755-845">0부터 시작하는 인덱스를 사용하며 각 차원이 지정된 길이로 된 지정된 <see cref="T:System.Type" />의 새로운 2차원 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-845">A new two-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length for each dimension, using zero-based indexing.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-846">대부분의 클래스와 달리 <xref:System.Array> 제공는 <xref:System.Array.CreateInstance%2A> 메서드 런타임에 바인딩된 액세스를 허용 하는 공용 생성자를 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-846">Unlike most classes, <xref:System.Array> provides the <xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.</span></span>  
  
 <span data-ttu-id="3f755-847">요소 참조 형식으로 초기화 됩니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-847">Reference-type elements are initialized to `null`.</span></span> <span data-ttu-id="3f755-848">값 형식 요소를 0으로 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-848">Value-type elements are initialized to zero.</span></span>  
  
 <span data-ttu-id="3f755-849">이 메서드는 O는 (`n`) 작업, 여기서 `n` 의 곱 `length1` 및 `length2`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-849">This method is an O(`n`) operation, where `n` is the product of `length1` and `length2`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-850">다음 코드 예제를 만들고 차원 초기화 하는 방법을 보여 줍니다 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-850">The following code example shows how to create and initialize a two-dimensional <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Array.CreateInstance1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CreateInstance1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.CreateInstance1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CreateInstance1 Example/CS/source.cs#1)]
 [!code-vb[Classic Array.CreateInstance1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CreateInstance1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-851"><paramref name="elementType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-851"><paramref name="elementType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-852"><paramref name="elementType" />은 유효한 <see cref="T:System.Type" />이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-852"><paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="3f755-853"><paramref name="elementType" />은 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-853"><paramref name="elementType" /> is not supported.</span></span> <span data-ttu-id="3f755-854">예를 들면 <see cref="T:System.Void" />는 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-854">For example, <see cref="T:System.Void" /> is not supported.</span></span>  
  
 <span data-ttu-id="3f755-855">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-855">-or-</span></span>  
  
 <span data-ttu-id="3f755-856"><paramref name="elementType" />이 개방형 제네릭 형식인 경우.</span><span class="sxs-lookup"><span data-stu-id="3f755-856"><paramref name="elementType" /> is an open generic type.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-857"><paramref name="length1" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-857"><paramref name="length1" /> is less than zero.</span></span>  
  
 <span data-ttu-id="3f755-858">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-858">-or-</span></span>  
  
 <span data-ttu-id="3f755-859"><paramref name="length2" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-859"><paramref name="length2" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static Array CreateInstance (Type elementType, int[] lengths, int[] lowerBounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Array CreateInstance(class System.Type elementType, int32[] lengths, int32[] lowerBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance (elementType As Type, lengths As Integer(), lowerBounds As Integer()) As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Array ^ CreateInstance(Type ^ elementType, cli::array &lt;int&gt; ^ lengths, cli::array &lt;int&gt; ^ lowerBounds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="System.Type" />
        <Parameter Name="lengths" Type="System.Int32[]" />
        <Parameter Name="lowerBounds" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="elementType"><span data-ttu-id="3f755-860">만들 <see cref="T:System.Array" />의 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-860">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</span></span></param>
        <param name="lengths"><span data-ttu-id="3f755-861">만들 <see cref="T:System.Array" />의 각 차원 크기를 포함하는 1차원 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-861">A one-dimensional array that contains the size of each dimension of the <see cref="T:System.Array" /> to create.</span></span></param>
        <param name="lowerBounds"><span data-ttu-id="3f755-862">만들 <see cref="T:System.Array" />의 각 차원 하한(시작 인덱스)을 포함하는 1차원 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-862">A one-dimensional array that contains the lower bound (starting index) of each dimension of the <see cref="T:System.Array" /> to create.</span></span></param>
        <summary><span data-ttu-id="3f755-863">지정한 하한을 가진 지정한 <see cref="T:System.Array" /> 및 차원 길이의 다차원 <see cref="T:System.Type" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-863">Creates a multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and dimension lengths, with the specified lower bounds.</span></span></summary>
        <returns><span data-ttu-id="3f755-864">각 차원에 대해 지정한 길이 및 하한을 가진 지정한 <see cref="T:System.Array" />의 새 다차원 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-864">A new multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length and lower bound for each dimension.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-865">대부분의 클래스와 달리 <xref:System.Array> 제공는 <xref:System.Array.CreateInstance%2A> 메서드 런타임에 바인딩된 액세스를 허용 하는 공용 생성자를 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-865">Unlike most classes, <xref:System.Array> provides the <xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.</span></span>  
  
 <span data-ttu-id="3f755-866">`lengths` 및 `lowerBounds` 배열 요소는 동일한 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-866">The `lengths` and `lowerBounds` arrays must have the same number of elements.</span></span> <span data-ttu-id="3f755-867">에 있는 요소의 수는 `lengths` 새 배열 차원 수와 동일 해야 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-867">The number of elements in the `lengths` array must equal the number of dimensions in the new <xref:System.Array>.</span></span>  
  
 <span data-ttu-id="3f755-868">각 요소는 `lengths` 배열 새에서 해당 차원의 길이 지정 해야 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-868">Each element of the `lengths` array must specify the length of the corresponding dimension in the new <xref:System.Array>.</span></span>  
  
 <span data-ttu-id="3f755-869">각 요소는 `lowerBounds` 배열 새에 해당 하는 차원에 대 한 하한값을 지정 해야 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-869">Each element of the `lowerBounds` array must specify the lower bound of the corresponding dimension in the new <xref:System.Array>.</span></span> <span data-ttu-id="3f755-870">일반적으로.NET Framework 클래스 라이브러리와 많은 프로그래밍 언어에 0이 아닌 처리 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-870">Generally, the .NET Framework class library and many programming languages do not handle nonzero lower bounds.</span></span>  
  
 <span data-ttu-id="3f755-871">요소 참조 형식으로 초기화 됩니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-871">Reference-type elements are initialized to `null`.</span></span> <span data-ttu-id="3f755-872">값 형식 요소를 0으로 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-872">Value-type elements are initialized to zero.</span></span>  
  
 <span data-ttu-id="3f755-873">이 메서드는 O는 (`n`) 작업, 여기서 `n` 에 있는 모든 값의 곱 `lengths`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-873">This method is an O(`n`) operation, where `n` is the product of all values in `lengths`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-874">다음 코드 예제에서는 만들고 다차원 초기화 하는 방법을 보여 줍니다. <xref:System.Array> 지정 된 하 한을 가진 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-874">The following code example shows how to create and initialize a multidimensional <xref:System.Array> with specified lower bounds.</span></span>  
  
 [!code-cpp[Classic Array.CreateInstance4 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CreateInstance4 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.CreateInstance4 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CreateInstance4 Example/CS/source.cs#1)]
 [!code-vb[Classic Array.CreateInstance4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CreateInstance4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-875"><paramref name="elementType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-875"><paramref name="elementType" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="3f755-876">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-876">-or-</span></span>  
  
 <span data-ttu-id="3f755-877"><paramref name="lengths" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-877"><paramref name="lengths" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="3f755-878">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-878">-or-</span></span>  
  
 <span data-ttu-id="3f755-879"><paramref name="lowerBounds" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-879"><paramref name="lowerBounds" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-880"><paramref name="elementType" />은 유효한 <see cref="T:System.Type" />이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-880"><paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.</span></span>  
  
 <span data-ttu-id="3f755-881">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-881">-or-</span></span>  
  
 <span data-ttu-id="3f755-882"><paramref name="lengths" /> 배열에 1개 미만의 요소가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-882">The <paramref name="lengths" /> array contains less than one element.</span></span>  
  
 <span data-ttu-id="3f755-883">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-883">-or-</span></span>  
  
 <span data-ttu-id="3f755-884"><paramref name="lengths" />와 <paramref name="lowerBounds" /> 배열에 들어 있는 요소 수가 다른 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-884">The <paramref name="lengths" /> and <paramref name="lowerBounds" /> arrays do not contain the same number of elements.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="3f755-885"><paramref name="elementType" />은 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-885"><paramref name="elementType" /> is not supported.</span></span> <span data-ttu-id="3f755-886">예를 들면 <see cref="T:System.Void" />는 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-886">For example, <see cref="T:System.Void" /> is not supported.</span></span>  
  
 <span data-ttu-id="3f755-887">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-887">-or-</span></span>  
  
 <span data-ttu-id="3f755-888"><paramref name="elementType" />은 개방형 제네릭 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-888"><paramref name="elementType" /> is an open generic type.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3f755-889"><paramref name="lengths" />의 값이 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-889">Any value in <paramref name="lengths" /> is less than zero.</span></span>  
  
 <span data-ttu-id="3f755-890">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-890">-or-</span></span>  
  
 <span data-ttu-id="3f755-891"><paramref name="lowerBounds" />에 있는 모든 값이 아주 커서 차원의 하한과 길이의 합이 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-891">Any value in <paramref name="lowerBounds" /> is very large, such that the sum of a dimension's lower bound and length is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static Array CreateInstance (Type elementType, int length1, int length2, int length3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Array CreateInstance(class System.Type elementType, int32 length1, int32 length2, int32 length3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateInstance (elementType As Type, length1 As Integer, length2 As Integer, length3 As Integer) As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Array ^ CreateInstance(Type ^ elementType, int length1, int length2, int length3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="System.Type" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
        <Parameter Name="length3" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="elementType"><span data-ttu-id="3f755-892">만들 <see cref="T:System.Array" />의 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-892">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</span></span></param>
        <param name="length1"><span data-ttu-id="3f755-893">만들 <see cref="T:System.Array" />의 첫 번째 차원 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-893">The size of the first dimension of the <see cref="T:System.Array" /> to create.</span></span></param>
        <param name="length2"><span data-ttu-id="3f755-894">만들 <see cref="T:System.Array" />의 두 번째 차원 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-894">The size of the second dimension of the <see cref="T:System.Array" /> to create.</span></span></param>
        <param name="length3"><span data-ttu-id="3f755-895">만들 <see cref="T:System.Array" />의 세 번째 차원 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-895">The size of the third dimension of the <see cref="T:System.Array" /> to create.</span></span></param>
        <summary><span data-ttu-id="3f755-896">지정한 <see cref="T:System.Type" /> 및 차원 길이를 가진 인덱스가 0부터 시작하는 삼차원 <see cref="T:System.Array" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-896">Creates a three-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and dimension lengths, with zero-based indexing.</span></span></summary>
        <returns><span data-ttu-id="3f755-897">지정한 <see cref="T:System.Type" /> 및 각 차원에 대해 지정한 길이를 가진 인덱스가 0부터 시작하는 새 삼차원 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-897">A new three-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length for each dimension, using zero-based indexing.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-898">대부분의 클래스와 달리 <xref:System.Array> 제공는 <xref:System.Array.CreateInstance%2A> 메서드 런타임에 바인딩된 액세스를 허용 하는 공용 생성자를 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-898">Unlike most classes, <xref:System.Array> provides the <xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.</span></span>  
  
 <span data-ttu-id="3f755-899">요소 참조 형식으로 초기화 됩니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-899">Reference-type elements are initialized to `null`.</span></span> <span data-ttu-id="3f755-900">값 형식 요소를 0으로 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-900">Value-type elements are initialized to zero.</span></span>  
  
 <span data-ttu-id="3f755-901">이 메서드는 O는 (`n`) 작업, 여기서 `n` 의 곱 `length1`, `length2`, 및 `length3`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-901">This method is an O(`n`) operation, where `n` is the product of `length1`, `length2`, and `length3`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-902">다음 코드 예제에는 생성 하는 삼차원 초기화 하는 방법을 보여 줍니다 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-902">The following code example shows how to create and initialize a three-dimensional <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Array.CreateInstance2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.CreateInstance2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.CreateInstance2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.CreateInstance2 Example/CS/source.cs#1)]
 [!code-vb[Classic Array.CreateInstance2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.CreateInstance2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-903"><paramref name="elementType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-903"><paramref name="elementType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-904"><paramref name="elementType" />은 유효한 <see cref="T:System.Type" />이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-904"><paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="3f755-905"><paramref name="elementType" />은 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-905"><paramref name="elementType" /> is not supported.</span></span> <span data-ttu-id="3f755-906">예를 들면 <see cref="T:System.Void" />는 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-906">For example, <see cref="T:System.Void" /> is not supported.</span></span>  
  
 <span data-ttu-id="3f755-907">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-907">-or-</span></span>  
  
 <span data-ttu-id="3f755-908"><paramref name="elementType" />이 개방형 제네릭 형식인 경우.</span><span class="sxs-lookup"><span data-stu-id="3f755-908"><paramref name="elementType" /> is an open generic type.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-909"><paramref name="length1" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-909"><paramref name="length1" /> is less than zero.</span></span>  
  
 <span data-ttu-id="3f755-910">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-910">-or-</span></span>  
  
 <span data-ttu-id="3f755-911"><paramref name="length2" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-911"><paramref name="length2" /> is less than zero.</span></span>  
  
 <span data-ttu-id="3f755-912">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-912">-or-</span></span>  
  
 <span data-ttu-id="3f755-913"><paramref name="length3" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-913"><paramref name="length3" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Empty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] Empty&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] Empty&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Empty``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Empty(Of T) () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static cli::array &lt;T&gt; ^ Empty();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-914">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-914">The type of the elements of the array.</span></span></typeparam>
        <summary><span data-ttu-id="3f755-915">빈 배열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-915">Returns an empty array.</span></span></summary>
        <returns><span data-ttu-id="3f755-916">빈 <see cref="T:System.Array" /> 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-916">Returns an empty <see cref="T:System.Array" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exists&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Exists&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists&lt;T&gt;(!!T[] array, class System.Predicate`1&lt;!!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Exists``1(``0[],System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exists(Of T) (array As T(), match As Predicate(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool Exists(cli::array &lt;T&gt; ^ array, Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-917">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-917">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-918">검색할 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-918">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="match"><span data-ttu-id="3f755-919">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-919">The <see cref="T:System.Predicate`1" /> that defines the conditions of the elements to search for.</span></span></param>
        <summary><span data-ttu-id="3f755-920">지정한 배열에 지정한 조건자에 정의된 조건과 일치하는 요소가 포함되어 있는지를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-920">Determines whether the specified array contains elements that match the conditions defined by the specified predicate.</span></span></summary>
        <returns>
          <span data-ttu-id="3f755-921"><paramref name="array" />에 지정한 조건자에 정의된 조건과 일치하는 하나 이상의 요소가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-921"><see langword="true" /> if <paramref name="array" /> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-922"><xref:System.Predicate%601> 반환 하는 메서드에 대리자 `true` 개체에 전달 하는 경우 대리자에 정의 된 조건과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-922">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="3f755-923">요소 `array` 에 개별적으로 전달 되는 <xref:System.Predicate%601>, 일치 하는 경우 처리가 중지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-923">The elements of `array` are individually passed to the <xref:System.Predicate%601>, and processing is stopped when a match is found.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-924">C# 및 Visual Basic에서 필요 없는 만들려는 <xref:System.Predicate%601> 명시적으로 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-924">In C# and Visual Basic, it is not necessary to create the <xref:System.Predicate%601> delegate explicitly.</span></span> <span data-ttu-id="3f755-925">이러한 언어 올바른 대리자 컨텍스트를 유추 하 고 자동으로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-925">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 <span data-ttu-id="3f755-926">이 메서드는 O는 (`n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-926">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-927">다음 예제에 대 한 일치 조건을 지정는 <xref:System.Array.Exists%2A> 메서드 usinglambda 식을 하 여 전 세계는 지정 된 문자로 시작 하는 여부 또는 지정된 된 배열에서 지구를 찾을 수 있는지 여부를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-927">The following example specifies the match conditions for the <xref:System.Array.Exists%2A> method usinglambda expressions to check whether a planet starts with a given letter or whether the planet is found on the given array.</span></span>  
  
 [!code-csharp[System.Array.Exists#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.exists/cs/exists3.cs#3)]
 [!code-vb[System.Array.Exists#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.exists/vb/exists3.vb#3)]  
  
 <span data-ttu-id="3f755-928">다음 예제에서는 <xref:System.Array.Exists%2A> 메서드 모든 이름이 문자열 배열에서 지정 된 문자로 시작 하는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-928">The following example uses the <xref:System.Array.Exists%2A> method to indicate whether any names in a string array begin with a specified character.</span></span> <span data-ttu-id="3f755-929">이 예제에서는 인스턴스화합니다는 `StringSearcher` 해당 클래스 생성자에 검색할 문자열을 전달 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-929">The example instantiates a `StringSearcher` object by passing the string to search for to its class constructor.</span></span> <span data-ttu-id="3f755-930">`StringSearcher.StartsWith` 메서드 시그니처가 동일한는 <xref:System.Predicate%601> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-930">The `StringSearcher.StartsWith` method has same signature as the <xref:System.Predicate%601> delegate.</span></span> <span data-ttu-id="3f755-931">경우는 <xref:System.Array.Exists%2A> 메서드가 호출 되 면 반환 될 때까지 배열의 각 멤버는 대리자에 전달 됩니다 `true` 또는 배열의 모든 요소를 반복 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-931">When the <xref:System.Array.Exists%2A> method is called, each member of the array is passed to the delegate until it returns `true` or iterates all the elements in the array.</span></span>  
  
 [!code-csharp[System.Array.Exists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.exists/cs/exists1.cs#1)]
 [!code-vb[System.Array.Exists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.exists/vb/exists1.vb#1)]  
  
 <span data-ttu-id="3f755-932">대신 수 있습니다도 람다 식을 사용 하는 대리자의 시그니처를 가진 해당 메서드를 명시적으로 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-932">You can also use a lambda expression rather than explicitly define a method whose signature corresponds to that of the delegate.</span></span> <span data-ttu-id="3f755-933">다음 예제에서는 대체는 `StringSearcher` 클래스 및 해당 `StartsWith` 람다 식 사용 하 여 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-933">The following example replaces the `StringSearcher` class and its `StartsWith` method with a lambda expression.</span></span>  
  
 [!code-csharp[System.Array.Exists#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.exists/cs/exists2.cs#2)]
 [!code-vb[System.Array.Exists#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.exists/vb/exists2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-934"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-934"><paramref name="array" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="3f755-935">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-935">-or-</span></span>  
  
 <span data-ttu-id="3f755-936"><paramref name="match" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-936"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindLast``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindAll``1(``0[],System.Predicate{``0})" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="Overload:System.Array.IndexOf" />
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <altmember cref="M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="Fill&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Fill&lt;T&gt; (T[] array, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fill&lt;T&gt;(!!T[] array, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Fill``1(``0[],``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fill(Of T) (array As T(), value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Fill(cli::array &lt;T&gt; ^ array, T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="array">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Fill&lt;T&gt; (T[] array, T value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fill&lt;T&gt;(!!T[] array, !!T value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Fill``1(``0[],``0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fill(Of T) (array As T(), value As T, startIndex As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Fill(cli::array &lt;T&gt; ^ array, T value, int startIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="value" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="array">To be added.</param>
        <param name="value">To be added.</param>
        <param name="startIndex">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Find&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Find&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Find&lt;T&gt;(!!T[] array, class System.Predicate`1&lt;!!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Find(Of T) (array As T(), match As Predicate(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T Find(cli::array &lt;T&gt; ^ array, Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-937">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-937">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-938">검색할 1차원(인덱스는 0부터 시작) 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-938">The one-dimensional, zero-based array to search.</span></span></param>
        <param name="match"><span data-ttu-id="3f755-939">검색할 요소의 조건을 정의하는 조건자입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-939">The predicate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="3f755-940">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 전체 <see cref="T:System.Array" />에서 처음으로 검색한 요소를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-940">Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <see cref="T:System.Array" />.</span></span></summary>
        <returns><span data-ttu-id="3f755-941">지정된 조건자에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째 요소이고, 그렇지 않으면 <paramref name="T" /> 형식의 기본값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-941">The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-942"><xref:System.Predicate%601> 메서드 또는 람다 식을 반환 하는 대리자 `true` 개체에 전달 하는 경우 대리자 또는 람다 식에 정의 된 조건과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-942">The <xref:System.Predicate%601> is a delegate to a method or a lambda expression that returns `true` if the object passed to it matches the conditions defined in the delegate or lambda expression.</span></span>  <span data-ttu-id="3f755-943">요소 `array` 에 개별적으로 전달 되는 <xref:System.Predicate%601>첫 번째 요소부터 마지막 요소까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-943">The elements of `array` are individually passed to the <xref:System.Predicate%601>, starting with the first element and ending with the last element.</span></span>  <span data-ttu-id="3f755-944">일치 하는 경우 처리가 중지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-944">Processing is stopped when a match is found.</span></span>  
  
 <span data-ttu-id="3f755-945">이 메서드는 O는 (`n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-945">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-946">다음 예제에서는 <xref:System.Predicate%601> 대리자는 <xref:System.Array.Find%2A> 배열을 검색할 제네릭 메서드 <xref:System.Drawing.Point> 구조입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-946">The following example uses a <xref:System.Predicate%601> delegate with the <xref:System.Array.Find%2A> generic method to search an array of <xref:System.Drawing.Point> structures.</span></span> <span data-ttu-id="3f755-947">대리자가 나타내는 메서드 `ProductGT10`, 반환 `true` X 및 Y 필드 제품 100, 000 보다 큰 경우.</span><span class="sxs-lookup"><span data-stu-id="3f755-947">The method the delegate represents, `ProductGT10`, returns `true` if the product of the X and Y fields is greater than 100,000.</span></span> <span data-ttu-id="3f755-948"><xref:System.Array.Find%2A> 메서드 테스트 조건에 맞는 첫 번째 지점을 반환 하는 배열의 각 요소에 대 한 대리자를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-948">The <xref:System.Array.Find%2A> method calls the delegate for each element of the array, returning the first point that meets the test condition.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-949">Visual Basic 및 C# 사용자 대리자를 명시적으로 만들거나 제네릭 메서드의 형식 인수를 지정 하지 않아도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-949">Visual Basic and C# users do not have to create the delegate explicitly or specify the type argument of the generic method.</span></span> <span data-ttu-id="3f755-950">컴파일러에서 제공 하는 메서드 인수 필요한 형식을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-950">The compilers determine the necessary types from the method arguments you supply.</span></span>  
  
 [!code-csharp[System.Array.Find#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.find/cs/source.cs#1)]
 [!code-vb[System.Array.Find#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.find/vb/source.vb#1)]  
  
 <span data-ttu-id="3f755-951">필요한 시그니처를 가진 메서드를 명시적으로 정의 하는 대신 인스턴스화하는 <xref:System.Predicate%601> 대리자와 대리자를 전달 하는 <xref:System.Array.Find%2A> 는 람다 식을 사용 하는 일반적인 메서드를 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-951">Rather than explicitly defining a method with the necessary signature, instantiating a <xref:System.Predicate%601> delegate, and passing the delegate to the <xref:System.Array.Find%2A> method, it is customary to use a lambda expression.</span></span> <span data-ttu-id="3f755-952">다음 예제는 이전 쿼리와 동일으로 람다 식을 사용 하 여는 `match` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-952">The following example is identical to the previous one, except that it uses a lambda expression as the `match` argument.</span></span>  
  
 [!code-csharp[System.Array.Find#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.find/cs/lambda.cs#2)]
 [!code-vb[System.Array.Find#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.find/vb/lambda.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-953"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-953"><paramref name="array" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="3f755-954">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-954">-or-</span></span>  
  
 <span data-ttu-id="3f755-955"><paramref name="match" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-955"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Array.Exists``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindLast``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindAll``1(``0[],System.Predicate{``0})" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="Overload:System.Array.IndexOf" />
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindAll&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] FindAll&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] FindAll&lt;T&gt;(!!T[] array, class System.Predicate`1&lt;!!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.FindAll``1(``0[],System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindAll(Of T) (array As T(), match As Predicate(Of T)) As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static cli::array &lt;T&gt; ^ FindAll(cli::array &lt;T&gt; ^ array, Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-956">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-956">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-957">검색할 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-957">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="match"><span data-ttu-id="3f755-958">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-958">The <see cref="T:System.Predicate`1" /> that defines the conditions of the elements to search for.</span></span></param>
        <summary><span data-ttu-id="3f755-959">지정한 조건자에 정의된 조건과 일치하는 모든 요소를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-959">Retrieves all the elements that match the conditions defined by the specified predicate.</span></span></summary>
        <returns><span data-ttu-id="3f755-960">지정한 조건자에 정의된 조건과 일치하는 요소가 있으면 일치하는 모든 요소를 포함하는 <see cref="T:System.Array" />이고, 그렇지 않으면 빈 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-960">An <see cref="T:System.Array" /> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-961"><xref:System.Predicate%601> 반환 하는 메서드에 대리자 `true` 개체에 전달 하는 경우 대리자에 정의 된 조건과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-961">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="3f755-962">요소 `array` 에 개별적으로 전달 되는 <xref:System.Predicate%601>, 조건과 일치 하는 요소는 반환된 된 배열에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-962">The elements of `array` are individually passed to the <xref:System.Predicate%601>, and the elements that match the conditions are saved in the returned array.</span></span>  
  
 <span data-ttu-id="3f755-963">이 메서드는 O는 (`n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-963">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-964">다음 예제에서는 값의 범위는 0에서 1, 000을 가진 50 난수의 배열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-964">The following example creates an array of 50 random numbers with values that can range from 0 to 1,000.</span></span> <span data-ttu-id="3f755-965">그런 다음 호출 하는 <xref:System.Array.FindAll%2A> 메서드 값을 반환 하는 해당 범위에서 300를 600으로 람다 식 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-965">It then calls the <xref:System.Array.FindAll%2A> method with a lambda expression that returns the values that range from 300 to 600.</span></span> <span data-ttu-id="3f755-966">람다 식은 라는 매개 변수를 전달 `x`;  이 나타냅니다에 전달 되는 각 배열 멤버는 <xref:System.Predicate%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-966">Note that the lambda expression is passed a parameter named `x`;  this represents the individual array member that is passed to the <xref:System.Predicate%601>.</span></span> <span data-ttu-id="3f755-967">또한 로컬 `lBound` 및 `uBound` 변수에 람다 식 내에서 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-967">Also note that the local `lBound` and `uBound` variables are accessible within the lambda expression.</span></span>  
  
 [!code-csharp[System.Array.FindAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.findall/cs/findall.cs#1)]
 [!code-vb[System.Array.FindAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.findall/vb/findall.vb#1)]  
  
 <span data-ttu-id="3f755-968">다음 코드 예제는 <xref:System.Array.Find%2A>, <xref:System.Array.FindLast%2A>, 및 <xref:System.Array.FindAll%2A> 제네릭 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-968">The following code example demonstrates the <xref:System.Array.Find%2A>, <xref:System.Array.FindLast%2A>, and <xref:System.Array.FindAll%2A> generic methods.</span></span> <span data-ttu-id="3f755-969">2 개 (위치 1과 5)에서 "saurus"으로 끝나는 8 공룡 이름이 포함 된 문자열 배열을 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-969">An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="3f755-970">코드 예제에서는 명명 된 검색 조건자 메서드도 정의 `EndsWithSaurus`문자열 매개 변수를 허용 하는, 및에서는 나타내는 입력된 문자열이 "saurus"로 끝나는 여부입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-970">The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="3f755-971"><xref:System.Array.Find%2A> 제네릭 메서드를 차례로 각 요소를 전달 하는 처음부터 배열을 트래버스하는 `EndsWithSaurus` 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-971">The <xref:System.Array.Find%2A> generic method traverses the array from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="3f755-972">검색을 중지 하는 경우는 `EndsWithSaurus` 메서드 반환 `true` "Amargasaurus" 요소에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-972">The search stops when the `EndsWithSaurus` method returns `true` for the element "Amargasaurus".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-973">C# 및 Visual Basic에서 필요 없는 만들려는 `Predicate<string>` 위임 (`Predicate(Of String)` Visual basic에서) 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-973">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="3f755-974">이러한 언어 올바른 대리자 컨텍스트를 유추 하 고 자동으로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-974">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 <span data-ttu-id="3f755-975"><xref:System.Array.FindLast%2A> 제네릭 메서드는 배열의 끝부터 뒤로 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-975">The <xref:System.Array.FindLast%2A> generic method is used to search the array backward from the end.</span></span> <span data-ttu-id="3f755-976">위치 5에서 "Dilophosaurus를" 요소를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-976">It finds the element "Dilophosaurus" at position 5.</span></span> <span data-ttu-id="3f755-977"><xref:System.Array.FindAll%2A> 제네릭 메서드는 "saurus"로 끝나는 모든 요소가 포함 된 배열을 반환 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-977">The <xref:System.Array.FindAll%2A> generic method is used to return an array containing all the elements that end in "saurus".</span></span> <span data-ttu-id="3f755-978">요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-978">The elements are displayed.</span></span>  
  
 <span data-ttu-id="3f755-979">코드 예제도 <xref:System.Array.Exists%2A> 및 <xref:System.Array.TrueForAll%2A> 제네릭 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-979">The code example also demonstrates the <xref:System.Array.Exists%2A> and <xref:System.Array.TrueForAll%2A> generic methods.</span></span>  
  
 [!code-cpp[Array_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[Array_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindEtAl/cs/source.cs#1)]
 [!code-vb[Array_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-980"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-980"><paramref name="array" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="3f755-981">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-981">-or-</span></span>  
  
 <span data-ttu-id="3f755-982"><paramref name="match" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-982"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Array.Exists``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindLast``1(``0[],System.Predicate{``0})" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="Overload:System.Array.IndexOf" />
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindIndex&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3f755-983">지정한 조건자에 정의된 조건과 일치하는 요소를 검색하여 <see cref="T:System.Array" /> 또는 그 일부에서 일치하는 요소 중 첫 번째 요소의 0부터 시작하는 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-983">Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the first occurrence within an <see cref="T:System.Array" /> or a portion of it.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindIndex&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int FindIndex&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindIndex&lt;T&gt;(!!T[] array, class System.Predicate`1&lt;!!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.FindIndex``1(``0[],System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindIndex(Of T) (array As T(), match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int FindIndex(cli::array &lt;T&gt; ^ array, Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-984">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-984">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-985">검색할 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-985">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="match"><span data-ttu-id="3f755-986">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-986">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="3f755-987">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 전체 <see cref="T:System.Array" />에서 일치하는 요소 중 첫 번째 요소의 인덱스(0부터 시작)를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-987">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Array" />.</span></span></summary>
        <returns><span data-ttu-id="3f755-988"><paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째로 나타나는 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-988">The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-989"><xref:System.Array> 검색은 앞으로 첫 번째 요소부터 마지막 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-989">The <xref:System.Array> is searched forward starting at the first element and ending at the last element.</span></span>  
  
 <span data-ttu-id="3f755-990"><xref:System.Predicate%601> 반환 하는 메서드에 대리자 `true` 개체에 전달 하는 경우 대리자에 정의 된 조건과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-990">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="3f755-991">요소 `array` 에 개별적으로 전달 되는 <xref:System.Predicate%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-991">The elements of `array` are individually passed to the <xref:System.Predicate%601>.</span></span>  
  
 <span data-ttu-id="3f755-992">이 메서드는 O는 (`n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-992">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-993">다음 코드 예제에서는 세 개의 오버 로드를 모두 보여 줍니다는 <xref:System.Array.FindIndex%2A> 제네릭 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-993">The following code example demonstrates all three overloads of the <xref:System.Array.FindIndex%2A> generic method.</span></span> <span data-ttu-id="3f755-994">2 개 (위치 1과 5)에서 "saurus"으로 끝나는 8 공룡 이름이 포함 된 문자열 배열을 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-994">An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="3f755-995">코드 예제에서는 명명 된 검색 조건자 메서드도 정의 `EndsWithSaurus`문자열 매개 변수를 허용 하는, 및에서는 나타내는 입력된 문자열이 "saurus"로 끝나는 여부입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-995">The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="3f755-996"><xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> 메서드 오버 로드를 차례로 각 요소를 전달 하는 처음부터 배열을 트래버스하는 `EndsWithSaurus` 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-996">The <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> method overload traverses the array from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="3f755-997">검색을 중지 하는 경우는 `EndsWithSaurus` 메서드 반환 `true` 위치 1에 있는 요소에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-997">The search stops when the `EndsWithSaurus` method returns `true` for the element at position 1.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-998">C# 및 Visual Basic에서 필요 없는 만들려는 `Predicate<string>` 위임 (`Predicate(Of String)` Visual basic에서) 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-998">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="3f755-999">이러한 언어 올바른 대리자 컨텍스트를 유추 하 고 자동으로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-999">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 <span data-ttu-id="3f755-1000"><xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> 메서드 오버 로드는 배열의 위치 2부터 사이 배열의 끝에 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1000">The <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the array beginning at position 2 and continuing to the end of the array.</span></span> <span data-ttu-id="3f755-1001">위치 5에 있는 요소를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1001">It finds the element at position 5.</span></span> <span data-ttu-id="3f755-1002">마지막으로 <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> 메서드 오버 로드는 위치 2에서 시작 하는 세 가지 요소의 범위를 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1002">Finally, the <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the range of three elements beginning at position 2.</span></span> <span data-ttu-id="3f755-1003">"Saurus"로 끝나는 해당 범위에 이름이 없으면 공룡 때문에-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1003">It returns –1 because there are no dinosaur names in that range that end with "saurus".</span></span>  
  
 [!code-cpp[Array_FindIndex#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindIndex/cpp/source.cpp#1)]
 [!code-csharp[Array_FindIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindIndex/cs/source.cs#1)]
 [!code-vb[Array_FindIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindIndex/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1004"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1004"><paramref name="array" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="3f755-1005">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1005">-or-</span></span>  
  
 <span data-ttu-id="3f755-1006"><paramref name="match" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1006"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Array.Exists``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindLast``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindAll``1(``0[],System.Predicate{``0})" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="Overload:System.Array.IndexOf" />
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindIndex&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int FindIndex&lt;T&gt; (T[] array, int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindIndex&lt;T&gt;(!!T[] array, int32 startIndex, class System.Predicate`1&lt;!!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindIndex(Of T) (array As T(), startIndex As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int FindIndex(cli::array &lt;T&gt; ^ array, int startIndex, Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-1007">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1007">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-1008">검색할 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1008">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="startIndex"><span data-ttu-id="3f755-1009">검색의 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1009">The zero-based starting index of the search.</span></span></param>
        <param name="match"><span data-ttu-id="3f755-1010">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1010">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="3f755-1011">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 지정된 인덱스에서 마지막 요소로 확장하는 <see cref="T:System.Array" />의 요소 범위에서 일치하는 요소 중 첫 번째 요소의 인덱스(0부터 시작)를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1011">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the specified index to the last element.</span></span></summary>
        <returns><span data-ttu-id="3f755-1012"><paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째로 나타나는 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1012">The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1013"><xref:System.Array> 까지 검색은 `startIndex` 마지막 요소의 끝입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1013">The <xref:System.Array> is searched forward starting at `startIndex` and ending at the last element.</span></span>  
  
 <span data-ttu-id="3f755-1014"><xref:System.Predicate%601> 반환 하는 메서드에 대리자 `true` 개체에 전달 하는 경우 대리자에 정의 된 조건과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1014">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="3f755-1015">요소 `array` 에 개별적으로 전달 되는 <xref:System.Predicate%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1015">The elements of `array` are individually passed to the <xref:System.Predicate%601>.</span></span>  
  
 <span data-ttu-id="3f755-1016">이 메서드는 O는 (`n`) 작업, 여기서 `n` 의 요소 수 `startIndex` 의 끝에 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1016">This method is an O(`n`) operation, where `n` is the number of elements from `startIndex` to the end of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1017">다음 코드 예제에서는 세 개의 오버 로드를 모두 보여 줍니다는 <xref:System.Array.FindIndex%2A> 제네릭 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1017">The following code example demonstrates all three overloads of the <xref:System.Array.FindIndex%2A> generic method.</span></span> <span data-ttu-id="3f755-1018">2 개 (위치 1과 5)에서 "saurus"으로 끝나는 8 공룡 이름이 포함 된 문자열 배열을 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1018">An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="3f755-1019">코드 예제에서는 명명 된 검색 조건자 메서드도 정의 `EndsWithSaurus`문자열 매개 변수를 허용 하는, 및에서는 나타내는 입력된 문자열이 "saurus"로 끝나는 여부입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1019">The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="3f755-1020"><xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> 메서드 오버 로드를 차례로 각 요소를 전달 하는 처음부터 배열을 트래버스하는 `EndsWithSaurus` 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1020">The <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> method overload traverses the array from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="3f755-1021">검색을 중지 하는 경우는 `EndsWithSaurus` 메서드 반환 `true` 위치 1에 있는 요소에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1021">The search stops when the `EndsWithSaurus` method returns `true` for the element at position 1.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-1022">C# 및 Visual Basic에서 필요 없는 만들려는 `Predicate<string>` 위임 (`Predicate(Of String)` Visual basic에서) 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1022">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="3f755-1023">이러한 언어 올바른 대리자 컨텍스트를 유추 하 고 자동으로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1023">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 <span data-ttu-id="3f755-1024"><xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> 메서드 오버 로드는 배열의 위치 2부터 사이 배열의 끝에 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1024">The <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the array beginning at position 2 and continuing to the end of the array.</span></span> <span data-ttu-id="3f755-1025">위치 5에 있는 요소를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1025">It finds the element at position 5.</span></span> <span data-ttu-id="3f755-1026">마지막으로 <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> 메서드 오버 로드는 위치 2에서 시작 하는 세 가지 요소의 범위를 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1026">Finally, the <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the range of three elements beginning at position 2.</span></span> <span data-ttu-id="3f755-1027">"Saurus"로 끝나는 해당 범위에 이름이 없으면 공룡 때문에-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1027">It returns –1 because there are no dinosaur names in that range that end with "saurus".</span></span>  
  
 [!code-cpp[Array_FindIndex#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindIndex/cpp/source.cpp#1)]
 [!code-csharp[Array_FindIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindIndex/cs/source.cs#1)]
 [!code-vb[Array_FindIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindIndex/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1028"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1028"><paramref name="array" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="3f755-1029">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1029">-or-</span></span>  
  
 <span data-ttu-id="3f755-1030"><paramref name="match" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1030"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-1031"><paramref name="startIndex" />가 <paramref name="array" />의 유효한 인덱스 범위를 벗어납니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1031"><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</span></span></exception>
        <altmember cref="M:System.Array.Exists``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindLast``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindAll``1(``0[],System.Predicate{``0})" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="Overload:System.Array.IndexOf" />
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindIndex&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int FindIndex&lt;T&gt; (T[] array, int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindIndex&lt;T&gt;(!!T[] array, int32 startIndex, int32 count, class System.Predicate`1&lt;!!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindIndex(Of T) (array As T(), startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int FindIndex(cli::array &lt;T&gt; ^ array, int startIndex, int count, Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-1032">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1032">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-1033">검색할 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1033">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="startIndex"><span data-ttu-id="3f755-1034">검색의 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1034">The zero-based starting index of the search.</span></span></param>
        <param name="count"><span data-ttu-id="3f755-1035">검색할 섹션에 있는 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1035">The number of elements in the section to search.</span></span></param>
        <param name="match"><span data-ttu-id="3f755-1036">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1036">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="3f755-1037">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 지정된 인덱스부터 시작하여 지정된 수의 요소를 포함하는 <see cref="T:System.Array" />의 요소 범위에서 일치하는 요소 중 첫 번째 요소의 인덱스(0부터 시작)를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1037">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that starts at the specified index and contains the specified number of elements.</span></span></summary>
        <returns><span data-ttu-id="3f755-1038"><paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째로 나타나는 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1038">The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1039"><xref:System.Array> 까지 검색은 `startIndex` 에서 끝나는 `startIndex` 플러스 `count` 에서 1을 뺀 경우 `count` 가 0 보다 크면 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1039">The <xref:System.Array> is searched forward starting at `startIndex` and ending at `startIndex` plus `count` minus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="3f755-1040"><xref:System.Predicate%601> 반환 하는 메서드에 대리자 `true` 개체에 전달 하는 경우 대리자에 정의 된 조건과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1040">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="3f755-1041">요소 `array` 에 개별적으로 전달 되는 <xref:System.Predicate%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1041">The elements of `array` are individually passed to the <xref:System.Predicate%601>.</span></span>  
  
 <span data-ttu-id="3f755-1042">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 `count`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1042">This method is an O(`n`) operation, where `n` is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1043">다음 코드 예제에서는 세 개의 오버 로드를 모두 보여 줍니다는 <xref:System.Array.FindIndex%2A> 제네릭 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1043">The following code example demonstrates all three overloads of the <xref:System.Array.FindIndex%2A> generic method.</span></span> <span data-ttu-id="3f755-1044">2 개 (위치 1과 5)에서 "saurus"으로 끝나는 8 공룡 이름이 포함 된 문자열 배열을 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1044">An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="3f755-1045">코드 예제에서는 명명 된 검색 조건자 메서드도 정의 `EndsWithSaurus`문자열 매개 변수를 허용 하는, 및에서는 나타내는 입력된 문자열이 "saurus"로 끝나는 여부입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1045">The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="3f755-1046"><xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> 메서드 오버 로드를 차례로 각 요소를 전달 하는 처음부터 배열을 트래버스하는 `EndsWithSaurus` 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1046">The <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> method overload traverses the array from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="3f755-1047">검색을 중지 하는 경우는 `EndsWithSaurus` 메서드 반환 `true` 위치 1에 있는 요소에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1047">The search stops when the `EndsWithSaurus` method returns `true` for the element at position 1.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-1048">C# 및 Visual Basic에서 필요 없는 만들려는 `Predicate<string>` 위임 (`Predicate(Of String)` Visual basic에서) 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1048">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="3f755-1049">이러한 언어 올바른 대리자 컨텍스트를 유추 하 고 자동으로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1049">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 <span data-ttu-id="3f755-1050"><xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> 메서드 오버 로드는 배열의 위치 2부터 사이 배열의 끝에 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1050">The <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the array beginning at position 2 and continuing to the end of the array.</span></span> <span data-ttu-id="3f755-1051">위치 5에 있는 요소를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1051">It finds the element at position 5.</span></span> <span data-ttu-id="3f755-1052">마지막으로 <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> 메서드 오버 로드는 위치 2에서 시작 하는 세 가지 요소의 범위를 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1052">Finally, the <xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the range of three elements beginning at position 2.</span></span> <span data-ttu-id="3f755-1053">"Saurus"로 끝나는 해당 범위에 이름이 없으면 공룡 때문에-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1053">It returns –1 because there are no dinosaur names in that range that end with "saurus".</span></span>  
  
 [!code-cpp[Array_FindIndex#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindIndex/cpp/source.cpp#1)]
 [!code-csharp[Array_FindIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindIndex/cs/source.cs#1)]
 [!code-vb[Array_FindIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindIndex/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1054"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1054"><paramref name="array" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="3f755-1055">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1055">-or-</span></span>  
  
 <span data-ttu-id="3f755-1056"><paramref name="match" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1056"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-1057"><paramref name="startIndex" />가 <paramref name="array" />의 유효한 인덱스 범위를 벗어납니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1057"><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="3f755-1058">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1058">-or-</span></span>  
  
 <span data-ttu-id="3f755-1059"><paramref name="count" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1059"><paramref name="count" /> is less than zero.</span></span>  
  
 <span data-ttu-id="3f755-1060">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1060">-or-</span></span>  
  
 <span data-ttu-id="3f755-1061"><paramref name="startIndex" /> 및 <paramref name="count" />가 <paramref name="array" />의 올바른 섹션을 지정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1061"><paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</span></span></exception>
        <altmember cref="M:System.Array.Exists``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindLast``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindAll``1(``0[],System.Predicate{``0})" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="Overload:System.Array.IndexOf" />
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLast&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T FindLast&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T FindLast&lt;T&gt;(!!T[] array, class System.Predicate`1&lt;!!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.FindLast``1(``0[],System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindLast(Of T) (array As T(), match As Predicate(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T FindLast(cli::array &lt;T&gt; ^ array, Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-1062">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1062">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-1063">검색할 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1063">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="match"><span data-ttu-id="3f755-1064">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1064">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="3f755-1065">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 전체 <see cref="T:System.Array" />에서 마지막으로 검색한 요소를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1065">Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <see cref="T:System.Array" />.</span></span></summary>
        <returns><span data-ttu-id="3f755-1066">지정된 조건자에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 마지막 요소이고, 그렇지 않으면 <paramref name="T" /> 형식의 기본값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1066">The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1067"><xref:System.Predicate%601> 반환 하는 메서드에 대리자 `true` 개체에 전달 하는 경우 대리자에 정의 된 조건과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1067">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="3f755-1068">요소 `array` 를 개별적으로 전달 되는 <xref:System.Predicate%601>이동, 뒤로 <xref:System.Array>은 지난 요소의 시작 하 고 첫 번째 요소까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1068">The elements of `array` are individually passed to the <xref:System.Predicate%601>, moving backward in the <xref:System.Array>, starting with the last element and ending with the first element.</span></span>  <span data-ttu-id="3f755-1069">일치 하는 경우 처리가 중지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1069">Processing is stopped when a match is found.</span></span>  
  
 <span data-ttu-id="3f755-1070">이 메서드는 O는 (`n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1070">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1071">다음 코드 예제는 <xref:System.Array.Find%2A>, <xref:System.Array.FindLast%2A>, 및 <xref:System.Array.FindAll%2A> 제네릭 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1071">The following code example demonstrates the <xref:System.Array.Find%2A>, <xref:System.Array.FindLast%2A>, and <xref:System.Array.FindAll%2A> generic methods.</span></span> <span data-ttu-id="3f755-1072">2 개 (위치 1과 5)에서 "saurus"으로 끝나는 8 공룡 이름이 포함 된 문자열 배열을 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1072">An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="3f755-1073">코드 예제에서는 명명 된 검색 조건자 메서드도 정의 `EndsWithSaurus`문자열 매개 변수를 허용 하는, 및에서는 나타내는 입력된 문자열이 "saurus"로 끝나는 여부입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1073">The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="3f755-1074"><xref:System.Array.Find%2A> 제네릭 메서드를 차례로 각 요소를 전달 하는 처음부터 배열을 트래버스하는 `EndsWithSaurus` 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1074">The <xref:System.Array.Find%2A> generic method traverses the array from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="3f755-1075">검색을 중지 하는 경우는 `EndsWithSaurus` 메서드 반환 `true` "Amargasaurus" 요소에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1075">The search stops when the `EndsWithSaurus` method returns `true` for the element "Amargasaurus".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-1076">C# 및 Visual Basic에서 필요 없는 만들려는`Predicate<string>` 위임 (`Predicate(Of String)` Visual basic에서) 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1076">In C# and Visual Basic, it is not necessary to create the`Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="3f755-1077">이러한 언어 올바른 대리자 컨텍스트를 유추 하 고 자동으로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1077">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 <span data-ttu-id="3f755-1078"><xref:System.Array.FindLast%2A> 제네릭 메서드는 배열의 끝부터 뒤로 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1078">The <xref:System.Array.FindLast%2A> generic method is used to search the array backward from the end.</span></span> <span data-ttu-id="3f755-1079">위치 5에서 "Dilophosaurus를" 요소를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1079">It finds the element "Dilophosaurus" at position 5.</span></span> <span data-ttu-id="3f755-1080"><xref:System.Array.FindAll%2A> 제네릭 메서드는 "saurus"로 끝나는 모든 요소가 포함 된 배열을 반환 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1080">The <xref:System.Array.FindAll%2A> generic method is used to return an array containing all the elements that end in "saurus".</span></span> <span data-ttu-id="3f755-1081">요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1081">The elements are displayed.</span></span>  
  
 <span data-ttu-id="3f755-1082">코드 예제도 <xref:System.Array.Exists%2A> 및 <xref:System.Array.TrueForAll%2A> 제네릭 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1082">The code example also demonstrates the <xref:System.Array.Exists%2A> and <xref:System.Array.TrueForAll%2A> generic methods.</span></span>  
  
 [!code-cpp[Array_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[Array_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindEtAl/cs/source.cs#1)]
 [!code-vb[Array_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1083"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1083"><paramref name="array" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="3f755-1084">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1084">-or-</span></span>  
  
 <span data-ttu-id="3f755-1085"><paramref name="match" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1085"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Array.Exists``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindAll``1(``0[],System.Predicate{``0})" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="Overload:System.Array.IndexOf" />
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindLastIndex&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3f755-1086">지정한 조건자에 정의된 조건과 일치하는 요소를 검색하여 <see cref="T:System.Array" /> 또는 그 일부에서 일치하는 요소 중 마지막 요소의 0부터 시작하는 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1086">Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the last occurrence within an <see cref="T:System.Array" /> or a portion of it.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindLastIndex&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int FindLastIndex&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindLastIndex&lt;T&gt;(!!T[] array, class System.Predicate`1&lt;!!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindLastIndex(Of T) (array As T(), match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int FindLastIndex(cli::array &lt;T&gt; ^ array, Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-1087">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1087">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-1088">검색할 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1088">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="match"><span data-ttu-id="3f755-1089">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1089">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="3f755-1090">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 전체 <see cref="T:System.Array" />에서 일치하는 요소 중 마지막 요소의 인덱스(0부터 시작)를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1090">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Array" />.</span></span></summary>
        <returns><span data-ttu-id="3f755-1091"><paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 마지막 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1091">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1092"><xref:System.Array> 뒤로 마지막 요소에서 시작 하 고 첫 번째 요소에서 끝나는 검색 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1092">The <xref:System.Array> is searched backward starting at the last element and ending at the first element.</span></span>  
  
 <span data-ttu-id="3f755-1093"><xref:System.Predicate%601> 반환 하는 메서드에 대리자 `true` 개체에 전달 하는 경우 대리자에 정의 된 조건과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1093">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="3f755-1094">요소 `array` 에 개별적으로 전달 되는 <xref:System.Predicate%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1094">The elements of `array` are individually passed to the <xref:System.Predicate%601>.</span></span>  
  
 <span data-ttu-id="3f755-1095">이 메서드는 O는 (`n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1095">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1096">다음 코드 예제에서는 세 개의 오버 로드를 모두 보여 줍니다는 <xref:System.Array.FindLastIndex%2A> 제네릭 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1096">The following code example demonstrates all three overloads of the <xref:System.Array.FindLastIndex%2A> generic method.</span></span> <span data-ttu-id="3f755-1097">2 개 (위치 1과 5)에서 "saurus"으로 끝나는 8 공룡 이름이 포함 된 문자열 배열을 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1097">An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="3f755-1098">코드 예제에서는 명명 된 검색 조건자 메서드도 정의 `EndsWithSaurus`문자열 매개 변수를 허용 하는, 및에서는 나타내는 입력된 문자열이 "saurus"로 끝나는 여부입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1098">The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="3f755-1099"><xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> 하면서 각 요소를 차례로 끝에서 배열의 뒤로 이동 하는 메서드 오버 로드는 `EndsWithSaurus` 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1099">The <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> method overload traverses the array backward from the end, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="3f755-1100">검색을 중지 하는 경우는 `EndsWithSaurus` 메서드 반환 `true` 위치 5에 있는 요소에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1100">The search stops when the `EndsWithSaurus` method returns `true` for the element at position 5.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-1101">C# 및 Visual Basic에서 필요 없는 만들려는 `Predicate<string>` 위임 (`Predicate(Of String)` Visual basic에서) 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1101">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="3f755-1102">이러한 언어 올바른 대리자 컨텍스트를 유추 하 고 자동으로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1102">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 <span data-ttu-id="3f755-1103"><xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> 메서드 오버 로드는 배열의 위치 4에서 시작 하 고 뒤로 배열의 시작 부분을 계속 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1103">The <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the array beginning at position 4 and continuing backward to the beginning of the array.</span></span> <span data-ttu-id="3f755-1104">위치 1에 있는 요소를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1104">It finds the element at position 1.</span></span> <span data-ttu-id="3f755-1105">마지막으로 <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> 메서드 오버 로드는 세 요소 4 위치에서 시작 및 작업 (즉, 요소 4, 3 및 2)의 범위를 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1105">Finally, the <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the range of three elements beginning at position 4 and working backward (that is, elements 4, 3, and 2).</span></span> <span data-ttu-id="3f755-1106">"Saurus"로 끝나는 해당 범위에 이름이 없으면 공룡 때문에-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1106">It returns –1 because there are no dinosaur names in that range that end with "saurus".</span></span>  
  
 [!code-cpp[Array_FindLastIndex#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindLastIndex/cpp/source.cpp#1)]
 [!code-csharp[Array_FindLastIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindLastIndex/cs/source.cs#1)]
 [!code-vb[Array_FindLastIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindLastIndex/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1107"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1107"><paramref name="array" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="3f755-1108">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1108">-or-</span></span>  
  
 <span data-ttu-id="3f755-1109"><paramref name="match" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1109"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Array.Exists``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindLast``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindAll``1(``0[],System.Predicate{``0})" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="Overload:System.Array.IndexOf" />
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int FindLastIndex&lt;T&gt; (T[] array, int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindLastIndex&lt;T&gt;(!!T[] array, int32 startIndex, class System.Predicate`1&lt;!!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindLastIndex(Of T) (array As T(), startIndex As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int FindLastIndex(cli::array &lt;T&gt; ^ array, int startIndex, Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-1110">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1110">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-1111">검색할 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1111">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="startIndex"><span data-ttu-id="3f755-1112">역방향 검색의 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1112">The zero-based starting index of the backward search.</span></span></param>
        <param name="match"><span data-ttu-id="3f755-1113">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1113">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="3f755-1114">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 첫 번째 요소에서 지정된 인덱스로 확장하는 <see cref="T:System.Array" />의 요소 범위에서 일치하는 요소 중 마지막 요소의 인덱스(0부터 시작)를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1114">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the first element to the specified index.</span></span></summary>
        <returns><span data-ttu-id="3f755-1115"><paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 마지막 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1115">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1116"><xref:System.Array> 뒤로 검색 됩니다에 `startIndex` 첫 번째 요소의 끝입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1116">The <xref:System.Array> is searched backward starting at `startIndex` and ending at the first element.</span></span>  
  
 <span data-ttu-id="3f755-1117"><xref:System.Predicate%601> 반환 하는 메서드에 대리자 `true` 개체에 전달 하는 경우 대리자에 정의 된 조건과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1117">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="3f755-1118">요소 `array` 에 개별적으로 전달 되는 <xref:System.Predicate%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1118">The elements of `array` are individually passed to the <xref:System.Predicate%601>.</span></span>  
  
 <span data-ttu-id="3f755-1119">이 메서드는 O는 (`n`) 작업, 여기서 `n` 의 시작 부분에서 요소 수는 `array` 를 `startIndex`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1119">This method is an O(`n`) operation, where `n` is the number of elements from the beginning of `array` to `startIndex`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1120">다음 코드 예제에서는 세 개의 오버 로드를 모두 보여 줍니다는 <xref:System.Array.FindLastIndex%2A> 제네릭 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1120">The following code example demonstrates all three overloads of the <xref:System.Array.FindLastIndex%2A> generic method.</span></span> <span data-ttu-id="3f755-1121">2 개 (위치 1과 5)에서 "saurus"으로 끝나는 8 공룡 이름이 포함 된 문자열 배열을 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1121">An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="3f755-1122">코드 예제에서는 명명 된 검색 조건자 메서드도 정의 `EndsWithSaurus`문자열 매개 변수를 허용 하는, 및에서는 나타내는 입력된 문자열이 "saurus"로 끝나는 여부입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1122">The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="3f755-1123"><xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> 하면서 각 요소를 차례로 끝에서 배열의 뒤로 이동 하는 메서드 오버 로드는 `EndsWithSaurus` 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1123">The <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> method overload traverses the array backward from the end, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="3f755-1124">검색을 중지 하는 경우는 `EndsWithSaurus` 메서드 반환 `true` 위치 5에 있는 요소에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1124">The search stops when the `EndsWithSaurus` method returns `true` for the element at position 5.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-1125">C# 및 Visual Basic에서 필요 없는 만들려는 `Predicate<string>` 위임 (`Predicate(Of String)` Visual basic에서) 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1125">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="3f755-1126">이러한 언어 올바른 대리자 컨텍스트를 유추 하 고 자동으로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1126">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 <span data-ttu-id="3f755-1127"><xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> 메서드 오버 로드는 배열의 위치 4에서 시작 하 고 뒤로 배열의 시작 부분을 계속 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1127">The <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the array beginning at position 4 and continuing backward to the beginning of the array.</span></span> <span data-ttu-id="3f755-1128">위치 1에 있는 요소를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1128">It finds the element at position 1.</span></span> <span data-ttu-id="3f755-1129">마지막으로 <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> 메서드 오버 로드는 세 요소 4 위치에서 시작 및 작업 (즉, 요소 4, 3 및 2)의 범위를 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1129">Finally, the <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the range of three elements beginning at position 4 and working backward (that is, elements 4, 3, and 2).</span></span> <span data-ttu-id="3f755-1130">"Saurus"로 끝나는 해당 범위에 이름이 없으면 공룡 때문에-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1130">It returns –1 because there are no dinosaur names in that range that end with "saurus".</span></span>  
  
 [!code-cpp[Array_FindLastIndex#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindLastIndex/cpp/source.cpp#1)]
 [!code-csharp[Array_FindLastIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindLastIndex/cs/source.cs#1)]
 [!code-vb[Array_FindLastIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindLastIndex/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1131"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1131"><paramref name="array" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="3f755-1132">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1132">-or-</span></span>  
  
 <span data-ttu-id="3f755-1133"><paramref name="match" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1133"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-1134"><paramref name="startIndex" />가 <paramref name="array" />의 유효한 인덱스 범위를 벗어납니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1134"><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</span></span></exception>
        <altmember cref="M:System.Array.Exists``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindLast``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindAll``1(``0[],System.Predicate{``0})" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="Overload:System.Array.IndexOf" />
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int FindLastIndex&lt;T&gt; (T[] array, int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FindLastIndex&lt;T&gt;(!!T[] array, int32 startIndex, int32 count, class System.Predicate`1&lt;!!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindLastIndex(Of T) (array As T(), startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int FindLastIndex(cli::array &lt;T&gt; ^ array, int startIndex, int count, Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-1135">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1135">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-1136">검색할 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1136">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="startIndex"><span data-ttu-id="3f755-1137">역방향 검색의 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1137">The zero-based starting index of the backward search.</span></span></param>
        <param name="count"><span data-ttu-id="3f755-1138">검색할 섹션에 있는 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1138">The number of elements in the section to search.</span></span></param>
        <param name="match"><span data-ttu-id="3f755-1139">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1139">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="3f755-1140">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 지정된 수의 요소가 들어 있고 지정된 인덱스에서 끝나는 <see cref="T:System.Array" />의 요소 범위에서 일치하는 요소 중 마지막 요소의 인덱스(0부터 시작)를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1140">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.</span></span></summary>
        <returns><span data-ttu-id="3f755-1141"><paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 마지막 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1141">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1142"><xref:System.Array> 뒤로 검색 됩니다에 `startIndex` 에서 끝나는 `startIndex` 뺀 `count` + 1, 경우 `count` 가 0 보다 크면 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1142">The <xref:System.Array> is searched backward starting at `startIndex` and ending at `startIndex` minus `count` plus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="3f755-1143"><xref:System.Predicate%601> 반환 하는 메서드에 대리자 `true` 개체에 전달 하는 경우 대리자에 정의 된 조건과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1143">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="3f755-1144">요소 `array` 에 개별적으로 전달 되는 <xref:System.Predicate%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1144">The elements of `array` are individually passed to the <xref:System.Predicate%601>.</span></span>  
  
 <span data-ttu-id="3f755-1145">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 `count`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1145">This method is an O(`n`) operation, where `n` is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1146">다음 코드 예제에서는 세 개의 오버 로드를 모두 보여 줍니다는 <xref:System.Array.FindLastIndex%2A> 제네릭 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1146">The following code example demonstrates all three overloads of the <xref:System.Array.FindLastIndex%2A> generic method.</span></span> <span data-ttu-id="3f755-1147">2 개 (위치 1과 5)에서 "saurus"으로 끝나는 8 공룡 이름이 포함 된 문자열 배열을 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1147">An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="3f755-1148">코드 예제에서는 명명 된 검색 조건자 메서드도 정의 `EndsWithSaurus`문자열 매개 변수를 허용 하는, 및에서는 나타내는 입력된 문자열이 "saurus"로 끝나는 여부입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1148">The code example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="3f755-1149"><xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> 하면서 각 요소를 차례로 끝에서 배열의 뒤로 이동 하는 메서드 오버 로드는 `EndsWithSaurus` 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1149">The <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29> method overload traverses the array backward from the end, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="3f755-1150">검색을 중지 하는 경우는 `EndsWithSaurus` 메서드 반환 `true` 위치 5에 있는 요소에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1150">The search stops when the `EndsWithSaurus` method returns `true` for the element at position 5.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-1151">C# 및 Visual Basic에서 필요 없는 만들려는 `Predicate<string>` 위임 (`Predicate(Of String)` Visual basic에서) 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1151">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="3f755-1152">이러한 언어 올바른 대리자 컨텍스트를 유추 하 고 자동으로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1152">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 <span data-ttu-id="3f755-1153"><xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> 메서드 오버 로드는 배열의 위치 4에서 시작 하 고 뒤로 배열의 시작 부분을 계속 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1153">The <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the array beginning at position 4 and continuing backward to the beginning of the array.</span></span> <span data-ttu-id="3f755-1154">위치 1에 있는 요소를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1154">It finds the element at position 1.</span></span> <span data-ttu-id="3f755-1155">마지막으로 <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> 메서드 오버 로드는 세 요소 4 위치에서 시작 및 작업 (즉, 요소 4, 3 및 2)의 범위를 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1155">Finally, the <xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29> method overload is used to search the range of three elements beginning at position 4 and working backward (that is, elements 4, 3, and 2).</span></span> <span data-ttu-id="3f755-1156">"Saurus"로 끝나는 해당 범위에 이름이 없으면 공룡 때문에-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1156">It returns –1 because there are no dinosaur names in that range that end with "saurus".</span></span>  
  
 [!code-cpp[Array_FindLastIndex#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_FindLastIndex/cpp/source.cpp#1)]
 [!code-csharp[Array_FindLastIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_FindLastIndex/cs/source.cs#1)]
 [!code-vb[Array_FindLastIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_FindLastIndex/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1157"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1157"><paramref name="array" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="3f755-1158">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1158">-or-</span></span>  
  
 <span data-ttu-id="3f755-1159"><paramref name="match" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1159"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-1160"><paramref name="startIndex" />가 <paramref name="array" />의 유효한 인덱스 범위를 벗어납니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1160"><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="3f755-1161">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1161">-or-</span></span>  
  
 <span data-ttu-id="3f755-1162"><paramref name="count" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1162"><paramref name="count" /> is less than zero.</span></span>  
  
 <span data-ttu-id="3f755-1163">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1163">-or-</span></span>  
  
 <span data-ttu-id="3f755-1164"><paramref name="startIndex" /> 및 <paramref name="count" />가 <paramref name="array" />의 올바른 섹션을 지정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1164"><paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</span></span></exception>
        <altmember cref="M:System.Array.Exists``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindLast``1(``0[],System.Predicate{``0})" />
        <altmember cref="M:System.Array.FindAll``1(``0[],System.Predicate{``0})" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="Overload:System.Array.IndexOf" />
        <altmember cref="Overload:System.Array.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void ForEach&lt;T&gt; (T[] array, Action&lt;T&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForEach&lt;T&gt;(!!T[] array, class System.Action`1&lt;!!T&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.ForEach``1(``0[],System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ForEach(Of T) (array As T(), action As Action(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void ForEach(cli::array &lt;T&gt; ^ array, Action&lt;T&gt; ^ action);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="action" Type="System.Action&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-1165">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1165">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-1166">해당 요소에서 동작이 수행되는 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1166">The one-dimensional, zero-based <see cref="T:System.Array" /> on whose elements the action is to be performed.</span></span></param>
        <param name="action"><span data-ttu-id="3f755-1167"><c>array</c>의 각 요소에서 수행할 <see cref="T:System.Action`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1167">The <see cref="T:System.Action`1" /> to perform on each element of <c>array</c>.</span></span></param>
        <summary><span data-ttu-id="3f755-1168">지정한 배열의 각 요소에서 지정한 동작을 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1168">Performs the specified action on each element of the specified array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1169"><xref:System.Action%601> 개체에 동작을 수행 하는 메서드에 대리자에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1169">The <xref:System.Action%601> is a delegate to a method that performs an action on the object passed to it.</span></span>  <span data-ttu-id="3f755-1170">요소 `array` 에 개별적으로 전달 되는 <xref:System.Action%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1170">The elements of `array` are individually passed to the <xref:System.Action%601>.</span></span>  
  
 <span data-ttu-id="3f755-1171">이 메서드는 O는 (`n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1171">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1172">다음 예제에서는 사용 하는 방법을 보여 줍니다. <xref:System.Array.ForEach%2A> 정수 배열에 각 요소의 제곱을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1172">The following example shows how to use <xref:System.Array.ForEach%2A> to display the squares of each element in an integer array.</span></span>  
  
 [!code-cpp[System.Array.ForEach#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.array.foreach/cpp/source.cpp#1)]
 [!code-csharp[System.Array.ForEach#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.foreach/cs/source.cs#1)]
 [!code-vb[System.Array.ForEach#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.foreach/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1173"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1173"><paramref name="array" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="3f755-1174">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1174">-or-</span></span>  
  
 <span data-ttu-id="3f755-1175"><paramref name="action" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1175"><paramref name="action" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Action`1" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3f755-1176"><see cref="T:System.Collections.IEnumerator" />의 <see cref="T:System.Array" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1176">Returns an <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Array" />.</span></span></summary>
        <returns><span data-ttu-id="3f755-1177"><see cref="T:System.Collections.IEnumerator" />에 대한 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1177">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1178">[Visual Basic, C#]</span><span class="sxs-lookup"><span data-stu-id="3f755-1178">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="3f755-1179">`foreach` C# 언어의 (`for each` c + +에서는 `For Each` Visual basic에서)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1179">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="3f755-1180">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1180">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="3f755-1181">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1181">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="3f755-1182">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1182">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="3f755-1183"><xref:System.Collections.IEnumerator.Reset%2A>을 실행하면 열거자가 이 위치로 복원됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1183"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="3f755-1184">이 위치에서 <xref:System.Collections.IEnumerator.Current%2A>는 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1184">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="3f755-1185">따라서 <xref:System.Collections.IEnumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.IEnumerator.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1185">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="3f755-1186"><xref:System.Collections.IEnumerator.Current%2A>에서는 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A>이 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1186"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="3f755-1187"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1187"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="3f755-1188">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1188">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="3f755-1189">열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1189">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="3f755-1190">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.IEnumerator.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1190">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="3f755-1191"><xref:System.Collections.IEnumerator.Current%2A>를 컬렉션의 첫째 요소에 다시 설정하려면 <xref:System.Collections.IEnumerator.Reset%2A>을 호출한 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1191">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="3f755-1192">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1192">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="3f755-1193">컬렉션에 대해 변경 내용을 수행하면(예: 요소 추가, 수정 또는 삭제) 열거자는 복구 불가능하게 무효화되고 해당 동작은 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1193">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="3f755-1194">열거자는 컬렉션에 독점적으로 액세스할 수 있는 권한이 없으므로 컬렉션을 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1194">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.</span></span>  <span data-ttu-id="3f755-1195">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1195">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="3f755-1196">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1196">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="3f755-1197">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="3f755-1197">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1198">다음 코드 예제를 사용 하는 방법을 보여 줍니다 <xref:System.Array.GetEnumerator%2A> 배열 요소를 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1198">The following code example shows how to use <xref:System.Array.GetEnumerator%2A> to list the elements of an array.</span></span>  
  
 [!code-cpp[System.Array_GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetEnumerator/CPP/array_getenumerator.cpp#1)]
 [!code-csharp[System.Array_GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetEnumerator/CS/array_getenumerator.cs#1)]
 [!code-vb[System.Array_GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetEnumerator/VB/array_getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLength">
      <MemberSignature Language="C#" Value="public int GetLength (int dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetLength(int32 dimension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetLength(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLength (dimension As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetLength(int dimension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dimension"><span data-ttu-id="3f755-1199">길이를 지정해야 하는 <see cref="T:System.Array" />의 0부터 시작하는 차원입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1199">A zero-based dimension of the <see cref="T:System.Array" /> whose length needs to be determined.</span></span></param>
        <summary><span data-ttu-id="3f755-1200">지정된 차원의 <see cref="T:System.Array" />에 있는 요소의 수를 나타내는 32비트 정수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1200">Gets a 32-bit integer that represents the number of elements in the specified dimension of the <see cref="T:System.Array" />.</span></span></summary>
        <returns><span data-ttu-id="3f755-1201">지정된 차원의 요소 수를 나타내는 32비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1201">A 32-bit integer that represents the number of elements in the specified dimension.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1202">예로 <xref:System.Array.GetLength%2A> 은 `GetLength(0)`, 첫 번째 차원에 있는 요소 수를 반환 하는 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1202">An example of <xref:System.Array.GetLength%2A> is `GetLength(0)`, which returns the number of elements in the first dimension of the <xref:System.Array>.</span></span>  
  
 <span data-ttu-id="3f755-1203">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="3f755-1203">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1204">다음 예제를 사용 하는 방법을 보여 줍니다 <xref:System.Array.GetLength%2A> 의 순위에 다른 두 배열의 크기를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1204">The following example shows how to use <xref:System.Array.GetLength%2A> to display the dimensions of two arrays with different ranks.</span></span>  
  
 [!code-cpp[System.Array.GetLength#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.array.getlength/cpp/source.cpp#1)]
 [!code-csharp[System.Array.GetLength#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.getlength/cs/source.cs#1)]
 [!code-vb[System.Array.GetLength#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.getlength/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="3f755-1205"><paramref name="dimension" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1205"><paramref name="dimension" /> is less than zero.</span></span>  
  
 <span data-ttu-id="3f755-1206">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1206">-or-</span></span>  
  
 <span data-ttu-id="3f755-1207"><paramref name="dimension" />가 <see cref="P:System.Array.Rank" />보다 크거나 같은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1207"><paramref name="dimension" /> is equal to or greater than <see cref="P:System.Array.Rank" />.</span></span></exception>
        <altmember cref="P:System.Array.Length" />
        <altmember cref="M:System.Array.GetLongLength(System.Int32)" />
        <altmember cref="P:System.Collections.ICollection.Count" />
        <altmember cref="P:System.Array.Rank" />
      </Docs>
    </Member>
    <Member MemberName="GetLongLength">
      <MemberSignature Language="C#" Value="public long GetLongLength (int dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 GetLongLength(int32 dimension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetLongLength(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLongLength (dimension As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long GetLongLength(int dimension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dimension"><span data-ttu-id="3f755-1208">길이를 지정해야 하는 <see cref="T:System.Array" />의 0부터 시작하는 차원입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1208">A zero-based dimension of the <see cref="T:System.Array" /> whose length needs to be determined.</span></span></param>
        <summary><span data-ttu-id="3f755-1209">지정된 차원의 <see cref="T:System.Array" />에 있는 요소의 수를 나타내는 64비트 정수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1209">Gets a 64-bit integer that represents the number of elements in the specified dimension of the <see cref="T:System.Array" />.</span></span></summary>
        <returns><span data-ttu-id="3f755-1210">지정된 차원의 요소 수를 나타내는 64비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1210">A 64-bit integer that represents the number of elements in the specified dimension.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1211">예로 <xref:System.Array.GetLongLength%2A> 은 `GetLongLength(0)`, 첫 번째 차원에 있는 요소 수를 반환 하는 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1211">An example of <xref:System.Array.GetLongLength%2A> is `GetLongLength(0)`, which returns the number of elements in the first dimension of the <xref:System.Array>.</span></span>  
  
 <span data-ttu-id="3f755-1212">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="3f755-1212">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="3f755-1213"><paramref name="dimension" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1213"><paramref name="dimension" /> is less than zero.</span></span>  
  
 <span data-ttu-id="3f755-1214">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1214">-or-</span></span>  
  
 <span data-ttu-id="3f755-1215"><paramref name="dimension" />가 <see cref="P:System.Array.Rank" />보다 크거나 같은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1215"><paramref name="dimension" /> is equal to or greater than <see cref="P:System.Array.Rank" />.</span></span></exception>
        <altmember cref="P:System.Array.Length" />
        <altmember cref="M:System.Array.GetLength(System.Int32)" />
        <altmember cref="P:System.Collections.ICollection.Count" />
        <altmember cref="P:System.Array.Rank" />
      </Docs>
    </Member>
    <Member MemberName="GetLowerBound">
      <MemberSignature Language="C#" Value="public int GetLowerBound (int dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetLowerBound(int32 dimension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetLowerBound(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLowerBound (dimension As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetLowerBound(int dimension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dimension"><span data-ttu-id="3f755-1216">시작 인덱스를 지정해야 하는 배열의 0부터 시작하는 차원입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1216">A zero-based dimension of the array whose starting index needs to be determined.</span></span></param>
        <summary><span data-ttu-id="3f755-1217">배열에서 지정된 차원의 첫 번째 요소의 인덱스를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1217">Gets the index of the first element of the specified dimension in the array.</span></span></summary>
        <returns><span data-ttu-id="3f755-1218">배열에서 지정된 차원의 첫 번째 요소의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1218">The index of the first element of the specified dimension in the array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1219">`GetLowerBound(0)` 배열의 첫 번째 차원의 시작 하는 인덱스를 반환 하 고 `GetLowerBound(Rank - 1)` 배열의 마지막 차원 시작 하는 인덱스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1219">`GetLowerBound(0)` returns the starting index of the first dimension of the array, and `GetLowerBound(Rank - 1)` returns the starting index of the last dimension of the array.</span></span>  
  
 <span data-ttu-id="3f755-1220"><xref:System.Array.GetLowerBound%2A> 배열이 비어 있는 경우에 메서드는 배열의 하한값의 인덱스를 나타내는 값을 항상 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1220">The <xref:System.Array.GetLowerBound%2A> method always returns a value that indicates the index of the lower bound of the array, even if the array is empty.</span></span>  
  
 <span data-ttu-id="3f755-1221">.NET Framework에서 대부분 배열은 0부터 시작 하는 없지만 (즉,는 <xref:System.Array.GetLowerBound%2A> 메서드는 배열의 각 차원에 대해 0을 반환 합니다.),.NET Framework에서는 0부터 시작 하지 않는 배열을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1221">Note that, although most arrays in the .NET Framework are zero-based (that is, the <xref:System.Array.GetLowerBound%2A> method returns zero for each dimension of an array), the .NET Framework does support arrays that are not zero-based.</span></span> <span data-ttu-id="3f755-1222">이러한 배열을 만들 수 있습니다는 <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29> 메서드, 및 비관리 코드에서 반환 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1222">Such arrays can be created with the <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29> method, and can also be returned from unmanaged code.</span></span>  
  
 <span data-ttu-id="3f755-1223">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="3f755-1223">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1224">다음 예제에서는 <xref:System.Array.GetLowerBound%2A> 및 <xref:System.Array.GetUpperBound%2A> 메서드를 1 차원 및 2 차원 배열의 범위를 표시 하 고 배열 요소의 값을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1224">The following example uses the <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods to display the bounds of a one-dimensional and two-dimensional array and to display the values of their array elements.</span></span>  
  
 [!code-cpp[System.Array.GetUpperBound#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.array.getupperbound/cpp/source.cpp#1)]
 [!code-csharp[System.Array.GetUpperBound#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.getupperbound/cs/source.cs#1)]
 [!code-vb[System.Array.GetUpperBound#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.getupperbound/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="3f755-1225"><paramref name="dimension" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1225"><paramref name="dimension" /> is less than zero.</span></span>  
  
 <span data-ttu-id="3f755-1226">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1226">-or-</span></span>  
  
 <span data-ttu-id="3f755-1227"><paramref name="dimension" />가 <see cref="P:System.Array.Rank" />보다 크거나 같은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1227"><paramref name="dimension" /> is equal to or greater than <see cref="P:System.Array.Rank" />.</span></span></exception>
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="P:System.Array.Rank" />
      </Docs>
    </Member>
    <Member MemberName="GetUpperBound">
      <MemberSignature Language="C#" Value="public int GetUpperBound (int dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetUpperBound(int32 dimension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetUpperBound(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUpperBound (dimension As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetUpperBound(int dimension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dimension"><span data-ttu-id="3f755-1228">상한을 지정해야 하는 배열의 0부터 시작하는 차원입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1228">A zero-based dimension of the array whose upper bound needs to be determined.</span></span></param>
        <summary><span data-ttu-id="3f755-1229">배열에서 지정된 차원의 마지막 요소의 인덱스를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1229">Gets the index of the last element of the specified dimension in the array.</span></span></summary>
        <returns><span data-ttu-id="3f755-1230">배열에 있는 지정된 차원의 마지막 요소의 인덱스이거나 지정된 차원이 비어 있는 경우 -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1230">The index of the last element of the specified dimension in the array, or -1 if the specified dimension is empty.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1231">`GetUpperBound(0)` 배열의 첫 번째 차원에서 마지막 인덱스를 반환 하 고 `GetUpperBound(Rank - 1)` 배열의 마지막 차원 마지막 인덱스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1231">`GetUpperBound(0)` returns the last index in the first dimension of the array, and `GetUpperBound(Rank - 1)` returns the last index of the last dimension of the array.</span></span>  
  
 <span data-ttu-id="3f755-1232">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="3f755-1232">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1233">다음 예제에서는 <xref:System.Array.GetLowerBound%2A> 및 <xref:System.Array.GetUpperBound%2A> 메서드를 1 차원 및 2 차원 배열의 범위를 표시 하 고 배열 요소의 값을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1233">The following example uses the <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods to display the bounds of a one-dimensional and two-dimensional array and to display the values of their array elements.</span></span>  
  
 [!code-cpp[System.Array.GetUpperBound#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.array.getupperbound/cpp/source.cpp#1)]
 [!code-csharp[System.Array.GetUpperBound#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.getupperbound/cs/source.cs#1)]
 [!code-vb[System.Array.GetUpperBound#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.getupperbound/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="3f755-1234"><paramref name="dimension" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1234"><paramref name="dimension" /> is less than zero.</span></span>  
  
 <span data-ttu-id="3f755-1235">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1235">-or-</span></span>  
  
 <span data-ttu-id="3f755-1236"><paramref name="dimension" />가 <see cref="P:System.Array.Rank" />보다 크거나 같은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1236"><paramref name="dimension" /> is equal to or greater than <see cref="P:System.Array.Rank" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="P:System.Array.Rank" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetValue">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3f755-1237">현재 <see cref="T:System.Array" />에 있는 지정한 요소의 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1237">Gets the value of the specified element in the current <see cref="T:System.Array" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="3f755-1238">가져올 <see cref="T:System.Array" /> 요소의 위치를 나타내는 32비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1238">A 32-bit integer that represents the position of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <summary><span data-ttu-id="3f755-1239">1차원 <see cref="T:System.Array" />의 지정한 위치에서 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1239">Gets the value at the specified position in the one-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="3f755-1240">인덱스가 32비트 정수로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1240">The index is specified as a 32-bit integer.</span></span></summary>
        <returns><span data-ttu-id="3f755-1241">1차원 <see cref="T:System.Array" />의 지정한 위치에 있는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1241">The value at the specified position in the one-dimensional <see cref="T:System.Array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1242"><xref:System.Array.GetLowerBound%2A> 및 <xref:System.Array.GetUpperBound%2A> 메서드를 확인할 수 있는지 여부를 값 `index` 범위를 벗어났습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1242">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether the value of `index` is out of bounds.</span></span>  
  
 <span data-ttu-id="3f755-1243">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="3f755-1243">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1244">다음 코드 예제에는 설정 하 고 1 차원 또는 다차원 배열에 특정 값을 가져오는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1244">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3f755-1245">현재 <see cref="T:System.Array" />에 1차원이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1245">The current <see cref="T:System.Array" /> does not have exactly one dimension.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="3f755-1246"><paramref name="index" />가 현재 <see cref="T:System.Array" />의 올바른 인덱스 범위 밖에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1246"><paramref name="index" /> is outside the range of valid indexes for the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.SetValue" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (params int[] indices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(int32[] indices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetValue(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (ParamArray indices As Integer()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(... cli::array &lt;int&gt; ^ indices);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indices"><span data-ttu-id="3f755-1247">가져올 <see cref="T:System.Array" /> 요소의 위치를 지정하는 인덱스를 나타내는 32비트 정수의 1차원 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1247">A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <summary><span data-ttu-id="3f755-1248">다차원 <see cref="T:System.Array" />의 지정한 위치에서 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1248">Gets the value at the specified position in the multidimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="3f755-1249">인덱스가 32비트 정수 배열로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1249">The indexes are specified as an array of 32-bit integers.</span></span></summary>
        <returns><span data-ttu-id="3f755-1250">다차원 <see cref="T:System.Array" />의 지정한 위치에서 있는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1250">The value at the specified position in the multidimensional <see cref="T:System.Array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1251">요소 수가 `indices` 차원 수와 같아야는 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1251">The number of elements in `indices` must equal the number of dimensions in the <xref:System.Array>.</span></span> <span data-ttu-id="3f755-1252">모든 요소는 `indices` 는 다차원 배열 원하는 요소의 위치를 전체적으로 지정 해야 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1252">All elements in the `indices` array must collectively specify the position of the desired element in the multidimensional <xref:System.Array>.</span></span>  
  
 <span data-ttu-id="3f755-1253"><xref:System.Array.GetLowerBound%2A> 및 <xref:System.Array.GetUpperBound%2A> 메서드 범위를 벗어난 인덱스 중 하나 인지 여부를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1253">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.</span></span>  
  
 <span data-ttu-id="3f755-1254">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="3f755-1254">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1255">다음 코드 예제에는 설정 하 고 1 차원 또는 다차원 배열에 특정 값을 가져오는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1255">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1256"><paramref name="indices" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1256"><paramref name="indices" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3f755-1257">현재 <see cref="T:System.Array" />의 차수가 <paramref name="indices" />에 있는 요소 수와 다른 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1257">The number of dimensions in the current <see cref="T:System.Array" /> is not equal to the number of elements in <paramref name="indices" />.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="3f755-1258"><paramref name="indices" />의 요소가 현재 <see cref="T:System.Array" />의 해당 차원에 대한 올바른 인덱스 범위 밖에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1258">Any element in <paramref name="indices" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.SetValue" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (long index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(int64 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (index As Long) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(long index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="3f755-1259">가져올 <see cref="T:System.Array" /> 요소의 위치를 나타내는 64비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1259">A 64-bit integer that represents the position of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <summary><span data-ttu-id="3f755-1260">1차원 <see cref="T:System.Array" />의 지정한 위치에서 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1260">Gets the value at the specified position in the one-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="3f755-1261">인덱스가 64비트 정수로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1261">The index is specified as a 64-bit integer.</span></span></summary>
        <returns><span data-ttu-id="3f755-1262">1차원 <see cref="T:System.Array" />의 지정한 위치에 있는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1262">The value at the specified position in the one-dimensional <see cref="T:System.Array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1263"><xref:System.Array.GetLowerBound%2A> 및 <xref:System.Array.GetUpperBound%2A> 메서드를 확인할 수 있는지 여부를 값 `index` 범위를 벗어났습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1263">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether the value of `index` is out of bounds.</span></span>  
  
 <span data-ttu-id="3f755-1264">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="3f755-1264">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1265">다음 코드 예제에는 설정 하 고 1 차원 또는 다차원 배열에 특정 값을 가져오는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1265">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3f755-1266">현재 <see cref="T:System.Array" />에 1차원이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1266">The current <see cref="T:System.Array" /> does not have exactly one dimension.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-1267"><paramref name="index" />가 현재 <see cref="T:System.Array" />의 올바른 인덱스 범위 밖에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1267"><paramref name="index" /> is outside the range of valid indexes for the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.SetValue" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (params long[] indices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(int64[] indices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetValue(System.Int64[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (ParamArray indices As Long()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(... cli::array &lt;long&gt; ^ indices);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="System.Int64[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indices"><span data-ttu-id="3f755-1268">가져올 <see cref="T:System.Array" /> 요소의 위치를 지정하는 인덱스를 나타내는 64비트 정수의 1차원 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1268">A one-dimensional array of 64-bit integers that represent the indexes specifying the position of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <summary><span data-ttu-id="3f755-1269">다차원 <see cref="T:System.Array" />의 지정한 위치에서 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1269">Gets the value at the specified position in the multidimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="3f755-1270">인덱스가 64비트 정수 배열로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1270">The indexes are specified as an array of 64-bit integers.</span></span></summary>
        <returns><span data-ttu-id="3f755-1271">다차원 <see cref="T:System.Array" />의 지정한 위치에서 있는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1271">The value at the specified position in the multidimensional <see cref="T:System.Array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1272">요소 수가 `indices` 차원 수와 같아야는 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1272">The number of elements in `indices` must equal the number of dimensions in the <xref:System.Array>.</span></span> <span data-ttu-id="3f755-1273">모든 요소는 `indices` 는 다차원 배열 원하는 요소의 위치를 전체적으로 지정 해야 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1273">All elements in the `indices` array must collectively specify the position of the desired element in the multidimensional <xref:System.Array>.</span></span>  
  
 <span data-ttu-id="3f755-1274"><xref:System.Array.GetLowerBound%2A> 및 <xref:System.Array.GetUpperBound%2A> 메서드 범위를 벗어난 인덱스 중 하나 인지 여부를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1274">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.</span></span>  
  
 <span data-ttu-id="3f755-1275">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="3f755-1275">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1276">다음 코드 예제에는 설정 하 고 1 차원 또는 다차원 배열에 특정 값을 가져오는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1276">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1277"><paramref name="indices" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1277"><paramref name="indices" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3f755-1278">현재 <see cref="T:System.Array" />의 차수가 <paramref name="indices" />에 있는 요소 수와 다른 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1278">The number of dimensions in the current <see cref="T:System.Array" /> is not equal to the number of elements in <paramref name="indices" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3f755-1279"><paramref name="indices" />의 요소가 현재 <see cref="T:System.Array" />의 해당 차원에 대한 올바른 인덱스 범위 밖에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1279">Any element in <paramref name="indices" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.SetValue" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (int index1, int index2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(int32 index1, int32 index2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetValue(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (index1 As Integer, index2 As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(int index1, int index2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index1" Type="System.Int32" />
        <Parameter Name="index2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index1"><span data-ttu-id="3f755-1280">가져올 <see cref="T:System.Array" /> 요소의 첫 번째 차원 인덱스를 나타내는 32비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1280">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <param name="index2"><span data-ttu-id="3f755-1281">가져올 <see cref="T:System.Array" /> 요소의 두 번째 차원 인덱스를 나타내는 32비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1281">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <summary><span data-ttu-id="3f755-1282">이차원 <see cref="T:System.Array" />의 지정한 위치에서 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1282">Gets the value at the specified position in the two-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="3f755-1283">인덱스가 32비트 정수로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1283">The indexes are specified as 32-bit integers.</span></span></summary>
        <returns><span data-ttu-id="3f755-1284">이차원 <see cref="T:System.Array" />의 지정한 위치에 있는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1284">The value at the specified position in the two-dimensional <see cref="T:System.Array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1285"><xref:System.Array.GetLowerBound%2A> 및 <xref:System.Array.GetUpperBound%2A> 메서드 범위를 벗어난 인덱스 중 하나 인지 여부를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1285">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.</span></span>  
  
 <span data-ttu-id="3f755-1286">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="3f755-1286">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1287">다음 코드 예제에는 설정 하 고 1 차원 또는 다차원 배열에 특정 값을 가져오는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1287">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3f755-1288">현재 <see cref="T:System.Array" />에 이차원이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1288">The current <see cref="T:System.Array" /> does not have exactly two dimensions.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="3f755-1289"><paramref name="index1" /> 또는 <paramref name="index2" />가 현재 <see cref="T:System.Array" />의 해당 차원에 대한 올바른 인덱스 범위 밖에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1289">Either <paramref name="index1" /> or <paramref name="index2" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.SetValue" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (long index1, long index2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(int64 index1, int64 index2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetValue(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (index1 As Long, index2 As Long) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(long index1, long index2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index1" Type="System.Int64" />
        <Parameter Name="index2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="index1"><span data-ttu-id="3f755-1290">가져올 <see cref="T:System.Array" /> 요소의 첫 번째 차원 인덱스를 나타내는 64비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1290">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <param name="index2"><span data-ttu-id="3f755-1291">가져올 <see cref="T:System.Array" /> 요소의 두 번째 차원 인덱스를 나타내는 64비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1291">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <summary><span data-ttu-id="3f755-1292">이차원 <see cref="T:System.Array" />의 지정한 위치에서 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1292">Gets the value at the specified position in the two-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="3f755-1293">인덱스가 64비트 정수로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1293">The indexes are specified as 64-bit integers.</span></span></summary>
        <returns><span data-ttu-id="3f755-1294">이차원 <see cref="T:System.Array" />의 지정한 위치에 있는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1294">The value at the specified position in the two-dimensional <see cref="T:System.Array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1295"><xref:System.Array.GetLowerBound%2A> 및 <xref:System.Array.GetUpperBound%2A> 메서드 범위를 벗어난 인덱스 중 하나 인지 여부를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1295">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.</span></span>  
  
 <span data-ttu-id="3f755-1296">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="3f755-1296">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1297">다음 코드 예제에는 설정 하 고 1 차원 또는 다차원 배열에 특정 값을 가져오는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1297">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3f755-1298">현재 <see cref="T:System.Array" />에 이차원이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1298">The current <see cref="T:System.Array" /> does not have exactly two dimensions.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3f755-1299"><paramref name="index1" /> 또는 <paramref name="index2" />가 현재 <see cref="T:System.Array" />의 해당 차원에 대한 올바른 인덱스 범위 밖에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1299">Either <paramref name="index1" /> or <paramref name="index2" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.SetValue" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (int index1, int index2, int index3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(int32 index1, int32 index2, int32 index3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetValue(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (index1 As Integer, index2 As Integer, index3 As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(int index1, int index2, int index3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index1" Type="System.Int32" />
        <Parameter Name="index2" Type="System.Int32" />
        <Parameter Name="index3" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index1"><span data-ttu-id="3f755-1300">가져올 <see cref="T:System.Array" /> 요소의 첫 번째 차원 인덱스를 나타내는 32비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1300">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <param name="index2"><span data-ttu-id="3f755-1301">가져올 <see cref="T:System.Array" /> 요소의 두 번째 차원 인덱스를 나타내는 32비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1301">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <param name="index3"><span data-ttu-id="3f755-1302">가져올 <see cref="T:System.Array" /> 요소의 세 번째 차원 인덱스를 나타내는 32비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1302">A 32-bit integer that represents the third-dimension index of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <summary><span data-ttu-id="3f755-1303">삼차원 <see cref="T:System.Array" />의 지정한 위치에서 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1303">Gets the value at the specified position in the three-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="3f755-1304">인덱스가 32비트 정수로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1304">The indexes are specified as 32-bit integers.</span></span></summary>
        <returns><span data-ttu-id="3f755-1305">삼차원 <see cref="T:System.Array" />의 지정한 위치에 있는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1305">The value at the specified position in the three-dimensional <see cref="T:System.Array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1306"><xref:System.Array.GetLowerBound%2A> 및 <xref:System.Array.GetUpperBound%2A> 메서드 범위를 벗어난 인덱스 중 하나 인지 여부를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1306">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.</span></span>  
  
 <span data-ttu-id="3f755-1307">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="3f755-1307">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1308">다음 코드 예제에는 설정 하 고 1 차원 또는 다차원 배열에 특정 값을 가져오는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1308">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3f755-1309">현재 <see cref="T:System.Array" />에 삼차원이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1309">The current <see cref="T:System.Array" /> does not have exactly three dimensions.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="3f755-1310"><paramref name="index1" />, <paramref name="index2" /> 또는 <paramref name="index3" />이 현재 <see cref="T:System.Array" />의 해당 차원에 대한 올바른 인덱스 범위 밖에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1310"><paramref name="index1" /> or <paramref name="index2" /> or <paramref name="index3" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.SetValue" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (long index1, long index2, long index3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(int64 index1, int64 index2, int64 index3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.GetValue(System.Int64,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (index1 As Long, index2 As Long, index3 As Long) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(long index1, long index2, long index3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index1" Type="System.Int64" />
        <Parameter Name="index2" Type="System.Int64" />
        <Parameter Name="index3" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="index1"><span data-ttu-id="3f755-1311">가져올 <see cref="T:System.Array" /> 요소의 첫 번째 차원 인덱스를 나타내는 64비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1311">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <param name="index2"><span data-ttu-id="3f755-1312">가져올 <see cref="T:System.Array" /> 요소의 두 번째 차원 인덱스를 나타내는 64비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1312">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <param name="index3"><span data-ttu-id="3f755-1313">가져올 <see cref="T:System.Array" /> 요소의 세 번째 차원 인덱스를 나타내는 64비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1313">A 64-bit integer that represents the third-dimension index of the <see cref="T:System.Array" /> element to get.</span></span></param>
        <summary><span data-ttu-id="3f755-1314">삼차원 <see cref="T:System.Array" />의 지정한 위치에서 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1314">Gets the value at the specified position in the three-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="3f755-1315">인덱스가 64비트 정수로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1315">The indexes are specified as 64-bit integers.</span></span></summary>
        <returns><span data-ttu-id="3f755-1316">삼차원 <see cref="T:System.Array" />의 지정한 위치에 있는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1316">The value at the specified position in the three-dimensional <see cref="T:System.Array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1317"><xref:System.Array.GetLowerBound%2A> 및 <xref:System.Array.GetUpperBound%2A> 메서드 범위를 벗어난 인덱스 중 하나 인지 여부를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1317">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.</span></span>  
  
 <span data-ttu-id="3f755-1318">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="3f755-1318">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1319">다음 코드 예제에는 설정 하 고 1 차원 또는 다차원 배열에 특정 값을 가져오는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1319">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3f755-1320">현재 <see cref="T:System.Array" />에 삼차원이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1320">The current <see cref="T:System.Array" /> does not have exactly three dimensions.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-1321"><paramref name="index1" />, <paramref name="index2" /> 또는 <paramref name="index3" />이 현재 <see cref="T:System.Array" />의 해당 차원에 대한 올바른 인덱스 범위 밖에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1321"><paramref name="index1" /> or <paramref name="index2" /> or <paramref name="index3" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.SetValue" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3f755-1322">지정한 개체를 검색하여 1차원 배열 또는 배열의 요소 범위에서 처음으로 일치하는 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1322">Searches for the specified object and returns the index of its first occurrence in a one-dimensional array or in a range of elements in the array.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public static int IndexOf (Array array, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf(class System.Array array, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.IndexOf(System.Array,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int IndexOf(Array ^ array, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="3f755-1323">검색할 1차원 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1323">The one-dimensional array to search.</span></span></param>
        <param name="value"><span data-ttu-id="3f755-1324"><c>array</c>에서 찾을 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1324">The object to locate in <c>array</c>.</span></span></param>
        <summary><span data-ttu-id="3f755-1325">지정한 개체를 검색하여 1차원 배열에서 처음 검색된 개체의 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1325">Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.</span></span></summary>
        <returns><span data-ttu-id="3f755-1326"><paramref name="value" />가 있을 경우 <paramref name="array" />에서 처음 검색된 값의 인덱스이고, 그렇지 않으면 배열의 하한에서 1을 뺀 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1326">The index of the first occurrence of <paramref name="value" /> in <paramref name="array" />, if found; otherwise, the lower bound of the array minus 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1327">이 메서드는 1 차원 arrayfor의 모든 요소를 검색 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1327">This method searches all the elements of a one-dimensional arrayfor `value`.</span></span> <span data-ttu-id="3f755-1328">확인 하려면 여부 `value` 에 존재 `array`, 메서드가 각 요소를 호출 하 여 같음 비교를 수행할 `Equals` 일치 하는 항목을 찾을 때까지 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1328">To determine whether `value` exists in `array`, the method performs an equality comparison by calling each element's `Equals` method until it finds a match.</span></span> <span data-ttu-id="3f755-1329">즉, 요소를 재정의 하는 경우는 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> 메서드를 재정의 하는 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1329">This means that if the element overrides the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method, that override is called.</span></span>  
  
 <span data-ttu-id="3f755-1330">대부분의 배열은 0은 없으므로이 메서드가 일반적으로 – 1을 반환`value` 를 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1330">Because most arrays have a lower bound of zero, this method generally returns –1 if`value` isn’t found.</span></span> <span data-ttu-id="3f755-1331">배열의 하 한에 해당 하는 드문 경우 <xref:System.Int32.MinValue?displayProperty=nameWithType>(0x80000000) 및 `value` 을 찾을 수 없으면이 메서드가 반환 <xref:System.Int32.MaxValue?displayProperty=nameWithType> (0x7FFFFFFF).</span><span class="sxs-lookup"><span data-stu-id="3f755-1331">In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=nameWithType>(0x80000000) and `value` isn’t found, this method returns <xref:System.Int32.MaxValue?displayProperty=nameWithType> (0x7FFFFFFF).</span></span>  
  
 <span data-ttu-id="3f755-1332">이 메서드는 O는 (`n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1332">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1333">이 예에서는 호출의 다음 세 가지 오버 로드는 <xref:System.Array.IndexOf%2A> 메서드 문자열 배열에서 문자열로의 인덱스를 찾을 수:</span><span class="sxs-lookup"><span data-stu-id="3f755-1333">The example calls the following three overloads of the <xref:System.Array.IndexOf%2A> method to find the index of a string in a string array:</span></span>  
  
-   <span data-ttu-id="3f755-1334"><xref:System.Array.IndexOf%28System.Array%2CSystem.Object%29>문자열의 첫 번째 확인 하는 문자열 배열에서 "the"입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1334"><xref:System.Array.IndexOf%28System.Array%2CSystem.Object%29>, to determine the first occurrence of the string "the" in a string array.</span></span>  
  
-   <span data-ttu-id="3f755-1335"><xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%29>문자열의 첫 번째 확인 하려면 "the" 문자열 배열의 마지막 요소에는 네 번째에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1335"><xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%29>, to determine the first occurrence of the string "the" in the fourth to the last elements of a string array.</span></span>  
  
-   <span data-ttu-id="3f755-1336"><xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%2CSystem.Int32%29>문자열의 첫 번째 확인 하는 문자열에 "the" 배열에서 마지막으로 성공한 일치는 배열의 끝에 다음 요소에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1336"><xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%2CSystem.Int32%29>, to determine the first occurrence of the string "the" in a string array from the element that follows the last successful match to the end of the array.</span></span>  
  
 [!code-cpp[Classic Array.IndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.IndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/CS/source.cs#1)]
 [!code-vb[Classic Array.IndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1337"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1337"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="3f755-1338"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1338"><paramref name="array" /> is multidimensional.</span></span></exception>
        <altmember cref="Overload:System.Array.LastIndexOf" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public static int IndexOf (Array array, object value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf(class System.Array array, object value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.IndexOf(System.Array,System.Object,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int IndexOf(Array ^ array, System::Object ^ value, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="3f755-1339">검색할 1차원 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1339">The one-dimensional array to search.</span></span></param>
        <param name="value"><span data-ttu-id="3f755-1340"><c>array</c>에서 찾을 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1340">The object to locate in <c>array</c>.</span></span></param>
        <param name="startIndex"><span data-ttu-id="3f755-1341">검색할 시작 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1341">The starting index of the search.</span></span> <span data-ttu-id="3f755-1342">0은 빈 배열에서 유효합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1342">0 (zero) is valid in an empty array.</span></span></param>
        <summary><span data-ttu-id="3f755-1343">1차원 배열의 요소 범위에서 지정한 개체를 검색하여 처음으로 일치하는 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1343">Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence.</span></span> <span data-ttu-id="3f755-1344">범위는 지정한 인덱스에서 배열의 끝까지 확장됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1344">The range extends from a specified index to the end of the array.</span></span></summary>
        <returns><span data-ttu-id="3f755-1345"><paramref name="value" />가 있을 경우 <paramref name="startIndex" />에서 마지막 요소로 확장하는 <paramref name="array" />의 요소 범위에서 처음 검색된 값의 인덱스이고, 그러지 않으면 배열의 하한에서 1을 뺀 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1345">The index of the first occurrence of <paramref name="value" />, if it’s found, within the range of elements in <paramref name="array" /> that extends from <paramref name="startIndex" /> to the last element; otherwise, the lower bound of the array minus 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1346">이 메서드 검색 인덱스에 있는 요소에서 1 차원 배열 `startIndex` 부터 마지막 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1346">This method searches a one-dimensional array from the element at index `startIndex` to the last element.</span></span> <span data-ttu-id="3f755-1347">확인 하려면 여부 `value` 에 존재 `array`, 메서드를 호출 하 여 같음 비교를 수행는 `Equals` 일치 하는 항목을 찾을 때까지 모든 요소의 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1347">To determine whether `value` exists in `array`, the method performs an equality comparison by calling the `Equals` method of every element until it finds a match.</span></span> <span data-ttu-id="3f755-1348">즉, 요소를 재정의 하는 경우는 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> 메서드를 재정의 하는 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1348">This means that if the element overrides the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method, that override is called.</span></span>  
  
 <span data-ttu-id="3f755-1349">대부분의 배열은 0은 없으므로이 메서드가 일반적으로 – 1을 반환 `value` 를 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1349">Because most arrays have a lower bound of zero, this method generally returns –1 if `value` isn’t found.</span></span> <span data-ttu-id="3f755-1350">배열의 하 한에 해당 하는 드문 경우 <xref:System.Int32.MinValue?displayProperty=nameWithType>(0x80000000) 및 `value` 을 찾을 수 없으면이 메서드가 반환 <xref:System.Int32.MaxValue?displayProperty=nameWithType> (0x7FFFFFFF).</span><span class="sxs-lookup"><span data-stu-id="3f755-1350">In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=nameWithType>(0x80000000) and `value` isn’t found, this method returns <xref:System.Int32.MaxValue?displayProperty=nameWithType> (0x7FFFFFFF).</span></span>  
  
 <span data-ttu-id="3f755-1351">경우 `startIndex` equals <xref:System.Array.Length%2A?displayProperty=nameWithType>, 메서드가-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1351">If `startIndex` equals <xref:System.Array.Length%2A?displayProperty=nameWithType>,the method returns -1.</span></span> <span data-ttu-id="3f755-1352">경우 `startIndex` 보다 크면 <xref:System.Array.Length%2A?displayProperty=nameWithType>, 메서드에서 throw 된 <xref:System.ArgumentOutOfRangeException>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1352">If `startIndex` is greater than <xref:System.Array.Length%2A?displayProperty=nameWithType>, the method throws an <xref:System.ArgumentOutOfRangeException>.</span></span>  
  
 <span data-ttu-id="3f755-1353">이 메서드는 O는 (`n`) 작업, 여기서 `n` 의 요소 수 `startIndex` 의 끝에 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1353">This method is an O(`n`) operation, where `n` is the number of elements from `startIndex` to the end of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1354">이 예에서는 호출의 다음 세 가지 오버 로드는 <xref:System.Array.IndexOf%2A> 메서드 문자열 배열에서 문자열로의 인덱스를 찾을 수:</span><span class="sxs-lookup"><span data-stu-id="3f755-1354">The example calls the following three overloads of the <xref:System.Array.IndexOf%2A> method to find the index of a string in a string array:</span></span>  
  
-   <span data-ttu-id="3f755-1355"><xref:System.Array.IndexOf%28System.Array%2CSystem.Object%29>문자열의 첫 번째 확인 하는 문자열 배열에서 "the"입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1355"><xref:System.Array.IndexOf%28System.Array%2CSystem.Object%29>, to determine the first occurrence of the string "the" in a string array.</span></span>  
  
-   <span data-ttu-id="3f755-1356"><xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%29>문자열의 첫 번째 확인 하려면 "the" 문자열 배열의 마지막 요소에는 네 번째에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1356"><xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%29>, to determine the first occurrence of the string "the" in the fourth to the last elements of a string array.</span></span>  
  
-   <span data-ttu-id="3f755-1357"><xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%2CSystem.Int32%29>문자열의 첫 번째 확인 하는 문자열에 "the" 배열에서 마지막으로 성공한 일치는 배열의 끝에 다음 요소에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1357"><xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%2CSystem.Int32%29>, to determine the first occurrence of the string "the" in a string array from the element that follows the last successful match to the end of the array.</span></span>  
  
 [!code-cpp[Classic Array.IndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.IndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/CS/source.cs#1)]
 [!code-vb[Classic Array.IndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1358"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1358"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-1359"><paramref name="startIndex" />가 <paramref name="array" />의 유효한 인덱스 범위를 벗어납니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1359"><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="3f755-1360"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1360"><paramref name="array" /> is multidimensional.</span></span></exception>
        <altmember cref="Overload:System.Array.LastIndexOf" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public static int IndexOf (Array array, object value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf(class System.Array array, object value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int IndexOf(Array ^ array, System::Object ^ value, int startIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="3f755-1361">검색할 1차원 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1361">The one-dimensional array to search.</span></span></param>
        <param name="value"><span data-ttu-id="3f755-1362"><c>array</c>에서 찾을 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1362">The object to locate in <c>array</c>.</span></span></param>
        <param name="startIndex"><span data-ttu-id="3f755-1363">검색할 시작 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1363">The starting index of the search.</span></span> <span data-ttu-id="3f755-1364">0은 빈 배열에서 유효합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1364">0 (zero) is valid in an empty array.</span></span></param>
        <param name="count"><span data-ttu-id="3f755-1365">검색할 요소의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1365">The number of elements to search.</span></span></param>
        <summary><span data-ttu-id="3f755-1366">1차원 배열의 요소 범위에서 지정한 개체를 검색하여 처음으로 일치하는 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1366">Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of ifs first occurrence.</span></span> <span data-ttu-id="3f755-1367">범위는 지정한 요소 수에 대해 지정한 인덱스에서 확장됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1367">The range extends from a specified index for a specified number of elements.</span></span></summary>
        <returns><span data-ttu-id="3f755-1368">첫 번째 <paramref name="value" /> 발생의 인덱스가 <paramref name="array" />의 인덱스 범위(<paramref name="startIndex" /> ~ <paramref name="startIndex" /> + <paramref name="count" /> - 1)에 있으면 해당 인덱스이며 그렇지 않으면 배열의 하한에서 1을 뺀 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1368">The index of the first occurrence of <paramref name="value" />, if it’s found in the <paramref name="array" /> from index <paramref name="startIndex" /> to <paramref name="startIndex" /> + <paramref name="count" /> - 1; otherwise, the lower bound of the array minus 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1369">이 메서드는 1 차원 arrayfrom의 요소를 검색 `startIndex` 를 `startIndex` 플러스 `count` 에서 1을 뺀 경우 `count` 가 0 보다 크면 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1369">This method searches the elements of a one-dimensional arrayfrom `startIndex` to `startIndex` plus `count` minus 1, if `count` is greater than 0.</span></span> <span data-ttu-id="3f755-1370">확인 하려면 여부 `value` 에 존재 `array`, 메서드를 호출 하 여 같음 비교를 수행는 `Equals` 일치 하는 항목을 찾을 때까지 모든 요소의 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1370">To determine whether `value` exists in `array`, the method performs an equality comparison by calling the `Equals` method of every element until it finds a match.</span></span> <span data-ttu-id="3f755-1371">즉, 요소를 재정의 하는 경우는 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 메서드를 재정의 하는 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1371">This means that if the element overrides the <xref:System.Object.Equals%2A?displayProperty=nameWithType> method, that override is called.</span></span>  
  
 <span data-ttu-id="3f755-1372">Becausemost 배열은 있는 하한값 0으로,이 메서드는 일반적으로 경우-1을 반환 `value` 를 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1372">Becausemost arrays have a lower bound of zero, this method generally returns –1 when `value` isn’t found.</span></span> <span data-ttu-id="3f755-1373">배열의 하 한에 해당 하는 드문 경우 <xref:System.Int32.MinValue?displayProperty=nameWithType> (0x80000000) 및 `value` 을 찾을 수 없으면이 메서드가 반환 <xref:System.Int32.MaxValue?displayProperty=nameWithType> (0x7FFFFFFF).</span><span class="sxs-lookup"><span data-stu-id="3f755-1373">In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=nameWithType> (0x80000000) and `value` isn’t found, this method returns <xref:System.Int32.MaxValue?displayProperty=nameWithType> (0x7FFFFFFF).</span></span>  
  
 <span data-ttu-id="3f755-1374">경우 `startindex` equals <xref:System.Array.Length%2A?displayProperty=nameWithType>, 메서드가-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1374">If `startindex` equals <xref:System.Array.Length%2A?displayProperty=nameWithType>, the method returns -1.</span></span> <span data-ttu-id="3f755-1375">경우 `startIndex` 보다 크면 <xref:System.Array.Length%2A?displayProperty=nameWithType>, 메서드에서 throw 된 <xref:System.ArgumentOutOfRangeException>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1375">If `startIndex` is greater than <xref:System.Array.Length%2A?displayProperty=nameWithType>, the method throws an <xref:System.ArgumentOutOfRangeException>.</span></span>  
  
 <span data-ttu-id="3f755-1376">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 `count`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1376">This method is an O(`n`) operation, where `n` is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1377">이 예에서는 호출의 다음 세 가지 오버 로드는 <xref:System.Array.IndexOf%2A> 메서드 문자열 배열에서 문자열로의 인덱스를 찾을 수:</span><span class="sxs-lookup"><span data-stu-id="3f755-1377">The example calls the following three overloads of the <xref:System.Array.IndexOf%2A> method to find the index of a string in a string array:</span></span>  
  
-   <span data-ttu-id="3f755-1378"><xref:System.Array.IndexOf%28System.Array%2CSystem.Object%29>문자열의 첫 번째 확인 하는 문자열 배열에서 "the"입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1378"><xref:System.Array.IndexOf%28System.Array%2CSystem.Object%29>, to determine the first occurrence of the string "the" in a string array.</span></span>  
  
-   <span data-ttu-id="3f755-1379"><xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%29>문자열의 첫 번째 확인 하려면 "the" 문자열 배열의 마지막 요소에는 네 번째에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1379"><xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%29>, to determine the first occurrence of the string "the" in the fourth to the last elements of a string array.</span></span>  
  
-   <span data-ttu-id="3f755-1380"><xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%2CSystem.Int32%29>문자열의 첫 번째 확인 하는 문자열에 "the" 배열에서 마지막으로 성공한 일치는 배열의 끝에 다음 요소에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1380"><xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%2CSystem.Int32%29>, to determine the first occurrence of the string "the" in a string array from the element that follows the last successful match to the end of the array.</span></span> <span data-ttu-id="3f755-1381">값을 확인 하는 `count` 인수를 시작 하는 인덱스에서 배열의 상한을 뺍니다이 고 하나에 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1381">To determine the value of the `count` argument, it subtracts the upper bound of the array from the starting index and adds one.</span></span>  
  
 [!code-cpp[Classic Array.IndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.IndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/CS/source.cs#1)]
 [!code-vb[Classic Array.IndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.IndexOf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1382"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1382"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-1383"><paramref name="startIndex" />가 <paramref name="array" />의 유효한 인덱스 범위를 벗어납니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1383"><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="3f755-1384">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1384">-or-</span></span>  
  
 <span data-ttu-id="3f755-1385"><paramref name="count" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1385"><paramref name="count" /> is less than zero.</span></span>  
  
 <span data-ttu-id="3f755-1386">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1386">-or-</span></span>  
  
 <span data-ttu-id="3f755-1387"><paramref name="startIndex" /> 및 <paramref name="count" />가 <paramref name="array" />의 올바른 섹션을 지정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1387"><paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="3f755-1388"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1388"><paramref name="array" /> is multidimensional.</span></span></exception>
        <altmember cref="Overload:System.Array.LastIndexOf" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (T[] array, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;T&gt;(!!T[] array, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.IndexOf``1(``0[],``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IndexOf(Of T) (array As T(), value As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int IndexOf(cli::array &lt;T&gt; ^ array, T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-1389">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1389">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-1390">검색할 1차원(인덱스는 0부터 시작) 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1390">The one-dimensional, zero-based array to search.</span></span></param>
        <param name="value"><span data-ttu-id="3f755-1391"><c>array</c>에서 찾을 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1391">The object to locate in <c>array</c>.</span></span></param>
        <summary><span data-ttu-id="3f755-1392">지정한 개체를 검색하여 1차원 배열에서 처음 검색된 개체의 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1392">Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.</span></span></summary>
        <returns><span data-ttu-id="3f755-1393">전체 <paramref name="array" />에서 처음 검색된 <paramref name="value" />의 0부터 시작하는 인덱스이고, 검색되지 않으면 -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1393">The zero-based index of the first occurrence of <paramref name="value" /> in the entire <paramref name="array" />, if found; otherwise, –1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1394">이 메서드 검색에 대 한 1 차원 배열의 모든 요소 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1394">This method searches all the elements of a one-dimensional array for `value`.</span></span> <span data-ttu-id="3f755-1395">확인 하려면 여부 `value` 에 존재 `array`, 메서드를 호출 하 여 같음 비교를 수행는 `T.Equals` 모든 요소에 대 한 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1395">To determine whether `value` exists in `array`, the method performs an equality comparison by calling the `T.Equals` method on every element.</span></span> <span data-ttu-id="3f755-1396">즉 `T` 재정의 <xref:System.Object.Equals%2A> 메서드를 재정의 하는 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1396">This means that if `T` overrides the <xref:System.Object.Equals%2A> method, that override is called.</span></span>  
  
 <span data-ttu-id="3f755-1397">이 메서드는 O는 (`n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1397">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1398">다음 예제에서는 세 개의 제네릭 오버 로드를 모두는 <xref:System.Array.IndexOf%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1398">The following example demonstrates all three generic overloads of the <xref:System.Array.IndexOf%2A> method.</span></span> <span data-ttu-id="3f755-1399">문자열의 배열 인덱스 위치 0과 5 인덱스 위치에 두 번 나타나는 하나의 항목으로 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1399">An array of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="3f755-1400"><xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> 메서드 오버 로드는 처음부터 배열 검색 하 고 문자열의 첫 번째 항목을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1400">The <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> method overload searches the array from the beginning, and finds the first occurrence of the string.</span></span> <span data-ttu-id="3f755-1401"><xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> 메서드 오버 로드는 인덱스 위치 3 시작 하 여 배열 및 배열 끝까지 계속 검색 하는 데 사용 되 고 문자열의 두 번째 항목을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1401">The <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> method overload is used to search the array beginning with index location 3 and continuing to the end of the array, and finds the second occurrence of the string.</span></span> <span data-ttu-id="3f755-1402">마지막으로 <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29> 메서드 오버 로드는 두 인덱스 위치에서 시작 하는 두 항목의 범위를 검색 하는 데 사용 됩니다; 해당 범위에 검색 문자열의 인스턴스가 없는 때문에-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1402">Finally, the <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[Array_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[Array_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_IndexOf/cs/source.cs#1)]
 [!code-vb[Array_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1403"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1403"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="Overload:System.Array.LastIndexOf" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (T[] array, T value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;T&gt;(!!T[] array, !!T value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.IndexOf``1(``0[],``0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IndexOf(Of T) (array As T(), value As T, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int IndexOf(cli::array &lt;T&gt; ^ array, T value, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="value" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-1404">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1404">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-1405">검색할 1차원(인덱스는 0부터 시작) 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1405">The one-dimensional, zero-based array to search.</span></span></param>
        <param name="value"><span data-ttu-id="3f755-1406"><c>array</c>에서 찾을 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1406">The object to locate in <c>array</c>.</span></span></param>
        <param name="startIndex"><span data-ttu-id="3f755-1407">검색의 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1407">The zero-based starting index of the search.</span></span> <span data-ttu-id="3f755-1408">0은 빈 배열에서 유효합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1408">0 (zero) is valid in an empty array.</span></span></param>
        <summary><span data-ttu-id="3f755-1409">1차원 배열의 요소 범위에서 지정한 개체를 검색하여 처음으로 일치하는 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1409">Searches for the specified object in a range of elements of a one dimensional array, and returns the index of its first occurrence.</span></span> <span data-ttu-id="3f755-1410">범위는 지정한 인덱스에서 배열의 끝까지 확장됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1410">The range extends from a specified index to the end of the array.</span></span></summary>
        <returns><span data-ttu-id="3f755-1411"><paramref name="value" />가 있을 경우 <paramref name="array" />에서 마지막 요소로 확장하는 <paramref name="startIndex" />의 요소 범위에서 처음 검색된 값의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1411">The zero-based index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from <paramref name="startIndex" /> to the last element, if found; otherwise, –1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1412">이 메서드는 1 차원 배열에 있는 요소에서 검색 `startIndex` 배열의 끝에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1412">This method searches a one-dimensional array from the element at `startIndex` to the end of the array.</span></span> <span data-ttu-id="3f755-1413">확인 하려면 여부 `value` 에 존재 `array`, 메서드를 호출 하 여 같음 비교를 수행는 `T.Equals` 모든 요소에 대 한 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1413">To determine whether `value` exists in `array`, the method performs an equality comparison by calling the `T.Equals` method on every element.</span></span> <span data-ttu-id="3f755-1414">즉 `T` 재정의 <xref:System.Object.Equals%2A> 메서드를 재정의 하는 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1414">This means that if `T` overrides the <xref:System.Object.Equals%2A> method, that override is called.</span></span>  
  
 <span data-ttu-id="3f755-1415">경우 `startIndex` equals <xref:System.Array.Length%2A>, 메서드가 반환-1.If `startIndex` 보다 크면 <xref:System.Array.Length%2A?displayProperty=nameWithType>, 메서드에서 throw는 <xref:System.ArgumentOutOfRangeException>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1415">If `startIndex` equals <xref:System.Array.Length%2A>,the method returns -1.If `startIndex` is greater than <xref:System.Array.Length%2A?displayProperty=nameWithType>, the method throws an <xref:System.ArgumentOutOfRangeException>.</span></span>  
  
 <span data-ttu-id="3f755-1416">이 메서드는 O는 (`n`) 작업, 여기서 `n` 의 요소 수 `startIndex` 의 끝에 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1416">This method is an O(`n`) operation, where `n` is the number of elements from `startIndex` to the end of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1417">다음 예제에서는 세 개의 제네릭 오버 로드를 모두는 <xref:System.Array.IndexOf%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1417">The following example demonstrates all three generic overloads of the <xref:System.Array.IndexOf%2A> method.</span></span> <span data-ttu-id="3f755-1418">문자열의 배열 인덱스 위치 0과 5 인덱스 위치에 두 번 나타나는 하나의 항목으로 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1418">An array of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="3f755-1419"><xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> 메서드 오버 로드는 처음부터 배열 검색 하 고 문자열의 첫 번째 항목을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1419">The <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> method overload searches the array from the beginning, and finds the first occurrence of the string.</span></span> <span data-ttu-id="3f755-1420"><xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> 메서드 오버 로드는 인덱스 위치 3 시작 하 여 배열 및 배열 끝까지 계속 검색 하는 데 사용 되 고 문자열의 두 번째 항목을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1420">The <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> method overload is used to search the array beginning with index location 3 and continuing to the end of the array, and finds the second occurrence of the string.</span></span> <span data-ttu-id="3f755-1421">마지막으로 <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29> 메서드 오버 로드는 두 인덱스 위치에서 시작 하는 두 항목의 범위를 검색 하는 데 사용 됩니다; 해당 범위에 검색 문자열의 인스턴스가 없는 때문에-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1421">Finally, the <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[Array_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[Array_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_IndexOf/cs/source.cs#1)]
 [!code-vb[Array_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1422"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1422"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-1423"><paramref name="startIndex" />가 <paramref name="array" />의 유효한 인덱스 범위를 벗어납니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1423"><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</span></span></exception>
        <altmember cref="Overload:System.Array.LastIndexOf" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (T[] array, T value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;T&gt;(!!T[] array, !!T value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IndexOf(Of T) (array As T(), value As T, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int IndexOf(cli::array &lt;T&gt; ^ array, T value, int startIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="value" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-1424">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1424">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-1425">검색할 1차원(인덱스는 0부터 시작) 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1425">The one-dimensional, zero-based array to search.</span></span></param>
        <param name="value"><span data-ttu-id="3f755-1426"><c>array</c>에서 찾을 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1426">The object to locate in <c>array</c>.</span></span></param>
        <param name="startIndex"><span data-ttu-id="3f755-1427">검색의 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1427">The zero-based starting index of the search.</span></span> <span data-ttu-id="3f755-1428">0은 빈 배열에서 유효합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1428">0 (zero) is valid in an empty array.</span></span></param>
        <param name="count"><span data-ttu-id="3f755-1429">검색할 섹션에 있는 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1429">The number of elements in the section to search.</span></span></param>
        <summary><span data-ttu-id="3f755-1430">1차원 배열의 요소 범위에서 지정한 개체를 검색하여 처음으로 일치하는 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1430">Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence.</span></span> <span data-ttu-id="3f755-1431">범위는 지정한 요소 수에 대해 지정한 인덱스에서 확장됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1431">The range extends from a specified index for a specified number of elements.</span></span></summary>
        <returns><span data-ttu-id="3f755-1432"><paramref name="value" />가 있을 경우 <paramref name="array" />부터 시작하여 <paramref name="startIndex" />에 지정된 수의 요소를 포함하는 <paramref name="count" />의 요소 범위에서 처음 검색된 값의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1432">The zero-based index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified in <paramref name="count" />, if found; otherwise, –1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1433">이 메서드 searchesthe 요소에서 1 차원 배열의 `startIndex` 를 `startIndex` 플러스 `count` 에서 1을 뺀 경우 `count` 가 0 보다 큰 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1433">This method searchesthe elements of a one-dimensional array from `startIndex` to `startIndex` plus `count` minus 1, if `count` is greater than 0.</span></span> <span data-ttu-id="3f755-1434">확인 하려면 여부 `value` 에 존재 `array`, 메서드를 호출 하 여 같음 비교를 수행는 `T.Equals` 모든 요소에 대 한 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1434">To determine whether `value` exists in `array`, the method performs an equality comparison by calling the `T.Equals` method on every element.</span></span> <span data-ttu-id="3f755-1435">즉 `T` 재정의 <xref:System.Object.Equals%2A> 메서드를 재정의 하는 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1435">This means that if `T` overrides the <xref:System.Object.Equals%2A> method, that override is called.</span></span>  
  
 <span data-ttu-id="3f755-1436">경우 `startIndex` equals <xref:System.Array.Length%2A?displayProperty=nameWithType>, 메서드가-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1436">If `startIndex` equals <xref:System.Array.Length%2A?displayProperty=nameWithType>, the method returns -1.</span></span>  <span data-ttu-id="3f755-1437">경우 `startIndex` 보다 크면 <xref:System.Array.Length%2A?displayProperty=nameWithType>, 메서드에서 throw 된 <xref:System.ArgumentOutOfRangeException>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1437">If `startIndex` is greater than <xref:System.Array.Length%2A?displayProperty=nameWithType>, the method throws an <xref:System.ArgumentOutOfRangeException>.</span></span>  
  
 <span data-ttu-id="3f755-1438">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 `count`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1438">This method is an O(`n`) operation, where `n` is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1439">다음 예제에서는 세 개의 제네릭 오버 로드를 모두는 <xref:System.Array.IndexOf%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1439">The following example demonstrates all three generic overloads of the <xref:System.Array.IndexOf%2A> method.</span></span> <span data-ttu-id="3f755-1440">문자열의 배열 인덱스 위치 0과 5 인덱스 위치에 두 번 나타나는 하나의 항목으로 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1440">An array of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="3f755-1441"><xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> 메서드 오버 로드는 처음부터 배열 검색 하 고 문자열의 첫 번째 항목을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1441">The <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> method overload searches the array from the beginning, and finds the first occurrence of the string.</span></span> <span data-ttu-id="3f755-1442"><xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> 메서드 오버 로드는 인덱스 위치 3 시작 하 여 배열 및 배열 끝까지 계속 검색 하는 데 사용 되 고 문자열의 두 번째 항목을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1442">The <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> method overload is used to search the array beginning with index location 3 and continuing to the end of the array, and finds the second occurrence of the string.</span></span> <span data-ttu-id="3f755-1443">마지막으로 <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29> 메서드 오버 로드는 두 인덱스 위치에서 시작 하는 두 항목의 범위를 검색 하는 데 사용 됩니다; 해당 범위에 검색 문자열의 인스턴스가 없는 때문에-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1443">Finally, the <xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[Array_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[Array_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_IndexOf/cs/source.cs#1)]
 [!code-vb[Array_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1444"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1444"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-1445"><paramref name="startIndex" />가 <paramref name="array" />의 유효한 인덱스 범위를 벗어납니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1445"><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="3f755-1446">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1446">-or-</span></span>  
  
 <span data-ttu-id="3f755-1447"><paramref name="count" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1447"><paramref name="count" /> is less than zero.</span></span>  
  
 <span data-ttu-id="3f755-1448">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1448">-or-</span></span>  
  
 <span data-ttu-id="3f755-1449"><paramref name="startIndex" /> 및 <paramref name="count" />가 <paramref name="array" />의 올바른 섹션을 지정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1449"><paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</span></span></exception>
        <altmember cref="Overload:System.Array.LastIndexOf" />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Initialize" />
      <MemberSignature Language="VB.NET" Value="Public Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Initialize();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3f755-1450">해당 값 형식의 기본 생성자를 호출하여 값 형식 <see cref="T:System.Array" />의 모든 요소를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1450">Initializes every element of the value-type <see cref="T:System.Array" /> by calling the default constructor of the value type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1451">이 메서드는 값 형식의 배열을; 지원 되는 컴파일러에 있도록 디자인 되었습니다. 대부분의 사용자에이 메서드를 사용할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1451">This method is designed to help compilers support value-type arrays; most users do not need this method.</span></span> <span data-ttu-id="3f755-1452">참조 형식에 사용할 수 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1452">It must not be used on reference-type arrays.</span></span>  
  
 <span data-ttu-id="3f755-1453">경우는 <xref:System.Array> 값 유형이 아닙니다 <xref:System.Array> 값 형식에 기본 생성자가 없는 경우 또는 <xref:System.Array> 수정 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1453">If the <xref:System.Array> is not a value-type <xref:System.Array> or if the value type does not have a default constructor, the <xref:System.Array> is not modified.</span></span>  
  
 <span data-ttu-id="3f755-1454">값 형식 <xref:System.Array> 한 및 원하는 개수의 차원이 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1454">The value-type <xref:System.Array> can have any lower bound and any number of dimensions.</span></span>  
  
 <span data-ttu-id="3f755-1455">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Array.Length%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1455">This method is an O(`n`) operation, where `n` is <xref:System.Array.Length%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="3f755-1456">이 메서드를 사용 하 여; 생성자가 있는 값 형식에 대해서만 그러나 C#에 적용 되는 값 형식 생성자를 갖지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1456">You can use this method only on value types that have constructors; however, value types that are native to C# do not have constructors.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFixedSize">
      <MemberSignature Language="C#" Value="public bool IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Array.IsFixedSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFixedSize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3f755-1457"><see cref="T:System.Array" />의 크기가 고정되어 있는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1457">Gets a value indicating whether the <see cref="T:System.Array" /> has a fixed size.</span></span></summary>
        <value><span data-ttu-id="3f755-1458">이 속성은 모든 배열에 대해 항상 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1458">This property is always <see langword="true" /> for all arrays.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1459"><xref:System.Array> 구현 하는 <xref:System.Array.IsFixedSize%2A> 속성에 필요 하기 때문에 <xref:System.Collections.IList?displayProperty=nameWithType> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1459"><xref:System.Array> implements the <xref:System.Array.IsFixedSize%2A> property because it is required by the <xref:System.Collections.IList?displayProperty=nameWithType> interface.</span></span>  
  
 <span data-ttu-id="3f755-1460">크기가 고정된 된 배열을 배열을 만들 없지만 기존 요소는 수정할 수 있습니다 다음에 추가 하거나 제거할 요소의 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1460">An array with a fixed size does not allow the addition or removal of elements after the array is created, but it allows the modification of existing elements.</span></span>  
  
 <span data-ttu-id="3f755-1461">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1461">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="T:System.Collections.Generic.IList`1" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Array.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3f755-1462"><see cref="T:System.Array" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1462">Gets a value indicating whether the <see cref="T:System.Array" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="3f755-1463">이 속성은 모든 배열에 대해 항상 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1463">This property is always <see langword="false" /> for all arrays.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1464"><xref:System.Array> 구현 하는 <xref:System.Array.IsReadOnly%2A> 속성에 필요 하기 때문에 <xref:System.Collections.IList?displayProperty=nameWithType> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1464"><xref:System.Array> implements the <xref:System.Array.IsReadOnly%2A> property because it is required by the <xref:System.Collections.IList?displayProperty=nameWithType> interface.</span></span> <span data-ttu-id="3f755-1465">읽기 전용 배열을 배열의 만든 다음에 추가, 제거 또는 요소를 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1465">An array that is read-only does not allow the addition, removal, or modification of elements after the array is created.</span></span>  
  
 <span data-ttu-id="3f755-1466">읽기 전용 컬렉션에서는 필요한 경우 사용 된 <xref:System.Collections> 구현 하는 클래스는 <xref:System.Collections.IList?displayProperty=nameWithType> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1466">If you require a read-only collection, use a <xref:System.Collections> class that implements the <xref:System.Collections.IList?displayProperty=nameWithType> interface.</span></span>  
  
 <span data-ttu-id="3f755-1467">캐스팅 하거나를 변환 하는 경우는 <xref:System.Collections.IList> 인터페이스 개체는 <xref:System.Collections.IList.IsReadOnly%2A?displayProperty=nameWithType> 속성에서 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1467">If you cast or convert an array to an <xref:System.Collections.IList> interface object, the <xref:System.Collections.IList.IsReadOnly%2A?displayProperty=nameWithType> property returns `false`.</span></span> <span data-ttu-id="3f755-1468">그러나 캐스팅 하거나를 변환 하는 경우는 <xref:System.Collections.Generic.IList%601> 인터페이스는 `IsReadOnly` 속성에서 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1468">However, if you cast or convert an array to a <xref:System.Collections.Generic.IList%601> interface, the `IsReadOnly` property returns `true`.</span></span>  
  
 <span data-ttu-id="3f755-1469">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1469">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="N:System.Collections" />
        <altmember cref="T:System.Collections.Generic.IList`1" />
        <altmember cref="N:System.Collections.Generic" />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Array.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3f755-1470"><see cref="T:System.Array" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1470">Gets a value indicating whether access to the <see cref="T:System.Array" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="3f755-1471">이 속성은 모든 배열에 대해 항상 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1471">This property is always <see langword="false" /> for all arrays.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1472"><xref:System.Array> 구현 하는 <xref:System.Array.IsSynchronized%2A> 속성에 필요 하기 때문에 <xref:System.Collections.ICollection?displayProperty=nameWithType> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1472"><xref:System.Array> implements the <xref:System.Array.IsSynchronized%2A> property because it is required by the <xref:System.Collections.ICollection?displayProperty=nameWithType> interface.</span></span>  
  
 <span data-ttu-id="3f755-1473">.NET framework 클래스에 따라 <xref:System.Array> 사용 하 여 컬렉션의 동기화 된 버전 제공는 <xref:System.Array.SyncRoot%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1473">.NET Framework classes based on <xref:System.Array> provide their own synchronized version of the collection using the <xref:System.Array.SyncRoot%2A> property.</span></span>  
  
 <span data-ttu-id="3f755-1474">배열을 사용 하는 클래스를 사용 하 여 동기화 직접 구현할 수도 <xref:System.Array.SyncRoot%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1474">Classes that use arrays can also implement their own synchronization using the <xref:System.Array.SyncRoot%2A> property.</span></span> <span data-ttu-id="3f755-1475">동기화 하는 코드에서 작업을 수행 해야는 `SyncRoot` 컬렉션으로 만들어지므로 컬렉션의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1475">The synchronizing code must perform operations on the `SyncRoot` of the collection, not directly on the collection.</span></span> <span data-ttu-id="3f755-1476">이렇게 하면 다른 개체에서 파생되는 컬렉션에 대해 적절한 작업이 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1476">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="3f755-1477">특히, 컬렉션을 동시에 수정할 수 있는 다른 스레드와 적절 한 동기화를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1477">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection.</span></span> <span data-ttu-id="3f755-1478">일부 구현 <xref:System.Array.SyncRoot%2A> 를 반환할 수 있습니다는 <xref:System.Array> 자체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1478">Note that some implementations of <xref:System.Array.SyncRoot%2A> might return the <xref:System.Array> itself.</span></span>  
  
 <span data-ttu-id="3f755-1479">컬렉션을 열거 하는 스레드로부터 안전한 프로시저가 아닙니다 기본적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1479">Enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="3f755-1480">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1480">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="3f755-1481">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1481">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="3f755-1482">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1482">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1483">다음 코드 예제에 사용 하 여 열거 하는 동안 배열을 잠그는 방법을 보여 줍니다는 <xref:System.Array.SyncRoot%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1483">The following code example shows how to lock an array during the entire enumeration by using the <xref:System.Array.SyncRoot%2A> property.</span></span>  
  
 [!code-cpp[System.Array.SyncRoot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.SyncRoot/cpp/source.cpp#1)]
 [!code-csharp[System.Array.SyncRoot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.SyncRoot/cs/source.cs#1)]
 [!code-vb[System.Array.SyncRoot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.SyncRoot/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Array.SyncRoot" />
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3f755-1484">1차원 <see cref="T:System.Array" /> 또는 <see cref="T:System.Array" /> 일부에서 지정한 값과 마지막으로 일치하는 요소의 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1484">Returns the index of the last occurrence of a value in a one-dimensional <see cref="T:System.Array" /> or in a portion of the <see cref="T:System.Array" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public static int LastIndexOf (Array array, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOf(class System.Array array, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.LastIndexOf(System.Array,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int LastIndexOf(Array ^ array, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="3f755-1485">검색할 1차원 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1485">The one-dimensional <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="3f755-1486"><c>array</c>에서 찾을 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1486">The object to locate in <c>array</c>.</span></span></param>
        <summary><span data-ttu-id="3f755-1487">지정한 개체를 검색하여 전체 1차원 <see cref="T:System.Array" /> 내에서 마지막으로 검색된 값의 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1487">Searches for the specified object and returns the index of the last occurrence within the entire one-dimensional <see cref="T:System.Array" />.</span></span></summary>
        <returns><span data-ttu-id="3f755-1488">검색된 <paramref name="value" />가 있으면 <paramref name="array" /> 전체에서 마지막으로 검색된 값의 인덱스이고, 그렇지 않으면 배열의 하한에서 1을 뺀 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1488">The index of the last occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, the lower bound of the array minus 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1489">1 차원 <xref:System.Array> 뒤로 마지막 요소에서 시작 하 고 첫 번째 요소에서 끝나는 검색 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1489">The one-dimensional <xref:System.Array> is searched backward starting at the last element and ending at the first element.</span></span>  
  
 <span data-ttu-id="3f755-1490">요소를 사용 하 여 지정 된 값이 비교는 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1490">The elements are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3f755-1491">요소 형식이 비 내장 (사용자 정의 됨) 형식이 면는 `Equals` 해당 형식의 구현이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1491">If the element type is a nonintrinsic (user-defined) type, the `Equals` implementation of that type is used.</span></span>  
  
 <span data-ttu-id="3f755-1492">이 메서드는-1 경우에 일반적으로 반환 대부분 배열은 하한값 0, 이므로 `value` 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1492">Since most arrays will have a lower bound of zero, this method would generally return –1 when `value` is not found.</span></span> <span data-ttu-id="3f755-1493">배열의 하 한에 해당 하는 드문 경우 <xref:System.Int32.MinValue?displayProperty=nameWithType> 및 `value` 발견 되지 않으면이 메서드가 반환 <xref:System.Int32.MaxValue?displayProperty=nameWithType>, 즉 `System.Int32.MinValue - 1`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1493">In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=nameWithType> and `value` is not found, this method returns <xref:System.Int32.MaxValue?displayProperty=nameWithType>, which is `System.Int32.MinValue - 1`.</span></span>  
  
 <span data-ttu-id="3f755-1494">이 메서드는 O는 (`n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1494">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
 <span data-ttu-id="3f755-1495">이 메서드는.NET Framework 버전 2.0에서에서 다음을 사용 합니다.는 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 <xref:System.Array> 확인 하려면 여부는 <xref:System.Object> 에 지정 된는 `value` 매개 변수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1495">In the .NET Framework version 2.0, this method uses the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the <xref:System.Array> to determine whether the <xref:System.Object> specified by the `value` parameter exists.</span></span> <span data-ttu-id="3f755-1496">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 `value` <xref:System.Object> 자체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1496">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `value`<xref:System.Object> itself.</span></span>  
  
 <span data-ttu-id="3f755-1497"><xref:System.IComparable.CompareTo%2A> 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1497"><xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1498">다음 코드 예제에서는 배열에서 지정 된 요소 중 마지막 요소의 인덱스를 결정 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1498">The following code example shows how to determine the index of the last occurrence of a specified element in an array.</span></span>  
  
 [!code-cpp[Classic Array.LastIndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.LastIndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/CS/source.cs#1)]
 [!code-vb[Classic Array.LastIndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1499"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1499"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="3f755-1500"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1500"><paramref name="array" /> is multidimensional.</span></span></exception>
        <altmember cref="Overload:System.Array.IndexOf" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public static int LastIndexOf (Array array, object value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOf(class System.Array array, object value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int LastIndexOf(Array ^ array, System::Object ^ value, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="3f755-1501">검색할 1차원 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1501">The one-dimensional <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="3f755-1502"><c>array</c>에서 찾을 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1502">The object to locate in <c>array</c>.</span></span></param>
        <param name="startIndex"><span data-ttu-id="3f755-1503">뒤로 검색할 시작 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1503">The starting index of the backward search.</span></span></param>
        <summary><span data-ttu-id="3f755-1504">지정한 개체를 검색하여 첫 번째 요소에서 지정한 인덱스로 확장하는 1차원 <see cref="T:System.Array" />의 요소 범위에서 마지막으로 검색된 요소의 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1504">Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <see cref="T:System.Array" /> that extends from the first element to the specified index.</span></span></summary>
        <returns><span data-ttu-id="3f755-1505"><paramref name="value" />가 있을 경우 첫 번째 요소에서 <paramref name="array" />로 확장하는 <paramref name="startIndex" />의 요소 범위에서 마지막으로 검색된 값의 인덱스이고, 그렇지 않으면 배열의 하한에서 1을 뺀 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1505">The index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from the first element to <paramref name="startIndex" />, if found; otherwise, the lower bound of the array minus 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1506">1 차원 <xref:System.Array> 뒤로 검색 됩니다에 `startIndex` 첫 번째 요소의 끝입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1506">The one-dimensional <xref:System.Array> is searched backward starting at `startIndex` and ending at the first element.</span></span>  
  
 <span data-ttu-id="3f755-1507">요소를 사용 하 여 지정 된 값이 비교는 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1507">The elements are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3f755-1508">요소 형식이 비 내장 (사용자 정의 됨) 형식이 면는 `Equals` 해당 형식의 구현이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1508">If the element type is a nonintrinsic (user-defined) type, the `Equals` implementation of that type is used.</span></span>  
  
 <span data-ttu-id="3f755-1509">이 메서드는-1 경우에 일반적으로 반환 대부분 배열은 하한값 0, 이므로 `value` 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1509">Since most arrays will have a lower bound of zero, this method would generally return –1 when `value` is not found.</span></span> <span data-ttu-id="3f755-1510">배열의 하 한에 해당 하는 드문 경우 <xref:System.Int32.MinValue?displayProperty=nameWithType> 및 `value` 발견 되지 않으면이 메서드가 반환 <xref:System.Int32.MaxValue?displayProperty=nameWithType>, 즉 `System.Int32.MinValue - 1`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1510">In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=nameWithType> and `value` is not found, this method returns <xref:System.Int32.MaxValue?displayProperty=nameWithType>, which is `System.Int32.MinValue - 1`.</span></span>  
  
 <span data-ttu-id="3f755-1511">이 메서드는 O는 (`n`) 작업, 여기서 `n` 의 시작 부분에서 요소 수는 `array` 를 `startIndex`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1511">This method is an O(`n`) operation, where `n` is the number of elements from the beginning of `array` to `startIndex`.</span></span>  
  
 <span data-ttu-id="3f755-1512">이 메서드는.NET Framework 버전 2.0에서에서 다음을 사용 합니다.는 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 <xref:System.Array> 확인 하려면 여부는 <xref:System.Object> 에 지정 된는 `value` 매개 변수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1512">In the .NET Framework version 2.0, this method uses the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the <xref:System.Array> to determine whether the <xref:System.Object> specified by the `value` parameter exists.</span></span> <span data-ttu-id="3f755-1513">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 `value` <xref:System.Object> 자체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1513">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `value`<xref:System.Object> itself.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1514">다음 코드 예제에서는 배열에서 지정 된 요소 중 마지막 요소의 인덱스를 결정 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1514">The following code example shows how to determine the index of the last occurrence of a specified element in an array.</span></span>  
  
 [!code-cpp[Classic Array.LastIndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.LastIndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/CS/source.cs#1)]
 [!code-vb[Classic Array.LastIndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1515"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1515"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-1516"><paramref name="startIndex" />가 <paramref name="array" />의 유효한 인덱스 범위를 벗어납니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1516"><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="3f755-1517"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1517"><paramref name="array" /> is multidimensional.</span></span></exception>
        <altmember cref="Overload:System.Array.IndexOf" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public static int LastIndexOf (Array array, object value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOf(class System.Array array, object value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int LastIndexOf(Array ^ array, System::Object ^ value, int startIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="3f755-1518">검색할 1차원 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1518">The one-dimensional <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="3f755-1519"><c>array</c>에서 찾을 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1519">The object to locate in <c>array</c>.</span></span></param>
        <param name="startIndex"><span data-ttu-id="3f755-1520">뒤로 검색할 시작 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1520">The starting index of the backward search.</span></span></param>
        <param name="count"><span data-ttu-id="3f755-1521">검색할 섹션에 있는 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1521">The number of elements in the section to search.</span></span></param>
        <summary><span data-ttu-id="3f755-1522">지정한 개체를 검색하여 지정한 수의 요소를 포함하고 지정한 인덱스에서 끝나는 1차원 <see cref="T:System.Array" />의 요소 범위에서 마지막으로 검색된 요소의 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1522">Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.</span></span></summary>
        <returns><span data-ttu-id="3f755-1523"><paramref name="value" />가 있을 경우 <paramref name="array" />에서 지정한 수의 요소를 포함하고 <paramref name="count" />에서 끝나는 <paramref name="startIndex" />의 요소 범위에서 마지막으로 검색된 값의 인덱스이고, 그렇지 않으면 배열의 하한에서 1을 뺀 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1523">The index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that contains the number of elements specified in <paramref name="count" /> and ends at <paramref name="startIndex" />, if found; otherwise, the lower bound of the array minus 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1524">1 차원 <xref:System.Array> 뒤로 검색 됩니다에 `startIndex` 에서 끝나는 `startIndex` 뺀 `count` + 1, 경우 `count` 가 0 보다 크면 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1524">The one-dimensional <xref:System.Array> is searched backward starting at `startIndex` and ending at `startIndex` minus `count` plus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="3f755-1525">요소를 사용 하 여 지정 된 값이 비교는 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1525">The elements are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3f755-1526">요소 형식이 비 내장 (사용자 정의 됨) 형식이 면는`Equals` 해당 형식의 구현이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1526">If the element type is a nonintrinsic (user-defined) type, the`Equals` implementation of that type is used.</span></span>  
  
 <span data-ttu-id="3f755-1527">이 메서드는-1 경우에 일반적으로 반환 대부분 배열은 하한값 0, 이므로 `value` 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1527">Since most arrays will have a lower bound of zero, this method would generally return –1 when `value` is not found.</span></span> <span data-ttu-id="3f755-1528">배열의 하 한에 해당 하는 드문 경우 <xref:System.Int32.MinValue?displayProperty=nameWithType> 및 `value` 발견 되지 않으면이 메서드가 반환 <xref:System.Int32.MaxValue?displayProperty=nameWithType>, 즉 `System.Int32.MinValue - 1`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1528">In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=nameWithType> and `value` is not found, this method returns <xref:System.Int32.MaxValue?displayProperty=nameWithType>, which is `System.Int32.MinValue - 1`.</span></span>  
  
 <span data-ttu-id="3f755-1529">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 `count`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1529">This method is an O(`n`) operation, where `n` is `count`.</span></span>  
  
 <span data-ttu-id="3f755-1530">이 메서드는.NET Framework 버전 2.0에서에서 다음을 사용 합니다.는 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 <xref:System.Array> 확인 하려면 여부는 <xref:System.Object> 에 지정 된는 `value` 매개 변수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1530">In the .NET Framework version 2.0, this method uses the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the <xref:System.Array> to determine whether the <xref:System.Object> specified by the `value` parameter exists.</span></span> <span data-ttu-id="3f755-1531">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 `value` <xref:System.Object> 자체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1531">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `value`<xref:System.Object> itself.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1532">다음 코드 예제에서는 배열에서 지정 된 요소 중 마지막 요소의 인덱스를 결정 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1532">The following code example shows how to determine the index of the last occurrence of a specified element in an array.</span></span> <span data-ttu-id="3f755-1533"><xref:System.Array.LastIndexOf%2A> 메서드는 역방향 검색 이므로, `count` 보다 작거나 같음 (`startIndex` 1을 더한 배열의 하한값에서 뺀).</span><span class="sxs-lookup"><span data-stu-id="3f755-1533">Note that the <xref:System.Array.LastIndexOf%2A> method is a backward search; therefore, `count` must be less than or equal to (`startIndex` minus the lower bound of the array plus 1).</span></span>  
  
 [!code-cpp[Classic Array.LastIndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.LastIndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/CS/source.cs#1)]
 [!code-vb[Classic Array.LastIndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1534"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1534"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-1535"><paramref name="startIndex" />가 <paramref name="array" />의 유효한 인덱스 범위를 벗어납니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1535"><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="3f755-1536">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1536">-or-</span></span>  
  
 <span data-ttu-id="3f755-1537"><paramref name="count" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1537"><paramref name="count" /> is less than zero.</span></span>  
  
 <span data-ttu-id="3f755-1538">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1538">-or-</span></span>  
  
 <span data-ttu-id="3f755-1539"><paramref name="startIndex" /> 및 <paramref name="count" />가 <paramref name="array" />의 올바른 섹션을 지정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1539"><paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="3f755-1540"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1540"><paramref name="array" /> is multidimensional.</span></span></exception>
        <altmember cref="Overload:System.Array.IndexOf" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOf&lt;T&gt; (T[] array, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOf&lt;T&gt;(!!T[] array, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.LastIndexOf``1(``0[],``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LastIndexOf(Of T) (array As T(), value As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int LastIndexOf(cli::array &lt;T&gt; ^ array, T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-1541">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1541">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-1542">검색할 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1542">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="3f755-1543"><c>array</c>에서 찾을 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1543">The object to locate in <c>array</c>.</span></span></param>
        <summary><span data-ttu-id="3f755-1544">지정한 개체를 검색하여 전체 <see cref="T:System.Array" />에서 마지막으로 검색된 요소의 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1544">Searches for the specified object and returns the index of the last occurrence within the entire <see cref="T:System.Array" />.</span></span></summary>
        <returns><span data-ttu-id="3f755-1545"><paramref name="value" />가 있을 경우 <paramref name="array" /> 전체에서 마지막으로 검색된 값의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1545">The zero-based index of the last occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, –1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1546"><xref:System.Array> 뒤로 마지막 요소에서 시작 하 고 첫 번째 요소에서 끝나는 검색 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1546">The <xref:System.Array> is searched backward starting at the last element and ending at the first element.</span></span>  
  
 <span data-ttu-id="3f755-1547">요소를 사용 하 여 지정 된 값이 비교는 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1547">The elements are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3f755-1548">요소 형식이 비 내장 (사용자 정의 됨) 형식이 면는 `Equals` 해당 형식의 구현이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1548">If the element type is a nonintrinsic (user-defined) type, the `Equals` implementation of that type is used.</span></span>  
  
 <span data-ttu-id="3f755-1549">이 메서드는 O는 (`n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1549">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1550">다음 코드 예제 모두 세 개의 제네릭 오버 로드는 <xref:System.Array.LastIndexOf%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1550">The following code example demonstrates all three generic overloads of the <xref:System.Array.LastIndexOf%2A> method.</span></span> <span data-ttu-id="3f755-1551">문자열의 배열 인덱스 위치 0과 5 인덱스 위치에 두 번 나타나는 하나의 항목으로 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1551">An array of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="3f755-1552"><xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> 메서드 오버 로드에서 마지막으로 전체 배열 검색 하 고 문자열의 두 번째 항목을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1552">The <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> method overload searches the entire array from the end, and finds the second occurrence of the string.</span></span> <span data-ttu-id="3f755-1553"><xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> 메서드 오버 로드는 이전 버전과 시작 인덱스 위치 3 배열 및 배열를 통해서는 검색 하는 데 사용 되 고 문자열의 첫 번째 항목을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1553">The <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> method overload is used to search the array backward beginning with index location 3 and continuing to the beginning of the array, and finds the first occurrence of the string.</span></span> <span data-ttu-id="3f755-1554">마지막으로 <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29> 메서드 오버 로드는 네 개의 항목을 인덱스 위치 4에서 시작 하 고 뒤로 확장할 범위를 검색 하는 데 사용 됩니다 (즉, 검색 4, 3, 2 및 1 위치에 있는 항목); 검색의 인스턴스가 없는 때문에이 검색 – 1을 반환 해당 범위에는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1554">Finally, the <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[Array_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[Array_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_LastIndexOf/cs/source.cs#1)]
 [!code-vb[Array_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1555"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1555"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="Overload:System.Array.IndexOf" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOf&lt;T&gt; (T[] array, T value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOf&lt;T&gt;(!!T[] array, !!T value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LastIndexOf(Of T) (array As T(), value As T, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int LastIndexOf(cli::array &lt;T&gt; ^ array, T value, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="value" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-1556">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1556">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-1557">검색할 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1557">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="3f755-1558"><c>array</c>에서 찾을 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1558">The object to locate in <c>array</c>.</span></span></param>
        <param name="startIndex"><span data-ttu-id="3f755-1559">역방향 검색의 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1559">The zero-based starting index of the backward search.</span></span></param>
        <summary><span data-ttu-id="3f755-1560">지정한 개체를 검색하여 첫 번째 요소에서 지정한 인덱스로 확장하는 <see cref="T:System.Array" />의 요소 범위에서 마지막으로 검색된 요소의 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1560">Searches for the specified object and returns the index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the first element to the specified index.</span></span></summary>
        <returns><span data-ttu-id="3f755-1561"><paramref name="value" />가 있을 경우 첫 번째 요소에서 <paramref name="array" />로 확장하는 <paramref name="startIndex" />의 요소 범위에서 마지막으로 검색된 값의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1561">The zero-based index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from the first element to <paramref name="startIndex" />, if found; otherwise, –1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1562"><xref:System.Array> 뒤로 검색 됩니다에 `startIndex` 첫 번째 요소의 끝입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1562">The <xref:System.Array> is searched backward starting at `startIndex` and ending at the first element.</span></span>  
  
 <span data-ttu-id="3f755-1563">요소를 사용 하 여 지정 된 값이 비교는 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1563">The elements are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3f755-1564">요소 형식이 비 내장 (사용자 정의 됨) 형식이 면는 `Equals` 해당 형식의 구현이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1564">If the element type is a nonintrinsic (user-defined) type, the `Equals` implementation of that type is used.</span></span>  
  
 <span data-ttu-id="3f755-1565">이 메서드는 O는 (`n`) 작업, 여기서 `n` 의 시작 부분에서 요소 수는 `array` 를 `startIndex`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1565">This method is an O(`n`) operation, where `n` is the number of elements from the beginning of `array` to `startIndex`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1566">다음 코드 예제 모두 세 개의 제네릭 오버 로드는 <xref:System.Array.LastIndexOf%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1566">The following code example demonstrates all three generic overloads of the <xref:System.Array.LastIndexOf%2A> method.</span></span> <span data-ttu-id="3f755-1567">문자열의 배열 인덱스 위치 0과 5 인덱스 위치에 두 번 나타나는 하나의 항목으로 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1567">An array of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="3f755-1568"><xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> 메서드 오버 로드에서 마지막으로 전체 배열 검색 하 고 문자열의 두 번째 항목을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1568">The <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> method overload searches the entire array from the end, and finds the second occurrence of the string.</span></span> <span data-ttu-id="3f755-1569"><xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> 메서드 오버 로드는 이전 버전과 시작 인덱스 위치 3 배열 및 배열를 통해서는 검색 하는 데 사용 되 고 문자열의 첫 번째 항목을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1569">The <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> method overload is used to search the array backward beginning with index location 3 and continuing to the beginning of the array, and finds the first occurrence of the string.</span></span> <span data-ttu-id="3f755-1570">마지막으로 <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29> 메서드 오버 로드는 네 개의 항목을 인덱스 위치 4에서 시작 하 고 뒤로 확장할 범위를 검색 하는 데 사용 됩니다 (즉, 검색 4, 3, 2 및 1 위치에 있는 항목); 검색의 인스턴스가 없는 때문에이 검색 – 1을 반환 해당 범위에는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1570">Finally, the <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[Array_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[Array_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_LastIndexOf/cs/source.cs#1)]
 [!code-vb[Array_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1571"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1571"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-1572"><paramref name="startIndex" />가 <paramref name="array" />의 유효한 인덱스 범위를 벗어납니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1572"><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</span></span></exception>
        <altmember cref="Overload:System.Array.IndexOf" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int LastIndexOf&lt;T&gt; (T[] array, T value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 LastIndexOf&lt;T&gt;(!!T[] array, !!T value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LastIndexOf(Of T) (array As T(), value As T, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int LastIndexOf(cli::array &lt;T&gt; ^ array, T value, int startIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="value" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-1573">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1573">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-1574">검색할 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1574">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</span></span></param>
        <param name="value"><span data-ttu-id="3f755-1575"><c>array</c>에서 찾을 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1575">The object to locate in <c>array</c>.</span></span></param>
        <param name="startIndex"><span data-ttu-id="3f755-1576">역방향 검색의 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1576">The zero-based starting index of the backward search.</span></span></param>
        <param name="count"><span data-ttu-id="3f755-1577">검색할 섹션에 있는 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1577">The number of elements in the section to search.</span></span></param>
        <summary><span data-ttu-id="3f755-1578">지정한 개체를 검색하여 지정한 수의 요소를 포함하고 지정한 인덱스에서 끝나는 <see cref="T:System.Array" />의 요소 범위에서 마지막으로 검색된 요소의 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1578">Searches for the specified object and returns the index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.</span></span></summary>
        <returns><span data-ttu-id="3f755-1579"><paramref name="value" />가 있을 경우 <paramref name="array" />에서 지정한 수의 요소를 포함하고 <paramref name="count" />에서 끝나는 <paramref name="startIndex" />의 요소 범위에서 마지막으로 검색된 값의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1579">The zero-based index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that contains the number of elements specified in <paramref name="count" /> and ends at <paramref name="startIndex" />, if found; otherwise, –1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1580"><xref:System.Array> 뒤로 검색 됩니다에 `startIndex` 에서 끝나는 `startIndex` 뺀 `count` + 1, 경우 `count` 가 0 보다 크면 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1580">The <xref:System.Array> is searched backward starting at `startIndex` and ending at `startIndex` minus `count` plus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="3f755-1581">요소를 사용 하 여 지정 된 값이 비교는 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1581">The elements are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3f755-1582">요소 형식이 비 내장 (사용자 정의 됨) 형식이 면는 `Equals` 해당 형식의 구현이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1582">If the element type is a nonintrinsic (user-defined) type, the `Equals` implementation of that type is used.</span></span>  
  
 <span data-ttu-id="3f755-1583">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 `count`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1583">This method is an O(`n`) operation, where `n` is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1584">다음 코드 예제 모두 세 개의 제네릭 오버 로드는 <xref:System.Array.LastIndexOf%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-1584">The following code example demonstrates all three generic overloads of the <xref:System.Array.LastIndexOf%2A> method.</span></span> <span data-ttu-id="3f755-1585">문자열의 배열 인덱스 위치 0과 5 인덱스 위치에 두 번 나타나는 하나의 항목으로 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1585">An array of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="3f755-1586"><xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> 메서드 오버 로드에서 마지막으로 전체 배열 검색 하 고 문자열의 두 번째 항목을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1586">The <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%29> method overload searches the entire array from the end, and finds the second occurrence of the string.</span></span> <span data-ttu-id="3f755-1587"><xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> 메서드 오버 로드는 이전 버전과 시작 인덱스 위치 3 배열 및 배열를 통해서는 검색 하는 데 사용 되 고 문자열의 첫 번째 항목을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1587">The <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29> method overload is used to search the array backward beginning with index location 3 and continuing to the beginning of the array, and finds the first occurrence of the string.</span></span> <span data-ttu-id="3f755-1588">마지막으로 <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29> 메서드 오버 로드는 네 개의 항목을 인덱스 위치 4에서 시작 하 고 뒤로 확장할 범위를 검색 하는 데 사용 됩니다 (즉, 검색 4, 3, 2 및 1 위치에 있는 항목); 검색의 인스턴스가 없는 때문에이 검색 – 1을 반환 해당 범위에는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1588">Finally, the <xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[Array_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[Array_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_LastIndexOf/cs/source.cs#1)]
 [!code-vb[Array_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1589"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1589"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-1590"><paramref name="startIndex" />가 <paramref name="array" />의 유효한 인덱스 범위를 벗어납니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1590"><paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="3f755-1591">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1591">-or-</span></span>  
  
 <span data-ttu-id="3f755-1592"><paramref name="count" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1592"><paramref name="count" /> is less than zero.</span></span>  
  
 <span data-ttu-id="3f755-1593">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1593">-or-</span></span>  
  
 <span data-ttu-id="3f755-1594"><paramref name="startIndex" /> 및 <paramref name="count" />가 <paramref name="array" />의 올바른 섹션을 지정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1594"><paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</span></span></exception>
        <altmember cref="Overload:System.Array.IndexOf" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Array.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3f755-1595">모든 차원의 <see cref="T:System.Array" />에서 요소의 총수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1595">Gets the total number of elements in all the dimensions of the <see cref="T:System.Array" />.</span></span></summary>
        <value><span data-ttu-id="3f755-1596">모든 차원에서 요소의 총 수는 <see cref="T:System.Array" />; 배열에 요소가 있는 경우에 0입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1596">The total number of elements in all the dimensions of the <see cref="T:System.Array" />; zero if there are no elements in the array.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1597">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1597">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1598">다음 예제에서는 <xref:System.Array.Length%2A> 속성을 배열에서 요소의 총 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1598">The following example uses the                                 <xref:System.Array.Length%2A> property to get the total number of elements in an array.</span></span> <span data-ttu-id="3f755-1599">또한 사용 하 여는 <xref:System.Array.GetUpperBound%2A> 메서드 다차원 배열의 각 차원에 있는 요소의 수를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1599">It also uses the                                 <xref:System.Array.GetUpperBound%2A> method to determine the number of elements in each dimension of a multidimensional array.</span></span>  
  
 [!code-csharp[System.Array.Length#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.length/cs/length1.cs#1)]
 [!code-vb[System.Array.Length#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.length/vb/length1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="3f755-1600">배열이 다차원이고 <see cref="F:System.Int32.MaxValue" /> 요소보다 많이 포함된 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1600">The array is multidimensional and contains more than <see cref="F:System.Int32.MaxValue" /> elements.</span></span></exception>
        <altmember cref="M:System.Array.GetLength(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="P:System.Array.LongLength" />
        <altmember cref="P:System.Collections.ICollection.Count" />
        <altmember cref="P:System.Array.Rank" />
      </Docs>
    </Member>
    <Member MemberName="LongLength">
      <MemberSignature Language="C#" Value="public long LongLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 LongLength" />
      <MemberSignature Language="DocId" Value="P:System.Array.LongLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LongLength As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long LongLength { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3f755-1601"><see cref="T:System.Array" />의 모든 차원에 있는 요소의 총 수를 나타내는 64비트 정수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1601">Gets a 64-bit integer that represents the total number of elements in all the dimensions of the <see cref="T:System.Array" />.</span></span></summary>
        <value><span data-ttu-id="3f755-1602">모든 차원의 <see cref="T:System.Array" />에 있는 요소의 총 수를 나타내는 64비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1602">A 64-bit integer that represents the total number of elements in all the dimensions of the <see cref="T:System.Array" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1603">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1603">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Array.GetLongLength(System.Int32)" />
        <altmember cref="P:System.Array.Length" />
        <altmember cref="P:System.Collections.ICollection.Count" />
        <altmember cref="P:System.Array.Rank" />
      </Docs>
    </Member>
    <Member MemberName="Rank">
      <MemberSignature Language="C#" Value="public int Rank { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Rank" />
      <MemberSignature Language="DocId" Value="P:System.Array.Rank" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rank As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Rank { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3f755-1604"><see cref="T:System.Array" />의 순위(차원 수)를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1604">Gets the rank (number of dimensions) of the <see cref="T:System.Array" />.</span></span> <span data-ttu-id="3f755-1605">예를 들어, 1차원 배열은 1을 반환하고, 2차원 배열은 2를 반환하는 방식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1605">For example, a one-dimensional array returns 1, a two-dimensional array returns 2, and so on.</span></span></summary>
        <value><span data-ttu-id="3f755-1606"><see cref="T:System.Array" />의 순위(차원의 수)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1606">The rank (number of dimensions) of the <see cref="T:System.Array" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1607">예를 들어 Visual Basic 코드</span><span class="sxs-lookup"><span data-stu-id="3f755-1607">For example, the Visual Basic code</span></span>  
  
```  
Dim TDArray(0,0,0) As Integer  
```  
  
 <span data-ttu-id="3f755-1608">및 C# 코드</span><span class="sxs-lookup"><span data-stu-id="3f755-1608">and the C# code</span></span>  
  
```  
int[,,] TDArray = new int[1,1,1];  
```  
  
 <span data-ttu-id="3f755-1609">로 3 차원 배열을 만들기는 <xref:System.Array.Rank%2A> 속성 값이 3 인 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1609">create an array of three dimensions with a <xref:System.Array.Rank%2A> property whose value is 3.</span></span>  
  
 <span data-ttu-id="3f755-1610">가변된 배열 (배열의 배열)는 1 차원 배열입니다. 값을 해당 <xref:System.Array.Rank%2A> 속성은 1입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1610">A jagged array (an array of arrays) is a one-dimensional array; the value of its <xref:System.Array.Rank%2A> property is 1.</span></span>  
  
 <span data-ttu-id="3f755-1611">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1611">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1612">다음 예제에서는 1 차원 배열, 2 차원 배열 및 가변된 배열을 초기화 하 고 검색 된 <xref:System.Array.Rank%2A> 각 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1612">The following example initializes a one-dimensional array, a two-dimensional array, and a jagged array, and retrieves the <xref:System.Array.Rank%2A> property of each.</span></span>  
  
 [!code-csharp[System.Array.Rank#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.rank/cs/rank1.cs#1)]
 [!code-vb[System.Array.Rank#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.rank/vb/rank1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Array.Length" />
        <altmember cref="M:System.Array.GetLength(System.Int32)" />
        <altmember cref="P:System.Array.LongLength" />
        <altmember cref="M:System.Array.GetLongLength(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Resize&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Resize&lt;T&gt; (ref T[] array, int newSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Resize&lt;T&gt;(!!T[]&amp; array, int32 newSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Resize``1(``0[]@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Resize(Of T) (ByRef array As T(), newSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Resize(cli::array &lt;T&gt; ^ % array, int newSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]&amp;" RefType="ref" />
        <Parameter Name="newSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-1613">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1613">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-1614">크기를 조정할 1차원 배열(0부터 시작)이거나 지정한 크기로 새 배열을 만들 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1614">The one-dimensional, zero-based array to resize, or <see langword="null" /> to create a new array with the specified size.</span></span></param>
        <param name="newSize"><span data-ttu-id="3f755-1615">새 배열의 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1615">The size of the new array.</span></span></param>
        <summary><span data-ttu-id="3f755-1616">1차원 배열의 요소 수를 지정된 새로운 크기로 변경합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1616">Changes the number of elements of a one-dimensional array to the specified new size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1617">이 메서드 지정한 크기로 새 배열을 할당 하 고, 새 레코드로 이전 배열에서 요소를 복사, 한 다음 새 항목으로 이전 배열을 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1617">This method allocates a new array with the specified size, copies elements from the old array to the new one, and then replaces the old array with the new one.</span></span> <span data-ttu-id="3f755-1618">`array` 1 차원 배열 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1618">`array` must be a one-dimensional array.</span></span>  
  
 <span data-ttu-id="3f755-1619">경우 `array` 은 `null`,이 메서드는 지정 된 크기로 새 배열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1619">If `array` is `null`, this method creates a new array with the specified size.</span></span>  
  
 <span data-ttu-id="3f755-1620">경우 `newSize` 보다 크면는 <xref:System.Array.Length%2A> 이전 배열의 새 배열을 할당 되 고 요소를 모두 새로운 이전 배열에서 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1620">If `newSize` is greater than the <xref:System.Array.Length%2A> of the old array, a new array is allocated and all the elements are copied from the old array to the new one.</span></span>  <span data-ttu-id="3f755-1621">경우 `newSize` 는 보다 작은 <xref:System.Array.Length%2A> 이전 배열의 새 배열을 할당 하 고 요소가 복사 되 고 이전 배열에서 새로운 새 채워질 때까지 이전 배열에 있는 요소의 나머지는 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1621">If `newSize` is less than the <xref:System.Array.Length%2A> of the old array, a new array is allocated and elements are copied from the old array to the new one until the new one is filled; the rest of the elements in the old array are ignored.</span></span>  <span data-ttu-id="3f755-1622">경우 `newSize` 같은지는 <xref:System.Array.Length%2A> 이전 배열의이 메서드는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1622">If `newSize` is equal to the <xref:System.Array.Length%2A> of the old array, this method does nothing.</span></span>  
  
 <span data-ttu-id="3f755-1623">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 `newSize`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1623">This method is an O(`n`) operation, where `n` is `newSize`.</span></span>  
  
 <span data-ttu-id="3f755-1624"><xref:System.Array.Resize%2A> 메서드는 1 차원 배열 크기를 조정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1624">The <xref:System.Array.Resize%2A> method resizes a one-dimensional array only.</span></span> <span data-ttu-id="3f755-1625"><xref:System.Array> 클래스는 다차원 배열 크기 조정에 대 한 메서드는 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1625">The <xref:System.Array> class does not include a method for resizing multi-dimensional arrays.</span></span> <span data-ttu-id="3f755-1626">이 수행 하려면 사용자 고유의 코드를 제공 하거나 타사 라이브러리의 특수 한 용도의 메서드를 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1626">To do this, you must either provide your own code or call a special-purpose method in a third-party library.</span></span> <span data-ttu-id="3f755-1627">다음 코드에서는의 배열 크기를 조정 하는 방법에 대 한 구현 *n* 차원.</span><span class="sxs-lookup"><span data-stu-id="3f755-1627">The following code illustrates one possible implementation for a method that resizes an array of *n* dimensions.</span></span>  
  
 [!code-csharp[System.Array.Resize#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Resize/CS/resizexd.cs#2)]
 [!code-vb[System.Array.Resize#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Resize/VB/resizexd.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1628">다음 예제에서는 크기 조정 배열에 미치는 영향</span><span class="sxs-lookup"><span data-stu-id="3f755-1628">The following example shows how resizing affects the array.</span></span>  
  
 [!code-cpp[System.Array.Resize#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Resize/CPP/System.Array.Resize.cpp#1)]
 [!code-csharp[System.Array.Resize#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Resize/CS/arrayresize.cs#1)]
 [!code-vb[System.Array.Resize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Resize/VB/arrayresize.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-1629"><paramref name="newSize" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1629"><paramref name="newSize" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Reverse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3f755-1630">1차원 <see cref="T:System.Array" /> 또는 <see cref="T:System.Array" />의 일부에 있는 요소의 순서를 역순으로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1630">Reverses the order of the elements in a one-dimensional <see cref="T:System.Array" /> or in a portion of the <see cref="T:System.Array" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public static void Reverse (Array array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Reverse(class System.Array array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Reverse(System.Array)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reverse(Array ^ array);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="3f755-1631">순서를 바꿀 1차원 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1631">The one-dimensional <see cref="T:System.Array" /> to reverse.</span></span></param>
        <summary><span data-ttu-id="3f755-1632">1차원 <see cref="T:System.Array" /> 전체에 있는 요소의 시퀀스를 역순으로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1632">Reverses the sequence of the elements in the entire one-dimensional <see cref="T:System.Array" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1633">요소에이 메서드를 호출한 후 `myArray[i]`여기서 `i` 는 배열에서 인덱스를 이동, `myArray[j]`여기서 `j` equals `(myArray.Length + myArray.GetLowerBound(0)) - (i - myArray.GetLowerBound(0)) - 1`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1633">After a call to this method, the element at `myArray[i]`, where `i` is any index in the array, moves to `myArray[j]`, where `j` equals `(myArray.Length + myArray.GetLowerBound(0)) - (i - myArray.GetLowerBound(0)) - 1`.</span></span>  
  
 <span data-ttu-id="3f755-1634">이 메서드는 O는 (`n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1634">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
 <span data-ttu-id="3f755-1635">다음 예제와 같이 <xref:System.Array.Reverse%2A> 가변된 배열이 되돌리려면 메서드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1635">As the following example shows, the <xref:System.Array.Reverse%2A> method can be used to reverse a jagged array.</span></span> <span data-ttu-id="3f755-1636">현재 문화권의 달력에서 현재 연도의 각 달에 하나의 요소가 표시 된 가변된 배열을 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1636">It initializes a jagged array with one element for each month of the current year in the current culture's calendar.</span></span> <span data-ttu-id="3f755-1637">각 요소는 해당 월의 일 수 만큼의 요소와 배열이 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1637">Each element contains an array with as many elements as that month has days.</span></span> <span data-ttu-id="3f755-1638">이 예제에서는 배열, 호출의 내용을 표시는 <xref:System.Array.Reverse%2A> 메서드 및 역방향 배열의 내용 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1638">The example displays the contents of the array, calls the <xref:System.Array.Reverse%2A> method, and then displays the contents of the reversed array.</span></span>  
  
 [!code-csharp[System.Array.Reverse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.reverse/cs/reversejagged.cs#1)]
 [!code-vb[System.Array.Reverse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.reverse/vb/reversejagged.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1639">다음 코드 예제에 있는 값의 정렬 순서 반대로 바꾸는 방법을 보여 줍니다.는 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1639">The following code example shows how to reverse the sort of the values in an <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Array.Reverse Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.Reverse Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.Reverse Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.Reverse Example/CS/source.cs#1)]
 [!code-vb[Classic Array.Reverse Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.Reverse Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1640"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1640"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="3f755-1641"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1641"><paramref name="array" /> is multidimensional.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public static void Reverse (Array array, int index, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Reverse(class System.Array array, int32 index, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Reverse(System.Array,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reverse(Array ^ array, int index, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="3f755-1642">순서를 바꿀 1차원 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1642">The one-dimensional <see cref="T:System.Array" /> to reverse.</span></span></param>
        <param name="index"><span data-ttu-id="3f755-1643">순서를 바꿀 섹션의 시작 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1643">The starting index of the section to reverse.</span></span></param>
        <param name="length"><span data-ttu-id="3f755-1644">순서를 바꿀 섹션에 있는 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1644">The number of elements in the section to reverse.</span></span></param>
        <summary><span data-ttu-id="3f755-1645">1차원 <see cref="T:System.Array" />의 요소 범위에 있는 요소의 시퀀스를 역순으로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1645">Reverses the sequence of the elements in a range of elements in the one-dimensional <see cref="T:System.Array" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1646">요소에이 메서드를 호출한 후 `myArray[i]`여기서 `i` 는 배열에서 인덱스를 이동, `myArray[j]`여기서 `j` equals `(myArray.Length + myArray.GetLowerBound(0)) - (i - myArray.GetLowerBound(0)) - 1`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1646">After a call to this method, the element at `myArray[i]`, where `i` is any index in the array, moves to `myArray[j]`, where `j` equals `(myArray.Length + myArray.GetLowerBound(0)) - (i - myArray.GetLowerBound(0)) - 1`.</span></span>  
  
 <span data-ttu-id="3f755-1647"><xref:System.Array.Reverse%2A> 가변된 배열이 되돌리려면 메서드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1647">The <xref:System.Array.Reverse%2A> method can be used to reverse a jagged array.</span></span>  
  
 <span data-ttu-id="3f755-1648">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1648">This method is an O(`n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1649">다음 코드 예제에 있는 요소의 범위에 있는 값의 정렬 순서 반대로 바꾸는 방법을 보여 줍니다.는 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1649">The following code example shows how to reverse the sort of the values in a range of elements in an <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic Array.Reverse1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Array.Reverse1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Array.Reverse1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Array.Reverse1 Example/CS/source.cs#1)]
 [!code-vb[Classic Array.Reverse1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Array.Reverse1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1650"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1650"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="3f755-1651"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1651"><paramref name="array" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-1652"><paramref name="index" />가 <paramref name="array" />의 하한값보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1652"><paramref name="index" /> is less than the lower bound of <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="3f755-1653">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1653">-or-</span></span>  
  
 <span data-ttu-id="3f755-1654"><paramref name="length" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1654"><paramref name="length" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-1655"><paramref name="index" /> 및 <paramref name="length" />가 <paramref name="array" />의 올바른 범위를 지정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1655"><paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reverse&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Reverse&lt;T&gt; (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Reverse&lt;T&gt;(!!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Reverse``1(``0[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Reverse(Of T) (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Reverse(cli::array &lt;T&gt; ^ array);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="array">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Reverse&lt;T&gt; (T[] array, int index, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Reverse&lt;T&gt;(!!T[] array, int32 index, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Reverse``1(``0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Reverse(Of T) (array As T(), index As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Reverse(cli::array &lt;T&gt; ^ array, int index, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="array">To be added.</param>
        <param name="index">To be added.</param>
        <param name="length">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3f755-1656">현재 <see cref="T:System.Array" />의 지정한 요소를 지정한 값으로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1656">Sets the specified element in the current <see cref="T:System.Array" /> to the specified value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.SetValue(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object, index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3f755-1657">지정한 요소의 새 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1657">The new value for the specified element.</span></span></param>
        <param name="index"><span data-ttu-id="3f755-1658">설정할 <see cref="T:System.Array" /> 요소의 위치를 나타내는 32비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1658">A 32-bit integer that represents the position of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <summary><span data-ttu-id="3f755-1659">값을 1차원 <see cref="T:System.Array" />에 있는 지정한 위치의 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1659">Sets a value to the element at the specified position in the one-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="3f755-1660">인덱스가 32비트 정수로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1660">The index is specified as a 32-bit integer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1661"><xref:System.Array.GetLowerBound%2A> 및 <xref:System.Array.GetUpperBound%2A> 메서드를 확인할 수 있는지 여부를 값 `index` 범위를 벗어났습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1661">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether the value of `index` is out of bounds.</span></span>  
  
 <span data-ttu-id="3f755-1662">변환에 대 한 자세한 내용은 참조 <xref:System.Convert>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1662">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
 <span data-ttu-id="3f755-1663">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="3f755-1663">This method is an O(1) operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-1664">경우 <xref:System.Array.SetValue%2A> 할당 하는 데 사용 되 `null` 값 형식의 배열 요소에는 요소의 모든 필드가 0으로 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1664">If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero.</span></span> <span data-ttu-id="3f755-1665">요소의 값은 null 참조가 아니며 null 참조를 검색 하 여 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1665">The value of the element is not a null reference, and cannot be found by searching for a null reference.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1666">다음 코드 예제에는 설정 하 고 1 차원 또는 다차원 배열에 특정 값을 가져오는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1666">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3f755-1667">현재 <see cref="T:System.Array" />에 1차원이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1667">The current <see cref="T:System.Array" /> does not have exactly one dimension.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="3f755-1668"><paramref name="value" />를 <see cref="T:System.Array" />의 요소 형식으로 캐스팅할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1668"><paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="3f755-1669"><paramref name="index" />가 현재 <see cref="T:System.Array" />의 올바른 인덱스 범위 밖에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1669"><paramref name="index" /> is outside the range of valid indexes for the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.GetValue" />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value, params int[] indices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value, int32[] indices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.SetValue(System.Object,System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object, ParamArray indices As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value, ... cli::array &lt;int&gt; ^ indices);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="indices" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3f755-1670">지정한 요소의 새 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1670">The new value for the specified element.</span></span></param>
        <param name="indices"><span data-ttu-id="3f755-1671">설정할 요소의 위치를 지정하는 인덱스를 나타내는 32비트 정수의 1차원 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1671">A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the element to set.</span></span></param>
        <summary><span data-ttu-id="3f755-1672">값을 다차원 <see cref="T:System.Array" />에 있는 지정한 위치의 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1672">Sets a value to the element at the specified position in the multidimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="3f755-1673">인덱스가 32비트 정수 배열로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1673">The indexes are specified as an array of 32-bit integers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1674">요소 수가 `indices` 차원 수와 같아야는 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1674">The number of elements in `indices` must equal the number of dimensions in the <xref:System.Array>.</span></span> <span data-ttu-id="3f755-1675">모든 요소는 `indices` 는 다차원 배열 원하는 요소의 위치를 전체적으로 지정 해야 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1675">All elements in the `indices` array must collectively specify the position of the desired element in the multidimensional <xref:System.Array>.</span></span>  
  
 <span data-ttu-id="3f755-1676"><xref:System.Array.GetLowerBound%2A> 및 <xref:System.Array.GetUpperBound%2A> 메서드에 있는 값의 어느 것인지 확인 수는 `indices` 배열 범위를 벗어났습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1676">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the values in the `indices` array is out of bounds.</span></span>  
  
 <span data-ttu-id="3f755-1677">변환에 대 한 자세한 내용은 참조 <xref:System.Convert>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1677">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
 <span data-ttu-id="3f755-1678">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="3f755-1678">This method is an O(1) operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-1679">경우 <xref:System.Array.SetValue%2A> 할당 하는 데 사용 되 `null` 값 형식의 배열 요소에는 요소의 모든 필드가 0으로 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1679">If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero.</span></span> <span data-ttu-id="3f755-1680">요소의 값은 null 참조가 아니며 null 참조를 검색 하 여 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1680">The value of the element is not a null reference, and cannot be found by searching for a null reference.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1681">다음 코드 예제에는 설정 하 고 1 차원 또는 다차원 배열에 특정 값을 가져오는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1681">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1682"><paramref name="indices" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1682"><paramref name="indices" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3f755-1683">현재 <see cref="T:System.Array" />의 차수가 <paramref name="indices" />에 있는 요소 수와 다른 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1683">The number of dimensions in the current <see cref="T:System.Array" /> is not equal to the number of elements in <paramref name="indices" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="3f755-1684"><paramref name="value" />를 <see cref="T:System.Array" />의 요소 형식으로 캐스팅할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1684"><paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="3f755-1685"><paramref name="indices" />의 요소가 현재 <see cref="T:System.Array" />의 해당 차원에 대한 올바른 인덱스 범위 밖에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1685">Any element in <paramref name="indices" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.GetValue" />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value, long index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value, int64 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.SetValue(System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object, index As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value, long index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="index" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3f755-1686">지정한 요소의 새 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1686">The new value for the specified element.</span></span></param>
        <param name="index"><span data-ttu-id="3f755-1687">설정할 <see cref="T:System.Array" /> 요소의 위치를 나타내는 64비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1687">A 64-bit integer that represents the position of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <summary><span data-ttu-id="3f755-1688">값을 1차원 <see cref="T:System.Array" />에 있는 지정한 위치의 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1688">Sets a value to the element at the specified position in the one-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="3f755-1689">인덱스가 64비트 정수로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1689">The index is specified as a 64-bit integer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1690"><xref:System.Array.GetLowerBound%2A> 및 <xref:System.Array.GetUpperBound%2A> 메서드를 확인할 수 있는지 여부를 값 `index` 범위를 벗어났습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1690">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether the value of `index` is out of bounds.</span></span>  
  
 <span data-ttu-id="3f755-1691">변환에 대 한 자세한 내용은 참조 <xref:System.Convert>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1691">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
 <span data-ttu-id="3f755-1692">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="3f755-1692">This method is an O(1) operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-1693">경우 <xref:System.Array.SetValue%2A> 할당 하는 데 사용 되 `null` 값 형식의 배열 요소에는 요소의 모든 필드가 0으로 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1693">If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero.</span></span> <span data-ttu-id="3f755-1694">요소의 값은 null 참조가 아니며 null 참조를 검색 하 여 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1694">The value of the element is not a null reference, and cannot be found by searching for a null reference.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1695">다음 코드 예제에는 설정 하 고 1 차원 또는 다차원 배열에 특정 값을 가져오는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1695">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3f755-1696">현재 <see cref="T:System.Array" />에 1차원이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1696">The current <see cref="T:System.Array" /> does not have exactly one dimension.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="3f755-1697"><paramref name="value" />를 <see cref="T:System.Array" />의 요소 형식으로 캐스팅할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1697"><paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-1698"><paramref name="index" />가 현재 <see cref="T:System.Array" />의 올바른 인덱스 범위 밖에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1698"><paramref name="index" /> is outside the range of valid indexes for the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.GetValue" />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value, params long[] indices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value, int64[] indices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.SetValue(System.Object,System.Int64[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object, ParamArray indices As Long())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value, ... cli::array &lt;long&gt; ^ indices);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="indices" Type="System.Int64[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3f755-1699">지정한 요소의 새 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1699">The new value for the specified element.</span></span></param>
        <param name="indices"><span data-ttu-id="3f755-1700">설정할 요소의 위치를 지정하는 인덱스를 나타내는 64비트 정수의 1차원 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1700">A one-dimensional array of 64-bit integers that represent the indexes specifying the position of the element to set.</span></span></param>
        <summary><span data-ttu-id="3f755-1701">값을 다차원 <see cref="T:System.Array" />에 있는 지정한 위치의 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1701">Sets a value to the element at the specified position in the multidimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="3f755-1702">인덱스가 64비트 정수 배열로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1702">The indexes are specified as an array of 64-bit integers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1703">요소 수가 `indices` 차원 수와 같아야는 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1703">The number of elements in `indices` must equal the number of dimensions in the <xref:System.Array>.</span></span> <span data-ttu-id="3f755-1704">모든 요소는 `indices` 는 다차원 배열 원하는 요소의 위치를 전체적으로 지정 해야 <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1704">All elements in the `indices` array must collectively specify the position of the desired element in the multidimensional <xref:System.Array>.</span></span>  
  
 <span data-ttu-id="3f755-1705"><xref:System.Array.GetLowerBound%2A> 및 <xref:System.Array.GetUpperBound%2A> 메서드에 있는 값의 어느 것인지 확인 수는 `indices` 배열 범위를 벗어났습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1705">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the values in the `indices` array is out of bounds.</span></span>  
  
 <span data-ttu-id="3f755-1706">변환에 대 한 자세한 내용은 참조 <xref:System.Convert>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1706">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
 <span data-ttu-id="3f755-1707">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="3f755-1707">This method is an O(1) operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-1708">경우 <xref:System.Array.SetValue%2A> 할당 하는 데 사용 되 `null` 값 형식의 배열 요소에는 요소의 모든 필드가 0으로 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1708">If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero.</span></span> <span data-ttu-id="3f755-1709">요소의 값은 null 참조가 아니며 null 참조를 검색 하 여 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1709">The value of the element is not a null reference, and cannot be found by searching for a null reference.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1710">다음 코드 예제에는 설정 하 고 1 차원 또는 다차원 배열에 특정 값을 가져오는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1710">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1711"><paramref name="indices" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1711"><paramref name="indices" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3f755-1712">현재 <see cref="T:System.Array" />의 차수가 <paramref name="indices" />에 있는 요소 수와 다른 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1712">The number of dimensions in the current <see cref="T:System.Array" /> is not equal to the number of elements in <paramref name="indices" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="3f755-1713"><paramref name="value" />를 <see cref="T:System.Array" />의 요소 형식으로 캐스팅할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1713"><paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3f755-1714"><paramref name="indices" />의 요소가 현재 <see cref="T:System.Array" />의 해당 차원에 대한 올바른 인덱스 범위 밖에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1714">Any element in <paramref name="indices" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.GetValue" />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value, int index1, int index2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value, int32 index1, int32 index2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.SetValue(System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object, index1 As Integer, index2 As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value, int index1, int index2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="index1" Type="System.Int32" />
        <Parameter Name="index2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3f755-1715">지정한 요소의 새 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1715">The new value for the specified element.</span></span></param>
        <param name="index1"><span data-ttu-id="3f755-1716">설정할 <see cref="T:System.Array" /> 요소의 첫 번째 차원 인덱스를 나타내는 32비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1716">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <param name="index2"><span data-ttu-id="3f755-1717">설정할 <see cref="T:System.Array" /> 요소의 두 번째 차원 인덱스를 나타내는 32비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1717">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <summary><span data-ttu-id="3f755-1718">값을 이차원 <see cref="T:System.Array" />에 있는 지정한 위치의 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1718">Sets a value to the element at the specified position in the two-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="3f755-1719">인덱스가 32비트 정수로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1719">The indexes are specified as 32-bit integers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1720"><xref:System.Array.GetLowerBound%2A> 및 <xref:System.Array.GetUpperBound%2A> 메서드 범위를 벗어난 인덱스 중 하나 인지 여부를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1720">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.</span></span>  
  
 <span data-ttu-id="3f755-1721">변환에 대 한 자세한 내용은 참조 <xref:System.Convert>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1721">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
 <span data-ttu-id="3f755-1722">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="3f755-1722">This method is an O(1) operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-1723">경우 <xref:System.Array.SetValue%2A> 할당 하는 데 사용 되 `null` 값 형식의 배열 요소에는 요소의 모든 필드가 0으로 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1723">If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero.</span></span> <span data-ttu-id="3f755-1724">요소의 값은 null 참조가 아니며 null 참조를 검색 하 여 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1724">The value of the element is not a null reference, and cannot be found by searching for a null reference.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1725">다음 코드 예제에는 설정 하 고 1 차원 또는 다차원 배열에 특정 값을 가져오는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1725">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3f755-1726">현재 <see cref="T:System.Array" />에 이차원이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1726">The current <see cref="T:System.Array" /> does not have exactly two dimensions.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="3f755-1727"><paramref name="value" />를 <see cref="T:System.Array" />의 요소 형식으로 캐스팅할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1727"><paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="3f755-1728"><paramref name="index1" /> 또는 <paramref name="index2" />가 현재 <see cref="T:System.Array" />의 해당 차원에 대한 올바른 인덱스 범위 밖에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1728">Either <paramref name="index1" /> or <paramref name="index2" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.GetValue" />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value, long index1, long index2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value, int64 index1, int64 index2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.SetValue(System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object, index1 As Long, index2 As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value, long index1, long index2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="index1" Type="System.Int64" />
        <Parameter Name="index2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3f755-1729">지정한 요소의 새 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1729">The new value for the specified element.</span></span></param>
        <param name="index1"><span data-ttu-id="3f755-1730">설정할 <see cref="T:System.Array" /> 요소의 첫 번째 차원 인덱스를 나타내는 64비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1730">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <param name="index2"><span data-ttu-id="3f755-1731">설정할 <see cref="T:System.Array" /> 요소의 두 번째 차원 인덱스를 나타내는 64비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1731">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <summary><span data-ttu-id="3f755-1732">값을 이차원 <see cref="T:System.Array" />에 있는 지정한 위치의 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1732">Sets a value to the element at the specified position in the two-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="3f755-1733">인덱스가 64비트 정수로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1733">The indexes are specified as 64-bit integers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1734"><xref:System.Array.GetLowerBound%2A> 및 <xref:System.Array.GetUpperBound%2A> 메서드 범위를 벗어난 인덱스 중 하나 인지 여부를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1734">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.</span></span>  
  
 <span data-ttu-id="3f755-1735">변환에 대 한 자세한 내용은 참조 <xref:System.Convert>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1735">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
 <span data-ttu-id="3f755-1736">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="3f755-1736">This method is an O(1) operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-1737">경우 <xref:System.Array.SetValue%2A> 할당 하는 데 사용 되 `null` 값 형식의 배열 요소에는 요소의 모든 필드가 0으로 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1737">If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero.</span></span> <span data-ttu-id="3f755-1738">요소의 값은 null 참조가 아니며 null 참조를 검색 하 여 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1738">The value of the element is not a null reference, and cannot be found by searching for a null reference.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1739">다음 코드 예제에는 설정 하 고 1 차원 또는 다차원 배열에 특정 값을 가져오는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1739">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3f755-1740">현재 <see cref="T:System.Array" />에 이차원이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1740">The current <see cref="T:System.Array" /> does not have exactly two dimensions.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="3f755-1741"><paramref name="value" />를 <see cref="T:System.Array" />의 요소 형식으로 캐스팅할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1741"><paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3f755-1742"><paramref name="index1" /> 또는 <paramref name="index2" />가 현재 <see cref="T:System.Array" />의 해당 차원에 대한 올바른 인덱스 범위 밖에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1742">Either <paramref name="index1" /> or <paramref name="index2" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.GetValue" />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value, int index1, int index2, int index3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value, int32 index1, int32 index2, int32 index3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.SetValue(System.Object,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object, index1 As Integer, index2 As Integer, index3 As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value, int index1, int index2, int index3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="index1" Type="System.Int32" />
        <Parameter Name="index2" Type="System.Int32" />
        <Parameter Name="index3" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3f755-1743">지정한 요소의 새 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1743">The new value for the specified element.</span></span></param>
        <param name="index1"><span data-ttu-id="3f755-1744">설정할 <see cref="T:System.Array" /> 요소의 첫 번째 차원 인덱스를 나타내는 32비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1744">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <param name="index2"><span data-ttu-id="3f755-1745">설정할 <see cref="T:System.Array" /> 요소의 두 번째 차원 인덱스를 나타내는 32비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1745">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <param name="index3"><span data-ttu-id="3f755-1746">설정할 <see cref="T:System.Array" /> 요소의 세 번째 차원 인덱스를 나타내는 32비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1746">A 32-bit integer that represents the third-dimension index of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <summary><span data-ttu-id="3f755-1747">값을 삼차원 <see cref="T:System.Array" />에 있는 지정한 위치의 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1747">Sets a value to the element at the specified position in the three-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="3f755-1748">인덱스가 32비트 정수로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1748">The indexes are specified as 32-bit integers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1749"><xref:System.Array.GetLowerBound%2A> 및 <xref:System.Array.GetUpperBound%2A> 메서드 범위를 벗어난 인덱스 중 하나 인지 여부를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1749">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.</span></span>  
  
 <span data-ttu-id="3f755-1750">변환에 대 한 자세한 내용은 참조 <xref:System.Convert>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1750">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
 <span data-ttu-id="3f755-1751">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="3f755-1751">This method is an O(1) operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-1752">경우 <xref:System.Array.SetValue%2A> 할당 하는 데 사용 되 `null` 값 형식의 배열 요소에는 요소의 모든 필드가 0으로 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1752">If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero.</span></span> <span data-ttu-id="3f755-1753">요소의 값은 null 참조가 아니며 null 참조를 검색 하 여 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1753">The value of the element is not a null reference, and cannot be found by searching for a null reference.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1754">다음 코드 예제에는 설정 하 고 1 차원 또는 다차원 배열에 특정 값을 가져오는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1754">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3f755-1755">현재 <see cref="T:System.Array" />에 삼차원이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1755">The current <see cref="T:System.Array" /> does not have exactly three dimensions.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="3f755-1756"><paramref name="value" />를 <see cref="T:System.Array" />의 요소 형식으로 캐스팅할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1756"><paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="3f755-1757"><paramref name="index1" />, <paramref name="index2" /> 또는 <paramref name="index3" />이 현재 <see cref="T:System.Array" />의 해당 차원에 대한 올바른 인덱스 범위 밖에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1757"><paramref name="index1" /> or <paramref name="index2" /> or <paramref name="index3" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.GetValue" />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value, long index1, long index2, long index3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value, int64 index1, int64 index2, int64 index3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.SetValue(System.Object,System.Int64,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object, index1 As Long, index2 As Long, index3 As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value, long index1, long index2, long index3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="index1" Type="System.Int64" />
        <Parameter Name="index2" Type="System.Int64" />
        <Parameter Name="index3" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3f755-1758">지정한 요소의 새 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1758">The new value for the specified element.</span></span></param>
        <param name="index1"><span data-ttu-id="3f755-1759">설정할 <see cref="T:System.Array" /> 요소의 첫 번째 차원 인덱스를 나타내는 64비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1759">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <param name="index2"><span data-ttu-id="3f755-1760">설정할 <see cref="T:System.Array" /> 요소의 두 번째 차원 인덱스를 나타내는 64비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1760">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <param name="index3"><span data-ttu-id="3f755-1761">설정할 <see cref="T:System.Array" /> 요소의 세 번째 차원 인덱스를 나타내는 64비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1761">A 64-bit integer that represents the third-dimension index of the <see cref="T:System.Array" /> element to set.</span></span></param>
        <summary><span data-ttu-id="3f755-1762">값을 삼차원 <see cref="T:System.Array" />에 있는 지정한 위치의 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1762">Sets a value to the element at the specified position in the three-dimensional <see cref="T:System.Array" />.</span></span> <span data-ttu-id="3f755-1763">인덱스가 64비트 정수로 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1763">The indexes are specified as 64-bit integers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1764"><xref:System.Array.GetLowerBound%2A> 및 <xref:System.Array.GetUpperBound%2A> 메서드 범위를 벗어난 인덱스 중 하나 인지 여부를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1764">The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.</span></span>  
  
 <span data-ttu-id="3f755-1765">변환에 대 한 자세한 내용은 참조 <xref:System.Convert>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1765">For more information about conversions, see <xref:System.Convert>.</span></span>  
  
 <span data-ttu-id="3f755-1766">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="3f755-1766">This method is an O(1) operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-1767">경우 <xref:System.Array.SetValue%2A> 할당 하는 데 사용 되 `null` 값 형식의 배열 요소에는 요소의 모든 필드가 0으로 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1767">If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero.</span></span> <span data-ttu-id="3f755-1768">요소의 값은 null 참조가 아니며 null 참조를 검색 하 여 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1768">The value of the element is not a null reference, and cannot be found by searching for a null reference.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1769">다음 코드 예제에는 설정 하 고 1 차원 또는 다차원 배열에 특정 값을 가져오는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1769">The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.</span></span>  
  
 [!code-cpp[System.Array_GetSetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array_GetSetValue/CPP/array_getsetvalue.cpp#1)]
 [!code-csharp[System.Array_GetSetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array_GetSetValue/CS/array_getsetvalue.cs#1)]
 [!code-vb[System.Array_GetSetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array_GetSetValue/VB/array_getsetvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3f755-1770">현재 <see cref="T:System.Array" />에 삼차원이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1770">The current <see cref="T:System.Array" /> does not have exactly three dimensions.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="3f755-1771"><paramref name="value" />를 <see cref="T:System.Array" />의 요소 형식으로 캐스팅할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1771"><paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-1772"><paramref name="index1" />, <paramref name="index2" /> 또는 <paramref name="index3" />이 현재 <see cref="T:System.Array" />의 해당 차원에 대한 올바른 인덱스 범위 밖에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1772"><paramref name="index1" /> or <paramref name="index2" /> or <paramref name="index3" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</span></span></exception>
        <altmember cref="M:System.Array.GetLowerBound(System.Int32)" />
        <altmember cref="M:System.Array.GetUpperBound(System.Int32)" />
        <altmember cref="Overload:System.Array.GetValue" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Sort">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3f755-1773">1차원 배열의 요소를 정렬합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1773">Sorts the elements in a one-dimensional array.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public static void Sort (Array array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort(class System.Array array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort(System.Array)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sort(Array ^ array);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="3f755-1774">정렬할 1차원 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1774">The one-dimensional <see cref="T:System.Array" /> to sort.</span></span></param>
        <summary><span data-ttu-id="3f755-1775"><see cref="T:System.Array" />에 있는 각 요소의 <see cref="T:System.IComparable" /> 구현을 사용하여 1차원 <see cref="T:System.Array" /> 전체의 요소를 정렬합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1775">Sorts the elements in an entire one-dimensional <see cref="T:System.Array" /> using the <see cref="T:System.IComparable" /> implementation of each element of the <see cref="T:System.Array" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1776">각 요소 `array` 구현 해야 합니다는 <xref:System.IComparable> 인터페이스를 다른 모든 요소와 비교할 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1776">Each element of `array` must implement the <xref:System.IComparable> interface to be capable of comparisons with every other element in `array`.</span></span>  
  
 <span data-ttu-id="3f755-1777">정렬 성공적으로 완료 되지 않은 경우 결과가 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1777">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="3f755-1778">이 메서드는 다음과 같이 맞추어 내면적인 정렬 (introsort) 알고리즘을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1778">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="3f755-1779">사용 하 여 파티션 크기를 16 개 요소 경우는[삽입 정렬](http://en.wikipedia.org/wiki/Insertion_sort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1779">If the partition size is fewer than 16 elements, it uses an[insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-1780">파티션 수가 2를 초과 하는 경우 \* 로그<sup>N</sup>여기서 *N* 는 범위 입력 배열을 사용 하 여 한 [Heapsort](http://en.wikipedia.org/wiki/Heapsort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1780">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-1781">그렇지 않으면 사용는 [Quicksort](http://en.wikipedia.org/wiki/Quicksort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1781">Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="3f755-1782">이 구현은 수행 불안정 정렬 됩니다. 즉, 두 요소가 같은 경우 순서 유지 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1782">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="3f755-1783">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1783">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="3f755-1784">최악의 경우 Heapsort 및 Quicksort 알고리즘을 사용 하 여 정렬 된 배열에 대해이 메서드는는 O (`n` 로그 `n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1784">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1785">다음 코드 예제에서는 값을 정렬 하는 방법을 보여 줍니다는 <xref:System.Array> 기본 비교 연산자 및 정렬 순서를 반대로 하는 사용자 지정 비교자를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1785">The following code example shows how to sort the values in an <xref:System.Array> using the default comparer and a custom comparer that reverses the sort order.</span></span> <span data-ttu-id="3f755-1786">현재는 결과 <xref:System.Globalization.CultureInfo>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1786">Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.</span></span>  
  
 [!code-cpp[System.Array.Sort#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort/CPP/arraysort.cpp#1)]
 [!code-csharp[System.Array.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort/CS/arraysort.cs#1)]
 [!code-vb[System.Array.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort/VB/arraysort.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1787"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1787"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="3f755-1788"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1788"><paramref name="array" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3f755-1789"><paramref name="array" />의 요소 중 하나 이상이 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1789">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.BinarySearch" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public static void Sort (Array keys, Array items);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort(class System.Array keys, class System.Array items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort(System.Array,System.Array)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort (keys As Array, items As Array)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sort(Array ^ keys, Array ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Array" />
        <Parameter Name="items" Type="System.Array" />
      </Parameters>
      <Docs>
        <param name="keys"><span data-ttu-id="3f755-1790">정렬할 키를 포함하는 1차원 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1790">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</span></span></param>
        <param name="items"><span data-ttu-id="3f755-1791"><c>keys</c><see cref="T:System.Array" />의 각 키에 해당하는 항목을 포함하는 1차원 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1791">The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <c>keys</c><see cref="T:System.Array" />.</span></span>  
  
 <span data-ttu-id="3f755-1792">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1792">-or-</span></span>  
  
 <span data-ttu-id="3f755-1793"><c>keys</c><see cref="T:System.Array" />만을 정렬하려면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1793"><see langword="null" /> to sort only the <c>keys</c><see cref="T:System.Array" />.</span></span></param>
        <summary><span data-ttu-id="3f755-1794">각 키의 <see cref="T:System.Array" /> 구현을 사용하여 첫 번째 <see cref="T:System.Array" />에 있는 키를 기반으로 하는 한 쌍의 1차원 <see cref="T:System.IComparable" /> 개체(키를 포함하는 개체와 해당 항목을 포함하는 개체)를 정렬합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1794">Sorts a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable" /> implementation of each key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1795">각 키에는 `keys` <xref:System.Array> 해당 항목에는 `items` <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1795">Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>.</span></span> <span data-ttu-id="3f755-1796">키를 정렬 하는 동안 해당 항목의 위치가 변경 되는 경우는 `items` <xref:System.Array> 마찬가지로 위치가 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1796">When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned.</span></span> <span data-ttu-id="3f755-1797">따라서는 `items` <xref:System.Array> 에 해당 하는 키의 배열에 따라 정렬 된 `keys` <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1797">Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.</span></span>  
  
 <span data-ttu-id="3f755-1798">각 키에는 `keys` <xref:System.Array> 구현 해야 합니다는 <xref:System.IComparable> 인터페이스를 다른 모든 키와 비교할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1798">Each key in the `keys`<xref:System.Array> must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key.</span></span>  
  
 <span data-ttu-id="3f755-1799">키 보다 더 많은 항목이 있지만 키가 없는 해당 항목은 정렬 되지 정렬할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1799">You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted.</span></span> <span data-ttu-id="3f755-1800">정렬할 수 없습니다. 항목; 보다 더 많은 키가 있는 경우 이렇게 하면이를 throw 한 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1800">You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="3f755-1801">정렬 성공적으로 완료 되지 않은 경우 결과가 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1801">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="3f755-1802">이 메서드는 다음과 같이 맞추어 내면적인 정렬 (introsort) 알고리즘을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1802">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="3f755-1803">사용 하 여 파티션 크기를 16 개 요소 경우는 [삽입 정렬](http://en.wikipedia.org/wiki/Insertion_sort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1803">If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-1804">파티션 수가 2를 초과 하는 경우 \* 로그<sup>N</sup>여기서 *N* 는 범위 입력 배열을 사용 하 여 한 [Heapsort](http://en.wikipedia.org/wiki/Heapsort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1804">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-1805">그렇지 않으면 사용는 [Quicksort](http://en.wikipedia.org/wiki/Quicksort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1805">Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="3f755-1806">이 구현은 수행 불안정 정렬 됩니다. 즉, 두 요소가 같은 경우 순서 유지 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1806">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="3f755-1807">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1807">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="3f755-1808">최악의 경우 Heapsort 및 Quicksort 알고리즘을 사용 하 여 정렬 된 배열에 대해이 메서드는는 O (`n` 로그 `n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `keys`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1808">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `keys`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1809">다음 예제에서는 키를 포함 하는 첫 번째 배열 하 고 두 번째 배열 값이 들어 있는 두 개의 관련 된 배열을 정렬 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1809">The following example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values.</span></span> <span data-ttu-id="3f755-1810">정렬 작업을 마쳤으면 기본 비교 연산자 및 정렬 순서를 반대로 하는 사용자 지정 비교자를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1810">Sorts are done using the default comparer and a custom comparer that reverses the sort order.</span></span> <span data-ttu-id="3f755-1811">현재는 결과 <xref:System.Globalization.CultureInfo>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1811">Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.</span></span>  
  
 [!code-cpp[System.Array.Sort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort2/CPP/arraysort2.cpp#1)]
 [!code-csharp[System.Array.Sort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort2/CS/arraysort2.cs#1)]
 [!code-vb[System.Array.Sort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort2/VB/arraysort2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1812"><paramref name="keys" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1812"><paramref name="keys" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="3f755-1813"><paramref name="keys" /><see cref="T:System.Array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1813">The <paramref name="keys" /><see cref="T:System.Array" /> is multidimensional.</span></span>  
  
 <span data-ttu-id="3f755-1814">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1814">-or-</span></span>  
  
 <span data-ttu-id="3f755-1815"><paramref name="items" /><see cref="T:System.Array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1815">The <paramref name="items" /><see cref="T:System.Array" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-1816"><paramref name="items" />가 <see langword="null" />이 아니고 <paramref name="keys" />의 길이가 <paramref name="items" />의 길이보다 긴 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1816"><paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3f755-1817"><paramref name="keys" /><see cref="T:System.Array" />의 요소 중 하나 이상이 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1817">One or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public static void Sort (Array array, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort(class System.Array array, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort(System.Array,System.Collections.IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sort(Array ^ array, System::Collections::IComparer ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="3f755-1818">정렬할 1차원 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1818">The one-dimensional array to sort.</span></span></param>
        <param name="comparer"><span data-ttu-id="3f755-1819">요소를 비교할 때 사용하는 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1819">The implementation to use when comparing elements.</span></span>  
  
 <span data-ttu-id="3f755-1820">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1820">-or-</span></span>  
  
 <span data-ttu-id="3f755-1821">각 요소의 <see cref="T:System.IComparable" /> 구현을 사용할 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1821"><see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</span></span></param>
        <summary><span data-ttu-id="3f755-1822">지정한 <see cref="T:System.Array" />를 사용하여 1차원 <see cref="T:System.Collections.IComparer" />의 요소를 정렬합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1822">Sorts the elements in a one-dimensional <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1823">경우 `comparer` 은 `null`의 각 요소 `array` 구현 해야 합니다는 <xref:System.IComparable> 인터페이스를 다른 모든 요소와 비교할 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1823">If `comparer` is `null`, each element of `array` must implement the <xref:System.IComparable> interface to be capable of comparisons with every other element in `array`.</span></span>  
  
 <span data-ttu-id="3f755-1824">정렬 성공적으로 완료 되지 않은 경우 결과가 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1824">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="3f755-1825">이 메서드는 다음과 같이 맞추어 내면적인 정렬 (introsort) 알고리즘을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1825">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="3f755-1826">사용 하 여 파티션 크기를 16 개 요소 경우는 [삽입 정렬](http://en.wikipedia.org/wiki/Insertion_sort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1826">If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-1827">파티션 수가 2를 초과 하는 경우 \* 로그<sup>N</sup>여기서 *N* 는 범위 입력 배열을 사용 하 여 한 [Heapsort](http://en.wikipedia.org/wiki/Heapsort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1827">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-1828">그렇지 않으면 사용는 [Quicksort](http://en.wikipedia.org/wiki/Quicksort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1828">Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="3f755-1829">이 구현은 수행 불안정 정렬 됩니다. 즉, 두 요소가 같은 경우 순서 유지 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1829">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="3f755-1830">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1830">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="3f755-1831">최악의 경우 Heapsort 및 Quicksort 알고리즘을 사용 하 여 정렬 된 배열에 대해이 메서드는는 O (`n` 로그 `n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1831">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
 <span data-ttu-id="3f755-1832">.NET Framework에 포함 되어 미리 정의 된 <xref:System.Collections.IComparer> 다음 표에 나열 된 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1832">The .NET Framework includes predefined <xref:System.Collections.IComparer> implementations listed in the following table.</span></span>  
  
|<span data-ttu-id="3f755-1833">구현</span><span class="sxs-lookup"><span data-stu-id="3f755-1833">Implementation</span></span>|<span data-ttu-id="3f755-1834">설명</span><span class="sxs-lookup"><span data-stu-id="3f755-1834">Description</span></span>|  
|--------------------|-----------------|  
|<xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType>|<span data-ttu-id="3f755-1835">두 개체를 비교 합니다. 하지만 문자열의 대/소문자 구분 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1835">Compares any two objects, but performs a case-insensitive comparison of strings.</span></span>|  
|<xref:System.Collections.Comparer.Default?displayProperty=nameWithType>|<span data-ttu-id="3f755-1836">현재 문화권의 정렬 규칙을 사용 하 여 두 개체를 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1836">Compares any two objects by using the sorting conventions of the current culture.</span></span>|  
|<xref:System.Collections.Comparer.DefaultInvariant?displayProperty=nameWithType>|<span data-ttu-id="3f755-1837">고정 문화권의 정렬 규칙을 사용 하 여 두 개체를 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1837">Compares any two objects by using the sorting conventions of the invariant culture.</span></span>|  
|<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>|<span data-ttu-id="3f755-1838">형식의 두 개체를 비교 `T` 형식의 기본 정렬 순서를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1838">Compares two objects of type `T` by using the type's default sort order.</span></span>|  
  
 <span data-ttu-id="3f755-1839">자신만의 인스턴스를 제공 하 여 사용자 지정 비교를 지원할 수도 있습니다 <xref:System.Collections.IComparer> 구현에는 `comparer` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1839">You can also support custom comparisons by providing an instance of your own <xref:System.Collections.IComparer> implementation to the `comparer` parameter.</span></span> <span data-ttu-id="3f755-1840">이 예제는이 정의 하 여 수행 된 `ReverseComparer` 클래스에 대 한 기본 정렬 순서를 반대로 하 형식 인스턴스의 대/소문자 구분 문자열 비교를 수행 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1840">The example does this by defining a `ReverseComparer` class that reverses the default sort order for instances of a type and performs case-insensitive string comparison.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1841">다음 예제에서는 기본 비교자를 사용 하 여 문자열 arrayby의 값을 정렬 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1841">The following example sorts the values in a string arrayby using the default comparer.</span></span> <span data-ttu-id="3f755-1842">또한 사용자 지정을 정의 <xref:System.Collections.IComparer> 라는 구현 `ReverseComparer` 대/소문자 구분 문자열 비교를 수행 하는 동안 개체의 기본 정렬 순서를 반대로 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1842">It also defines a custom <xref:System.Collections.IComparer> implementation named `ReverseComparer` that reverses an object's default sort order while performing a case-insensitive string comparison.</span></span> <span data-ttu-id="3f755-1843">출력은 현재 문화권에 따라 달라질 수 있습니다는 참고 사항</span><span class="sxs-lookup"><span data-stu-id="3f755-1843">Note that the output might vary depending on the current culture.</span></span>  
  
 [!code-cpp[System.Array.Sort#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort/CPP/arraysort.cpp#1)]
 [!code-csharp[System.Array.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort/CS/arraysort.cs#1)]
 [!code-vb[System.Array.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort/VB/arraysort.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1844"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1844"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="3f755-1845"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1845"><paramref name="array" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3f755-1846"><paramref name="comparer" />가 <see langword="null" />이고 <paramref name="array" />의 요소 중 하나 이상이 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1846"><paramref name="comparer" /> is <see langword="null" />, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3f755-1847"><paramref name="comparer" />의 구현으로 인해 정렬 중에 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1847">The implementation of <paramref name="comparer" /> caused an error during the sort.</span></span> <span data-ttu-id="3f755-1848">예를 들어 항목을 자기 자신과 비교할 때 <paramref name="comparer" />에서 0을 반환하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1848">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="3f755-1849">.NET Framework 4 및 이전 버전에는 Quicksort 알고리즘만을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1849">The .NET Framework 4 and earlier versions used only the Quicksort algorithm.</span></span> <span data-ttu-id="3f755-1850">Quicksort 식별 하면 정렬 작업이 throw 하는 일부 상황에서 잘못 된 비교자는 <see cref="T:System.IndexOutOfRangeException" /> 예외를 throw 하 고는 <see cref="T:System.ArgumentException" /> 호출자에 게는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1850">Quicksort identifies invalid comparers in some situations in which the sorting operation throws an <see cref="T:System.IndexOutOfRangeException" /> exception, and throws an <see cref="T:System.ArgumentException" /> exception to the caller.</span></span> <span data-ttu-id="3f755-1851">부터는 [!INCLUDE[net_v45](~/includes/net-v45-md.md)], 수를 이전에 정렬 작업에서 발생 했습니다 <see cref="T:System.ArgumentException" /> 삽입 정렬 및 heapsort 알고리즘 잘못 된 비교자를 감지 하지 않으면, 예외를 throw 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1851">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], it is possible that sorting operations that previously threw <see cref="T:System.ArgumentException" /> will not throw an exception, because the insertion sort and heapsort algorithms do not detect an invalid comparer.</span></span> <span data-ttu-id="3f755-1852">대부분의 경우 16 개 요소 배열에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1852">For the most part, this applies to arrays with fewer than 16 elements.</span></span></para>
        </block>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.BinarySearch" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public static void Sort (Array keys, Array items, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort(class System.Array keys, class System.Array items, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort (keys As Array, items As Array, comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sort(Array ^ keys, Array ^ items, System::Collections::IComparer ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Array" />
        <Parameter Name="items" Type="System.Array" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="keys"><span data-ttu-id="3f755-1853">정렬할 키를 포함하는 1차원 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1853">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</span></span></param>
        <param name="items"><span data-ttu-id="3f755-1854"><c>keys</c><see cref="T:System.Array" />의 각 키에 해당하는 항목을 포함하는 1차원 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1854">The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <c>keys</c><see cref="T:System.Array" />.</span></span>  
  
 <span data-ttu-id="3f755-1855">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1855">-or-</span></span>  
  
 <span data-ttu-id="3f755-1856"><c>keys</c><see cref="T:System.Array" />만을 정렬하려면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1856"><see langword="null" /> to sort only the <c>keys</c><see cref="T:System.Array" />.</span></span></param>
        <param name="comparer"><span data-ttu-id="3f755-1857">요소를 비교할 때 사용하는 <see cref="T:System.Collections.IComparer" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1857">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</span></span>  
  
 <span data-ttu-id="3f755-1858">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1858">-or-</span></span>  
  
 <span data-ttu-id="3f755-1859">각 요소의 <see cref="T:System.IComparable" /> 구현을 사용할 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1859"><see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</span></span></param>
        <summary><span data-ttu-id="3f755-1860">지정한 <see cref="T:System.Array" />를 사용하여 첫 번째 <see cref="T:System.Array" />에 있는 키를 기반으로 하는 한 쌍의 1차원 <see cref="T:System.Collections.IComparer" /> 개체(키를 포함하는 개체와 해당 항목을 포함하는 개체)를 정렬합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1860">Sorts a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1861">각 키에는 `keys` <xref:System.Array> 해당 항목에는 `items` <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1861">Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>.</span></span> <span data-ttu-id="3f755-1862">키를 정렬 하는 동안 해당 항목의 위치가 변경 되는 경우는 `items` <xref:System.Array> 마찬가지로 위치가 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1862">When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned.</span></span> <span data-ttu-id="3f755-1863">따라서는 `items` <xref:System.Array> 에 해당 하는 키의 배열에 따라 정렬 된 `keys` <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1863">Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.</span></span>  
  
 <span data-ttu-id="3f755-1864">경우 `comparer` 은 `null`, 각 키에서 `keys` <xref:System.Array> 구현 해야 합니다는 <xref:System.IComparable> 인터페이스를 다른 모든 키와 비교할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1864">If `comparer` is `null`, each key in the `keys`<xref:System.Array> must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key.</span></span>  
  
 <span data-ttu-id="3f755-1865">키 보다 더 많은 항목이 있지만 키가 없는 해당 항목은 정렬 되지 정렬할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1865">You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted.</span></span> <span data-ttu-id="3f755-1866">정렬할 수 없습니다. 항목; 보다 더 많은 키가 있는 경우 이렇게 하면이를 throw 한 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1866">You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="3f755-1867">정렬 성공적으로 완료 되지 않은 경우 결과가 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1867">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="3f755-1868">.NET Framework에 포함 되어 미리 정의 된 <xref:System.Collections.IComparer> 다음 표에 나열 된 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1868">The .NET Framework includes predefined <xref:System.Collections.IComparer> implementations listed in the following table.</span></span>  
  
|<span data-ttu-id="3f755-1869">구현</span><span class="sxs-lookup"><span data-stu-id="3f755-1869">Implementation</span></span>|<span data-ttu-id="3f755-1870">설명</span><span class="sxs-lookup"><span data-stu-id="3f755-1870">Description</span></span>|  
|--------------------|-----------------|  
|<xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType>|<span data-ttu-id="3f755-1871">두 개체를 비교 합니다. 하지만 문자열의 대/소문자 구분 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1871">Compares any two objects, but performs a case-insensitive comparison of strings.</span></span>|  
|<xref:System.Collections.Comparer.Default?displayProperty=nameWithType>|<span data-ttu-id="3f755-1872">현재 문화권의 정렬 규칙을 사용 하 여 두 개체를 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1872">Compares any two objects by using the sorting conventions of the current culture.</span></span>|  
|<xref:System.Collections.Comparer.DefaultInvariant?displayProperty=nameWithType>|<span data-ttu-id="3f755-1873">고정 문화권의 정렬 규칙을 사용 하 여 두 개체를 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1873">Compares any two objects by using the sorting conventions of the invariant culture.</span></span>|  
|<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>|<span data-ttu-id="3f755-1874">형식의 두 개체를 비교 `T` 형식의 기본 정렬 순서를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1874">Compares two objects of type `T` by using the type's default sort order.</span></span>|  
  
 <span data-ttu-id="3f755-1875">자신만의 인스턴스를 제공 하 여 사용자 지정 비교를 지원할 수도 있습니다 <xref:System.Collections.IComparer> 구현에는 `comparer` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1875">You can also support custom comparisons by providing an instance of your own <xref:System.Collections.IComparer> implementation to the `comparer` parameter.</span></span> <span data-ttu-id="3f755-1876">이 예제는이 정의 하 여 수행 된 <xref:System.Collections.IComparer> 기본 정렬 순서를 바꾸는 및 대/소문자 구분 문자열 비교를 수행 하는 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1876">The example does this by defining an <xref:System.Collections.IComparer> implementation that reverses the default sort order and performs case-insensitive string comparison.</span></span>  
  
 <span data-ttu-id="3f755-1877">이 메서드는 다음과 같이 맞추어 내면적인 정렬 (introsort) 알고리즘을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1877">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="3f755-1878">사용 하 여 파티션 크기를 16 개 요소 경우는 [삽입 정렬](http://en.wikipedia.org/wiki/Insertion_sort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1878">If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-1879">파티션 수가 2를 초과 하는 경우 \* 로그<sup>N</sup>여기서 *N* 는 범위 입력 배열을 사용 하 여 한 [Heapsort](http://en.wikipedia.org/wiki/Heapsort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1879">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-1880">그렇지 않으면 사용는 [Quicksort](http://en.wikipedia.org/wiki/Quicksort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1880">Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="3f755-1881">이 구현은 수행 불안정 정렬 됩니다. 즉, 두 요소가 같은 경우 순서 유지 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1881">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="3f755-1882">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1882">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="3f755-1883">최악의 경우 Heapsort 및 Quicksort 알고리즘을 사용 하 여 정렬 된 배열에 대해이 메서드는는 O (`n` 로그 `n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `keys`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1883">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `keys`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1884">다음 예제에서는 키를 포함 하는 첫 번째 배열 하 고 두 번째 배열 값이 들어 있는 두 개의 관련 된 배열을 정렬 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1884">The following example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values.</span></span> <span data-ttu-id="3f755-1885">정렬 작업을 마쳤으면 기본 비교 연산자 및 정렬 순서를 반대로 하는 사용자 지정 비교자를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1885">Sorts are done using the default comparer and a custom comparer that reverses the sort order.</span></span> <span data-ttu-id="3f755-1886">현재는 결과 <xref:System.Globalization.CultureInfo>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1886">Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.</span></span>  
  
 [!code-cpp[System.Array.Sort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort2/CPP/arraysort2.cpp#1)]
 [!code-csharp[System.Array.Sort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort2/CS/arraysort2.cs#1)]
 [!code-vb[System.Array.Sort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort2/VB/arraysort2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1887"><paramref name="keys" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1887"><paramref name="keys" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="3f755-1888"><paramref name="keys" /><see cref="T:System.Array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1888">The <paramref name="keys" /><see cref="T:System.Array" /> is multidimensional.</span></span>  
  
 <span data-ttu-id="3f755-1889">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1889">-or-</span></span>  
  
 <span data-ttu-id="3f755-1890"><paramref name="items" /><see cref="T:System.Array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1890">The <paramref name="items" /><see cref="T:System.Array" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-1891"><paramref name="items" />가 <see langword="null" />이 아니고 <paramref name="keys" />의 길이가 <paramref name="items" />의 길이보다 긴 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1891"><paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.</span></span>  
  
 <span data-ttu-id="3f755-1892">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1892">-or-</span></span>  
  
 <span data-ttu-id="3f755-1893"><paramref name="comparer" />의 구현으로 인해 정렬 중에 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1893">The implementation of <paramref name="comparer" /> caused an error during the sort.</span></span> <span data-ttu-id="3f755-1894">예를 들어 항목을 자기 자신과 비교할 때 <paramref name="comparer" />에서 0을 반환하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1894">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3f755-1895"><paramref name="comparer" />가 <see langword="null" />이고 <paramref name="keys" /><see cref="T:System.Array" />의 요소 중 하나 이상이 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1895"><paramref name="comparer" /> is <see langword="null" />, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="3f755-1896">.NET Framework 4 및 이전 버전에는 Quicksort 알고리즘만을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1896">The .NET Framework 4 and earlier versions used only the Quicksort algorithm.</span></span> <span data-ttu-id="3f755-1897">Quicksort 식별 하면 정렬 작업이 throw 하는 일부 상황에서 잘못 된 비교자는 <see cref="T:System.IndexOutOfRangeException" /> 예외를 throw 하 고는 <see cref="T:System.ArgumentException" /> 호출자에 게는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1897">Quicksort identifies invalid comparers in some situations in which the sorting operation throws an <see cref="T:System.IndexOutOfRangeException" /> exception, and throws an <see cref="T:System.ArgumentException" /> exception to the caller.</span></span> <span data-ttu-id="3f755-1898">부터는 [!INCLUDE[net_v45](~/includes/net-v45-md.md)], 수 있는 정렬 작업 해당 previouslythrew <see cref="T:System.ArgumentException" /> 삽입 정렬 및 heapsort 알고리즘 잘못 된 비교자를 감지 하지 않으면, 예외를 throw 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1898">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], it is possible that sorting operations that previouslythrew <see cref="T:System.ArgumentException" /> will not throw an exception, becausethe insertion sort and heapsort algorithms do not detect an invalid comparer.</span></span> <span data-ttu-id="3f755-1899">대부분의 경우 16 개 요소 배열에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1899">For the most part, this applies to arrays with fewer than 16 elements.</span></span></para>
        </block>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.BinarySearch" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public static void Sort (Array array, int index, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort(class System.Array array, int32 index, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort(System.Array,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sort(Array ^ array, int index, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="3f755-1900">정렬할 1차원 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1900">The one-dimensional <see cref="T:System.Array" /> to sort.</span></span></param>
        <param name="index"><span data-ttu-id="3f755-1901">정렬할 범위의 시작 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1901">The starting index of the range to sort.</span></span></param>
        <param name="length"><span data-ttu-id="3f755-1902">정렬할 범위에 있는 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1902">The number of elements in the range to sort.</span></span></param>
        <summary><span data-ttu-id="3f755-1903"><see cref="T:System.Array" />에 있는 각 요소의 <see cref="T:System.IComparable" /> 구현을 사용하여 1차원 <see cref="T:System.Array" />이 요소 범위에 있는 요소를 정렬합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1903">Sorts the elements in a range of elements in a one-dimensional <see cref="T:System.Array" /> using the <see cref="T:System.IComparable" /> implementation of each element of the <see cref="T:System.Array" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1904">각 요소에 있는 요소의 지정된 된 범위 내 `array` 구현 해야 합니다는 <xref:System.IComparable> 인터페이스를 다른 모든 요소와 비교할 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1904">Each element within the specified range of elements in `array` must implement the <xref:System.IComparable> interface to be capable of comparisons with every other element in `array`.</span></span>  
  
 <span data-ttu-id="3f755-1905">정렬 성공적으로 완료 되지 않은 경우 결과가 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1905">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="3f755-1906">이 메서드는 다음과 같이 맞추어 내면적인 정렬 (introsort) 알고리즘을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1906">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="3f755-1907">사용 하 여 파티션 크기를 16 개 요소 경우는 [삽입 정렬](http://en.wikipedia.org/wiki/Insertion_sort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1907">If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-1908">파티션 수가 2를 초과 하는 경우 \* 로그<sup>N</sup>여기서 *N* 는 범위 입력 배열을 사용 하 여 한 [Heapsort](http://en.wikipedia.org/wiki/Heapsort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1908">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-1909">그렇지 않으면 사용는 [Quicksort](http://en.wikipedia.org/wiki/Quicksort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1909">Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="3f755-1910">이 구현은 수행 불안정 정렬 됩니다. 즉, 두 요소가 같은 경우 순서 유지 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1910">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="3f755-1911">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1911">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="3f755-1912">최악의 경우 Heapsort 및 Quicksort 알고리즘을 사용 하 여 정렬 된 배열에 대해이 메서드는는 O (`n` 로그 `n`) 작업, 여기서 `n` 은 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1912">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1913">다음 코드 예제에서는 값을 정렬 하는 방법을 보여 줍니다는 <xref:System.Array> 기본 비교 연산자 및 정렬 순서를 반대로 하는 사용자 지정 비교자를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1913">The following code example shows how to sort the values in an <xref:System.Array> using the default comparer and a custom comparer that reverses the sort order.</span></span> <span data-ttu-id="3f755-1914">현재는 결과 <xref:System.Globalization.CultureInfo>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1914">Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.</span></span>  
  
 [!code-cpp[System.Array.Sort#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort/CPP/arraysort.cpp#1)]
 [!code-csharp[System.Array.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort/CS/arraysort.cs#1)]
 [!code-vb[System.Array.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort/VB/arraysort.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1915"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1915"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="3f755-1916"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1916"><paramref name="array" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-1917"><paramref name="index" />가 <paramref name="array" />의 하한값보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1917"><paramref name="index" /> is less than the lower bound of <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="3f755-1918">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1918">-or-</span></span>  
  
 <span data-ttu-id="3f755-1919"><paramref name="length" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1919"><paramref name="length" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-1920"><paramref name="index" /> 및 <paramref name="length" />가 <paramref name="array" />의 올바른 범위를 지정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1920"><paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3f755-1921"><paramref name="array" />의 요소 중 하나 이상이 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1921">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.BinarySearch" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public static void Sort (Array keys, Array items, int index, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort(class System.Array keys, class System.Array items, int32 index, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort (keys As Array, items As Array, index As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sort(Array ^ keys, Array ^ items, int index, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Array" />
        <Parameter Name="items" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="keys"><span data-ttu-id="3f755-1922">정렬할 키를 포함하는 1차원 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1922">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</span></span></param>
        <param name="items"><span data-ttu-id="3f755-1923"><c>keys</c><see cref="T:System.Array" />의 각 키에 해당하는 항목을 포함하는 1차원 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1923">The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <c>keys</c><see cref="T:System.Array" />.</span></span>  
  
 <span data-ttu-id="3f755-1924">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1924">-or-</span></span>  
  
 <span data-ttu-id="3f755-1925"><c>keys</c><see cref="T:System.Array" />만을 정렬하려면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1925"><see langword="null" /> to sort only the <c>keys</c><see cref="T:System.Array" />.</span></span></param>
        <param name="index"><span data-ttu-id="3f755-1926">정렬할 범위의 시작 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1926">The starting index of the range to sort.</span></span></param>
        <param name="length"><span data-ttu-id="3f755-1927">정렬할 범위에 있는 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1927">The number of elements in the range to sort.</span></span></param>
        <summary><span data-ttu-id="3f755-1928">각 키의 <see cref="T:System.Array" /> 구현을 사용하여 첫 번째 <see cref="T:System.Array" />에 있는 키를 기반으로 하는 한 쌍의 1차원 <see cref="T:System.IComparable" /> 개체(키를 포함하는 개체와 해당 항목을 포함하는 개체)의 요소 범위를 정렬합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1928">Sorts a range of elements in a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable" /> implementation of each key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1929">각 키에는 `keys` <xref:System.Array> 해당 항목에는 `items` <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1929">Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>.</span></span> <span data-ttu-id="3f755-1930">키를 정렬 하는 동안 해당 항목의 위치가 변경 되는 경우는 `items` <xref:System.Array> 마찬가지로 위치가 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1930">When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned.</span></span> <span data-ttu-id="3f755-1931">따라서는 `items` <xref:System.Array> 에 해당 하는 키의 배열에 따라 정렬 된 `keys` <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1931">Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.</span></span>  
  
 <span data-ttu-id="3f755-1932">각 키에 있는 요소의 지정 된 범위에서의 `keys` <xref:System.Array> 구현 해야 합니다는 <xref:System.IComparable> 인터페이스를 다른 모든 키와 비교할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1932">Each key within the specified range of elements in the `keys`<xref:System.Array> must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key.</span></span>  
  
 <span data-ttu-id="3f755-1933">키 보다 더 많은 항목이 있지만 키가 없는 해당 항목은 정렬 되지 정렬할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1933">You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted.</span></span> <span data-ttu-id="3f755-1934">정렬할 수 없습니다. 항목; 보다 더 많은 키가 있는 경우 이렇게 하면이를 throw 한 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1934">You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="3f755-1935">정렬 성공적으로 완료 되지 않은 경우 결과가 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1935">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="3f755-1936">이 메서드는 다음과 같이 맞추어 내면적인 정렬 (introsort) 알고리즘을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1936">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="3f755-1937">사용 하 여 파티션 크기를 16 개 요소 경우는 [삽입 정렬](http://en.wikipedia.org/wiki/Insertion_sort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1937">If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-1938">파티션 수가 2를 초과 하는 경우 \* 로그<sup>N</sup>여기서 *N* 는 범위 입력 배열을 사용 하 여 한 [Heapsort](http://en.wikipedia.org/wiki/Heapsort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1938">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-1939">그렇지 않으면 사용는 [Quicksort](http://en.wikipedia.org/wiki/Quicksort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1939">Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="3f755-1940">이 구현은 수행 불안정 정렬 됩니다. 즉, 두 요소가 같은 경우 순서 유지 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1940">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="3f755-1941">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1941">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="3f755-1942">최악의 경우 Heapsort 및 Quicksort 알고리즘을 사용 하 여 정렬 된 배열에 대해이 메서드는는 O (`n` 로그 `n`) 작업, 여기서 `n` 은 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1942">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1943">다음 코드 예제에서는 키를 포함 하는 첫 번째 배열 하 고 두 번째 배열 값이 들어 있는 두 개의 관련 된 배열을 정렬 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1943">The following code example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values.</span></span> <span data-ttu-id="3f755-1944">정렬 작업을 마쳤으면 기본 비교 연산자 및 정렬 순서를 반대로 하는 사용자 지정 비교자를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1944">Sorts are done using the default comparer and a custom comparer that reverses the sort order.</span></span> <span data-ttu-id="3f755-1945">현재는 결과 <xref:System.Globalization.CultureInfo>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1945">Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.</span></span>  
  
 [!code-cpp[System.Array.Sort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort2/CPP/arraysort2.cpp#1)]
 [!code-csharp[System.Array.Sort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort2/CS/arraysort2.cs#1)]
 [!code-vb[System.Array.Sort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort2/VB/arraysort2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1946"><paramref name="keys" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1946"><paramref name="keys" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="3f755-1947"><paramref name="keys" /><see cref="T:System.Array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1947">The <paramref name="keys" /><see cref="T:System.Array" /> is multidimensional.</span></span>  
  
 <span data-ttu-id="3f755-1948">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1948">-or-</span></span>  
  
 <span data-ttu-id="3f755-1949"><paramref name="items" /><see cref="T:System.Array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1949">The <paramref name="items" /><see cref="T:System.Array" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-1950"><paramref name="index" />가 <paramref name="keys" />의 하한값보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1950"><paramref name="index" /> is less than the lower bound of <paramref name="keys" />.</span></span>  
  
 <span data-ttu-id="3f755-1951">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1951">-or-</span></span>  
  
 <span data-ttu-id="3f755-1952"><paramref name="length" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1952"><paramref name="length" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-1953"><paramref name="items" />가 <see langword="null" />이 아니고 <paramref name="keys" />의 길이가 <paramref name="items" />의 길이보다 긴 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1953"><paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.</span></span>  
  
 <span data-ttu-id="3f755-1954">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1954">-or-</span></span>  
  
 <span data-ttu-id="3f755-1955"><paramref name="index" /> 및 <paramref name="length" />가 <paramref name="keys" /><see cref="T:System.Array" />의 올바른 범위를 지정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1955"><paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.</span></span>  
  
 <span data-ttu-id="3f755-1956">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1956">-or-</span></span>  
  
 <span data-ttu-id="3f755-1957"><paramref name="items" />가 <see langword="null" />이 아니고 <paramref name="index" /> 및 <paramref name="length" />가 <paramref name="items" /><see cref="T:System.Array" />에서 올바른 범위를 지정하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1957"><paramref name="items" /> is not <see langword="null" />, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3f755-1958"><paramref name="keys" /><see cref="T:System.Array" />의 요소 중 하나 이상이 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1958">One or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.BinarySearch" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public static void Sort (Array array, int index, int length, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort(class System.Array array, int32 index, int32 length, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sort(Array ^ array, int index, int length, System::Collections::IComparer ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="3f755-1959">정렬할 1차원 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1959">The one-dimensional <see cref="T:System.Array" /> to sort.</span></span></param>
        <param name="index"><span data-ttu-id="3f755-1960">정렬할 범위의 시작 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1960">The starting index of the range to sort.</span></span></param>
        <param name="length"><span data-ttu-id="3f755-1961">정렬할 범위에 있는 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1961">The number of elements in the range to sort.</span></span></param>
        <param name="comparer"><span data-ttu-id="3f755-1962">요소를 비교할 때 사용하는 <see cref="T:System.Collections.IComparer" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1962">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</span></span>  
  
 <span data-ttu-id="3f755-1963">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1963">-or-</span></span>  
  
 <span data-ttu-id="3f755-1964">각 요소의 <see cref="T:System.IComparable" /> 구현을 사용할 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1964"><see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</span></span></param>
        <summary><span data-ttu-id="3f755-1965">지정한 <see cref="T:System.Array" />를 사용하여 1차원 <see cref="T:System.Collections.IComparer" />의 요소 범위에 있는 요소를 정렬합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1965">Sorts the elements in a range of elements in a one-dimensional <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-1966">경우 `comparer` 은 `null`, 각 요소에 있는 요소의 지정된 된 범위 내 `array` 구현 해야 합니다는 <xref:System.IComparable> 다른 모든 요소와 비교할 수 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1966">If `comparer` is `null`, each element within the specified range of elements in `array` must implement the <xref:System.IComparable> interface to be capable of comparisons with every other element in `array`.</span></span>  
  
 <span data-ttu-id="3f755-1967">정렬 성공적으로 완료 되지 않은 경우 결과가 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1967">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="3f755-1968">.NET Framework에 포함 되어 미리 정의 된 <xref:System.Collections.IComparer> 다음 표에 나열 된 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1968">The .NET Framework includes predefined <xref:System.Collections.IComparer> implementations listed in the following table.</span></span>  
  
|<span data-ttu-id="3f755-1969">구현</span><span class="sxs-lookup"><span data-stu-id="3f755-1969">Implementation</span></span>|<span data-ttu-id="3f755-1970">설명</span><span class="sxs-lookup"><span data-stu-id="3f755-1970">Description</span></span>|  
|--------------------|-----------------|  
|<xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType>|<span data-ttu-id="3f755-1971">두 개체를 비교 합니다. 하지만 문자열의 대/소문자 구분 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1971">Compares any two objects, but performs a case-insensitive comparison of strings.</span></span>|  
|<xref:System.Collections.Comparer.Default?displayProperty=nameWithType>|<span data-ttu-id="3f755-1972">현재 문화권의 정렬 규칙을 사용 하 여 두 개체를 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1972">Compares any two objects by using the sorting conventions of the current culture.</span></span>|  
|<xref:System.Collections.Comparer.DefaultInvariant?displayProperty=nameWithType>|<span data-ttu-id="3f755-1973">고정 문화권의 정렬 규칙을 사용 하 여 두 개체를 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1973">Compares any two objects by using the sorting conventions of the invariant culture.</span></span>|  
|<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>|<span data-ttu-id="3f755-1974">형식의 두 개체를 비교 `T` 형식의 기본 정렬 순서를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1974">Compares two objects of type `T` by using the type's default sort order.</span></span>|  
  
 <span data-ttu-id="3f755-1975">자신만의 인스턴스를 제공 하 여 사용자 지정 비교를 지원할 수도 있습니다 <xref:System.Collections.IComparer> 구현에는 `comparer` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1975">You can also support custom comparisons by providing an instance of your own <xref:System.Collections.IComparer> implementation to the `comparer` parameter.</span></span> <span data-ttu-id="3f755-1976">이 예제는이 정의 하 여 수행 된 `ReverseComparer` 클래스에 대 한 기본 정렬 순서를 반대로 하 형식 인스턴스의 대/소문자 구분 문자열 비교를 수행 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1976">The example does this by defining a `ReverseComparer` class that reverses the default sort order for instances of a type and performs case-insensitive string comparison.</span></span>  
  
 <span data-ttu-id="3f755-1977">이 메서드는 다음과 같이 맞추어 내면적인 정렬 (introsort) 알고리즘을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1977">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="3f755-1978">사용 하 여 파티션 크기를 16 개 요소 경우는 [삽입 정렬](http://en.wikipedia.org/wiki/Insertion_sort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1978">If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-1979">파티션 수가 2를 초과 하는 경우 \* 로그<sup>N</sup>여기서 *N* 는 범위 입력 배열을 사용 하 여 한 [Heapsort](http://en.wikipedia.org/wiki/Heapsort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1979">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-1980">그렇지 않으면 사용는 [Quicksort](http://en.wikipedia.org/wiki/Quicksort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1980">Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="3f755-1981">이 구현은 수행 불안정 정렬 됩니다. 즉, 두 요소가 같은 경우 순서 유지 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1981">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="3f755-1982">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1982">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="3f755-1983">최악의 경우 Heapsort 및 Quicksort 알고리즘을 사용 하 여 정렬 된 배열에 대해이 메서드는는 O (`n` 로그 `n`) 작업, 여기서 `n` 은 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1983">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-1984">다음 코드 예제에서는 값을 정렬 하는 방법을 보여 줍니다는 <xref:System.Array> 기본 비교 연산자 및 정렬 순서를 반대로 하는 사용자 지정 비교자를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1984">The following code example shows how to sort the values in an <xref:System.Array> using the default comparer and a custom comparer that reverses the sort order.</span></span> <span data-ttu-id="3f755-1985">현재는 결과 <xref:System.Globalization.CultureInfo>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1985">Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.</span></span>  
  
 [!code-cpp[System.Array.Sort#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort/CPP/arraysort.cpp#1)]
 [!code-csharp[System.Array.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort/CS/arraysort.cs#1)]
 [!code-vb[System.Array.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort/VB/arraysort.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-1986"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1986"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="3f755-1987"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1987"><paramref name="array" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-1988"><paramref name="index" />가 <paramref name="array" />의 하한값보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1988"><paramref name="index" /> is less than the lower bound of <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="3f755-1989">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1989">-or-</span></span>  
  
 <span data-ttu-id="3f755-1990"><paramref name="length" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1990"><paramref name="length" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-1991"><paramref name="index" /> 및 <paramref name="length" />가 <paramref name="array" />의 올바른 범위를 지정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1991"><paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="3f755-1992">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-1992">-or-</span></span>  
  
 <span data-ttu-id="3f755-1993"><paramref name="comparer" />의 구현으로 인해 정렬 중에 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1993">The implementation of <paramref name="comparer" /> caused an error during the sort.</span></span> <span data-ttu-id="3f755-1994">예를 들어 항목을 자기 자신과 비교할 때 <paramref name="comparer" />에서 0을 반환하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1994">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3f755-1995"><paramref name="comparer" />가 <see langword="null" />이고 <paramref name="array" />의 요소 중 하나 이상이 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-1995"><paramref name="comparer" /> is <see langword="null" />, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="3f755-1996">.NET Framework 4 및 이전 버전에는 Quicksort 알고리즘만을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1996">The .NET Framework 4 and earlier versions used only the Quicksort algorithm.</span></span> <span data-ttu-id="3f755-1997">Quicksort 식별 하면 정렬 작업이 throw 하는 일부 상황에서 잘못 된 비교자는 <see cref="T:System.IndexOutOfRangeException" /> 예외를 throw 하 고는 <see cref="T:System.ArgumentException" /> 호출자에 게는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1997">Quicksort identifies invalid comparers in some situations in which the sorting operation throws an <see cref="T:System.IndexOutOfRangeException" /> exception, and throws an <see cref="T:System.ArgumentException" /> exception to the caller.</span></span> <span data-ttu-id="3f755-1998">부터는 [!INCLUDE[net_v45](~/includes/net-v45-md.md)], 수를 이전에 정렬 작업에서 발생 했습니다 <see cref="T:System.ArgumentException" /> 삽입 정렬 및 heapsort 알고리즘 잘못 된 비교자를 감지 하지 않으면, 예외를 throw 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1998">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], it is possible that sorting operations that previously threw <see cref="T:System.ArgumentException" /> will not throw an exception, because the insertion sort and heapsort algorithms do not detect an invalid comparer.</span></span> <span data-ttu-id="3f755-1999">대부분의 경우 16 개 요소 배열에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-1999">For the most part, this applies to arrays with fewer than 16 elements.</span></span></para>
        </block>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.BinarySearch" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public static void Sort (Array keys, Array items, int index, int length, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort(class System.Array keys, class System.Array items, int32 index, int32 length, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort (keys As Array, items As Array, index As Integer, length As Integer, comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sort(Array ^ keys, Array ^ items, int index, int length, System::Collections::IComparer ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Array" />
        <Parameter Name="items" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="keys"><span data-ttu-id="3f755-2000">정렬할 키를 포함하는 1차원 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2000">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</span></span></param>
        <param name="items"><span data-ttu-id="3f755-2001"><c>keys</c><see cref="T:System.Array" />의 각 키에 해당하는 항목을 포함하는 1차원 <see cref="T:System.Array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2001">The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <c>keys</c><see cref="T:System.Array" />.</span></span>  
  
 <span data-ttu-id="3f755-2002">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2002">-or-</span></span>  
  
 <span data-ttu-id="3f755-2003"><c>keys</c><see cref="T:System.Array" />만을 정렬하려면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2003"><see langword="null" /> to sort only the <c>keys</c><see cref="T:System.Array" />.</span></span></param>
        <param name="index"><span data-ttu-id="3f755-2004">정렬할 범위의 시작 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2004">The starting index of the range to sort.</span></span></param>
        <param name="length"><span data-ttu-id="3f755-2005">정렬할 범위에 있는 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2005">The number of elements in the range to sort.</span></span></param>
        <param name="comparer"><span data-ttu-id="3f755-2006">요소를 비교할 때 사용하는 <see cref="T:System.Collections.IComparer" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2006">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</span></span>  
  
 <span data-ttu-id="3f755-2007">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2007">-or-</span></span>  
  
 <span data-ttu-id="3f755-2008">각 요소의 <see cref="T:System.IComparable" /> 구현을 사용할 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2008"><see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</span></span></param>
        <summary><span data-ttu-id="3f755-2009">지정한 <see cref="T:System.Array" />를 사용하여 첫 번째 <see cref="T:System.Array" />에 있는 키를 기반으로 하는 한 쌍의 1차원 <see cref="T:System.Collections.IComparer" /> 개체(키를 포함하는 개체와 해당 항목을 포함하는 개체)의 요소 범위를 정렬합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2009">Sorts a range of elements in a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2010">각 키에는 `keys` <xref:System.Array> 해당 항목에는 `items` <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2010">Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>.</span></span> <span data-ttu-id="3f755-2011">키를 정렬 하는 동안 해당 항목의 위치가 변경 되는 경우는 `items` <xref:System.Array> 마찬가지로 위치가 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2011">When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned.</span></span> <span data-ttu-id="3f755-2012">따라서는 `items` <xref:System.Array> 에 해당 하는 키의 배열에 따라 정렬 된 `keys` <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2012">Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.</span></span>  
  
 <span data-ttu-id="3f755-2013">경우 `comparer` 은 `null`, 각 키에 있는 요소의 지정 된 범위에서는 `keys` <xref:System.Array> 구현 해야 합니다는 <xref:System.IComparable> 인터페이스를 다른 모든 키와 비교할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2013">If `comparer` is `null`, each key within the specified range of elements in the `keys`<xref:System.Array> must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key.</span></span>  
  
 <span data-ttu-id="3f755-2014">키 보다 더 많은 항목이 있지만 키가 없는 해당 항목은 정렬 되지 정렬할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2014">You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted.</span></span> <span data-ttu-id="3f755-2015">정렬할 수 없습니다. 항목; 보다 더 많은 키가 있는 경우 이렇게 하면이를 throw 한 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2015">You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="3f755-2016">정렬 성공적으로 완료 되지 않은 경우 결과가 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2016">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="3f755-2017">.NET Framework에 포함 되어 미리 정의 된 <xref:System.Collections.IComparer> 다음 표에 나열 된 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2017">The .NET Framework includes predefined <xref:System.Collections.IComparer> implementations listed in the following table.</span></span>  
  
|<span data-ttu-id="3f755-2018">구현</span><span class="sxs-lookup"><span data-stu-id="3f755-2018">Implementation</span></span>|<span data-ttu-id="3f755-2019">설명</span><span class="sxs-lookup"><span data-stu-id="3f755-2019">Description</span></span>|  
|--------------------|-----------------|  
|<xref:System.Collections.CaseInsensitiveComparer?displayProperty=nameWithType>|<span data-ttu-id="3f755-2020">두 개체를 비교 합니다. 하지만 문자열의 대/소문자 구분 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2020">Compares any two objects, but performs a case-insensitive comparison of strings.</span></span>|  
|<xref:System.Collections.Comparer.Default?displayProperty=nameWithType>|<span data-ttu-id="3f755-2021">현재 문화권의 정렬 규칙을 사용 하 여 두 개체를 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2021">Compares any two objects by using the sorting conventions of the current culture.</span></span>|  
|<xref:System.Collections.Comparer.DefaultInvariant?displayProperty=nameWithType>|<span data-ttu-id="3f755-2022">고정 문화권의 정렬 규칙을 사용 하 여 두 개체를 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2022">Compares any two objects by using the sorting conventions of the invariant culture.</span></span>|  
|<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>|<span data-ttu-id="3f755-2023">형식의 두 개체를 비교 `T` 형식의 기본 정렬 순서를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2023">Compares two objects of type `T` by using the type's default sort order.</span></span>|  
  
 <span data-ttu-id="3f755-2024">자신만의 인스턴스를 제공 하 여 사용자 지정 비교를 지원할 수도 있습니다 <xref:System.Collections.IComparer> 구현에는 `comparer` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2024">You can also support custom comparisons by providing an instance of your own <xref:System.Collections.IComparer> implementation to the `comparer` parameter.</span></span> <span data-ttu-id="3f755-2025">이 예제는이 사용자 지정을 정의 하 여 수행 <xref:System.Collections.IComparer> 기본 정렬 순서를 바꾸는 및 대/소문자 구분 문자열 비교를 수행 하는 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2025">The example does this by defining a custom <xref:System.Collections.IComparer> implementation that reverses the default sort order and performs case-insensitive string comparison.</span></span>  
  
 <span data-ttu-id="3f755-2026">이 메서드는 다음과 같이 맞추어 내면적인 정렬 (introsort) 알고리즘을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2026">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="3f755-2027">사용 하 여 파티션 크기를 16 개 요소 경우는 [삽입 정렬](http://en.wikipedia.org/wiki/Insertion_sort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2027">If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-2028">파티션 수가 2를 초과 하는 경우 \* 로그<sup>N</sup>여기서 *N* 는 범위 입력 배열을 사용 하 여 한 [Heapsort](http://en.wikipedia.org/wiki/Heapsort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2028">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-2029">그렇지 않으면 사용는 [Quicksort](http://en.wikipedia.org/wiki/Quicksort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2029">Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="3f755-2030">이 구현은 수행 불안정 정렬 됩니다. 즉, 두 요소가 같은 경우 순서 유지 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2030">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="3f755-2031">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2031">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="3f755-2032">최악의 경우 Heapsort 및 Quicksort 알고리즘을 사용 하 여 정렬 된 배열에 대해이 메서드는는 O (`n` 로그 `n`) 작업, 여기서 `n` 은 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2032">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-2033">다음 코드 예제에서는 키를 포함 하는 첫 번째 배열 하 고 두 번째 배열 값이 들어 있는 두 개의 관련 된 배열을 정렬 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2033">The following code example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values.</span></span> <span data-ttu-id="3f755-2034">정렬 작업을 마쳤으면 기본 비교 연산자 및 정렬 순서를 반대로 하는 사용자 지정 비교자를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2034">Sorts are done using the default comparer and a custom comparer that reverses the sort order.</span></span> <span data-ttu-id="3f755-2035">현재는 결과 <xref:System.Globalization.CultureInfo>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2035">Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.</span></span>  
  
 [!code-cpp[System.Array.Sort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.Sort2/CPP/arraysort2.cpp#1)]
 [!code-csharp[System.Array.Sort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.Sort2/CS/arraysort2.cs#1)]
 [!code-vb[System.Array.Sort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.Sort2/VB/arraysort2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-2036"><paramref name="keys" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2036"><paramref name="keys" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="3f755-2037"><paramref name="keys" /><see cref="T:System.Array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2037">The <paramref name="keys" /><see cref="T:System.Array" /> is multidimensional.</span></span>  
  
 <span data-ttu-id="3f755-2038">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2038">-or-</span></span>  
  
 <span data-ttu-id="3f755-2039"><paramref name="items" /><see cref="T:System.Array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2039">The <paramref name="items" /><see cref="T:System.Array" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-2040"><paramref name="index" />가 <paramref name="keys" />의 하한값보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2040"><paramref name="index" /> is less than the lower bound of <paramref name="keys" />.</span></span>  
  
 <span data-ttu-id="3f755-2041">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2041">-or-</span></span>  
  
 <span data-ttu-id="3f755-2042"><paramref name="length" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2042"><paramref name="length" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-2043"><paramref name="items" />가 <see langword="null" />이 아니고 <paramref name="keys" />의 하한이 <paramref name="items" />의 하한과 일치하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2043"><paramref name="items" /> is not <see langword="null" />, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.</span></span>  
  
 <span data-ttu-id="3f755-2044">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2044">-or-</span></span>  
  
 <span data-ttu-id="3f755-2045"><paramref name="items" />가 <see langword="null" />이 아니고 <paramref name="keys" />의 길이가 <paramref name="items" />의 길이보다 긴 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2045"><paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.</span></span>  
  
 <span data-ttu-id="3f755-2046">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2046">-or-</span></span>  
  
 <span data-ttu-id="3f755-2047"><paramref name="index" /> 및 <paramref name="length" />가 <paramref name="keys" /><see cref="T:System.Array" />의 올바른 범위를 지정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2047"><paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.</span></span>  
  
 <span data-ttu-id="3f755-2048">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2048">-or-</span></span>  
  
 <span data-ttu-id="3f755-2049"><paramref name="items" />가 <see langword="null" />이 아니고 <paramref name="index" /> 및 <paramref name="length" />가 <paramref name="items" /><see cref="T:System.Array" />에서 올바른 범위를 지정하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2049"><paramref name="items" /> is not <see langword="null" />, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />.</span></span>  
  
 <span data-ttu-id="3f755-2050">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2050">-or-</span></span>  
  
 <span data-ttu-id="3f755-2051"><paramref name="comparer" />의 구현으로 인해 정렬 중에 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2051">The implementation of <paramref name="comparer" /> caused an error during the sort.</span></span> <span data-ttu-id="3f755-2052">예를 들어 항목을 자기 자신과 비교할 때 <paramref name="comparer" />에서 0을 반환하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2052">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3f755-2053"><paramref name="comparer" />가 <see langword="null" />이고 <paramref name="keys" /><see cref="T:System.Array" />의 요소 중 하나 이상이 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2053"><paramref name="comparer" /> is <see langword="null" />, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable" /> interface.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="3f755-2054">.NET Framework 4 및 이전 버전에는 Quicksort 알고리즘만을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2054">The .NET Framework 4 and earlier versions used only the Quicksort algorithm.</span></span> <span data-ttu-id="3f755-2055">Quicksort 식별 하면 정렬 작업이 throw 하는 일부 상황에서 잘못 된 비교자는 <see cref="T:System.IndexOutOfRangeException" /> 예외를 throw 하 고는 <see cref="T:System.ArgumentException" /> 호출자에 게는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2055">Quicksort identifies invalid comparers in some situations in which the sorting operation throws an <see cref="T:System.IndexOutOfRangeException" /> exception, and throws an <see cref="T:System.ArgumentException" /> exception to the caller.</span></span> <span data-ttu-id="3f755-2056">부터는 [!INCLUDE[net_v45](~/includes/net-v45-md.md)], 수를 이전에 정렬 작업에서 발생 했습니다 <see cref="T:System.ArgumentException" /> 삽입 정렬 및 heapsort 알고리즘 잘못 된 비교자를 감지 하지 않으면, 예외를 throw 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2056">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], it is possible that sorting operations that previously threw <see cref="T:System.ArgumentException" /> will not throw an exception, because the insertion sort and heapsort algorithms do not detect an invalid comparer.</span></span> <span data-ttu-id="3f755-2057">대부분의 경우 16 개 요소 배열에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2057">For the most part, this applies to arrays with fewer than 16 elements.</span></span></para>
        </block>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="Overload:System.Array.BinarySearch" />
      </Docs>
    </Member>
    <Member MemberName="Sort&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Sort&lt;T&gt; (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort&lt;T&gt;(!!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort``1(``0[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort(Of T) (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Sort(cli::array &lt;T&gt; ^ array);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-2058">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2058">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-2059">정렬할 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2059">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort.</span></span></param>
        <summary><span data-ttu-id="3f755-2060"><see cref="T:System.Array" />에 있는 각 요소의 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 구현을 사용하여 전체 <see cref="T:System.Array" />의 요소를 정렬합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2060">Sorts the elements in an entire <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each element of the <see cref="T:System.Array" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2061">각 요소 `array` 구현 해야 합니다는 <xref:System.IComparable%601> 제네릭 인터페이스를 다른 모든 요소와 비교할 수 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2061">Each element of `array` must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other element in `array`.</span></span>  
  
 <span data-ttu-id="3f755-2062">정렬 성공적으로 완료 되지 않은 경우 결과가 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2062">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="3f755-2063">이 메서드는 다음과 같이 맞추어 내면적인 정렬 (introsort) 알고리즘을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2063">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="3f755-2064">사용 하 여 파티션 크기를 16 개 요소 경우는 [삽입 정렬](http://en.wikipedia.org/wiki/Insertion_sort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2064">If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-2065">파티션 수가 2를 초과 하는 경우 \* 로그<sup>N</sup>여기서 *N* 는 범위 입력 배열을 사용 하 여 한 [Heapsort](http://en.wikipedia.org/wiki/Heapsort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2065">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-2066">그렇지 않으면 사용는 [Quicksort](http://en.wikipedia.org/wiki/Quicksort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2066">Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="3f755-2067">이 구현은 수행 불안정 정렬 됩니다. 즉, 두 요소가 같은 경우 순서 유지 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2067">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="3f755-2068">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2068">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="3f755-2069">최악의 경우 Heapsort 및 Quicksort 알고리즘을 사용 하 여 정렬 된 배열에 대해이 메서드는는 O (`n` 로그 `n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2069">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-2070">다음 코드 예제는 <xref:System.Array.Sort%60%601%28%60%600%5B%5D%29> 제네릭 메서드 오버 로드와 <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%29> 제네릭 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2070">The following code example demonstrates the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%29> generic method overload and the <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%29> generic method overload.</span></span> <span data-ttu-id="3f755-2071">임의의 순서로 문자열 배열을 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2071">An array of strings is created, in no particular order.</span></span>  
  
 <span data-ttu-id="3f755-2072">배열은 표시 하 고 정렬 하 고 다시 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2072">The array is displayed, sorted, and displayed again.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-2073">에 대 한 호출에서 <xref:System.Array.Sort%2A> 및 <xref:System.Array.BinarySearch%2A> Visual Basic, C# 및 c + + 첫 번째 인수의 형식에서 제네릭 형식 매개 변수의 형식을 유추 하기 때문에 제네릭 메서드를 호출 하는 제네릭이 다른 보이지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2073">The calls to the <xref:System.Array.Sort%2A> and <xref:System.Array.BinarySearch%2A> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument.</span></span> <span data-ttu-id="3f755-2074">사용 하는 경우는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) Microsoft intermediate language MSIL ()을 검사 하려면 확인할 수 있습니다는 제네릭 메서드의 호출 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2074">If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</span></span>  
  
 <span data-ttu-id="3f755-2075"><xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%29> 하나에 없는 배열과 하나는, 제네릭 메서드 오버 로드는 다음 두 개의 문자열을 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2075">The <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%29> generic method overload is then used to search for two strings, one that is not in the array and one that is.</span></span> <span data-ttu-id="3f755-2076">배열 및 반환 값은 <xref:System.Array.BinarySearch%2A> 메서드에 전달 되는 `ShowWhere` 문자열이 발견 되 고 그렇지 않은 경우 요소 검색 문자열은 사이 해당 배열에 있는 경우 인덱스 값을 표시 하는 제네릭 메서드를 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2076">The array and the return value of the <xref:System.Array.BinarySearch%2A> method are passed to the `ShowWhere` generic method, which displays the index value if the string is found, and otherwise the elements the search string would fall between if it were in the array.</span></span> <span data-ttu-id="3f755-2077">인덱스는 문자열이 n 경우 음수 배열에 하므로 `ShowWhere` 메서드를 사용 하며 비트 보수 (에서 ~ C# 및 Visual c + + 연산자 `Xor` Visual Basic의-1) 검색 stri 보다 큰 목록에서 첫 번째 요소의 인덱스를 가져옵니다 ng 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2077">The index is negative if the string is not n the array, so the `ShowWhere` method takes the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) to obtain the index of the first element in the list that is larger than the search string.</span></span>  
  
 [!code-cpp[Array_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_SortSearch/cpp/source.cpp#1)]
 [!code-csharp[Array_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_SortSearch/cs/source.cs#1)]
 [!code-vb[Array_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_SortSearch/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-2078"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2078"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3f755-2079"><paramref name="array" />의 요소 중 하나 이상이 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스를 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2079">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</span></span></exception>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.BinarySearch" />
      </Docs>
    </Member>
    <Member MemberName="Sort&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Sort&lt;T&gt; (T[] array, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort&lt;T&gt;(!!T[] array, class System.Collections.Generic.IComparer`1&lt;!!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort(Of T) (array As T(), comparer As IComparer(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Sort(cli::array &lt;T&gt; ^ array, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-2080">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2080">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-2081">정렬할 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2081">The one-dimensional, zero-base <see cref="T:System.Array" /> to sort</span></span></param>
        <param name="comparer"><span data-ttu-id="3f755-2082">요소를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IComparer`1" /> 제네릭 인터페이스 구현이거나 각 요소의 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 구현을 사용할 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2082">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or <see langword="null" /> to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</span></span></param>
        <summary><span data-ttu-id="3f755-2083">지정한 <see cref="T:System.Array" /> 제네릭 인터페이스를 사용하여 <see cref="T:System.Collections.Generic.IComparer`1" />의 요소를 정렬합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2083">Sorts the elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2084">경우 `comparer` 은 `null`의 각 요소 `array` 구현 해야 합니다는 <xref:System.IComparable%601> 제네릭 인터페이스를 다른 모든 요소와 비교할 수 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2084">If `comparer` is `null`, each element of `array` must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other element in `array`.</span></span>  
  
 <span data-ttu-id="3f755-2085">정렬 성공적으로 완료 되지 않은 경우 결과가 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2085">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="3f755-2086">이 메서드는 다음과 같이 맞추어 내면적인 정렬 (introsort) 알고리즘을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2086">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="3f755-2087">사용 하 여 파티션 크기를 16 개 요소 경우는 [삽입 정렬](http://en.wikipedia.org/wiki/Insertion_sort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2087">If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-2088">파티션 수가 2를 초과 하는 경우 \* 로그<sup>N</sup>여기서 *N* 는 범위 입력 배열을 사용 하 여 한 [Heapsort](http://en.wikipedia.org/wiki/Heapsort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2088">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-2089">그렇지 않으면 사용는 [Quicksort](http://en.wikipedia.org/wiki/Quicksort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2089">Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="3f755-2090">이 구현은 수행 불안정 정렬 됩니다. 즉, 두 요소가 같은 경우 순서 유지 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2090">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="3f755-2091">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2091">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="3f755-2092">최악의 경우 Heapsort 및 Quicksort 알고리즘을 사용 하 여 정렬 된 배열에 대해이 메서드는는 O (`n` 로그 `n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2092">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-2093">다음 코드 예제는 <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 제네릭 메서드 오버 로드와 <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 제네릭 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2093">The following code example demonstrates the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload and the <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload.</span></span>  
  
 <span data-ttu-id="3f755-2094">코드 예제에서는 문자열에 대 한 대체 비교자 정의 `ReverseCompare`를 구현 하는 `IComparer<string>` (`IComparer(Of String)` Visual Basic의 `IComparer<String^>` Visual c + +에서) 제네릭 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2094">The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="3f755-2095">비교자를 호출 하 여는 <xref:System.String.CompareTo%28System.String%29> 메서드를 문자열 높음-낮음 낮은-높은 대신 순서로 정렬 되도록 비교 대상의 순서를 반대로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2095">The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</span></span>  
  
 <span data-ttu-id="3f755-2096">배열은 표시 하 고 정렬 하 고 다시 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2096">The array is displayed, sorted, and displayed again.</span></span> <span data-ttu-id="3f755-2097">배열을 사용 하기 위해 정렬 해야는 <xref:System.Array.BinarySearch%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-2097">Arrays must be sorted in order to use the <xref:System.Array.BinarySearch%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-2098">에 대 한 호출에서 <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 및 <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> Visual Basic, C# 및 c + + 첫 번째 인수의 형식에서 제네릭 형식 매개 변수의 형식을 유추 하기 때문에 제네릭 메서드를 호출 하는 제네릭이 다른 보이지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2098">The calls to the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> and <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument.</span></span> <span data-ttu-id="3f755-2099">사용 하는 경우는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) Microsoft intermediate language MSIL ()을 검사 하려면 확인할 수 있습니다는 제네릭 메서드의 호출 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2099">If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</span></span>  
  
 <span data-ttu-id="3f755-2100"><xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 하나에 없는 배열과 하나는, 제네릭 메서드 오버 로드는 다음 두 개의 문자열을 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2100">The <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload is then used to search for two strings, one that is not in the array and one that is.</span></span> <span data-ttu-id="3f755-2101">배열 및 반환 값은 <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 메서드에 전달 되는 `ShowWhere` 문자열이 발견 되 고 그렇지 않은 경우 요소 검색 문자열은 사이 해당 배열에 있는 경우 인덱스 값을 표시 하는 제네릭 메서드를 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2101">The array and the return value of the <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> method are passed to the `ShowWhere` generic method, which displays the index value if the string is found, and otherwise the elements the search string would fall between if it were in the array.</span></span> <span data-ttu-id="3f755-2102">인덱스는 문자열이 n 경우 음수 배열에 하므로 `ShowWhere` 메서드를 사용 하며 비트 보수 (에서 ~ C# 및 Visual c + + 연산자 `Xor` Visual Basic의-1) 검색 stri 보다 큰 목록에서 첫 번째 요소의 인덱스를 가져옵니다 ng 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2102">The index is negative if the string is not n the array, so the `ShowWhere` method takes the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) to obtain the index of the first element in the list that is larger than the search string.</span></span>  
  
 [!code-cpp[Array_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_SortSearchComparer/cpp/source.cpp#1)]
 [!code-csharp[Array_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_SortSearchComparer/cs/source.cs#1)]
 [!code-vb[Array_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_SortSearchComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-2103"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2103"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3f755-2104"><paramref name="comparer" />가 <see langword="null" />이고 <paramref name="array" />의 요소 중 하나 이상이 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스를 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2104"><paramref name="comparer" /> is <see langword="null" />, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3f755-2105"><paramref name="comparer" />의 구현으로 인해 정렬 중에 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2105">The implementation of <paramref name="comparer" /> caused an error during the sort.</span></span> <span data-ttu-id="3f755-2106">예를 들어 항목을 자기 자신과 비교할 때 <paramref name="comparer" />에서 0을 반환하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2106">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="3f755-2107">.NET Framework 4 및 이전 버전에는 Quicksort 알고리즘만을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2107">The .NET Framework 4 and earlier versions used only the Quicksort algorithm.</span></span> <span data-ttu-id="3f755-2108">Quicksort 식별 하면 정렬 작업이 throw 하는 일부 상황에서 잘못 된 비교자는 <see cref="T:System.IndexOutOfRangeException" /> 예외를 throw 하 고는 <see cref="T:System.ArgumentException" /> 호출자에 게는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2108">Quicksort identifies invalid comparers in some situations in which the sorting operation throws an <see cref="T:System.IndexOutOfRangeException" /> exception, and throws an <see cref="T:System.ArgumentException" /> exception to the caller.</span></span> <span data-ttu-id="3f755-2109">부터는 [!INCLUDE[net_v45](~/includes/net-v45-md.md)], 수를 이전에 정렬 작업에서 발생 했습니다 <see cref="T:System.ArgumentException" /> 삽입 정렬 및 heapsort 알고리즘 잘못 된 비교자를 감지 하지 않으면, 예외를 throw 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2109">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], it is possible that sorting operations that previously threw <see cref="T:System.ArgumentException" /> will not throw an exception, because the insertion sort and heapsort algorithms do not detect an invalid comparer.</span></span> <span data-ttu-id="3f755-2110">대부분의 경우 16 개 요소 배열에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2110">For the most part, this applies to arrays with fewer than 16 elements.</span></span></para>
        </block>
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.BinarySearch" />
      </Docs>
    </Member>
    <Member MemberName="Sort&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Sort&lt;T&gt; (T[] array, Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort&lt;T&gt;(!!T[] array, class System.Comparison`1&lt;!!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort``1(``0[],System.Comparison{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort(Of T) (array As T(), comparison As Comparison(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Sort(cli::array &lt;T&gt; ^ array, Comparison&lt;T&gt; ^ comparison);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-2111">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2111">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-2112">정렬할 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2112">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort</span></span></param>
        <param name="comparison"><span data-ttu-id="3f755-2113">요소를 비교할 때 사용할 <see cref="T:System.Comparison`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2113">The <see cref="T:System.Comparison`1" /> to use when comparing elements.</span></span></param>
        <summary><span data-ttu-id="3f755-2114">지정한 <see cref="T:System.Array" />을 사용하여 <see cref="T:System.Comparison`1" />의 요소를 정렬합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2114">Sorts the elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Comparison`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2115">정렬 성공적으로 완료 되지 않은 경우 결과가 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2115">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="3f755-2116">이 메서드는 다음과 같이 맞추어 내면적인 정렬 (introsort) 알고리즘을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2116">This method uses introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="3f755-2117">사용 하 여 파티션 크기를 16 개 요소 경우는 [삽입 정렬](http://en.wikipedia.org/wiki/Insertion_sort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2117">If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-2118">파티션 수가 2를 초과 하는 경우 \* 로그<sup>N</sup>여기서 *N* 는 범위 입력 배열을 사용 하 여 한 [Heapsort](http://en.wikipedia.org/wiki/Heapsort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2118">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-2119">그렇지 않으면 사용는 [Quicksort](http://en.wikipedia.org/wiki/Quicksort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2119">Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="3f755-2120">이 구현은 수행 불안정 정렬 됩니다. 즉, 두 요소가 같은 경우 순서 유지 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2120">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="3f755-2121">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2121">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="3f755-2122">최악의 경우 Heapsort 및 Quicksort 알고리즘을 사용 하 여 정렬 된 배열에 대해이 메서드는는 O (`n` 로그 `n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2122">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-2123">다음 코드 예제는 <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2123">The following code example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="3f755-2124">코드 예제에서는 문자열에 대 한 대체 비교 메서드를 정의 `CompareDinosByLength`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2124">The code example defines an alternative comparison method for strings, named `CompareDinosByLength`.</span></span> <span data-ttu-id="3f755-2125">이 방법은 다음과 같습니다: 테스트는 comparandsare 먼저`null`, null 참조는 null이 아닌 미만으로 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2125">This method works as follows: First, the comparandsare tested for`null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="3f755-2126">둘째, 문자열 길이 비교 하 고 더 긴 문자열이 큰 것으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2126">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="3f755-2127">셋째, 길이 값이 같으면 일반 문자열 비교 ´ ù.</span><span class="sxs-lookup"><span data-stu-id="3f755-2127">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="3f755-2128">문자열의 배열 만들어지고 특정 순서 없이에서 4 개의 문자열 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2128">A array of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="3f755-2129">목록에는 빈 문자열과 null 참조가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2129">The list also includes an empty string and a null reference.</span></span> <span data-ttu-id="3f755-2130">사용 하 여 정렬 목록이 표시 되는 <xref:System.Comparison%601> 나타내는 제네릭 대리자는 `CompareDinosByLength` 메서드를 다시 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2130">The list is displayed, sorted using a <xref:System.Comparison%601> generic delegate representing the `CompareDinosByLength` method, and displayed again.</span></span>  
  
 [!code-cpp[Array_SortComparison#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_SortComparison/cpp/source.cpp#1)]
 [!code-csharp[Array_SortComparison#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_SortComparison/cs/source.cs#1)]
 [!code-vb[Array_SortComparison#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_SortComparison/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-2131"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2131"><paramref name="array" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="3f755-2132">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2132">-or-</span></span>  
  
 <span data-ttu-id="3f755-2133"><paramref name="comparison" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2133"><paramref name="comparison" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3f755-2134"><paramref name="comparison" />의 구현으로 인해 정렬 중에 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2134">The implementation of <paramref name="comparison" /> caused an error during the sort.</span></span> <span data-ttu-id="3f755-2135">예를 들어 항목을 자기 자신과 비교할 때 <paramref name="comparison" />에서 0을 반환하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2135">For example, <paramref name="comparison" /> might not return 0 when comparing an item with itself.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="3f755-2136">.NET Framework 4 및 이전 버전에는 Quicksort 알고리즘만을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2136">The .NET Framework 4 and earlier versions used only the Quicksort algorithm.</span></span> <span data-ttu-id="3f755-2137">Quicksort 식별 하면 정렬 작업이 throw 하는 일부 상황에서 잘못 된 비교자는 <see cref="T:System.IndexOutOfRangeException" /> 예외를 throw 하 고는 <see cref="T:System.ArgumentException" /> 호출자에 게는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2137">Quicksort identifies invalid comparers in some situations in which the sorting operation throws an <see cref="T:System.IndexOutOfRangeException" /> exception, and throws an <see cref="T:System.ArgumentException" /> exception to the caller.</span></span> <span data-ttu-id="3f755-2138">부터는 [!INCLUDE[net_v45](~/includes/net-v45-md.md)], 수를 이전에 정렬 작업에서 발생 했습니다 <see cref="T:System.ArgumentException" /> 삽입 정렬 및 heapsort 알고리즘 잘못 된 비교자를 감지 하지 않으면, 예외를 throw 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2138">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], it is possible that sorting operations that previously threw <see cref="T:System.ArgumentException" /> will not throw an exception, because the insertion sort and heapsort algorithms do not detect an invalid comparer.</span></span> <span data-ttu-id="3f755-2139">대부분의 경우 16 개 요소 배열에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2139">For the most part, this applies to arrays with fewer than 16 elements.</span></span></para>
        </block>
        <altmember cref="T:System.Comparison`1" />
        <altmember cref="Overload:System.Array.BinarySearch" />
      </Docs>
    </Member>
    <Member MemberName="Sort&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Sort&lt;T&gt; (T[] array, int index, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort&lt;T&gt;(!!T[] array, int32 index, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort``1(``0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort(Of T) (array As T(), index As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Sort(cli::array &lt;T&gt; ^ array, int index, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-2140">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2140">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-2141">정렬할 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2141">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort</span></span></param>
        <param name="index"><span data-ttu-id="3f755-2142">정렬할 범위의 시작 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2142">The starting index of the range to sort.</span></span></param>
        <param name="length"><span data-ttu-id="3f755-2143">정렬할 범위에 있는 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2143">The number of elements in the range to sort.</span></span></param>
        <summary><span data-ttu-id="3f755-2144"><see cref="T:System.Array" />에 있는 각 요소의 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 구현을 사용하여 <see cref="T:System.Array" />의 요소 범위에 있는 요소를 정렬합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2144">Sorts the elements in a range of elements in an <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each element of the <see cref="T:System.Array" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2145">각 요소에 있는 요소의 지정된 된 범위 내 `array` 구현 해야 합니다는 <xref:System.IComparable%601> 제네릭 인터페이스를 다른 모든 요소와 비교할 수 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2145">Each element within the specified range of elements in `array` must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other element in `array`.</span></span>  
  
 <span data-ttu-id="3f755-2146">정렬 성공적으로 완료 되지 않은 경우 결과가 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2146">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="3f755-2147">이 메서드는 다음과 같이 맞추어 내면적인 정렬 (introsort) 알고리즘을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2147">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="3f755-2148">사용 하 여 파티션 크기를 16 개 요소 경우는 [삽입 정렬](http://en.wikipedia.org/wiki/Insertion_sort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2148">If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-2149">파티션 수가 2를 초과 하는 경우 \* 로그<sup>N</sup>여기서 *N* 는 범위 입력 배열을 사용 하 여 한 [Heapsort](http://en.wikipedia.org/wiki/Heapsort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2149">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-2150">그렇지 않으면 사용는 [Quicksort](http://en.wikipedia.org/wiki/Quicksort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2150">Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="3f755-2151">이 구현은 수행 불안정 정렬 됩니다. 즉, 두 요소가 같은 경우 순서 유지 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2151">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="3f755-2152">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2152">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="3f755-2153">최악의 경우 Heapsort 및 Quicksort 알고리즘을 사용 하 여 정렬 된 배열에 대해이 메서드는는 O (`n` 로그 `n`) 작업, 여기서 `n` 은 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2153">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-2154">다음 코드 예제는 <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 제네릭 메서드 오버 로드와 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 배열 범위를 정렬 하는 것에 대 한 제네릭 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2154">The following code example demonstrates the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> generic method overload and the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload for sorting a range in an array.</span></span>  
  
 <span data-ttu-id="3f755-2155">코드 예제에서는 문자열에 대 한 대체 비교자 정의 `ReverseCompare`를 구현 하는 `IComparer<string>` (`IComparer(Of String)` Visual Basic의 `IComparer<String^>` Visual c + +에서) 제네릭 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2155">The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="3f755-2156">비교자를 호출 하 여는 <xref:System.String.CompareTo%28System.String%29> 메서드를 문자열 높음-낮음 낮은-높은 대신 순서로 정렬 되도록 비교 대상의 순서를 반대로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2156">The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</span></span>  
  
 <span data-ttu-id="3f755-2157">코드 예제에서는 만들고 세 육 식 동물 (정확 하 게 티라) 3 초 식으로 구성 된 공룡 이름의 배열을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2157">The code example creates and displays an array of dinosaur names, consisting of three herbivores followed by three carnivores (tyrannosaurids, to be precise).</span></span> <span data-ttu-id="3f755-2158"><xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 제네릭 메서드 오버 로드 하는 데 다음 표시 되는 배열의 마지막 세 요소를 정렬 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2158">The <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> generic method overload is used to sort the last three elements of the array, which is then displayed.</span></span> <span data-ttu-id="3f755-2159"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 제네릭 메서드 오버 로드를 사용 `ReverseCompare` 마지막 세 요소를 반대 순서로 정렬 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2159">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload is used with `ReverseCompare` to sort the last three elements in reverse order.</span></span> <span data-ttu-id="3f755-2160">완전히 바뀐된 공룡의 다시 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2160">The thoroughly confused dinosaurs are displayed again.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-2161">에 대 한 호출에서 <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 및 <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> Visual Basic, C# 및 c + + 첫 번째 인수의 형식에서 제네릭 형식 매개 변수의 형식을 유추 하기 때문에 제네릭 메서드를 호출 하는 제네릭이 다른 보이지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2161">The calls to the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> and <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument.</span></span> <span data-ttu-id="3f755-2162">사용 하는 경우는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) Microsoft intermediate language MSIL ()을 검사 하려면 확인할 수 있습니다는 제네릭 메서드의 호출 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2162">If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</span></span>  
  
 [!code-cpp[Array_SortIntIntIComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_SortIntIntIComparer/cpp/source.cpp#1)]
 [!code-csharp[Array_SortIntIntIComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_SortIntIntIComparer/cs/source.cs#1)]
 [!code-vb[Array_SortIntIntIComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_SortIntIntIComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-2163"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2163"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-2164"><paramref name="index" />가 <paramref name="array" />의 하한값보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2164"><paramref name="index" /> is less than the lower bound of <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="3f755-2165">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2165">-or-</span></span>  
  
 <span data-ttu-id="3f755-2166"><paramref name="length" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2166"><paramref name="length" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-2167"><paramref name="index" /> 및 <paramref name="length" />가 <paramref name="array" />의 올바른 범위를 지정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2167"><paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3f755-2168"><paramref name="array" />의 요소 중 하나 이상이 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스를 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2168">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</span></span></exception>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.BinarySearch" />
      </Docs>
    </Member>
    <Member MemberName="Sort&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Sort&lt;T&gt; (T[] array, int index, int length, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort&lt;T&gt;(!!T[] array, int32 index, int32 length, class System.Collections.Generic.IComparer`1&lt;!!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort(Of T) (array As T(), index As Integer, length As Integer, comparer As IComparer(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Sort(cli::array &lt;T&gt; ^ array, int index, int length, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-2169">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2169">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-2170">정렬할 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2170">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort.</span></span></param>
        <param name="index"><span data-ttu-id="3f755-2171">정렬할 범위의 시작 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2171">The starting index of the range to sort.</span></span></param>
        <param name="length"><span data-ttu-id="3f755-2172">정렬할 범위에 있는 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2172">The number of elements in the range to sort.</span></span></param>
        <param name="comparer"><span data-ttu-id="3f755-2173">요소를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IComparer`1" /> 제네릭 인터페이스 구현이거나 각 요소의 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 구현을 사용할 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2173">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or <see langword="null" /> to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</span></span></param>
        <summary><span data-ttu-id="3f755-2174">지정한 <see cref="T:System.Array" /> 제네릭 인터페이스를 사용하여 <see cref="T:System.Collections.Generic.IComparer`1" />의 요소 범위에 있는 요소를 정렬합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2174">Sorts the elements in a range of elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2175">경우 `comparer` 은 `null`, 각 요소에 있는 요소의 지정된 된 범위 내 `array` 구현 해야 합니다는 <xref:System.IComparable%601> 제네릭 인터페이스를 다른 모든 요소와 비교할 수 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2175">If `comparer` is `null`, each element within the specified range of elements in `array` must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other element in `array`.</span></span>  
  
 <span data-ttu-id="3f755-2176">정렬 성공적으로 완료 되지 않은 경우 결과가 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2176">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="3f755-2177">이 메서드는 다음과 같이 맞추어 내면적인 정렬 (introsort) 알고리즘을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2177">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="3f755-2178">사용 하 여 파티션 크기를 16 개 요소 경우는 [삽입 정렬](http://en.wikipedia.org/wiki/Insertion_sort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2178">If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-2179">파티션 수가 2를 초과 하는 경우 \* 로그<sup>N</sup>여기서 *N* 는 범위 입력 배열을 사용 하 여 한 [Heapsort](http://en.wikipedia.org/wiki/Heapsort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2179">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-2180">그렇지 않으면 사용는 [Quicksort](http://en.wikipedia.org/wiki/Quicksort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2180">Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="3f755-2181">이 구현은 수행 불안정 정렬 됩니다. 즉, 두 요소가 같은 경우 순서 유지 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2181">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="3f755-2182">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2182">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="3f755-2183">최악의 경우 Heapsort 및 Quicksort 알고리즘을 사용 하 여 정렬 된 배열에 대해이 메서드는는 O (`n` 로그 `n`) 작업, 여기서 `n` 은 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2183">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-2184">다음 코드 예제는 <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 제네릭 메서드 오버 로드와 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 배열 범위를 정렬 하는 것에 대 한 제네릭 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2184">The following code example demonstrates the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> generic method overload and the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload for sorting a range in an array.</span></span>  
  
 <span data-ttu-id="3f755-2185">코드 예제에서는 문자열에 대 한 대체 비교자 정의 `ReverseCompare`를 구현 하는 `IComparer<string>` (`IComparer(Of String)` Visual Basic의 `IComparer<String^>` Visual c + +에서) 제네릭 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2185">The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="3f755-2186">비교자를 호출 하 여는 <xref:System.String.CompareTo%28System.String%29> 메서드를 문자열 높음-낮음 낮은-높은 대신 순서로 정렬 되도록 비교 대상의 순서를 반대로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2186">The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</span></span>  
  
 <span data-ttu-id="3f755-2187">코드 예제에서는 만들고 세 육 식 동물 (정확 하 게 티라) 3 초 식으로 구성 된 공룡 이름의 배열을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2187">The code example creates and displays an array of dinosaur names, consisting of three herbivores followed by three carnivores (tyrannosaurids, to be precise).</span></span> <span data-ttu-id="3f755-2188"><xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 제네릭 메서드 오버 로드 하는 데 다음 표시 되는 배열의 마지막 세 요소를 정렬 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2188">The <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> generic method overload is used to sort the last three elements of the array, which is then displayed.</span></span> <span data-ttu-id="3f755-2189"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 제네릭 메서드 오버 로드를 사용 `ReverseCompare` 마지막 세 요소를 반대 순서로 정렬 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2189">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overload is used with `ReverseCompare` to sort the last three elements in reverse order.</span></span> <span data-ttu-id="3f755-2190">완전히 바뀐된 공룡의 다시 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2190">The thoroughly confused dinosaurs are displayed again.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-2191">에 대 한 호출에서 <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 및 <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> Visual Basic, C# 및 c + + 첫 번째 인수의 형식에서 제네릭 형식 매개 변수의 형식을 유추 하기 때문에 제네릭 메서드를 호출 하는 제네릭이 다른 보이지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2191">The calls to the <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> and <xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument.</span></span> <span data-ttu-id="3f755-2192">사용 하는 경우는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) Microsoft intermediate language MSIL ()을 검사 하려면 확인할 수 있습니다는 제네릭 메서드의 호출 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2192">If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</span></span>  
  
 [!code-cpp[Array_SortIntIntIComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_SortIntIntIComparer/cpp/source.cpp#1)]
 [!code-csharp[Array_SortIntIntIComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_SortIntIntIComparer/cs/source.cs#1)]
 [!code-vb[Array_SortIntIntIComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_SortIntIntIComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-2193"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2193"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-2194"><paramref name="index" />가 <paramref name="array" />의 하한값보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2194"><paramref name="index" /> is less than the lower bound of <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="3f755-2195">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2195">-or-</span></span>  
  
 <span data-ttu-id="3f755-2196"><paramref name="length" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2196"><paramref name="length" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-2197"><paramref name="index" /> 및 <paramref name="length" />가 <paramref name="array" />의 올바른 범위를 지정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2197"><paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="3f755-2198">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2198">-or-</span></span>  
  
 <span data-ttu-id="3f755-2199"><paramref name="comparer" />의 구현으로 인해 정렬 중에 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2199">The implementation of <paramref name="comparer" /> caused an error during the sort.</span></span> <span data-ttu-id="3f755-2200">예를 들어 항목을 자기 자신과 비교할 때 <paramref name="comparer" />에서 0을 반환하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2200">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3f755-2201"><paramref name="comparer" />가 <see langword="null" />이고 <paramref name="array" />의 요소 중 하나 이상이 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스를 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2201"><paramref name="comparer" /> is <see langword="null" />, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="3f755-2202">.NET Framework 4 및 이전 버전에는 Quicksort 알고리즘만을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2202">The .NET Framework 4 and earlier versions used only the Quicksort algorithm.</span></span> <span data-ttu-id="3f755-2203">Quicksort 식별 하면 정렬 작업이 throw 하는 일부 상황에서 잘못 된 비교자는 <see cref="T:System.IndexOutOfRangeException" /> 예외를 throw 하 고는 <see cref="T:System.ArgumentException" /> 호출자에 게는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2203">Quicksort identifies invalid comparers in some situations in which the sorting operation throws an <see cref="T:System.IndexOutOfRangeException" /> exception, and throws an <see cref="T:System.ArgumentException" /> exception to the caller.</span></span> <span data-ttu-id="3f755-2204">부터는 [!INCLUDE[net_v45](~/includes/net-v45-md.md)], 수를 이전에 정렬 작업에서 발생 했습니다 <see cref="T:System.ArgumentException" /> 삽입 정렬 및 heapsort 알고리즘 잘못 된 비교자를 감지 하지 않으면, 예외를 throw 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2204">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], it is possible that sorting operations that previously threw <see cref="T:System.ArgumentException" /> will not throw an exception, because the insertion sort and heapsort algorithms do not detect an invalid comparer.</span></span> <span data-ttu-id="3f755-2205">대부분의 경우 16 개 요소 배열에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2205">For the most part, this applies to arrays with fewer than 16 elements.</span></span></para>
        </block>
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.BinarySearch" />
      </Docs>
    </Member>
    <Member MemberName="Sort&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Sort&lt;TKey,TValue&gt; (TKey[] keys, TValue[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort&lt;TKey, TValue&gt;(!!TKey[] keys, !!TValue[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort``2(``0[],``1[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort(Of TKey, TValue) (keys As TKey(), items As TValue())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static void Sort(cli::array &lt;TKey&gt; ^ keys, cli::array &lt;TValue&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keys" Type="TKey[]" />
        <Parameter Name="items" Type="TValue[]" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="3f755-2206">키 배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2206">The type of the elements of the key array.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="3f755-2207">항목 배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2207">The type of the elements of the items array.</span></span></typeparam>
        <param name="keys"><span data-ttu-id="3f755-2208">정렬할 키를 포함하는 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2208">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort.</span></span></param>
        <param name="items"><span data-ttu-id="3f755-2209"><c>keys</c>의 키에 해당하는 항목을 포함하는 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)이거나 <c>keys</c>만 정렬할 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2209">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <c>keys</c>, or <see langword="null" /> to sort only <c>keys</c>.</span></span></param>
        <summary><span data-ttu-id="3f755-2210">각 키의 <see cref="T:System.Array" /> 제네릭 인터페이스 구현을 사용하여 첫 번째 <see cref="T:System.Array" />에 있는 키를 기반으로 하는 한 쌍의 <see cref="T:System.IComparable`1" /> 개체(키를 포함하는 개체와 해당 항목을 포함하는 개체)를 정렬합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2210">Sorts a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2211">각 키에는 `keys` <xref:System.Array> 해당 항목에는 `items` <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2211">Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>.</span></span> <span data-ttu-id="3f755-2212">키를 정렬 하는 동안 해당 항목의 위치가 변경 되는 경우는 `items` <xref:System.Array> 마찬가지로 위치가 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2212">When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned.</span></span> <span data-ttu-id="3f755-2213">따라서는 `items` <xref:System.Array> 에 해당 하는 키의 배열에 따라 정렬 된 `keys` <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2213">Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.</span></span>  
  
 <span data-ttu-id="3f755-2214">각 키에는 `keys` <xref:System.Array> 구현 해야 합니다는 <xref:System.IComparable%601> 제네릭 인터페이스를 다른 모든 키와 비교할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2214">Each key in the `keys`<xref:System.Array> must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other key.</span></span>  
  
 <span data-ttu-id="3f755-2215">키 보다 더 많은 항목이 있지만 키가 없는 해당 항목은 정렬 되지 정렬할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2215">You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted.</span></span> <span data-ttu-id="3f755-2216">정렬할 수 없습니다. 항목; 보다 더 많은 키가 있는 경우 이렇게 하면이를 throw 한 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2216">You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="3f755-2217">정렬 성공적으로 완료 되지 않은 경우 결과가 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2217">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="3f755-2218">이 메서드는 다음과 같이 맞추어 내면적인 정렬 (introsort) 알고리즘을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2218">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="3f755-2219">사용 하 여 파티션 크기를 16 개 요소 경우는 [삽입 정렬](http://en.wikipedia.org/wiki/Insertion_sort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2219">If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-2220">파티션 수가 2를 초과 하는 경우 \* 로그<sup>N</sup>여기서 *N* 는 범위 입력 배열을 사용 하 여 한 [Heapsort](http://en.wikipedia.org/wiki/Heapsort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2220">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-2221">그렇지 않으면 사용는 [Quicksort](http://en.wikipedia.org/wiki/Quicksort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2221">Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="3f755-2222">이 구현은 수행 불안정 정렬 됩니다. 즉, 두 요소가 같은 경우 순서 유지 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2222">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="3f755-2223">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2223">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="3f755-2224">최악의 경우 Heapsort 및 Quicksort 알고리즘을 사용 하 여 정렬 된 배열에 대해이 메서드는는 O (`n` 로그 `n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2224">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-2225">다음 코드 예제는 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>, <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>, <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29>, 및 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 쌍을 키와 값을 나타내는 배열 정렬에 대 한 제네릭 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2225">The following code example demonstrates the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>, <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>, <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29>, and <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overloads, for sorting pairs of arrays that represent keys and values.</span></span>  
  
 <span data-ttu-id="3f755-2226">코드 예제에서는 문자열에 대 한 대체 비교자 정의 `ReverseCompare`를 구현 하는 `IComparer<string>` (`IComparer(Of String)` Visual Basic의 `IComparer<String^>` Visual c + +에서) 제네릭 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2226">The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="3f755-2227">비교자를 호출 하 여는 <xref:System.String.CompareTo%28System.String%29> 메서드를 문자열 높음-낮음 낮은-높은 대신 순서로 정렬 되도록 비교 대상의 순서를 반대로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2227">The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</span></span>  
  
 <span data-ttu-id="3f755-2228">코드 예제에서는 만들고 공룡 이름 (키)의 배열 및 각 공룡 미터 (값)의 최대 길이 나타내는 정수 배열을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2228">The code example creates and displays an array of dinosaur names (the keys) and an array of integers representing the maximum length of each dinosaur in meters (the values).</span></span> <span data-ttu-id="3f755-2229">다음 배열 정렬 이며 여러 번 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2229">The arrays are then sorted and displayed several times:</span></span>  
  
-   <span data-ttu-id="3f755-2230"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29> 두 배열에서 첫 번째 배열 공룡 이름의 순서로 정렬 하려면 오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2230">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29> overload is used to sort both arrays in order of the dinosaur names in the first array.</span></span>  
  
-   <span data-ttu-id="3f755-2231"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 오버 로드와의 인스턴스 `ReverseCompare` 쌍을 이루는 배열의 정렬 순서를 반대로 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2231">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload and an instance of `ReverseCompare` are used to reverse the sort order of the paired arrays.</span></span>  
  
-   <span data-ttu-id="3f755-2232"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 두 배열의 마지막 세 요소를 정렬 하려면 오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2232">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload is used to sort the last three elements of both arrays.</span></span>  
  
-   <span data-ttu-id="3f755-2233"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 오버 로드는 두 배열의 마지막 세 요소를 반대 순서로 정렬할 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2233">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload is used to sort the last three elements of both arrays in reverse order.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-2234">Visual Basic, C# 및 c + +의 처음 두 개의 인수 형식에서 제네릭 형식 매개 변수의 형식을 유추 하기 때문에 제네릭 메서드를 호출 제네릭이 아닌 대응에 대 한 호출에서 다르게 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2234">The calls to the generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first two arguments.</span></span> <span data-ttu-id="3f755-2235">사용 하는 경우는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) Microsoft intermediate language MSIL ()을 검사 하려면 확인할 수 있습니다는 제네릭 메서드의 호출 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2235">If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</span></span>  
  
 [!code-cpp[Array_Sort2IntIntIComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cpp/source.cpp#1)]
 [!code-csharp[Array_Sort2IntIntIComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cs/source.cs#1)]
 [!code-vb[Array_Sort2IntIntIComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_Sort2IntIntIComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-2236"><paramref name="keys" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2236"><paramref name="keys" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-2237"><paramref name="items" />가 <see langword="null" />이 아니고 <paramref name="keys" />의 하한이 <paramref name="items" />의 하한과 일치하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2237"><paramref name="items" /> is not <see langword="null" />, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.</span></span>  
  
 <span data-ttu-id="3f755-2238">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2238">-or-</span></span>  
  
 <span data-ttu-id="3f755-2239"><paramref name="items" />가 <see langword="null" />이 아니고 <paramref name="keys" />의 길이가 <paramref name="items" />의 길이보다 긴 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2239"><paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3f755-2240"><paramref name="keys" /><see cref="T:System.Array" />의 요소 중 하나 이상이 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스를 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2240">One or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</span></span></exception>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.BinarySearch" />
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
      </Docs>
    </Member>
    <Member MemberName="Sort&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Sort&lt;TKey,TValue&gt; (TKey[] keys, TValue[] items, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort&lt;TKey, TValue&gt;(!!TKey[] keys, !!TValue[] items, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort(Of TKey, TValue) (keys As TKey(), items As TValue(), comparer As IComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static void Sort(cli::array &lt;TKey&gt; ^ keys, cli::array &lt;TValue&gt; ^ items, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keys" Type="TKey[]" />
        <Parameter Name="items" Type="TValue[]" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="3f755-2241">키 배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2241">The type of the elements of the key array.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="3f755-2242">항목 배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2242">The type of the elements of the items array.</span></span></typeparam>
        <param name="keys"><span data-ttu-id="3f755-2243">정렬할 키를 포함하는 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2243">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort.</span></span></param>
        <param name="items"><span data-ttu-id="3f755-2244"><c>keys</c>의 키에 해당하는 항목을 포함하는 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)이거나 <c>keys</c>만 정렬할 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2244">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <c>keys</c>, or <see langword="null" /> to sort only <c>keys</c>.</span></span></param>
        <param name="comparer"><span data-ttu-id="3f755-2245">요소를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IComparer`1" /> 제네릭 인터페이스 구현이거나 각 요소의 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 구현을 사용할 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2245">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or <see langword="null" /> to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</span></span></param>
        <summary><span data-ttu-id="3f755-2246">지정한 <see cref="T:System.Array" /> 제네릭 인터페이스를 사용하여 첫 번째 <see cref="T:System.Array" />에 있는 키를 기반으로 하는 한 쌍의 <see cref="T:System.Collections.Generic.IComparer`1" /> 개체(키를 포함하는 개체와 해당 항목을 포함하는 개체)를 정렬합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2246">Sorts a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2247">각 키에는 `keys` <xref:System.Array> 해당 항목에는 `items` <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2247">Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>.</span></span> <span data-ttu-id="3f755-2248">키를 정렬 하는 동안 해당 항목의 위치가 변경 되는 경우는 `items` <xref:System.Array> 마찬가지로 위치가 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2248">When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned.</span></span> <span data-ttu-id="3f755-2249">따라서는 `items` <xref:System.Array> 에 해당 하는 키의 배열에 따라 정렬 된 `keys` <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2249">Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.</span></span>  
  
 <span data-ttu-id="3f755-2250">경우 `comparer` 은 `null`, 각 키에서 `keys` <xref:System.Array> 구현 해야 합니다는 <xref:System.IComparable%601> 제네릭 인터페이스를 다른 모든 키와 비교할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2250">If `comparer` is `null`, each key in the `keys`<xref:System.Array> must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other key.</span></span>  
  
 <span data-ttu-id="3f755-2251">키 보다 더 많은 항목이 있지만 키가 없는 해당 항목은 정렬 되지 정렬할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2251">You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted.</span></span> <span data-ttu-id="3f755-2252">정렬할 수 없습니다. 항목; 보다 더 많은 키가 있는 경우 이렇게 하면이를 throw 한 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2252">You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="3f755-2253">정렬 성공적으로 완료 되지 않은 경우 결과가 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2253">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="3f755-2254">이 메서드는 다음과 같이 맞추어 내면적인 정렬 (introsort) 알고리즘을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2254">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="3f755-2255">사용 하 여 파티션 크기를 16 개 요소 경우는 [삽입 정렬](http://en.wikipedia.org/wiki/Insertion_sort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2255">If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-2256">파티션 수가 2를 초과 하는 경우 \* 로그<sup>N</sup>여기서 *N* 는 범위 입력 배열을 사용 하 여 한 [Heapsort](http://en.wikipedia.org/wiki/Heapsort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2256">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-2257">그렇지 않으면 사용는 [Quicksort](http://en.wikipedia.org/wiki/Quicksort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2257">Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="3f755-2258">이 구현은 수행 불안정 정렬 됩니다. 즉, 두 요소가 같은 경우 순서 유지 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2258">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="3f755-2259">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2259">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="3f755-2260">최악의 경우 Heapsort 및 Quicksort 알고리즘을 사용 하 여 정렬 된 배열에 대해이 메서드는는 O (`n` 로그 `n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2260">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-2261">다음 코드 예제는 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>, [\], TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29 >,<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29>, 및 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 쌍을 키와 값을 나타내는 배열 정렬에 대 한 제네릭 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2261">The following code example demonstrates the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>, [\], TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>,<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29>, and <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overloads, for sorting pairs of arrays that represent keys and values.</span></span>  
  
 <span data-ttu-id="3f755-2262">코드 예제에서는 문자열에 대 한 대체 비교자 정의 `ReverseCompare`를 구현 하는 `IComparer<string>` (`IComparer(Of String)` Visual Basic의 `IComparer<String^>` Visual c + +에서) 제네릭 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2262">The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="3f755-2263">비교자를 호출 하 여는 <xref:System.String.CompareTo%28System.String%29> 메서드를 문자열 높음-낮음 낮은-높은 대신 순서로 정렬 되도록 비교 대상의 순서를 반대로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2263">The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</span></span>  
  
 <span data-ttu-id="3f755-2264">코드 예제에서는 만들고 공룡 이름 (키)의 배열 및 각 공룡 미터 (값)의 최대 길이 나타내는 정수 배열을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2264">The code example creates and displays an array of dinosaur names (the keys) and an array of integers representing the maximum length of each dinosaur in meters (the values).</span></span> <span data-ttu-id="3f755-2265">다음 배열 정렬 이며 여러 번 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2265">The arrays are then sorted and displayed several times:</span></span>  
  
-   <span data-ttu-id="3f755-2266"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29> 두 배열에서 첫 번째 배열 공룡 이름의 순서로 정렬 하려면 오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2266">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29> overload is used to sort both arrays in order of the dinosaur names in the first array.</span></span>  
  
-   <span data-ttu-id="3f755-2267">[\], TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29 > 오버 로드와의 인스턴스 `ReverseCompare` 정렬 순서를 반대로 하는 데 사용 됩니다 쌍으로 연결 된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2267">The [\], TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload and an instance of `ReverseCompare` are used to reverse the sort order of the paired arrays.</span></span>  
  
-   <span data-ttu-id="3f755-2268"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 두 배열의 마지막 세 요소를 정렬 하려면 오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2268">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload is used to sort the last three elements of both arrays.</span></span>  
  
-   <span data-ttu-id="3f755-2269"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 오버 로드는 두 배열의 마지막 세 요소를 반대 순서로 정렬할 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2269">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload is used to sort the last three elements of both arrays in reverse order.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-2270">Visual Basic, C# 및 c + +의 처음 두 개의 인수 형식에서 제네릭 형식 매개 변수의 형식을 유추 하기 때문에 제네릭 메서드를 호출 제네릭이 아닌 대응에 대 한 호출에서 다르게 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2270">The calls to the generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first two arguments.</span></span> <span data-ttu-id="3f755-2271">사용 하는 경우는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) Microsoft intermediate language MSIL ()을 검사 하려면 확인할 수 있습니다는 제네릭 메서드의 호출 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2271">If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</span></span>  
  
 [!code-cpp[Array_Sort2IntIntIComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cpp/source.cpp#1)]
 [!code-csharp[Array_Sort2IntIntIComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cs/source.cs#1)]
 [!code-vb[Array_Sort2IntIntIComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_Sort2IntIntIComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-2272"><paramref name="keys" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2272"><paramref name="keys" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-2273"><paramref name="items" />가 <see langword="null" />이 아니고 <paramref name="keys" />의 하한이 <paramref name="items" />의 하한과 일치하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2273"><paramref name="items" /> is not <see langword="null" />, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.</span></span>  
  
 <span data-ttu-id="3f755-2274">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2274">-or-</span></span>  
  
 <span data-ttu-id="3f755-2275"><paramref name="items" />가 <see langword="null" />이 아니고 <paramref name="keys" />의 길이가 <paramref name="items" />의 길이보다 긴 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2275"><paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.</span></span>  
  
 <span data-ttu-id="3f755-2276">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2276">-or-</span></span>  
  
 <span data-ttu-id="3f755-2277"><paramref name="comparer" />의 구현으로 인해 정렬 중에 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2277">The implementation of <paramref name="comparer" /> caused an error during the sort.</span></span> <span data-ttu-id="3f755-2278">예를 들어 항목을 자기 자신과 비교할 때 <paramref name="comparer" />에서 0을 반환하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2278">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3f755-2279"><paramref name="comparer" />가 <see langword="null" />이고 <paramref name="keys" /><see cref="T:System.Array" />의 요소 중 하나 이상이 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스를 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2279"><paramref name="comparer" /> is <see langword="null" />, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="3f755-2280">.NET Framework 4 및 이전 버전에는 Quicksort 알고리즘만을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2280">The .NET Framework 4 and earlier versions used only the Quicksort algorithm.</span></span> <span data-ttu-id="3f755-2281">Quicksort 식별 하면 정렬 작업이 throw 하는 일부 상황에서 잘못 된 비교자는 <see cref="T:System.IndexOutOfRangeException" /> 예외를 throw 하 고는 <see cref="T:System.ArgumentException" /> 호출자에 게는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2281">Quicksort identifies invalid comparers in some situations in which the sorting operation throws an <see cref="T:System.IndexOutOfRangeException" /> exception, and throws an <see cref="T:System.ArgumentException" /> exception to the caller.</span></span> <span data-ttu-id="3f755-2282">부터는 [!INCLUDE[net_v45](~/includes/net-v45-md.md)], 수를 이전에 정렬 작업에서 발생 했습니다 <see cref="T:System.ArgumentException" /> 삽입 정렬 및 heapsort 알고리즘 잘못 된 비교자를 감지 하지 않으면, 예외를 throw 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2282">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], it is possible that sorting operations that previously threw <see cref="T:System.ArgumentException" /> will not throw an exception, because the insertion sort and heapsort algorithms do not detect an invalid comparer.</span></span> <span data-ttu-id="3f755-2283">대부분의 경우 16 개 요소 배열에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2283">For the most part, this applies to arrays with fewer than 16 elements.</span></span></para>
        </block>
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.BinarySearch" />
      </Docs>
    </Member>
    <Member MemberName="Sort&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Sort&lt;TKey,TValue&gt; (TKey[] keys, TValue[] items, int index, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort&lt;TKey, TValue&gt;(!!TKey[] keys, !!TValue[] items, int32 index, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort(Of TKey, TValue) (keys As TKey(), items As TValue(), index As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static void Sort(cli::array &lt;TKey&gt; ^ keys, cli::array &lt;TValue&gt; ^ items, int index, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keys" Type="TKey[]" />
        <Parameter Name="items" Type="TValue[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="3f755-2284">키 배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2284">The type of the elements of the key array.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="3f755-2285">항목 배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2285">The type of the elements of the items array.</span></span></typeparam>
        <param name="keys"><span data-ttu-id="3f755-2286">정렬할 키를 포함하는 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2286">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort.</span></span></param>
        <param name="items"><span data-ttu-id="3f755-2287"><c>keys</c>의 키에 해당하는 항목을 포함하는 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)이거나 <c>keys</c>만 정렬할 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2287">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <c>keys</c>, or <see langword="null" /> to sort only <c>keys</c>.</span></span></param>
        <param name="index"><span data-ttu-id="3f755-2288">정렬할 범위의 시작 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2288">The starting index of the range to sort.</span></span></param>
        <param name="length"><span data-ttu-id="3f755-2289">정렬할 범위에 있는 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2289">The number of elements in the range to sort.</span></span></param>
        <summary><span data-ttu-id="3f755-2290">각 키에서 구현하는 <see cref="T:System.Array" /> 제네릭 인터페이스를 사용하여 첫 번째 <see cref="T:System.Array" />에 있는 키를 기반으로 하는 한 쌍의 <see cref="T:System.IComparable`1" /> 개체(키를 포함하는 개체와 해당 항목을 포함하는 개체)의 요소 범위를 정렬합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2290">Sorts a range of elements in a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2291">각 키에는 `keys` <xref:System.Array> 해당 항목에는 `items` <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2291">Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>.</span></span> <span data-ttu-id="3f755-2292">키를 정렬 하는 동안 해당 항목의 위치가 변경 되는 경우는 `items` <xref:System.Array> 마찬가지로 위치가 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2292">When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned.</span></span> <span data-ttu-id="3f755-2293">따라서는 `items` <xref:System.Array> 에 해당 하는 키의 배열에 따라 정렬 된 `keys` <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2293">Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.</span></span>  
  
 <span data-ttu-id="3f755-2294">에 있는 요소의 지정 된 범위 내에서 각 키의 `keys` <xref:System.Array> 구현 해야 합니다는 <xref:System.IComparable%601> 제네릭 인터페이스를 다른 모든 키와 비교할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2294">Each key within the specified range of elements in the `keys`<xref:System.Array> must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other key.</span></span>  
  
 <span data-ttu-id="3f755-2295">키 보다 더 많은 항목이 있지만 키가 없는 해당 항목은 정렬 되지 정렬할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2295">You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted.</span></span> <span data-ttu-id="3f755-2296">정렬할 수 없습니다. 항목; 보다 더 많은 키가 있는 경우 이렇게 하면이를 throw 한 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2296">You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="3f755-2297">정렬 성공적으로 완료 되지 않은 경우 결과가 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2297">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="3f755-2298">이 메서드는 다음과 같이 맞추어 내면적인 정렬 (introsort) 알고리즘을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2298">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="3f755-2299">사용 하 여 파티션 크기를 16 개 요소 경우는 [삽입 정렬](http://en.wikipedia.org/wiki/Insertion_sort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2299">If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-2300">파티션 수가 2를 초과 하는 경우 \* 로그<sup>N</sup>여기서 *N* 는 범위 입력 배열을 사용 하 여 한 [Heapsort](http://en.wikipedia.org/wiki/Heapsort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2300">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-2301">그렇지 않으면 사용는 [Quicksort](http://en.wikipedia.org/wiki/Quicksort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2301">Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="3f755-2302">이 구현은 수행 불안정 정렬 됩니다. 즉, 두 요소가 같은 경우 순서 유지 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2302">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="3f755-2303">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2303">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="3f755-2304">최악의 경우 Heapsort 및 Quicksort 알고리즘을 사용 하 여 정렬 된 배열에 대해이 메서드는는 O (`n` 로그 `n`) 작업, 여기서 `n` 은 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2304">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-2305">다음 코드 예제는 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>, <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>, [\], TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29 >, 및 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 쌍을 키와 값을 나타내는 배열 정렬에 대 한 제네릭 메서드 오버 로드를 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2305">The following code example demonstrates the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>, <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>, [\], TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29>, and <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overloads, for sorting pairs of arrays that represent keys and values.</span></span>  
  
 <span data-ttu-id="3f755-2306">코드 예제에서는 문자열에 대 한 대체 비교자 정의 `ReverseCompare`를 구현 하는 `IComparer<string>` (`IComparer(Of String)` Visual Basic의 `IComparer<String^>` Visual c + +에서) 제네릭 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2306">The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="3f755-2307">비교자를 호출 하 여는 <xref:System.String.CompareTo%28System.String%29> 메서드를 문자열 높음-낮음 낮은-높은 대신 순서로 정렬 되도록 비교 대상의 순서를 반대로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2307">The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</span></span>  
  
 <span data-ttu-id="3f755-2308">코드 예제에서는 만들고 공룡 이름 (키)의 배열 및 각 공룡 미터 (값)의 최대 길이 나타내는 정수 배열을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2308">The code example creates and displays an array of dinosaur names (the keys) and an array of integers representing the maximum length of each dinosaur in meters (the values).</span></span> <span data-ttu-id="3f755-2309">다음 배열 정렬 이며 여러 번 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2309">The arrays are then sorted and displayed several times:</span></span>  
  
-   <span data-ttu-id="3f755-2310"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29> 두 배열에서 첫 번째 배열 공룡 이름의 순서로 정렬 하려면 오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2310">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29> overload is used to sort both arrays in order of the dinosaur names in the first array.</span></span>  
  
-   <span data-ttu-id="3f755-2311"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 오버 로드와의 인스턴스 `ReverseCompare` 쌍을 이루는 배열의 정렬 순서를 반대로 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2311">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload and an instance of `ReverseCompare` are used to reverse the sort order of the paired arrays.</span></span>  
  
-   <span data-ttu-id="3f755-2312">[\], TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29 > 오버 로드 하는 데 두 배열의 마지막 세 요소를 정렬 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2312">The [\], TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload is used to sort the last three elements of both arrays.</span></span>  
  
-   <span data-ttu-id="3f755-2313"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 오버 로드는 두 배열의 마지막 세 요소를 반대 순서로 정렬할 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2313">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload is used to sort the last three elements of both arrays in reverse order.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-2314">Visual Basic, C# 및 c + +의 처음 두 개의 인수 형식에서 제네릭 형식 매개 변수의 형식을 유추 하기 때문에 제네릭 메서드를 호출 제네릭이 아닌 대응에 대 한 호출에서 다르게 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2314">The calls to the generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first two arguments.</span></span> <span data-ttu-id="3f755-2315">사용 하는 경우는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) Microsoft intermediate language MSIL ()을 검사 하려면 확인할 수 있습니다는 제네릭 메서드의 호출 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2315">If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</span></span>  
  
 [!code-cpp[Array_Sort2IntIntIComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cpp/source.cpp#1)]
 [!code-csharp[Array_Sort2IntIntIComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cs/source.cs#1)]
 [!code-vb[Array_Sort2IntIntIComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_Sort2IntIntIComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-2316"><paramref name="keys" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2316"><paramref name="keys" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-2317"><paramref name="index" />가 <paramref name="keys" />의 하한값보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2317"><paramref name="index" /> is less than the lower bound of <paramref name="keys" />.</span></span>  
  
 <span data-ttu-id="3f755-2318">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2318">-or-</span></span>  
  
 <span data-ttu-id="3f755-2319"><paramref name="length" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2319"><paramref name="length" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-2320"><paramref name="items" />가 <see langword="null" />이 아니고 <paramref name="keys" />의 하한이 <paramref name="items" />의 하한과 일치하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2320"><paramref name="items" /> is not <see langword="null" />, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.</span></span>  
  
 <span data-ttu-id="3f755-2321">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2321">-or-</span></span>  
  
 <span data-ttu-id="3f755-2322"><paramref name="items" />가 <see langword="null" />이 아니고 <paramref name="keys" />의 길이가 <paramref name="items" />의 길이보다 긴 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2322"><paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.</span></span>  
  
 <span data-ttu-id="3f755-2323">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2323">-or-</span></span>  
  
 <span data-ttu-id="3f755-2324"><paramref name="index" /> 및 <paramref name="length" />가 <paramref name="keys" /><see cref="T:System.Array" />의 올바른 범위를 지정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2324"><paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.</span></span>  
  
 <span data-ttu-id="3f755-2325">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2325">-or-</span></span>  
  
 <span data-ttu-id="3f755-2326"><paramref name="items" />가 <see langword="null" />이 아니고 <paramref name="index" /> 및 <paramref name="length" />가 <paramref name="items" /><see cref="T:System.Array" />에서 올바른 범위를 지정하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2326"><paramref name="items" /> is not <see langword="null" />, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3f755-2327"><paramref name="keys" /><see cref="T:System.Array" />의 요소 중 하나 이상이 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스를 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2327">One or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</span></span></exception>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.BinarySearch" />
      </Docs>
    </Member>
    <Member MemberName="Sort&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Sort&lt;TKey,TValue&gt; (TKey[] keys, TValue[] items, int index, int length, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sort&lt;TKey, TValue&gt;(!!TKey[] keys, !!TValue[] items, int32 index, int32 length, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sort(Of TKey, TValue) (keys As TKey(), items As TValue(), index As Integer, length As Integer, comparer As IComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static void Sort(cli::array &lt;TKey&gt; ^ keys, cli::array &lt;TValue&gt; ^ items, int index, int length, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keys" Type="TKey[]" />
        <Parameter Name="items" Type="TValue[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="3f755-2328">키 배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2328">The type of the elements of the key array.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="3f755-2329">항목 배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2329">The type of the elements of the items array.</span></span></typeparam>
        <param name="keys"><span data-ttu-id="3f755-2330">정렬할 키를 포함하는 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2330">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort.</span></span></param>
        <param name="items"><span data-ttu-id="3f755-2331"><c>keys</c>의 키에 해당하는 항목을 포함하는 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)이거나 <c>keys</c>만 정렬할 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2331">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <c>keys</c>, or <see langword="null" /> to sort only <c>keys</c>.</span></span></param>
        <param name="index"><span data-ttu-id="3f755-2332">정렬할 범위의 시작 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2332">The starting index of the range to sort.</span></span></param>
        <param name="length"><span data-ttu-id="3f755-2333">정렬할 범위에 있는 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2333">The number of elements in the range to sort.</span></span></param>
        <param name="comparer"><span data-ttu-id="3f755-2334">요소를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IComparer`1" /> 제네릭 인터페이스 구현이거나 각 요소의 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 구현을 사용할 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2334">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or <see langword="null" /> to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</span></span></param>
        <summary><span data-ttu-id="3f755-2335">지정한 <see cref="T:System.Array" /> 제네릭 인터페이스를 사용하여 첫 번째 <see cref="T:System.Array" />에 있는 키를 기반으로 하는 한 쌍의 <see cref="T:System.Collections.Generic.IComparer`1" /> 개체(키를 포함하는 개체와 해당 항목을 포함하는 개체)의 요소 범위를 정렬합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2335">Sorts a range of elements in a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2336">각 키에는 `keys` <xref:System.Array> 해당 항목에는 `items` <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2336">Each key in the `keys`<xref:System.Array> has a corresponding item in the `items`<xref:System.Array>.</span></span> <span data-ttu-id="3f755-2337">키를 정렬 하는 동안 해당 항목의 위치가 변경 되는 경우는 `items` <xref:System.Array> 마찬가지로 위치가 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2337">When a key is repositioned during the sorting, the corresponding item in the `items`<xref:System.Array> is similarly repositioned.</span></span> <span data-ttu-id="3f755-2338">따라서는 `items` <xref:System.Array> 에 해당 하는 키의 배열에 따라 정렬 된 `keys` <xref:System.Array>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2338">Therefore, the `items`<xref:System.Array> is sorted according to the arrangement of the corresponding keys in the `keys`<xref:System.Array>.</span></span>  
  
 <span data-ttu-id="3f755-2339">경우 `comparer` 은 `null`, 각 키에 있는 요소의 지정 된 범위에서는 `keys` <xref:System.Array> 구현 해야 합니다는 <xref:System.IComparable%601> 제네릭 인터페이스를 다른 모든 키와 비교할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2339">If `comparer` is `null`, each key within the specified range of elements in the `keys`<xref:System.Array> must implement the <xref:System.IComparable%601> generic interface to be capable of comparisons with every other key.</span></span>  
  
 <span data-ttu-id="3f755-2340">키 보다 더 많은 항목이 있지만 키가 없는 해당 항목은 정렬 되지 정렬할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2340">You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted.</span></span> <span data-ttu-id="3f755-2341">정렬할 수 없습니다. 항목; 보다 더 많은 키가 있는 경우 이렇게 하면이를 throw 한 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2341">You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="3f755-2342">정렬 성공적으로 완료 되지 않은 경우 결과가 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2342">If the sort is not successfully completed, the results are undefined.</span></span>  
  
 <span data-ttu-id="3f755-2343">이 메서드는 다음과 같이 맞추어 내면적인 정렬 (introsort) 알고리즘을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2343">This method uses the introspective sort (introsort) algorithm as follows:</span></span>  
  
-   <span data-ttu-id="3f755-2344">사용 하 여 파티션 크기를 16 개 요소 경우는 [삽입 정렬](http://en.wikipedia.org/wiki/Insertion_sort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2344">If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-2345">파티션 수가 2를 초과 하는 경우 \* 로그<sup>N</sup>여기서 *N* 는 범위 입력 배열을 사용 하 여 한 [Heapsort](http://en.wikipedia.org/wiki/Heapsort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2345">If the number of partitions exceeds 2 \* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="3f755-2346">그렇지 않으면 사용는 [Quicksort](http://en.wikipedia.org/wiki/Quicksort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2346">Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.</span></span>  
  
 <span data-ttu-id="3f755-2347">이 구현은 수행 불안정 정렬 됩니다. 즉, 두 요소가 같은 경우 순서 유지 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2347">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="3f755-2348">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2348">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="3f755-2349">최악의 경우 Heapsort 및 Quicksort 알고리즘을 사용 하 여 정렬 된 배열에 대해이 메서드는는 O (`n` 로그 `n`) 작업, 여기서 `n` 은 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2349">For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(`n` log `n`) operation, where `n` is `length`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-2350">다음 코드 예제는 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>, <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>, <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29>, 및 [\], TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32% 2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29 > 쌍을 키와 값을 나타내는 배열 정렬에 대 한 제네릭 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2350">The following code example demonstrates the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29>, <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29>, <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29>, and [\], TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> generic method overloads, for sorting pairs of arrays that represent keys and values.</span></span>  
  
 <span data-ttu-id="3f755-2351">코드 예제에서는 문자열에 대 한 대체 비교자 정의 `ReverseCompare`를 구현 하는 `IComparer<string>`(`IComparer(Of String)` Visual Basic의 `IComparer<String^>` Visual c + +에서) 제네릭 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2351">The code example defines an alternative comparer for strings, named `ReverseCompare`, which implements the `IComparer<string>`(`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="3f755-2352">비교자를 호출 하 여는 <xref:System.String.CompareTo%28System.String%29> 메서드를 문자열 높음-낮음 낮은-높은 대신 순서로 정렬 되도록 비교 대상의 순서를 반대로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2352">The comparer calls the <xref:System.String.CompareTo%28System.String%29> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.</span></span>  
  
 <span data-ttu-id="3f755-2353">코드 예제에서는 만들고 공룡 이름 (키)의 배열 및 각 공룡 미터 (값)의 최대 길이 나타내는 정수 배열을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2353">The code example creates and displays an array of dinosaur names (the keys) and an array of integers representing the maximum length of each dinosaur in meters (the values).</span></span> <span data-ttu-id="3f755-2354">다음 배열 정렬 이며 여러 번 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2354">The arrays are then sorted and displayed several times:</span></span>  
  
-   <span data-ttu-id="3f755-2355"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29> 두 배열에서 첫 번째 배열 공룡 이름의 순서로 정렬 하려면 오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2355">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29> overload is used to sort both arrays in order of the dinosaur names in the first array.</span></span>  
  
-   <span data-ttu-id="3f755-2356"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> 오버 로드와의 인스턴스 `ReverseCompare` 쌍을 이루는 배열의 정렬 순서를 반대로 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2356">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload and an instance of `ReverseCompare` are used to reverse the sort order of the paired arrays.</span></span>  
  
-   <span data-ttu-id="3f755-2357"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 두 배열의 마지막 세 요소를 정렬 하려면 오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2357">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload is used to sort the last three elements of both arrays.</span></span>  
  
-   <span data-ttu-id="3f755-2358">[\], TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29 > 오버 로드를 사용 하는 마지막 세 정렬 하려면 요소가 모두 반대 순서로 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2358">The [\], TValue\<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29> overload is used to sort the last three elements of both arrays in reverse order.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-2359">Visual Basic, C# 및 c + +의 처음 두 개의 인수 형식에서 제네릭 형식 매개 변수의 형식을 유추 하기 때문에 제네릭 메서드를 호출 제네릭이 아닌 대응에 대 한 호출에서 다르게 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2359">The calls to the generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first two arguments.</span></span> <span data-ttu-id="3f755-2360">사용 하는 경우는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) Microsoft intermediate language MSIL ()을 검사 하려면 확인할 수 있습니다는 제네릭 메서드의 호출 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2360">If you use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.</span></span>  
  
 [!code-cpp[Array_Sort2IntIntIComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cpp/source.cpp#1)]
 [!code-csharp[Array_Sort2IntIntIComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_Sort2IntIntIComparer/cs/source.cs#1)]
 [!code-vb[Array_Sort2IntIntIComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_Sort2IntIntIComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-2361"><paramref name="keys" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2361"><paramref name="keys" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-2362"><paramref name="index" />가 <paramref name="keys" />의 하한값보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2362"><paramref name="index" /> is less than the lower bound of <paramref name="keys" />.</span></span>  
  
 <span data-ttu-id="3f755-2363">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2363">-or-</span></span>  
  
 <span data-ttu-id="3f755-2364"><paramref name="length" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2364"><paramref name="length" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f755-2365"><paramref name="items" />가 <see langword="null" />이 아니고 <paramref name="keys" />의 하한이 <paramref name="items" />의 하한과 일치하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2365"><paramref name="items" /> is not <see langword="null" />, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.</span></span>  
  
 <span data-ttu-id="3f755-2366">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2366">-or-</span></span>  
  
 <span data-ttu-id="3f755-2367"><paramref name="items" />가 <see langword="null" />이 아니고 <paramref name="keys" />의 길이가 <paramref name="items" />의 길이보다 긴 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2367"><paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.</span></span>  
  
 <span data-ttu-id="3f755-2368">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2368">-or-</span></span>  
  
 <span data-ttu-id="3f755-2369"><paramref name="index" /> 및 <paramref name="length" />가 <paramref name="keys" /><see cref="T:System.Array" />의 올바른 범위를 지정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2369"><paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.</span></span>  
  
 <span data-ttu-id="3f755-2370">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2370">-or-</span></span>  
  
 <span data-ttu-id="3f755-2371"><paramref name="items" />가 <see langword="null" />이 아니고 <paramref name="index" /> 및 <paramref name="length" />가 <paramref name="items" /><see cref="T:System.Array" />에서 올바른 범위를 지정하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2371"><paramref name="items" /> is not <see langword="null" />, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />.</span></span>  
  
 <span data-ttu-id="3f755-2372">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2372">-or-</span></span>  
  
 <span data-ttu-id="3f755-2373"><paramref name="comparer" />의 구현으로 인해 정렬 중에 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2373">The implementation of <paramref name="comparer" /> caused an error during the sort.</span></span> <span data-ttu-id="3f755-2374">예를 들어 항목을 자기 자신과 비교할 때 <paramref name="comparer" />에서 0을 반환하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2374">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3f755-2375"><paramref name="comparer" />가 <see langword="null" />이고 <paramref name="keys" /><see cref="T:System.Array" />의 요소 중 하나 이상이 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스를 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2375"><paramref name="comparer" /> is <see langword="null" />, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="3f755-2376">.NET Framework 4 및 이전 버전에는 Quicksort 알고리즘만을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2376">The .NET Framework 4 and earlier versions used only the Quicksort algorithm.</span></span> <span data-ttu-id="3f755-2377">Quicksort 식별 하면 정렬 작업이 throw 하는 일부 상황에서 잘못 된 비교자는 <see cref="T:System.IndexOutOfRangeException" /> 예외를 throw 하 고는 <see cref="T:System.ArgumentException" /> 호출자에 게는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2377">Quicksort identifies invalid comparers in some situations in which the sorting operation throws an <see cref="T:System.IndexOutOfRangeException" /> exception, and throws an <see cref="T:System.ArgumentException" /> exception to the caller.</span></span> <span data-ttu-id="3f755-2378">부터는 [!INCLUDE[net_v45](~/includes/net-v45-md.md)], 수를 이전에 정렬 작업에서 발생 했습니다 <see cref="T:System.ArgumentException" /> 삽입 정렬 및 heapsort 알고리즘 잘못 된 비교자를 감지 하지 않으면, 예외를 throw 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2378">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], it is possible that sorting operations that previously threw <see cref="T:System.ArgumentException" /> will not throw an exception, because the insertion sort and heapsort algorithms do not detect an invalid comparer.</span></span> <span data-ttu-id="3f755-2379">대부분의 경우 16 개 요소 배열에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2379">For the most part, this applies to arrays with fewer than 16 elements.</span></span></para>
        </block>
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="Overload:System.Array.BinarySearch" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Array.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3f755-2380"><see cref="T:System.Array" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2380">Gets an object that can be used to synchronize access to the <see cref="T:System.Array" />.</span></span></summary>
        <value><span data-ttu-id="3f755-2381">
          <see cref="T:System.Array" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2381">An object that can be used to synchronize access to the <see cref="T:System.Array" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2382">이 속성을 구현 하는 <xref:System.Collections.ICollection?displayProperty=nameWithType> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2382">This property implements the <xref:System.Collections.ICollection?displayProperty=nameWithType> interface.</span></span>  
  
 <span data-ttu-id="3f755-2383">.NET framework 클래스에 따라 <xref:System.Array> 사용 하 여 컬렉션의 동기화 된 버전 제공는 <xref:System.Array.SyncRoot%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2383">.NET Framework classes based on <xref:System.Array> provide their own synchronized version of the collection using the <xref:System.Array.SyncRoot%2A> property.</span></span>  
  
 <span data-ttu-id="3f755-2384">배열을 사용 하는 클래스를 사용 하 여 동기화 직접 구현할 수도 <xref:System.Array.SyncRoot%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2384">Classes that use arrays can also implement their own synchronization using the <xref:System.Array.SyncRoot%2A> property.</span></span> <span data-ttu-id="3f755-2385">동기화 하는 코드에서 작업을 수행 해야는 `SyncRoot` 컬렉션으로 만들어지므로 컬렉션의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2385">The synchronizing code must perform operations on the `SyncRoot` of the collection, not directly on the collection.</span></span> <span data-ttu-id="3f755-2386">이렇게 하면 다른 개체에서 파생되는 컬렉션에 대해 적절한 작업이 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2386">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="3f755-2387">특히, 컬렉션을 동시에 수정할 수 있는 다른 스레드와 적절 한 동기화를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2387">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection.</span></span> <span data-ttu-id="3f755-2388">일부 구현 <xref:System.Array.SyncRoot%2A> 를 반환할 수 있습니다는 <xref:System.Array> 자체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2388">Note that some implementations of <xref:System.Array.SyncRoot%2A> might return the <xref:System.Array> itself.</span></span>  
  
 <span data-ttu-id="3f755-2389">컬렉션을 열거 하는 스레드로부터 안전한 프로시저가 아닙니다 기본적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2389">Enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="3f755-2390">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2390">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="3f755-2391">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2391">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="3f755-2392">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2392">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-2393">다음 코드 예제에 사용 하 여 열거 하는 동안 배열을 잠그는 방법을 보여 줍니다는 <xref:System.Array.SyncRoot%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2393">The following code example shows how to lock an array during the entire enumeration by using the <xref:System.Array.SyncRoot%2A> property.</span></span>  
  
 [!code-cpp[System.Array.SyncRoot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Array.SyncRoot/cpp/source.cpp#1)]
 [!code-csharp[System.Array.SyncRoot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Array.SyncRoot/cs/source.cs#1)]
 [!code-vb[System.Array.SyncRoot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Array.SyncRoot/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Array.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.Count">
      <MemberSignature Language="C#" Value="int System.Collections.ICollection.Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Collections.ICollection.Count" />
      <MemberSignature Language="DocId" Value="P:System.Array.System#Collections#ICollection#Count" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Count As Integer Implements ICollection.Count" />
      <MemberSignature Language="C++ CLI" Value="property int System.Collections.ICollection.Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3f755-2394"><see cref="T:System.Array" />에 포함된 요소 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2394">Gets the number of elements contained in the <see cref="T:System.Array" />.</span></span></summary>
        <value><span data-ttu-id="3f755-2395">컬렉션에 포함된 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2395">The number of elements contained in the collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2396">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3f755-2396">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3f755-2397"><xref:System.Array> 인스턴스가 <xref:System.Collections.ICollection> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2397">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.ICollection> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Array.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Array.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3f755-2398">개체가 <see cref="T:System.Collections.IList" />에 추가됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2398">The object to be added to the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="3f755-2399">이 메서드를 호출하면 <see cref="T:System.NotSupportedException" /> 예외가 항상 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2399">Calling this method always throws a <see cref="T:System.NotSupportedException" /> exception.</span></span></summary>
        <returns><span data-ttu-id="3f755-2400">배열에 값을 추가하는 것은 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2400">Adding a value to an array is not supported.</span></span> <span data-ttu-id="3f755-2401">값이 반환되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2401">No value is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2402">일반적으로 <xref:System.Collections.IList.Add%2A?displayProperty=nameWithType> 구현 컬렉션에 멤버를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2402">Ordinarily, an <xref:System.Collections.IList.Add%2A?displayProperty=nameWithType> implementation adds a member to a collection.</span></span> <span data-ttu-id="3f755-2403">그러나 배열 크기는 고정된 되어 때문에 (의 <xref:System.Array.IsFixedSize%2A> 속성은 항상 반환 `true`),이 메서드는 항상 throw 한 <xref:System.NotSupportedException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2403">However, because arrays have a fixed size (the <xref:System.Array.IsFixedSize%2A> property always returns `true`), this method always throws a <xref:System.NotSupportedException> exception.</span></span>  
  
 <span data-ttu-id="3f755-2404">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3f755-2404">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3f755-2405"><xref:System.Array> 인스턴스가 <xref:System.Collections.IList> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2405">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3f755-2406"><see cref="T:System.Collections.IList" />가 고정 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2406">The <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.System#Collections#IList#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Clear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3f755-2407"><see cref="T:System.Collections.IList" />에서 항목을 모두 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2407">Removes all items from the <see cref="T:System.Collections.IList" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2408">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3f755-2408">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3f755-2409"><xref:System.Array> 인스턴스가 <xref:System.Collections.IList> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2409">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3f755-2410"><see cref="T:System.Collections.IList" />이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2410">The <see cref="T:System.Collections.IList" /> is read-only.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3f755-2411">현재 목록에서 찾을 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2411">The object to locate in the current list.</span></span> <span data-ttu-id="3f755-2412">찾을 요소는 참조 형식에 대해 <see langword="null" />이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2412">The element to locate can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="3f755-2413"><see cref="T:System.Collections.IList" />에 요소가 있는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2413">Determines whether an element is in the <see cref="T:System.Collections.IList" />.</span></span></summary>
        <returns>
          <span data-ttu-id="3f755-2414"><see langword="true" />가 <paramref name="value" />에 있으면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2414"><see langword="true" /> if <paramref name="value" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2415">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3f755-2415">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3f755-2416"><xref:System.Array> 인스턴스가 <xref:System.Collections.IList> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2416">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3f755-2417">현재 목록에서 찾을 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2417">The object to locate in the current list.</span></span></param>
        <summary><span data-ttu-id="3f755-2418"><see cref="T:System.Collections.IList" />에서 특정 항목의 인덱스를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2418">Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</span></span></summary>
        <returns><span data-ttu-id="3f755-2419">목록에 값이 있으면 해당 값의 인덱스이고, 그렇지 않으면 -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2419">The index of value if found in the list; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2420">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3f755-2420">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3f755-2421"><xref:System.Array> 인스턴스가 <xref:System.Collections.IList> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2421">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="3f755-2422"><c>값</c>을 삽입할 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2422">The index at which <c>value</c> should be inserted.</span></span></param>
        <param name="value"><span data-ttu-id="3f755-2423">삽입할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2423">The object to insert.</span></span></param>
        <summary><span data-ttu-id="3f755-2424">항목을 <see cref="T:System.Collections.IList" />의 지정된 인덱스에 삽입합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2424">Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2425">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3f755-2425">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3f755-2426"><xref:System.Array> 인스턴스가 <xref:System.Collections.IList> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2426">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-2427"><paramref name="index" />가 <see cref="T:System.Collections.IList" />의 유효한 인덱스가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2427"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3f755-2428"><see cref="T:System.Collections.IList" />이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2428">The <see cref="T:System.Collections.IList" /> is read-only.</span></span>  
  
 <span data-ttu-id="3f755-2429">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2429">-or-</span></span>  
  
 <span data-ttu-id="3f755-2430"><see cref="T:System.Collections.IList" />가 고정 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2430">The <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="3f755-2431"><paramref name="value" />가 <see cref="T:System.Collections.IList" />에서 null 참조인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2431"><paramref name="value" /> is null reference in the <see cref="T:System.Collections.IList" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Array.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Array.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Array.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="3f755-2432">가져오거나 설정할 요소의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2432">The index of the element to get or set.</span></span></param>
        <summary><span data-ttu-id="3f755-2433">지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2433">Gets or sets the element at the specified index.</span></span></summary>
        <value><span data-ttu-id="3f755-2434">지정한 인덱스의 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2434">The element at the specified index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2435">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3f755-2435">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3f755-2436"><xref:System.Array> 인스턴스가 <xref:System.Collections.IList> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2436">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f755-2437"><paramref name="index" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2437"><paramref name="index" /> is less than zero.</span></span>  
  
 <span data-ttu-id="3f755-2438">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2438">-or-</span></span>  
  
 <span data-ttu-id="3f755-2439"><paramref name="index" />가 <see cref="P:System.Collections.ICollection.Count" />보다 크거나 같은 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2439"><paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ICollection.Count" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3f755-2440">현재 <see cref="T:System.Array" />에 1차원이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2440">The current <see cref="T:System.Array" /> does not have exactly one dimension.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3f755-2441"><see cref="T:System.Collections.IList" />에서 제거할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2441">The object to remove from the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="3f755-2442"><see cref="T:System.Collections.IList" />에서 맨 처음 발견되는 특정 개체를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2442">Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2443">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3f755-2443">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3f755-2444"><xref:System.Array> 인스턴스가 <xref:System.Collections.IList> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2444">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3f755-2445"><see cref="T:System.Collections.IList" />이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2445">The <see cref="T:System.Collections.IList" /> is read-only.</span></span>  
  
 <span data-ttu-id="3f755-2446">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2446">-or-</span></span>  
  
 <span data-ttu-id="3f755-2447"><see cref="T:System.Collections.IList" />가 고정 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2447">The <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.System#Collections#IList#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.RemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="3f755-2448">제거할 요소의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2448">The index of the element to remove.</span></span></param>
        <summary><span data-ttu-id="3f755-2449">지정한 인덱스에서 <see cref="T:System.Collections.IList" /> 항목을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2449">Removes the <see cref="T:System.Collections.IList" /> item at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2450">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3f755-2450">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3f755-2451"><xref:System.Array> 인스턴스가 <xref:System.Collections.IList> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2451">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3f755-2452">인덱스는 <see cref="T:System.Collections.IList" />의 유효한 인덱스가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2452">index is not a valid index in the <see cref="T:System.Collections.IList" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3f755-2453"><see cref="T:System.Collections.IList" />이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2453">The <see cref="T:System.Collections.IList" /> is read-only.</span></span>  
  
 <span data-ttu-id="3f755-2454">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2454">-or-</span></span>  
  
 <span data-ttu-id="3f755-2455"><see cref="T:System.Collections.IList" />가 고정 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2455">The <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralComparable.CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer) = System::Collections::IStructuralComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="3f755-2456">현재 인스턴스와 비교할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2456">The object to compare with the current instance.</span></span></param>
        <param name="comparer"><span data-ttu-id="3f755-2457">현재 개체와 <c>other</c>를 비교하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2457">An object that compares the current object and <c>other</c>.</span></span></param>
        <summary><span data-ttu-id="3f755-2458">정렬 순서에서 현재 컬렉션 개체의 위치가 다른 개체보다 앞인지, 뒤인지 또는 동일한지를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2458">Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.</span></span></summary>
        <returns><span data-ttu-id="3f755-2459">다음 표와 같이 현재 컬렉션 개체와 다른 개체 사이의 관계를 나타내는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2459">An integer that indicates the relationship of the current collection object to other, as shown in the following table.</span></span>  
  
 <span data-ttu-id="3f755-2460"><list type="table"><listheader><term> 반환 값</span><span class="sxs-lookup"><span data-stu-id="3f755-2460"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="3f755-2461"></term><description> 설명</span><span class="sxs-lookup"><span data-stu-id="3f755-2461"></term><description> Description</span></span>  
  
 <span data-ttu-id="3f755-2462"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="3f755-2462"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="3f755-2463"></term><description> 현재 인스턴스가 <paramref name="other" /> 앞에 옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2463"></term><description> The current instance precedes <paramref name="other" />.</span></span>  
  
 <span data-ttu-id="3f755-2464"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="3f755-2464"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="3f755-2465"></term><description> 현재 인스턴스와 <paramref name="other" />이 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2465"></term><description> The current instance and <paramref name="other" /> are equal.</span></span>  
  
 <span data-ttu-id="3f755-2466"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="3f755-2466"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="3f755-2467"></term><description> 현재 인스턴스가 <paramref name="other" /> 뒤에 옵니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2467"></term><description> The current instance follows <paramref name="other" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2468">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3f755-2468">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3f755-2469"><xref:System.Array> 인스턴스가 <xref:System.Collections.IStructuralComparable> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2469">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IStructuralComparable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IStructuralEquatable.Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="3f755-2470">현재 인스턴스와 비교할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2470">The object to compare with the current instance.</span></span></param>
        <param name="comparer"><span data-ttu-id="3f755-2471">현재 인스턴스와 <c>other</c>이 같은지를 확인하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2471">An object that determines whether the current instance and <c>other</c> are equal.</span></span></param>
        <summary><span data-ttu-id="3f755-2472">개체가 현재 인스턴스와 같은지를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2472">Determines whether an object is equal to the current instance.</span></span></summary>
        <returns>
          <span data-ttu-id="3f755-2473">두 개체가 같으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2473"><see langword="true" /> if the two objects are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2474">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3f755-2474">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3f755-2475"><xref:System.Array> 인스턴스가 <xref:System.Collections.IStructuralEquatable> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2475">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IStructuralEquatable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralEquatable.GetHashCode(System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="3f755-2476">현재 개체의 해시 코드를 계산하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2476">An object that computes the hash code of the current object.</span></span></param>
        <summary><span data-ttu-id="3f755-2477">현재 인스턴스의 해시 코드를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2477">Returns a hash code for the current instance.</span></span></summary>
        <returns><span data-ttu-id="3f755-2478">현재 인스턴스에 대한 해시 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2478">The hash code for the current instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2479">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3f755-2479">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3f755-2480"><xref:System.Array> 인스턴스가 <xref:System.Collections.IStructuralEquatable> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2480">It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IStructuralEquatable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrueForAll&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TrueForAll&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TrueForAll&lt;T&gt;(!!T[] array, class System.Predicate`1&lt;!!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TrueForAll(Of T) (array As T(), match As Predicate(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TrueForAll(cli::array &lt;T&gt; ^ array, Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3f755-2481">배열 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2481">The type of the elements of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="3f755-2482">조건에 대해 확인할 1차원 <see cref="T:System.Array" />(인덱스는 0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2482">The one-dimensional, zero-based <see cref="T:System.Array" /> to check against the conditions.</span></span></param>
        <param name="match"><span data-ttu-id="3f755-2483">요소에 대해 확인할 조건을 정의하는 조건자입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2483">The predicate that defines the conditions to check against the elements.</span></span></param>
        <summary><span data-ttu-id="3f755-2484">배열의 모든 요소가 지정한 조건자에 정의된 조건과 일치하는지를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2484">Determines whether every element in the array matches the conditions defined by the specified predicate.</span></span></summary>
        <returns>
          <span data-ttu-id="3f755-2485"><paramref name="array" />의 모든 요소가 지정한 조건자에 정의된 조건과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2485"><see langword="true" /> if every element in <paramref name="array" /> matches the conditions defined by the specified predicate; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="3f755-2486">배열에 요소가 없으면 반환 값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2486">If there are no elements in the array, the return value is <see langword="true" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f755-2487"><xref:System.Predicate%601> 반환 하는 메서드에 대리자`true` 개체에 전달 하는 경우 대리자에 정의 된 조건과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2487">The <xref:System.Predicate%601> is a delegate to a method that returns`true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="3f755-2488">요소 `array` 를 개별적으로 전달 되는 <xref:System.Predicate%601>, 대리자는 반환 될 때 처리가 중지 됩니다 `false` 모든 요소에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2488">The elements of `array` are individually passed to the <xref:System.Predicate%601>, and processing is stopped when the delegate returns `false` for any element.</span></span>  
  
 <span data-ttu-id="3f755-2489">이 메서드는 O는 (`n`) 작업, 여기서 `n` 는 <xref:System.Array.Length%2A> 의 `array`합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2489">This method is an O(`n`) operation, where `n` is the <xref:System.Array.Length%2A> of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3f755-2490">다음 예제에서는 문자열 배열의 각 요소에에서의 마지막 문자가 숫자 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2490">The following example determines whether the last character of each element in a string array is a number.</span></span> <span data-ttu-id="3f755-2491">두 개의 문자열 배열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2491">It creates two string arrays.</span></span> <span data-ttu-id="3f755-2492">첫 번째 arrayincludes 모두 알파벳 문자로 끝나는 문자열 및 숫자 문자로 끝나는 문자열. 두 번째 배열 숫자 문자로 끝나는 문자열만 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2492">The first arrayincludes both strings that end with alphabetic characters and strings that end with numeric characters.The second array consists only of strings that end with numeric characters.</span></span> <span data-ttu-id="3f755-2493">이 예제에서는 또한 정의 `EndWithANumber` 서명과 일치 하는 메서드는 <xref:System.Predicate%601> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2493">The example also defines an `EndWithANumber` method whose signature matches the <xref:System.Predicate%601> delegate.</span></span> <span data-ttu-id="3f755-2494">각 배열에 전달 된 <xref:System.Array.TrueForAll%2A> 메서드를 나타내는 대리자과 함께 `EndsWithANumber` 메서드.</span><span class="sxs-lookup"><span data-stu-id="3f755-2494">The example passes each array to the <xref:System.Array.TrueForAll%2A> method along with a delegate that represents the `EndsWithANumber` method.</span></span>  
  
 [!code-csharp[System.Array.TrueForAll#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.trueforall/cs/trueforall2.cs#2)]
 [!code-vb[System.Array.TrueForAll#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.trueforall/vb/trueforall2.vb#2)]  
  
 <span data-ttu-id="3f755-2495">다음 예제는은 첫 번째 제외 하는 문자열 배열에 전달 된 <xref:System.Array.TrueForAll%2A> 메서드는 특정 배열 요소 숫자의 문자열 표현으로 끝나는지 여부를 확인 하는 람다 식과 함께 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2495">The following example is similar to the first, except that it passes the string array to the <xref:System.Array.TrueForAll%2A> method along with  a lambda expression that determines whether a particular array element ends with the string representation of a number.</span></span>  
  
 [!code-csharp[System.Array.TrueForAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.array.trueforall/cs/trueforall1.cs#1)]
 [!code-vb[System.Array.TrueForAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.array.trueforall/vb/trueforall1.vb#1)]  
  
 <span data-ttu-id="3f755-2496">두 경우 모두는 <xref:System.Array.TrueForAll%2A> 메서드 반환 `false` 숫자에 종료 하지 않는 첫 번째 배열 요소를 발견 되는 즉시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2496">In both cases, the <xref:System.Array.TrueForAll%2A> method returns `false` as soon as it encounters the first array element that does not end in a number.</span></span> <span data-ttu-id="3f755-2497">그렇지 않으면 반환 `true` 배열의 모든 요소를 반복 하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2497">Otherwise, it returns `true` after iterating all the elements in the array.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3f755-2498">만들 필요가 없다는 두 예와 같이, C# 및 Visual Basic의 경우에 `Predicate<string>` 위임 (`Predicate(Of String)` Visual basic에서) 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2498">As both examples show, in C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="3f755-2499">이러한 언어 올바른 대리자 컨텍스트를 유추 하 고 자동으로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3f755-2499">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3f755-2500"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2500"><paramref name="array" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="3f755-2501">또는</span><span class="sxs-lookup"><span data-stu-id="3f755-2501">-or-</span></span>  
  
 <span data-ttu-id="3f755-2502"><paramref name="match" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3f755-2502"><paramref name="match" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Array.Exists``1(``0[],System.Predicate{``0})" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
  </Members>
</Type>