<Type Name="WeakEventManager+ListenerList" FullName="System.Windows.WeakEventManager+ListenerList">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9f0f2be98debc822496ae0fb7a0b36b79ece2165" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="protected class WeakEventManager.ListenerList" />
  <TypeSignature Language="ILAsm" Value=".class nested protected auto ansi beforefieldinit WeakEventManager/ListenerList extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager.ListenerList" />
  <TypeSignature Language="VB.NET" Value="Protected Class WeakEventManager.ListenerList" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="f5604-101">
        <see cref="T:System.Windows.WeakEventManager" />에 대한 수신기를 저장하기 위한 기본 제공 컬렉션 목록을 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f5604-101">Provides a built-in collection list for storing listeners for a <see cref="T:System.Windows.WeakEventManager" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5604-102">이 목록에서 정의 된 유사한 멤버를 포함 하지만 <xref:System.Collections.IList> 및 <xref:System.Collections.ICollection>, 인터페이스 둘 다는 것이 클래스 구현 유사한 기능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-102">Although this list contains members that resemble those defined by <xref:System.Collections.IList> and <xref:System.Collections.ICollection>, and provide similar functionality, this class implements neither of those interfaces.</span></span>  
  
 <span data-ttu-id="f5604-103">대부분 <xref:System.Windows.WeakEventManager> 파생 된 클래스에 멤버를 사용할 필요가 없습니다 <xref:System.Windows.WeakEventManager.ListenerList>합니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-103">Most <xref:System.Windows.WeakEventManager> derived classes do not need to use any members on <xref:System.Windows.WeakEventManager.ListenerList>.</span></span> <span data-ttu-id="f5604-104"><xref:System.Windows.WeakEventManager> 메서드 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 및 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 기본값을 사용 하 여 <xref:System.Windows.WeakEventManager.ListenerList> 각각에 대해 내부적으로 하나의 목록 `source`합니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-104">The <xref:System.Windows.WeakEventManager> methods <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> use a default <xref:System.Windows.WeakEventManager.ListenerList> internally, one list for each `source`.</span></span>  
  
 <span data-ttu-id="f5604-105">호출 하기만 하면 <xref:System.Windows.WeakEventManager.ListenerList> 메서드 경우 프로그램 <xref:System.Windows.WeakEventManager> 클래스는 이벤트의 다양 한 조건 나타내기 위해 만든 각 목록 사용 하 여 같은 이벤트 소스 조합에 대 한 여러 목록을 유지 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-105">You only need to call <xref:System.Windows.WeakEventManager.ListenerList> methods if your <xref:System.Windows.WeakEventManager> class maintains multiple lists for the same event-source combination, with each list created to account for different conditions of the event.</span></span> <span data-ttu-id="f5604-106">사용 하지 않을 경우에 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 및 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 대신을 구현 하 고 `AddListener` 또는 `RemoveListener` 수신기에 추가 하는 매개 변수에 따라 일반적으로 내부 수신기 목록 중 하나에 따라 작동 하도록 `AddListener` 또는 `RemoveListener`.</span><span class="sxs-lookup"><span data-stu-id="f5604-106">In this case, you would not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> and would instead implement `AddListener` or `RemoveListener` to act upon listeners in just one of the internal listener lists, typically based on a parameter that you add to `AddListener` or `RemoveListener`.</span></span> <span data-ttu-id="f5604-107">원시 이벤트를 수신 하는 처리기 구현을 호출할 수 없습니다 또한 <xref:System.Windows.WeakEventManager.DeliverEvent%2A>; 대신 한 이벤트의 고유 정보를 추적 하 고 사용 하 여 적절 한 목록에만 이벤트를 전달 해야 <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-107">Also, the handler implementation that receives the raw event cannot simply call <xref:System.Windows.WeakEventManager.DeliverEvent%2A>; you must instead keep track of the specifics of the event and deliver the event only to the appropriate list using <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span></span>  
  
 <span data-ttu-id="f5604-108">다양 한 메서드에 <xref:System.Windows.WeakEventManager.ListenerList> 있는 이벤트의 실제 배달 하는 동안 목록이 수정을 방지할 수 있습니다 및 내부 목록으로 작업할 수 있도록 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-108">The various methods of <xref:System.Windows.WeakEventManager.ListenerList> are provided so that you can work with your internal lists and so that you can prevent modification of the list during actual delivery of the event.</span></span>  
  
 <span data-ttu-id="f5604-109">이 구현 기법을 사용 하는 예제 클래스는 <xref:System.ComponentModel.PropertyChangedEventManager>에 대 한 목록 별도 수신기를 유지 하 `PropertyChanged` 변경 되는 속성에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-109">An example class that used this implementation technique is <xref:System.ComponentModel.PropertyChangedEventManager>, which maintains separate listener lists for `PropertyChanged` based on which property changed.</span></span>  
  
<a name="xamlTextUsage_ListenerList"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="f5604-110">XAML 텍스트 사용</span><span class="sxs-lookup"><span data-stu-id="f5604-110">XAML Text Usage</span></span>  
 <span data-ttu-id="f5604-111">이 클래스에서 사용할 수 없습니다 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-111">You cannot use this class in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f5604-112">
            <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-112">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f5604-113">
            <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-113">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList(int capacity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">
          <span data-ttu-id="f5604-114">초기 목록에 할당되는 항목의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-114">The number of items that should be allocated in the initial list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f5604-115">지정된 초기 용량을 사용하여 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-115">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class with the specified initial capacity.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::IWeakEventListener ^ listener);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener">
          <span data-ttu-id="f5604-116">
            <see cref="T:System.Windows.WeakEventManager.ListenerList" />에 추가할 수신기 항목입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-116">The listener element to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f5604-117">
            <see cref="T:System.Windows.IWeakEventListener" />에 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 개체를 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-117">Adds a <see cref="T:System.Windows.IWeakEventListener" /> object to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5604-118">수신기 속도가 제공 되는 개체는 <xref:System.Windows.DependencyObject> 구현 하는 <xref:System.Windows.IWeakEventListener> 인터페이스 있으며 따라서 <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-118">The object provided as listener should be a <xref:System.Windows.DependencyObject> that implements the <xref:System.Windows.IWeakEventListener> interface and therefore has a working <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementation.</span></span>  
  
 <span data-ttu-id="f5604-119">항상 호출 해야 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 목록 콘텐츠를 변경 하기 전에.</span><span class="sxs-lookup"><span data-stu-id="f5604-119">You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents.</span></span> <span data-ttu-id="f5604-120">그렇지 않으면 목록 이벤트를 전달 하는 중일 수 있습니다 및 따라서 원래 잠겨 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-120">Otherwise, the list may be in process of delivering events and therefore the original is locked.</span></span> <span data-ttu-id="f5604-121">호출 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 입력 변경 `list` 복제 되도록 있도록 프로그램 <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> 호출 복제본에서 계속 작업할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-121">Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> call can still work on the clone.</span></span> <span data-ttu-id="f5604-122">경우 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 반환 `true`, 코드의 다른 영역에서 유지 관리 하는 목록에 대 한 전용 참조를 업데이트 해야 할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-122">If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="handler">
          <span data-ttu-id="f5604-123">
            <see cref="T:System.Windows.WeakEventManager.ListenerList" />에 추가할 이벤트 처리기입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-123">The event handler to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f5604-124">
            <see cref="T:System.Windows.WeakEventManager.ListenerList" />에 이벤트 처리기를 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-124">Adds an event handler to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUse">
      <MemberSignature Language="C#" Value="public bool BeginUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool BeginUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginUse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool BeginUse();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f5604-125">목록이 사용 중인 것으로 선언합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-125">Declares the list to be in use.</span>
          </span>
          <span data-ttu-id="f5604-126">이렇게 하면 목록 항목을 반복하는 동안 목록이 직접 변경되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-126">This prevents direct changes to the list during iterations of the list items.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f5604-127">목록이 이미 사용 중인 것으로 선언되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-127">
              <see langword="true" /> if the list was already declared to be in use; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5604-128">A <xref:System.Windows.WeakEventManager> 구현을 호출 해야 <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> 전에 이벤트를 수신기에 전달 하 여 목록을 반복 하 고 호출 해야 <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> 완료 되 면입니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-128">A <xref:System.Windows.WeakEventManager> implementation should call <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> before iterating through the list to deliver an event to the listeners, and should call <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> when it is done.</span></span> <span data-ttu-id="f5604-129">따라서 다른 호출자를가 이벤트 전달에 대 한 반복 진행 중인 동안 목록을 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-129">This prevents another caller from modifying the list while the iteration for purposes of event delivery is in progress.</span></span> <span data-ttu-id="f5604-130">목록을이 시간 동안 수정 될 경우에 목록이 복제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-130">If the list is modified during this time, then the list is cloned.</span></span> <span data-ttu-id="f5604-131">다음 목록 복제 되는 경우 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 반환 `true`, 마지막 배달에 최근 수신기 변경 못한 의미입니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-131">If the list is cloned, then <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, which means that you have missed a recent listener change in the last delivery.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Windows.WeakEventManager.ListenerList Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As WeakEventManager.ListenerList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f5604-132">이 <see cref="T:System.Windows.WeakEventManager.ListenerList" />의 수정 가능한 복제본을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-132">Creates a modifiable clone of this <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f5604-133">현재 개체의 수정 가능한 복제본입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-133">A modifiable clone of the current object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="protected void CopyTo (System.Windows.WeakEventManager.ListenerList newList);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CopyTo(class System.Windows.WeakEventManager/ListenerList newList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CopyTo (newList As WeakEventManager.ListenerList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newList" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="newList">
          <span data-ttu-id="f5604-134">복사할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-134">The object to copy to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f5604-135">현재 <see cref="T:System.Windows.WeakEventManager.ListenerList" />을 지정된 <see cref="T:System.Windows.WeakEventManager.ListenerList" />에 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-135">Copies the current <see cref="T:System.Windows.WeakEventManager.ListenerList" /> to the specified <see cref="T:System.Windows.WeakEventManager.ListenerList" /></span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f5604-136">
            <see cref="T:System.Windows.WeakEventManager.ListenerList" />에 들어 있는 항목 수를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-136">Gets the number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f5604-137">
            <see cref="T:System.Windows.WeakEventManager.ListenerList" />에 들어 있는 항목 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-137">The number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="public virtual bool DeliverEvent (object sender, EventArgs args, Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeliverEvent(object sender, class System.EventArgs args, class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeliverEvent (sender As Object, args As EventArgs, managerType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool DeliverEvent(System::Object ^ sender, EventArgs ^ args, Type ^ managerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="f5604-138">이벤트를 발생시킨 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-138">The object that raised the event.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="f5604-139">이벤트 데이터를 포함하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-139">An object that contains the event data.</span>
          </span>
        </param>
        <param name="managerType">
          <span data-ttu-id="f5604-140">이 메서드를 호출하는 <see cref="T:System.Windows.WeakEventManager" />의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-140">The type of the <see cref="T:System.Windows.WeakEventManager" /> that calls this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f5604-141">
            <see cref="T:System.Windows.WeakEventManager.ListenerList" />에서 각 수신기에 대해 관리되는 이벤트를 전달합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-141">Delivers the event being managed to each listener in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f5604-142">
            <see cref="T:System.Windows.WeakEventManager.ListenerList" />의 임의의 수신기가 가비지 수집된 개체를 가리키면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-142">
              <see langword="true" /> if any of the listeners in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> refer to an object that has been garbage collected; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.WeakEventManager.ListenerList Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.WeakEventManager/ListenerList Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As WeakEventManager.ListenerList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f5604-143">비교 작업에 사용할 빈 목록을 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-143">Gets a value that represents an empty list for purposes of comparisons.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f5604-144">빈 목록 표현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-144">The empty list representation.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUse">
      <MemberSignature Language="C#" Value="public void EndUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUse();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f5604-145">
            <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />에 의해 초기화되는 잠긴 상태를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-145">Unlocks the locked state initiated by <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f5604-146">이 <see cref="T:System.Windows.WeakEventManager.ListenerList" />가 비어 있는지 여부를 선언하는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-146">Gets a value that declares whether this <see cref="T:System.Windows.WeakEventManager.ListenerList" /> is empty.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f5604-147">목록이 비어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-147">
              <see langword="true" /> if the list is empty; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5604-148">이 방법을 확인 하는 것 여부는 <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> 는 0이 고 있는지 여부를 목록에서 참조 중 하나의 현재 만료 되었는지 확인 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-148">This method is equivalent to checking whether the <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> is zero, and does not check whether any of the references in the list are now stale.</span></span> <span data-ttu-id="f5604-149">모든 참조가 아직 유효한 지 확인, 호출 하려면 <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> 바로 전의 목록의 빈 상태를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-149">If you want to assure that all references are still valid, call <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> just prior to checking the empty status of the list.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.IWeakEventListener this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IWeakEventListener Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As IWeakEventListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IWeakEventListener ^ default[int] { System::Windows::IWeakEventListener ^ get(int index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IWeakEventListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="f5604-150">목록에 있는 수신기의 인덱스(0부터 시작)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-150">The zero-based index of the listener in the list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f5604-151">
            <see cref="T:System.Windows.WeakEventManager.ListenerList" />의 특정 수신기 항목을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-151">Gets or sets a specific listener item in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> .</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f5604-152">해당 인덱스의 항목이거나, 해당 인덱스에 항목이 없으면 null 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-152">The item at that index, or a null reference if no item was at that index.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForWriting">
      <MemberSignature Language="C#" Value="public static bool PrepareForWriting (ref System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool PrepareForWriting(class System.Windows.WeakEventManager/ListenerList&amp; list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PrepareForWriting (ByRef list As WeakEventManager.ListenerList) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool PrepareForWriting(System::Windows::WeakEventManager::ListenerList ^ % list);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="list">
          <span data-ttu-id="f5604-153">사용 상태를 확인하고 복사할 목록입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-153">The list to check for use state and potentially copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f5604-154">지정된 목록이 사용 중인지 확인하고, 사용 중일 경우 목록 참조 매개 변수를 원본이 아닌 목록의 복사본으로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-154">Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f5604-155">지정된 목록이 호출 시 사용 중이므로 <paramref name="list" /> 매개 변수 참조가 복사본으로 다시 설정되었으면 <see langword="true" />이고,</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-155">
              <see langword="true" /> if the provided list was in use at the time of call and therefore the <paramref name="list" /> parameter reference was reset to be a copy.</span>
          </span>
          <span data-ttu-id="f5604-156">지정된 목록이 사용 중이 아니므로 <paramref name="list" /> 매개 변수 참조가 변경되지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-156">
              <see langword="false" /> if the provided list was not in use, in which case the <paramref name="list" /> parameter reference remains unaltered.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5604-157">지정된 된 목록 (즉, 이벤트가 전달 되 고 현재) 사용 중인를 경우이 메서드를 호출 바뀝니다 입력 `list` 복제본을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-157">If the given list is in use (which means an event is currently being delivered), calling this method will replace the input `list` with a clone.</span></span>  <span data-ttu-id="f5604-158">기존 사용자는 방해를에서 받지 않고 변경 내용 새 목록에 원래 목록으로 이벤트를 전달 하 완료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-158">The existing users will finish delivering the event to the original list, without interference from changes to the new list.</span></span>  
  
 <span data-ttu-id="f5604-159">메서드에서 반환 되 면 `true`, 호출자에 게 제공된 된 목록 더 이상 최신 상태가 아님을 나타냅니다 이후 자신의 데이터 구조에서 새 목록을 삽입 해야 할 수도 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-159">If the method returns `true`, callers may want to insert the new list in their own data structures, since this indicates the possibility that the provided list is no longer current.</span></span>  
  
 <span data-ttu-id="f5604-160">이 메서드를 호출 <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> 내부적으로 다음 즉시 호출 <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-160">This method calls <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> internally and then immediately calls <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span></span> <span data-ttu-id="f5604-161">따라서 호출 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 목록에 대 한 잠금을 제공 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-161">Therefore calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> does not itself introduce a lock on the list.</span></span> <span data-ttu-id="f5604-162">복제본 복사를 호출한 후 보조 작업으로 이루어집니다 <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-162">Even the clone copy is done as a secondary operation after calling <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="public bool Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Purge() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Purge" />
      <MemberSignature Language="VB.NET" Value="Public Function Purge () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Purge();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f5604-163">내부 참조 대상이 null 참조인 목록에서 모든 항목을 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-163">Removes all entries from the list where the underlying reference target is a null reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f5604-164">모든 항목이 제거되면 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-164">Returns <see langword="true" /> if any entries were purged; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::IWeakEventListener ^ listener);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener">
          <span data-ttu-id="f5604-165">제거할 항목입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-165">The item to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f5604-166">
            <see cref="T:System.Windows.WeakEventManager.ListenerList" />에서 맨 처음 발견되는 수신기 항목을 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-166">Removes the first occurrence of a listener item from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5604-167">항상 호출 해야 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 목록 콘텐츠를 변경 하기 전에.</span><span class="sxs-lookup"><span data-stu-id="f5604-167">You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents.</span></span> <span data-ttu-id="f5604-168">그렇지 않으면 목록 이벤트를 전달 하는 중일 수 있습니다 및 따라서 원래 잠겨 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-168">Otherwise, the list may be in process of delivering events and therefore the original is locked.</span></span> <span data-ttu-id="f5604-169">호출 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 입력 변경 `list` 복제 되도록 있도록 프로그램 <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> 호출 복제본에서 계속 작업할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-169">Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> call can still work on the clone.</span></span> <span data-ttu-id="f5604-170">경우 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 반환 `true`, 코드의 다른 영역에서 유지 관리 하는 목록에 대 한 전용 참조를 업데이트 해야 할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f5604-170">If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveHandler(Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="handler">
          <span data-ttu-id="f5604-171">
            <see cref="T:System.Windows.WeakEventManager.ListenerList" />에서 제거할 이벤트 처리기입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-171">The event handler to remove from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f5604-172">
            <see cref="T:System.Windows.WeakEventManager.ListenerList" />에서 이벤트 처리기를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5604-172">Removes an event handler from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>