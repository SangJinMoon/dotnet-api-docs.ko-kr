<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Window.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73cd4428-9abd-4836-b1ef-ba70fe2e0b72f805a8dedd189924a31c53379179c725286ba810.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f805a8dedd189924a31c53379179c725286ba810</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Window">
          <source>Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.</source>
          <target state="translated">창과 대화 상자의 수명을 생성, 구성, 표시 및 관리하는 기능을 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The point of interaction between a user and a standalone application is a window.</source>
          <target state="translated">사용자와 독립 실행형 응용 프로그램 간의 상호 작용 지점 창입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> window consists of two distinct areas:</source>
          <target state="translated">A <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 창 두 고유 영역으로 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A non-client area, which hosts the windows adornments, including an icon, title, System menu, minimize button, maximize button, restore button, close button, and a border.</source>
          <target state="translated">호스팅하는 아이콘, 제목, 시스템 메뉴를 포함 하 여 창 장식을 비클라이언트 영역을 최소화 단추, 단추, 복원 단추, 닫기 단추 및 테두리를 최대화 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A client area, which hosts application-specific content.</source>
          <target state="translated">응용 프로그램 관련 콘텐츠를 호스트 하는 클라이언트 영역입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A standard window is shown in the following figure:</source>
          <target state="translated">표준 창 다음 그림에 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><bpt id="p1">![</bpt>Window elements<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure1.PNG "</bpt>Window elements<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>창 요소<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure1.PNG "</bpt>창 요소<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> encapsulates the ability to create, configure, show, and manage the lifetime of both windows and dialog boxes, and provides the following key services:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 만들기, 구성, 표시 및 창 및 대화 상자를 둘 다의 수명을 관리 하는 기능을 캡슐화 하 고 다음과 같은 핵심 서비스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><bpt id="p1">**</bpt>Lifetime Management<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.Activate%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.Closed&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Window.Closing&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Window.Deactivated&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>수명 관리<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.Activate%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.Closed&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Window.Closing&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Window.Deactivated&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><bpt id="p1">**</bpt>Window Management<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.GetWindow%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>창 관리<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.GetWindow%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><bpt id="p1">**</bpt>Appearance and Behavior<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Window.ResizeMode%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;</ph>, <ph id="ph11">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>, <ph id="ph12">&lt;xref:System.Windows.Window.StateChanged&gt;</ph>, <ph id="ph13">&lt;xref:System.Windows.Window.Title%2A&gt;</ph>, <ph id="ph14">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, <ph id="ph15">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>, <ph id="ph16">&lt;xref:System.Windows.Window.WindowStartupLocation%2A&gt;</ph>, <ph id="ph17">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph>, <ph id="ph18">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph></source>
          <target state="translated"><bpt id="p1">**</bpt>모양 및 동작<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Window.ResizeMode%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;</ph>, <ph id="ph11">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>, <ph id="ph12">&lt;xref:System.Windows.Window.StateChanged&gt;</ph>, <ph id="ph13">&lt;xref:System.Windows.Window.Title%2A&gt;</ph>, <ph id="ph14">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, <ph id="ph15">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>, <ph id="ph16">&lt;xref:System.Windows.Window.WindowStartupLocation%2A&gt;</ph>, <ph id="ph17">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph>, <ph id="ph18">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><bpt id="p1">**</bpt>Dialog Boxes<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>대화 상자<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Additionally, <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> exposes special support for managing all of the windows in an application:</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> 모든 응용 프로그램의 창 관리 하기 위한 특별 한 지원을 노출 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Application maintains a list of all the windows that are currently instantiated in the application.</source>
          <target state="translated">응용 프로그램에는 현재 응용 프로그램에서 시작 된 모든 창의 목록을 유지 관리 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>This list is exposed by the <ph id="ph1">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> property.</source>
          <target state="translated">이 목록에 의해 노출 되는 <ph id="ph1">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>By default, <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> is automatically set with a reference to the first <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> that is instantiated in an application.</source>
          <target state="translated">기본적으로 <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> 는 자동으로 첫 번째에 대 한 참조 설정 <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> 응용 프로그램에서 인스턴스화됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>This thereby making the window the main application window.</source>
          <target state="translated">따라서이 창을 기본 응용 프로그램 창.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> can be implemented using markup, markup and code-behind, or code.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 태그, 태그 및 코드 숨김 또는 코드를 사용 하 여 구현할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is primarily used to display windows and dialog boxes for standalone applications.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 창 및 독립 실행형 응용 프로그램에 대 한 대화 상자를 표시 하려면 주로 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>However, for applications that require navigation at the window level, such as wizards, you can use <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> instead; <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> derives from <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> and extends it with browser-style navigation support.</source>
          <target state="translated">그러나 필요한 창 수준에서 탐색 응용 프로그램을 사용할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> 대신; <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> 에서 파생 <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> 브라우저 스타일 탐색 지원을 사용 하도록 확장 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Islands of navigable content can be incorporated into other content and content containers using <ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph>.</source>
          <target state="translated">탐색 가능한 콘텐츠의 제도 사용 하 여 다른 콘텐츠 및 콘텐츠 컨테이너에 통합할 수 <ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> needs <ph id="ph2">`UnmanagedCode`</ph> security permission to be instantiated.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 필요한 <ph id="ph2">`UnmanagedCode`</ph> 인스턴스화할 수 있는 보안 권한이 있습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>This has the following consequences:</source>
          <target state="translated">여기에 다음과 같은 결과가 발생에 있습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]</ph>-deployed standalone applications will request permission elevation when launched from either the Internet or Local Intranet zones.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]</ph>-배포 된 독립 실행형 응용 프로그램은 인터넷 또는 로컬 인트라넷 영역에서 시작 하는 경우 권한 상승을 요청 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)]</ph> that request anything less than full permissions will not be able to instantiate windows or dialog boxes.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)]</ph> 보다 낮은 권한을 요청 대 한 모든 권한을 창 또는 대화 상자를 인스턴스화할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>For information about standalone application deployment and security considerations, see <bpt id="p1">[</bpt>WPF Security Strategy - Platform Security<ept id="p1">](~/docs/framework/wpf/wpf-security-strategy-platform-security.md)</ept>.</source>
          <target state="translated">독립 실행형 응용 프로그램 배포 및 보안 고려 사항에 대 한 정보를 참조 하십시오. <bpt id="p1">[</bpt>WPF 보안 전략-플랫폼 보안<ept id="p1">](~/docs/framework/wpf/wpf-security-strategy-platform-security.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is a <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>, which means that it can contain a single object of any type (such as a string, an image, or a panel).</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 는 <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>, 즉, 모든 형식 (예: 문자열, 이미지 또는 패널)의 단일 개체가 포함 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> class.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> 클래스를 참조하세요.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Also, <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is a root element and, therefore, cannot be part of another element's content.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 루트 요소 이며 따라서 다른 요소의 콘텐츠가 포함 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> properties set on a <ph id="ph5">&lt;xref:System.Windows.Window&gt;</ph> through a style will not be applied at run time.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> 에 속성이 설정 된 <ph id="ph5">&lt;xref:System.Windows.Window&gt;</ph> 스타일을 통해 적용 되지 것입니다 런타임 시.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Customizing the Window Control</source>
          <target state="translated">창 컨트롤을 사용자 지정</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>To apply the same property settings to multiple <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> controls, use the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property.</source>
          <target state="translated">여러 동일한 속성 설정을 적용 하려면 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 컨트롤을 사용 하 여는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>You can modify the default <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> to give the control a unique appearance.</source>
          <target state="translated">기본값을 수정할 수 <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> 고유한 모양을 제어할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>For more information about creating a <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, see <bpt id="p1">[</bpt>Customizing the Appearance of an Existing Control by Creating a ControlTemplate<ept id="p1">](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)</ept>.</source>
          <target state="translated">만들기에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, 참조 <bpt id="p1">[</bpt>는 ControlTemplate을 만들어 기존 컨트롤의 모양 사용자 지정<ept id="p1">](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>To see the parts and states that are specific to the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, see <bpt id="p1">[</bpt>Window Styles and Templates<ept id="p1">](~/docs/framework/wpf/controls/window-styles-and-templates.md)</ept>.</source>
          <target state="translated">부분 및 관련 된 상태를 보려면는 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, 참조 <bpt id="p1">[</bpt>창 스타일 및 템플릿<ept id="p1">](~/docs/framework/wpf/controls/window-styles-and-templates.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Dependency properties for this control might be set by the control’s default style.</source>
          <target state="translated">종속성 속성을이 컨트롤은 컨트롤의 기본 스타일으로 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>If a property is set by a default style, the property might change from its default value when the control appears in the application.</source>
          <target state="translated">기본 스타일 속성은 응용 프로그램에이 컨트롤이 표시 하는 경우 속성이 기본값에서 변경 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The default style is determined by which desktop theme is used when the application is running.</source>
          <target state="translated">기본 스타일 응용 프로그램이 실행 중인 때 사용 되는 데스크톱 테마에 따라 결정 됩니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>For more information, see <bpt id="p1">[</bpt>Default WPF Themes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=158252)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>기본 WPF 테마<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=158252)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Setting a visual property will only have an effect if that property is both present in <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> control's default template and is set by using a .</source>
          <target state="translated">시각적 속성을 설정만 영향을 미칠 경우 해당 속성을 둘 다에 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 컨트롤의 기본 템플릿에 하 고 사용 하 여 설정 됩니다는 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>You can find a list of visual properties in the "Changing the Visual Structure of a Control" section in <bpt id="p1">[</bpt>Customizing the Appearance of an Existing Control by Creating a ControlTemplate<ept id="p1">](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)</ept>.</source>
          <target state="translated">"변경의 시각적 구조의 정도 제어" 섹션의 시각적 속성 목록을 찾을 수 있습니다 <bpt id="p1">[</bpt>는 ControlTemplate을 만들어 기존 컨트롤의 모양 사용자 지정<ept id="p1">](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The following example shows how a standard window is defined using only markup:</source>
          <target state="translated">다음 예제에서는 표준 창 어떤가요 태그만 사용 하 여 정의 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The following example shows how a standard window is defined using only code:</source>
          <target state="translated">다음 예제에서는 표준 창을 사용 하 여 정의 된 코드만 방법을.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The following example shows how a standard window is defined using a combination of markup and code-behind.</source>
          <target state="translated">다음 예제에서는 표준 창 어떤가요 태그 및 코드 숨김의 조합을 사용 하 여 정의 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.#ctor">
          <source>The constructor initializes the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> properties to their default <ph id="ph5">&lt;xref:System.Windows.Window&gt;</ph> values.</source>
          <target state="translated">생성자가 초기화 하는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> 속성을 기본 <ph id="ph5">&lt;xref:System.Windows.Window&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.#ctor">
          <source>If a window is created within an <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> that has an <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> object, the constructor adds the <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> object to the set of <ph id="ph4">&lt;xref:System.Windows.Application&gt;</ph>-managed windows via the <ph id="ph5">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> property of the <ph id="ph6">&lt;xref:System.Windows.Application&gt;</ph> object.</source>
          <target state="translated">창 내에서 만들어진 경우는 <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> 올려진는 <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> 개체를 추가 하는 생성자는 <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> 개체 집합에 <ph id="ph4">&lt;xref:System.Windows.Application&gt;</ph>-windows를 통해 관리 되는 <ph id="ph5">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> 속성은 <ph id="ph6">&lt;xref:System.Windows.Application&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.#ctor">
          <source>for permission for this object to call unsafe native methods.</source>
          <target state="translated">안전 하지 않은 네이티브 메서드를 호출 하기 위해이 개체에 대 한 필요한 권한입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.#ctor">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Activate">
          <source>Attempts to bring the window to the foreground and activates it.</source>
          <target state="translated">창을 전경으로 가져오고 활성화하려고 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Activate">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> was successfully activated; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>가 활성화된 경우 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Activate">
          <source>The rules that determine whether the window is activated are the same as those used by the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> <ph id="ph2">`SetForegroundWindow`</ph> function (User32.dll).</source>
          <target state="translated">창이 활성화 여부를 결정 하는 규칙에서 사용 하는 것과 동일는 <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> <ph id="ph2">`SetForegroundWindow`</ph> 함수 (User32.dll).</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Activate">
          <source>If the window is activated in a Windows Presentation Foundation application that is not the user's foreground application, <ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph> event is raised.</source>
          <target state="translated">창이 전경 응용 프로그램이 사용자의 Windows Presentation Foundation 응용 프로그램에서 활성화 하는 경우 <ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Activate">
          <source>This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">창을 브라우저에서 호스팅되는 경우이 메서드를 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Activate">
          <source>for permission to activate a window.</source>
          <target state="translated">창을 활성화할 수 있는 권한입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Activate">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Activated">
          <source>Occurs when a window becomes the foreground window.</source>
          <target state="translated">창이 전경 창이 되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>A window is activated (becomes the foreground window) when:</source>
          <target state="translated">창이 활성화 될 (전경 창이 되) 경우:</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>The window is first opened.</source>
          <target state="translated">창이 처음 열릴 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>A user switches to a window by selecting it with the mouse, pressing ALT+TAB, or from Task Manager.</source>
          <target state="translated">ALT + TAB을 눌러 마우스를 사용 하거나 작업 관리자에서 선택 하 여 사용자는 창으로 전환 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>A user clicks the window's taskbar button.</source>
          <target state="translated">사용자가 창의 작업 표시줄 단추를 클릭 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>Windows that need to detect when they become activate can handle the <ph id="ph1">&lt;xref:System.Windows.Window.Activated&gt;</ph> event.</source>
          <target state="translated">활성화 되는 경우를 감지 해야 하는 Windows에서 처리할 수는 <ph id="ph1">&lt;xref:System.Windows.Window.Activated&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>After a window is first activated, it may be deactivated and reactivated many times during its lifetime.</source>
          <target state="translated">창이 처음 활성화 된 후 비활성화 하 고 해당 수명 동안 여러 번 다시 활성화 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>If an application's behavior or state depends on its activation state, it can inspect <ph id="ph1">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph> to determine which activation state it's in.</source>
          <target state="translated">활성화 상태에 종속 되는 응용 프로그램의 동작 또는 상태를 검사할 수 <ph id="ph1">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph> 에 정품 인증 상태를 확인 하려면.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>An application can also be <ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph>.</source>
          <target state="translated">응용 프로그램 일 수도 있습니다 <ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.AllowsTransparency">
          <source>Gets or sets a value that indicates whether a window's client area supports transparency.</source>
          <target state="translated">창의 클라이언트 영역에서 투명도를 지원하는지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the window supports transparency; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">창에서 투명도를 지원하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> property of a window is set to a transparent color, using <ph id="ph2">&lt;xref:System.Windows.Media.Brushes.Transparent%2A&gt;</ph> for example, the window remains opaque.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> 창의 속성을 투명 한 색을 사용 하 여 <ph id="ph2">&lt;xref:System.Windows.Media.Brushes.Transparent%2A&gt;</ph> 예를 들어 창을 불투명 하 게 유지 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>This means that the desktop and any running applications "beneath" the window cannot be seen.</source>
          <target state="translated">즉, 바탕 화면 및 "beneath" 창의 실행 중인 응용 프로그램을 볼 수 없습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>To enable this type of transparency, <ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> must be set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">이 형식의 투명도 사용 하도록 설정 하려면 <ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> 로 설정 해야 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> exists to facilitate the creation of non-rectangular windows, and, consequently, when <ph id="ph2">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> is set to <ph id="ph3">`true`</ph>, a window's <ph id="ph4">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph> property must be set to <ph id="ph5">&lt;xref:System.Windows.WindowStyle.None&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> 사각형이 아닌 창 편리 하 게 존재 영역이 때 <ph id="ph2">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> 로 설정 된 <ph id="ph3">`true`</ph>, 창의 <ph id="ph4">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph> 속성으로 설정 되어 있어야 <ph id="ph5">&lt;xref:System.Windows.WindowStyle.None&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.AllowsTransparency">
          <source>A window that has a <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowStyle" /&gt;</ph> value of anything other than <ph id="ph2">&lt;see cref="F:System.Windows.WindowStyle.None" /&gt;</ph>.</source>
          <target state="translated">창의 <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowStyle" /&gt;</ph> 값이 <ph id="ph2">&lt;see cref="F:System.Windows.WindowStyle.None" /&gt;</ph>이 아닌 경우</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.AllowsTransparencyProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.AllowsTransparency" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.AllowsTransparency" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph> that reflects the final size that the window should use to arrange itself and its children.</source>
          <target state="translated">창이 해당 창과 자식을 정렬하는 데 사용해야 하는 최종 크기를 반영하는 <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source>Override this method to arrange and size a window and its child elements.</source>
          <target state="translated">이 메서드를 재정의하여 창과 자식 요소를 정렬하고 크기를 조정합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph> that reflects the actual size that was used.</source>
          <target state="translated">사용된 실제 크기를 반영하는 <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.ArrangeOverride%2A&gt;</ph> is not called when the <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property has a value of <ph id="ph3">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.ArrangeOverride%2A&gt;</ph> 가 호출 되지 않습니다는 <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> 속성의 값은 <ph id="ph3">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property is either <ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.ArrangeOverride%2A&gt;</ph> is called.</source>
          <target state="translated">하는 경우의 값은 <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> 속성이 <ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.ArrangeOverride%2A&gt;</ph> 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source>When either <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> are called, the <ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property of a <ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph> is set to <ph id="ph5">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>.</source>
          <target state="translated">경우 중 하나 <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> 호출 됩니다는 <ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> 속성은 <ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph> 로 설정 된 <ph id="ph5">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Close">
          <source>Manually closes a <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated">수동으로 <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph>를 닫습니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> can be closed using one of several, well-known, system-provided mechanisms located in its title bar, including:</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> , 여러 가지 방법 중 하나를 사용 하 여 닫아야 잘 알려진 시스템 제공 메커니즘 있는 제목 표시줄을 포함 하 여에:</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>ALT+F4.</source>
          <target state="translated">ALT + F 4입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>System menu &amp;#124; <bpt id="p1">**</bpt>Close<ept id="p1">**</ept>.</source>
          <target state="translated">시스템 메뉴 &amp;#124; <bpt id="p1">**</bpt>닫기<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source><bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button.</source>
          <target state="translated"><bpt id="p1">**</bpt>닫기<ept id="p1">**</ept> 단추입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> can also be closed using one of several well-known mechanisms within the client area that are provided by developers, including:</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 포함 하 여 개발자가 제공 하는 클라이언트 영역 내에서 잘 알려진 몇 가지 메커니즘 중 하나를 사용 하 여 닫을 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source><bpt id="p1">**</bpt>File<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>Exit<ept id="p2">**</ept> on a main window.</source>
          <target state="translated"><bpt id="p1">**</bpt>파일<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>종료<ept id="p2">**</ept> 주 창에서.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source><bpt id="p1">**</bpt>File<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> or a <bpt id="p3">**</bpt>Close<ept id="p3">**</ept> button on a child window.</source>
          <target state="translated"><bpt id="p1">**</bpt>파일<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>닫기<ept id="p2">**</ept> 또는 <bpt id="p3">**</bpt>닫기<ept id="p3">**</ept> 자식 창에서 단추입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source><bpt id="p1">**</bpt>OK<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Cancel<ept id="p2">**</ept> buttons on a dialog box are also developer-provided, although will likely set <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>, which automatically closes a window that was opened by calling <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>정상<ept id="p1">**</ept> 및 <bpt id="p2">**</bpt>취소<ept id="p2">**</ept> 대화 상자 단추는 또한 개발자가 제공한, 있지만 설정할 가능성이 <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>, 자동으로 호출 하 여 열려 있는 창을 닫는 <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>These mechanisms require you to explicitly call <ph id="ph1">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> to close a window.</source>
          <target state="translated">이러한 메커니즘을 사용 하면를 명시적으로 호출 해야 <ph id="ph1">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> 하는 창을 닫습니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>If a window, opened by calling <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, and with a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> with its <ph id="ph3">&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;</ph> property set to true, will automatically close when the button is either clicked, or ESC is pressed.</source>
          <target state="translated">호출 하 여 창에서 열린 경우 <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, 및는 <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> 와 해당 <ph id="ph3">&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;</ph> 단추를 클릭 하거나, 또는 esc 키를 누를 때에 자동으로 속성이 true로 설정 닫힙니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>If the window was opened using <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, however, <ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> must be explicitly called, such as from <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event handler for the <ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
          <target state="translated">사용 하 여 창이 열린 경우 <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>그러나 <ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> 으로, 명시적으로 호출 해야 <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> 에 대 한 이벤트 처리기는 <ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>Closing a window causes the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event to be raised.</source>
          <target state="translated">창을 닫으면는 <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> 이벤트를 발생 합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event isn't canceled, the following occurs:</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> 이벤트 취소 하지 않으면 다음이 수행 됩니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is removed from <ph id="ph2">&lt;xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType&gt;</ph> (if an <ph id="ph3">&lt;xref:System.Windows.Application&gt;</ph> object exists).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 에서 제거 <ph id="ph2">&lt;xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType&gt;</ph> (하는 경우는 <ph id="ph3">&lt;xref:System.Windows.Application&gt;</ph> 개체가).</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is removed from the owner <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> if the owner/owned relationship was established before the owned <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> was shown and after the owner <ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph> was opened.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 소유자에서 제거 됩니다 <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> 소유자/소유 관계가 설정 된 경우 소유 된 전에 <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> 표시 된 소유자 후 <ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph> 열렸습니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window.Closed&gt;</ph> event is raised.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.Closed&gt;</ph> 이벤트가 발생합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>Unmanaged resources created by the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> are disposed.</source>
          <target state="translated">관리 되지 않는 리소스를에서 만든는 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 삭제 됩니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> was called to show the <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> returns.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> 이 호출 되어 표시를 <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> 반환 합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>Closing a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> causes any windows that it owns to be closed.</source>
          <target state="translated">닫기는 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 닫힌다고 소유 하는 모든 창이 있습니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>Furthermore, closing a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may cause an application to stop running depending on how the <ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType&gt;</ph> property is set.</source>
          <target state="translated">또한 닫기는 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 방식에 따라 실행이 중지 될 수 있습니다 <ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType&gt;</ph> 속성을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">창을 브라우저에서 호스팅되는 경우이 메서드를 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>The following example shows a <bpt id="p1">**</bpt>File<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>Exit<ept id="p2">**</ept> menu being handled to explicitly call <ph id="ph1">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 한 <bpt id="p1">**</bpt>파일<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>종료<ept id="p2">**</ept> 를 명시적으로 호출 처리 되 고 메뉴 <ph id="ph1">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>for permission to use all windows and user input events without restriction.</source>
          <target state="translated">모든 창과 사용자 입력된 이벤트를 제한 없이 사용할 수 있는 권한입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Closed">
          <source>Occurs when the window is about to close.</source>
          <target state="translated">창이 닫히려고 할 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closed">
          <source>Once this event is raised, a window cannot be prevented from closing.</source>
          <target state="translated">이 이벤트는 발생 되 면 창은 닫는에서 제한할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Closed">
          <source><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Visibility" /&gt;</ph> is set, or <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph>, or <ph id="ph4">&lt;see cref="M:System.Windows.Window.Hide" /&gt;</ph> is called while a window is closing.</source>
          <target state="translated">창이 닫히는 동안 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Visibility" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph> 또는 <ph id="ph3">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph>가 호출되거나 <ph id="ph4">&lt;see cref="M:System.Windows.Window.Hide" /&gt;</ph>가 설정된 경우</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Closing">
          <source>Occurs directly after <ph id="ph1">&lt;see cref="M:System.Windows.Window.Close" /&gt;</ph> is called, and can be handled to cancel window closure.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.Window.Close" /&gt;</ph>가 호출된 직후에 발생하며 창 닫기를 취소하도록 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> can be handled to detect when a window is being closed (for example, when <ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> is called).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> 검색 창의 닫을 때 처리 될 수 있습니다 (예를 들어 때 <ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> 라고).</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>Furthermore, <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> can be used to prevent a window from closing.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> 를 닫지 창을 방지 하기 위해 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>To prevent a window from closing, you can set the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph> argument to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">창을를 닫지 않으려면 설정할 수 있습니다는 <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> 의 속성은 <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph> 인수를 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event is raised when <ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> is called, if a window's Close button is clicked, or if the user presses ALT+F4.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> 이벤트가 발생할 때 <ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> 창의 닫기 단추를 클릭 하면 또는 ALT + F4 키를 누를 경우 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>If an owned window was opened by its owner window using <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, and the owner window is closed, the owned window's <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event is not raised.</source>
          <target state="translated">소유 된 창을 사용 하 여 해당 소유자 창에서 열린 경우 <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, 소유자 창이 닫힌 경우 소유 된 창 <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> 이벤트가 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>If the owner of a window is closed (see <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>), <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> is not raised on the owned window.</source>
          <target state="translated">창의 소유자 닫혀 있으면 (참조 <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>), <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> 소유 된 창에서 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> is called, the <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event for each window is raised.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> 호출 되는 <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> 각 창에 대 한 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>However, if <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> is canceled, cancellation is ignored.</source>
          <target state="translated">그러나 경우 <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> 가 취소 취소가 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>If a session ends because a user logs off or shuts down, <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> is not raised; handle <ph id="ph2">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> to implement code that cancels application closure.</source>
          <target state="translated">세션 사용자가 로그 오프 하거나 종료 하기 때문에 종료 되 면 <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> 발생 하지 않으면 처리할 <ph id="ph2">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> 응용 프로그램 종료를 취소 하는 코드를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to reinstantiate the window each time you show it, you can handle the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event, cancel it, and call the <ph id="ph2">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph> method.</source>
          <target state="translated">창 될 때마다 다시 인스턴스화하는 데 사용 하지을 표시 하 고 응용 프로그램의 수명 동안 여러 번 창이 숨길를 표시할 때마다 처리할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> 이벤트를 취소 하 고 호출에서 <ph id="ph2">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>Then, you can call <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> on the same instance to reopen it.</source>
          <target state="translated">그런 다음 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> 파일을 다시 동일한 인스턴스에 있습니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>The following example demonstrates a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> that determines whether it needs user intervention to close.</source>
          <target state="translated">다음 예제는 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 를 닫으려면 사용자 개입이 필요한 지 여부를 결정 하는 합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Closing">
          <source><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Visibility" /&gt;</ph> is set, or <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph>, or <ph id="ph4">&lt;see cref="M:System.Windows.Window.Close" /&gt;</ph> is called while a window is closing.</source>
          <target state="translated">창이 닫히는 동안 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Visibility" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph> 또는 <ph id="ph3">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph>가 호출되거나 <ph id="ph4">&lt;see cref="M:System.Windows.Window.Close" /&gt;</ph>가 설정된 경우</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.ContentRendered">
          <source>Occurs after a window's content has been rendered.</source>
          <target state="translated">창의 콘텐츠가 렌더링된 후에 발생합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.ContentRendered">
          <source>If the window has no content, this event is not raised.</source>
          <target state="translated">창에 콘텐츠가 없는 경우이 이벤트가 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Deactivated">
          <source>Occurs when a window becomes a background window.</source>
          <target state="translated">창이 배경 창이 되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>A window is deactivated (becomes a background window) when:</source>
          <target state="translated">비활성화 됩니다 (배경 창이 되) 경우:</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>A user switches to another window in the current application.</source>
          <target state="translated">사용자는 현재 응용 프로그램의 다른 창으로 전환합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>A user switches to the window in another application by using ALT+TAB or by using Task Manager.</source>
          <target state="translated">사용자가 ALT + TAB을 사용 하 여 또는 작업 관리자를 사용 하 여 다른 응용 프로그램의 창으로 전환 합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>A user clicks the taskbar button for a window in another application.</source>
          <target state="translated">사용자가 다른 응용 프로그램의 창에 대 한 작업 표시줄 단추를 클릭 합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>Windows that need to detect when they become deactivated by handling the <ph id="ph1">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> event.</source>
          <target state="translated">처리 하 여 비활성화 되는 경우를 감지 해야 하는 Windows에서 <ph id="ph1">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>After a window is first deactivated, it may be reactivated and deactivated many times during its lifetime.</source>
          <target state="translated">창이 처음 비활성화 된 후 다시 활성화 하 고 해당 수명 동안 여러 번 비활성화 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>If an application's behavior or state depends on its activation state, it can inspect <ph id="ph1">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph> to determine which activation state it's in.</source>
          <target state="translated">활성화 상태에 종속 되는 응용 프로그램의 동작 또는 상태를 검사할 수 <ph id="ph1">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph> 에 정품 인증 상태를 확인 하려면.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>An application can also be <ph id="ph1">&lt;xref:System.Windows.Application.Deactivated&gt;</ph>.</source>
          <target state="translated">응용 프로그램 일 수도 있습니다 <ph id="ph1">&lt;xref:System.Windows.Application.Deactivated&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.DialogResult">
          <source>Gets or sets the dialog result value, which is the value that is returned from the <ph id="ph1">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph> 메서드에서 반환된 값인 대화 상자 결과 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>A <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> value of type <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> 형식의 <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> can be used from the code that showed a dialog box to determine whether a user accepted (<ph id="ph2">`true`</ph>) or canceled (<ph id="ph3">`false`</ph>) the dialog box.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> 사용자 허용 하는지 여부를 확인 하려면 대화 상자를 표시 하는 코드에서 사용할 수 있습니다 (<ph id="ph2">`true`</ph>) 또는 취소 (<ph id="ph3">`false`</ph>) 대화 상자.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>If a dialog box was accepted, this signifies to the code that opened the dialog box to retrieve the data that was collected by the user and process it.</source>
          <target state="translated">대화 상자, 허용 되 면이 열은 대화 상자를 사용자에 의해 수집 된 데이터를 검색 하 고 처리 하는 코드를 의미 합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>If a dialog box was canceled, however, this signifies that calling code should stop any further processing.</source>
          <target state="translated">그러나 대화 상자를 취소 되 면 것을 의미는 코드를 호출 해야 처리를 중지 합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>By default, a dialog box is canceled when a user does one of the following:</source>
          <target state="translated">기본적으로 대화 상자는 사용자가 다음 중 하나를 수행 하는 경우 취소 됩니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>PressesALT+F4.</source>
          <target state="translated">PressesALT+F4.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>Clicks the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button.</source>
          <target state="translated">클릭는 <bpt id="p1">**</bpt>닫기<ept id="p1">**</ept> 단추입니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>Selects <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> from the System menu.</source>
          <target state="translated">선택 <bpt id="p1">**</bpt>닫기<ept id="p1">**</ept> 시스템 메뉴에서 합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>In all of these cases, <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> is <ph id="ph2">`false`</ph> by default.</source>
          <target state="translated">이러한 경우 모든 <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> 은 <ph id="ph2">`false`</ph> 기본적으로 합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>A dialog box typically provides a special button to cancel a dialog, which is the button whose <ph id="ph1">&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">대화 상자 단추로 사용 되는 대화 상자를 취소 하는 특수 단추는 일반적으로 제공 된 <ph id="ph1">&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;</ph> 속성이로 설정 된 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>A button configured this way will automatically close a window when either it is pressed, or when the ESC key is pressed.</source>
          <target state="translated">이러한 방식으로 구성 하는 단추를 자동으로 닫힙니다 창을 누른 하거나 때나 ESC 키를 누를 때.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>In either of these cases, <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> remains <ph id="ph2">`false`</ph>.</source>
          <target state="translated">이러한 경우 모두 <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> 남아 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>A dialog box also typically provides an accept button, which is the button whose <ph id="ph1">&lt;xref:System.Windows.Controls.Button.IsDefault%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">대화 상자에는 일반적으로 단추의 적용 단추, 제공 된 <ph id="ph1">&lt;xref:System.Windows.Controls.Button.IsDefault%2A&gt;</ph> 속성이로 설정 된 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>A button configured this way will raise its <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event when either it or the ENTER key is pressed.</source>
          <target state="translated">이러한 방식으로 구성 하는 단추에서 발생 하는 해당 <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> 것 또는 ENTER 키를 누를 때 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>However, it won't automatically close the dialog box, nor will it set <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">그러나 대화 상자에서 자동으로 닫히지 않고 제대로 설정 됩니다 <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> 를 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>You need to manually write this code, usually from the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event handler for the default button.</source>
          <target state="translated">수동으로이 코드에서 일반적으로 기록해 야 하는 <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> 기본 단추에 대 한 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> is <ph id="ph2">`null`</ph> when the dialog box is shown but neither accepted nor canceled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> <ph id="ph2">`null`</ph> 대화 상자가 표시 될 때 하지만 모두 허용 되거나 취소 합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>After a dialog box closes, you can get the dialog result from the value returned by <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> method, or by inspecting the <ph id="ph2">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> property.</source>
          <target state="translated">대화 상자가 닫힌 후에서 반환한 값에서 대화 상자 결과 얻을 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> 메서드를 검사 하 여 또는 <ph id="ph2">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> can only be set when a <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> is opened by calling its <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> 만 경우 설정할 수는 <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> 호출 하 여 열린 해당 <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>The following example shows how to configure an OK button and a Cancel button to return the appropriate <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>.</source>
          <target state="translated">확인 단추와 적절 한 돌아가려면 취소 단추를 구성 하는 방법을 보여 주는 다음 예제 <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.DialogResult">
          <source><ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph> is set before a window is opened by calling <ph id="ph2">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph>는 <ph id="ph2">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph>를 호출하여 창이 열리기 전에 설정됩니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.DialogResult">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.DialogResult">
          <source><ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph> is set on a window that is opened by calling <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph>는 <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph>를 호출하여 창이 열릴 때 설정됩니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.DpiChanged">
          <source>Occurs after the DPI of the screen on which the Window is displayed changes.</source>
          <target state="translated">창이 표시되는 화면 DPI가 변경된 후에 발생합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.DpiChangedEvent">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEvent" /&gt;</ph> for when the DPI of the screen the Window is on changes.</source>
          <target state="translated">창의 화면 DPI가 변경 중일 때의 <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEvent" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.DragMove">
          <source>Allows a window to be dragged by a mouse with its left button down over an exposed area of the window's client area.</source>
          <target state="translated">마우스 왼쪽 단추를 누른 상태로 창 클라이언트 영역의 노출된 영역에서 창을 끌 수 있게 합니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>The left mouse button must be down when <ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph> is called.</source>
          <target state="translated">마우스 왼쪽된 단추를 누른 상태로 해야 <ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph> 라고 합니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>One way to detect when the left mouse button is pressed is to handle the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> event.</source>
          <target state="translated">마우스 왼쪽된 단추를 누를 때 검색 하는 한 가지 방법은 처리 하기 위한 것은 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph> is called, the left mouse button must be depressed over an exposed area of the window's client area.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph> 호출 되는 왼쪽 창의 클라이언트 영역의 노출 된 영역 마우스 단추를 누를 해야 합니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">창을 브라우저에서 호스팅되는 경우이 메서드를 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>The following example shows how to override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph> to call <ph id="ph2">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 재정의 하는 방법을 보여 줍니다. <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph> 호출할 <ph id="ph2">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.DragMove">
          <source>The left mouse button is not down.</source>
          <target state="translated">왼쪽 마우스 단추를 누르지 않은 경우</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>for permission to drag a window.</source>
          <target state="translated">창을 끌 수 있는 권한입니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)">
          <source>The dependency object.</source>
          <target state="translated">종속성 개체입니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)">
          <source>Returns a reference to the <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> object that hosts the content tree within which the dependency object is located.</source>
          <target state="translated">종속성 개체가 위치한 콘텐츠 트리를 호스팅하는 <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 개체에 대한 참조를 반환합니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> reference to the host window.</source>
          <target state="translated">호스트 창에 대한 <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 참조입니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)">
          <source><ph id="ph1">&lt;paramref name="dependencyObject" /&gt;</ph> is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dependencyObject" /&gt;</ph>가 null인 경우</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Hide">
          <source>Makes a window invisible.</source>
          <target state="translated">창이 표시되지 않게 합니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>A window is not closed when it is hidden, and neither the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> nor <ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph> event is raised.</source>
          <target state="translated">숨겨져 창이 닫힐 않으며는 <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> 나 <ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>Instead, the window's <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">대신, 창의 <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> 속성이 <ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>If a window is the application's <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> and the application's <ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> is <ph id="ph3">&lt;xref:System.Windows.ShutdownMode.OnMainWindowClose&gt;</ph>, the application does not shut down.</source>
          <target state="translated">창을 응용 프로그램의 경우 <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> 및 응용 프로그램의 <ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> 은 <ph id="ph3">&lt;xref:System.Windows.ShutdownMode.OnMainWindowClose&gt;</ph>, 응용 프로그램 종료 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>Likewise, the application does not shut down if a window is the only window and the application's shutdown mode is <ph id="ph1">&lt;xref:System.Windows.ShutdownMode.OnLastWindowClose&gt;</ph>.</source>
          <target state="translated">마찬가지로, 응용 프로그램 종료 하지 않은 경우 유일한 창입니다는 응용 프로그램의 종료 모드 <ph id="ph1">&lt;xref:System.Windows.ShutdownMode.OnLastWindowClose&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to re-instantiate the window each time you show it, you can handle the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event, cancel it, and call the <ph id="ph2">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph> method.</source>
          <target state="translated">표시 하 고 응용 프로그램의 수명 동안 여러 번 창이 숨길 하 고 다시 창을 인스턴스화할 때마다 하지 않을 경우 표시할 때마다 처리할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> 이벤트를 취소 하 고 호출에서 <ph id="ph2">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>Then, you can call <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> on the same instance to re-open it.</source>
          <target state="translated">그런 다음 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> 를 다시 열려면 동일한 인스턴스에 있습니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Hide">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.Window.Hide" /&gt;</ph> is called on a window that is closing (<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>) or has been closed (<ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph>).</source>
          <target state="translated">닫히고 있는 창(<ph id="ph1">&lt;see cref="M:System.Windows.Window.Hide" /&gt;</ph>) 또는 닫힌 창(<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>)에서 <ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph>가 호출된 경우</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Icon">
          <source>Gets or sets a window's icon.</source>
          <target state="translated">창의 아이콘을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>An <ph id="ph1">&lt;see cref="T:System.Windows.Media.ImageSource" /&gt;</ph> object that represents the icon.</source>
          <target state="translated">아이콘을 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Media.ImageSource" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Windows Presentation Foundation (WPF) standalone applications have two types of icons:</source>
          <target state="translated">Windows Presentation Foundation (WPF) 독립 실행형 응용 프로그램에는 두 가지 유형의 아이콘:</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>One assembly icon, which is specified by using the <ph id="ph1">`&lt;ApplicationIcon&gt;`</ph> property in the application's project build file.</source>
          <target state="translated">사용 하 여 지정 된 어셈블리 아이콘은 <ph id="ph1">`&lt;ApplicationIcon&gt;`</ph> 응용 프로그램의 프로젝트 속성 파일을 작성 합니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>This icon is used as the desktop icon for an assembly.</source>
          <target state="translated">이 아이콘은 어셈블리에 대 한 바탕 화면 아이콘으로 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>When debugging in Visual Studio, your icon may not appear due to the hosting process.</source>
          <target state="translated">Visual Studio의 디버깅 프로그램 아이콘 호스팅 프로세스로 인해 나타나지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>If you run the executable, the icon will appear.</source>
          <target state="translated">실행 파일을 실행 하는 경우에 아이콘이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>For more information, see <bpt id="p1">[</bpt>Hosting Process (vshost.exe)<ept id="p1">](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>호스팅 프로세스(vshost.exe)<ept id="p1">](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>One icon per window that is specified by setting <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>.</source>
          <target state="translated">설정 하 여 지정 된 창당 하나 아이콘 <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>For each window, this icon is used in its title bar, its task bar button, and in its ALT-TAB application selection list entry.</source>
          <target state="translated">각 창에 대해 해당 작업 표시줄 단추가 제목 표시줄에 있는 및의 ALT + TAB 응용 프로그램 선택 목록 항목에이 아이콘이 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>A WPF window always displays an icon.</source>
          <target state="translated">항상 WPF 창 아이콘을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>When one is not provided by setting <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>, WPF chooses an icon to display based on the following rules:</source>
          <target state="translated">설정 하 여 하지 제공 된 경우 <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>, WPF는 다음 규칙에 따라 표시할 아이콘을 선택 합니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Use the assembly icon, if specified.</source>
          <target state="translated">지정 된 경우에 어셈블리 아이콘을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>If the assembly icon is not specified, use the default Microsoft Windows icon.</source>
          <target state="translated">어셈블리 아이콘을 지정 하지 않으면 기본 Microsoft Windows 아이콘을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>If you use <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph> to specify a custom window icon, you can restore the default application icon by setting <ph id="ph2">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph> to <ph id="ph3">`null`</ph>.</source>
          <target state="translated">사용 하는 경우 <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph> 사용자 지정 창 아이콘을 지정 하려면 기본 응용 프로그램 아이콘을 설정 하 여 복원할 수 있습니다 <ph id="ph2">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph> 를 <ph id="ph3">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>A single icon can be used in a variety of ways in Windows, including being shown in the title bar of a window, the task bar for a window, the ALT+TAB file selection list.</source>
          <target state="translated">단일 아이콘은 여러 가지 방법으로 창, 창, ALT + TAB 파일 선택 목록에 대 한 작업 표시줄의 제목 표시줄에 표시 하는 등 Windows에서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Each of these shows the icon using a different size; a 16x16 pixel icon is displayed in the title bar of a window and in the task bar, while a 32x32 pixel icon is displayed in the ALT+TAB file selection list.</source>
          <target state="translated">다른 크기;를 사용 하 여 아이콘을 표시 이러한 각 ALT + TAB 파일 선택 목록에 표시 되는 32 x 32 픽셀 아이콘 동안 16 x 16 픽셀 아이콘은 창의 제목 표시줄에 하 고 작업 표시줄에 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Some applications, like <ph id="ph1">[!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)]</ph>, provide a <bpt id="p1">**</bpt>View<ept id="p1">**</ept> menu that allows you to choose the size of the icon you'd like to view.</source>
          <target state="translated">와 같은 일부 응용 프로그램 <ph id="ph1">[!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)]</ph>, 제공는 <bpt id="p1">**</bpt>보기<ept id="p1">**</ept> 메뉴를 보려면 원하는 아이콘의 크기를 선택할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>To cater to the various display sizes, an icon file is composed of one or more actual icons where each one represents a version of the icon that targets a specific size and color depth.</source>
          <target state="translated">다양 한 표시 크기에 맞도록, 아이콘 파일 각각 특정 크기 및 색 농도 대상으로 하는 아이콘의 버전을 나타냅니다는 하나 이상의 실제 아이콘으로 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>For example, one icon may only have a single 16x16 pixel icon with 16 colors, while another may contain 16x16 pixel and 32x32 pixel icons with both 16 colors and 256 colors.</source>
          <target state="translated">예를 들어 한 아이콘 반면 다른 16 색와 256 색 모두 32 x 32 픽셀 아이콘과 16 x 16 픽셀 16 색으로 단일 16 x 16 픽셀 아이콘을 하나만 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>If icons for all possible sizes and color depths exist within an icon file, <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> will use the appropriate icon.</source>
          <target state="translated">아이콘 파일 내에 모든 가능한 크기 및 색 농도 아이콘이 있을 경우 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 해당 아이콘을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>If an icon file contains only a subset of all the possible icons, <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> uses the next most appropriate icon in order of decreasing sizes and color depth.</source>
          <target state="translated">아이콘 파일에는 가능한 모든 아이콘의 하위 집합만 포함 되어 있으면 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 의 크기 및 색 농도 내림차순 다음 가장 적합 한 아이콘을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>The result is that an icon will always be used by <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, although the icon used may not target the required size and color depth.</source>
          <target state="translated">결과 아이콘 항상에서 사용할 수는 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>사용 되는 아이콘 필요한 크기와 색 농도 대상 하지 않더라도, 합니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>For example, a 16x16 pixel icon with 16 colors may be used for display as a 32x32 pixel icon with 256 colors.</source>
          <target state="translated">예를 들어를 16 색 16 x 16 픽셀 아이콘 256 개 색을 가진 32 x 32 픽셀 아이콘으로 표시 하기 위해 사용 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>This can cause undesirable visual effects, such as pixilation, but may be avoided by creating icons for all targeted sizes and color depths.</source>
          <target state="translated">이 픽셀화가, 예: 바람직하지 않은 시각 효과 발생할 수 있습니다 하지만 모든 대상된 크기와 색상에 대 한 아이콘을 만들어이 피할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>The following example shows how to set a window icon.</source>
          <target state="translated">다음 예제에서는 창 아이콘을 설정 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>for permission to set the icon.</source>
          <target state="translated">아이콘을 설정할 수 있는 권한입니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.IconProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.Icon" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.Icon" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.IsActive">
          <source>Gets a value that indicates whether the window is active.</source>
          <target state="translated">창이 활성 상태인지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the window is active; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">창이 활성 상태이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>An active window is the user's current foreground window and has the focus, which is signified by the active appearance of the title bar.</source>
          <target state="translated">활성 창에는 사용자의 현재 전경 창을 이며에서 포커스가 있는 제목 표시줄의 활성 모양으로 표시 합니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>An active window will also be the top-most of all top-level windows that don't explicitly set the <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property.</source>
          <target state="translated">활성 창도 명시적으로 설정 하지 않은 모든 최상위 창의 최상위 됩니다는 <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.IsActiveProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.IsActive" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.IsActive" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Left">
          <source>Gets or sets the position of the window's left edge, in relation to the desktop.</source>
          <target state="translated">바탕 화면과 관련해서 창의 왼쪽 가장자리 위치를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>The position of the window's left edge, in logical units (1/96th of an inch).</source>
          <target state="translated">논리 단위(1인치의 1/96)로 지정된 창의 왼쪽 가장자리 위치입니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is maximized or minimized, this value represents the left edge of the restore point for the <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 최대화 되거나 최소화, 복원의 왼쪽된 가장자리에 대 한 지점의이 값 나타냅니다는 <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>This property cannot be set through a style.</source>
          <target state="translated">스타일을 통해이 속성을 설정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>If you do not specify a value, <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> is set to the system default value.</source>
          <target state="translated">값을 지정 하지 않으면 <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> 시스템 기본 값으로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>You can also specify the system default value by setting <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph>.</source>
          <target state="translated">설정 하 여 시스템 기본값을 지정할 수도 있습니다 <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>Neither <ph id="ph1">&lt;xref:System.Double.NegativeInfinity&gt;</ph> nor <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph> is a valid value for <ph id="ph3">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>.</source>
          <target state="translated">모두 <ph id="ph1">&lt;xref:System.Double.NegativeInfinity&gt;</ph> 나 <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph> 에 대 한 유효한 값인지 <ph id="ph3">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.LeftProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.Left" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.Left" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.LocationChanged">
          <source>Occurs when the window's location changes.</source>
          <target state="translated">창의 위치가 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>A window's location changes when:</source>
          <target state="translated">창의 위치를 변경 하는 경우:</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>A user moves a window by dragging it with the window's title bar.</source>
          <target state="translated">창의 제목 표시줄으로 드래그 하 여 창을 이동 하는 사용자입니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>A window is moved after <ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph> is called.</source>
          <target state="translated">창이 이동 하는 후 <ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph> 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>Either the <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> property is set programmatically.</source>
          <target state="translated">중 하나는 <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> 속성을 프로그래밍 방식으로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>The <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> menu item of a window's System menu is chosen.</source>
          <target state="translated"><bpt id="p1">**</bpt>이동<ept id="p1">**</ept> 창의 시스템 메뉴의 메뉴 항목을 선택 합니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph> property is changed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph> 속성을 변경 합니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.LogicalChildren">
          <source>Gets an enumerator for a window's logical child elements.</source>
          <target state="translated">창의 논리적 자식 요소에 대한 열거자를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.LogicalChildren">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> a window's logical child elements.</source>
          <target state="translated">창의 논리적 자식 요소에 대한 <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph> that reflects the available size that this window can give to the child.</source>
          <target state="translated">이 창에서 자식에 사용할 수 있는 크기를 반영하는 <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>Infinity can be given as a value to indicate that the window will size to whatever content is available.</source>
          <target state="translated">창의 크기를 사용할 수 있는 콘텐츠에 맞게 조정할 수 있음을 나타내려면 값을 무한대로 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>Override this method to measure the size of a window.</source>
          <target state="translated">이 메서드를 재정의하여 창의 크기를 측정합니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.</source>
          <target state="translated">이 창에서 자식의 크기 계산을 기반으로 레이아웃 중에 필요한 것으로 확인된 크기를 반영하는 <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.MeasureOverride%2A&gt;</ph> is not called when the <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property has a value of <ph id="ph3">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.MeasureOverride%2A&gt;</ph> 가 호출 되지 않습니다는 <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> 속성의 값은 <ph id="ph3">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property is either <ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.MeasureOverride%2A&gt;</ph> is called.</source>
          <target state="translated">하는 경우의 값은 <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> 속성이 <ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.MeasureOverride%2A&gt;</ph> 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>When either <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> are called, the <ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property of a <ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph> is set to <ph id="ph5">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>.</source>
          <target state="translated">경우 중 하나 <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> 호출 됩니다는 <ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> 속성은 <ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph> 로 설정 된 <ph id="ph5">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnActivated(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnActivated(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.Activated" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Window.Activated" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnActivated(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph>는 <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnActivated(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph>.</source>
          <target state="translated">파생 되는 형식을 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 재정의할 수 있습니다 <ph id="ph2">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnActivated(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph> needs to be raised.</source>
          <target state="translated">재정의 된 메서드를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph> 기본 클래스에서 경우 <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph> 발생 해야 합니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnClosed(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnClosed(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosed(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph>는 <ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosed(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph>.</source>
          <target state="translated">파생 되는 형식을 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 재정의할 수 있습니다 <ph id="ph2">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosed(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph> needs to be raised.</source>
          <target state="translated">재정의 된 메서드를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph> 기본 클래스에서 경우 <ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph> 발생 해야 합니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.CancelEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.ComponentModel.CancelEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph>는 <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph>.</source>
          <target state="translated">파생 되는 형식을 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 재정의할 수 있습니다 <ph id="ph2">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> needs to be raised.</source>
          <target state="translated">재정의 된 메서드를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph> 기본 클래스에서 경우 <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> 발생 해야 합니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnContentChanged(System.Object,System.Object)">
          <source>A reference to the root of the old content tree.</source>
          <target state="translated">이전 콘텐츠 트리의 루트에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnContentChanged(System.Object,System.Object)">
          <source>A reference to the root of the new content tree.</source>
          <target state="translated">새 콘텐츠 트리의 루트에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnContentChanged(System.Object,System.Object)">
          <source>Called when the <ph id="ph1">&lt;see cref="P:System.Windows.Controls.ContentControl.Content" /&gt;</ph> property changes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Controls.ContentControl.Content" /&gt;</ph> 속성이 변경되면 호출됩니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnContentRendered(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnContentRendered(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.ContentRendered" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Window.ContentRendered" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnContentRendered(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph>는 <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnContentRendered(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph>.</source>
          <target state="translated">파생 되는 형식을 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 재정의할 수 있습니다 <ph id="ph2">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnContentRendered(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph> needs to be raised.</source>
          <target state="translated">재정의 된 메서드를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph> 기본 클래스에서 경우 <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph> 발생 해야 합니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnCreateAutomationPeer">
          <source>Creates and returns a <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /&gt;</ph> object for this <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /&gt;</ph>에 대한 <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 개체를 만들어 반환합니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnCreateAutomationPeer">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /&gt;</ph> object for this <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /&gt;</ph>에 대한 <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnCreateAutomationPeer">
          <source>This method overrides <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A&gt;</ph>를 재정의합니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnDeactivated(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnDeactivated(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.Deactivated" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Window.Deactivated" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnDeactivated(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph>는 <ph id="ph2">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnDeactivated(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph>.</source>
          <target state="translated">파생 되는 형식을 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 재정의할 수 있습니다 <ph id="ph2">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnDeactivated(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> needs to be raised.</source>
          <target state="translated">재정의 된 메서드를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph> 기본 클래스에서 경우 <ph id="ph2">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> 발생 해야 합니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)">
          <source>The previous DPI scale setting.</source>
          <target state="translated">이전 DPI 배율 설정입니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)">
          <source>The new DPI scale setting.</source>
          <target state="translated">새 DPI 배율 설정입니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)">
          <source>Called when the DPI at which this window is rendered changes.</source>
          <target state="translated">이 창이 렌더링되는 DPI가 변경될 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnLocationChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnLocationChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.LocationChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Window.LocationChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnLocationChanged(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph>는 <ph id="ph2">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnLocationChanged(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph>.</source>
          <target state="translated">파생 되는 형식을 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 재정의할 수 있습니다 <ph id="ph2">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnLocationChanged(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph> needs to be raised.</source>
          <target state="translated">재정의 된 메서드를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph> 기본 클래스에서 경우 <ph id="ph2">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph> 발생 해야 합니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>The data for the event.</source>
          <target state="translated">이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>Called when the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /&gt;</ph> event occurs.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /&gt;</ph> 이벤트가 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>This implementation does not change the handled state (the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> property) of the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph> event data.</source>
          <target state="translated">이 구현은 처리 상태를 변경 되지 않습니다 (의 <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> 속성)의 <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph> 이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>If you override <ph id="ph1">&lt;see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /&gt;</ph>, always call the base implementation in your <ph id="ph2">&lt;see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /&gt;</ph> implementation.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /&gt;</ph>, 항상 기본 구현을 호출 프로그램 <ph id="ph2">&lt;see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /&gt;</ph> 구현 합니다.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>Failure to call the base implementation prevents base classes from handling the event, which might change the run-time behavior of the final class.</source>
          <target state="translated">기본 구현을 호출 하지 않으면 최종 클래스의 런타임 동작을 변경할 수 있는 이벤트를 처리 하는에서 기본 클래스를 방지 합니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>You can call the base implementation either before or after your special handling, depending on your requirements.</source>
          <target state="translated">요구 사항에 따라 앞 이나 뒤를 별도로 처리 하는 기본 구현을 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.SourceInitialized" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Window.SourceInitialized" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph>는 <ph id="ph2">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph>.</source>
          <target state="translated">파생 되는 형식을 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 재정의할 수 있습니다 <ph id="ph2">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph> needs to be raised.</source>
          <target state="translated">재정의 된 메서드를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph> 기본 클래스에서 경우 <ph id="ph2">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph> 발생 해야 합니다.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnStateChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnStateChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.StateChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Window.StateChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnStateChanged(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph>는 <ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnStateChanged(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph>.</source>
          <target state="translated">파생 되는 형식을 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 재정의할 수 있습니다 <ph id="ph2">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnStateChanged(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> needs to be raised.</source>
          <target state="translated">재정의 된 메서드를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph> 기본 클래스에서 경우 <ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> 발생 해야 합니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>The previous parent.</source>
          <target state="translated">이전 부모입니다.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Set to null if the <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> did not have a previous parent.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>에 이전 부모가 없는 경우 null로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Called when the parent of the window is changed.</source>
          <target state="translated">창의 부모가 변경될 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.OwnedWindows">
          <source>Gets a collection of windows for which this window is the owner.</source>
          <target state="translated">이 창이 소유자인 창의 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.OwnedWindows">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.WindowCollection" /&gt;</ph> that contains references to the windows for which this window is the owner.</source>
          <target state="translated">이 창이 소유자인 창에 대한 참조가 들어 있는 <ph id="ph1">&lt;see cref="T:System.Windows.WindowCollection" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.OwnedWindows">
          <source>An owned window is one whose <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property is set with a reference to another window, which is known as the owner window.</source>
          <target state="translated">하나인 소유 된 창을 인 <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> 소유자 창으로 알려진 다른 창에 대 한 참조로 속성을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.OwnedWindows">
          <source>To find all the windows that an owner window owns, you can enumerate <ph id="ph1">&lt;xref:System.Windows.WindowCollection&gt;</ph> that is returned by the <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph> property.</source>
          <target state="translated">소유 하는 소유자 창이 있는 모든 창을 찾기 위해 열거할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.WindowCollection&gt;</ph> 에서 반환 하는 <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.OwnedWindows">
          <source>The following example shows how to enumerate <ph id="ph1">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 열거 하는 방법을 보여 줍니다. <ph id="ph1">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> that owns this <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph>를 소유하는<ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> object that represents the owner of this <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph>의 소유자를 나타내는 <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>When a child window is opened by a parent window by calling <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, an implicit relationship is established between both parent and child window.</source>
          <target state="translated">호출 하 여 자식 창의 부모 창에서 열 때 <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, 부모와 자식 창 간에 암시적 관계가 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>This relationship enforces certain behaviors, including with respect to minimizing, maximizing, and restoring.</source>
          <target state="translated">이 관계는 최소화, 최대화 및 복원에 대해 포함 하 여 특정 동작을 적용 합니다.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>When a child window is created by a parent window by calling <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, however, the child window does not have a relationship with the parent window.</source>
          <target state="translated">그러나 호출 하 여 자식 창의 부모 창에서 만들 때 <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, 자식 창에 관계가 설정 되어 있지 부모 창입니다.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>This means that:</source>
          <target state="translated">이는 다음을 의미합니다.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>The child window does not have a reference to the parent window.</source>
          <target state="translated">자식 창에는 부모 창에 대 한 참조가 없습니다.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>The behavior of the child window is not dependent on the behavior of the parent window; either window can cover the other, or be minimized, maximized, and restored independently of the other.</source>
          <target state="translated">자식 창의 동작 부모 창의 동작에 종속 되지 않습니다. 두 창 중 하나를 포함할 수 또는 최소화, 최대화 및 서로 독립적으로 복원 합니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>To allow you to create a relationship between a child window and a parent window, <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> supports the notion of ownership.</source>
          <target state="translated">부모 창의 자식 창 사이의 관계를 만들 수 있도록 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 소유권의 개념을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>Ownership is established when the <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property of a window (the owned window) is set with a reference to another window (the owner window).</source>
          <target state="translated">소유권이 설정 된 경우는 <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> 창 (소유한 창)의 속성은 다른 창 (소유자 창)에 대 한 참조입니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>Once this relationship is established, the following behaviors are exhibited:</source>
          <target state="translated">이 관계 설정 되 면 다음 동작이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If an owner window is minimized, all its owned windows are minimized as well.</source>
          <target state="translated">소유자 창이 최소화 하는 경우 소유 된 모든 창도 최소화 됩니다.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If an owned window is minimized, its owner is not minimized.</source>
          <target state="translated">소유 된 창을 최소화 하면 소유자 최소화 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If an owner window is maximized, both the owner window and its owned windows are restored.</source>
          <target state="translated">소유자 창이 최대화 되 면 소유자 창 및 소유 된 창 모두 복원 됩니다.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>An owner window can never cover an owned window.</source>
          <target state="translated">소유자 창 소유 된 창을 포함할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>Owned windows that were not opened using <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> are not modal.</source>
          <target state="translated">사용 하 여 열려 있지 않은 windows 소유 <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> 는 모달 대화 상자가 있습니다.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>The user can still interact with the owner window.</source>
          <target state="translated">사용자는 소유자 창이 여전히 작용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If you close an owner window, its owned windows are also closed.</source>
          <target state="translated">소유자 창을 닫은 경우 소유 된 창도 닫힙니다.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If an owned window was opened by its owner window using <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, and the owner window is closed, the owned window's <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event is not raised.</source>
          <target state="translated">소유 된 창을 사용 하 여 해당 소유자 창에서 열린 경우 <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, 소유자 창이 닫힌 경우 소유 된 창 <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> 이벤트가 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>When you open a child window by calling <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, you should also set the <ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property of the child window.</source>
          <target state="translated">호출 하 여 자식 창을 열 때 <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>를 설정 해야는 <ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> 자식 창의 속성입니다.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button.</source>
          <target state="translated">이렇게 하지 않으면 사용자가 작업 표시줄 단추를 눌러 자식 창과 부모 창으로 돌아갈 수 수 없습니다.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.</source>
          <target state="translated">대신, 작업 표시줄 단추를 누르면를 생성 하 여 s e l e 부모와 자식 창을 포함 하 여 창의 목록을 선택한 기간만 복원 됩니다.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>You should also set the <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property on a window that that is opened by calling <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> to ensure correct behavior with .</source>
          <target state="translated">설정 해야는 <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> 를 호출 하 여 열 창에서 속성 <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> 에 올바른 동작을 보장 합니다.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>The following example shows how to establish the owner/owned relationship.</source>
          <target state="translated">다음 예제에는 소유자/소유 하 고 관계를 설정 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>A window tries to own itself</source>
          <target state="translated">창이 자신을 소유하려고 하는 경우</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>Two windows try to own each other.</source>
          <target state="translated">두 개의 창이 서로를 소유하려고 하는 경우</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>The <ph id="ph1">&lt;see cref="P:System.Windows.Window.Owner" /&gt;</ph> property is set on a visible window shown using <ph id="ph2">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.Owner" /&gt;</ph>를 사용하여 표시된 창에서 <ph id="ph2">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph> 속성이 설정된 경우</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>The <ph id="ph1">&lt;see cref="P:System.Windows.Window.Owner" /&gt;</ph> property is set with a window that has not been previously shown.</source>
          <target state="translated">이전에 표시되지 않은 창에서 <ph id="ph1">&lt;see cref="P:System.Windows.Window.Owner" /&gt;</ph> 속성이 설정된 경우</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>for permission to use all windows and user input events without restriction.</source>
          <target state="translated">모든 창과 사용자 입력된 이벤트를 제한 없이 사용할 수 있는 권한입니다.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.ResizeMode">
          <source>Gets or sets the resize mode.</source>
          <target state="translated">크기 조정 모드를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.ResizeMode" /&gt;</ph> value specifying the resize mode.</source>
          <target state="translated">크기 조정 모드를 지정하는 <ph id="ph1">&lt;see cref="T:System.Windows.ResizeMode" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>There are four options:</source>
          <target state="translated">다음과 같은 네 가지가 있습니다.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source><bpt id="p1">**</bpt>NoResize<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>NoResize<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The user cannot resize the window.</source>
          <target state="translated">사용자는 창의 크기를 조정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The Maximize and Minimize boxes are not shown.</source>
          <target state="translated">최대화, 최소화 상자 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source><bpt id="p1">**</bpt>CanMinimize<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>CanMinimize<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The user can only minimize the window and restore it from the taskbar.</source>
          <target state="translated">만 사용자 창을 최소화 하 고 작업 표시줄에서 복원할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The Minimize and Maximize boxes are both shown, but only the Minimize box is enabled.</source>
          <target state="translated">최소화 및 최대화 상자 모두 표시 되지만 최소화 상자만 사용 하도록 설정 합니다.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source><bpt id="p1">**</bpt>CanResize<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>CanResize<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The user has the full ability to resize the window, using the Minimize and Maximize boxes, and a draggable outline around the window.</source>
          <target state="translated">사용자에 게 창 주변의 최소화 및 최대화 상자 및 draggable 개요를 사용 하는 창의 크기를 조정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The Minimize and Maximize boxes are shown and enabled.</source>
          <target state="translated">최소화 및 최대화 상자를 표시 하 고 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>(Default).</source>
          <target state="translated">(기본값).</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source><bpt id="p1">**</bpt>CanResizeWithGrip<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>CanResizeWithGrip<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>This option has the same functionality as <ph id="ph1">&lt;xref:System.Windows.ResizeMode.CanResize&gt;</ph>, but adds a "resize grip" to the lower right corner of the window.</source>
          <target state="translated">이 옵션은 동일한 기능을 <ph id="ph1">&lt;xref:System.Windows.ResizeMode.CanResize&gt;</ph>, 하지만 창의 오른쪽 맨 아래에 "크기 조정 그립"를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.ResizeModeProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.ResizeMode" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.ResizeMode" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.RestoreBounds">
          <source>Gets the size and location of a window before being either minimized or maximized.</source>
          <target state="translated">최소화 또는 최대화하기 전의 창의 크기와 위치를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Rect" /&gt;</ph> that specifies the size and location of a window before being either minimized or maximized.</source>
          <target state="translated">최소화 또는 최대화하기 전의 창의 크기와 위치를 지정하는 <ph id="ph1">&lt;see cref="T:System.Windows.Rect" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>The restore rectangle is the region occupied by the window before it was minimized or maximized.</source>
          <target state="translated">복원 사각형은 지역 창에 최소화 또는 최대화 전에 사용 합니다.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>You can use <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph> to save the last size and location of a window before an application is closed, and retrieve those values the next time an application starts to restore a window to the way a user left it.</source>
          <target state="translated">사용할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph> 응용 프로그램을 닫기 전에 마지막 크기 및 창 위치를 저장 하 고 응용 프로그램이 시작 하 여 사용자는 방식과 창을 복원 하려면 다음에 해당 값을 검색 합니다.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>If you query <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph> before the window has been shown or after it has been closed, <ph id="ph2">&lt;xref:System.Windows.Rect.Empty%2A&gt;</ph> is returned.</source>
          <target state="translated">쿼리 하는 경우 <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph> 는 window가 표시 되기 전에 또는 종료 된 <ph id="ph2">&lt;xref:System.Windows.Rect.Empty%2A&gt;</ph> 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>You cannot get this property when a window is hosted in a browser.</source>
          <target state="translated">창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>The following example uses <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph> and isolated storage to ensure the size and location of a window are the same as they were the previous time the window was shown.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph> 격리 된 저장소 크기 및 창 위치는은 창이 표시 되기 이전 시간 상태로 동일 하 게 되 고 있습니다.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>for permission to query for the size and location of a window's bounding rectangle.</source>
          <target state="translated">크기와 창의 위치에 쿼리할 수 있는 권한이 대 한 경계 사각형입니다.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Show">
          <source>Opens a window and returns without waiting for the newly opened window to close.</source>
          <target state="translated">창을 연 후 새로 열린 창이 닫힐 때까지 기다리지 않고 반환됩니다.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> class is instantiated, it is not visible by default.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 클래스가 인스턴스화되면, 기본적으로 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> shows a window and returns immediately, without waiting for the window to be closed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> 창을 표시 하 고 창이 닫힐 때까지 기다리지 않고 즉시 결과 반환 합니다.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>Consequently, the opened window does not prevent users from interacting with other windows in the application.</source>
          <target state="translated">따라서 열린된 창 응용 프로그램에서 다른 windows와 상호 작용에서 사용자가 방해 되지는 않습니다.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>This type of window is called a <bpt id="p1">*</bpt>modeless<ept id="p1">*</ept> window.</source>
          <target state="translated">이러한 형식의 라고는 <bpt id="p1">*</bpt>모덜리스<ept id="p1">*</ept> 창.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>Common examples of modeless windows are properties windows, toolboxes, and palettes.</source>
          <target state="translated">일반적인 모덜리스 창은 속성 창과 도구 상자 팔레트 있습니다.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>To restrict a user to interacting with a specific window, the window must be opened by calling <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.</source>
          <target state="translated">특정 창 상호 작용 하는 사용자를 제한 하는 창을 호출 하 여 열 해야 <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>A window that is opened by calling <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</source>
          <target state="translated">호출 하 여 열려 있는 창을 <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> 않습니다 것 연 창에 관계가 정의 되어 자동으로; 구체적으로 열린된 창을 알지 못하고 메서드.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>This relationship can be established using the <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property and managed using the <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph> property.</source>
          <target state="translated">사용 하 여이 관계를 설정할 수는 <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> 속성과 관리 되는 사용 하는 <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> achieves the same end result as setting <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> object to <ph id="ph4">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> 설정으로 동일한 최종 결과 달성 <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> 의 속성은 <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> 개체를 <ph id="ph4">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>However, there is a difference between the two from a timing perspective.</source>
          <target state="translated">그러나 타이밍 관점에서 둘 사이 차이가 있습니다.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> is a synchronous operation that returns only after the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> event on the child window has been raised:</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> 후에 반환 하는 동기 작업은 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> 자식 창에 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>, however, is an asynchronous operation that returns immediately:</source>
          <target state="translated">설정 <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>, 인데 즉시 반환 하는 비동기 작업:</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>When setting <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>, any window events you register before you set <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> may not be raised until after the method in which you set <ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> has completed execution.</source>
          <target state="translated">설정할 때 <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>를 설정 하기 전에 등록 한 모든 창 이벤트가 <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> 을 설정한 메서드 지날 때까지 발생할 수 있습니다 <ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> 실행을 완료 합니다.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>The following sample demonstrates how to open a modeless window.</source>
          <target state="translated">다음 샘플 모덜리스 창을 여는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Show">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph> is called on a window that is closing (<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>) or has been closed (<ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph>).</source>
          <target state="translated">닫히고 있는 창(<ph id="ph1">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph>) 또는 닫힌 창(<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>)에서 <ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph>가 호출된 경우</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.ShowActivated">
          <source>Gets or sets a value that indicates whether a window is activated when first shown.</source>
          <target state="translated">창이 처음 표시될 때 활성화되는지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a window is activated when first shown; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">창이 처음 표시될 때 활성화되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>When a window with its <ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> property set to <ph id="ph2">`false`</ph> is opened, the window is not activated and its <ph id="ph3">&lt;xref:System.Windows.Window.Activated&gt;</ph> event is not raised until a user manually activates the window by selecting it.</source>
          <target state="translated">창을 해당 <ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> 속성이로 설정 <ph id="ph2">`false`</ph> 은 열, 창이 활성화 되지 않으면 및 해당 <ph id="ph3">&lt;xref:System.Windows.Window.Activated&gt;</ph> 선택 하 여 창을 수동으로 활성화 될 때까지 이벤트가 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>After the window is selected, it activates and deactivates normally.</source>
          <target state="translated">창의 선택 된 후 활성화 되거나 정상적으로 비활성화 합니다.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>To prevent a window from being activated when it opens, the <ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> property must be set to <ph id="ph2">`false`</ph> before the window is shown (by calling <ph id="ph3">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>); setting <ph id="ph4">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> to <ph id="ph5">`false`</ph> after a window is shown has no effect.</source>
          <target state="translated">창이 열릴 때 활성화 되 고 되지 않도록 하려면는 <ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> 속성으로 설정 되어 있어야 <ph id="ph2">`false`</ph> 창이 표시 되기 전에 (호출 하 여 <ph id="ph3">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>) 설정 <ph id="ph4">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> 를 <ph id="ph5">`false`</ph> 아무 효과가 창이 표시 되기 후입니다.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> to <ph id="ph2">`false`</ph> on a window that is opened modally, by calling <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, has no real impact.</source>
          <target state="translated">설정 <ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> 를 <ph id="ph2">`false`</ph> 모달 형식으로 호출 하 여 열려 있는 창에 <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, 실제 영향을 주지 않습니다.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>Although the modal window will not be activated, the modal window will prevent the user from activating any other open application windows.</source>
          <target state="translated">모달 창이 활성화 되지 않지만 모달 창 사용자 다른 열려 있는 응용 프로그램 창을 활성화 수 없게 됩니다.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>The following example shows how to use markup to configure a window to be opened without being activated.</source>
          <target state="translated">다음 예제에서는 태그를 사용 하 여 창이 활성화 되지 않고 열 수를 구성 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>The following example shows how to use code to configure a window to be opened without it being activated.</source>
          <target state="translated">다음 예제에서는 코드를 사용 하 여 창이 활성화 되지 않고 열 수를 구성 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.ShowActivatedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.ShowActivated" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.ShowActivated" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ShowDialog">
          <source>Opens a window and returns only when the newly opened window is closed.</source>
          <target state="translated">창을 연 후 새로 열린 창이 닫힌 경우에만 반환됩니다.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ShowDialog">
          <source>A <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> value of type <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph> that specifies whether the activity was accepted (<ph id="ph3">&lt;see langword="true" /&gt;</ph>) or canceled (<ph id="ph4">&lt;see langword="false" /&gt;</ph>).</source>
          <target state="translated">작업이 받아들여졌는지(<ph id="ph3">&lt;see langword="true" /&gt;</ph> 또는 취소되었는지(<ph id="ph4">&lt;see langword="false" /&gt;</ph>) 여부를 지정하는 <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> 유형의 <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ShowDialog">
          <source>The return value is the value of the <ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph> property before a window closes.</source>
          <target state="translated">반환 값은 창이 닫히기 전의 <ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph> 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>When a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> class is instantiated, it is not visible by default.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 클래스가 인스턴스화되면, 기본적으로 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> shows the window, disables all other windows in the application, and returns only when the window is closed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> 창을 보여, 응용 프로그램에서 다른 모든 창을 사용 하지 않도록 설정 하 고 창이 닫혀 있는 경우에를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>This type of window is known as a <bpt id="p1">*</bpt>modal<ept id="p1">*</ept> window.</source>
          <target state="translated">이러한 형식의 라고는 <bpt id="p1">*</bpt>모달<ept id="p1">*</ept> 창.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>Modal windows are primarily used as dialog boxes.</source>
          <target state="translated">모달 창은 대화 상자로 주로 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>A dialog box is a special type of window that applications use to interact with users to complete tasks, such as opening files or printing documents.</source>
          <target state="translated">대화 상자는 특수 한 유형의 응용 프로그램 파일을 열거나 문서 인쇄 등의 작업을 완료 하는 사용자 상호 작용 하는 데 사용 하는 창입니다.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>Dialog boxes commonly allow users to accept or cancel the task for which they were shown before the dialog box is closed.</source>
          <target state="translated">대화 상자는 일반적으로 적용 하거나 취소할 작업을 표시 된 대화 상자를 닫기 전에 사용자가 허용 합니다.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> returns a <ph id="ph2">&lt;xref:System.Nullable%601&gt;</ph><ph id="ph3">&lt;xref:System.Boolean&gt;</ph> value that specifies whether the activity was accepted or canceled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> 반환 된 <ph id="ph2">&lt;xref:System.Nullable%601&gt;</ph> <ph id="ph3">&lt;xref:System.Boolean&gt;</ph> 활동 적용 하거나 취소 여부를 지정 하는 값입니다.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>The return value is the value of the <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> property before a window closes.</source>
          <target state="translated">반환 값은 창이 닫히기 전의 <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>A window that is opened by calling the <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> method does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</source>
          <target state="translated">호출 하 여 열려 있는 창에서 <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> 메서드에 자동으로 그 연 창에 관계가 없으므로 구체적으로 열린된 창을 알지 못하고 창을 연 합니다.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>This relationship can be established using the <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property and managed using the <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph> property.</source>
          <target state="translated">사용 하 여이 관계를 설정할 수는 <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> 속성과 관리 되는 사용 하는 <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>To support <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> automation (see <bpt id="p1">[</bpt>UI Automation Overview<ept id="p1">](~/docs/framework/ui-automation/ui-automation-overview.md)</ept>), <ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> must be set for a window opened by calling <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.</source>
          <target state="translated">지원 하기 위해 <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> 자동화 (참조 <bpt id="p1">[</bpt>UI 자동화 개요<ept id="p1">](~/docs/framework/ui-automation/ui-automation-overview.md)</ept>), <ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> 호출 하 여 연 창에 대 한 설정 되어 있어야 <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>When a modal <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> window (a window opened by calling <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>) is closed, the previously activated window is reactivated.</source>
          <target state="translated">모달 <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> 창 (창을 호출 하 여 열린 <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>)가 닫힌 경우 이전에 활성화 된 창이 다시 활성화 됩니다.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>If a modal <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> window has an owner window (see <ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>), the owner window is not reactivated when the modal <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> window is closed unless it was the previously activated window.</source>
          <target state="translated">경우 모달 <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> 창에 소유자 (참조 <ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>), 소유자 창이 때 다시 활성화 modal <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> 이전에 활성화 된 창 않은 창이 닫혀 있습니다.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">창을 브라우저에서 호스팅되는 경우이 메서드를 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>The following sample demonstrates how to open a modal window.</source>
          <target state="translated">다음 샘플에는 모달 창을 여는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ShowDialog">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph> is called on a window that is closing (<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>) or has been closed (<ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph>).</source>
          <target state="translated">닫히고 있는 창(<ph id="ph1">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph>) 또는 닫힌 창(<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>)에서 <ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph>가 호출된 경우</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>for permission to activate a window.</source>
          <target state="translated">창을 활성화할 수 있는 권한입니다.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>Gets or sets a value that indicates whether the window has a task bar button.</source>
          <target state="translated">창에 작업 표시줄 단추가 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the window has a task bar button; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">창에 작업 표시줄 단추가 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>Does not apply when the window is hosted in a browser.</source>
          <target state="translated">창이 브라우저에서 호스팅될 때는 적용하지 마십시오.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;</ph> is set to <ph id="ph2">`true`</ph>, the window will also appear in the ALT+TAB application selection list.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;</ph> 로 설정 된 <ph id="ph2">`true`</ph>, ALT + TAB 응용 프로그램 선택 목록에도 창이 나타납니다.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>The icon that is used for both the task bar button and the ALT+TAB application selection list is the value of the <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph> property.</source>
          <target state="translated">작업 표시줄 단추와 ALT + TAB 응용 프로그램 선택 목록에 사용 되는 아이콘의 값인는 <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.ShowInTaskbarProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.ShowInTaskbar" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.ShowInTaskbar" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.SizeToContent">
          <source>Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.</source>
          <target state="translated">콘텐츠 크기에 맞게 창의 크기를 자동으로 조정할지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.SizeToContent" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.SizeToContent" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.SizeToContent.Manual" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Windows.SizeToContent.Manual" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.SizeToContent.WidthAndHeight&gt;</ph>, setting either <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> has no effect; both properties can be set, but the values they are set with are not applied to the window.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> 로 설정 된 <ph id="ph2">&lt;xref:System.Windows.SizeToContent.WidthAndHeight&gt;</ph>, 설정 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> 또는 <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> 아무 효과가; 두 속성을 설정할 수 있지만 설정 값 창에 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Height&gt;</ph>, setting <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> does not change the height of the window.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> 로 설정 된 <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Height&gt;</ph>설정 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> 창의 높이 변경 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Width&gt;</ph>, setting <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> does not change the width of the window.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> 로 설정 된 <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Width&gt;</ph>설정 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> 창의 너비를 변경 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> has a value other than <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Manual&gt;</ph>:</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> 이외의 값을 가지 <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Manual&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is automatically set to <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Manual&gt;</ph> if a user resizes the window by using the resize grip or dragging the border.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> 으로 자동 설정 <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Manual&gt;</ph> 사용자가 창의 크기 조정 그립을 사용 하거나 테두리를 끌어 합니다.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>If the size of the content changes in a way that causes the window to resize itself, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.SizeChanged&gt;</ph> is raised.</source>
          <target state="translated">콘텐츠 크기를 자체를 조정할 경우 창이 하는 방식으로 변경 되 면 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.SizeChanged&gt;</ph> 발생 합니다.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>If a window is transparent (see <ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>), you should consider setting <ph id="ph2">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> to <ph id="ph3">&lt;xref:System.Windows.SizeToContent.WidthAndHeight&gt;</ph> to ensure the window is no larger than its visible content.</source>
          <target state="translated">창이 투명 한 경우 (참조 <ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>), 설정을 고려해 야 <ph id="ph2">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> 를 <ph id="ph3">&lt;xref:System.Windows.SizeToContent.WidthAndHeight&gt;</ph> 표시 된 콘텐츠를 보다 작은 창이 되는지 합니다.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>The following example shows how to set the <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> property in code to specify how a window resizes to fit its content.</source>
          <target state="translated">설정 하는 방법을 보여 주는 다음 예제는 <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> 창의 내용에 맞게 크기 조정 하는 방법을 지정 하는 코드에서 속성입니다.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.SizeToContentProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.SizeToContent" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.SizeToContent" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.SourceInitialized">
          <source>This event is raised to support interoperation with <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph>.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph>와의 상호 운용성을 지원하기 위해 발생합니다.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.SourceInitialized">
          <source>See <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.StateChanged">
          <source>Occurs when the window's <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowState" /&gt;</ph> property changes.</source>
          <target state="translated">창의 <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowState" /&gt;</ph> 속성이 변경될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.TaskbarItemInfo">
          <source>Gets or sets the <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> taskbar thumbnail for the <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>에 <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> 작업 표시줄 썸네일을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.TaskbarItemInfo">
          <source>The <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> taskbar thumbnail for the <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>의 <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> 작업 표시줄 축소판 그림입니다.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.TaskbarItemInfo">
          <source>For more information about how to use the <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> taskbar thumbnail, see the <ph id="ph2">&lt;xref:System.Windows.Shell.TaskbarItemInfo&gt;</ph> class.</source>
          <target state="translated">사용 하는 방법에 대 한 자세한 내용은 <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> 작업 표시줄, 축소판 그림 참조는 <ph id="ph2">&lt;xref:System.Windows.Shell.TaskbarItemInfo&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.TaskbarItemInfoProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.TaskbarItemInfo" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.TaskbarItemInfo" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Title">
          <source>Gets or sets a window's title.</source>
          <target state="translated">창의 제목을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the window's title.</source>
          <target state="translated">창의 제목이 들어 있는 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>The title of a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>, or <ph id="ph3">[!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)]</ph>, can also be set by using <ph id="ph4">&lt;xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">제목은 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>, 또는 <ph id="ph3">[!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)]</ph>를 사용 하 여 설정할 수도 있습니다 <ph id="ph4">&lt;xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.TitleProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.Title" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.Title" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Top">
          <source>Gets or sets the position of the window's top edge, in relation to the desktop.</source>
          <target state="translated">바탕 화면과 관련해서 창의 맨 위 가장자리 위치를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>The position of the window's top, in logical units (1/96").</source>
          <target state="translated">논리 단위(1/96인치)로 지정된 창의 맨 위 위치입니다.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is maximized or minimized, this value represents the top edge of the restore point for the <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 최대화 되거나 최소화, 복원의 위쪽 가장자리에 대 한 지점의이 값 나타냅니다는 <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>This property cannot be set through a style.</source>
          <target state="translated">스타일을 통해이 속성을 설정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>If you do not specify a value, <ph id="ph1">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> is set to the system default value.</source>
          <target state="translated">값을 지정 하지 않으면 <ph id="ph1">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> 시스템 기본 값으로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>You can also specify the system default value by setting <ph id="ph1">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph>.</source>
          <target state="translated">설정 하 여 시스템 기본값을 지정할 수도 있습니다 <ph id="ph1">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>Neither <ph id="ph1">&lt;xref:System.Double.NegativeInfinity&gt;</ph> nor <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph> is a valid value for <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>.</source>
          <target state="translated">모두 <ph id="ph1">&lt;xref:System.Double.NegativeInfinity&gt;</ph> 나 <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph> 에 대 한 유효한 값인지 <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Topmost">
          <source>Gets or sets a value that indicates whether a window appears in the topmost z-order.</source>
          <target state="translated">창을 맨 위 z 순서에 표시할지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the window is topmost; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">창이 맨 위에 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>A window whose <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph> appears above all windows whose <ph id="ph3">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> properties are set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated">창 인 <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> 속성이 <ph id="ph2">`true`</ph> 갖는 모든 창 위에 표시 <ph id="ph3">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> 속성으로 설정 됩니다 <ph id="ph4">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>In the group of windows that have <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>, the window that is currently activated is the topmost window.</source>
          <target state="translated">이 있는 windows 그룹에 <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> 속성이 <ph id="ph2">`true`</ph>, 현재 활성화 된의 맨 위에 있는 창입니다.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>Likewise for the group of windows that have <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">마찬가지로 있는 windows 그룹에 대 한 <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> 속성이 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.TopmostProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.Topmost" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.Topmost" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.TopProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.Top" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.Top" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>Gets or sets the position of the window when first shown.</source>
          <target state="translated">처음 표시될 때 창의 위치를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.WindowStartupLocation" /&gt;</ph> value that specifies the top/left position of a window when first shown.</source>
          <target state="translated">처음 표시될 때의 창의 맨 위/왼쪽 위치를 지정하는 <ph id="ph1">&lt;see cref="T:System.Windows.WindowStartupLocation" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.WindowStartupLocation.Manual" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Windows.WindowStartupLocation.Manual" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph> to <ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.Manual&gt;</ph> causes a window to be positioned according to its <ph id="ph3">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> property values.</source>
          <target state="translated">설정 <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.Manual&gt;</ph> 설정에 따라 배치 된 창은 해당 <ph id="ph3">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>If either the <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> properties aren't specified, their values are determined by Windows.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> 을 속성 지정 하지 않으면 해당 값은 Windows에 의해 결정 됩니다.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation.CenterScreen&gt;</ph> causes a window to be positioned in the center of the screen that contains the mouse cursor.</source>
          <target state="translated">설정 <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation.CenterScreen&gt;</ph> 창이 마우스 커서가 포함 된 화면 가운데에 배치 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph> to <ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.CenterOwner&gt;</ph> causes a window to be positioned in the center of its owner window (see <ph id="ph3">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>), if specified.</source>
          <target state="translated">설정 <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.CenterOwner&gt;</ph> 소유자 창의 가운데에 배치 될 창이 (참조 <ph id="ph3">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>), 지정 된 경우.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>The owner window can be either another WPF window or a non-WPF window.</source>
          <target state="translated">다른 WPF 창 또는 비 WPF 창 소유자 창이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>For more information about WPF windows with non-WPF windows, see <bpt id="p1">[</bpt>WPF and Win32 Interoperation<ept id="p1">](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)</ept> and <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph>.</source>
          <target state="translated">비 WPF windows와 함께 WPF 기간에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>WPF 및 Win32 상호 운용<ept id="p1">](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)</ept> 및 <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>If an owner window is not specified, the position of the window is determined in the same way as if <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.Manual&gt;</ph>.</source>
          <target state="translated">창의 위치가 같은 방식으로 결정 됩니다 소유자 창이 지정 되지 않은 경우 처럼 <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph> 로 설정 된 <ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.Manual&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>You cannot set or get the value of this property when a window is hosted in a browser.</source>
          <target state="translated">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성의 값을 가져올 수 없습니다.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.WindowState">
          <source>Gets or sets a value that indicates whether a window is restored, minimized, or maximized.</source>
          <target state="translated">창을 복원, 최소화 또는 최대화할지 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.WindowState" /&gt;</ph> that determines whether a window is restored, minimized, or maximized.</source>
          <target state="translated">창을 복원, 최소화 또는 최대화할지 결정하는 <ph id="ph1">&lt;see cref="T:System.Windows.WindowState" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.WindowState.Normal" /&gt;</ph> (restored).</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Windows.WindowState.Normal" /&gt;</ph>(복원됨)입니다.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>Before a window is minimized or maximized, its size and location are stored in <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>.</source>
          <target state="translated">크기와 위치에 저장 된 창이 최소화 되거나 최대화 된, 전에 <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>When a window is subsequently restored, its size and location values are restored with the values from <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>.</source>
          <target state="translated">창을 복원 후, 해당 크기와 위치 값의 값으로 복원 됩니다 <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph> property is changed, <ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> is raised.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph> 속성이 변경 되 면 <ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> 발생 합니다.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.WindowStateProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowState" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowState" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.WindowStyle">
          <source>Gets or sets a window's border style.</source>
          <target state="translated">창의 테두리 스타일을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.WindowStyle" /&gt;</ph> that specifies a window's border style.</source>
          <target state="translated">창의 테두리 스타일을 지정하는 <ph id="ph1">&lt;see cref="T:System.Windows.WindowStyle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.WindowStyle.SingleBorderWindow" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Windows.WindowStyle.SingleBorderWindow" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph> can be one of the <ph id="ph2">&lt;xref:System.Windows.WindowStyle&gt;</ph> enumeration values, including <ph id="ph3">&lt;xref:System.Windows.WindowStyle.None&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.WindowStyle.ToolWindow&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.WindowStyle.SingleBorderWindow&gt;</ph> (default), and <ph id="ph6">&lt;xref:System.Windows.WindowStyle.ThreeDBorderWindow&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph> 중 하나일 수 있습니다는 <ph id="ph2">&lt;xref:System.Windows.WindowStyle&gt;</ph> 열거 값을 포함 하 여 <ph id="ph3">&lt;xref:System.Windows.WindowStyle.None&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.WindowStyle.ToolWindow&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.WindowStyle.SingleBorderWindow&gt;</ph> (기본값), 및 <ph id="ph6">&lt;xref:System.Windows.WindowStyle.ThreeDBorderWindow&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>The following figure shows the window styles on <ph id="ph1">[!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)]</ph> (Windows Vista Aero theme, with transparent glass enabled):</source>
          <target state="translated">다음 그림에 창 스타일은 <ph id="ph1">[!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)]</ph> (투명 효과 사용 하도록 설정 된 Windows Vista Aero 테마):</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source><bpt id="p1">![</bpt>Window styles<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure6.PNG "</bpt>Window styles<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>창 스타일<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure6.PNG "</bpt>창 스타일<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.WindowStyleProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowStyle" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowStyle" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>