<Type Name="Window" FullName="System.Windows.Window">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b75ef34931ff30c492ba4817794f0d744ae176f8" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Window : System.Windows.Controls.ContentControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Window extends System.Windows.Controls.ContentControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Window" />
  <TypeSignature Language="VB.NET" Value="Public Class Window&#xA;Inherits ContentControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class Window : System::Windows::Controls::ContentControl" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="5b585-101">창과 대화 상자의 수명을 생성, 구성, 표시 및 관리하는 기능을 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5b585-101">Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-102">사용자와 독립 실행형 응용 프로그램 간의 상호 작용 지점 창입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-102">The point of interaction between a user and a standalone application is a window.</span></span> <span data-ttu-id="5b585-103">A [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 창 두 고유 영역으로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-103">A [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window consists of two distinct areas:</span></span>  
  
-   <span data-ttu-id="5b585-104">호스팅하는 아이콘, 제목, 시스템 메뉴를 포함 하 여 창 장식을 비클라이언트 영역을 최소화 단추, 단추, 복원 단추, 닫기 단추 및 테두리를 최대화 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-104">A non-client area, which hosts the windows adornments, including an icon, title, System menu, minimize button, maximize button, restore button, close button, and a border.</span></span>  
  
-   <span data-ttu-id="5b585-105">응용 프로그램 관련 콘텐츠를 호스트 하는 클라이언트 영역입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-105">A client area, which hosts application-specific content.</span></span>  
  
 <span data-ttu-id="5b585-106">표준 창 다음 그림에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-106">A standard window is shown in the following figure:</span></span>  
  
 <span data-ttu-id="5b585-107">![창 요소](~/add/media/windowoverviewfigure1.PNG "창 요소")</span><span class="sxs-lookup"><span data-stu-id="5b585-107">![Window elements](~/add/media/windowoverviewfigure1.PNG "Window elements")</span></span>  
  
 <span data-ttu-id="5b585-108"><xref:System.Windows.Window> 만들기, 구성, 표시 및 창 및 대화 상자를 둘 다의 수명을 관리 하는 기능을 캡슐화 하 고 다음과 같은 핵심 서비스를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-108"><xref:System.Windows.Window> encapsulates the ability to create, configure, show, and manage the lifetime of both windows and dialog boxes, and provides the following key services:</span></span>  
  
 <span data-ttu-id="5b585-109">**수명 관리**: <xref:System.Windows.Window.Activate%2A>, <xref:System.Windows.Window.Activated>, <xref:System.Windows.Window.Close%2A>, <xref:System.Windows.Window.Closed>, <xref:System.Windows.Window.Closing>, <xref:System.Windows.Window.Deactivated>, <xref:System.Windows.Window.Hide%2A>, <xref:System.Windows.Window.IsActive%2A>, <xref:System.Windows.Window.Show%2A>, <xref:System.Windows.Window.SourceInitialized>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-109">**Lifetime Management**: <xref:System.Windows.Window.Activate%2A>, <xref:System.Windows.Window.Activated>, <xref:System.Windows.Window.Close%2A>, <xref:System.Windows.Window.Closed>, <xref:System.Windows.Window.Closing>, <xref:System.Windows.Window.Deactivated>, <xref:System.Windows.Window.Hide%2A>, <xref:System.Windows.Window.IsActive%2A>, <xref:System.Windows.Window.Show%2A>, <xref:System.Windows.Window.SourceInitialized>.</span></span>  
  
 <span data-ttu-id="5b585-110">**창 관리**: <xref:System.Windows.Window.GetWindow%2A>, <xref:System.Windows.Window.OwnedWindows%2A>, <xref:System.Windows.Window.Owner%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-110">**Window Management**: <xref:System.Windows.Window.GetWindow%2A>, <xref:System.Windows.Window.OwnedWindows%2A>, <xref:System.Windows.Window.Owner%2A>.</span></span>  
  
 <span data-ttu-id="5b585-111">**모양 및 동작**: <xref:System.Windows.Window.AllowsTransparency%2A>, <xref:System.Windows.Window.ContentRendered>, <xref:System.Windows.Window.DragMove%2A>, <xref:System.Windows.Window.Icon%2A>, <xref:System.Windows.Window.Left%2A>, <xref:System.Windows.Window.LocationChanged>, <xref:System.Windows.Window.ResizeMode%2A>, <xref:System.Windows.Window.RestoreBounds%2A>, <xref:System.Windows.Window.ShowActivated%2A>, <xref:System.Windows.Window.ShowInTaskbar%2A>, <xref:System.Windows.Window.SizeToContent%2A>, <xref:System.Windows.Window.StateChanged>, <xref:System.Windows.Window.Title%2A>, <xref:System.Windows.Window.Top%2A>, <xref:System.Windows.Window.Topmost%2A>, <xref:System.Windows.Window.WindowStartupLocation%2A>, <xref:System.Windows.Window.WindowState%2A>, <xref:System.Windows.Window.WindowStyle%2A></span><span class="sxs-lookup"><span data-stu-id="5b585-111">**Appearance and Behavior**: <xref:System.Windows.Window.AllowsTransparency%2A>, <xref:System.Windows.Window.ContentRendered>, <xref:System.Windows.Window.DragMove%2A>, <xref:System.Windows.Window.Icon%2A>, <xref:System.Windows.Window.Left%2A>, <xref:System.Windows.Window.LocationChanged>, <xref:System.Windows.Window.ResizeMode%2A>, <xref:System.Windows.Window.RestoreBounds%2A>, <xref:System.Windows.Window.ShowActivated%2A>, <xref:System.Windows.Window.ShowInTaskbar%2A>, <xref:System.Windows.Window.SizeToContent%2A>, <xref:System.Windows.Window.StateChanged>, <xref:System.Windows.Window.Title%2A>, <xref:System.Windows.Window.Top%2A>, <xref:System.Windows.Window.Topmost%2A>, <xref:System.Windows.Window.WindowStartupLocation%2A>, <xref:System.Windows.Window.WindowState%2A>, <xref:System.Windows.Window.WindowStyle%2A></span></span>  
  
 <span data-ttu-id="5b585-112">**대화 상자**: <xref:System.Windows.Window.DialogResult%2A>, <xref:System.Windows.Window.ShowDialog%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-112">**Dialog Boxes**: <xref:System.Windows.Window.DialogResult%2A>, <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="5b585-113">또한 <xref:System.Windows.Application> 모든 응용 프로그램의 창 관리 하기 위한 특별 한 지원을 노출 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-113">Additionally, <xref:System.Windows.Application> exposes special support for managing all of the windows in an application:</span></span>  
  
-   <span data-ttu-id="5b585-114">응용 프로그램에는 현재 응용 프로그램에서 시작 된 모든 창의 목록을 유지 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-114">Application maintains a list of all the windows that are currently instantiated in the application.</span></span> <span data-ttu-id="5b585-115">이 목록에 의해 노출 되는 <xref:System.Windows.Application.Windows%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-115">This list is exposed by the <xref:System.Windows.Application.Windows%2A> property.</span></span>  
  
-   <span data-ttu-id="5b585-116">기본적으로 <xref:System.Windows.Application.MainWindow%2A> 는 자동으로 첫 번째에 대 한 참조 설정 <xref:System.Windows.Window> 응용 프로그램에서 인스턴스화됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-116">By default, <xref:System.Windows.Application.MainWindow%2A> is automatically set with a reference to the first <xref:System.Windows.Window> that is instantiated in an application.</span></span> <span data-ttu-id="5b585-117">따라서이 창을 기본 응용 프로그램 창.</span><span class="sxs-lookup"><span data-stu-id="5b585-117">This thereby making the window the main application window.</span></span>  
  
 <span data-ttu-id="5b585-118">A <xref:System.Windows.Window> 태그, 태그 및 코드 숨김 또는 코드를 사용 하 여 구현할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-118">A <xref:System.Windows.Window> can be implemented using markup, markup and code-behind, or code.</span></span>  
  
 <span data-ttu-id="5b585-119"><xref:System.Windows.Window> 창 및 독립 실행형 응용 프로그램에 대 한 대화 상자를 표시 하려면 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-119"><xref:System.Windows.Window> is primarily used to display windows and dialog boxes for standalone applications.</span></span> <span data-ttu-id="5b585-120">그러나 필요한 창 수준에서 탐색 응용 프로그램을 사용할 수 있습니다 <xref:System.Windows.Navigation.NavigationWindow> 대신; <xref:System.Windows.Navigation.NavigationWindow> 에서 파생 <xref:System.Windows.Window> 브라우저 스타일 탐색 지원을 사용 하도록 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-120">However, for applications that require navigation at the window level, such as wizards, you can use <xref:System.Windows.Navigation.NavigationWindow> instead; <xref:System.Windows.Navigation.NavigationWindow> derives from <xref:System.Windows.Window> and extends it with browser-style navigation support.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-121">탐색 가능한 콘텐츠의 제도 사용 하 여 다른 콘텐츠 및 콘텐츠 컨테이너에 통합할 수 <xref:System.Windows.Controls.Frame>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-121">Islands of navigable content can be incorporated into other content and content containers using <xref:System.Windows.Controls.Frame>.</span></span>  
  
 <span data-ttu-id="5b585-122"><xref:System.Windows.Window> 필요한 `UnmanagedCode` 인스턴스화할 수 있는 보안 권한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-122"><xref:System.Windows.Window> needs `UnmanagedCode` security permission to be instantiated.</span></span> <span data-ttu-id="5b585-123">여기에 다음과 같은 결과가 발생에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-123">This has the following consequences:</span></span>  
  
-   [!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]<span data-ttu-id="5b585-124">-배포 된 독립 실행형 응용 프로그램은 인터넷 또는 로컬 인트라넷 영역에서 시작 하는 경우 권한 상승을 요청 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-124">-deployed standalone applications will request permission elevation when launched from either the Internet or Local Intranet zones.</span></span>  
  
-   [!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)]<span data-ttu-id="5b585-125"> 보다 낮은 권한을 요청 대 한 모든 권한을 창 또는 대화 상자를 인스턴스화할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-125"> that request anything less than full permissions will not be able to instantiate windows or dialog boxes.</span></span>  
  
 <span data-ttu-id="5b585-126">독립 실행형 응용 프로그램 배포 및 보안 고려 사항에 대 한 정보를 참조 하십시오. [WPF 보안 전략-플랫폼 보안](~/docs/framework/wpf/wpf-security-strategy-platform-security.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-126">For information about standalone application deployment and security considerations, see [WPF Security Strategy - Platform Security](~/docs/framework/wpf/wpf-security-strategy-platform-security.md).</span></span>  
  
 <span data-ttu-id="5b585-127">A <xref:System.Windows.Window> 는 <xref:System.Windows.Controls.ContentControl>, 즉, 모든 형식 (예: 문자열, 이미지 또는 패널)의 단일 개체가 포함 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-127">A <xref:System.Windows.Window> is a <xref:System.Windows.Controls.ContentControl>, which means that it can contain a single object of any type (such as a string, an image, or a panel).</span></span> <span data-ttu-id="5b585-128">자세한 내용은 <xref:System.Windows.Controls.ContentControl> 클래스를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="5b585-128">For more information, see the <xref:System.Windows.Controls.ContentControl> class.</span></span> <span data-ttu-id="5b585-129">또한 <xref:System.Windows.Window> 루트 요소 이며 따라서 다른 요소의 콘텐츠가 포함 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-129">Also, <xref:System.Windows.Window> is a root element and, therefore, cannot be part of another element's content.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-130"><xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.Window.Top%2A>, 및 <xref:System.Windows.Window.Left%2A> 에 속성이 설정 된 <xref:System.Windows.Window> 스타일을 통해 적용 되지 것입니다 런타임 시.</span><span class="sxs-lookup"><span data-stu-id="5b585-130">The <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties set on a <xref:System.Windows.Window> through a style will not be applied at run time.</span></span>  
  
## <a name="customizing-the-window-control"></a><span data-ttu-id="5b585-131">창 컨트롤을 사용자 지정</span><span class="sxs-lookup"><span data-stu-id="5b585-131">Customizing the Window Control</span></span>  
 <span data-ttu-id="5b585-132">여러 동일한 속성 설정을 적용 하려면 <xref:System.Windows.Window> 컨트롤을 사용 하 여는 <xref:System.Windows.FrameworkElement.Style%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-132">To apply the same property settings to multiple <xref:System.Windows.Window> controls, use the <xref:System.Windows.FrameworkElement.Style%2A> property.</span></span> <span data-ttu-id="5b585-133">기본값을 수정할 수 <xref:System.Windows.Controls.ControlTemplate> 고유한 모양을 제어할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-133">You can modify the default <xref:System.Windows.Controls.ControlTemplate> to give the control a unique appearance.</span></span> <span data-ttu-id="5b585-134">만들기에 대 한 자세한 내용은 <xref:System.Windows.Controls.ControlTemplate>, 참조 [는 ControlTemplate을 만들어 기존 컨트롤의 모양 사용자 지정](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-134">For more information about creating a <xref:System.Windows.Controls.ControlTemplate>, see [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).</span></span>  <span data-ttu-id="5b585-135">부분 및 관련 된 상태를 보려면는 <xref:System.Windows.Window>, 참조 [창 스타일 및 템플릿](~/docs/framework/wpf/controls/window-styles-and-templates.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-135">To see the parts and states that are specific to the <xref:System.Windows.Window>, see [Window Styles and Templates](~/docs/framework/wpf/controls/window-styles-and-templates.md).</span></span>  
  
 <span data-ttu-id="5b585-136">종속성 속성을이 컨트롤은 컨트롤의 기본 스타일으로 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-136">Dependency properties for this control might be set by the control’s default style.</span></span>  <span data-ttu-id="5b585-137">기본 스타일 속성은 응용 프로그램에이 컨트롤이 표시 하는 경우 속성이 기본값에서 변경 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-137">If a property is set by a default style, the property might change from its default value when the control appears in the application.</span></span> <span data-ttu-id="5b585-138">기본 스타일 응용 프로그램이 실행 중인 때 사용 되는 데스크톱 테마에 따라 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-138">The default style is determined by which desktop theme is used when the application is running.</span></span>  <span data-ttu-id="5b585-139">자세한 내용은 참조 [기본 WPF 테마](http://go.microsoft.com/fwlink/?LinkID=158252)합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-139">For more information, see [Default WPF Themes](http://go.microsoft.com/fwlink/?LinkID=158252).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-140">시각적 속성을 설정만 영향을 미칠 경우 해당 속성을 둘 다에 <xref:System.Windows.Window> 컨트롤의 기본 템플릿에 하 고 사용 하 여 설정 됩니다는 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-140">Setting a visual property will only have an effect if that property is both present in <xref:System.Windows.Window> control's default template and is set by using a .</span></span> <span data-ttu-id="5b585-141">"변경의 시각적 구조의 정도 제어" 섹션의 시각적 속성 목록을 찾을 수 있습니다 [는 ControlTemplate을 만들어 기존 컨트롤의 모양 사용자 지정](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-141">You can find a list of visual properties in the "Changing the Visual Structure of a Control" section in [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5b585-142">다음 예제에서는 표준 창 어떤가요 태그만 사용 하 여 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-142">The following example shows how a standard window is defined using only markup:</span></span>  
  
 [!code-xaml[WindowSnippets#WindowMARKUPONLY](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MarkupOnlyWindow.xaml#windowmarkuponly)]  
  
 <span data-ttu-id="5b585-143">다음 예제에서는 표준 창을 사용 하 여 정의 된 코드만 방법을.</span><span class="sxs-lookup"><span data-stu-id="5b585-143">The following example shows how a standard window is defined using only code:</span></span>  
  
 [!code-csharp[WindowSnippets#WindowCODEONLY](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/CodeOnlyWindow.cs#windowcodeonly)]
 [!code-vb[WindowSnippets#WindowCODEONLY](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowSnippets/visualbasic/codeonlywindow.vb#windowcodeonly)]  
  
 <span data-ttu-id="5b585-144">다음 예제에서는 표준 창 어떤가요 태그 및 코드 숨김의 조합을 사용 하 여 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-144">The following example shows how a standard window is defined using a combination of markup and code-behind.</span></span>  
  
 [!code-xaml[WindowSnippets#WindowXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MainWindow.xaml#windowxaml)]  
  
 [!code-csharp[WindowSnippets#WindowCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MainWindow.xaml.cs#windowcodebehind)]
 [!code-vb[WindowSnippets#WindowCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowSnippets/visualbasic/mainwindow.xaml.vb#windowcodebehind)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Window.Show" />
    <altmember cref="M:System.Windows.Window.ShowDialog" />
    <altmember cref="P:System.Windows.Window.DialogResult" />
    <altmember cref="T:System.Windows.Application" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Window ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Window();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5b585-145">
            <see cref="T:System.Windows.Window" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-145">Initializes a new instance of the <see cref="T:System.Windows.Window" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-146">생성자가 초기화 하는 <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.Window.Top%2A>, 및 <xref:System.Windows.Window.Left%2A> 속성을 기본 <xref:System.Windows.Window> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-146">The constructor initializes the <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties to their default <xref:System.Windows.Window> values.</span></span>  
  
 <span data-ttu-id="5b585-147">창 내에서 만들어진 경우는 <xref:System.AppDomain> 올려진는 <xref:System.Windows.Application> 개체를 추가 하는 생성자는 <xref:System.Windows.Window> 개체 집합에 <xref:System.Windows.Application>-windows를 통해 관리 되는 <xref:System.Windows.Application.Windows%2A> 속성은 <xref:System.Windows.Application> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-147">If a window is created within an <xref:System.AppDomain> that has an <xref:System.Windows.Application> object, the constructor adds the <xref:System.Windows.Window> object to the set of <xref:System.Windows.Application>-managed windows via the <xref:System.Windows.Application.Windows%2A> property of the <xref:System.Windows.Application> object.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="5b585-148">안전 하지 않은 네이티브 메서드를 호출 하기 위해이 개체에 대 한 필요한 권한입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-148">for permission for this object to call unsafe native methods.</span>
          </span>
          <span data-ttu-id="5b585-149">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-149">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public bool Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Activate" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Activate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5b585-150">창을 전경으로 가져오고 활성화하려고 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-150">Attempts to bring the window to the foreground and activates it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5b585-151">
            <see cref="T:System.Windows.Window" />가 활성화된 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-151">
              <see langword="true" /> if the <see cref="T:System.Windows.Window" /> was successfully activated; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-152">창이 활성화 여부를 결정 하는 규칙에서 사용 하는 것과 동일는 [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] `SetForegroundWindow` 함수 (User32.dll).</span><span class="sxs-lookup"><span data-stu-id="5b585-152">The rules that determine whether the window is activated are the same as those used by the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] `SetForegroundWindow` function (User32.dll).</span></span>  
  
 <span data-ttu-id="5b585-153">창에 활성화 된 경우에 [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] 전경 응용 프로그램이 사용자의 응용 프로그램 <xref:System.Windows.Application.Activated> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-153">If the window is activated in a [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] application that is not the user's foreground application, <xref:System.Windows.Application.Activated> event is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-154">창을 브라우저에서 호스팅되는 경우이 메서드를 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-154">This method cannot be called when a window is hosted in a browser.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="5b585-155">창을 활성화할 수 있는 권한입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-155">for permission to activate a window.</span>
          </span>
          <span data-ttu-id="5b585-156">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-156">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="Activated">
      <MemberSignature Language="C#" Value="public event EventHandler Activated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Activated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Activated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Activated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Activated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-157">창이 전경 창이 되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-157">Occurs when a window becomes the foreground window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-158">창이 활성화 될 (전경 창이 되) 경우:</span><span class="sxs-lookup"><span data-stu-id="5b585-158">A window is activated (becomes the foreground window) when:</span></span>  
  
-   <span data-ttu-id="5b585-159">창이 처음 열릴 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-159">The window is first opened.</span></span>  
  
-   <span data-ttu-id="5b585-160">ALT + TAB을 눌러 마우스를 사용 하거나 작업 관리자에서 선택 하 여 사용자는 창으로 전환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-160">A user switches to a window by selecting it with the mouse, pressing ALT+TAB, or from Task Manager.</span></span>  
  
-   <span data-ttu-id="5b585-161">사용자가 창의 작업 표시줄 단추를 클릭 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-161">A user clicks the window's taskbar button.</span></span>  
  
 <span data-ttu-id="5b585-162">활성화 되는 경우를 감지 해야 하는 Windows에서 처리할 수는 <xref:System.Windows.Window.Activated> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-162">Windows that need to detect when they become activate can handle the <xref:System.Windows.Window.Activated> event.</span></span>  
  
 <span data-ttu-id="5b585-163">창이 처음 활성화 된 후 비활성화 하 고 해당 수명 동안 여러 번 다시 활성화 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-163">After a window is first activated, it may be deactivated and reactivated many times during its lifetime.</span></span> <span data-ttu-id="5b585-164">활성화 상태에 종속 되는 응용 프로그램의 동작 또는 상태를 검사할 수 <xref:System.Windows.Window.IsActive%2A> 에 정품 인증 상태를 확인 하려면.</span><span class="sxs-lookup"><span data-stu-id="5b585-164">If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.</span></span>  
  
 <span data-ttu-id="5b585-165">응용 프로그램 일 수도 있습니다 <xref:System.Windows.Application.Activated>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-165">An application can also be <xref:System.Windows.Application.Activated>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Deactivated" />
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="AllowsTransparency">
      <MemberSignature Language="C#" Value="public bool AllowsTransparency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsTransparency" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.AllowsTransparency" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowsTransparency As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowsTransparency { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-166">창의 클라이언트 영역에서 투명도를 지원하는지 여부를 나타내는 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-166">Gets or sets a value that indicates whether a window's client area supports transparency.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5b585-167">창에서 투명도를 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-167">
              <see langword="true" /> if the window supports transparency; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-168">경우는 <xref:System.Windows.Controls.Control.Background%2A> 창의 속성을 투명 한 색을 사용 하 여 <xref:System.Windows.Media.Brushes.Transparent%2A> 예를 들어 창을 불투명 하 게 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-168">When the <xref:System.Windows.Controls.Control.Background%2A> property of a window is set to a transparent color, using <xref:System.Windows.Media.Brushes.Transparent%2A> for example, the window remains opaque.</span></span> <span data-ttu-id="5b585-169">즉, 바탕 화면 및 "beneath" 창의 실행 중인 응용 프로그램을 볼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-169">This means that the desktop and any running applications "beneath" the window cannot be seen.</span></span> <span data-ttu-id="5b585-170">이 형식의 투명도 사용 하도록 설정 하려면 <xref:System.Windows.Window.AllowsTransparency%2A> 로 설정 해야 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-170">To enable this type of transparency, <xref:System.Windows.Window.AllowsTransparency%2A> must be set to `true`.</span></span>  
  
 <span data-ttu-id="5b585-171"><xref:System.Windows.Window.AllowsTransparency%2A> 사각형이 아닌 창 편리 하 게 존재 영역이 때 <xref:System.Windows.Window.AllowsTransparency%2A> 로 설정 된 `true`, 창의 <xref:System.Windows.Window.WindowStyle%2A> 속성으로 설정 되어 있어야 <xref:System.Windows.WindowStyle.None>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-171"><xref:System.Windows.Window.AllowsTransparency%2A> exists to facilitate the creation of non-rectangular windows, and, consequently, when <xref:System.Windows.Window.AllowsTransparency%2A> is set to `true`, a window's <xref:System.Windows.Window.WindowStyle%2A> property must be set to <xref:System.Windows.WindowStyle.None>.</span></span>  
  
<a name="dependencyPropertyInfo_WindowAllowsTransparency"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="5b585-172">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="5b585-172">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="5b585-173">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="5b585-173">Identifier field</span></span>|<xref:System.Windows.Window.AllowsTransparencyProperty>|  
|<span data-ttu-id="5b585-174">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="5b585-174">Metadata properties set to `true`</span></span>|<span data-ttu-id="5b585-175">없음</span><span class="sxs-lookup"><span data-stu-id="5b585-175">None</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5b585-176">창의 <see cref="P:System.Windows.Window.WindowStyle" /> 값이 <see cref="F:System.Windows.WindowStyle.None" />이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-176">A window that has a <see cref="P:System.Windows.Window.WindowStyle" /> value of anything other than <see cref="F:System.Windows.WindowStyle.None" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AllowsTransparencyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowsTransparencyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowsTransparencyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.AllowsTransparencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowsTransparencyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowsTransparencyProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-177">
            <see cref="P:System.Windows.Window.AllowsTransparency" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-177">Identifies the <see cref="P:System.Windows.Window.AllowsTransparency" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size ArrangeOverride (System.Windows.Size arrangeBounds);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size arrangeBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ArrangeOverride (arrangeBounds As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size ArrangeOverride(System::Windows::Size arrangeBounds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrangeBounds" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="arrangeBounds">
          <span data-ttu-id="5b585-178">창이 해당 창과 자식을 정렬하는 데 사용해야 하는 최종 크기를 반영하는 <see cref="T:System.Windows.Size" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-178">A <see cref="T:System.Windows.Size" /> that reflects the final size that the window should use to arrange itself and its children.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5b585-179">이 메서드를 재정의하여 창과 자식 요소를 정렬하고 크기를 조정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-179">Override this method to arrange and size a window and its child elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5b585-180">사용된 실제 크기를 반영하는 <see cref="T:System.Windows.Size" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-180">A <see cref="T:System.Windows.Size" /> that reflects the actual size that was used.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-181"><xref:System.Windows.Window.ArrangeOverride%2A> 가 호출 되지 않습니다는 <xref:System.Windows.UIElement.Visibility%2A> 속성의 값은 <xref:System.Windows.Visibility.Collapsed>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-181"><xref:System.Windows.Window.ArrangeOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>.</span></span> <span data-ttu-id="5b585-182">하는 경우의 값은 <xref:System.Windows.UIElement.Visibility%2A> 속성이 <xref:System.Windows.Visibility.Hidden> 또는 <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.ArrangeOverride%2A> 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-182">If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.ArrangeOverride%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-183">경우 중 하나 <xref:System.Windows.Window.Show%2A> 또는 <xref:System.Windows.Window.ShowDialog%2A> 호출 됩니다는 <xref:System.Windows.UIElement.Visibility%2A> 속성은 <xref:System.Windows.Window> 로 설정 된 <xref:System.Windows.Visibility.Visible>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-183">When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5b585-184">수동으로 <see cref="T:System.Windows.Window" />를 닫습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-184">Manually closes a <see cref="T:System.Windows.Window" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-185">A <xref:System.Windows.Window> , 여러 가지 방법 중 하나를 사용 하 여 닫아야 잘 알려진 시스템 제공 메커니즘 있는 제목 표시줄을 포함 하 여에:</span><span class="sxs-lookup"><span data-stu-id="5b585-185">A <xref:System.Windows.Window> can be closed using one of several, well-known, system-provided mechanisms located in its title bar, including:</span></span>  
  
-   <span data-ttu-id="5b585-186">ALT + F 4입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-186">ALT+F4.</span></span>  
  
-   <span data-ttu-id="5b585-187">시스템 메뉴 &#124; **닫기**합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-187">System menu &#124; **Close**.</span></span>  
  
-   <span data-ttu-id="5b585-188">**닫기** 단추입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-188">**Close** button.</span></span>  
  
 <span data-ttu-id="5b585-189">A <xref:System.Windows.Window> 포함 하 여 개발자가 제공 하는 클라이언트 영역 내에서 잘 알려진 몇 가지 메커니즘 중 하나를 사용 하 여 닫을 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-189">A <xref:System.Windows.Window> can also be closed using one of several well-known mechanisms within the client area that are provided by developers, including:</span></span>  
  
-   <span data-ttu-id="5b585-190">**파일** &#124; **종료** 주 창에서.</span><span class="sxs-lookup"><span data-stu-id="5b585-190">**File** &#124; **Exit** on a main window.</span></span>  
  
-   <span data-ttu-id="5b585-191">**파일** &#124; **닫기** 또는 **닫기** 자식 창에서 단추입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-191">**File** &#124; **Close** or a **Close** button on a child window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-192">**정상** 및 **취소** 대화 상자 단추는 또한 개발자가 제공한, 있지만 설정할 가능성이 <xref:System.Windows.Window.DialogResult%2A>, 자동으로 호출 하 여 열려 있는 창을 닫는 <xref:System.Windows.Window.ShowDialog%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-192">**OK** and **Cancel** buttons on a dialog box are also developer-provided, although will likely set <xref:System.Windows.Window.DialogResult%2A>, which automatically closes a window that was opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="5b585-193">이러한 메커니즘을 사용 하면를 명시적으로 호출 해야 <xref:System.Windows.Window.Close%2A> 하는 창을 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-193">These mechanisms require you to explicitly call <xref:System.Windows.Window.Close%2A> to close a window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-194">호출 하 여 창에서 열린 경우 <xref:System.Windows.Window.ShowDialog%2A>, 및는 <xref:System.Windows.Controls.Button> 와 해당 <xref:System.Windows.Controls.Button.IsCancel%2A> 단추를 클릭 하거나, 또는 esc 키를 누를 때에 자동으로 속성이 true로 설정 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-194">If a window, opened by calling <xref:System.Windows.Window.ShowDialog%2A>, and with a <xref:System.Windows.Controls.Button> with its <xref:System.Windows.Controls.Button.IsCancel%2A> property set to true, will automatically close when the button is either clicked, or ESC is pressed.</span></span> <span data-ttu-id="5b585-195">사용 하 여 창이 열린 경우 <xref:System.Windows.Window.Show%2A>그러나 <xref:System.Windows.Window.Close%2A> 으로, 명시적으로 호출 해야 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 에 대 한 이벤트 처리기는 <xref:System.Windows.Controls.Button>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-195">If the window was opened using <xref:System.Windows.Window.Show%2A>, however, <xref:System.Windows.Window.Close%2A> must be explicitly called, such as from <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the <xref:System.Windows.Controls.Button>.</span></span>  
  
 <span data-ttu-id="5b585-196">창을 닫으면는 <xref:System.Windows.Window.Closing> 이벤트를 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-196">Closing a window causes the <xref:System.Windows.Window.Closing> event to be raised.</span></span> <span data-ttu-id="5b585-197">경우는 <xref:System.Windows.Window.Closing> 이벤트 취소 하지 않으면 다음이 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-197">If the <xref:System.Windows.Window.Closing> event isn't canceled, the following occurs:</span></span>  
  
-   <span data-ttu-id="5b585-198"><xref:System.Windows.Window> 에서 제거 <xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType> (하는 경우는 <xref:System.Windows.Application> 개체가).</span><span class="sxs-lookup"><span data-stu-id="5b585-198">The <xref:System.Windows.Window> is removed from <xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType> (if an <xref:System.Windows.Application> object exists).</span></span>  
  
-   <span data-ttu-id="5b585-199"><xref:System.Windows.Window> 소유자에서 제거 됩니다 <xref:System.Windows.Window> 소유자/소유 관계가 설정 된 경우 소유 된 전에 <xref:System.Windows.Window> 표시 된 소유자 후 <xref:System.Windows.Window> 열렸습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-199">The <xref:System.Windows.Window> is removed from the owner <xref:System.Windows.Window> if the owner/owned relationship was established before the owned <xref:System.Windows.Window> was shown and after the owner <xref:System.Windows.Window> was opened.</span></span>  
  
-   <span data-ttu-id="5b585-200"><xref:System.Windows.Window.Closed> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-200">The <xref:System.Windows.Window.Closed> event is raised.</span></span>  
  
-   <span data-ttu-id="5b585-201">관리 되지 않는 리소스를에서 만든는 <xref:System.Windows.Window> 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-201">Unmanaged resources created by the <xref:System.Windows.Window> are disposed.</span></span>  
  
-   <span data-ttu-id="5b585-202">경우 <xref:System.Windows.Window.ShowDialog%2A> 이 호출 되어 표시를 <xref:System.Windows.Window>, <xref:System.Windows.Window.ShowDialog%2A> 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-202">If <xref:System.Windows.Window.ShowDialog%2A> was called to show the <xref:System.Windows.Window>, <xref:System.Windows.Window.ShowDialog%2A> returns.</span></span>  
  
 <span data-ttu-id="5b585-203">닫기는 <xref:System.Windows.Window> 닫힌다고 소유 하는 모든 창이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-203">Closing a <xref:System.Windows.Window> causes any windows that it owns to be closed.</span></span> <span data-ttu-id="5b585-204">또한 닫기는 <xref:System.Windows.Window> 방식에 따라 실행이 중지 될 수 있습니다 <xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType> 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-204">Furthermore, closing a <xref:System.Windows.Window> may cause an application to stop running depending on how the <xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType> property is set.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-205">창을 브라우저에서 호스팅되는 경우이 메서드를 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-205">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5b585-206">다음 예제에서는 한 **파일** &#124; **종료** 를 명시적으로 호출 처리 되 고 메뉴 <xref:System.Windows.Window.Close%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-206">The following example shows a **File** &#124; **Exit** menu being handled to explicitly call <xref:System.Windows.Window.Close%2A>.</span></span>  
  
 [!code-xaml[WindowCloseSnippets#WindowCloseXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowCloseSnippets/CSharp/MainWindow.xaml#windowclosexaml)]  
  
 [!code-csharp[WindowCloseSnippets#WindowCloseCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowCloseSnippets/CSharp/MainWindow.xaml.cs#windowclosecodebehind)]
 [!code-vb[WindowCloseSnippets#WindowCloseCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowCloseSnippets/visualbasic/mainwindow.xaml.vb#windowclosecodebehind)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="5b585-207">모든 창과 사용자 입력된 이벤트를 제한 없이 사용할 수 있는 권한입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-207">for permission to use all windows and user input events without restriction.</span>
          </span>
          <span data-ttu-id="5b585-208">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-208">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Window.Show" />
        <altmember cref="M:System.Windows.Window.ShowDialog" />
        <altmember cref="P:System.Windows.Window.DialogResult" />
        <altmember cref="P:System.Windows.Window.Owner" />
        <altmember cref="P:System.Windows.Window.OwnedWindows" />
      </Docs>
    </Member>
    <Member MemberName="Closed">
      <MemberSignature Language="C#" Value="public event EventHandler Closed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Closed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Closed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Closed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Closed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-209">창이 닫히려고 할 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-209">Occurs when the window is about to close.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-210">이 이벤트는 발생 되 면 창은 닫는에서 제한할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-210">Once this event is raised, a window cannot be prevented from closing.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5b585-211">창이 닫히는 동안 <see cref="P:System.Windows.UIElement.Visibility" />, <see cref="M:System.Windows.Window.Show" /> 또는 <see cref="M:System.Windows.Window.ShowDialog" />가 호출되거나 <see cref="M:System.Windows.Window.Hide" />가 설정된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-211">
              <see cref="P:System.Windows.UIElement.Visibility" /> is set, or <see cref="M:System.Windows.Window.Show" />, <see cref="M:System.Windows.Window.ShowDialog" />, or <see cref="M:System.Windows.Window.Hide" /> is called while a window is closing.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="E:System.Windows.Window.Closing" />
        <altmember cref="M:System.Windows.Application.Shutdown" />
        <altmember cref="P:System.Windows.Application.ShutdownMode" />
        <altmember cref="E:System.Windows.Application.SessionEnding" />
      </Docs>
    </Member>
    <Member MemberName="Closing">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler Closing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler Closing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Closing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Closing As CancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::CancelEventHandler ^ Closing;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-212">
            <see cref="M:System.Windows.Window.Close" />가 호출된 직후에 발생하며 창 닫기를 취소하도록 처리할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-212">Occurs directly after <see cref="M:System.Windows.Window.Close" /> is called, and can be handled to cancel window closure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-213"><xref:System.Windows.Window.Closing> 검색 창의 닫을 때 처리 될 수 있습니다 (예를 들어 때 <xref:System.Windows.Window.Close%2A> 라고).</span><span class="sxs-lookup"><span data-stu-id="5b585-213"><xref:System.Windows.Window.Closing> can be handled to detect when a window is being closed (for example, when <xref:System.Windows.Window.Close%2A> is called).</span></span> <span data-ttu-id="5b585-214">또한 <xref:System.Windows.Window.Closing> 를 닫지 창을 방지 하기 위해 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-214">Furthermore, <xref:System.Windows.Window.Closing> can be used to prevent a window from closing.</span></span> <span data-ttu-id="5b585-215">창을를 닫지 않으려면 설정할 수 있습니다는 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 의 속성은 <xref:System.ComponentModel.CancelEventArgs> 인수를 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-215">To prevent a window from closing, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> argument to `true`.</span></span>  
  
 <span data-ttu-id="5b585-216"><xref:System.Windows.Window.Closing> 이벤트가 발생할 때 <xref:System.Windows.Window.Close%2A> 창의 닫기 단추를 클릭 하면 또는 ALT + F4 키를 누를 경우 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-216">The <xref:System.Windows.Window.Closing> event is raised when <xref:System.Windows.Window.Close%2A> is called, if a window's Close button is clicked, or if the user presses ALT+F4.</span></span>  
  
 <span data-ttu-id="5b585-217">소유 된 창을 사용 하 여 해당 소유자 창에서 열린 경우 <xref:System.Windows.Window.Show%2A>, 소유자 창이 닫힌 경우 소유 된 창 <xref:System.Windows.Window.Closing> 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-217">If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised.</span></span> <span data-ttu-id="5b585-218">창의 소유자 닫혀 있으면 (참조 <xref:System.Windows.Window.Owner%2A>), <xref:System.Windows.Window.Closing> 소유 된 창에서 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-218">If the owner of a window is closed (see <xref:System.Windows.Window.Owner%2A>), <xref:System.Windows.Window.Closing> is not raised on the owned window.</span></span>  
  
 <span data-ttu-id="5b585-219">경우 <xref:System.Windows.Application.Shutdown%2A> 호출 되는 <xref:System.Windows.Window.Closing> 각 창에 대 한 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-219">If <xref:System.Windows.Application.Shutdown%2A> is called, the <xref:System.Windows.Window.Closing> event for each window is raised.</span></span> <span data-ttu-id="5b585-220">그러나 경우 <xref:System.Windows.Window.Closing> 가 취소 취소가 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-220">However, if <xref:System.Windows.Window.Closing> is canceled, cancellation is ignored.</span></span>  
  
 <span data-ttu-id="5b585-221">세션 사용자가 로그 오프 하거나 종료 하기 때문에 종료 되 면 <xref:System.Windows.Window.Closing> 발생 하지 않으면 처리할 <xref:System.Windows.Application.SessionEnding> 응용 프로그램 종료를 취소 하는 코드를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-221">If a session ends because a user logs off or shuts down, <xref:System.Windows.Window.Closing> is not raised; handle <xref:System.Windows.Application.SessionEnding> to implement code that cancels application closure.</span></span>  
  
 <span data-ttu-id="5b585-222">창 될 때마다 다시 인스턴스화하는 데 사용 하지을 표시 하 고 응용 프로그램의 수명 동안 여러 번 창이 숨길를 표시할 때마다 처리할 수 있습니다는 <xref:System.Windows.Window.Closing> 이벤트를 취소 하 고 호출에서 <xref:System.Windows.Window.Hide%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5b585-222">If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to reinstantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method.</span></span> <span data-ttu-id="5b585-223">그런 다음 호출할 수 있습니다 <xref:System.Windows.Window.Show%2A> 파일을 다시 동일한 인스턴스에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-223">Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to reopen it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5b585-224">다음 예제는 <xref:System.Windows.Window> 를 닫으려면 사용자 개입이 필요한 지 여부를 결정 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-224">The following example demonstrates a <xref:System.Windows.Window> that determines whether it needs user intervention to close.</span></span>  
  
 [!code-xaml[WindowClosingSnippets#WindowClosingXAML1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowClosingSnippets/CSharp/DataWindow.xaml#windowclosingxaml1)]  
  
 [!code-csharp[WindowClosingSnippets](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowClosingSnippets/CSharp/DataWindow.xaml.cs)]
 [!code-vb[WindowClosingSnippets](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowClosingSnippets/visualbasic/datawindow.xaml.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5b585-225">창이 닫히는 동안 <see cref="P:System.Windows.UIElement.Visibility" />, <see cref="M:System.Windows.Window.Show" /> 또는 <see cref="M:System.Windows.Window.ShowDialog" />가 호출되거나 <see cref="M:System.Windows.Window.Close" />가 설정된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-225">
              <see cref="P:System.Windows.UIElement.Visibility" /> is set, or <see cref="M:System.Windows.Window.Show" />, <see cref="M:System.Windows.Window.ShowDialog" />, or <see cref="M:System.Windows.Window.Close" /> is called while a window is closing.</span>
          </span>
        </exception>
        <altmember cref="P:System.Windows.Application.ShutdownMode" />
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="E:System.Windows.Window.Closed" />
      </Docs>
    </Member>
    <Member MemberName="ContentRendered">
      <MemberSignature Language="C#" Value="public event EventHandler ContentRendered;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ContentRendered" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.ContentRendered" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContentRendered As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ ContentRendered;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-226">창의 콘텐츠가 렌더링된 후에 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-226">Occurs after a window's content has been rendered.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-227">창에 콘텐츠가 없는 경우이 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-227">If the window has no content, this event is not raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Controls.ContentControl.Content" />
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="Deactivated">
      <MemberSignature Language="C#" Value="public event EventHandler Deactivated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Deactivated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Deactivated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deactivated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Deactivated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-228">창이 배경 창이 되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-228">Occurs when a window becomes a background window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-229">비활성화 됩니다 (배경 창이 되) 경우:</span><span class="sxs-lookup"><span data-stu-id="5b585-229">A window is deactivated (becomes a background window) when:</span></span>  
  
-   <span data-ttu-id="5b585-230">사용자는 현재 응용 프로그램의 다른 창으로 전환합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-230">A user switches to another window in the current application.</span></span>  
  
-   <span data-ttu-id="5b585-231">사용자가 ALT + TAB을 사용 하 여 또는 작업 관리자를 사용 하 여 다른 응용 프로그램의 창으로 전환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-231">A user switches to the window in another application by using ALT+TAB or by using Task Manager.</span></span>  
  
-   <span data-ttu-id="5b585-232">사용자가 다른 응용 프로그램의 창에 대 한 작업 표시줄 단추를 클릭 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-232">A user clicks the taskbar button for a window in another application.</span></span>  
  
 <span data-ttu-id="5b585-233">처리 하 여 비활성화 되는 경우를 감지 해야 하는 Windows에서 <xref:System.Windows.Window.Deactivated> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-233">Windows that need to detect when they become deactivated by handling the <xref:System.Windows.Window.Deactivated> event.</span></span>  
  
 <span data-ttu-id="5b585-234">창이 처음 비활성화 된 후 다시 활성화 하 고 해당 수명 동안 여러 번 비활성화 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-234">After a window is first deactivated, it may be reactivated and deactivated many times during its lifetime.</span></span> <span data-ttu-id="5b585-235">활성화 상태에 종속 되는 응용 프로그램의 동작 또는 상태를 검사할 수 <xref:System.Windows.Window.IsActive%2A> 에 정품 인증 상태를 확인 하려면.</span><span class="sxs-lookup"><span data-stu-id="5b585-235">If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.</span></span>  
  
 <span data-ttu-id="5b585-236">응용 프로그램 일 수도 있습니다 <xref:System.Windows.Application.Deactivated>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-236">An application can also be <xref:System.Windows.Application.Deactivated>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="DialogResult">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; DialogResult { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; DialogResult" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.DialogResult" />
      <MemberSignature Language="VB.NET" Value="Public Property DialogResult As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;bool&gt; DialogResult { Nullable&lt;bool&gt; get(); void set(Nullable&lt;bool&gt; value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.DialogResultConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-237">
            <see cref="M:System.Windows.Window.ShowDialog" /> 메서드에서 반환된 값인 대화 상자 결과 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-237">Gets or sets the dialog result value, which is the value that is returned from the <see cref="M:System.Windows.Window.ShowDialog" /> method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5b585-238">
            <see cref="T:System.Nullable`1" /> 형식의 <see cref="T:System.Boolean" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-238">A <see cref="T:System.Nullable`1" /> value of type <see cref="T:System.Boolean" />.</span>
          </span>
          <span data-ttu-id="5b585-239">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-239">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-240"><xref:System.Windows.Window.DialogResult%2A> 사용자 허용 하는지 여부를 확인 하려면 대화 상자를 표시 하는 코드에서 사용할 수 있습니다 (`true`) 또는 취소 (`false`) 대화 상자.</span><span class="sxs-lookup"><span data-stu-id="5b585-240"><xref:System.Windows.Window.DialogResult%2A> can be used from the code that showed a dialog box to determine whether a user accepted (`true`) or canceled (`false`) the dialog box.</span></span> <span data-ttu-id="5b585-241">대화 상자, 허용 되 면이 열은 대화 상자를 사용자에 의해 수집 된 데이터를 검색 하 고 처리 하는 코드를 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-241">If a dialog box was accepted, this signifies to the code that opened the dialog box to retrieve the data that was collected by the user and process it.</span></span> <span data-ttu-id="5b585-242">그러나 대화 상자를 취소 되 면 것을 의미는 코드를 호출 해야 처리를 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-242">If a dialog box was canceled, however, this signifies that calling code should stop any further processing.</span></span>  
  
 <span data-ttu-id="5b585-243">기본적으로 대화 상자는 사용자가 다음 중 하나를 수행 하는 경우 취소 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-243">By default, a dialog box is canceled when a user does one of the following:</span></span>  
  
-   <span data-ttu-id="5b585-244">PressesALT+F4.</span><span class="sxs-lookup"><span data-stu-id="5b585-244">PressesALT+F4.</span></span>  
  
-   <span data-ttu-id="5b585-245">클릭는 **닫기** 단추입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-245">Clicks the **Close** button.</span></span>  
  
-   <span data-ttu-id="5b585-246">선택 **닫기** 시스템 메뉴에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-246">Selects **Close** from the System menu.</span></span>  
  
 <span data-ttu-id="5b585-247">이러한 경우 모든 <xref:System.Windows.Window.DialogResult%2A> 은 `false` 기본적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-247">In all of these cases, <xref:System.Windows.Window.DialogResult%2A> is `false` by default.</span></span>  
  
 <span data-ttu-id="5b585-248">대화 상자 단추로 사용 되는 대화 상자를 취소 하는 특수 단추는 일반적으로 제공 된 <xref:System.Windows.Controls.Button.IsCancel%2A> 속성이로 설정 된 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-248">A dialog box typically provides a special button to cancel a dialog, which is the button whose <xref:System.Windows.Controls.Button.IsCancel%2A> property is set to `true`.</span></span> <span data-ttu-id="5b585-249">이러한 방식으로 구성 하는 단추를 자동으로 닫힙니다 창을 누른 하거나 때나 ESC 키를 누를 때.</span><span class="sxs-lookup"><span data-stu-id="5b585-249">A button configured this way will automatically close a window when either it is pressed, or when the ESC key is pressed.</span></span> <span data-ttu-id="5b585-250">이러한 경우 모두 <xref:System.Windows.Window.DialogResult%2A> 남아 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-250">In either of these cases, <xref:System.Windows.Window.DialogResult%2A> remains `false`.</span></span>  
  
 <span data-ttu-id="5b585-251">대화 상자에는 일반적으로 단추의 적용 단추, 제공 된 <xref:System.Windows.Controls.Button.IsDefault%2A> 속성이로 설정 된 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-251">A dialog box also typically provides an accept button, which is the button whose <xref:System.Windows.Controls.Button.IsDefault%2A> property is set to `true`.</span></span> <span data-ttu-id="5b585-252">이러한 방식으로 구성 하는 단추에서 발생 하는 해당 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 것 또는 ENTER 키를 누를 때 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-252">A button configured this way will raise its <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event when either it or the ENTER key is pressed.</span></span> <span data-ttu-id="5b585-253">그러나 대화 상자에서 자동으로 닫히지 않고 제대로 설정 됩니다 <xref:System.Windows.Window.DialogResult%2A> 를 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-253">However, it won't automatically close the dialog box, nor will it set <xref:System.Windows.Window.DialogResult%2A> to `true`.</span></span> <span data-ttu-id="5b585-254">수동으로이 코드에서 일반적으로 기록해 야 하는 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 기본 단추에 대 한 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-254">You need to manually write this code, usually from the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the default button.</span></span>  
  
 <span data-ttu-id="5b585-255"><xref:System.Windows.Window.DialogResult%2A> `null` 대화 상자가 표시 될 때 하지만 모두 허용 되거나 취소 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-255"><xref:System.Windows.Window.DialogResult%2A> is `null` when the dialog box is shown but neither accepted nor canceled.</span></span>  
  
 <span data-ttu-id="5b585-256">대화 상자가 닫힌 후에서 반환한 값에서 대화 상자 결과 얻을 수 있습니다 <xref:System.Windows.Window.ShowDialog%2A> 메서드를 검사 하 여 또는 <xref:System.Windows.Window.DialogResult%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-256">After a dialog box closes, you can get the dialog result from the value returned by <xref:System.Windows.Window.ShowDialog%2A> method, or by inspecting the <xref:System.Windows.Window.DialogResult%2A> property.</span></span>  
  
 <span data-ttu-id="5b585-257"><xref:System.Windows.Window.DialogResult%2A> 만 경우 설정할 수는 <xref:System.Windows.Window> 호출 하 여 열린 해당 <xref:System.Windows.Window.ShowDialog%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5b585-257"><xref:System.Windows.Window.DialogResult%2A> can only be set when a <xref:System.Windows.Window> is opened by calling its <xref:System.Windows.Window.ShowDialog%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-258">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-258">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5b585-259">확인 단추와 적절 한 돌아가려면 취소 단추를 구성 하는 방법을 보여 주는 다음 예제 <xref:System.Windows.Window.DialogResult%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-259">The following example shows how to configure an OK button and a Cancel button to return the appropriate <xref:System.Windows.Window.DialogResult%2A>.</span></span>  
  
 [!code-xaml[WindowDialogResultSnippets#WindowDialogResultXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDialogResultSnippets/CSharp/DialogBox.xaml#windowdialogresultxaml)]  
  
 [!code-csharp[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDialogResultSnippets/CSharp/DialogBox.xaml.cs#windowdialogresultcodebehind)]
 [!code-vb[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowDialogResultSnippets/visualbasic/dialogbox.xaml.vb#windowdialogresultcodebehind)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5b585-260">
            <see cref="P:System.Windows.Window.DialogResult" />는 <see cref="M:System.Windows.Window.ShowDialog" />를 호출하여 창이 열리기 전에 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-260">
              <see cref="P:System.Windows.Window.DialogResult" /> is set before a window is opened by calling <see cref="M:System.Windows.Window.ShowDialog" />.</span>
          </span>
          <span data-ttu-id="5b585-261">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-261">-or-</span>
          </span>
          <span data-ttu-id="5b585-262">
            <see cref="P:System.Windows.Window.DialogResult" />는 <see cref="M:System.Windows.Window.Show" />를 호출하여 창이 열릴 때 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-262">
              <see cref="P:System.Windows.Window.DialogResult" /> is set on a window that is opened by calling <see cref="M:System.Windows.Window.Show" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DpiChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DpiChangedEventHandler DpiChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DpiChangedEventHandler DpiChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.DpiChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DpiChanged As DpiChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DpiChangedEventHandler ^ DpiChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DpiChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-263">창이 표시되는 화면 DPI가 변경된 후에 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-263">Occurs after the DPI of the screen on which the Window is displayed changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiChangedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DpiChangedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DpiChangedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.DpiChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DpiChangedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DpiChangedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-264">창의 화면 DPI가 변경 중일 때의 <see cref="T:System.Windows.RoutedEvent" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-264">A <see cref="T:System.Windows.RoutedEvent" /> for when the DPI of the screen the Window is on changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragMove">
      <MemberSignature Language="C#" Value="public void DragMove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DragMove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.DragMove" />
      <MemberSignature Language="VB.NET" Value="Public Sub DragMove ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DragMove();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5b585-265">마우스 왼쪽 단추를 누른 상태로 창 클라이언트 영역의 노출된 영역에서 창을 끌 수 있게 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-265">Allows a window to be dragged by a mouse with its left button down over an exposed area of the window's client area.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-266">마우스 왼쪽된 단추를 누른 상태로 해야 <xref:System.Windows.Window.DragMove%2A> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-266">The left mouse button must be down when <xref:System.Windows.Window.DragMove%2A> is called.</span></span> <span data-ttu-id="5b585-267">마우스 왼쪽된 단추를 누를 때 검색 하는 한 가지 방법은 처리 하기 위한 것은 <xref:System.Windows.UIElement.MouseLeftButtonDown> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-267">One way to detect when the left mouse button is pressed is to handle the <xref:System.Windows.UIElement.MouseLeftButtonDown> event.</span></span>  
  
 <span data-ttu-id="5b585-268">때 <xref:System.Windows.Window.DragMove%2A> 호출 되는 왼쪽 창의 클라이언트 영역의 노출 된 영역 마우스 단추를 누를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-268">When <xref:System.Windows.Window.DragMove%2A> is called, the left mouse button must be depressed over an exposed area of the window's client area.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-269">창을 브라우저에서 호스팅되는 경우이 메서드를 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-269">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5b585-270">다음 예제에서는 재정의 하는 방법을 보여 줍니다. <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> 호출할 <xref:System.Windows.Window.DragMove%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-270">The following example shows how to override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to call <xref:System.Windows.Window.DragMove%2A>.</span></span>  
  
 [!code-csharp[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDragMoveSnippets/CSharp/MainWindow.xaml.cs#callwindowdragmovecodebehind)]
 [!code-vb[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowDragMoveSnippets/visualbasic/mainwindow.xaml.vb#callwindowdragmovecodebehind)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5b585-271">왼쪽 마우스 단추를 누르지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-271">The left mouse button is not down.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="5b585-272">창을 끌 수 있는 권한입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-272">for permission to drag a window.</span>
          </span>
          <span data-ttu-id="5b585-273">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-273">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="E:System.Windows.Window.LocationChanged" />
      </Docs>
    </Member>
    <Member MemberName="GetWindow">
      <MemberSignature Language="C#" Value="public static System.Windows.Window GetWindow (System.Windows.DependencyObject dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Window GetWindow(class System.Windows.DependencyObject dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Window ^ GetWindow(System::Windows::DependencyObject ^ dependencyObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Window</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="dependencyObject">
          <span data-ttu-id="5b585-274">종속성 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-274">The dependency object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5b585-275">종속성 개체가 위치한 콘텐츠 트리를 호스팅하는 <see cref="T:System.Windows.Window" /> 개체에 대한 참조를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-275">Returns a reference to the <see cref="T:System.Windows.Window" /> object that hosts the content tree within which the dependency object is located.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5b585-276">호스트 창에 대한 <see cref="T:System.Windows.Window" /> 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-276">A <see cref="T:System.Windows.Window" /> reference to the host window.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5b585-277">
            <paramref name="dependencyObject" />가 null인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-277">
              <paramref name="dependencyObject" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Hide">
      <MemberSignature Language="C#" Value="public void Hide ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Hide() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Hide" />
      <MemberSignature Language="VB.NET" Value="Public Sub Hide ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Hide();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5b585-278">창이 표시되지 않게 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-278">Makes a window invisible.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-279">숨겨져 창이 닫힐 않으며는 <xref:System.Windows.Window.Closing> 나 <xref:System.Windows.Window.Closed> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-279">A window is not closed when it is hidden, and neither the <xref:System.Windows.Window.Closing> nor <xref:System.Windows.Window.Closed> event is raised.</span></span> <span data-ttu-id="5b585-280">대신, 창의 <xref:System.Windows.UIElement.Visibility%2A> 속성이 <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-280">Instead, the window's <xref:System.Windows.UIElement.Visibility%2A> property is set to <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="5b585-281">창을 응용 프로그램의 경우 <xref:System.Windows.Application.MainWindow%2A> 및 응용 프로그램의 <xref:System.Windows.Application.ShutdownMode%2A> 은 <xref:System.Windows.ShutdownMode.OnMainWindowClose>, 응용 프로그램 종료 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-281">If a window is the application's <xref:System.Windows.Application.MainWindow%2A> and the application's <xref:System.Windows.Application.ShutdownMode%2A> is <xref:System.Windows.ShutdownMode.OnMainWindowClose>, the application does not shut down.</span></span> <span data-ttu-id="5b585-282">마찬가지로, 응용 프로그램 종료 하지 않은 경우 유일한 창입니다는 응용 프로그램의 종료 모드 <xref:System.Windows.ShutdownMode.OnLastWindowClose>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-282">Likewise, the application does not shut down if a window is the only window and the application's shutdown mode is <xref:System.Windows.ShutdownMode.OnLastWindowClose>.</span></span>  
  
 <span data-ttu-id="5b585-283">표시 하 고 응용 프로그램의 수명 동안 여러 번 창이 숨길 하 고 다시 창을 인스턴스화할 때마다 하지 않을 경우 표시할 때마다 처리할 수 있습니다는 <xref:System.Windows.Window.Closing> 이벤트를 취소 하 고 호출에서 <xref:System.Windows.Window.Hide%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5b585-283">If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to re-instantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method.</span></span> <span data-ttu-id="5b585-284">그런 다음 호출할 수 있습니다 <xref:System.Windows.Window.Show%2A> 를 다시 열려면 동일한 인스턴스에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-284">Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to re-open it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5b585-285">닫히고 있는 창(<see cref="M:System.Windows.Window.Hide" />) 또는 닫힌 창(<see cref="E:System.Windows.Window.Closing" />)에서 <see cref="E:System.Windows.Window.Closed" />가 호출된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-285">
              <see cref="M:System.Windows.Window.Hide" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Window.Show" />
        <altmember cref="M:System.Windows.Window.ShowDialog" />
        <altmember cref="M:System.Windows.Window.Close" />
      </Docs>
    </Member>
    <Member MemberName="Icon">
      <MemberSignature Language="C#" Value="public System.Windows.Media.ImageSource Icon { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.ImageSource Icon" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Icon" />
      <MemberSignature Language="VB.NET" Value="Public Property Icon As ImageSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::ImageSource ^ Icon { System::Windows::Media::ImageSource ^ get(); void set(System::Windows::Media::ImageSource ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.ImageSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-286">창의 아이콘을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-286">Gets or sets a window's icon.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5b585-287">아이콘을 나타내는 <see cref="T:System.Windows.Media.ImageSource" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-287">An <see cref="T:System.Windows.Media.ImageSource" /> object that represents the icon.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]<span data-ttu-id="5b585-288"> 독립 실행형 응용 프로그램에는 두 가지 유형의 아이콘:</span><span class="sxs-lookup"><span data-stu-id="5b585-288"> standalone applications have two types of icons:</span></span>  
  
-   <span data-ttu-id="5b585-289">사용 하 여 지정 된 어셈블리 아이콘은 `<ApplicationIcon>` 응용 프로그램의 프로젝트 속성 파일을 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-289">One assembly icon, which is specified by using the `<ApplicationIcon>` property in the application's project build file.</span></span> <span data-ttu-id="5b585-290">이 아이콘은 어셈블리에 대 한 바탕 화면 아이콘으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-290">This icon is used as the desktop icon for an assembly.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="5b585-291">Visual Studio의 디버깅 프로그램 아이콘 호스팅 프로세스로 인해 나타나지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-291">When debugging in Visual Studio, your icon may not appear due to the hosting process.</span></span> <span data-ttu-id="5b585-292">실행 파일을 실행 하는 경우에 아이콘이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-292">If you run the executable, the icon will appear.</span></span> <span data-ttu-id="5b585-293">자세한 내용은 [호스팅 프로세스(vshost.exe)](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="5b585-293">For more information, see [Hosting Process (vshost.exe)](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b).</span></span>  
  
-   <span data-ttu-id="5b585-294">설정 하 여 지정 된 창당 하나 아이콘 <xref:System.Windows.Window.Icon%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-294">One icon per window that is specified by setting <xref:System.Windows.Window.Icon%2A>.</span></span> <span data-ttu-id="5b585-295">각 창에 대해 해당 작업 표시줄 단추가 제목 표시줄에 있는 및의 ALT + TAB 응용 프로그램 선택 목록 항목에이 아이콘이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-295">For each window, this icon is used in its title bar, its task bar button, and in its ALT-TAB application selection list entry.</span></span>  
  
 <span data-ttu-id="5b585-296">A [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] 항상 창 아이콘을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-296">A [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window always displays an icon.</span></span> <span data-ttu-id="5b585-297">설정 하 여 하지 제공 된 경우 <xref:System.Windows.Window.Icon%2A>, [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] 다음 규칙에 따라 표시할 아이콘을 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-297">When one is not provided by setting <xref:System.Windows.Window.Icon%2A>, [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] chooses an icon to display based on the following rules:</span></span>  
  
1.  <span data-ttu-id="5b585-298">지정 된 경우에 어셈블리 아이콘을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-298">Use the assembly icon, if specified.</span></span>  
  
2.  <span data-ttu-id="5b585-299">어셈블리 아이콘이 지정 되지 않은 경우 기본 사용 [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] 아이콘입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-299">If the assembly icon is not specified, use the default [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] icon.</span></span>  
  
 <span data-ttu-id="5b585-300">사용 하는 경우 <xref:System.Windows.Window.Icon%2A> 사용자 지정 창 아이콘을 지정 하려면 기본 응용 프로그램 아이콘을 설정 하 여 복원할 수 있습니다 <xref:System.Windows.Window.Icon%2A> 를 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-300">If you use <xref:System.Windows.Window.Icon%2A> to specify a custom window icon, you can restore the default application icon by setting <xref:System.Windows.Window.Icon%2A> to `null`.</span></span>  
  
 <span data-ttu-id="5b585-301">다양 한 방법으로 하나의 아이콘을 사용할 수 있습니다 [!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)], ALT + TAB 파일 선택 목록 창의 작업 표시줄 창의 제목 표시줄에 표시 되 고 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-301">A single icon can be used in a variety of ways in [!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)], including being shown in the title bar of a window, the task bar for a window, the ALT+TAB file selection list.</span></span> <span data-ttu-id="5b585-302">다른 크기;를 사용 하 여 아이콘을 표시 이러한 각 ALT + TAB 파일 선택 목록에 표시 되는 32 x 32 픽셀 아이콘 동안 16 x 16 픽셀 아이콘은 창의 제목 표시줄에 하 고 작업 표시줄에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-302">Each of these shows the icon using a different size; a 16x16 pixel icon is displayed in the title bar of a window and in the task bar, while a 32x32 pixel icon is displayed in the ALT+TAB file selection list.</span></span> <span data-ttu-id="5b585-303">와 같은 일부 응용 프로그램 [!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)], 제공는 **보기** 메뉴를 보려면 원하는 아이콘의 크기를 선택할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-303">Some applications, like [!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)], provide a **View** menu that allows you to choose the size of the icon you'd like to view.</span></span>  
  
 <span data-ttu-id="5b585-304">다양 한 표시 크기에 맞도록, 아이콘 파일 각각 특정 크기 및 색 농도 대상으로 하는 아이콘의 버전을 나타냅니다는 하나 이상의 실제 아이콘으로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-304">To cater to the various display sizes, an icon file is composed of one or more actual icons where each one represents a version of the icon that targets a specific size and color depth.</span></span> <span data-ttu-id="5b585-305">예를 들어 한 아이콘 반면 다른 16 색와 256 색 모두 32 x 32 픽셀 아이콘과 16 x 16 픽셀 16 색으로 단일 16 x 16 픽셀 아이콘을 하나만 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-305">For example, one icon may only have a single 16x16 pixel icon with 16 colors, while another may contain 16x16 pixel and 32x32 pixel icons with both 16 colors and 256 colors.</span></span>  
  
 <span data-ttu-id="5b585-306">아이콘 파일 내에 모든 가능한 크기 및 색 농도 아이콘이 있을 경우 <xref:System.Windows.Window> 해당 아이콘을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-306">If icons for all possible sizes and color depths exist within an icon file, <xref:System.Windows.Window> will use the appropriate icon.</span></span> <span data-ttu-id="5b585-307">아이콘 파일에는 가능한 모든 아이콘의 하위 집합만 포함 되어 있으면 <xref:System.Windows.Window> 의 크기 및 색 농도 내림차순 다음 가장 적합 한 아이콘을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-307">If an icon file contains only a subset of all the possible icons, <xref:System.Windows.Window> uses the next most appropriate icon in order of decreasing sizes and color depth.</span></span>  
  
 <span data-ttu-id="5b585-308">결과 아이콘 항상에서 사용할 수는 <xref:System.Windows.Window>사용 되는 아이콘 필요한 크기와 색 농도 대상 하지 않더라도, 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-308">The result is that an icon will always be used by <xref:System.Windows.Window>, although the icon used may not target the required size and color depth.</span></span> <span data-ttu-id="5b585-309">예를 들어를 16 색 16 x 16 픽셀 아이콘 256 개 색을 가진 32 x 32 픽셀 아이콘으로 표시 하기 위해 사용 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-309">For example, a 16x16 pixel icon with 16 colors may be used for display as a 32x32 pixel icon with 256 colors.</span></span> <span data-ttu-id="5b585-310">이 픽셀화가, 예: 바람직하지 않은 시각 효과 발생할 수 있습니다 하지만 모든 대상된 크기와 색상에 대 한 아이콘을 만들어이 피할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-310">This can cause undesirable visual effects, such as pixilation, but may be avoided by creating icons for all targeted sizes and color depths.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-311">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-311">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowIcon"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="5b585-312">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="5b585-312">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="5b585-313">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="5b585-313">Identifier field</span></span>|<xref:System.Windows.Window.IconProperty>|  
|<span data-ttu-id="5b585-314">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="5b585-314">Metadata properties set to `true`</span></span>|<span data-ttu-id="5b585-315">없음</span><span class="sxs-lookup"><span data-stu-id="5b585-315">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="5b585-316">다음 예제에서는 창 아이콘을 설정 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-316">The following example shows how to set a window icon.</span></span>  
  
 [!code-xaml[WindowIconSnippets#WindowIconSetXAML](~/samples/snippets/xaml/VS_Snippets_Wpf/WindowIconSnippets/XAML/MainWindow.xaml#windowiconsetxaml)]  
  
 [!code-csharp[WindowIconSnippets#SetWindowIconInCode](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowIconSnippets/CSharp/MainWindow.xaml.cs#setwindowiconincode)]
 [!code-vb[WindowIconSnippets#SetWindowIconInCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowIconSnippets/visualbasic/mainwindow.xaml.vb#setwindowiconincode)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="5b585-317">아이콘을 설정할 수 있는 권한입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-317">for permission to set the icon.</span>
          </span>
          <span data-ttu-id="5b585-318">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-318">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="IconProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IconProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IconProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.IconProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IconProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IconProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-319">
            <see cref="P:System.Windows.Window.Icon" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-319">Identifies the <see cref="P:System.Windows.Window.Icon" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-320">창이 활성 상태인지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-320">Gets a value that indicates whether the window is active.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5b585-321">창이 활성 상태이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-321">
              <see langword="true" /> if the window is active; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="5b585-322">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-322">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-323">활성 창에는 사용자의 현재 전경 창을 이며에서 포커스가 있는 제목 표시줄의 활성 모양으로 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-323">An active window is the user's current foreground window and has the focus, which is signified by the active appearance of the title bar.</span></span> <span data-ttu-id="5b585-324">활성 창도 명시적으로 설정 하지 않은 모든 최상위 창의 최상위 됩니다는 <xref:System.Windows.Window.Topmost%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-324">An active window will also be the top-most of all top-level windows that don't explicitly set the <xref:System.Windows.Window.Topmost%2A> property.</span></span>  
  
<a name="dependencyPropertyInfo_WindowIsActive"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="5b585-325">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="5b585-325">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="5b585-326">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="5b585-326">Identifier field</span></span>|<xref:System.Windows.Window.IsActiveProperty>|  
|<span data-ttu-id="5b585-327">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="5b585-327">Metadata properties set to `true`</span></span>|<span data-ttu-id="5b585-328">없음</span><span class="sxs-lookup"><span data-stu-id="5b585-328">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
      </Docs>
    </Member>
    <Member MemberName="IsActiveProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsActiveProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsActiveProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.IsActiveProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsActiveProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsActiveProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-329">
            <see cref="P:System.Windows.Window.IsActive" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-329">Identifies the <see cref="P:System.Windows.Window.IsActive" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public double Left { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Left" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Left" />
      <MemberSignature Language="VB.NET" Value="Public Property Left As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Left { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-330">바탕 화면과 관련해서 창의 왼쪽 가장자리 위치를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-330">Gets or sets the position of the window's left edge, in relation to the desktop.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5b585-331">논리 단위(1인치의 1/96)로 지정된 창의 왼쪽 가장자리 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-331">The position of the window's left edge, in logical units (1/96th of an inch).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-332">경우는 <xref:System.Windows.Window> 최대화 되거나 최소화, 복원의 왼쪽된 가장자리에 대 한 지점의이 값 나타냅니다는 <xref:System.Windows.Window>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-332">When the <xref:System.Windows.Window> is maximized or minimized, this value represents the left edge of the restore point for the <xref:System.Windows.Window>.</span></span>  
  
 <span data-ttu-id="5b585-333">스타일을 통해이 속성을 설정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-333">This property cannot be set through a style.</span></span>  
  
 <span data-ttu-id="5b585-334">값을 지정 하지 않으면 <xref:System.Windows.Window.Left%2A> 시스템 기본 값으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-334">If you do not specify a value, <xref:System.Windows.Window.Left%2A> is set to the system default value.</span></span> <span data-ttu-id="5b585-335">설정 하 여 시스템 기본값을 지정할 수도 있습니다 <xref:System.Windows.Window.Left%2A> 를 <xref:System.Double.NaN>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-335">You can also specify the system default value by setting <xref:System.Windows.Window.Left%2A> to <xref:System.Double.NaN>.</span></span> <span data-ttu-id="5b585-336">모두 <xref:System.Double.NegativeInfinity> 나 <xref:System.Double.PositiveInfinity> 에 대 한 유효한 값인지 <xref:System.Windows.Window.Left%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-336">Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Left%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-337">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-337">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowLeft"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="5b585-338">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="5b585-338">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="5b585-339">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="5b585-339">Identifier field</span></span>|<xref:System.Windows.Window.LeftProperty>|  
|<span data-ttu-id="5b585-340">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="5b585-340">Metadata properties set to `true`</span></span>|<span data-ttu-id="5b585-341">없음</span><span class="sxs-lookup"><span data-stu-id="5b585-341">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Top" />
      </Docs>
    </Member>
    <Member MemberName="LeftProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LeftProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LeftProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.LeftProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LeftProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LeftProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-342">
            <see cref="P:System.Windows.Window.Left" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-342">Identifies the <see cref="P:System.Windows.Window.Left" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler LocationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LocationChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.LocationChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LocationChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LocationChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-343">창의 위치가 변경되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-343">Occurs when the window's location changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-344">창의 위치를 변경 하는 경우:</span><span class="sxs-lookup"><span data-stu-id="5b585-344">A window's location changes when:</span></span>  
  
-   <span data-ttu-id="5b585-345">창의 제목 표시줄으로 드래그 하 여 창을 이동 하는 사용자입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-345">A user moves a window by dragging it with the window's title bar.</span></span>  
  
-   <span data-ttu-id="5b585-346">창이 이동 하는 후 <xref:System.Windows.Window.DragMove%2A> 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-346">A window is moved after <xref:System.Windows.Window.DragMove%2A> is called.</span></span>  
  
-   <span data-ttu-id="5b585-347">중 하나는 <xref:System.Windows.Window.Left%2A> 또는 <xref:System.Windows.Window.Top%2A> 속성을 프로그래밍 방식으로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-347">Either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> property is set programmatically.</span></span>  
  
-   <span data-ttu-id="5b585-348">**이동** 창의 시스템 메뉴의 메뉴 항목을 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-348">The **Move** menu item of a window's System menu is chosen.</span></span>  
  
-   <span data-ttu-id="5b585-349"><xref:System.Windows.Window.WindowState%2A> 속성을 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-349">The <xref:System.Windows.Window.WindowState%2A> property is changed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
        <altmember cref="P:System.Windows.Window.Top" />
        <altmember cref="P:System.Windows.Window.RestoreBounds" />
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal override System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-350">창의 논리적 자식 요소에 대한 열거자를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-350">Gets an enumerator for a window's logical child elements.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5b585-351">창의 논리적 자식 요소에 대한 <see cref="T:System.Collections.IEnumerator" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-351">An <see cref="T:System.Collections.IEnumerator" /> a window's logical child elements.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.FrameworkElement.LogicalChildren" />
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size MeasureOverride (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function MeasureOverride (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size MeasureOverride(System::Windows::Size availableSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">
          <span data-ttu-id="5b585-352">이 창에서 자식에 사용할 수 있는 크기를 반영하는 <see cref="T:System.Windows.Size" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-352">A <see cref="T:System.Windows.Size" /> that reflects the available size that this window can give to the child.</span>
          </span>
          <span data-ttu-id="5b585-353">창의 크기를 사용할 수 있는 콘텐츠에 맞게 조정할 수 있음을 나타내려면 값을 무한대로 지정할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-353">Infinity can be given as a value to indicate that the window will size to whatever content is available.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5b585-354">이 메서드를 재정의하여 창의 크기를 측정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-354">Override this method to measure the size of a window.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5b585-355">이 창에서 자식의 크기 계산을 기반으로 레이아웃 중에 필요한 것으로 확인된 크기를 반영하는 <see cref="T:System.Windows.Size" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-355">A <see cref="T:System.Windows.Size" /> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-356"><xref:System.Windows.Window.MeasureOverride%2A> 가 호출 되지 않습니다는 <xref:System.Windows.UIElement.Visibility%2A> 속성의 값은 <xref:System.Windows.Visibility.Collapsed>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-356"><xref:System.Windows.Window.MeasureOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>.</span></span> <span data-ttu-id="5b585-357">하는 경우의 값은 <xref:System.Windows.UIElement.Visibility%2A> 속성이 <xref:System.Windows.Visibility.Hidden> 또는 <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.MeasureOverride%2A> 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-357">If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.MeasureOverride%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-358">경우 중 하나 <xref:System.Windows.Window.Show%2A> 또는 <xref:System.Windows.Window.ShowDialog%2A> 호출 됩니다는 <xref:System.Windows.UIElement.Visibility%2A> 속성은 <xref:System.Windows.Window> 로 설정 된 <xref:System.Windows.Visibility.Visible>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-358">When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="OnActivated">
      <MemberSignature Language="C#" Value="protected virtual void OnActivated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnActivated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnActivated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnActivated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnActivated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="5b585-359">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-359">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5b585-360">
            <see cref="E:System.Windows.Window.Activated" /> 이벤트를 발생시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-360">Raises the <see cref="E:System.Windows.Window.Activated" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-361"><xref:System.Windows.Window.OnActivated%2A>는 <xref:System.Windows.Window.Activated> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-361"><xref:System.Windows.Window.OnActivated%2A> raises the <xref:System.Windows.Window.Activated> event.</span></span>  
  
 <span data-ttu-id="5b585-362">파생 되는 형식을 <xref:System.Windows.Window> 재정의할 수 있습니다 <xref:System.Windows.Window.OnActivated%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-362">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnActivated%2A>.</span></span> <span data-ttu-id="5b585-363">재정의 된 메서드를 호출 해야 <xref:System.Windows.Window.OnActivated%2A> 기본 클래스에서 경우 <xref:System.Windows.Window.Activated> 발생 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-363">The overridden method must call <xref:System.Windows.Window.OnActivated%2A> on the base class if <xref:System.Windows.Window.Activated> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnDeactivated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnClosed">
      <MemberSignature Language="C#" Value="protected virtual void OnClosed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClosed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnClosed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClosed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClosed(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="5b585-364">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-364">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5b585-365">
            <see cref="E:System.Windows.Window.Closed" /> 이벤트를 발생시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-365">Raises the <see cref="E:System.Windows.Window.Closed" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-366"><xref:System.Windows.Window.OnClosed%2A>는 <xref:System.Windows.Window.Closed> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-366"><xref:System.Windows.Window.OnClosed%2A> raises the <xref:System.Windows.Window.Closed> event.</span></span>  
  
 <span data-ttu-id="5b585-367">파생 되는 형식을 <xref:System.Windows.Window> 재정의할 수 있습니다 <xref:System.Windows.Window.OnClosed%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-367">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosed%2A>.</span></span> <span data-ttu-id="5b585-368">재정의 된 메서드를 호출 해야 <xref:System.Windows.Window.OnClosed%2A> 기본 클래스에서 경우 <xref:System.Windows.Window.Closed> 발생 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-368">The overridden method must call <xref:System.Windows.Window.OnClosed%2A> on the base class if <xref:System.Windows.Window.Closed> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnClosing (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClosing(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClosing (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClosing(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="5b585-369">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.CancelEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-369">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5b585-370">
            <see cref="E:System.Windows.Window.Closing" /> 이벤트를 발생시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-370">Raises the <see cref="E:System.Windows.Window.Closing" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-371"><xref:System.Windows.Window.OnClosing%2A>는 <xref:System.Windows.Window.Closing> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-371"><xref:System.Windows.Window.OnClosing%2A> raises the <xref:System.Windows.Window.Closing> event.</span></span>  
  
 <span data-ttu-id="5b585-372">파생 되는 형식을 <xref:System.Windows.Window> 재정의할 수 있습니다 <xref:System.Windows.Window.OnClosing%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-372">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosing%2A>.</span></span> <span data-ttu-id="5b585-373">재정의 된 메서드를 호출 해야 <xref:System.Windows.Window.OnClosing%2A> 기본 클래스에서 경우 <xref:System.Windows.Window.Closing> 발생 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-373">The overridden method must call <xref:System.Windows.Window.OnClosing%2A> on the base class if <xref:System.Windows.Window.Closing> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnClosed(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnContentChanged">
      <MemberSignature Language="C#" Value="protected override void OnContentChanged (object oldContent, object newContent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnContentChanged(object oldContent, object newContent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnContentChanged(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnContentChanged (oldContent As Object, newContent As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnContentChanged(System::Object ^ oldContent, System::Object ^ newContent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldContent" Type="System.Object" />
        <Parameter Name="newContent" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="oldContent">
          <span data-ttu-id="5b585-374">이전 콘텐츠 트리의 루트에 대한 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-374">A reference to the root of the old content tree.</span>
          </span>
        </param>
        <param name="newContent">
          <span data-ttu-id="5b585-375">새 콘텐츠 트리의 루트에 대한 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-375">A reference to the root of the new content tree.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5b585-376">
            <see cref="P:System.Windows.Controls.ContentControl.Content" /> 속성이 변경되면 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-376">Called when the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContentRendered">
      <MemberSignature Language="C#" Value="protected virtual void OnContentRendered (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContentRendered(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnContentRendered(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContentRendered (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContentRendered(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="5b585-377">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-377">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5b585-378">
            <see cref="E:System.Windows.Window.ContentRendered" /> 이벤트를 발생시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-378">Raises the <see cref="E:System.Windows.Window.ContentRendered" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-379"><xref:System.Windows.Window.OnContentRendered%2A>는 <xref:System.Windows.Window.ContentRendered> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-379"><xref:System.Windows.Window.OnContentRendered%2A> raises the <xref:System.Windows.Window.ContentRendered> event.</span></span>  
  
 <span data-ttu-id="5b585-380">파생 되는 형식을 <xref:System.Windows.Window> 재정의할 수 있습니다 <xref:System.Windows.Window.OnContentRendered%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-380">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnContentRendered%2A>.</span></span> <span data-ttu-id="5b585-381">재정의 된 메서드를 호출 해야 <xref:System.Windows.Window.OnContentRendered%2A> 기본 클래스에서 경우 <xref:System.Windows.Window.ContentRendered> 발생 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-381">The overridden method must call <xref:System.Windows.Window.OnContentRendered%2A> on the base class if <xref:System.Windows.Window.ContentRendered> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5b585-382">이 <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" />에 대한 <see cref="T:System.Windows.Window" /> 개체를 만들어 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-382">Creates and returns a <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> object for this <see cref="T:System.Windows.Window" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5b585-383">이 <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" />에 대한 <see cref="T:System.Windows.Window" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-383">A <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> object for this <see cref="T:System.Windows.Window" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-384">이 메서드는 <xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-384">This method overrides <xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDeactivated">
      <MemberSignature Language="C#" Value="protected virtual void OnDeactivated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDeactivated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnDeactivated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDeactivated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDeactivated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="5b585-385">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-385">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5b585-386">
            <see cref="E:System.Windows.Window.Deactivated" /> 이벤트를 발생시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-386">Raises the <see cref="E:System.Windows.Window.Deactivated" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-387"><xref:System.Windows.Window.OnDeactivated%2A>는 <xref:System.Windows.Window.Deactivated> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-387"><xref:System.Windows.Window.OnDeactivated%2A> raises the <xref:System.Windows.Window.Deactivated> event.</span></span>  
  
 <span data-ttu-id="5b585-388">파생 되는 형식을 <xref:System.Windows.Window> 재정의할 수 있습니다 <xref:System.Windows.Window.OnDeactivated%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-388">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnDeactivated%2A>.</span></span> <span data-ttu-id="5b585-389">재정의 된 메서드를 호출 해야 <xref:System.Windows.Window.OnDeactivated%2A> 기본 클래스에서 경우 <xref:System.Windows.Window.Deactivated> 발생 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-389">The overridden method must call <xref:System.Windows.Window.OnDeactivated%2A> on the base class if <xref:System.Windows.Window.Deactivated> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnActivated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnDpiChanged">
      <MemberSignature Language="C#" Value="protected override void OnDpiChanged (System.Windows.DpiScale oldDpi, System.Windows.DpiScale newDpi);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDpiChanged(valuetype System.Windows.DpiScale oldDpi, valuetype System.Windows.DpiScale newDpi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDpiChanged (oldDpi As DpiScale, newDpi As DpiScale)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDpiChanged(System::Windows::DpiScale oldDpi, System::Windows::DpiScale newDpi);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldDpi" Type="System.Windows.DpiScale" />
        <Parameter Name="newDpi" Type="System.Windows.DpiScale" />
      </Parameters>
      <Docs>
        <param name="oldDpi">
          <span data-ttu-id="5b585-390">이전 DPI 배율 설정입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-390">The previous DPI scale setting.</span>
          </span>
        </param>
        <param name="newDpi">
          <span data-ttu-id="5b585-391">새 DPI 배율 설정입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-391">The new DPI scale setting.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5b585-392">이 창이 렌더링되는 DPI가 변경될 때 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-392">Called when the DPI at which this window is rendered changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLocationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnLocationChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLocationChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnLocationChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLocationChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLocationChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="5b585-393">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-393">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5b585-394">
            <see cref="E:System.Windows.Window.LocationChanged" /> 이벤트를 발생시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-394">Raises the <see cref="E:System.Windows.Window.LocationChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-395"><xref:System.Windows.Window.OnLocationChanged%2A>는 <xref:System.Windows.Window.LocationChanged> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-395"><xref:System.Windows.Window.OnLocationChanged%2A> raises the <xref:System.Windows.Window.LocationChanged> event.</span></span>  
  
 <span data-ttu-id="5b585-396">파생 되는 형식을 <xref:System.Windows.Window> 재정의할 수 있습니다 <xref:System.Windows.Window.OnLocationChanged%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-396">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnLocationChanged%2A>.</span></span> <span data-ttu-id="5b585-397">재정의 된 메서드를 호출 해야 <xref:System.Windows.Window.OnLocationChanged%2A> 기본 클래스에서 경우 <xref:System.Windows.Window.LocationChanged> 발생 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-397">The overridden method must call <xref:System.Windows.Window.OnLocationChanged%2A> on the base class if <xref:System.Windows.Window.LocationChanged> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
        <altmember cref="P:System.Windows.Window.Top" />
      </Docs>
    </Member>
    <Member MemberName="OnManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="protected override void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnManipulationBoundaryFeedback(class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnManipulationBoundaryFeedback (e As ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnManipulationBoundaryFeedback(System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationBoundaryFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="5b585-398">이벤트 데이터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-398">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5b585-399">
            <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> 이벤트가 발생할 때 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-399">Called when the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-400">이 구현은 처리 상태를 변경 되지 않습니다 (의 <xref:System.Windows.RoutedEventArgs.Handled%2A> 속성)의 <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-400">This implementation does not change the handled state (the <xref:System.Windows.RoutedEventArgs.Handled%2A> property) of the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event data.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="5b585-401">재정의 하는 경우 <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />, 항상 기본 구현을 호출 프로그램 <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /> 구현 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="5b585-401">If you override <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /> implementation.</span>
            </span>
            <span data-ttu-id="5b585-402">기본 구현을 호출 하지 않으면 최종 클래스의 런타임 동작을 변경할 수 있는 이벤트를 처리 하는에서 기본 클래스를 방지 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="5b585-402">Failure to call the base implementation prevents base classes from handling the event, which might change the run-time behavior of the final class.</span>
            </span>
            <span data-ttu-id="5b585-403">요구 사항에 따라 앞 이나 뒤를 별도로 처리 하는 기본 구현을 호출할 수 있습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="5b585-403">You can call the base implementation either before or after your special handling, depending on your requirements.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSourceInitialized">
      <MemberSignature Language="C#" Value="protected virtual void OnSourceInitialized (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSourceInitialized(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSourceInitialized (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSourceInitialized(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="5b585-404">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-404">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5b585-405">
            <see cref="E:System.Windows.Window.SourceInitialized" /> 이벤트를 발생시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-405">Raises the <see cref="E:System.Windows.Window.SourceInitialized" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-406"><xref:System.Windows.Window.OnSourceInitialized%2A>는 <xref:System.Windows.Window.SourceInitialized> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-406"><xref:System.Windows.Window.OnSourceInitialized%2A> raises the <xref:System.Windows.Window.SourceInitialized> event.</span></span>  
  
 <span data-ttu-id="5b585-407">파생 되는 형식을 <xref:System.Windows.Window> 재정의할 수 있습니다 <xref:System.Windows.Window.OnSourceInitialized%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-407">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnSourceInitialized%2A>.</span></span> <span data-ttu-id="5b585-408">재정의 된 메서드를 호출 해야 <xref:System.Windows.Window.OnSourceInitialized%2A> 기본 클래스에서 경우 <xref:System.Windows.Window.SourceInitialized> 발생 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-408">The overridden method must call <xref:System.Windows.Window.OnSourceInitialized%2A> on the base class if <xref:System.Windows.Window.SourceInitialized> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnStateChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStateChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnStateChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStateChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStateChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="5b585-409">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-409">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5b585-410">
            <see cref="E:System.Windows.Window.StateChanged" /> 이벤트를 발생시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-410">Raises the <see cref="E:System.Windows.Window.StateChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-411"><xref:System.Windows.Window.OnStateChanged%2A>는 <xref:System.Windows.Window.StateChanged> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-411"><xref:System.Windows.Window.OnStateChanged%2A> raises the <xref:System.Windows.Window.StateChanged> event.</span></span>  
  
 <span data-ttu-id="5b585-412">파생 되는 형식을 <xref:System.Windows.Window> 재정의할 수 있습니다 <xref:System.Windows.Window.OnStateChanged%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-412">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnStateChanged%2A>.</span></span> <span data-ttu-id="5b585-413">재정의 된 메서드를 호출 해야 <xref:System.Windows.Window.OnStateChanged%2A> 기본 클래스에서 경우 <xref:System.Windows.Window.StateChanged> 발생 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-413">The overridden method must call <xref:System.Windows.Window.OnStateChanged%2A> on the base class if <xref:System.Windows.Window.StateChanged> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override sealed void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides NotOverridable Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">
          <span data-ttu-id="5b585-414">이전 부모입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-414">The previous parent.</span>
          </span>
          <span data-ttu-id="5b585-415">
            <see cref="T:System.Windows.DependencyObject" />에 이전 부모가 없는 경우 null로 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-415">Set to null if the <see cref="T:System.Windows.DependencyObject" /> did not have a previous parent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5b585-416">창의 부모가 변경될 때 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-416">Called when the parent of the window is changed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="OwnedWindows">
      <MemberSignature Language="C#" Value="public System.Windows.WindowCollection OwnedWindows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.WindowCollection OwnedWindows" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.OwnedWindows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnedWindows As WindowCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowCollection ^ OwnedWindows { System::Windows::WindowCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-417">이 창이 소유자인 창의 컬렉션을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-417">Gets a collection of windows for which this window is the owner.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5b585-418">이 창이 소유자인 창에 대한 참조가 들어 있는 <see cref="T:System.Windows.WindowCollection" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-418">A <see cref="T:System.Windows.WindowCollection" /> that contains references to the windows for which this window is the owner.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-419">하나인 소유 된 창을 인 <xref:System.Windows.Window.Owner%2A> 소유자 창으로 알려진 다른 창에 대 한 참조로 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-419">An owned window is one whose <xref:System.Windows.Window.Owner%2A> property is set with a reference to another window, which is known as the owner window.</span></span> <span data-ttu-id="5b585-420">소유 하는 소유자 창이 있는 모든 창을 찾기 위해 열거할 수 있습니다 <xref:System.Windows.WindowCollection> 에서 반환 하는 <xref:System.Windows.Window.OwnedWindows%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-420">To find all the windows that an owner window owns, you can enumerate <xref:System.Windows.WindowCollection> that is returned by the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5b585-421">다음 예제에서는 열거 하는 방법을 보여 줍니다. <xref:System.Windows.Window.OwnedWindows%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-421">The following example shows how to enumerate <xref:System.Windows.Window.OwnedWindows%2A>.</span></span>  
  
 [!code-csharp[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/CSharp/MainWindow.xaml.cs#getwindowownedwindowscode)]
 [!code-vb[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/visualbasic/mainwindow.xaml.vb#getwindowownedwindowscode)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.Windows.Window Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Window Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As Window" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Window ^ Owner { System::Windows::Window ^ get(); void set(System::Windows::Window ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Window</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-422">이 <see cref="T:System.Windows.Window" />를 소유하는<see cref="T:System.Windows.Window" />를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-422">Gets or sets the <see cref="T:System.Windows.Window" /> that owns this <see cref="T:System.Windows.Window" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5b585-423">이 <see cref="T:System.Windows.Window" />의 소유자를 나타내는 <see cref="T:System.Windows.Window" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-423">A <see cref="T:System.Windows.Window" /> object that represents the owner of this <see cref="T:System.Windows.Window" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-424">호출 하 여 자식 창의 부모 창에서 열 때 <xref:System.Windows.Window.ShowDialog%2A>, 부모와 자식 창 간에 암시적 관계가 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-424">When a child window is opened by a parent window by calling <xref:System.Windows.Window.ShowDialog%2A>, an implicit relationship is established between both parent and child window.</span></span> <span data-ttu-id="5b585-425">이 관계는 최소화, 최대화 및 복원에 대해 포함 하 여 특정 동작을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-425">This relationship enforces certain behaviors, including with respect to minimizing, maximizing, and restoring.</span></span>  
  
 <span data-ttu-id="5b585-426">그러나 호출 하 여 자식 창의 부모 창에서 만들 때 <xref:System.Windows.Window.Show%2A>, 자식 창에 관계가 설정 되어 있지 부모 창입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-426">When a child window is created by a parent window by calling <xref:System.Windows.Window.Show%2A>, however, the child window does not have a relationship with the parent window.</span></span> <span data-ttu-id="5b585-427">이는 다음을 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-427">This means that:</span></span>  
  
-   <span data-ttu-id="5b585-428">자식 창에는 부모 창에 대 한 참조가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-428">The child window does not have a reference to the parent window.</span></span>  
  
-   <span data-ttu-id="5b585-429">자식 창의 동작 부모 창의 동작에 종속 되지 않습니다. 두 창 중 하나를 포함할 수 또는 최소화, 최대화 및 서로 독립적으로 복원 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-429">The behavior of the child window is not dependent on the behavior of the parent window; either window can cover the other, or be minimized, maximized, and restored independently of the other.</span></span>  
  
 <span data-ttu-id="5b585-430">부모 창의 자식 창 사이의 관계를 만들 수 있도록 <xref:System.Windows.Window> 소유권의 개념을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-430">To allow you to create a relationship between a child window and a parent window, <xref:System.Windows.Window> supports the notion of ownership.</span></span> <span data-ttu-id="5b585-431">소유권이 설정 된 경우는 <xref:System.Windows.Window.Owner%2A> 창 (소유한 창)의 속성은 다른 창 (소유자 창)에 대 한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-431">Ownership is established when the <xref:System.Windows.Window.Owner%2A> property of a window (the owned window) is set with a reference to another window (the owner window).</span></span>  
  
 <span data-ttu-id="5b585-432">이 관계 설정 되 면 다음 동작이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-432">Once this relationship is established, the following behaviors are exhibited:</span></span>  
  
-   <span data-ttu-id="5b585-433">소유자 창이 최소화 하는 경우 소유 된 모든 창도 최소화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-433">If an owner window is minimized, all its owned windows are minimized as well.</span></span>  
  
-   <span data-ttu-id="5b585-434">소유 된 창을 최소화 하면 소유자 최소화 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-434">If an owned window is minimized, its owner is not minimized.</span></span>  
  
-   <span data-ttu-id="5b585-435">소유자 창이 최대화 되 면 소유자 창 및 소유 된 창 모두 복원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-435">If an owner window is maximized, both the owner window and its owned windows are restored.</span></span>  
  
-   <span data-ttu-id="5b585-436">소유자 창 소유 된 창을 포함할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-436">An owner window can never cover an owned window.</span></span>  
  
-   <span data-ttu-id="5b585-437">사용 하 여 열려 있지 않은 windows 소유 <xref:System.Windows.Window.ShowDialog%2A> 는 모달 대화 상자가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-437">Owned windows that were not opened using <xref:System.Windows.Window.ShowDialog%2A> are not modal.</span></span> <span data-ttu-id="5b585-438">사용자는 소유자 창이 여전히 작용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-438">The user can still interact with the owner window.</span></span>  
  
-   <span data-ttu-id="5b585-439">소유자 창을 닫은 경우 소유 된 창도 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-439">If you close an owner window, its owned windows are also closed.</span></span>  
  
-   <span data-ttu-id="5b585-440">소유 된 창을 사용 하 여 해당 소유자 창에서 열린 경우 <xref:System.Windows.Window.Show%2A>, 소유자 창이 닫힌 경우 소유 된 창 <xref:System.Windows.Window.Closing> 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-440">If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised.</span></span>  
  
 <span data-ttu-id="5b585-441">호출 하 여 자식 창을 열 때 <xref:System.Windows.Window.ShowDialog%2A>를 설정 해야는 <xref:System.Windows.Window.Owner%2A> 자식 창의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-441">When you open a child window by calling <xref:System.Windows.Window.ShowDialog%2A>, you should also set the <xref:System.Windows.Window.Owner%2A> property of the child window.</span></span> <span data-ttu-id="5b585-442">이렇게 하지 않으면 사용자가 작업 표시줄 단추를 눌러 자식 창과 부모 창으로 돌아갈 수 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-442">If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button.</span></span> <span data-ttu-id="5b585-443">대신, 작업 표시줄 단추를 누르면를 생성 하 여 s e l e 부모와 자식 창을 포함 하 여 창의 목록을 선택한 기간만 복원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-443">Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5b585-444">설정 해야는 <xref:System.Windows.Window.Owner%2A> 를 호출 하 여 열 창에서 속성 <xref:System.Windows.Window.ShowDialog%2A> 에 올바른 동작을 보장 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-444">You should also set the <xref:System.Windows.Window.Owner%2A> property on a window that that is opened by calling <xref:System.Windows.Window.ShowDialog%2A> to ensure correct behavior with .</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-445">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-445">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5b585-446">다음 예제에는 소유자/소유 하 고 관계를 설정 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-446">The following example shows how to establish the owner/owned relationship.</span></span>  
  
 [!code-csharp[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/CSharp/MainWindow.xaml.cs#setwindowownercode)]
 [!code-vb[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/visualbasic/mainwindow.xaml.vb#setwindowownercode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5b585-447">창이 자신을 소유하려고 하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-447">A window tries to own itself</span>
          </span>
          <span data-ttu-id="5b585-448">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-448">-or-</span>
          </span>
          <span data-ttu-id="5b585-449">두 개의 창이 서로를 소유하려고 하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-449">Two windows try to own each other.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5b585-450">
            <see cref="P:System.Windows.Window.Owner" />를 사용하여 표시된 창에서 <see cref="M:System.Windows.Window.ShowDialog" /> 속성이 설정된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-450">The <see cref="P:System.Windows.Window.Owner" /> property is set on a visible window shown using <see cref="M:System.Windows.Window.ShowDialog" /></span>
          </span>
          <span data-ttu-id="5b585-451">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-451">-or-</span>
          </span>
          <span data-ttu-id="5b585-452">이전에 표시되지 않은 창에서 <see cref="P:System.Windows.Window.Owner" /> 속성이 설정된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-452">The <see cref="P:System.Windows.Window.Owner" /> property is set with a window that has not been previously shown.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="5b585-453">모든 창과 사용자 입력된 이벤트를 제한 없이 사용할 수 있는 권한입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-453">for permission to use all windows and user input events without restriction.</span>
          </span>
          <span data-ttu-id="5b585-454">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-454">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="P:System.Windows.Window.OwnedWindows" />
      </Docs>
    </Member>
    <Member MemberName="ResizeMode">
      <MemberSignature Language="C#" Value="public System.Windows.ResizeMode ResizeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.ResizeMode ResizeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ResizeMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ResizeMode As ResizeMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResizeMode ResizeMode { System::Windows::ResizeMode get(); void set(System::Windows::ResizeMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ResizeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-455">크기 조정 모드를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-455">Gets or sets the resize mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5b585-456">크기 조정 모드를 지정하는 <see cref="T:System.Windows.ResizeMode" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-456">A <see cref="T:System.Windows.ResizeMode" /> value specifying the resize mode.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-457">다음과 같은 네 가지가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-457">There are four options:</span></span>  
  
-   <span data-ttu-id="5b585-458">**NoResize**합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-458">**NoResize**.</span></span> <span data-ttu-id="5b585-459">사용자는 창의 크기를 조정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-459">The user cannot resize the window.</span></span> <span data-ttu-id="5b585-460">최대화, 최소화 상자 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-460">The Maximize and Minimize boxes are not shown.</span></span>  
  
-   <span data-ttu-id="5b585-461">**CanMinimize**합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-461">**CanMinimize**.</span></span> <span data-ttu-id="5b585-462">만 사용자 창을 최소화 하 고 작업 표시줄에서 복원할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-462">The user can only minimize the window and restore it from the taskbar.</span></span> <span data-ttu-id="5b585-463">최소화 및 최대화 상자 모두 표시 되지만 최소화 상자만 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-463">The Minimize and Maximize boxes are both shown, but only the Minimize box is enabled.</span></span>  
  
-   <span data-ttu-id="5b585-464">**CanResize**합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-464">**CanResize**.</span></span> <span data-ttu-id="5b585-465">사용자에 게 창 주변의 최소화 및 최대화 상자 및 draggable 개요를 사용 하는 창의 크기를 조정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-465">The user has the full ability to resize the window, using the Minimize and Maximize boxes, and a draggable outline around the window.</span></span> <span data-ttu-id="5b585-466">최소화 및 최대화 상자를 표시 하 고 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-466">The Minimize and Maximize boxes are shown and enabled.</span></span> <span data-ttu-id="5b585-467">(기본값).</span><span class="sxs-lookup"><span data-stu-id="5b585-467">(Default).</span></span>  
  
-   <span data-ttu-id="5b585-468">**CanResizeWithGrip**.</span><span class="sxs-lookup"><span data-stu-id="5b585-468">**CanResizeWithGrip**.</span></span> <span data-ttu-id="5b585-469">이 옵션은 동일한 기능을 <xref:System.Windows.ResizeMode.CanResize>, 하지만 창의 오른쪽 맨 아래에 "크기 조정 그립"를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-469">This option has the same functionality as <xref:System.Windows.ResizeMode.CanResize>, but adds a "resize grip" to the lower right corner of the window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-470">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-470">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowResizeMode"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="5b585-471">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="5b585-471">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="5b585-472">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="5b585-472">Identifier field</span></span>|<xref:System.Windows.Window.ResizeModeProperty>|  
|<span data-ttu-id="5b585-473">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="5b585-473">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Primitives.ResizeGrip" />
      </Docs>
    </Member>
    <Member MemberName="ResizeModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ResizeModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ResizeModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ResizeModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ResizeModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ResizeModeProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-474">
            <see cref="P:System.Windows.Window.ResizeMode" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-474">Identifies the <see cref="P:System.Windows.Window.ResizeMode" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreBounds">
      <MemberSignature Language="C#" Value="public System.Windows.Rect RestoreBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Rect RestoreBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.RestoreBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RestoreBounds As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Rect RestoreBounds { System::Windows::Rect get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-475">최소화 또는 최대화하기 전의 창의 크기와 위치를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-475">Gets the size and location of a window before being either minimized or maximized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5b585-476">최소화 또는 최대화하기 전의 창의 크기와 위치를 지정하는 <see cref="T:System.Windows.Rect" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-476">A <see cref="T:System.Windows.Rect" /> that specifies the size and location of a window before being either minimized or maximized.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-477">복원 사각형은 지역 창에 최소화 또는 최대화 전에 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-477">The restore rectangle is the region occupied by the window before it was minimized or maximized.</span></span> <span data-ttu-id="5b585-478">사용할 수 있습니다 <xref:System.Windows.Window.RestoreBounds%2A> 응용 프로그램을 닫기 전에 마지막 크기 및 창 위치를 저장 하 고 응용 프로그램이 시작 하 여 사용자는 방식과 창을 복원 하려면 다음에 해당 값을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-478">You can use <xref:System.Windows.Window.RestoreBounds%2A> to save the last size and location of a window before an application is closed, and retrieve those values the next time an application starts to restore a window to the way a user left it.</span></span>  
  
 <span data-ttu-id="5b585-479">쿼리 하는 경우 <xref:System.Windows.Window.RestoreBounds%2A> 는 window가 표시 되기 전에 또는 종료 된 <xref:System.Windows.Rect.Empty%2A> 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-479">If you query <xref:System.Windows.Window.RestoreBounds%2A> before the window has been shown or after it has been closed, <xref:System.Windows.Rect.Empty%2A> is returned.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-480">창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-480">You cannot get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5b585-481">다음 예제에서는 <xref:System.Windows.Window.RestoreBounds%2A> 격리 된 저장소 크기 및 창 위치는은 창이 표시 되기 이전 시간 상태로 동일 하 게 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-481">The following example uses <xref:System.Windows.Window.RestoreBounds%2A> and isolated storage to ensure the size and location of a window are the same as they were the previous time the window was shown.</span></span>  
  
 [!code-xaml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml#windowrestoreboundsxaml1)]  
[!code-xaml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml#windowrestoreboundsxaml2)]  
  
 [!code-csharp[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml.cs#windowrestoreboundscodebehind1)]
 [!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/visualbasic/mainwindow.xaml.vb#windowrestoreboundscodebehind1)]  
[!code-csharp[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml.cs#windowrestoreboundscodebehind2)]
[!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/visualbasic/mainwindow.xaml.vb#windowrestoreboundscodebehind2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="5b585-482">크기와 창의 위치에 쿼리할 수 있는 권한이 대 한 경계 사각형입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-482">for permission to query for the size and location of a window's bounding rectangle.</span>
          </span>
          <span data-ttu-id="5b585-483">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-483">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Show" />
      <MemberSignature Language="VB.NET" Value="Public Sub Show ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5b585-484">창을 연 후 새로 열린 창이 닫힐 때까지 기다리지 않고 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-484">Opens a window and returns without waiting for the newly opened window to close.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-485">경우는 <xref:System.Windows.Window> 클래스가 인스턴스화되면, 기본적으로 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-485">When the <xref:System.Windows.Window> class is instantiated, it is not visible by default.</span></span> <span data-ttu-id="5b585-486"><xref:System.Windows.Window.Show%2A> 창을 표시 하 고 창이 닫힐 때까지 기다리지 않고 즉시 결과 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-486"><xref:System.Windows.Window.Show%2A> shows a window and returns immediately, without waiting for the window to be closed.</span></span> <span data-ttu-id="5b585-487">따라서 열린된 창 응용 프로그램에서 다른 windows와 상호 작용에서 사용자가 방해 되지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-487">Consequently, the opened window does not prevent users from interacting with other windows in the application.</span></span> <span data-ttu-id="5b585-488">이러한 형식의 라고는 *모덜리스* 창.</span><span class="sxs-lookup"><span data-stu-id="5b585-488">This type of window is called a *modeless* window.</span></span> <span data-ttu-id="5b585-489">일반적인 모덜리스 창은 속성 창과 도구 상자 팔레트 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-489">Common examples of modeless windows are properties windows, toolboxes, and palettes.</span></span> <span data-ttu-id="5b585-490">특정 창 상호 작용 하는 사용자를 제한 하는 창을 호출 하 여 열 해야 <xref:System.Windows.Window.ShowDialog%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-490">To restrict a user to interacting with a specific window, the window must be opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="5b585-491">호출 하 여 열려 있는 창을 <xref:System.Windows.Window.Show%2A> 않습니다 것 연 창에 관계가 정의 되어 자동으로; 구체적으로 열린된 창을 알지 못하고 메서드.</span><span class="sxs-lookup"><span data-stu-id="5b585-491">A window that is opened by calling <xref:System.Windows.Window.Show%2A> does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</span></span> <span data-ttu-id="5b585-492">사용 하 여이 관계를 설정할 수는 <xref:System.Windows.Window.Owner%2A> 속성과 관리 되는 사용 하는 <xref:System.Windows.Window.OwnedWindows%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-492">This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span>  
  
 <span data-ttu-id="5b585-493">호출 <xref:System.Windows.Window.Show%2A> 설정으로 동일한 최종 결과 달성 <xref:System.Windows.UIElement.Visibility%2A> 의 속성은 <xref:System.Windows.Window> 개체를 <xref:System.Windows.Visibility.Visible>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-493">Calling <xref:System.Windows.Window.Show%2A> achieves the same end result as setting <xref:System.Windows.UIElement.Visibility%2A> property of the <xref:System.Windows.Window> object to <xref:System.Windows.Visibility.Visible>.</span></span> <span data-ttu-id="5b585-494">그러나 타이밍 관점에서 둘 사이 차이가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-494">However, there is a difference between the two from a timing perspective.</span></span>  
  
 <span data-ttu-id="5b585-495">호출 <xref:System.Windows.Window.Show%2A> 후에 반환 하는 동기 작업은 <xref:System.Windows.FrameworkElement.Loaded> 자식 창에 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-495">Calling <xref:System.Windows.Window.Show%2A> is a synchronous operation that returns only after the <xref:System.Windows.FrameworkElement.Loaded> event on the child window has been raised:</span></span>  
  
 [!code-csharp[WindowShowTimingSnippets#ShowSync](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showsync)]
 [!code-vb[WindowShowTimingSnippets#ShowSync](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showsync)]  
  
 <span data-ttu-id="5b585-496">설정 <xref:System.Windows.UIElement.Visibility%2A>, 인데 즉시 반환 하는 비동기 작업:</span><span class="sxs-lookup"><span data-stu-id="5b585-496">Setting <xref:System.Windows.UIElement.Visibility%2A>, however, is an asynchronous operation that returns immediately:</span></span>  
  
 [!code-csharp[WindowShowTimingSnippets#ShowASync](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showasync)]
 [!code-vb[WindowShowTimingSnippets#ShowASync](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showasync)]  
  
 <span data-ttu-id="5b585-497">설정할 때 <xref:System.Windows.UIElement.Visibility%2A>를 설정 하기 전에 등록 한 모든 창 이벤트가 <xref:System.Windows.UIElement.Visibility%2A> 을 설정한 메서드 지날 때까지 발생할 수 있습니다 <xref:System.Windows.UIElement.Visibility%2A> 실행을 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-497">When setting <xref:System.Windows.UIElement.Visibility%2A>, any window events you register before you set <xref:System.Windows.UIElement.Visibility%2A> may not be raised until after the method in which you set <xref:System.Windows.UIElement.Visibility%2A> has completed execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5b585-498">다음 샘플 모덜리스 창을 여는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-498">The following sample demonstrates how to open a modeless window.</span></span>  
  
 [!code-csharp[WindowShowSnippets#WindowShowCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowSnippets/CSharp/MainWindow.xaml.cs#windowshowcode)]
 [!code-vb[WindowShowSnippets#WindowShowCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowSnippets/visualbasic/mainwindow.xaml.vb#windowshowcode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5b585-499">닫히고 있는 창(<see cref="M:System.Windows.Window.Show" />) 또는 닫힌 창(<see cref="E:System.Windows.Window.Closing" />)에서 <see cref="E:System.Windows.Window.Closed" />가 호출된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-499">
              <see cref="M:System.Windows.Window.Show" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="M:System.Windows.Window.Hide" />
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="ShowActivated">
      <MemberSignature Language="C#" Value="public bool ShowActivated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowActivated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ShowActivated" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowActivated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowActivated { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-500">창이 처음 표시될 때 활성화되는지 여부를 나타내는 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-500">Gets or sets a value that indicates whether a window is activated when first shown.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5b585-501">창이 처음 표시될 때 활성화되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-501">
              <see langword="true" /> if a window is activated when first shown; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="5b585-502">기본값은 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-502">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-503">창을 해당 <xref:System.Windows.Window.ShowActivated%2A> 속성이로 설정 `false` 은 열, 창이 활성화 되지 않으면 및 해당 <xref:System.Windows.Window.Activated> 선택 하 여 창을 수동으로 활성화 될 때까지 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-503">When a window with its <xref:System.Windows.Window.ShowActivated%2A> property set to `false` is opened, the window is not activated and its <xref:System.Windows.Window.Activated> event is not raised until a user manually activates the window by selecting it.</span></span> <span data-ttu-id="5b585-504">창의 선택 된 후 활성화 되거나 정상적으로 비활성화 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-504">After the window is selected, it activates and deactivates normally.</span></span>  
  
 <span data-ttu-id="5b585-505">창이 열릴 때 활성화 되 고 되지 않도록 하려면는 <xref:System.Windows.Window.ShowActivated%2A> 속성으로 설정 되어 있어야 `false` 창이 표시 되기 전에 (호출 하 여 <xref:System.Windows.Window.Show%2A>) 설정 <xref:System.Windows.Window.ShowActivated%2A> 를 `false` 아무 효과가 창이 표시 되기 후입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-505">To prevent a window from being activated when it opens, the <xref:System.Windows.Window.ShowActivated%2A> property must be set to `false` before the window is shown (by calling <xref:System.Windows.Window.Show%2A>); setting <xref:System.Windows.Window.ShowActivated%2A> to `false` after a window is shown has no effect.</span></span>  
  
 <span data-ttu-id="5b585-506">설정 <xref:System.Windows.Window.ShowActivated%2A> 를 `false` 모달 형식으로 호출 하 여 열려 있는 창에 <xref:System.Windows.Window.ShowDialog%2A>, 실제 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-506">Setting <xref:System.Windows.Window.ShowActivated%2A> to `false` on a window that is opened modally, by calling <xref:System.Windows.Window.ShowDialog%2A>, has no real impact.</span></span> <span data-ttu-id="5b585-507">모달 창이 활성화 되지 않지만 모달 창 사용자 다른 열려 있는 응용 프로그램 창을 활성화 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-507">Although the modal window will not be activated, the modal window will prevent the user from activating any other open application windows.</span></span>  
  
<a name="dependencyPropertyInfo_WindowShowActivated"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="5b585-508">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="5b585-508">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="5b585-509">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="5b585-509">Identifier field</span></span>|<xref:System.Windows.Window.ShowActivatedProperty>|  
|<span data-ttu-id="5b585-510">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="5b585-510">Metadata properties set to `true`</span></span>|<span data-ttu-id="5b585-511">없음</span><span class="sxs-lookup"><span data-stu-id="5b585-511">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="5b585-512">다음 예제에서는 태그를 사용 하 여 창이 활성화 되지 않고 열 수를 구성 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-512">The following example shows how to use markup to configure a window to be opened without being activated.</span></span>  
  
 [!code-xaml[WindowShowActivatedSnippets#ShowUnactivatedMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/AWindow.xaml#showunactivatedmarkup1)]  
  
  
 [!code-csharp[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/AWindow.xaml.cs#showunactivatedcodebehind)]
 [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowActivatedSnippets/visualbasic/awindow.xaml.vb#showunactivatedcodebehind)]  
  
 <span data-ttu-id="5b585-513">다음 예제에서는 코드를 사용 하 여 창이 활성화 되지 않고 열 수를 구성 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-513">The following example shows how to use code to configure a window to be opened without it being activated.</span></span>  
  
 [!code-csharp[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/Window1.xaml.cs#showunactivatedwindowcode)]
 [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowActivatedSnippets/visualbasic/window1.xaml.vb#showunactivatedwindowcode)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowActivatedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ShowActivatedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ShowActivatedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ShowActivatedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ShowActivatedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ShowActivatedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-514">
            <see cref="P:System.Windows.Window.ShowActivated" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-514">Identifies the <see cref="P:System.Windows.Window.ShowActivated" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDialog">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; ShowDialog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;bool&gt; ShowDialog() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.ShowDialog" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowDialog () As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;bool&gt; ShowDialog();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5b585-515">창을 연 후 새로 열린 창이 닫힌 경우에만 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-515">Opens a window and returns only when the newly opened window is closed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5b585-516">작업이 받아들여졌는지(<see langword="true" /> 또는 취소되었는지(<see langword="false" />) 여부를 지정하는 <see cref="T:System.Nullable`1" /> 유형의 <see cref="T:System.Boolean" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-516">A <see cref="T:System.Nullable`1" /> value of type <see cref="T:System.Boolean" /> that specifies whether the activity was accepted (<see langword="true" />) or canceled (<see langword="false" />).</span>
          </span>
          <span data-ttu-id="5b585-517">반환 값은 창이 닫히기 전의 <see cref="P:System.Windows.Window.DialogResult" /> 속성 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-517">The return value is the value of the <see cref="P:System.Windows.Window.DialogResult" /> property before a window closes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-518">경우는 <xref:System.Windows.Window> 클래스가 인스턴스화되면, 기본적으로 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-518">When a <xref:System.Windows.Window> class is instantiated, it is not visible by default.</span></span> <span data-ttu-id="5b585-519"><xref:System.Windows.Window.ShowDialog%2A> 창을 보여, 응용 프로그램에서 다른 모든 창을 사용 하지 않도록 설정 하 고 창이 닫혀 있는 경우에를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-519"><xref:System.Windows.Window.ShowDialog%2A> shows the window, disables all other windows in the application, and returns only when the window is closed.</span></span> <span data-ttu-id="5b585-520">이러한 형식의 라고는 *모달* 창.</span><span class="sxs-lookup"><span data-stu-id="5b585-520">This type of window is known as a *modal* window.</span></span>  
  
 <span data-ttu-id="5b585-521">모달 창은 대화 상자로 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-521">Modal windows are primarily used as dialog boxes.</span></span> <span data-ttu-id="5b585-522">대화 상자는 특수 한 유형의 응용 프로그램 파일을 열거나 문서 인쇄 등의 작업을 완료 하는 사용자 상호 작용 하는 데 사용 하는 창입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-522">A dialog box is a special type of window that applications use to interact with users to complete tasks, such as opening files or printing documents.</span></span> <span data-ttu-id="5b585-523">대화 상자는 일반적으로 적용 하거나 취소할 작업을 표시 된 대화 상자를 닫기 전에 사용자가 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-523">Dialog boxes commonly allow users to accept or cancel the task for which they were shown before the dialog box is closed.</span></span> <span data-ttu-id="5b585-524"><xref:System.Windows.Window.ShowDialog%2A> 반환 된 <xref:System.Nullable%601> <xref:System.Boolean> 활동 적용 하거나 취소 여부를 지정 하는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-524"><xref:System.Windows.Window.ShowDialog%2A> returns a <xref:System.Nullable%601><xref:System.Boolean> value that specifies whether the activity was accepted or canceled.</span></span> <span data-ttu-id="5b585-525">반환 값은 창이 닫히기 전의 <xref:System.Windows.Window.DialogResult%2A> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-525">The return value is the value of the <xref:System.Windows.Window.DialogResult%2A> property before a window closes.</span></span> <span data-ttu-id="5b585-526">자세한 내용은 <xref:System.Windows.Window.DialogResult%2A>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="5b585-526">For more information, see <xref:System.Windows.Window.DialogResult%2A>.</span></span>  
  
 <span data-ttu-id="5b585-527">호출 하 여 열려 있는 창에서 <xref:System.Windows.Window.ShowDialog%2A> 메서드에 자동으로 그 연 창에 관계가 없으므로 구체적으로 열린된 창을 알지 못하고 창을 연 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-527">A window that is opened by calling the <xref:System.Windows.Window.ShowDialog%2A> method does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</span></span> <span data-ttu-id="5b585-528">사용 하 여이 관계를 설정할 수는 <xref:System.Windows.Window.Owner%2A> 속성과 관리 되는 사용 하는 <xref:System.Windows.Window.OwnedWindows%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-528">This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span> <span data-ttu-id="5b585-529">지원 하기 위해 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 자동화 (참조 [UI 자동화 개요](~/docs/framework/ui-automation/ui-automation-overview.md)), <xref:System.Windows.Window.Owner%2A> 호출 하 여 연 창에 대 한 설정 되어 있어야 <xref:System.Windows.Window.ShowDialog%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-529">To support [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] automation (see [UI Automation Overview](~/docs/framework/ui-automation/ui-automation-overview.md)), <xref:System.Windows.Window.Owner%2A> must be set for a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="5b585-530">모달 [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] 창 (창을 호출 하 여 열린 <xref:System.Windows.Window.ShowDialog%2A>)가 닫힌 경우 이전에 활성화 된 창이 다시 활성화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-530">When a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window (a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>) is closed, the previously activated window is reactivated.</span></span> <span data-ttu-id="5b585-531">경우 모달 [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] 창에 소유자 (참조 <xref:System.Windows.Window.Owner%2A>), 소유자 창이 때 다시 활성화 modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] 이전에 활성화 된 창 않은 창이 닫혀 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-531">If a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window has an owner window (see <xref:System.Windows.Window.Owner%2A>), the owner window is not reactivated when the modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window is closed unless it was the previously activated window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-532">창을 브라우저에서 호스팅되는 경우이 메서드를 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-532">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5b585-533">다음 샘플에는 모달 창을 여는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-533">The following sample demonstrates how to open a modal window.</span></span>  
  
 [!code-csharp[WindowShowDialogSnippets#WindowShowDialogCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowDialogSnippets/CSharp/MainWindow.xaml.cs#windowshowdialogcode)]
 [!code-vb[WindowShowDialogSnippets#WindowShowDialogCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowDialogSnippets/visualbasic/mainwindow.xaml.vb#windowshowdialogcode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5b585-534">닫히고 있는 창(<see cref="M:System.Windows.Window.ShowDialog" />) 또는 닫힌 창(<see cref="E:System.Windows.Window.Closing" />)에서 <see cref="E:System.Windows.Window.Closed" />가 호출된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-534">
              <see cref="M:System.Windows.Window.ShowDialog" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="5b585-535">창을 활성화할 수 있는 권한입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-535">for permission to activate a window.</span>
          </span>
          <span data-ttu-id="5b585-536">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-536">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="ShowInTaskbar">
      <MemberSignature Language="C#" Value="public bool ShowInTaskbar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowInTaskbar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ShowInTaskbar" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowInTaskbar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowInTaskbar { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-537">창에 작업 표시줄 단추가 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-537">Gets or sets a value that indicates whether the window has a task bar button.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5b585-538">창에 작업 표시줄 단추가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-538">
              <see langword="true" /> if the window has a task bar button; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="5b585-539">창이 브라우저에서 호스팅될 때는 적용하지 마십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-539">Does not apply when the window is hosted in a browser.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-540">경우 <xref:System.Windows.Window.ShowInTaskbar%2A> 로 설정 된 `true`, ALT + TAB 응용 프로그램 선택 목록에도 창이 나타납니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-540">If <xref:System.Windows.Window.ShowInTaskbar%2A> is set to `true`, the window will also appear in the ALT+TAB application selection list.</span></span>  
  
 <span data-ttu-id="5b585-541">작업 표시줄 단추와 ALT + TAB 응용 프로그램 선택 목록에 사용 되는 아이콘의 값인는 <xref:System.Windows.Window.Icon%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-541">The icon that is used for both the task bar button and the ALT+TAB application selection list is the value of the <xref:System.Windows.Window.Icon%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-542">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-542">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowShowInTaskbar"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="5b585-543">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="5b585-543">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="5b585-544">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="5b585-544">Identifier field</span></span>|<xref:System.Windows.Window.ShowInTaskbarProperty>|  
|<span data-ttu-id="5b585-545">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="5b585-545">Metadata properties set to `true`</span></span>|<span data-ttu-id="5b585-546">없음</span><span class="sxs-lookup"><span data-stu-id="5b585-546">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowInTaskbarProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ShowInTaskbarProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ShowInTaskbarProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ShowInTaskbarProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ShowInTaskbarProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ShowInTaskbarProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-547">
            <see cref="P:System.Windows.Window.ShowInTaskbar" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-547">Identifies the <see cref="P:System.Windows.Window.ShowInTaskbar" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeToContent">
      <MemberSignature Language="C#" Value="public System.Windows.SizeToContent SizeToContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.SizeToContent SizeToContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.SizeToContent" />
      <MemberSignature Language="VB.NET" Value="Public Property SizeToContent As SizeToContent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::SizeToContent SizeToContent { System::Windows::SizeToContent get(); void set(System::Windows::SizeToContent value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.SizeToContent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-548">콘텐츠 크기에 맞게 창의 크기를 자동으로 조정할지 여부를 나타내는 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-548">Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5b585-549">
            <see cref="T:System.Windows.SizeToContent" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-549">A <see cref="T:System.Windows.SizeToContent" /> value.</span>
          </span>
          <span data-ttu-id="5b585-550">기본값은 <see cref="F:System.Windows.SizeToContent.Manual" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-550">The default is <see cref="F:System.Windows.SizeToContent.Manual" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-551">때 <xref:System.Windows.Window.SizeToContent%2A> 로 설정 된 <xref:System.Windows.SizeToContent.WidthAndHeight>, 설정 <xref:System.Windows.FrameworkElement.Height%2A> 또는 <xref:System.Windows.FrameworkElement.Width%2A> 아무 효과가; 두 속성을 설정할 수 있지만 설정 값 창에 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-551">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.WidthAndHeight>, setting either <xref:System.Windows.FrameworkElement.Height%2A> or <xref:System.Windows.FrameworkElement.Width%2A> has no effect; both properties can be set, but the values they are set with are not applied to the window.</span></span>  
  
 <span data-ttu-id="5b585-552">때 <xref:System.Windows.Window.SizeToContent%2A> 로 설정 된 <xref:System.Windows.SizeToContent.Height>설정 <xref:System.Windows.FrameworkElement.Height%2A> 창의 높이 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-552">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Height>, setting <xref:System.Windows.FrameworkElement.Height%2A> does not change the height of the window.</span></span>  
  
 <span data-ttu-id="5b585-553">때 <xref:System.Windows.Window.SizeToContent%2A> 로 설정 된 <xref:System.Windows.SizeToContent.Width>설정 <xref:System.Windows.FrameworkElement.Width%2A> 창의 너비를 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-553">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Width>, setting <xref:System.Windows.FrameworkElement.Width%2A> does not change the width of the window.</span></span>  
  
 <span data-ttu-id="5b585-554">경우 <xref:System.Windows.Window.SizeToContent%2A> 이외의 값을 가지 <xref:System.Windows.SizeToContent.Manual>:</span><span class="sxs-lookup"><span data-stu-id="5b585-554">If <xref:System.Windows.Window.SizeToContent%2A> has a value other than <xref:System.Windows.SizeToContent.Manual>:</span></span>  
  
-   <span data-ttu-id="5b585-555"><xref:System.Windows.Window.SizeToContent%2A> 으로 자동 설정 <xref:System.Windows.SizeToContent.Manual> 사용자가 창의 크기 조정 그립을 사용 하거나 테두리를 끌어 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-555"><xref:System.Windows.Window.SizeToContent%2A> is automatically set to <xref:System.Windows.SizeToContent.Manual> if a user resizes the window by using the resize grip or dragging the border.</span></span>  
  
-   <span data-ttu-id="5b585-556">콘텐츠 크기를 자체를 조정할 경우 창이 하는 방식으로 변경 되 면 <xref:System.Windows.FrameworkElement.SizeChanged> 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-556">If the size of the content changes in a way that causes the window to resize itself, <xref:System.Windows.FrameworkElement.SizeChanged> is raised.</span></span>  
  
 <span data-ttu-id="5b585-557">창이 투명 한 경우 (참조 <xref:System.Windows.Window.AllowsTransparency%2A>), 설정을 고려해 야 <xref:System.Windows.Window.SizeToContent%2A> 를 <xref:System.Windows.SizeToContent.WidthAndHeight> 표시 된 콘텐츠를 보다 작은 창이 되는지 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-557">If a window is transparent (see <xref:System.Windows.Window.AllowsTransparency%2A>), you should consider setting <xref:System.Windows.Window.SizeToContent%2A> to <xref:System.Windows.SizeToContent.WidthAndHeight> to ensure the window is no larger than its visible content.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-558">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-558">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowSizeToContent"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="5b585-559">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="5b585-559">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="5b585-560">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="5b585-560">Identifier field</span></span>|<xref:System.Windows.Window.SizeToContentProperty>|  
|<span data-ttu-id="5b585-561">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="5b585-561">Metadata properties set to `true`</span></span>|<span data-ttu-id="5b585-562">없음</span><span class="sxs-lookup"><span data-stu-id="5b585-562">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="5b585-563">설정 하는 방법을 보여 주는 다음 예제는 <xref:System.Windows.Window.SizeToContent%2A> 창의 내용에 맞게 크기 조정 하는 방법을 지정 하는 코드에서 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-563">The following example shows how to set the <xref:System.Windows.Window.SizeToContent%2A> property in code to specify how a window resizes to fit its content.</span></span>  
  
 [!code-csharp[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/HOWTOWindowManagementSnippets/CSharp/MainWindow.xaml.cs#setwindowsizetocontentpropertycode)]
 [!code-vb[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HOWTOWindowManagementSnippets/visualbasic/mainwindow.xaml.vb#setwindowsizetocontentpropertycode)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="P:System.Windows.Window.ResizeMode" />
      </Docs>
    </Member>
    <Member MemberName="SizeToContentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SizeToContentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SizeToContentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.SizeToContentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeToContentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SizeToContentProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-564">
            <see cref="P:System.Windows.Window.SizeToContent" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-564">Identifies the <see cref="P:System.Windows.Window.SizeToContent" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceInitialized">
      <MemberSignature Language="C#" Value="public event EventHandler SourceInitialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SourceInitialized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.SourceInitialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SourceInitialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SourceInitialized;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-565">이 이벤트는 [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]와의 상호 운용성을 지원하기 위해 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-565">This event is raised to support interoperation with [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)].</span>
          </span>
          <span data-ttu-id="5b585-566">
            <see cref="T:System.Windows.Interop.HwndSource" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-566">See <see cref="T:System.Windows.Interop.HwndSource" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler StateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler StateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.StateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StateChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ StateChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-567">창의 <see cref="P:System.Windows.Window.WindowState" /> 속성이 변경될 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-567">Occurs when the window's <see cref="P:System.Windows.Window.WindowState" /> property changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="TaskbarItemInfo">
      <MemberSignature Language="C#" Value="public System.Windows.Shell.TaskbarItemInfo TaskbarItemInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Shell.TaskbarItemInfo TaskbarItemInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.TaskbarItemInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property TaskbarItemInfo As TaskbarItemInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Shell::TaskbarItemInfo ^ TaskbarItemInfo { System::Windows::Shell::TaskbarItemInfo ^ get(); void set(System::Windows::Shell::TaskbarItemInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Shell.TaskbarItemInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-568">
            <see cref="T:System.Windows.Window" />에 [!INCLUDE[win7](~/includes/win7-md.md)] 작업 표시줄 썸네일을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-568">Gets or sets the [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail for the <see cref="T:System.Windows.Window" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5b585-569">
            <see cref="T:System.Windows.Window" />의 [!INCLUDE[win7](~/includes/win7-md.md)] 작업 표시줄 축소판 그림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-569">The [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail for the <see cref="T:System.Windows.Window" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-570">사용 하는 방법에 대 한 자세한 내용은 [!INCLUDE[win7](~/includes/win7-md.md)] 작업 표시줄, 축소판 그림 참조는 <xref:System.Windows.Shell.TaskbarItemInfo> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-570">For more information about how to use the [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail, see the <xref:System.Windows.Shell.TaskbarItemInfo> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="N:System.Windows.Shell" />
      </Docs>
    </Member>
    <Member MemberName="TaskbarItemInfoProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TaskbarItemInfoProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TaskbarItemInfoProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TaskbarItemInfoProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TaskbarItemInfoProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TaskbarItemInfoProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-571">
            <see cref="P:System.Windows.Window.TaskbarItemInfo" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-571">Identifies the <see cref="P:System.Windows.Window.TaskbarItemInfo" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IWindowService.Title</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Title)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-572">창의 제목을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-572">Gets or sets a window's title.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5b585-573">창의 제목이 들어 있는 <see cref="T:System.String" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-573">A <see cref="T:System.String" /> that contains the window's title.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-574">제목은 <xref:System.Windows.Window>, <xref:System.Windows.Navigation.NavigationWindow>, 또는 [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)]를 사용 하 여 설정할 수도 있습니다 <xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-574">The title of a <xref:System.Windows.Window>, <xref:System.Windows.Navigation.NavigationWindow>, or [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)], can also be set by using <xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType>.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTitle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="5b585-575">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="5b585-575">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="5b585-576">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="5b585-576">Identifier field</span></span>|<xref:System.Windows.Window.TitleProperty>|  
|<span data-ttu-id="5b585-577">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="5b585-577">Metadata properties set to `true`</span></span>|<span data-ttu-id="5b585-578">없음</span><span class="sxs-lookup"><span data-stu-id="5b585-578">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TitleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TitleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TitleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TitleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TitleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-579">
            <see cref="P:System.Windows.Window.Title" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-579">Identifies the <see cref="P:System.Windows.Window.Title" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public double Top { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Top" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Top" />
      <MemberSignature Language="VB.NET" Value="Public Property Top As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Top { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-580">바탕 화면과 관련해서 창의 맨 위 가장자리 위치를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-580">Gets or sets the position of the window's top edge, in relation to the desktop.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5b585-581">논리 단위(1/96인치)로 지정된 창의 맨 위 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-581">The position of the window's top, in logical units (1/96").</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-582">경우는 <xref:System.Windows.Window> 최대화 되거나 최소화, 복원의 위쪽 가장자리에 대 한 지점의이 값 나타냅니다는 <xref:System.Windows.Window>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-582">When the <xref:System.Windows.Window> is maximized or minimized, this value represents the top edge of the restore point for the <xref:System.Windows.Window>.</span></span>  
  
 <span data-ttu-id="5b585-583">스타일을 통해이 속성을 설정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-583">This property cannot be set through a style.</span></span>  
  
 <span data-ttu-id="5b585-584">값을 지정 하지 않으면 <xref:System.Windows.Window.Top%2A> 시스템 기본 값으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-584">If you do not specify a value, <xref:System.Windows.Window.Top%2A> is set to the system default value.</span></span> <span data-ttu-id="5b585-585">설정 하 여 시스템 기본값을 지정할 수도 있습니다 <xref:System.Windows.Window.Top%2A> 를 <xref:System.Double.NaN>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-585">You can also specify the system default value by setting <xref:System.Windows.Window.Top%2A> to <xref:System.Double.NaN>.</span></span> <span data-ttu-id="5b585-586">모두 <xref:System.Double.NegativeInfinity> 나 <xref:System.Double.PositiveInfinity> 에 대 한 유효한 값인지 <xref:System.Windows.Window.Top%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-586">Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Top%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-587">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-587">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTop"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="5b585-588">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="5b585-588">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="5b585-589">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="5b585-589">Identifier field</span></span>|<xref:System.Windows.Window.TopProperty>|  
|<span data-ttu-id="5b585-590">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="5b585-590">Metadata properties set to `true`</span></span>|<span data-ttu-id="5b585-591">없음</span><span class="sxs-lookup"><span data-stu-id="5b585-591">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
      </Docs>
    </Member>
    <Member MemberName="Topmost">
      <MemberSignature Language="C#" Value="public bool Topmost { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Topmost" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Topmost" />
      <MemberSignature Language="VB.NET" Value="Public Property Topmost As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Topmost { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-592">창을 맨 위 z 순서에 표시할지 여부를 나타내는 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-592">Gets or sets a value that indicates whether a window appears in the topmost z-order.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5b585-593">창이 맨 위에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-593">
              <see langword="true" /> if the window is topmost; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-594">창 인 <xref:System.Windows.Window.Topmost%2A> 속성이 `true` 갖는 모든 창 위에 표시 <xref:System.Windows.Window.Topmost%2A> 속성으로 설정 됩니다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-594">A window whose <xref:System.Windows.Window.Topmost%2A> property is set to `true` appears above all windows whose <xref:System.Windows.Window.Topmost%2A> properties are set to `false`.</span></span>  
  
 <span data-ttu-id="5b585-595">이 있는 windows 그룹에 <xref:System.Windows.Window.Topmost%2A> 속성이 `true`, 현재 활성화 된의 맨 위에 있는 창입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-595">In the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `true`, the window that is currently activated is the topmost window.</span></span> <span data-ttu-id="5b585-596">마찬가지로 있는 windows 그룹에 대 한 <xref:System.Windows.Window.Topmost%2A> 속성이 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-596">Likewise for the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-597">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-597">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTopmost"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="5b585-598">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="5b585-598">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="5b585-599">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="5b585-599">Identifier field</span></span>|<xref:System.Windows.Window.TopmostProperty>|  
|<span data-ttu-id="5b585-600">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="5b585-600">Metadata properties set to `true`</span></span>|<span data-ttu-id="5b585-601">없음</span><span class="sxs-lookup"><span data-stu-id="5b585-601">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
      </Docs>
    </Member>
    <Member MemberName="TopmostProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TopmostProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TopmostProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TopmostProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TopmostProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TopmostProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-602">
            <see cref="P:System.Windows.Window.Topmost" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-602">Identifies the <see cref="P:System.Windows.Window.Topmost" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TopProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TopProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TopProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TopProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TopProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-603">
            <see cref="P:System.Windows.Window.Top" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-603">Identifies the <see cref="P:System.Windows.Window.Top" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStartupLocation">
      <MemberSignature Language="C#" Value="public System.Windows.WindowStartupLocation WindowStartupLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowStartupLocation WindowStartupLocation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowStartupLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowStartupLocation As WindowStartupLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowStartupLocation WindowStartupLocation { System::Windows::WindowStartupLocation get(); void set(System::Windows::WindowStartupLocation value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.WindowStartupLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-604">처음 표시될 때 창의 위치를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-604">Gets or sets the position of the window when first shown.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5b585-605">처음 표시될 때의 창의 맨 위/왼쪽 위치를 지정하는 <see cref="T:System.Windows.WindowStartupLocation" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-605">A <see cref="T:System.Windows.WindowStartupLocation" /> value that specifies the top/left position of a window when first shown.</span>
          </span>
          <span data-ttu-id="5b585-606">기본값은 <see cref="F:System.Windows.WindowStartupLocation.Manual" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-606">The default is <see cref="F:System.Windows.WindowStartupLocation.Manual" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-607">설정 <xref:System.Windows.WindowStartupLocation> 를 <xref:System.Windows.WindowStartupLocation.Manual> 설정에 따라 배치 된 창은 해당 <xref:System.Windows.Window.Left%2A> 및 <xref:System.Windows.Window.Top%2A> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-607">Setting <xref:System.Windows.WindowStartupLocation> to <xref:System.Windows.WindowStartupLocation.Manual> causes a window to be positioned according to its <xref:System.Windows.Window.Left%2A> and <xref:System.Windows.Window.Top%2A> property values.</span></span> <span data-ttu-id="5b585-608">경우는 <xref:System.Windows.Window.Left%2A> 또는 <xref:System.Windows.Window.Top%2A> 을 속성 지정 하지 않으면 해당 값은 Windows에 의해 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-608">If either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> properties aren't specified, their values are determined by Windows.</span></span>  
  
 <span data-ttu-id="5b585-609">설정 <xref:System.Windows.WindowStartupLocation.CenterScreen> 창이 마우스 커서가 포함 된 화면 가운데에 배치 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-609">Setting <xref:System.Windows.WindowStartupLocation.CenterScreen> causes a window to be positioned in the center of the screen that contains the mouse cursor.</span></span>  
  
 <span data-ttu-id="5b585-610">설정 <xref:System.Windows.WindowStartupLocation> 를 <xref:System.Windows.WindowStartupLocation.CenterOwner> 소유자 창의 가운데에 배치 될 창이 (참조 <xref:System.Windows.Window.Owner%2A>), 지정 된 경우.</span><span class="sxs-lookup"><span data-stu-id="5b585-610">Setting <xref:System.Windows.WindowStartupLocation> to <xref:System.Windows.WindowStartupLocation.CenterOwner> causes a window to be positioned in the center of its owner window (see <xref:System.Windows.Window.Owner%2A>), if specified.</span></span> <span data-ttu-id="5b585-611">다른 WPF 창 또는 비 WPF 창 소유자 창이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-611">The owner window can be either another WPF window or a non-WPF window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-612">비 WPF windows와 함께 WPF 기간에 대 한 자세한 내용은 참조 [WPF 및 Win32 상호 운용](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md) 및 <xref:System.Windows.Interop.WindowInteropHelper>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-612">For more information about WPF windows with non-WPF windows, see [WPF and Win32 Interoperation](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md) and <xref:System.Windows.Interop.WindowInteropHelper>.</span></span>  
  
 <span data-ttu-id="5b585-613">창의 위치가 같은 방식으로 결정 됩니다 소유자 창이 지정 되지 않은 경우 처럼 <xref:System.Windows.WindowStartupLocation> 로 설정 된 <xref:System.Windows.WindowStartupLocation.Manual>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-613">If an owner window is not specified, the position of the window is determined in the same way as if <xref:System.Windows.WindowStartupLocation> is set to <xref:System.Windows.WindowStartupLocation.Manual>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-614">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성의 값을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-614">You cannot set or get the value of this property when a window is hosted in a browser.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowState">
      <MemberSignature Language="C#" Value="public System.Windows.WindowState WindowState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowState WindowState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowState" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowState As WindowState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowState WindowState { System::Windows::WindowState get(); void set(System::Windows::WindowState value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-615">창을 복원, 최소화 또는 최대화할지 나타내는 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-615">Gets or sets a value that indicates whether a window is restored, minimized, or maximized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5b585-616">창을 복원, 최소화 또는 최대화할지 결정하는 <see cref="T:System.Windows.WindowState" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-616">A <see cref="T:System.Windows.WindowState" /> that determines whether a window is restored, minimized, or maximized.</span>
          </span>
          <span data-ttu-id="5b585-617">기본값은 <see cref="F:System.Windows.WindowState.Normal" />(복원됨)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-617">The default is <see cref="F:System.Windows.WindowState.Normal" /> (restored).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-618">크기와 위치에 저장 된 창이 최소화 되거나 최대화 된, 전에 <xref:System.Windows.Window.RestoreBounds%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-618">Before a window is minimized or maximized, its size and location are stored in <xref:System.Windows.Window.RestoreBounds%2A>.</span></span> <span data-ttu-id="5b585-619">창을 복원 후, 해당 크기와 위치 값의 값으로 복원 됩니다 <xref:System.Windows.Window.RestoreBounds%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-619">When a window is subsequently restored, its size and location values are restored with the values from <xref:System.Windows.Window.RestoreBounds%2A>.</span></span>  
  
 <span data-ttu-id="5b585-620">경우는 <xref:System.Windows.Window.WindowState%2A> 속성이 변경 되 면 <xref:System.Windows.Window.StateChanged> 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-620">When the <xref:System.Windows.Window.WindowState%2A> property is changed, <xref:System.Windows.Window.StateChanged> is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-621">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-621">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowWindowState"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="5b585-622">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="5b585-622">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="5b585-623">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="5b585-623">Identifier field</span></span>|<xref:System.Windows.Window.WindowStateProperty>|  
|<span data-ttu-id="5b585-624">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="5b585-624">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.RestoreBounds" />
      </Docs>
    </Member>
    <Member MemberName="WindowStateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WindowStateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WindowStateProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.WindowStateProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WindowStateProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WindowStateProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-625">
            <see cref="P:System.Windows.Window.WindowState" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-625">Identifies the <see cref="P:System.Windows.Window.WindowState" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStyle">
      <MemberSignature Language="C#" Value="public System.Windows.WindowStyle WindowStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowStyle WindowStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowStyle As WindowStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowStyle WindowStyle { System::Windows::WindowStyle get(); void set(System::Windows::WindowStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-626">창의 테두리 스타일을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-626">Gets or sets a window's border style.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5b585-627">창의 테두리 스타일을 지정하는 <see cref="T:System.Windows.WindowStyle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-627">A <see cref="T:System.Windows.WindowStyle" /> that specifies a window's border style.</span>
          </span>
          <span data-ttu-id="5b585-628">기본값은 <see cref="F:System.Windows.WindowStyle.SingleBorderWindow" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-628">The default is <see cref="F:System.Windows.WindowStyle.SingleBorderWindow" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b585-629"><xref:System.Windows.Window.WindowStyle%2A> 중 하나일 수 있습니다는 <xref:System.Windows.WindowStyle> 열거 값을 포함 하 여 <xref:System.Windows.WindowStyle.None>, <xref:System.Windows.WindowStyle.ToolWindow>, <xref:System.Windows.WindowStyle.SingleBorderWindow> (기본값), 및 <xref:System.Windows.WindowStyle.ThreeDBorderWindow>합니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-629"><xref:System.Windows.Window.WindowStyle%2A> can be one of the <xref:System.Windows.WindowStyle> enumeration values, including <xref:System.Windows.WindowStyle.None>, <xref:System.Windows.WindowStyle.ToolWindow>, <xref:System.Windows.WindowStyle.SingleBorderWindow> (default), and <xref:System.Windows.WindowStyle.ThreeDBorderWindow>.</span></span>  
  
 <span data-ttu-id="5b585-630">다음 그림에 창 스타일은 [!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)] (투명 효과 사용 하도록 설정 된 Windows Vista Aero 테마):</span><span class="sxs-lookup"><span data-stu-id="5b585-630">The following figure shows the window styles on [!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)] (Windows Vista Aero theme, with transparent glass enabled):</span></span>  
  
 <span data-ttu-id="5b585-631">![창 스타일](~/add/media/windowoverviewfigure6.PNG "창 스타일")</span><span class="sxs-lookup"><span data-stu-id="5b585-631">![Window styles](~/add/media/windowoverviewfigure6.PNG "Window styles")</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5b585-632">설정 하거나 창을 브라우저에서 호스팅되는 경우이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5b585-632">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowWindowStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="5b585-633">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="5b585-633">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="5b585-634">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="5b585-634">Identifier field</span></span>|<xref:System.Windows.Window.WindowStyleProperty>|  
|<span data-ttu-id="5b585-635">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="5b585-635">Metadata properties set to `true`</span></span>|<span data-ttu-id="5b585-636">없음</span><span class="sxs-lookup"><span data-stu-id="5b585-636">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WindowStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WindowStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.WindowStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WindowStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WindowStyleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5b585-637">
            <see cref="P:System.Windows.Window.WindowStyle" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5b585-637">Identifies the <see cref="P:System.Windows.Window.WindowStyle" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>