<Type Name="UIElement" FullName="System.Windows.UIElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3108d80804c11f9fc73349a26d55755b88a3cf5f" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UIElement : System.Windows.Media.Visual, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi UIElement extends System.Windows.Media.Visual implements class System.Windows.IInputElement, class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.UIElement" />
  <TypeSignature Language="VB.NET" Value="Public Class UIElement&#xA;Inherits Visual&#xA;Implements IAnimatable, IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class UIElement : System::Windows::Media::Visual, System::Windows::IInputElement, System::Windows::Media::Animation::IAnimatable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Visual</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.UidProperty("Uid")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="67f8b-101">
        <see cref="T:System.Windows.UIElement" />는 WPF(Windows Presentation Foundation) 요소 및 기본 표시 특성을 기반으로 하여 구축되는 WPF 핵심 수준 구현에 대한 기본 클래스입니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="67f8b-101">
          <see cref="T:System.Windows.UIElement" /> is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-102"><xref:System.Windows.UIElement> 요소 레이아웃 특성 및 요소와 해당 자식 동작 요소를 렌더링 하는 레이아웃에 영향을 줄 수 있는 노출 클래스를 파생 하는 가상 메서드를 재정의할 수 있는 시작 지점을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-102"><xref:System.Windows.UIElement> provides a starting point for element layout characteristics, and also exposes virtual methods that derived classes can override, which can influence the layout rendering behavior of the element and its child elements.</span></span>  
  
 <span data-ttu-id="67f8b-103">대부분의 입력 및 포커스 동작 요소에 대 한 일반적에 정의 되어는 <xref:System.Windows.UIElement> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-103">Much of the input and focusing behavior for elements in general is also defined in the <xref:System.Windows.UIElement> class.</span></span> <span data-ttu-id="67f8b-104">여기에 키보드, 마우스 및 스타일러스 입력 및 관련된 상태 속성에 대 한 이벤트 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-104">This includes the events for keyboard, mouse and stylus input, and related status properties.</span></span> <span data-ttu-id="67f8b-105">이러한 이벤트 중 많은 라우트된 이벤트를 되며 모두는 버블링 라우팅을 사용할 입력 관련 이벤트 중 많은 이벤트의 터널링 버전 뿐만 아니라 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-105">Many of these events are routed events, and many of the input-related events have both a bubbling routing version as well as a tunneling version of the event.</span></span> <span data-ttu-id="67f8b-106">이러한 쌍으로 연결 된 이벤트는 일반적으로 가장 큰 컨트롤 작성자 관심 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-106">These paired events are typically the events of greatest interest to control authors.</span></span>  
  
 <span data-ttu-id="67f8b-107"><xref:System.Windows.UIElement> 또한 포함 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 관련 된는 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 이벤트 모델 요소 인스턴스에서 발생 한 이벤트를 라우팅할 지정 된 발생 시킬 수 있는 메서드를 포함 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-107"><xref:System.Windows.UIElement> also includes [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] that relate to the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] event model, including methods that can raise specified routed events that are sourced from an element instance.</span></span>  
  
 <span data-ttu-id="67f8b-108">아키텍처 측면에서 <xref:System.Windows.UIElement> 창 핸들 라고 간주 될 수 있습니다 [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] 프로그래밍, 또는 요소에 [!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)] 프로그래밍 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-108">In terms of architecture, <xref:System.Windows.UIElement> can be considered roughly equivalent to a window handle in [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] programming, or an Element in [!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)] programming.</span></span> <span data-ttu-id="67f8b-109"><xref:System.Windows.UIElement> WPF 핵심 수준 기본 요소가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-109"><xref:System.Windows.UIElement> is a base element at the WPF core level.</span></span>  
  
 <span data-ttu-id="67f8b-110">A <xref:System.Windows.UIElement> 에서만 정의 하는 다음과 같은 기능이 <xref:System.Windows.UIElement> 클래스:</span><span class="sxs-lookup"><span data-stu-id="67f8b-110">A <xref:System.Windows.UIElement> has the following capabilities that are specifically defined by the <xref:System.Windows.UIElement> class:</span></span>  
  
-   <span data-ttu-id="67f8b-111">자식 요소를 렌더링할 수 있습니다 (<xref:System.Windows.UIElement> 에서 파생 <xref:System.Windows.Media.Visual>, 높은 수준의 graphics 클래스)</span><span class="sxs-lookup"><span data-stu-id="67f8b-111">Can render as a child element (<xref:System.Windows.UIElement> derives from <xref:System.Windows.Media.Visual>, a high level graphics class)</span></span>  
  
-   <span data-ttu-id="67f8b-112">크기 조정 하 고 가능한 자식 요소의 위치를 지정 하는 데 사용 되는 논리를 포함 한 <xref:System.Windows.UIElement> (경우에이 레이아웃 시스템에 의해 해석)</span><span class="sxs-lookup"><span data-stu-id="67f8b-112">Contains logic that is used to size and position possible child elements of a <xref:System.Windows.UIElement> (when interpreted by a layout system)</span></span>  
  
-   <span data-ttu-id="67f8b-113">사용자 입력 (여기서 입력은 통해 전송 이벤트 라우팅 또는 명령 라우팅을 처리의 제어 포함)에 응답할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-113">Can respond to user input (including control of where input is getting sent to via their handling of event routing, or routing of commands)</span></span>  
  
-   <span data-ttu-id="67f8b-114">논리 요소 트리를 통해 경로 이동 하는 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-114">Can raise routed events that travel a route through the logical element tree</span></span>  
  
-   <span data-ttu-id="67f8b-115">애니메이션 시스템의 일부 측면을 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-115">Supports some aspects of the animation system</span></span>  
  
 <span data-ttu-id="67f8b-116"><xref:System.Windows.FrameworkElement> 기반으로 하는 WPF 프레임 워크 수준 구현 클래스 <xref:System.Windows.UIElement>, 추가 된 WPF 프레임 워크 수준의 특정 상호 작용 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-116"><xref:System.Windows.FrameworkElement> is the WPF framework-level implementation class that builds on <xref:System.Windows.UIElement>, and adds specific interactions with the WPF framework level.</span></span> <span data-ttu-id="67f8b-117"><xref:System.Windows.FrameworkElement> 추가 하 고 다음과 같은 기능을 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-117"><xref:System.Windows.FrameworkElement> adds and defines the following capabilities:</span></span>  
  
-   <span data-ttu-id="67f8b-118">추가 프레임 워크별 레이아웃 특성</span><span class="sxs-lookup"><span data-stu-id="67f8b-118">Additional framework-specific layout characteristics</span></span>  
  
-   <span data-ttu-id="67f8b-119">다양 한 메타 데이터 속성에 대 한 보고에 대 한 지원</span><span class="sxs-lookup"><span data-stu-id="67f8b-119">Support for richer metadata reporting on properties</span></span>  
  
-   <span data-ttu-id="67f8b-120">특정 클래스 관련 구현 입력 기본 클래스와 연결 된 속성 또는 연결 된 이벤트</span><span class="sxs-lookup"><span data-stu-id="67f8b-120">Class-specific implementation of certain input base classes and their attached properties or attached events</span></span>  
  
-   <span data-ttu-id="67f8b-121">스타일 지원</span><span class="sxs-lookup"><span data-stu-id="67f8b-121">Style support</span></span>  
  
-   <span data-ttu-id="67f8b-122">추가 애니메이션 지원</span><span class="sxs-lookup"><span data-stu-id="67f8b-122">Further animation support</span></span>  
  
 <span data-ttu-id="67f8b-123">클래스는 관련 된 다른 <xref:System.Windows.ContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-123">Another related class is <xref:System.Windows.ContentElement>.</span></span> <span data-ttu-id="67f8b-124"><xref:System.Windows.ContentElement> 클래스는 대부분의 동일한 멤버를 구현 <xref:System.Windows.UIElement>; 수행의 의도 된 전체 콘텐츠 모델에 저장 하려면이 두 클래스 간의 차이점에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-124">The <xref:System.Windows.ContentElement> class implements many of the same members as does <xref:System.Windows.UIElement>; the difference between these two classes has to do with their intended place in the overall content model.</span></span> <span data-ttu-id="67f8b-125">A <xref:System.Windows.UIElement> 파생된 클래스는 일반적으로 요소 태그의 자식 요소 수에 제한이 즉 상대적으로 고정 된 관계로 콘텐츠 모델을 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-125">A <xref:System.Windows.UIElement> derived class typically defines a relatively rigid content model, meaning that there are restrictions on what elements may be child elements in markup.</span></span> <span data-ttu-id="67f8b-126">덜 제한적인 자식 콘텐츠를 가져오는 기능이 있을 수 있습니다는 <xref:System.Windows.UIElement>지정 된 콘텐츠 속성에서 용량 한 곳에서 일반적으로 없지만 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-126">There might be capacity for taking less restrictive child content in a <xref:System.Windows.UIElement>, but that capacity is typically centralized in designated content properties.</span></span> <span data-ttu-id="67f8b-127">A <xref:System.Windows.ContentElement> 일반적으로 파생된 클래스는 형식 흐름 문서와 같은 시나리오를 지원 하기 위해 내용에 대 한 제한 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-127">A <xref:System.Windows.ContentElement> derived class is typically not as restrictive about content, to support scenarios such as flow-format documents.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="67f8b-128"><xref:System.Windows.UIElement.Visibility%2A> 상태는 해당 요소가 처리 하는 모든 입력에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-128"><xref:System.Windows.UIElement.Visibility%2A> state affects all input handling by that element.</span></span> <span data-ttu-id="67f8b-129">표시 되지 않는 요소 적중 횟수 테스트에 참여 하지 않는 및 마우스가 경계 요소 수 없는 경우에 입력된 이벤트를 수신 하지 않는 경우 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-129">Elements that are not visible do not participate in hit testing and do not receive input events, even if the mouse is over the bounds where the element would be if were visible.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UIElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-130">
            <see cref="T:System.Windows.UIElement" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-130">Initializes a new instance of the <see cref="T:System.Windows.UIElement" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-131">형식이 실제로 새 인스턴스를 만드는 <xref:System.Windows.UIElement> 가 응용 프로그램 코드에서 일반적으로 하기 때문에 <xref:System.Windows.UIElement> 기본 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-131">Creating a new instance that is actually of type <xref:System.Windows.UIElement> is uncommon in application code, because <xref:System.Windows.UIElement> is a base element.</span></span> <span data-ttu-id="67f8b-132">참조 [요소 개요 기본](~/docs/framework/wpf/advanced/base-elements-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-132">See [Base Elements Overview](~/docs/framework/wpf/advanced/base-elements-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-133">지정된 라우트된 이벤트에 대해 라우트된 이벤트 처리기를 추가하여 해당 처리기를 현재 요소의 처리기 컬렉션에 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-133">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">
          <span data-ttu-id="67f8b-134">처리할 라우트된 이벤트의 식별자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-134">An identifier for the routed event to be handled.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="67f8b-135">처리기 구현에 대한 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-135">A reference to the handler implementation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-136">지정된 라우트된 이벤트에 대해 라우트된 이벤트 처리기를 추가하여 해당 처리기를 현재 요소의 처리기 컬렉션에 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-136">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-137">예외가 발생 하지 않고 동일한 이벤트에 대 한 동일한 처리기를 여러 번 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-137">You can add the same handler for the same event multiple times without raising an exception.</span></span> <span data-ttu-id="67f8b-138">그러나 처리기는 실제로 이벤트를 처리 하는 여러 번 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-138">However, the handler is actually invoked multiple times when the event is handled.</span></span> <span data-ttu-id="67f8b-139">따라서이 동작은 처리기 구현에 대해 계산 해야 하는 의도 하지 않은 있습니다 어떻게 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-139">Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</span></span>  
  
 <span data-ttu-id="67f8b-140">"추가" 접근자에 대 한 구현을 제공 하기 위해 일반적으로이 방법을 사용 하면는 [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] 사용자 지정 된 라우트된 이벤트의 이벤트 액세스 패턴입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-140">You typically use this method to provide the implementation of the "add" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent">
          <span data-ttu-id="67f8b-141">처리할 라우트된 이벤트의 식별자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-141">An identifier for the routed event to be handled.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="67f8b-142">처리기 구현에 대한 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-142">A reference to the handler implementation.</span>
          </span>
        </param>
        <param name="handledEventsToo">
          <span data-ttu-id="67f8b-143">라우트된 이벤트가 해당 이벤트 데이터에서 처리된 것으로 표시된 경우에도 처리기를 호출하도록 등록하려면 <see langword="true" />이고, 라우트된 이벤트가 이미 처리된 것으로 표시된 경우 처리기를 호출하지 않는 기본 조건으로 등록하려면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-143">
              <see langword="true" /> to register the handler such that it is invoked even when  the routed event is marked handled in its event data; <see langword="false" /> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.</span>
          </span>
          <span data-ttu-id="67f8b-144">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-144">The default is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="67f8b-145">라우트된 이벤트를 다시 처리하도록 자주 요청하지 마세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-145">Do not routinely ask to rehandle a routed event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-146">지정된 라우트된 이벤트에 대해 라우트된 이벤트 처리기를 추가하여 해당 처리기를 현재 요소의 처리기 컬렉션에 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-146">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span>
          </span>
          <span data-ttu-id="67f8b-147">이벤트 경로를 따라 다른 요소에서 처리된 것으로 이미 표시된 라우트된 이벤트에 대해 제공된 처리기를 호출하기 위해 <paramref name="handledEventsToo" />를 <see langword="true" />로 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-147">Specify <paramref name="handledEventsToo" /> as <see langword="true" /> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-148">효율적으로 낮은 수준의 입력된 이벤트를 처리 하는 것은 복잡 한 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-148">Processing low-level input events in a practical way is a complex task.</span></span> <span data-ttu-id="67f8b-149">특정 이벤트를 처리 하는 것으로 표시 되 고 다른 보다 직관적인 이벤트에 의해 대체 됩니다 있는 동작을 구현 하는 많은 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-149">Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event.</span></span> <span data-ttu-id="67f8b-150">일반적으로 컨트롤은 처리 되므로 이렇게 하는 것에 대 한 디자인을 하는 경우 플랫폼 입력된 이벤트를 표시만 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-150">Generally, a control will only mark a platform input event as handled if there is some design intention for doing so.</span></span> <span data-ttu-id="67f8b-151">특정 시나리오에서 이러한 디자인 의도 하지 못할 입력된 이벤트의 특정 처리에 필요한 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-151">In certain scenarios, those design intentions might not be what your particular handling of the input event requires.</span></span> <span data-ttu-id="67f8b-152">등록 하 이러한 시나리오는 사용 하 여 처리기 `handledEventsToo` 으로 `true` 적합 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-152">It is for these scenarios that registering handlers with `handledEventsToo` as `true` is appropriate.</span></span> <span data-ttu-id="67f8b-153">하지만 수행 해야이 정기적으로.</span><span class="sxs-lookup"><span data-stu-id="67f8b-153">But you should not do this routinely.</span></span> <span data-ttu-id="67f8b-154">처리 하는 경우에 모든 이벤트에 대 한 응답으로 처리기를 호출 하지 처리 논리가 응용 프로그램 이벤트 복잡 하 게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-154">Invoking handlers in response to all events even if handled will complicate your own application event processing logic.</span></span> <span data-ttu-id="67f8b-155">처리기 논리는 많은 경우 성능이 저하를 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-155">You may see a decrease in performance if the handler logic is substantial.</span></span> <span data-ttu-id="67f8b-156">여기서 특정 컨트롤이 응용 프로그램 논리를 처리 하려면 이벤트를 처리 하는 개발 프로세스 중 이미 검색 한 경우 이미 처리 된 이벤트에 대 한 처리기를 연결의 사용을 예약 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-156">You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.</span></span>  
  
 <span data-ttu-id="67f8b-157">클래스를 특정 이벤트 제어 조합의 처리를 방지 하기 위한 또 다른 방법은 해당 이벤트의 대체 미리 보기를 사용 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-157">Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative.</span></span> <span data-ttu-id="67f8b-158">예를 들어 경우 <xref:System.Windows.UIElement.MouseLeftButtonDown> 처리 됨으로 표시 클래스 처리에 의해 수 있습니다에 대 한 처리기를 추가 하려면 <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-158">For example, if <xref:System.Windows.UIElement.MouseLeftButtonDown> is marked handled by class handling, you might be able to add handlers for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> instead.</span></span>  
  
 <span data-ttu-id="67f8b-159">예외가 발생 하지 않고 동일한 이벤트에 대 한 동일한 처리기를 여러 번 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-159">You can add the same handler for the same event multiple times without raising an exception.</span></span> <span data-ttu-id="67f8b-160">그러나 처리기는 실제로 이벤트를 처리 하는 여러 번 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-160">However, the handler is actually invoked multiple times when the event is handled.</span></span> <span data-ttu-id="67f8b-161">따라서이 동작은 처리기 구현에 대해 계산 해야 하는 의도 하지 않은 있습니다 어떻게 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-161">Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</span></span>  
  
 <span data-ttu-id="67f8b-162">"추가" 접근자에 대 한 구현을 제공 하기 위해 일반적으로이 방법을 사용 하면는 [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] 사용자 지정 된 라우트된 이벤트의 이벤트 액세스 패턴입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-162">You typically use this method to provide the implementation of the "add" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-163">다음 예제에서는 구현에서 호출 된 처리기는 <xref:System.Windows.FrameworkElement.Initialized> 페이지에서 사용 하 여 페이지에서 명명 된 요소 중 하나에 정의 된 처리기를 연결 하는 이벤트 `handledEventsToo` `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-163">The following example implements a handler invoked on the <xref:System.Windows.FrameworkElement.Initialized> event on a page that attaches a defined handler to one of the named elements on the page using `handledEventsToo` `true`.</span></span> <span data-ttu-id="67f8b-164">경로 따라 다른 요소는 경로에서 처리 요소에 도달 하기 전에 처리 되므로 공유 이벤트 데이터를 표시 하는 경우에이 처리기를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-164">This handler would be invoked even if another element along the route marked the shared event data as handled before reaching the handling element in the route.</span></span>  
  
 [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]
 [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route">
          <span data-ttu-id="67f8b-165">처리기가 추가되는 이벤트 경로입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-165">The event route that handlers are added to.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="67f8b-166">처리기를 추가하는 데 사용되는 이벤트 데이터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-166">The event data that is used to add the handlers.</span>
          </span>
          <span data-ttu-id="67f8b-167">이 메서드는 이벤트 데이터의 <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> 속성을 사용하여 처리기를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-167">This method uses the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of the event data to create the handlers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-168">현재 <see cref="T:System.Windows.EventRoute" /> 이벤트 처리기 컬렉션에 대해 지정된 <see cref="T:System.Windows.UIElement" />에 처리기를 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-168">Adds handlers to the specified <see cref="T:System.Windows.EventRoute" /> for the current <see cref="T:System.Windows.UIElement" /> event handler collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-169">이 메서드는 콘텐츠 호스트 요소에서 사용할 수 있습니다 (구현 하는 <xref:System.Windows.IContentHost> 또는 하지 않는) 자식 요소에 대 한 처리기를 추가 하는 <xref:System.Windows.EventRoute>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-169">This method can be used by content host elements (either those that implement <xref:System.Windows.IContentHost> or those that don't) to add handlers for child elements to the <xref:System.Windows.EventRoute>.</span></span> <span data-ttu-id="67f8b-170">일반적으로이 필요 하지 않습니다 <xref:System.Windows.UIElement>하므로 처리기에 완료 된 논리적 트리에서 모든 요소에 대 한 자동으로 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-170">Ordinarily, this is not required for <xref:System.Windows.UIElement>, because handlers are automatically added for all elements found in a completed logical tree.</span></span> <span data-ttu-id="67f8b-171">그러나 경우에 따라 여기서 <xref:System.Windows.ContentElement> 및 <xref:System.Windows.UIElement> 혼합 되어 있는 템플릿 경로에 추가할 필요가 서식 파일에서 생성 된 중간 요소 트리에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-171">However, in some cases where <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> are mixed in templated trees, intervening elements that came from the template need to be added to a route.</span></span> <span data-ttu-id="67f8b-172">둘 다 <xref:System.Windows.ContentElement> 및 <xref:System.Windows.UIElement> 이 메서드의 버전을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-172">Both <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> support a version of this method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-173">이 요소를 끌어서 놓기 작업의 대상으로 사용할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-173">Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.</span>
          </span>
          <span data-ttu-id="67f8b-174">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-174">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-175">이 요소를 끌어서 놓기 작업의 대상으로 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-175">
              <see langword="true" /> if this element can be used as the target of a drag-and-drop operation; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="67f8b-176">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-176">The default value is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-177">끌어서 놓기 작업이 기본적으로 활성화 되지 않으며 설정 하 여 의도적으로 사용할 수 있어야 합니다 <xref:System.Windows.UIElement.AllowDrop%2A> 를 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-177">Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <xref:System.Windows.UIElement.AllowDrop%2A> to `true`.</span></span> <span data-ttu-id="67f8b-178">이 기본 설정을 제외 끌어서 놓기 동작 구현 특정은 전적으로 및에서 정의 되지 않은 <xref:System.Windows.UIElement> 또는 기타 요소 기본 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-178">Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <xref:System.Windows.UIElement> or any other base element class.</span></span> <span data-ttu-id="67f8b-179">예를 들어 특정 컨트롤을 <xref:System.Windows.Controls.RichTextBox>, 기본 동작이 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-179">Certain controls, for example, <xref:System.Windows.Controls.RichTextBox>, do have a default behavior.</span></span> <span data-ttu-id="67f8b-180">끌어서 놓기에 대 한 자세한 내용은 참조 하십시오. [놓기](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-180">For more information on drag and drop, see [Drag and Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).</span></span>  
  
 <span data-ttu-id="67f8b-181"><xref:System.Windows.FrameworkElement> 구현에서이 종속성 속성에 대 한 메타 데이터를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-181"><xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property in its implementation.</span></span> <span data-ttu-id="67f8b-182">특히, <xref:System.Windows.FrameworkElement> 속성 값 상속을 허용 하려면이 속성을 지정 (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> 은 `true` 메타 데이터에).</span><span class="sxs-lookup"><span data-stu-id="67f8b-182">Specifically, <xref:System.Windows.FrameworkElement> designates this property to allow property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata).</span></span> <span data-ttu-id="67f8b-183">이 컨텍스트에서 속성 값을 상속 하는 경우에 대 한 다른 값이 없는 자식 요소가 <xref:System.Windows.UIElement.AllowDrop%2A> 로컬 값 또는 스타일을이 값이 할당 된 (다시, 스타일, 기본적으로 가장 가까운 부모 요소의 값을 통해 할당 값 또는 로컬 값) 부모 요소의 값은 속성 시스템에서 모든 자식 요소에 할당 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-183">Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.UIElement.AllowDrop%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from the parent element will be assigned to all previously unassigned child elements by the property system.</span></span> <span data-ttu-id="67f8b-184">실제로 즉, 루트 요소에서 놓기 작업을 허용할지 여부를 지정할 수로 할당 값은 특히 하지 않은 모든 자식 요소로 전파 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-184">In practice this means that you can specify whether to allow drop operations at the root element, and that value will propagate to all child elements that have not specifically assigned it as `false`.</span></span>  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-185">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-185">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-186">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-186">Identifier field</span></span>|<xref:System.Windows.UIElement.AllowDropProperty>|  
|<span data-ttu-id="67f8b-187">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-187">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-188">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-188">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-189">다음 예제에서는 태그는 <xref:System.Windows.UIElement.AllowDrop%2A> 속성 `true` 에 특성을 사용 하는 <xref:System.Windows.Controls.TextBox>뿐만 아니라 수 있는 속성을 집계에서 하는 관련 된 다른 설정 <xref:System.Windows.Controls.TextBox> 여러 줄 텍스트 데이터 개체의 대상이 될 때 드래그 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-189">The following markup example sets the <xref:System.Windows.UIElement.AllowDrop%2A> property `true` using an attribute on a <xref:System.Windows.Controls.TextBox>, as well as setting some other related properties that in aggregate enable that <xref:System.Windows.Controls.TextBox> to be the target of a multiline text data object when it is dragged in.</span></span> <span data-ttu-id="67f8b-190">전체 샘플을 참조 하십시오. [삭제 파일 샘플 로드](http://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-190">For the complete sample, see [Load a Dropped File Sample](http://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7).</span></span>  
  
 [!code-xaml[DragDrop_DropOpenTextFile#UIElementAllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/DragDrop_DropOpenTextFile/CS/window1.xaml#uielementallowdrop)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-191">
            <see cref="P:System.Windows.UIElement.AllowDrop" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-191">Identifies the <see cref="P:System.Windows.UIElement.AllowDrop" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-192">이 요소의 지정된 종속성 속성에 애니메이션을 적용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-192">Applies an animation to a specified dependency property on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-193">이 메서드는 봉인되어 있으며 재정의할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-193">This method is sealed and cannot be overridden.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="67f8b-194">애니메이션 효과를 줄 속성의 식별자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-194">The identifier for the property to animate.</span>
          </span>
        </param>
        <param name="clock">
          <span data-ttu-id="67f8b-195">애니메이션을 제어하고 선언하는 애니메이션 클록입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-195">The animation clock that controls and declares the animation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-196">이 요소의 지정된 종속성 속성에 애니메이션을 적용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-196">Applies an animation to a specified dependency property on this element.</span>
          </span>
          <span data-ttu-id="67f8b-197">모든 기존 애니메이션이 중지되고 새 애니메이션으로 대체됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-197">Any existing animations are stopped and replaced with the new animation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-198">애니메이션에서 속성을 제거 하려면 해당 속성에 대 한 식별자를 지정 `dp` 지정 `clock` 으로 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-198">To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`.</span></span> <span data-ttu-id="67f8b-199">애니메이션 제거한 속성 기준 값으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-199">This removes the animation and the animated property is set to its base value.</span></span> <span data-ttu-id="67f8b-200">그러나 원래 연결된 애니메이션 클록 중지 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-200">However, the originally associated animation clock is not stopped.</span></span> <span data-ttu-id="67f8b-201">모든 애니메이션 클록 해당에 할당 된 계속 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-201">Any other animations assigned to that clock will continue to run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-202">다음 예제에서는 <xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle` 에 호출 하 여 적용할 특정 타이밍 애니메이션이 <xref:System.Windows.UIElement.ApplyAnimationClock%2A> 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-202">In the following example, a <xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle` has a particular timing animation applied to it by calling <xref:System.Windows.UIElement.ApplyAnimationClock%2A> .</span></span>  
  
 [!code-csharp[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/ClockControllerSpeedRatioExample.cs#uielementapplyanimationclock)]
 [!code-vb[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/clockcontrollerspeedratioexample.vb#uielementapplyanimationclock)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="67f8b-203">애니메이션 효과를 주는 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-203">The property to animate.</span>
          </span>
        </param>
        <param name="clock">
          <span data-ttu-id="67f8b-204">애니메이션을 제어하고 선언하는 애니메이션 클록입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-204">The animation clock that controls and declares the animation.</span>
          </span>
        </param>
        <param name="handoffBehavior">
          <span data-ttu-id="67f8b-205">열거형 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-205">A value of the enumeration.</span>
          </span>
          <span data-ttu-id="67f8b-206">기본값은 <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />이며 이는 모든 기존 애니메이션을 중지하고 새 애니메이션으로 대체합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-206">The default is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, which will stop any existing animation and replace with the new one.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-207">속성에 이미 실행되는 애니메이션이 있는 경우 어떤 일이 발생할지를 지정하는 기능과 함께 이 요소의 지정된 종속성 속성에 애니메이션을 적용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-207">Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-208">애니메이션에서 속성을 제거 하려면 해당 속성에 대 한 식별자를 지정 `dp` 지정 `clock` 으로 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-208">To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`.</span></span> <span data-ttu-id="67f8b-209">애니메이션 제거한 속성 기준 값으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-209">This removes the animation and the animated property is set to its base value.</span></span> <span data-ttu-id="67f8b-210">그러나 원래 연결된 애니메이션 클록 중지 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-210">However, the originally associated animation clock is not stopped.</span></span> <span data-ttu-id="67f8b-211">모든 애니메이션 클록 해당에 할당 된 계속 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-211">Any other animations assigned to that clock will continue to run.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-212">하나 이상의 터치가 이 요소에 캡처되는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-212">Gets a value that indicates whether at least one touch is captured to this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-213">하나 이상의 터치가 이 요소에 캡처되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-213">
              <see langword="true" /> if at least one touch is captured to this element; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-214">
            <see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-214">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-215">하나 이상의 터치가 이 요소나 시각적 트리의 임의 자식 요소에 캡처되는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-215">Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-216">하나 이상의 터치가 이 요소나 시각적 트리의 임의 자식 요소에 캡처되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-216">
              <see langword="true" /> if at least one touch is captured to this element or any child elements in its visual tree; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-217">
            <see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-217">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-218">이 요소 위에서 하나 이상의 터치를 눌렀는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-218">Gets a value that indicates whether at least one touch is pressed over this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-219">이 요소 위에서 하나 이상의 터치를 눌렀으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-219">
              <see langword="true" /> if at least one touch is pressed over this element; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-220">
            <see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-220">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-221">이 요소나 시각적 트리의 임의 자식 요소 위에서 하나 이상의 터치를 눌렀는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-221">Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-222">이 요소나 시각적 트리의 임의 자식 요소 위에서 하나 이상의 터치를 눌렀으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-222">
              <see langword="true" /> if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-223">
            <see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-223">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arrange">
      <MemberSignature Language="C#" Value="public void Arrange (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Arrange(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Arrange (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Arrange(System::Windows::Rect finalRect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">
          <span data-ttu-id="67f8b-224">부모가 자식 요소에 대해 계산하는 최종 크기로, <see cref="T:System.Windows.Rect" /> 인스턴스로 제공됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-224">The final size that the parent computes for the child element, provided as a <see cref="T:System.Windows.Rect" /> instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-225">자식 요소를 배치하고 <see cref="T:System.Windows.UIElement" />에 대한 크기를 결정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-225">Positions child elements and determines a size for a <see cref="T:System.Windows.UIElement" />.</span>
          </span>
          <span data-ttu-id="67f8b-226">부모 요소는 재귀적 레이아웃 업데이트를 구성하기 위해 해당 <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> 구현(또는 WPF 프레임워크 수준)에서 이 메서드를 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-226">Parent elements call this method from their <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> implementation (or a WPF framework-level equivalent) to form a recursive layout update.</span>
          </span>
          <span data-ttu-id="67f8b-227">이 메서드는 레이아웃 업데이트의 두 번째 단계를 구성합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-227">This method constitutes the second pass of a layout update.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-228">WPF 프레임 워크 수준 요소를 파생 시키는 경우에 대 한 동작에 대 한 <xref:System.Windows.UIElement.Arrange%2A> 하지 않아야 합니다 (및 숨기는 경우가 아니면 수 없습니다) 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-228">For WPF framework-level element deriving scenarios, behavior for <xref:System.Windows.UIElement.Arrange%2A> should not (and cannot, unless you shadow) be changed.</span></span> <span data-ttu-id="67f8b-229">대신,를 재정의 해야 하는 <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> 클래스에서 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-229">Instead, you should override the <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementation in your class.</span></span> <span data-ttu-id="67f8b-230">프로그램 <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> 구현에서 내부적으로 호출 됩니다 <xref:System.Windows.UIElement.Arrange%2A> 기본 WPF 프레임 워크 수준 레이아웃 작업의 일환으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-230">Your <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementation is called internally by <xref:System.Windows.UIElement.Arrange%2A> as part of default WPF framework-level layout operations.</span></span> <span data-ttu-id="67f8b-231">프로그램 <xref:System.Windows.UIElement.ArrangeCore%2A> 구현도 호출 해야 <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> 자식 요소가 있는 경우 각 자식 요소에 대해 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-231">Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation should also call <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> on each child element, if it has child elements.</span></span>  
  
 <span data-ttu-id="67f8b-232">WPF 핵심 수준 요소를 파생 시키는 경우에 대 한 동작에 대 한 <xref:System.Windows.UIElement.Arrange%2A> 하지 않아야 합니다 (및 숨기는 경우가 아니면 수 없습니다) 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-232">For WPF core-level element deriving scenarios, the behavior for <xref:System.Windows.UIElement.Arrange%2A> should not (and cannot, unless you shadow) be changed.</span></span> <span data-ttu-id="67f8b-233">대신, 재정의 해야 하는 <xref:System.Windows.UIElement.ArrangeCore%2A> 클래스에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-233">Instead, you should override <xref:System.Windows.UIElement.ArrangeCore%2A> in your class.</span></span> <span data-ttu-id="67f8b-234">프로그램 <xref:System.Windows.UIElement.ArrangeCore%2A> 구현에서 내부적으로 호출 됩니다 <xref:System.Windows.UIElement.Arrange%2A> 기본 WPF 프레임 워크 수준 레이아웃 작업의 일환으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-234">Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation is called internally by <xref:System.Windows.UIElement.Arrange%2A> as part of default WPF framework-level layout operations.</span></span> <span data-ttu-id="67f8b-235">그러나 WPF 프레임 워크 수준 레이아웃 및 종종 되지 않는 경우 WPF 핵심 수준에서에 있는 요소를 파생 하는 경우 해당 레이아웃 시스템을 사용 하 여 가정이 <xref:System.Windows.UIElement> 기본 요소 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-235">However, this assumes you are using WPF framework-level layout and its layout system, which is often not the case if you are specifically deriving elements at the WPF core-level from the <xref:System.Windows.UIElement> base element class.</span></span> <span data-ttu-id="67f8b-236">프로그램 <xref:System.Windows.UIElement.ArrangeCore%2A> 구현도 호출 해야 <xref:System.Windows.UIElement.Arrange%2A> 자식 요소가 있는 경우 각 자식 요소에 대해 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-236">Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation should also call <xref:System.Windows.UIElement.Arrange%2A> on each child element, if it has child elements.</span></span> <span data-ttu-id="67f8b-237">WPF 핵심 수준 시나리오는 사용 하지 않는 의미 하는 참고는 <xref:System.Windows.FrameworkElement> 파생 클래스를 <xref:System.Windows.FrameworkElement> 봉인 <xref:System.Windows.FrameworkElement.ArrangeCore%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-237">Note that the WPF core-level scenario implies that you are not using a <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.</span></span>  
  
 <span data-ttu-id="67f8b-238">WPF 프레임 워크 수준 레이아웃 위치 계산 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 이루어져는 <xref:System.Windows.UIElement.Measure%2A> 호출 및 <xref:System.Windows.UIElement.Arrange%2A> 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-238">Computation of WPF framework-level layout positioning in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] consists of a <xref:System.Windows.UIElement.Measure%2A> call and an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span> <span data-ttu-id="67f8b-239">중에서 <xref:System.Windows.UIElement.Measure%2A> 호출 레이아웃 시스템에서 요소의 크기 요구 사항을 사용 하 여 제공 된 확인 <xref:System.Windows.Size> (`availableSize`) 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-239">During the <xref:System.Windows.UIElement.Measure%2A> call, the layout system determines an element's size requirements using a provided <xref:System.Windows.Size> (`availableSize`) argument.</span></span> <span data-ttu-id="67f8b-240">동안는 <xref:System.Windows.UIElement.Arrange%2A> 호출, 레이아웃 시스템 크기를 종료 하 고 경계 상자는 요소의 위치를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-240">During the <xref:System.Windows.UIElement.Arrange%2A> call, the layout system finalizes the size and position of an element's bounding box.</span></span>  <span data-ttu-id="67f8b-241">자세한 내용은 참조 [레이아웃](~/docs/framework/wpf/advanced/layout.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-241">For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).</span></span>  
  
 <span data-ttu-id="67f8b-242">`availableSize` 0 ~ 무한대에서에서 숫자를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-242">`availableSize` can be any number from zero to infinity.</span></span> <span data-ttu-id="67f8b-243">요소 레이아웃을 지정할 त स ग <xref:System.Windows.Size> 통해 필요로 하는 `availableSize` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-243">Elements to be laid out return the minimum <xref:System.Windows.Size> they require through the `availableSize` parameter.</span></span>  
  
 <span data-ttu-id="67f8b-244">레이아웃이 처음 인스턴스화 항상 받습니다는 <xref:System.Windows.UIElement.Measure%2A> 하기 전에 호출 <xref:System.Windows.UIElement.Arrange%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-244">When a layout is first instantiated, it always receives a <xref:System.Windows.UIElement.Measure%2A> call before <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="67f8b-245">그러나 첫 번째 레이아웃 단계 후를 받을 수는 <xref:System.Windows.UIElement.Arrange%2A> 하지 않고 호출는 <xref:System.Windows.UIElement.Measure%2A>;이 경우에 영향을 주는 속성에 발생할 수 <xref:System.Windows.UIElement.Arrange%2A> (예: 맞춤), 변경 또는 부모를 받을 때는 <xref:System.Windows.UIElement.Arrange%2A> 는 없이<xref:System.Windows.UIElement.Measure%2A>.</span><span class="sxs-lookup"><span data-stu-id="67f8b-245">However, after the first layout pass, it may receive an <xref:System.Windows.UIElement.Arrange%2A> call without a <xref:System.Windows.UIElement.Measure%2A>; this can happen when a property that affects only <xref:System.Windows.UIElement.Arrange%2A> is changed (such as alignment), or when the parent receives an <xref:System.Windows.UIElement.Arrange%2A> without a <xref:System.Windows.UIElement.Measure%2A>.</span></span> <span data-ttu-id="67f8b-246">A <xref:System.Windows.UIElement.Measure%2A> 호출 자동으로 무효화 됩니다는 <xref:System.Windows.UIElement.Arrange%2A> 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-246">A <xref:System.Windows.UIElement.Measure%2A> call will automatically invalidate an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span>  
  
 <span data-ttu-id="67f8b-247">레이아웃 업데이트 비동기적으로 (한 번에 레이아웃 시스템에 의해 결정) 일반적으로 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-247">Layout updates generally occur asynchronously (at a time determined by the layout system).</span></span> <span data-ttu-id="67f8b-248">요소 속성 요소 크기 조정에 영향을 주는 변경 내용은 즉시 반영 하지는 않습니다 (예: <xref:System.Windows.FrameworkElement.Width%2A>).</span><span class="sxs-lookup"><span data-stu-id="67f8b-248">An element might not immediately reflect changes to properties that affect element sizing (such as <xref:System.Windows.FrameworkElement.Width%2A>).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67f8b-249">레이아웃 업데이트를 사용 하 여 사용할 수는 <xref:System.Windows.UIElement.UpdateLayout%2A> 메서드도 있습니다; 그러나이 함수를 호출 하므로 권장 하지 않습니다은 일반적으로 필요 하 고 성능이 저하 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-249">Layout updates can be forced by using the <xref:System.Windows.UIElement.UpdateLayout%2A> method; however, calling this function is not recommended, as it is usually unnecessary and can cause poor performance.</span></span> <span data-ttu-id="67f8b-250">대부분의 경우에서를 호출 하는 <xref:System.Windows.UIElement.UpdateLayout%2A> 적절 한 있을 수 있으며,이 레이아웃 시스템 업데이트 처리 아마 이미 있을 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-250">In many situations where calling <xref:System.Windows.UIElement.UpdateLayout%2A> might be appropriate, the layout system will probably already be processing updates.</span></span> <span data-ttu-id="67f8b-251">이 레이아웃 시스템에 필요한 모든 업데이트 패키지의 일부로 최적화할 수 있는 방식으로 레이아웃 변경 내용을 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-251">The layout system can process layout changes in a manner that can optimize all necessary updates as part of a package.</span></span>  
  
 <span data-ttu-id="67f8b-252">이 레이아웃 시스템은 두 개의 별도 큐에 대 한 잘못 된 레이아웃의 유지 <xref:System.Windows.UIElement.Measure%2A> 되 고 다른 하나 <xref:System.Windows.UIElement.Arrange%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-252">The layout system keeps two separate queues of invalid layouts, one for <xref:System.Windows.UIElement.Measure%2A> and one for <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="67f8b-253">레이아웃 큐는 시각적 트리에 있는 요소의 순서에 따라 정렬 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-253">The layout queue is sorted based upon the order of elements in the visual tree.</span></span> <span data-ttu-id="67f8b-254">요소 트리에서 상위 부모 항목에 반복 해 서 변경 내용이 레이아웃이 중복을 방지 하기 위해 큐, 위쪽에서는입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-254">Elements higher in the tree are at the top of the queue, in order to avoid redundant layouts caused by repeated changes in parents.</span></span> <span data-ttu-id="67f8b-255">중복 된 항목은 큐에서 자동으로 제거 및 요소가 이미 잘못 된 경우 자동으로 큐에서 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-255">Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already valid.</span></span>  
  
 <span data-ttu-id="67f8b-256">레이아웃을 업데이트할 때는 <xref:System.Windows.UIElement.Measure%2A> 큐를 비울 먼저 옵니다는 <xref:System.Windows.UIElement.Arrange%2A> 큐입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-256">When updating layout, the <xref:System.Windows.UIElement.Measure%2A> queue is emptied first, followed by the <xref:System.Windows.UIElement.Arrange%2A> queue.</span></span> <span data-ttu-id="67f8b-257">요소는 <xref:System.Windows.UIElement.Arrange%2A> 큐에 요소가 없을 경우 정렬 되지 됩니다는 <xref:System.Windows.UIElement.Measure%2A> 큐입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-257">An element in the <xref:System.Windows.UIElement.Arrange%2A> queue will never be arranged if there is an element in the <xref:System.Windows.UIElement.Measure%2A> queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected virtual void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">
          <span data-ttu-id="67f8b-258">요소가 자신과 자식을 정렬하는 데 사용해야 하는 부모 내의 마지막 영역입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-258">The final area within the parent that element should use to arrange itself and its child elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-259">WPF 핵심 수준 정렬 레이아웃 정의에 대한 서식 파일을 정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-259">Defines the template for WPF core-level arrange layout definition.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="67f8b-260">이 메서드를 재정의 하는 적절 한 경우에 WPF 핵심 수준에서 파생 하 고 WPF 프레임 워크 수준 레이아웃 시스템을 사용 하지 않는 및 <xref:System.Windows.FrameworkElement> 파생 클래스를 <xref:System.Windows.FrameworkElement> 봉인 <xref:System.Windows.FrameworkElement.ArrangeCore%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-260">Overriding this method is only appropriate if you are deriving at the WPF core-level, and you are not using the WPF framework-level layout system and <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.</span></span> <span data-ttu-id="67f8b-261">레이아웃의 클래스 관련 재정의를 적절 한 방법을 정렬 동작을 WPF 프레임 워크 수준 레이아웃 시스템을 사용 하는 경우 <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-261">If you are using the WPF framework-level layout system, the appropriate method to override for class-specific layout arrange behavior is <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-262"><xref:System.Windows.UIElement.ArrangeCore%2A> 구현에는 크기를 반환 하는 기본 구현을 호출 해야 다음 호출는 <xref:System.Windows.UIElement.Arrange%2A> 각 시각적 자식 요소의 이러한에서 반환 된 크기를 조정 하 고 <xref:System.Windows.UIElement.Arrange%2A> 기본 구현의 크기를 사용 하 여 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-262"><xref:System.Windows.UIElement.ArrangeCore%2A> implementations should call the base implementation to return a size, then call the <xref:System.Windows.UIElement.Arrange%2A> method of each visible child element, and reconcile the sizes returned by these <xref:System.Windows.UIElement.Arrange%2A> calls with the size of the base implementation.</span></span> <span data-ttu-id="67f8b-263">조정 부분에 대 한 논리는 <xref:System.Windows.UIElement.ArrangeCore%2A> 구현 프로그램 요소의 레이아웃 특성에 따라 달라질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-263">The logic for the reconciliation aspect of a <xref:System.Windows.UIElement.ArrangeCore%2A> implementation might vary, depending on the layout characteristics of your element.</span></span> <span data-ttu-id="67f8b-264">다음 예제에서는 서식 파일에서 `VisualChildren` 요소는 해당 콘텐츠를 열거할 수 있도록 정의할 수 있습니다 하는 가상 속성 <xref:System.Windows.UIElement> 콘텐츠 컬렉션을 정의 하지 않습니다 WPF 프레임 워크 수준 아키텍처를이 수준에서는 특정 컨트롤 또는 컨트롤의 기본 클래스 등의 파생 된 요소에 콘텐츠 동작을 지연 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-264">In the following example template, `VisualChildren` is a hypothetical property that your element might define to help enumerate its content; <xref:System.Windows.UIElement> does not define content collections at this level, the WPF framework-level architecture defers content behavior to derived elements such as specific controls or control base classes.</span></span>  
  
 [!code-csharp[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementarrangeoverride)]
 [!code-vb[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementarrangeoverride)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="67f8b-265">이 재정의 해야 WPF 핵심 수준에 있는 요소를 개발 하는 경우 메서드는 고유한 WPF 핵심 수준 요소를 정렬 레이아웃 동작 또는 요소가 자식 요소에 대 한 결정 사항을 적절 한 레이아웃을 확인 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-265">If you are developing elements at the WPF core level,you should override this method to give your WPF core-level element a unique arrange layout behavior, or to make proper layout decisions about the child elements of your elements.</span>
            </span>
            <span data-ttu-id="67f8b-266">재정의 같은 자식 요소 정의 된 패턴에서 인식 되지 않는 경우에 필요할 수 있습니다는 <see cref="T:System.Windows.Controls.ItemCollection" />합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-266">An override might be necessary if those child elements are not recognizable from a defined pattern such as an <see cref="T:System.Windows.Controls.ItemCollection" />.</span>
            </span>
            <span data-ttu-id="67f8b-267">부모 요소에는 클래스 관련 호출 해야 <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> 각 자식 요소에 대해 그렇지 않으면 해당 자식 요소는 렌더링 되지 않습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-267">A parent element must call the class-specific <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> on each child element, otherwise those child elements are not rendered.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-268">이 요소에서 지정된 애니메이션 속성에 대한 애니메이션을 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-268">Starts an animation for a specified animated property on this element.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="67f8b-269">종속성 속성 식별자로 지정된, 애니메이션을 지정할 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-269">The property to animate, which is specified as a dependency property identifier.</span>
          </span>
        </param>
        <param name="animation">
          <span data-ttu-id="67f8b-270">시작할 애니메이션의 Timeline입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-270">The timeline of the animation to start.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-271">이 요소에서 지정된 애니메이션 속성에 대한 애니메이션을 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-271">Starts an animation for a specified animated property on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-272">속성에 애니메이션을 여부를 확인 하는 경우 note 애니메이션 시작 되 고 간주할 애니메이션이 적용 되지 않은 시작 지점 벗어난 첫 번째 프레임이 렌더링 되 면에 애니메이션 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-272">When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</span></span>  
  
 <span data-ttu-id="67f8b-273">경우는 <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> 에 대 한 `animation` 은 `null`, 그런 다음 현재 애니메이션이 모두 제거 되 고 속성의 현재 값이 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-273">If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.</span></span>  
  
 <span data-ttu-id="67f8b-274">경우 전체 `animation` 값은 `null`, 모든 애니메이션이 속성에서 제거 되 고 속성 값 기준 값으로 돌아갑니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-274">If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value.</span></span> <span data-ttu-id="67f8b-275">그러나 원래 연결된 애니메이션 타임 라인 중지 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-275">However, the originally associated animation timeline is not stopped.</span></span> <span data-ttu-id="67f8b-276">해당 일정에 할당 된 다른 애니메이션 계속 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-276">Any other animations assigned to that timeline will continue to run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-277">다음 예제는 애니메이션을 만드는 것을 할당 하 고 다음 호출 <xref:System.Windows.UIElement.BeginAnimation%2A> 시작 되려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-277">The following example creates an animation, assigns it, and then calls <xref:System.Windows.UIElement.BeginAnimation%2A> to start it.</span></span>  
  
 [!code-csharp[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#beginanimation)]
 [!code-vb[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#beginanimation)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="67f8b-278">종속성 속성 식별자로 지정된, 애니메이션을 지정할 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-278">The property to animate, which is specified as the dependency property identifier.</span>
          </span>
        </param>
        <param name="animation">
          <span data-ttu-id="67f8b-279">적용할 애니메이션의 Timeline입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-279">The timeline of the animation to be applied.</span>
          </span>
        </param>
        <param name="handoffBehavior">
          <span data-ttu-id="67f8b-280">새 애니메이션이 이미 속성 값에 영향을 주고 있는 현재(실행 중인) 애니메이션과 상호 작용하는 방법을 지정하는 열거형 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-280">A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-281">속성에 이미 실행 중인 애니메이션이 있는 경우 수행할 동작을 지정하는 옵션을 사용하여 이 요소의 지정된 애니메이션 속성에 대해 특정 애니메이션을 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-281">Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-282">속성에 애니메이션을 여부를 확인 하는 경우 note 애니메이션 시작 되 고 간주할 애니메이션이 적용 되지 않은 시작 지점 벗어난 첫 번째 프레임이 렌더링 되 면에 애니메이션 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-282">When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</span></span>  
  
 <span data-ttu-id="67f8b-283">경우는 <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> 에 대 한 `animation` 은 `null`, 그런 다음 현재 애니메이션이 모두 제거 되 고 속성의 현재 값이 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-283">If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.</span></span>  
  
 <span data-ttu-id="67f8b-284">경우 전체 `animation` 값은 `null`, 모든 애니메이션이 속성에서 제거 되 고 속성 값 기준 값으로 돌아갑니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-284">If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value.</span></span> <span data-ttu-id="67f8b-285">그러나 원래 연결된 애니메이션 타임 라인 중지 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-285">However, the originally associated animation timeline is not stopped.</span></span> <span data-ttu-id="67f8b-286">해당 일정에 할당 된 다른 애니메이션 계속 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-286">Any other animations assigned to that timeline will continue to run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-287">가 리소스 및 호출에서 기존 애니메이션을 가져오는 처리기를 구현 하는 다음 예제에서는 <xref:System.Windows.UIElement.BeginAnimation%2A> 지정된 전달 동작이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-287">The following example implements a handler that obtains an existing animation from a resource and then calls <xref:System.Windows.UIElement.BeginAnimation%2A> with a specified handoff behavior.</span></span>  
  
 [!code-csharp[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/csharp/VS_Snippets_Wpf/BrushesIntroduction/CSharp/SampleViewer.xaml.cs#beginanimationhandoff)]
 [!code-vb[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BrushesIntroduction/visualbasic/sampleviewer.xaml.vb#beginanimationhandoff)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffect BitmapEffect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffect" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffect As BitmapEffect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffect ^ BitmapEffect { System::Windows::Media::Effects::BitmapEffect ^ get(); void set(System::Windows::Media::Effects::BitmapEffect ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-288">이 요소의 렌더링된 콘텐츠에 직접 적용되는 비트맵 효과를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-288">Gets or sets a bitmap effect that applies directly to the rendered content for this element.</span>
          </span>
          <span data-ttu-id="67f8b-289">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-289">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-290">적용할 비트맵 효과입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-290">The bitmap effect to apply.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-291"><xref:System.Windows.Media.Effects.BitmapEffect> 이 추상 형식이 면 따라서는 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 사용의 구현된 된 파생된 클래스가 필요 <xref:System.Windows.Media.Effects.BitmapEffect>와 같은 <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-291"><xref:System.Windows.Media.Effects.BitmapEffect> is an abstract type, therefore the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage requires an implemented derived class of <xref:System.Windows.Media.Effects.BitmapEffect>, such as <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>.</span></span> <span data-ttu-id="67f8b-292">컬렉션 형식이 파생 된 구현 클래스 수 있도록 여러 개 지정할 순차적 <xref:System.Windows.Media.Effects.BitmapEffect>, 중첩된 된 태그 구문을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-292">Note that one implemented derived class is a collection type that allows you to specify more than one sequential <xref:System.Windows.Media.Effects.BitmapEffect>, using a nested tag syntax.</span></span>  
  
 <span data-ttu-id="67f8b-293">기존 파생 클래스의 <xref:System.Windows.Media.Effects.BitmapEffect> 형식 변환기를 지원 하므로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 이 속성에 대해 사용 하는 구문은 일반적으로 속성 요소 구문.</span><span class="sxs-lookup"><span data-stu-id="67f8b-293">No existing derived class of <xref:System.Windows.Media.Effects.BitmapEffect> supports a type converter, so the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax that you use for this property is generally property element syntax.</span></span>  
  
<a name="dependencyPropertyInfo_BitmapEffect"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-294">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-294">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-295">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-295">Identifier field</span></span>|<xref:System.Windows.UIElement.BitmapEffectProperty>|  
|<span data-ttu-id="67f8b-296">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-296">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-297">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-297">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-298">다음 예제에서는 비트맵 효과 사용 하 여 <xref:System.Windows.Media.Effects.BlurBitmapEffect>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-298">The following example sets a bitmap effect, using <xref:System.Windows.Media.Effects.BlurBitmapEffect>.</span></span>  
  
 [!code-csharp[EffectsGallery_snip#CodeBehindBlurCodeBehindExampleInline](~/samples/snippets/csharp/VS_Snippets_Wpf/EffectsGallery_snip/CSharp/blurcodebehindexample.xaml.cs#codebehindblurcodebehindexampleinline)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInput">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffectInput" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffectInput As BitmapEffectInput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffectInput ^ BitmapEffectInput { System::Windows::Media::Effects::BitmapEffectInput ^ get(); void set(System::Windows::Media::Effects::BitmapEffectInput ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffectInput</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-299">이 요소의 렌더링된 콘텐츠에 직접 적용되는 비트맵 효과의 입력 소스를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-299">Gets or sets an input source for the bitmap effect that applies directly to the rendered content for this element.</span>
          </span>
          <span data-ttu-id="67f8b-300">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-300">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-301">비트맵 효과의 원본입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-301">The source for bitmap effects.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_BitmapEffectInput"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-302">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-302">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-303">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-303">Identifier field</span></span>|<xref:System.Windows.UIElement.BitmapEffectInputProperty>|  
|<span data-ttu-id="67f8b-304">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-304">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-305">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-305">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInputProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectInputProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectInputProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectInputProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectInputProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectInputProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-306">
            <see cref="P:System.Windows.UIElement.BitmapEffectInput" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-306">Identifies the <see cref="P:System.Windows.UIElement.BitmapEffectInput" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-307">
            <see cref="P:System.Windows.UIElement.BitmapEffect" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-307">Identifies the <see cref="P:System.Windows.UIElement.BitmapEffect" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheMode">
      <MemberSignature Language="C#" Value="public System.Windows.Media.CacheMode CacheMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.CacheMode CacheMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CacheMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CacheMode As CacheMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::CacheMode ^ CacheMode { System::Windows::Media::CacheMode ^ get(); void set(System::Windows::Media::CacheMode ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.CacheMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-308">
            <see cref="T:System.Windows.UIElement" />의 캐시된 표현을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-308">Gets or sets a cached representation of the <see cref="T:System.Windows.UIElement" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-309">
            <see cref="T:System.Windows.Media.CacheMode" />의 캐시된 표현을 보유하는 <see cref="T:System.Windows.UIElement" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-309">A <see cref="T:System.Windows.Media.CacheMode" /> that holds a cached representation of the <see cref="T:System.Windows.UIElement" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-310">설정의 <xref:System.Windows.UIElement.CacheMode%2A> 속성은 시간이 오래 걸리고 렌더링 하는 콘텐츠에 대 한 성능 향상을 위해 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-310">Set the <xref:System.Windows.UIElement.CacheMode%2A> property when you need to increase performance for content that is time consuming to render.</span></span> <span data-ttu-id="67f8b-311">자세한 내용은 <xref:System.Windows.Media.BitmapCache>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="67f8b-311">For more information, see <xref:System.Windows.Media.BitmapCache>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.CacheMode" />
        <altmember cref="T:System.Windows.Media.BitmapCache" />
        <altmember cref="T:System.Windows.Media.BitmapCacheBrush" />
      </Docs>
    </Member>
    <Member MemberName="CacheModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CacheModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CacheModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.CacheModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CacheModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CacheModeProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-312">
            <see cref="P:System.Windows.UIElement.CacheMode" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-312">Identifies the <see cref="P:System.Windows.UIElement.CacheMode" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-313">이 요소가 마우스를 캡처하게 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-313">Attempts to force capture of the mouse to this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67f8b-314">마우스가 캡처되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-314">
              <see langword="true" /> if the mouse is successfully captured; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-315">캡처할 수 요소를 사용할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-315">To be captured, an element must be enabled.</span></span> <span data-ttu-id="67f8b-316">확인 여부 <xref:System.Windows.UIElement.IsEnabled%2A> 은 `true` 호출 하기 전에 <xref:System.Windows.UIElement.CaptureMouse%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-316">Check whether <xref:System.Windows.UIElement.IsEnabled%2A> is `true` before you call <xref:System.Windows.UIElement.CaptureMouse%2A>.</span></span>  
  
 <span data-ttu-id="67f8b-317">호출 하는 경우 <xref:System.Windows.UIElement.CaptureMouse%2A> 반환 `true`, 다음 <xref:System.Windows.UIElement.IsMouseCaptured%2A> 이기도 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-317">If calling <xref:System.Windows.UIElement.CaptureMouse%2A> returns `true`, then <xref:System.Windows.UIElement.IsMouseCaptured%2A> is also `true`.</span></span>  
  
 <span data-ttu-id="67f8b-318">호출 하는 경우 <xref:System.Windows.UIElement.CaptureMouse%2A> 반환 `true`, 하면 <xref:System.Windows.UIElement.GotMouseCapture> 및 <xref:System.Windows.UIElement.IsMouseCapturedChanged> 이벤트가 발생와 <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> 데이터 요소와 보고 하는 이벤트에 여기서는 <xref:System.Windows.UIElement.CaptureMouse%2A> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-318">If calling <xref:System.Windows.UIElement.CaptureMouse%2A> returns `true`, then the <xref:System.Windows.UIElement.GotMouseCapture> and <xref:System.Windows.UIElement.IsMouseCapturedChanged> events are raised, with <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> in the event data reported as the element where the <xref:System.Windows.UIElement.CaptureMouse%2A> method is called.</span></span> <span data-ttu-id="67f8b-319">캡처를 강제 적용 하는 경우에 기존 캡처 충돌할 수 있습니다-특히 마우스 끌어서 놓기와 관련 된 캡처를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-319">If you force capture, you might interfere with existing captures—especially with captures that relate to drag-and-drop with the mouse.</span></span>  
  
 <span data-ttu-id="67f8b-320">모든 요소에서 마우스 캡처를 지우려면 호출 <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> 와 `element` 매개 변수로 제공 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-320">To clear mouse capture from all elements, call <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> with the `element` parameter provided as `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-321">다음 예제에서는 한 쌍의 마우스를 캡처 (및 캡처 해제) 여부를 지정 하는 마우스 및 키 입력된 조합을 대 한 처리기를 구현 하 고 3D 모델 보기에 대 한 특수 한 마우스 모드를 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-321">The following example implements a pair of handlers for mouse and key input combination that capture (and uncapture) the mouse and enable a special mouse mode for viewing a 3D model.</span></span>  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-322">이 요소가 스타일러스를 캡처하게 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-322">Attempts to force capture of the stylus to this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67f8b-323">스타일러스가 캡처되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-323">
              <see langword="true" /> if the stylus was successfully captured; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-324">기본 구현은 항상 기본 기본 스타일러스 장치에 따라 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-324">The default implementation based on the underlying default stylus device always returns `true`.</span></span> <span data-ttu-id="67f8b-325">그러나, 입력된 시스템에 대 한 장치 구현을 제공 하는 입력된 장치를 확장 하는 경우 다른 결과 반환할 수 있는 대체 스타일러스 장치 구현으로 시스템을 만들 수는 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-325">However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.</span></span>  
  
 <span data-ttu-id="67f8b-326">스타일러스를 캡처한 요소 스타일러스가 해당 경계 밖에 있는 경우에 스타일러스 입력을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-326">When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds.</span></span> <span data-ttu-id="67f8b-327">스타일러스가 일반적으로 끌어서 놓기 작업 중에 캡처됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-327">The stylus is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="67f8b-328">이 메서드를 호출는 내부 정적 <xref:System.Windows.Input.Stylus> 메서드 <xref:System.Windows.Input.Stylus.Capture%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-328">Calling this method calls an underlying static <xref:System.Windows.Input.Stylus> method <xref:System.Windows.Input.Stylus.Capture%2A>.</span></span> <span data-ttu-id="67f8b-329">기본 캡처 동작이 활성 스타일러스 장치 구현에 의해 구현 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-329">The actual capture behavior is implemented by the active stylus device implementation.</span></span>  
  
 <span data-ttu-id="67f8b-330">캡처할 수 요소를 사용할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-330">To be captured, an element must be enabled.</span></span> <span data-ttu-id="67f8b-331">확인 여부 <xref:System.Windows.UIElement.IsEnabled%2A> 은 `true` 호출 하기 전에 반환 <xref:System.Windows.UIElement.CaptureStylus%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-331">Check whether <xref:System.Windows.UIElement.IsEnabled%2A> is `true` return before you call <xref:System.Windows.UIElement.CaptureStylus%2A>.</span></span>  
  
 <span data-ttu-id="67f8b-332">호출 하는 경우 <xref:System.Windows.UIElement.CaptureStylus%2A> 반환 `true`, <xref:System.Windows.UIElement.IsStylusCaptured%2A> 이기도 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-332">If calling <xref:System.Windows.UIElement.CaptureStylus%2A> returns `true`, <xref:System.Windows.UIElement.IsStylusCaptured%2A> is also `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">
          <span data-ttu-id="67f8b-333">캡처할 장치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-333">The device to capture.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-334">이 요소에 터치를 캡처하도록 강제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-334">Attempts to force capture of a touch to this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67f8b-335">지정된 터치가 이 요소에 캡처되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-335">
              <see langword="true" /> if the specified touch is captured to this element; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-336"><xref:System.Windows.UIElement.CaptureTouch%2A> 반환 `false` 경우는 <xref:System.Windows.Input.TouchDevice> 현재 다른 요소에 캡처됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-336"><xref:System.Windows.UIElement.CaptureTouch%2A> will return `false` if the <xref:System.Windows.Input.TouchDevice> is currently captured to another element.</span></span>  
  
 <span data-ttu-id="67f8b-337">경우 <xref:System.Windows.UIElement.CaptureTouch%2A> 반환 `true`, 그런 다음 <xref:System.Windows.UIElement.GotTouchCapture> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-337">If <xref:System.Windows.UIElement.CaptureTouch%2A> returns `true`, then the <xref:System.Windows.UIElement.GotTouchCapture> event is raised.</span></span>  
  
 <span data-ttu-id="67f8b-338">이 요소에서 단일 터치의 캡처를 해제 하려면 사용는 <xref:System.Windows.UIElement.ReleaseTouchCapture%2A> 메서드 터치 장치 릴리스를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-338">To release capture of a single touch from this element, use the <xref:System.Windows.UIElement.ReleaseTouchCapture%2A> method and specify the touch device to release.</span></span> <span data-ttu-id="67f8b-339">이 요소에서 모든 터치를 해제 하기 위해 사용 하 여는 <xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="67f8b-339">To release all touches from this element, use the <xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67f8b-340">
            <paramref name="touchDevice" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-340">
              <paramref name="touchDevice" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Geometry Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Geometry Clip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Geometry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Geometry ^ Clip { System::Windows::Media::Geometry ^ get(); void set(System::Windows::Media::Geometry ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-341">요소 내용의 윤곽선을 정의하는 데 사용할 기하 도형을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-341">Gets or sets the geometry used to define the outline of the contents of an element.</span>
          </span>
          <span data-ttu-id="67f8b-342">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-342">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-343">클리핑 영역 크기 조정에 사용할 기하 도형입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-343">The geometry to be used for clipping area sizing.</span>
          </span>
          <span data-ttu-id="67f8b-344">기본값은 null <see cref="T:System.Windows.Media.Geometry" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-344">The default is a null <see cref="T:System.Windows.Media.Geometry" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-345">기 하 도형 외부 요소는 렌더링 된 레이아웃에 시각적으로 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-345">Elements outside the geometry will be visually clipped in the rendered layout.</span></span> <span data-ttu-id="67f8b-346">기 하 도형을 사각형 될 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-346">The geometry does not have to be rectangular.</span></span>  
  
<a name="dependencyPropertyInfo_Clip"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-347">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-347">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-348">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-348">Identifier field</span></span>|<xref:System.Windows.UIElement.ClipProperty>|  
|<span data-ttu-id="67f8b-349">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-349">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-350">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-350">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-351">프레임 워크 요소를 정의 하는 방법을 보여 주는이 예제 <xref:System.Windows.UIElement.Clip%2A> 영역입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-351">This example shows how to define a framework element's <xref:System.Windows.UIElement.Clip%2A> region.</span></span> <span data-ttu-id="67f8b-352">클립을 정의 하려면 사용을 <xref:System.Windows.Media.Geometry> (예를 들어는 <xref:System.Windows.Media.EllipseGeometry> 요소를 설정 하려면 <xref:System.Windows.UIElement.Clip%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-352">To define a clip, use a <xref:System.Windows.Media.Geometry> (for example, an <xref:System.Windows.Media.EllipseGeometry> to set the element's <xref:System.Windows.UIElement.Clip%2A> property.</span></span> <span data-ttu-id="67f8b-353">기 하 도형 영역 내에 있는 영역에만 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-353">Only the area that is within the region of the geometry will be visible.</span></span>  
  
 <span data-ttu-id="67f8b-354">다음 예제와 <xref:System.Windows.Controls.Image> 정의 된 클립 영역이 없는 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-354">The following example shows an <xref:System.Windows.Controls.Image> element without a defined clip region.</span></span> <span data-ttu-id="67f8b-355">클립 영역이 없는 정의 되었기 때문에 전체 이미지가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-355">Because no clip region is defined, the entire image is displayed.</span></span>  
  
 [!code-xaml[ClipPathExample#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#2)]  
  
 <span data-ttu-id="67f8b-356">![클립 영역을 적용 하기 전에 개체](~/add/media/mil-task-clip-region-noclip.png "클립 영역을 적용 하기 전의 개체")</span><span class="sxs-lookup"><span data-stu-id="67f8b-356">![An object before applying a clip region](~/add/media/mil-task-clip-region-noclip.png "An object before applying a clip region")</span></span>  
<span data-ttu-id="67f8b-357">클립 영역이 없는 이미지</span><span class="sxs-lookup"><span data-stu-id="67f8b-357">Image with No Clip Region</span></span>  
  
 <span data-ttu-id="67f8b-358">다음 예제에서는 정의 된 클립 영역이 있다는 점을 제외 하 고 동일한 이미지 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-358">In the next example, an identical Image is created, except that it has a defined clip region.</span></span> <span data-ttu-id="67f8b-359">영역 내에 있는 이미지의 일부만 <xref:System.Windows.Media.EllipseGeometry> 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-359">Only the part of the image that is within the area the <xref:System.Windows.Media.EllipseGeometry> will be displayed.</span></span>  
  
 [!code-xaml[ClipPathExample#4](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#4)]  
  
 <span data-ttu-id="67f8b-360">![클리핑된 개체](~/add/media/mil-task-clip-region-ellispe.PNG "클리핑된 개체")</span><span class="sxs-lookup"><span data-stu-id="67f8b-360">![A clipped object](~/add/media/mil-task-clip-region-ellispe.PNG "A clipped object")</span></span>  
<span data-ttu-id="67f8b-361">타원형 클립 영역을 사용 하 여 이미지</span><span class="sxs-lookup"><span data-stu-id="67f8b-361">Image with an Elliptical Clip Region</span></span>  
  
 <span data-ttu-id="67f8b-362">다음 예제에서는 어떻게 애니메이션 프레임 워크 요소의 <xref:System.Windows.UIElement.Clip%2A> 영역입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-362">The following example shows how animate a framework element's <xref:System.Windows.UIElement.Clip%2A> region.</span></span> <span data-ttu-id="67f8b-363">이 예제는 <xref:System.Windows.Media.EllipseGeometry> 에 대 한 타원형 클립 영역을 정의 하는 데 사용 되는 <xref:System.Windows.Controls.Image> 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-363">In this example, an <xref:System.Windows.Media.EllipseGeometry> is used to define an elliptical clip region for an <xref:System.Windows.Controls.Image> element.</span></span> <span data-ttu-id="67f8b-364">A <xref:System.Windows.Media.Animation.PointAnimation> 타원 기 애니메이션 효과 적용 <xref:System.Windows.Media.EllipseGeometry.Center%2A> 속성 (0, 0)를 (200, 150).</span><span class="sxs-lookup"><span data-stu-id="67f8b-364">A <xref:System.Windows.Media.Animation.PointAnimation> animates the ellipse geometry's <xref:System.Windows.Media.EllipseGeometry.Center%2A> property from (0, 0) to (200, 150).</span></span> <span data-ttu-id="67f8b-365">애니메이션은 이미지가 로드 되 고 무한 반복 후 재생 하기 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-365">The animation starts playing after the image is loaded and repeats indefinitely.</span></span>  
  
 [!code-xaml[ClipPathExample#5](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#5)]  
  
 <span data-ttu-id="67f8b-366">전체 샘플에 대 한 참조는 [클립 영역 샘플](http://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-366">For the full sample, see the [Clip Region Sample](http://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="ClipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-367">
            <see cref="P:System.Windows.UIElement.Clip" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-367">Identifies the <see cref="P:System.Windows.UIElement.Clip" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipToBounds">
      <MemberSignature Language="C#" Value="public bool ClipToBounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClipToBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.ClipToBounds" />
      <MemberSignature Language="VB.NET" Value="Public Property ClipToBounds As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ClipToBounds { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-368">요소를 포함하는 컨테이너의 크기에 맞게 이 요소의 콘텐츠 또는 이 요소의 자식 요소의 콘텐츠를 잘라 낼지 여부를 나타내는 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-368">Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element) to fit into the size of the containing element.</span>
          </span>
          <span data-ttu-id="67f8b-369">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-369">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-370">콘텐츠를 잘라내야 하면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-370">
              <see langword="true" /> if the content should be clipped; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="67f8b-371">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-371">The default value is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-372">자식 요소에 대해 <xref:System.Windows.UIElement.ClipToBounds%2A> 부모 요소의 너비와 높이가에 의해 결정 되는 여부에 따라 레이아웃 동작에 영향을 다른 <xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A> 또는 <xref:System.Windows.FrameworkElement.MaxHeight%2A>  /  <xref:System.Windows.FrameworkElement.MaxWidth%2A>.</span><span class="sxs-lookup"><span data-stu-id="67f8b-372">For child elements, <xref:System.Windows.UIElement.ClipToBounds%2A> has different effects on layout behaviors depending on whether the height and width of the parent element are being determined by <xref:System.Windows.FrameworkElement.Height%2A> / <xref:System.Windows.FrameworkElement.Width%2A> or <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A>.</span></span> <span data-ttu-id="67f8b-373"><xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A> 부모 요소의 항상 적용의 값에 관계 없이 <xref:System.Windows.UIElement.ClipToBounds%2A> 및 효과적인 클리핑이이 최대값을 기반으로 내용이 클리핑됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-373"><xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A> of the parent element are always respected regardless of the value of <xref:System.Windows.UIElement.ClipToBounds%2A> and the effective clipping will always clip the content based on these maximums.</span></span> <span data-ttu-id="67f8b-374">부모의 <xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A> 설정을 콘텐츠가 클리핑 때 <xref:System.Windows.UIElement.ClipToBounds%2A> 은 `false`, 콘텐츠 if 클리핑하지 않지만 <xref:System.Windows.UIElement.ClipToBounds%2A> 은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-374">The parent's <xref:System.Windows.FrameworkElement.Height%2A> / <xref:System.Windows.FrameworkElement.Width%2A> settings will not clip the content when <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`, but will clip the content if <xref:System.Windows.UIElement.ClipToBounds%2A> is `true`.</span></span>  
  
 <span data-ttu-id="67f8b-375">가 기본값으로 `false` 은 일반적인 동작에서 구현 되는 <xref:System.Windows.UIElement> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-375">Note that defaulting to `false` is the general behavior as implemented in the <xref:System.Windows.UIElement> class.</span></span> <span data-ttu-id="67f8b-376">파생 되는 지정된 된 요소 수 <xref:System.Windows.UIElement> 해당 인스턴스를 기본값으로 설정에서이 속성에 대 한 종속성 속성 메타 데이터를 무시 하려면 `true` 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-376">It is possible for any given element that derives from <xref:System.Windows.UIElement> to override the dependency property metadata for this property in that instance to default to `true` instead.</span></span> <span data-ttu-id="67f8b-377">기존 파생된 클래스가 몇 재정의이 메타 데이터 및/또는 종속성 속성의 기본값을 조정 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-377">Several existing derived classes override this metadata and/or adjust the dependency property default value.</span></span>  
  
 <span data-ttu-id="67f8b-378"><xref:System.Windows.Controls.InkCanvas><xref:System.Windows.Controls.InkPresenter>, 및 <xref:System.Windows.Controls.Primitives.Popup> 되도록 기본값을 재정의할 각 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-378"><xref:System.Windows.Controls.InkCanvas>, <xref:System.Windows.Controls.InkPresenter>, and <xref:System.Windows.Controls.Primitives.Popup> each override the default value to be `true`.</span></span>  
  
 <span data-ttu-id="67f8b-379"><xref:System.Windows.FrameworkElement> 이 종속성 속성에 대 한 메타 데이터를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-379"><xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property.</span></span> <span data-ttu-id="67f8b-380">특히, <xref:System.Windows.FrameworkElement> 속성 값 상속을 허용 하려면이 속성을 지정 (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> 은 `true` 메타 데이터에).</span><span class="sxs-lookup"><span data-stu-id="67f8b-380">Specifically, <xref:System.Windows.FrameworkElement> designates this property to allow property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata).</span></span> <span data-ttu-id="67f8b-381">이 컨텍스트에서 속성 값을 상속 하는 경우에 대 한 다른 값이 없는 자식 요소가 <xref:System.Windows.UIElement.ClipToBounds%2A> 로컬 값 또는 스타일을이 값이 할당 된 (다시, 스타일, 기본적으로 가장 가까운 부모 요소의 값을 통해 할당 값 또는 로컬 값), 부모 요소의 값은 속성 시스템에서 모든 자식 요소에 할당 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-381">Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.UIElement.ClipToBounds%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a locally value), then the value from the parent element will be assigned to all unassigned child elements by the property system.</span></span> <span data-ttu-id="67f8b-382">실제로 즉, 루트 요소에서 범위에 맞춰 잘라 내기를 허용할지 여부를 지정할 수로 할당 값은 특히 하지 않은 모든 자식 요소로 전파 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-382">In practice this means that you can specify whether to allow clip to bounds at the root element, and that value will propagate to all child elements that have not specifically assigned it as `false`.</span></span>  
  
<a name="dependencyPropertyInfo_ClipToBounds"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-383">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-383">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-384">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-384">Identifier field</span></span>|<xref:System.Windows.UIElement.ClipToBoundsProperty>|  
|<span data-ttu-id="67f8b-385">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-385">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-386">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-386">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Clip" />
      </Docs>
    </Member>
    <Member MemberName="ClipToBoundsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipToBoundsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipToBoundsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipToBoundsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipToBoundsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipToBoundsProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-387">
            <see cref="P:System.Windows.UIElement.ClipToBounds" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-387">Identifies the <see cref="P:System.Windows.UIElement.ClipToBounds" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-388">이 요소와 연결된 <see cref="T:System.Windows.Input.CommandBinding" /> 개체의 컬렉션을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-388">Gets a collection of <see cref="T:System.Windows.Input.CommandBinding" /> objects associated with this element.</span>
          </span>
          <span data-ttu-id="67f8b-389">
            <see cref="T:System.Windows.Input.CommandBinding" />을 사용하면 이 요소에 대해 명령을 처리할 수 있으며 명령, 해당 이벤트 및 이 요소에 의해 연결되는 처리기 간의 연결을 선언할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-389">A <see cref="T:System.Windows.Input.CommandBinding" /> enables command handling for this element, and declares the linkage between a command, its events, and the handlers attached by this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-390">모든 <see cref="T:System.Windows.Input.CommandBinding" /> 개체의 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-390">The collection of all <see cref="T:System.Windows.Input.CommandBinding" /> objects.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-391">또 다른 일반적인 방법은 채우는 데는 <xref:System.Windows.UIElement.CommandBindings%2A> 를 사용 하는 컬렉션 <xref:System.Windows.Input.CommandManager> 메서드 프로그래밍 방식으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-391">Another typical way to populate the <xref:System.Windows.UIElement.CommandBindings%2A> collection is to use <xref:System.Windows.Input.CommandManager> methods programmatically.</span></span>  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="67f8b-392">XAML 속성 요소 사용</span><span class="sxs-lookup"><span data-stu-id="67f8b-392">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  
  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a><span data-ttu-id="67f8b-393">XAML 값</span><span class="sxs-lookup"><span data-stu-id="67f8b-393">XAML Values</span></span>  
 <span data-ttu-id="67f8b-394">*oneOrMoreCommandBindings*</span><span class="sxs-lookup"><span data-stu-id="67f8b-394">*oneOrMoreCommandBindings*</span></span>  
 <span data-ttu-id="67f8b-395">하나 이상의 <xref:System.Windows.Input.CommandBinding> 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-395">One or more <xref:System.Windows.Input.CommandBinding> elements.</span></span> <span data-ttu-id="67f8b-396">이러한 각 있어야는 <xref:System.Windows.Input.CommandBinding.Command%2A> 특성이 알려진된 명령으로 설정 하 고 특성에 대 한 설정에서 <xref:System.Windows.Input.CommandBinding.CanExecute> 및 <xref:System.Windows.Input.CommandBinding.Executed> 처리기를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-396">Each of these should have a <xref:System.Windows.Input.CommandBinding.Command%2A> attribute set to a known command, and attributes set for the <xref:System.Windows.Input.CommandBinding.CanExecute> and <xref:System.Windows.Input.CommandBinding.Executed> handler implementations.</span></span> <span data-ttu-id="67f8b-397">자세한 내용은 <xref:System.Windows.Input.CommandBinding>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="67f8b-397">For more information see <xref:System.Windows.Input.CommandBinding>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-398">다음 예제에서는 추가 <xref:System.Windows.Input.CommandBinding> 태그를 사용 하 여 창에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-398">The following example adds a <xref:System.Windows.Input.CommandBinding> to a window using markup.</span></span> <span data-ttu-id="67f8b-399">에 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], <xref:System.Windows.Input.CommandBindingCollection> 요소로; 태그에 선언 되지 않은 컬렉션 개체 속성에 사용 되는 형식에 의해 유추 됩니다 및 하나 이상의 속성 요소를 채울 <xref:System.Windows.Input.CommandBinding> 요소:</span><span class="sxs-lookup"><span data-stu-id="67f8b-399">Note that in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], the <xref:System.Windows.Input.CommandBindingCollection> is not declared in the markup as an element; the collection object is inferred by the type that the property takes, and you populate the property element with one or more <xref:System.Windows.Input.CommandBinding> elements:</span></span>  
  
 [!code-xaml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 <span data-ttu-id="67f8b-400">에 대 한 자세한 내용은 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 컬렉션에 대 한 구문을 참조 [XAML 구문에서 세부](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-400">For more information about the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax for collections, see [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).</span></span>  
  
 <span data-ttu-id="67f8b-401">다음 예제에서는 코드에서 기본적으로 동일한 작업을 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-401">The following example does essentially the same thing in code:</span></span>  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="DesiredSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size DesiredSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size DesiredSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.DesiredSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DesiredSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size DesiredSize { System::Windows::Size get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-402">레이아웃 프로세스의 측정 단계 중 이 요소가 계산한 크기를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-402">Gets the size that this element computed during the measure pass of the layout process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-403">정렬 단계에 필요한 크기인 계산된 크기입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-403">The computed size, which becomes the desired size for the arrange pass.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-404">이 속성에서 반환 되는 값만 됩니다 올바른 측정 하는 경우의 값은 <xref:System.Windows.UIElement.IsMeasureValid%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-404">The value returned by this property will only be a valid measurement if the value of the <xref:System.Windows.UIElement.IsMeasureValid%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="67f8b-405"><xref:System.Windows.UIElement.DesiredSize%2A> 요소 중 하나는 측정 레이아웃 동작을 구현 하는 경우와 같은 재정의 하기 때문에 일반적으로 확인란이 <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>, <xref:System.Windows.FrameworkElement.MeasureOverride%2A>, 또는 <xref:System.Windows.UIElement.OnRender%2A> (에 <xref:System.Windows.UIElement.OnRender%2A> 대/소문자를 확인할 수 있습니다 <xref:System.Windows.UIElement.RenderSize%2A> 대신에 따라 달라 집니다 하지만 프로그램 구현)입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-405"><xref:System.Windows.UIElement.DesiredSize%2A> is typically checked as one of the measurement factors when you implement layout behavior overrides such as <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>, <xref:System.Windows.FrameworkElement.MeasureOverride%2A>, or <xref:System.Windows.UIElement.OnRender%2A> (in the <xref:System.Windows.UIElement.OnRender%2A> case, you might check <xref:System.Windows.UIElement.RenderSize%2A> instead, but this depends on your implementation).</span></span> <span data-ttu-id="67f8b-406">시나리오에 따라 <xref:System.Windows.UIElement.DesiredSize%2A> 적용 구현 논리, 제약 조건에서에 <xref:System.Windows.UIElement.DesiredSize%2A> 적용 될 수 있습니다 및 이러한 제약 조건은 다른 특성을 부모 요소 또는 자식 요소가 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-406">Depending on the scenario, <xref:System.Windows.UIElement.DesiredSize%2A> might be fully respected by your implementation logic, constraints on <xref:System.Windows.UIElement.DesiredSize%2A> might be applied, and such constraints might also change other characteristics of either the parent element or child element.</span></span> <span data-ttu-id="67f8b-407">예를 들어 스크롤 가능한 영역을 지원 합니다 (그러나 하지 않도록 선택 하면 이미 스크롤 가능한 영역을 사용 하도록 설정 하는 WPF 프레임 워크 수준 컨트롤에서 파생) 하는 컨트롤에 사용 가능한 크기를 비교할 수 <xref:System.Windows.UIElement.DesiredSize%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-407">For example, a control that supports scrollable regions (but chooses not to derive from the WPF framework-level controls that already enable scrollable regions) could compare available size to <xref:System.Windows.UIElement.DesiredSize%2A>.</span></span> <span data-ttu-id="67f8b-408">컨트롤에 스크롤 막대를 사용 하도록 설정 하는 내부 상태를 설정한 다음 수는 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 해당 컨트롤에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-408">The control could then set an internal state that enabled scrollbars in the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] for that control.</span></span> <span data-ttu-id="67f8b-409">또는, <xref:System.Windows.UIElement.DesiredSize%2A> 수를 잠재적으로 특정 시나리오에서 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-409">Or, <xref:System.Windows.UIElement.DesiredSize%2A> could potentially also be ignored in certain scenarios.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-410">다음 예제와 <xref:System.Windows.UIElement.DesiredSize%2A> 의 일부로 <xref:System.Windows.FrameworkElement.MeasureOverride%2A> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-410">The following example shows <xref:System.Windows.UIElement.DesiredSize%2A> as part of a <xref:System.Windows.FrameworkElement.MeasureOverride%2A> implementation.</span></span> <span data-ttu-id="67f8b-411">알림 방법을 <xref:System.Windows.UIElement.Measure%2A> 을 만들기 전에 바로 호출 <xref:System.Windows.UIElement.DesiredSize%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-411">Notice how <xref:System.Windows.UIElement.Measure%2A> is called immediately prior to obtaining <xref:System.Windows.UIElement.DesiredSize%2A>.</span></span> <span data-ttu-id="67f8b-412">이 기능은 <xref:System.Windows.UIElement.DesiredSize%2A> 적절 한 값을 보유 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-412">This assures that <xref:System.Windows.UIElement.DesiredSize%2A> holds a legitimate value.</span></span>  
  
 [!code-cpp[PlotPanel#2](~/samples/snippets/cpp/VS_Snippets_Wpf/PlotPanel/CPP/PlotPanel.cpp#2)]
 [!code-csharp[PlotPanel#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PlotPanel/CSharp/PlotPanel.cs#2)]
 [!code-vb[PlotPanel#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PlotPanel/VisualBasic/PlotPanel.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-413">입력 시스템에서 이 요소를 끌기 대상으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-413">Occurs when the input system reports an underlying drag event with this element as the drag target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-414">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-414">This event creates an alias for the <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-415">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.DragEnter> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-415">Event handlers that are attached to the <xref:System.Windows.UIElement.DragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-416">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-416">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-417">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-417">Identifier field</span></span>|<xref:System.Windows.UIElement.DragEnterEvent>|  
|<span data-ttu-id="67f8b-418">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-418">Routing strategy</span></span>|<span data-ttu-id="67f8b-419">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-419">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-420">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-420">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="67f8b-421">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewDragEnter>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-421">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewDragEnter>.</span></span>  
  
-   <span data-ttu-id="67f8b-422">재정의 <xref:System.Windows.UIElement.OnDragEnter%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-422">Override <xref:System.Windows.UIElement.OnDragEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-423">
            <see cref="E:System.Windows.UIElement.DragEnter" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-423">Identifies the <see cref="E:System.Windows.UIElement.DragEnter" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-424">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-424">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-425">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-425">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-426">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-426">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-427">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-427">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-428">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-428">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-429">입력 시스템에서 이 요소를 끌기 원본으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-429">Occurs when the input system reports an underlying drag event with this element as the drag origin.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-430">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-430">This event creates an alias for the <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-431">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.DragLeave> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-431">Event handlers that are attached to the <xref:System.Windows.UIElement.DragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-432">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-432">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-433">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-433">Identifier field</span></span>|<xref:System.Windows.UIElement.DragLeaveEvent>|  
|<span data-ttu-id="67f8b-434">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-434">Routing strategy</span></span>|<span data-ttu-id="67f8b-435">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-435">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-436">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-436">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="67f8b-437">해당 터널링 이벤트는 <xref:System.Windows.DragDrop.PreviewDragLeave>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-437">The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragLeave>.</span></span>  
  
-   <span data-ttu-id="67f8b-438">재정의 <xref:System.Windows.UIElement.OnDragLeave%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-438">Override <xref:System.Windows.UIElement.OnDragLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-439">
            <see cref="E:System.Windows.UIElement.DragLeave" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-439">Identifies the <see cref="E:System.Windows.UIElement.DragLeave" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-440">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-440">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-441">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-441">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-442">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-442">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-443">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-443">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-444">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-444">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-445">입력 시스템에서 이 요소를 잠재적인 놓기 대상으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-445">Occurs when the input system reports an underlying drag event with this element as the potential drop target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-446">이 이벤트는 끌기 요소 범위에서 시작 하는 경우에 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-446">This event occurs even if the drag originates in the element bounds.</span></span> <span data-ttu-id="67f8b-447">끌기 범위 외부에서 시작, 내부 이동 후도이 이벤트가 발생 하는 경우와 <xref:System.Windows.UIElement.DragEnter> 및 관련 미리 보기 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-447">If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <xref:System.Windows.UIElement.DragEnter> and related preview events.</span></span>  
  
 <span data-ttu-id="67f8b-448">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-448">This event creates an alias for the <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-449">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.DragOver> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-449">Event handlers that are attached to the <xref:System.Windows.UIElement.DragOver> event are attached to the underlying <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-450">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-450">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-451">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-451">Identifier field</span></span>|<xref:System.Windows.UIElement.DragOverEvent>|  
|<span data-ttu-id="67f8b-452">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-452">Routing strategy</span></span>|<span data-ttu-id="67f8b-453">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-453">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-454">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-454">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="67f8b-455">해당 터널링 이벤트는 <xref:System.Windows.DragDrop.PreviewDragOver>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-455">The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragOver>.</span></span>  
  
-   <span data-ttu-id="67f8b-456">재정의 <xref:System.Windows.UIElement.OnDragOver%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-456">Override <xref:System.Windows.UIElement.OnDragOver%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-457">
            <see cref="E:System.Windows.UIElement.DragOver" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-457">Identifies the <see cref="E:System.Windows.UIElement.DragOver" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-458">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-458">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-459">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-459">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-460">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-460">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-461">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-461">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-462">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-462">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-463">입력 시스템에서 이 요소를 놓기 대상으로 사용하는 기본 놓기 이벤트를 보고하면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-463">Occurs when the input system reports an underlying drop event with this element as the drop target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-464">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.Drop?displayProperty=nameWithType> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-464">This event creates an alias for the <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.Drop?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-465">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.Drop> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-465">Event handlers that are attached to the <xref:System.Windows.UIElement.Drop> event are attached to the underlying <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-466">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-466">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-467">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-467">Identifier field</span></span>|<xref:System.Windows.UIElement.DropEvent>|  
|<span data-ttu-id="67f8b-468">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-468">Routing strategy</span></span>|<span data-ttu-id="67f8b-469">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-469">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-470">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-470">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="67f8b-471">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewDrop>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-471">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewDrop>.</span></span>  
  
-   <span data-ttu-id="67f8b-472">재정의 <xref:System.Windows.UIElement.OnDrop%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-472">Override <xref:System.Windows.UIElement.OnDrop%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-473">
            <see cref="E:System.Windows.UIElement.Drop" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-473">Identifies the <see cref="E:System.Windows.UIElement.Drop" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-474">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-474">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-475">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-475">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-476">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-476">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-477">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-477">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-478">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-478">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.Effect Effect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.Effect Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Effect" />
      <MemberSignature Language="VB.NET" Value="Public Property Effect As Effect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::Effect ^ Effect { System::Windows::Media::Effects::Effect ^ get(); void set(System::Windows::Media::Effects::Effect ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.Effect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-479">
            <see cref="T:System.Windows.UIElement" />에 적용할 비트맵 효과를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-479">Gets or sets the bitmap effect to apply to the <see cref="T:System.Windows.UIElement" />.</span>
          </span>
          <span data-ttu-id="67f8b-480">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-480">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-481">비트맵 효과를 나타내는 <see cref="T:System.Windows.Media.Effects.Effect" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-481">An <see cref="T:System.Windows.Media.Effects.Effect" /> that represents the bitmap effect.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-482">사용 하 여는 <xref:System.Windows.UIElement.Effect%2A> 속성에 비트맵 효과를 적용 하는 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-482">Use the <xref:System.Windows.UIElement.Effect%2A> property to apply a bitmap effect to a <xref:System.Windows.UIElement>.</span></span>  
  
<a name="dependencyPropertyInfo_Effect"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-483">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-483">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-484">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-484">Identifier field</span></span>|<xref:System.Windows.UIElement.EffectProperty>|  
|<span data-ttu-id="67f8b-485">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-485">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-486">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-486">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-487">다음 XAML에서는 사용자 지정을 할당 하는 방법을 보여 줍니다. <xref:System.Windows.Media.Effects.ShaderEffect> 에 <xref:System.Windows.UIElement.Effect%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-487">The following XAML shows how to assign a custom <xref:System.Windows.Media.Effects.ShaderEffect> to the <xref:System.Windows.UIElement.Effect%2A> property.</span></span>  
  
 [!code-xaml[System.Windows.Media.Effects.ShaderEffect#1000](~/samples/snippets/csharp/VS_Snippets_Wpf/System.Windows.Media.Effects.ShaderEffect/CS/Window1.xaml#1000)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Effects.Effect" />
        <altmember cref="T:System.Windows.Media.Effects.ShaderEffect" />
      </Docs>
    </Member>
    <Member MemberName="EffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty EffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty EffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.EffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ EffectProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-488">
            <see cref="P:System.Windows.UIElement.Effect" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-488">Identifies the <see cref="P:System.Windows.UIElement.Effect" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-489">이 요소에 포커스를 설정하려고 시도합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-489">Attempts to set focus to this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67f8b-490">키보드 포커스와 논리적 포커스가 이 요소로 설정되어 있으면 <see langword="true" />이고, 논리적 포커스만 이 요소로 설정되어 있거나 이 메서드에 대한 호출이 포커스를 강제로 변경하지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-490">
              <see langword="true" /> if keyboard focus and logical focus were set to this element; <see langword="false" /> if only logical focus was set to this element, or if the call to this method did not force the focus to change.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-491">포커스를 <xref:System.Windows.UIElement.Focusable%2A> 및 <xref:System.Windows.UIElement.IsEnabled%2A> 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-491">To be focusable, <xref:System.Windows.UIElement.Focusable%2A> and <xref:System.Windows.UIElement.IsEnabled%2A> must both be `true`.</span></span>  
  
 <span data-ttu-id="67f8b-492">요소가 이면 특정 트리 내에서 포커스를 받을 수 하 고 사용 가능한 이벤트 처리 하는 경우에 포커스를 허용 하지 않음으로써 미리 보기 포커스 이벤트에 응답할 수 있습니다 (예: 합성 컨트롤) 하므로이 메서드는 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-492">Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return `false`.</span></span>  
  
 <span data-ttu-id="67f8b-493">포커스 일반적 두 개의 별개의 개념에 의해 관리: 키보드 포커스와 논리 포커스를 항상 동일 하지 않은입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-493">Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical.</span></span>  <span data-ttu-id="67f8b-494">자세한 내용은 참조 [포커스 개요](~/docs/framework/wpf/advanced/focus-overview.md) 또는 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-494">For more information, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md) or [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="67f8b-495">호출 하는 경우 <xref:System.Windows.UIElement.Focus%2A> 반환 `true`, <xref:System.Windows.UIElement.IsKeyboardFocused%2A> 및 <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> 도 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-495">If calling <xref:System.Windows.UIElement.Focus%2A> returns `true`, <xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are also `true`.</span></span>  
  
 <span data-ttu-id="67f8b-496">관련된 속성이 없는 경우 `true`호출 하는 경우, <xref:System.Windows.UIElement.Focus%2A>, 다음과 같은 순서로 발생 하는 다음 이벤트 중 하나 이상이: <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>, <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> (소스는 새 포커스 대상), <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>, <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.UIElement.LostKeyboardFocus>, <xref:System.Windows.UIElement.GotKeyboardFocus> (소스 대상인 새 포커스).</span><span class="sxs-lookup"><span data-stu-id="67f8b-496">If the related properties are not already `true`, when you call  <xref:System.Windows.UIElement.Focus%2A>, one or more of the following events are raised in the following order: <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>, <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> (source is the new focus target), <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>, <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.UIElement.LostKeyboardFocus>, <xref:System.Windows.UIElement.GotKeyboardFocus> (source is the new focus target).</span></span>  
  
 <span data-ttu-id="67f8b-497">찾기가 성공 하려면 다른 요소 이전에 포커스가 있어야 하는 데 필요한 응용 프로그램에서이 호출에 대 한 하는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-497">In order for this call to be successful, some other element in the application needed to have focus previously.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-498">포커스를 설정 하는 다음 예제는 <xref:System.Windows.Controls.TextBox> 참조 <xref:System.Windows.FrameworkElement.Name%2A>, 다음 내에서 커서의 위치를 조정 하 고는 <xref:System.Windows.Controls.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-498">The following example sets focus to a <xref:System.Windows.Controls.TextBox> referenced by <xref:System.Windows.FrameworkElement.Name%2A>, and then adjusts the position of the cursor within the <xref:System.Windows.Controls.TextBox>.</span></span>  
  
 [!code-csharp[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/TextBox_CursorToEnd/CSharp/Window1.xaml.cs#uielementfocus)]
 [!code-vb[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextBox_CursorToEnd/VisualBasic/Window1.xaml.vb#uielementfocus)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-499">요소가 포커스를 받을 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-499">Gets or sets a value that indicates whether the element can receive focus.</span>
          </span>
          <span data-ttu-id="67f8b-500">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-500">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-501">요소가 포커스를 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-501">
              <see langword="true" /> if the element is focusable; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="67f8b-502">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-502">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-503">포커스가 있는 요소는 키보드 입력을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-503">Only the focused element receives keyboard input.</span></span>  
  
 <span data-ttu-id="67f8b-504"><xref:System.Windows.UIElement.Focusable%2A> 이 [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] 이란 현실에서 종속성 속성에 대 한 속성 접근자입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-504"><xref:System.Windows.UIElement.Focusable%2A> is the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property.</span></span> <span data-ttu-id="67f8b-505">이 특정 종속성 속성에는 상당히 자주 해당 "기본값"이 특히 컨트롤에서에서 파생 된 요소 클래스에서 서로 다르게 설정 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-505">This particular dependency property quite frequently has its apparent "default" value set differently in derived element classes, particularly in controls.</span></span> <span data-ttu-id="67f8b-506">이 두 가지 방법 중 하나에 일반적으로 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-506">This commonly occurs in one of two ways:</span></span>  
  
-   <span data-ttu-id="67f8b-507">종속성 속성은 특정 파생된 클래스에서 상속 되지만 해당 파생 클래스를 재정의 종속성 속성의 메타 데이터 속성 기본값을 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-507">The dependency property is inherited by a particular derived class, but that derived class overrides the metadata of the dependency property and changes the property default value.</span></span>  
  
-   <span data-ttu-id="67f8b-508">스타일이 나 템플릿을 해당 종속성 속성 값을 다르게 설정 하는 요소에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-508">A style or template is applied to an element, which sets that dependency property value differently.</span></span>  
  
 <span data-ttu-id="67f8b-509">예를 들어 명백한 "기본값"의 <xref:System.Windows.UIElement.Focusable%2A> 에 대 한는 <xref:System.Windows.Controls.Button> 컨트롤 됩니다 `true`경우라도, <xref:System.Windows.Controls.Button> 상속 <xref:System.Windows.UIElement.Focusable%2A> 으로 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 에서 직접 속성 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-509">For example, the apparent "default" of <xref:System.Windows.UIElement.Focusable%2A> for a <xref:System.Windows.Controls.Button> control will be `true`, even though <xref:System.Windows.Controls.Button> inherits <xref:System.Windows.UIElement.Focusable%2A> as a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property directly from <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="67f8b-510">적용 된 메타 데이터에 대 한 값 때문에 이것이 <xref:System.Windows.UIElement.Focusable%2A> 종속성 속성의 정적 생성자 내에서 재정의 <xref:System.Windows.Controls.Control> 기본 클래스 사이 <xref:System.Windows.Controls.Button> 및 <xref:System.Windows.UIElement> 클래스 계층 구조에서입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-510">This is because the applied metadata value for the <xref:System.Windows.UIElement.Focusable%2A> dependency property was overridden within the static constructor of the <xref:System.Windows.Controls.Control> base class, which is situated between <xref:System.Windows.Controls.Button> and <xref:System.Windows.UIElement> in the class hierarchy.</span></span>  
  
 <span data-ttu-id="67f8b-511">상속 되는 경우 <xref:System.Windows.Controls.Control> 또는 해당 파생된 클래스 <xref:System.Windows.Controls.Control> 되려면이 속성의 기본값을 재정의 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-511">When inherited by <xref:System.Windows.Controls.Control> or its derived classes, <xref:System.Windows.Controls.Control> redefines the default value of this property to be `true`.</span></span>  
  
 <span data-ttu-id="67f8b-512">상속 되는 경우 <xref:System.Windows.Controls.Label> (되는 <xref:System.Windows.Controls.Control> 파생 클래스), 기본 값은로 다시 정의 됩니다. `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-512">When inherited by <xref:System.Windows.Controls.Label> (which is a <xref:System.Windows.Controls.Control> derived class), the default value is again redefined to be `false`.</span></span>  
  
<a name="dependencyPropertyInfo_Focusable"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-513">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-513">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-514">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-514">Identifier field</span></span>|<xref:System.Windows.UIElement.FocusableProperty>|  
|<span data-ttu-id="67f8b-515">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-515">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-516">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-516">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-517">다음 예제 코드에서는 특정 사용자 지정 컨트롤을 설정에 대 한 <xref:System.Windows.UIElement.Focusable%2A> `false` 템플릿 내의 요소 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-517">The following example code illustrates a control template for a particular custom control, which sets <xref:System.Windows.UIElement.Focusable%2A> `false` on one of the elements within the template.</span></span>  
  
 [!code-xaml[RichTextBox_NoScrollViewer#_ControlTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBox_NoScrollViewer/CS/window1.xaml#_controltemplate)]
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="67f8b-518">파생 된 경우 <see cref="T:System.Windows.UIElement" /> 직접 (에서 반대로 <see cref="T:System.Windows.Controls.Control" />), 프로그램 요소를 기본적으로 요소가 되지 않으므로 포커스를 잠글지 여부를 고려 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-518">When deriving from <see cref="T:System.Windows.UIElement" /> directly (as opposed to from <see cref="T:System.Windows.Controls.Control" />), consider whether you wish your element to be focusable, because by default the element will not be focusable.</span>
            </span>
            <span data-ttu-id="67f8b-519">프로그램 요소를 원하는 종류의 정적 생성자 내에서이 속성에 대 한 메타 데이터를 다음과 같이 재정의:</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-519">If you wish your element to be focusable, override the metadata for this property within your type's static constructor as follows:</span>
            </span>  
  
 [!code-csharp[CorePseudocode#UIElementShortOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementshortoverride)]
 [!code-vb[CorePseudocode#UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)]  
  
 <span data-ttu-id="67f8b-520">여기서 <paramref name="myElement" /> 에 메타 데이터 값을 재정의 하는 형식의 클래스 이름 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-520">where <paramref name="myElement" /> should be the class name of the type that you are overriding the metadata value on.</span></span></para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-521">
            <see cref="P:System.Windows.UIElement.Focusable" /> 속성 값이 변경되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-521">Occurs when the value of the <see cref="P:System.Windows.UIElement.Focusable" /> property changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-522">이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트, 라우트된 이벤트가 아니라 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-522">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-523">
            <see cref="P:System.Windows.UIElement.Focusable" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-523">Identifies the <see cref="P:System.Windows.UIElement.Focusable" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="67f8b-524">확인할 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-524">The dependency property to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-525">실행하거나 중지된 애니메이션의 가능한 애니메이션 값을 모두 무시하고 이 요소에 대해 지정된 속성의 기본 속성 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-525">Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67f8b-526">지정된 종속성 속성에 연결된 애니메이션이 없는 경우와 동일한 속성 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-526">The property value as if no animations are attached to the specified dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-527">속성에 연결 된 애니메이션이 없는 경우 하면 <xref:System.Windows.UIElement.GetAnimationBaseValue%2A> 반환 값은 항상 동일는 <xref:System.Windows.DependencyObject.GetValue%2A> 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-527">If no animations are attached to the property, then the <xref:System.Windows.UIElement.GetAnimationBaseValue%2A> return value is always identical to the <xref:System.Windows.DependencyObject.GetValue%2A> return value.</span></span> <span data-ttu-id="67f8b-528">애니메이션이 연결 인 경우 모든 가능한 애니메이션 시작 부분을 포함 하 여 값을 파생 하는 다음 및 중지 값 무시 되 고 속성 값이 가능한 다른 모든 입력에 따라 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-528">If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs.</span></span> <span data-ttu-id="67f8b-529">자세한 내용은 [종속성 속성 값 우선 순위](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="67f8b-529">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-530">애니메이션의 기준 값을 보고 하는 처리기를 구현 하는 다음 예제에서는 <xref:System.Windows.FrameworkElement.Width%2A> 속성에는 <xref:System.Windows.Controls.Button>, 변환의 기준 값 뿐만 아니라 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-530">The following example implements a handler that reports the base value of an animated <xref:System.Windows.FrameworkElement.Width%2A> property on a <xref:System.Windows.Controls.Button>, as well as the base value of a transform.</span></span>  
  
 [!code-csharp[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#getanimationbasevalue)]
 [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#getanimationbasevalue)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize">
          <span data-ttu-id="67f8b-531">요소에서 제공된 사용 가능한 크기입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-531">The available size provided by the element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-532">
            <see cref="P:System.Windows.UIElement.ClipToBounds" />가 <see langword="true" />로 설정된 경우 클리핑되는 영역을 나타내는 다른 클리핑 기하 도형을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-532">Returns an alternative clipping geometry that represents the region that would be clipped if <see cref="P:System.Windows.UIElement.ClipToBounds" /> were set to <see langword="true" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67f8b-533">잠재적인 클리핑 기하 도형입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-533">The potential clipping geometry.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-534">기본 구현은 적절 한 값을 반환 하지만 사용 하지 않는 `layoutSlotSize` 계산에서 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-534">The default implementation will return a legitimate value, but does not use the `layoutSlotSize` parameter in its calculations.</span></span> <span data-ttu-id="67f8b-535">값을 사용 하 여 대신 <xref:System.Windows.UIElement.RenderSize%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-535">Instead it uses the value of <xref:System.Windows.UIElement.RenderSize%2A>.</span></span>  
  
 <span data-ttu-id="67f8b-536">이 메서드를 재정의 대체로에서 즉시 파생 <xref:System.Windows.FrameworkElement> 클래스 및 <xref:System.Windows.FrameworkElement> 재정의 일반 WPF 프레임 워크 수준 요소에 대 한 보다 복잡 한 동작을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-536">This method is substantially overridden by the immediately derived <xref:System.Windows.FrameworkElement> class, and the <xref:System.Windows.FrameworkElement> override produces a more sophisticated behavior for general WPF framework-level elements.</span></span> <span data-ttu-id="67f8b-537">자세한 내용은 <xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="67f8b-537">For details, see <xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-538">파생 클래스에서 재정의되는 경우 시각적 부모가 없으면 이 요소에 대해 다른 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 부모를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-538">When overridden in a derived class, returns an alternative [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] parent for this element if no visual parent exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67f8b-539">파생 클래스 구현에 보고할 다른 부모 연결이 있는 경우의 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-539">An object, if implementation of a derived class has an alternate parent connection to report.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-540">이 메서드의 기본 가상 구현 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-540">The default virtual implementation of this method returns `null`.</span></span> <span data-ttu-id="67f8b-541"><xref:System.Windows.FrameworkElement> 실제 구현을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-541"><xref:System.Windows.FrameworkElement> provides a practical implementation.</span></span>  
  
 <span data-ttu-id="67f8b-542">대체 부모가 있는 요소를 만들어 경우 대체 부모 구조체 이벤트 라우트 되도록 표준 부모 시각적 트리를 라우팅의 표준 패턴에서와 차이가 하는 방식에서, 이벤트 라우팅에 사용 되는 중이거나에서 아래쪽의 라우팅 전략을 미리 봅니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-542">Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-543">입력 시스템에서 이 요소를 포함하는 기본 끌어서 놓기 이벤트를 보고하면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-543">Occurs when the input system reports an underlying drag-and-drop event that involves this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-544"><xref:System.Windows.UIElement.GiveFeedback> 이벤트를 사용 하면 끌어서 놓기 작업 중 사용자의 시각적 피드백을 제공 하기 위해 마우스 포인터의 모양을 수정 하려면 끌기 이벤트의 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-544">The <xref:System.Windows.UIElement.GiveFeedback> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</span></span> <span data-ttu-id="67f8b-545">시각적 피드백 끌어서 놓기 작업이 진행 되는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-545">The visual feedback reinforces that a drag-and-drop operation is in process.</span></span>  
  
 <span data-ttu-id="67f8b-546">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.GiveFeedback> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-546">This event creates an alias for the <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.GiveFeedback> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-547">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.GiveFeedback> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-547">Event handlers that are attached to the <xref:System.Windows.UIElement.GiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-548">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-548">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-549">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-549">Identifier field</span></span>|<xref:System.Windows.UIElement.GiveFeedbackEvent>|  
|<span data-ttu-id="67f8b-550">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-550">Routing strategy</span></span>|<span data-ttu-id="67f8b-551">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-551">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-552">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-552">Delegate</span></span>|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   <span data-ttu-id="67f8b-553">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewGiveFeedback>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-553">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewGiveFeedback>.</span></span>  
  
-   <span data-ttu-id="67f8b-554">재정의 <xref:System.Windows.UIElement.OnGiveFeedback%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-554">Override <xref:System.Windows.UIElement.OnGiveFeedback%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-555">
            <see cref="E:System.Windows.UIElement.GiveFeedback" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-555">Identifies the <see cref="E:System.Windows.UIElement.GiveFeedback" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-556">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-556">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-557">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-557">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-558">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-558">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-559">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-559">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-560">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-560">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-561">이 요소가 논리 포커스를 가져오면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-561">Occurs when this element gets logical focus.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-562">메서드 호출을 사용 하 여 포커스를 강제로 했지만 이전 키보드 포커스가 다른 범위에 있는 경우 논리적 포커스와 키보드 포커스가 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-562">Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope.</span></span> <span data-ttu-id="67f8b-563">이 시나리오에서는 키보드 포커스가 유지 되 고 요소에는 <xref:System.Windows.UIElement.Focus%2A> 메서드는 여전히 논리적 포커스를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-563">In this scenario, keyboard focus remains where it is and the element where a <xref:System.Windows.UIElement.Focus%2A> method is called still gets logical focus.</span></span>  
  
 <span data-ttu-id="67f8b-564">이 이벤트의 보다 정확 하 게 설명은 발생할 때의 값은 <xref:System.Windows.UIElement.IsFocused%2A> 경로에 있는 요소의 속성에서 변경 되 `false` 를 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-564">A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement.IsFocused%2A> property of an element in the route is changed from `false` to `true`.</span></span>  
  
 <span data-ttu-id="67f8b-565">이 이벤트는 버블링 라우팅을 사용 하므로 포커스를 받는 요소 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-565">Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="67f8b-566">확인은 <xref:System.Windows.RoutedEventArgs.Source%2A> 에 포커스가 있는 실제 요소를 확인 하기 위해 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-566">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.</span></span>  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-567">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-567">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-568">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-568">Identifier field</span></span>|<xref:System.Windows.UIElement.GotFocusEvent>|  
|<span data-ttu-id="67f8b-569">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-569">Routing strategy</span></span>|<span data-ttu-id="67f8b-570">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-570">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-571">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-571">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
-   <span data-ttu-id="67f8b-572">해당 터널링 이벤트가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-572">There is no corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="67f8b-573">재정의 <xref:System.Windows.UIElement.OnGotFocus%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-573">Override <xref:System.Windows.UIElement.OnGotFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-574">
            <see cref="E:System.Windows.UIElement.GotFocus" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-574">Identifies the <see cref="E:System.Windows.UIElement.GotFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-575">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-575">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-576">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-576">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-577">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-577">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-578">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-578">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-579">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-579">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-580">이 요소에 키보드 포커스가 있으면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-580">Occurs when the keyboard is focused on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-581"><xref:System.Windows.UIElement.IsKeyboardFocusedChanged> 요소;에 대 한 포커스 상태를 유지 하는 속성에서 상태 변경을 추적 하는 유사한 이벤트 <xref:System.Windows.UIElement.GotKeyboardFocus> 이벤트는 대부분의 동일한 상황에서 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-581"><xref:System.Windows.UIElement.IsKeyboardFocusedChanged> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <xref:System.Windows.UIElement.GotKeyboardFocus> event is raised in many of the same circumstances.</span></span>  
  
 <span data-ttu-id="67f8b-582">이 이벤트는 버블링 라우팅을 사용 하므로 포커스가 있는 요소는 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-582">Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="67f8b-583">확인의 <xref:System.Windows.RoutedEventArgs.Source%2A> 이벤트 데이터에 포커스가 있는 실제 요소를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-583">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.</span></span>  
  
 <span data-ttu-id="67f8b-584">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.GotKeyboardFocus> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-584">This event creates an alias for the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.GotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-585">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.GotKeyboardFocus> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-585">Event handlers that are attached to the <xref:System.Windows.UIElement.GotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-586">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-586">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-587">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-587">Identifier field</span></span>|<xref:System.Windows.UIElement.GotKeyboardFocusEvent>|  
|<span data-ttu-id="67f8b-588">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-588">Routing strategy</span></span>|<span data-ttu-id="67f8b-589">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-589">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-590">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-590">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="67f8b-591">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-591">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="67f8b-592">재정의 <xref:System.Windows.UIElement.OnGotKeyboardFocus%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-592">Override <xref:System.Windows.UIElement.OnGotKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-593">
            <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-593">Identifies the <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-594">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-594">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-595">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-595">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-596">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-596">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-597">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-597">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-598">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-598">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-599">이 요소가 마우스를 캡처하면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-599">Occurs when this element captures the mouse.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-600">마우스를 캡처한 요소 마우스 포인터가 해당 경계 밖에 있는 경우에 마우스 입력을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-600">When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds.</span></span> <span data-ttu-id="67f8b-601">마우스는 일반적으로 끌어서 놓기 작업 중에 캡처됩니다 및 끌어서 놓기 작업의 삭제 동작이 발생할 때까지 캡처된 상태로 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-601">The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.</span></span>  
  
 <span data-ttu-id="67f8b-602">이 이벤트는 버블링 라우팅을 사용 하기 때문에 캡처를 가진 요소를 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-602">Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="67f8b-603">확인 된 <xref:System.Windows.RoutedEventArgs.Source%2A> 마우스 있는 실제 요소를 결정 하는 데이터의 캡처 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-603">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has mouse capture.</span></span>  
  
 <span data-ttu-id="67f8b-604">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.GotMouseCapture> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-604">This event creates an alias for the <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> attached event for  this class so that <xref:System.Windows.UIElement.GotMouseCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-605">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.GotMouseCapture> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-605">Event handlers that are attached to the <xref:System.Windows.UIElement.GotMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-606">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-606">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-607">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-607">Identifier field</span></span>|<xref:System.Windows.UIElement.GotMouseCaptureEvent>|  
|<span data-ttu-id="67f8b-608">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-608">Routing strategy</span></span>|<span data-ttu-id="67f8b-609">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-609">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-610">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-610">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="67f8b-611">정의 된 해당 터널링 이벤트가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-611">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="67f8b-612">재정의 <xref:System.Windows.UIElement.OnGotMouseCapture%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-612">Override <xref:System.Windows.UIElement.OnGotMouseCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-613">
            <see cref="E:System.Windows.UIElement.GotMouseCapture" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-613">Identifies the <see cref="E:System.Windows.UIElement.GotMouseCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-614">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-614">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-615">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-615">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-616">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-616">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-617">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-617">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-618">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-618">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-619">이 요소가 스타일러스를 캡처하면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-619">Occurs when this element captures the stylus.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-620">스타일러스를 캡처한 요소 포인터가 해당 경계 밖에 있는 경우에 스타일러스 입력을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-620">When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="67f8b-621">스타일러스가 끌어서 놓기 작업의 삭제 동작이 발생할 때까지 캡처를 저장 하 고는 일반적으로 끌어서 놓기 작업 중에 캡처됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-621">The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.</span></span>  
  
 <span data-ttu-id="67f8b-622">이 이벤트는 버블링 라우팅을 사용 하기 때문에 캡처를 가진 요소를 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-622">Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="67f8b-623">확인은 <xref:System.Windows.RoutedEventArgs.Source%2A> 이벤트 데이터 캡처를 가진 실제 요소를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-623">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has capture.</span></span>  
  
 <span data-ttu-id="67f8b-624">이 이벤트는이 클래스에 대 한 연결 된 이벤트에 대 한 별칭을 만들어 있도록 <xref:System.Windows.UIElement.GotStylusCapture> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-624">This event creates an alias for the attached event for this class so that <xref:System.Windows.UIElement.GotStylusCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-625">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.GotStylusCapture> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-625">Event handlers that are attached to the <xref:System.Windows.UIElement.GotStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-626">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-626">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-627">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-627">Identifier field</span></span>|<xref:System.Windows.UIElement.GotStylusCaptureEvent>|  
|<span data-ttu-id="67f8b-628">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-628">Routing strategy</span></span>|<span data-ttu-id="67f8b-629">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-629">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-630">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-630">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="67f8b-631">정의 된 해당 터널링 이벤트가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-631">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="67f8b-632">재정의 <xref:System.Windows.UIElement.OnGotStylusCapture%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-632">Override <xref:System.Windows.UIElement.OnGotStylusCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-633">
            <see cref="E:System.Windows.UIElement.GotStylusCapture" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-633">Identifies the <see cref="E:System.Windows.UIElement.GotStylusCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-634">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-634">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-635">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-635">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-636">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-636">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-637">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-637">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-638">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-638">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-639">이 요소에 터치가 캡처될 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-639">Occurs when a touch is captured to this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-640">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-640">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-641">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-641">Identifier field</span></span>|<xref:System.Windows.UIElement.GotTouchCaptureEvent>|  
|<span data-ttu-id="67f8b-642">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-642">Routing strategy</span></span>|<span data-ttu-id="67f8b-643">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-643">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-644">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-644">Delegate</span></span>|<span data-ttu-id="67f8b-645"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-645"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="67f8b-646">재정의 <xref:System.Windows.UIElement.OnGotTouchCapture%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-646">Override <xref:System.Windows.UIElement.OnGotTouchCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-647">
            <see cref="E:System.Windows.UIElement.GotTouchCapture" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-647">Identifies the <see cref="E:System.Windows.UIElement.GotTouchCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-648">이 요소에 애니메이션이 적용된 속성이 있는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-648">Gets a value indicating whether this element has any animated properties.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-649">이 요소의 속성에 애니메이션이 연결되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-649">
              <see langword="true" /> if this element has animations attached to any of its properties; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-650">이 속성은 반환 `true` 영구 (unclocked, 항상 실행 중) 애니메이션이 또는 특정 시간 표시 막대의 애니메이션 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-650">This property returns `true` either for persistent (unclocked, always-running) animations, or for animations that have a specific timeline.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasEffectiveKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual bool HasEffectiveKeyboardFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasEffectiveKeyboardFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasEffectiveKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property HasEffectiveKeyboardFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool HasEffectiveKeyboardFocus { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-651">
            <see cref="T:System.Windows.UIElement" />에 포커스가 있는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-651">Gets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> has focus.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-652">
            <see cref="T:System.Windows.UIElement" /> 컨트롤에 포커스가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-652">
              <see langword="true" /> if the <see cref="T:System.Windows.UIElement" /> has focus; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-653">서브 클래스 요소에 키보드 포커스가 있을 때를 지정 하려면이 속성을 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-653">Subclasses can override this property to specify when the element has keyboard focus.</span></span>  <span data-ttu-id="67f8b-654">이 때 유용 프로그램 <xref:System.Windows.UIElement> 키보드 포커스를 가질 수 있는 요소를 포함 하거나 요소에 포커스가 있을 보고서 중이 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-654">This is useful when your <xref:System.Windows.UIElement> contains elements that can have keyboard focus and you want your element to report that it has focus.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTestCore">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-655">기본 요소 적중 테스트 동작을 제공하는 <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" />를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-655">Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> to supply base element hit testing behavior.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.GeometryHitTestResult HitTestCore (System.Windows.Media.GeometryHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.GeometryHitTestResult HitTestCore(class System.Windows.Media.GeometryHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As GeometryHitTestParameters) As GeometryHitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::GeometryHitTestResult ^ HitTestCore(System::Windows::Media::GeometryHitTestParameters ^ hitTestParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.GeometryHitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.GeometryHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">
          <span data-ttu-id="67f8b-656">초기 적중 지점을 포함하여 수행할 적중 횟수 테스트를 설명합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-656">Describes the hit test to perform, including the initial hit point.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-657">기본 요소 적중 횟수 테스트 동작을 제공할 <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" />를 구현합니다(<see cref="T:System.Windows.Media.GeometryHitTestResult" /> 반환).</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-657">Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.GeometryHitTestResult" />).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67f8b-658">계산한 기하 도형을 포함하는 테스트의 결과입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-658">Results of the test, including the evaluated geometry.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-659">원래 가상 메서드 <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> 더 이상에서이 메서드를 재정의 하는 방법은 파생 클래스에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-659">See the original virtual method <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> for information on overriding this method in further derived classes.</span></span> <span data-ttu-id="67f8b-660">몇 가지 특정 컨트롤 (<xref:System.Windows.Controls.TextBlock>예를 들면)는이 무시 하는 고유한 구현이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-660">Note that several specific controls (<xref:System.Windows.Controls.TextBlock>, for example) do have distinct implementations, which override this one.</span></span>  
  
 <span data-ttu-id="67f8b-661">이 메서드는 응용 프로그램 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-661">This method is not intended to be called from your application code.</span></span> <span data-ttu-id="67f8b-662">이 메서드는 마우스 포인터가 요소, 예를 들어) (여부 입력된 시스템의 다양 한 측면에 의해 노출 되는 내부 적중된 테스트 동작을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-662">This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.HitTestResult HitTestCore (System.Windows.Media.PointHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.HitTestResult HitTestCore(class System.Windows.Media.PointHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As PointHitTestParameters) As HitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::HitTestResult ^ HitTestCore(System::Windows::Media::PointHitTestParameters ^ hitTestParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.HitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.PointHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">
          <span data-ttu-id="67f8b-663">초기 적중 지점을 포함하여 수행할 적중 횟수 테스트를 설명합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-663">Describes the hit test to perform, including the initial hit point.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-664">기본 요소 적중 횟수 테스트 동작을 제공할 <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" />를 구현합니다(<see cref="T:System.Windows.Media.HitTestResult" /> 반환).</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-664">Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.HitTestResult" />).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67f8b-665">계산한 지점을 포함하는 테스트의 결과입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-665">Results of the test, including the evaluated point.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-666">원래 가상 메서드 <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> 더 이상에서이 메서드를 재정의 하는 방법은 파생 클래스에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-666">See the original virtual method <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> for information on overriding this method in further derived classes.</span></span> <span data-ttu-id="67f8b-667">몇 가지 특정 컨트롤 (<xref:System.Windows.Controls.TextBlock>예를 들면)는 무시 하는 고유한 구현이 <xref:System.Windows.UIElement.HitTestCore%2A> 에 정의 된 대로 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-667">Note that several specific controls (<xref:System.Windows.Controls.TextBlock>, for example) do have distinct implementations, which override <xref:System.Windows.UIElement.HitTestCore%2A> as defined by <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="67f8b-668">이 메서드는 응용 프로그램 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-668">This method is not intended to be called from your application code.</span></span> <span data-ttu-id="67f8b-669">이 메서드는 마우스 포인터가 요소, 예를 들어) (여부 입력된 시스템의 다양 한 측면에 의해 노출 되는 내부 적중된 테스트 동작을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-669">This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-670">이 요소에 연결된 입력 바인딩의 컬렉션을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-670">Gets the collection of input bindings associated with this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-671">입력 바인딩 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-671">The collection of input bindings.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-672">입력된 바인딩 입력 장치에 있는 명령의 바인딩을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-672">Input bindings support the binding of commands to input devices.</span></span> <span data-ttu-id="67f8b-673">예를 들어 <xref:System.Windows.Input.MouseBinding> 입력은 마우스 장치와 관련 속성을 포함 하는 바인딩을 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-673">For example, <xref:System.Windows.Input.MouseBinding> implements input bindings that include properties that are particular to mouse devices.</span></span>  
  
 <span data-ttu-id="67f8b-674">입력된 바인딩 컬렉션에는 형식과 관련 된 입력된 바인딩을 뿐만 아니라 인스턴스에서 선언 모두 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-674">The collection of input bindings will include both input bindings that pertain to the type as well as input bindings that are declared on the instance.</span></span>  
  
 <span data-ttu-id="67f8b-675">관련된 속성인 <xref:System.Windows.UIElement.CommandBindings%2A>, 명령 바인딩의 컬렉션을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-675">A related property, <xref:System.Windows.UIElement.CommandBindings%2A>, maintains a collection of command bindings.</span></span> <span data-ttu-id="67f8b-676">이러한 입력된 바인딩 한다는 점에서 다릅니다 명령 처리 알려진된 명령에 연결 된 작업의 다음 수준 아래로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-676">These differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands.</span></span>  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="67f8b-677">XAML 속성 요소 사용</span><span class="sxs-lookup"><span data-stu-id="67f8b-677">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  
  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a><span data-ttu-id="67f8b-678">XAML 값</span><span class="sxs-lookup"><span data-stu-id="67f8b-678">XAML Values</span></span>  
 <span data-ttu-id="67f8b-679">*oneOrMoreInputBindings*</span><span class="sxs-lookup"><span data-stu-id="67f8b-679">*oneOrMoreInputBindings*</span></span>  
 <span data-ttu-id="67f8b-680">하나 이상의 <xref:System.Windows.Input.InputBinding> 요소 (일반적으로 <xref:System.Windows.Input.KeyBinding> 또는 <xref:System.Windows.Input.MouseBinding> 파생 클래스).</span><span class="sxs-lookup"><span data-stu-id="67f8b-680">One or more <xref:System.Windows.Input.InputBinding> elements (typically the <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding> derived classes).</span></span> <span data-ttu-id="67f8b-681">사용할 수는 이러한 각는 <xref:System.Windows.Input.InputBinding.Command%2A> 및 <xref:System.Windows.Input.InputBinding.Gesture%2A> 특성이 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-681">Each of these is expected to have a <xref:System.Windows.Input.InputBinding.Command%2A> and <xref:System.Windows.Input.InputBinding.Gesture%2A> attribute set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-682">다음 예제에서이 속성을 채우는 한 <xref:System.Windows.Window>, 단일 <xref:System.Windows.Input.KeyBinding>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-682">The following example populates this property on a <xref:System.Windows.Window>, with a single <xref:System.Windows.Input.KeyBinding>.</span></span>  
  
 [!code-xaml[CommandingOverviewSnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 <span data-ttu-id="67f8b-683">에 대 한 자세한 내용은 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 컬렉션에 대 한 구문을 참조 [XAML 구문에서 세부](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-683">For more information about the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax for collections, see [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="InputHitTest">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement InputHitTest (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.IInputElement InputHitTest(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::IInputElement ^ InputHitTest(System::Windows::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point">
          <span data-ttu-id="67f8b-684">이 요소 내의 오프셋 좌표입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-684">The offset coordinates within this element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-685">현재 요소의 원점을 기준으로 지정된 좌표에 있는 현재 요소 내의 입력 요소를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-685">Returns the input element within the current element that is at the specified coordinates, relative to the current element's origin.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67f8b-686">지정된 위치에 있는 요소 자식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-686">The element child that is located at the given position.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-687"><xref:System.Windows.IInputElement> 해당 형식의 공통 인터페이스를 둘 다 이므로 반환 형식으로 반환 됩니다 <xref:System.Windows.UIElement> 및 <xref:System.Windows.ContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-687"><xref:System.Windows.IInputElement> is returned as the return type, because that type is a common interface for both <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement>.</span></span> <span data-ttu-id="67f8b-688">그런 다음 적절 하 게 반환 형식을 캐스팅 하거나에 정의 된 특정 멤버에 대 한 인스턴스를 사용할 수는 <xref:System.Windows.IInputElement> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-688">You can then cast the return type appropriately, or use the interface instance for certain members that are defined by the <xref:System.Windows.IInputElement> interface.</span></span>  
  
 <span data-ttu-id="67f8b-689">일반적으로이 메서드는 하지 응용 프로그램 코드에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-689">This method typically is not called from your application code.</span></span> <span data-ttu-id="67f8b-690">이 메서드를 호출 하는 상당한 양의 마우스 장치 논리를 다시 만드는 등 존재 하는 하위 수준의 입력된 기능을 다시 구현 하려는 경우에 적절 한만 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-690">Calling this method is only appropriate if you intend to re-implement a substantial amount of the low level input features that are already present, such as recreating mouse device logic.</span></span>  
  
 <span data-ttu-id="67f8b-691"><xref:System.Windows.IContentHost> 계약은 <xref:System.Windows.IContentHost.InputHitTest%2A> 명시적으로 구현 하도록 선택 일부 요소는 동일한 서명으로 메서드.</span><span class="sxs-lookup"><span data-stu-id="67f8b-691"><xref:System.Windows.IContentHost> contracts an <xref:System.Windows.IContentHost.InputHitTest%2A> method with the same signature, which some elements choose to implement explicitly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateArrange">
      <MemberSignature Language="C#" Value="public void InvalidateArrange ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateArrange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateArrange" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateArrange ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateArrange();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-692">요소의 정렬 상태(레이아웃)를 무효화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-692">Invalidates the arrange state (layout) for the element.</span>
          </span>
          <span data-ttu-id="67f8b-693">무효화 이후 해당 요소의 레이아웃은 업데이트되며, 이후에 <see cref="M:System.Windows.UIElement.UpdateLayout" />이 강제로 지정하는 경우가 아니면 업데이트는 비동기적으로 수행됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-693">After the invalidation, the element will have its layout updated, which will occur asynchronously unless subsequently forced by <see cref="M:System.Windows.UIElement.UpdateLayout" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-694">자주 호출할 <xref:System.Windows.UIElement.InvalidateArrange%2A> , 특히 <xref:System.Windows.UIElement.UpdateLayout%2A> 성능이 크게 영향을 줄 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-694">Frequent calls to <xref:System.Windows.UIElement.InvalidateArrange%2A> or in particular to <xref:System.Windows.UIElement.UpdateLayout%2A> have significant performance consequences.</span></span> <span data-ttu-id="67f8b-695">따라서 다른에 대 한 후속 호출에 대 한 정확한 레이아웃 상태가 반드시 필요한 경우에이 메서드를 호출 하지 마십시오 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] 코드에서입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-695">Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in your code.</span></span> <span data-ttu-id="67f8b-696">호출할 수 있는 고급 시나리오에서 <xref:System.Windows.UIElement.InvalidateArrange%2A> 만드는 경우이 <xref:System.Windows.PropertyChangedCallback> 에 있지 않은 종속성 속성에 대 한 한 <xref:System.Windows.Freezable> 또는 <xref:System.Windows.FrameworkElement> 파생 클래스를 변경할 때 레이아웃의 정렬 단계에 영향을 주는 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-696">An advanced scenario where you might call <xref:System.Windows.UIElement.InvalidateArrange%2A> is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the arrange pass of layout when it changes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateMeasure">
      <MemberSignature Language="C#" Value="public void InvalidateMeasure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateMeasure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateMeasure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateMeasure();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-697">요소의 측정 상태(레이아웃)를 무효화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-697">Invalidates the measurement state (layout) for the element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-698">이 메서드를 호출 또한 호출 <xref:System.Windows.UIElement.InvalidateArrange%2A> 내부적으로 호출을 할 필요가 없기 때문 <xref:System.Windows.UIElement.InvalidateMeasure%2A> 및 <xref:System.Windows.UIElement.InvalidateArrange%2A> 연속적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-698">Calling this method also calls <xref:System.Windows.UIElement.InvalidateArrange%2A> internally, there is no need to call <xref:System.Windows.UIElement.InvalidateMeasure%2A> and <xref:System.Windows.UIElement.InvalidateArrange%2A> in succession.</span></span> <span data-ttu-id="67f8b-699">무효화 이후 요소가 해당 레이아웃은 업데이트 하지 않는 한 비동기적으로 발생 하는 갖습니다 <xref:System.Windows.UIElement.UpdateLayout%2A> 동기 레이아웃 변경 내용을 적용 하기 위해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-699">After the invalidation, the element will have its layout updated, which will occur asynchronously, unless <xref:System.Windows.UIElement.UpdateLayout%2A> is called to force a synchronous layout change.</span></span>  
  
 <span data-ttu-id="67f8b-700">WPF 프레임 워크 수준 레이아웃 시스템은 고유 요소의 시각적 트리에 대 한 변경 내용 처리를 수행 하 고 레이아웃 시스템에서는 가장 일반적인 레이아웃 무효화 필요한 경우이 메서드에 해당 하는 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-700">The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and in most common layout invalidation cases the layout system is calling the equivalent of this method when necessary.</span></span> <span data-ttu-id="67f8b-701">직접 조작 요소 트리의 또는 유사한 고급 시나리오는 전체 레이아웃 구현을 생성 하는 경우에이 메서드를 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-701">You should only call this method if you are producing a complete layout implementation, which does direct manipulation of the element tree, or similar advanced scenarios.</span></span> <span data-ttu-id="67f8b-702">이러한 고급 시나리오 중 하나를 만드는 경우이 <xref:System.Windows.PropertyChangedCallback> 에 있지 않은 종속성 속성에 대 한는 <xref:System.Windows.Freezable> 또는 <xref:System.Windows.FrameworkElement> 파생 클래스를 변경할 때 레이아웃의 측정 단계에 영향을 주는 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-702">One such advanced scenario is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the measure pass of layout when it changes.</span></span>  
  
 <span data-ttu-id="67f8b-703">자주 호출할 <xref:System.Windows.UIElement.InvalidateMeasure%2A> , 특히 <xref:System.Windows.UIElement.UpdateLayout%2A> 성능이 크게 영향을 줄 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-703">Frequent calls to <xref:System.Windows.UIElement.InvalidateMeasure%2A> or in particular to <xref:System.Windows.UIElement.UpdateLayout%2A> have significant performance consequences.</span></span> <span data-ttu-id="67f8b-704">따라서 다른에 대 한 후속 호출에 대 한 정확한 레이아웃 상태가 반드시 필요한 경우에이 메서드를 호출 하지 마십시오 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] 코드에서입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-704">Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in your code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateVisual">
      <MemberSignature Language="C#" Value="public void InvalidateVisual ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateVisual() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateVisual" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateVisual ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateVisual();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-705">요소의 렌더링을 무효화하고 완전히 새로운 레이아웃 단계를 적용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-705">Invalidates the rendering of the element, and forces a complete new layout pass.</span>
          </span>
          <span data-ttu-id="67f8b-706">
            <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />는 레이아웃 주기가 완료된 후에 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-706">
              <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> is called after the layout cycle is completed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-707">이 메서드를 호출 <xref:System.Windows.UIElement.InvalidateArrange%2A> 내부적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-707">This method calls <xref:System.Windows.UIElement.InvalidateArrange%2A> internally.</span></span>  
  
 <span data-ttu-id="67f8b-708">이 메서드는 응용 프로그램 코드에서 일반적으로 호출 되지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-708">This method is not generally called from your application code.</span></span> <span data-ttu-id="67f8b-709">WPF 프레임 워크 수준 레이아웃 시스템은 고유 요소의 시각적 트리에 대 한 변경 내용 처리를 수행 하며 필요한 경우이 메서드에 해당 하는 호출 될 이미 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-709">The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and would be calling the equivalent of this method when necessary already.</span></span> <span data-ttu-id="67f8b-710">이 메서드를 호출 하는 것은 고급 시나리오에만 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-710">Calling this method is necessary only for advanced scenarios.</span></span> <span data-ttu-id="67f8b-711">이러한 고급 시나리오 중 하나를 만드는 경우이 <xref:System.Windows.PropertyChangedCallback> 에 있지 않은 종속성 속성에 대 한는 <xref:System.Windows.Freezable> 또는 <xref:System.Windows.FrameworkElement> 파생 클래스를 변경할 때 레이아웃에 영향을 주는 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-711">One such advanced scenario is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the layout when it changes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
      </Docs>
    </Member>
    <Member MemberName="IsArrangeValid">
      <MemberSignature Language="C#" Value="public bool IsArrangeValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArrangeValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsArrangeValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArrangeValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArrangeValid { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-712">이 요소의 레이아웃에 있는 자식 요소의 계산된 크기 및 위치가 유효한지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-712">Gets a value indicating whether the computed size and position of child elements in this element's layout are valid.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-713">레이아웃의 크기 및 위치가 유효하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-713">
              <see langword="true" /> if the size and position of layout are valid; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-714">호출 하 여 무효화 정렬을 적용할 수 있습니다 <xref:System.Windows.UIElement.InvalidateArrange%2A> 이 요소 (또는 해당 부모)에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-714">You can force arrangement to be invalidated by calling <xref:System.Windows.UIElement.InvalidateArrange%2A> on this element (or its parents).</span></span> <span data-ttu-id="67f8b-715">에 때마다 같은 레이아웃 시스템 결정 재 컴퍼지션에 대 한 레이아웃 플래그 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-715">This flags the layout for recomposition at such time as the layout system determines.</span></span> <span data-ttu-id="67f8b-716">직접 호출 또한 <xref:System.Windows.UIElement.UpdateLayout%2A> 만들어질 수 있지만이 방법은 해야만 때문에 보류 중인 추가 무효화 작업이 없는 경우 (불필요 하 게 강제 업데이트 수가 많은 경우 성능이 저하 될을 가짐).</span><span class="sxs-lookup"><span data-stu-id="67f8b-716">Alternatively, an immediate call to <xref:System.Windows.UIElement.UpdateLayout%2A> could be made, but this should only be done if it is certain that no further invalidations are pending (a large number of unnecessarily forced updates has performance consequences).</span></span>  
  
 <span data-ttu-id="67f8b-717"><xref:System.Windows.UIElement.IsArrangeValid%2A> 일 수 없습니다 `true` 하지 않는 한 <xref:System.Windows.UIElement.IsMeasureValid%2A> 이기도 `true` (레이아웃 프로세스의 수 없는 경우가).</span><span class="sxs-lookup"><span data-stu-id="67f8b-717"><xref:System.Windows.UIElement.IsArrangeValid%2A> cannot be `true` unless <xref:System.Windows.UIElement.IsMeasureValid%2A> is also `true` (in the layout process, arrangement cannot be valid without measurement first being valid).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
        <altmember cref="P:System.Windows.UIElement.IsMeasureValid" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-718">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]에서 이 요소를 사용할지 여부를 나타내는 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-718">Gets or sets a value indicating whether this element is enabled in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span>
          </span>
          <span data-ttu-id="67f8b-719">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-719">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-720">요소를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-720">
              <see langword="true" /> if the element is enabled; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="67f8b-721">기본값은 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-721">The default value is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-722">이 속성의 관련 클래스 구현 받습니다는 <xref:System.Windows.UIElement.IsEnabledCore%2A> 런타임에 특정 요소에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-722">Note that this property is influenced by class-specific implementations of <xref:System.Windows.UIElement.IsEnabledCore%2A> on particular elements, often at runtime.</span></span> <span data-ttu-id="67f8b-723">따라서 여기에 나열 된 기본값이 않습니다 경우가 유효 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-723">Therefore, the default value listed here is sometimes not effective.</span></span> <span data-ttu-id="67f8b-724">예를 들어, 한 <xref:System.Windows.Controls.Primitives.ScrollBar> 됩니다 <xref:System.Windows.UIElement.IsEnabled%2A> `false` 때마다 것은 스크롤 막대를 지원할 필요가 없는 있다는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-724">For instance, a <xref:System.Windows.Controls.Primitives.ScrollBar> will be <xref:System.Windows.UIElement.IsEnabled%2A> `false` whenever it is determined that there is no need to support a scrollbar.</span></span> <span data-ttu-id="67f8b-725">이 값을 설정 하는 잠재적으로으로 재정의 됩니다에서 반환한 값 <xref:System.Windows.UIElement.IsEnabledCore%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-725">Attempting to set this value will also potentially be overridden by the value returned by <xref:System.Windows.UIElement.IsEnabledCore%2A>.</span></span>  
  
 <span data-ttu-id="67f8b-726">활성화 되지 않은 요소 적중 테스트 나 포커스에 참여 하지 않는 하며 따라서 입력된 이벤트의 소스가 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-726">Elements that are not enabled do not participate in hit testing or focus and therefore will not be sources of input events.</span></span>  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-727">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-727">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-728">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-728">Identifier field</span></span>|<xref:System.Windows.UIElement.IsEnabledProperty>|  
|<span data-ttu-id="67f8b-729">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-729">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-730">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-730">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-731">다음 예제에서는 처리기 하나 단추 하에서는 실행된 될 때 <xref:System.Windows.UIElement.IsEnabled%2A> `false` 명명 된 단추에 `b1`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-731">The following example shows a handler on one button that when executed will set <xref:System.Windows.UIElement.IsEnabled%2A> `false` on another named button `b1`.</span></span>  
  
 [!code-csharp[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/CSharp/default.xaml.cs#handler)]
 [!code-vb[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/VisualBasic/default.xaml.vb#handler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-732">이 요소의 <see cref="P:System.Windows.UIElement.IsEnabled" /> 속성 값이 변경되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-732">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsEnabled" /> property on this element changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-733">이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트, 라우트된 이벤트가 아니라 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-733">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-734">파생 클래스에서 <see cref="P:System.Windows.UIElement.IsEnabled" />의 반환 값이 되는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-734">Gets a value that becomes the return value of <see cref="P:System.Windows.UIElement.IsEnabled" /> in derived classes.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-735">요소를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-735">
              <see langword="true" /> if the element is enabled; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="67f8b-736">이 속성의 기본 구현 값을 캐시 하 고도이 요소의 부모 요소를 사용할 수 있는지 여부를 계산 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-736">The default implementation of this property caches the value and also calculates whether the parent element of this element is enabled.</span>
            </span>
            <span data-ttu-id="67f8b-737">(부모를 사용 하지 않는 경우 자식 요소가 없습니다 사용 하도록 유용한 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].) 이 구현을 재정의 확인 하려는 경우이 동작을 유지 하는 기본 구현을 호출 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-737">(If the parent is not enabled, the child element cannot be effectively enabled in practical [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].) If you choose to override this implementation, make certain that you call the base implementation to preserve this behavior.</span>
            </span>
            <span data-ttu-id="67f8b-738">
              <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> 클래스는이 속성의 기존 재정의 구현을 제공 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-738">The <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> class provides an existing override implementation of this property.</span>
            </span>
            <span data-ttu-id="67f8b-739">이 재정의 콘텐츠 표시 영역 내에서 콘텐츠 사용할 수 있는 영역을 초과 하는지 여부를 결정 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-739">This override determines whether the content inside the content presentation area exceeds the available area.</span>
            </span>
            <span data-ttu-id="67f8b-740">콘텐츠 영역을 초과 하는 스크롤 막대 부분이 사용 됩니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-740">If the content does exceed the area, the scrollbar portion is enabled.</span>
            </span>
            <span data-ttu-id="67f8b-741">그렇지 않은 경우 스크롤 막대 사용 되지 않습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-741">Otherwise, the scrollbar is not enabled.</span>
            </span>
          </para>
        </block>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
        <altmember cref="P:System.Windows.UIElement.IsEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-742">
            <see cref="P:System.Windows.UIElement.IsEnabled" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-742">Identifies the <see cref="P:System.Windows.UIElement.IsEnabled" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-743">이 요소에 논리 포커스가 있는지 여부를 결정하는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-743">Gets a value that determines whether this element has logical focus.</span>
          </span>
          <span data-ttu-id="67f8b-744">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-744">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-745">이 요소에 논리적 포커스가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-745">
              <see langword="true" /> if this element has logical focus; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-746">응용 프로그램에 여러 포커스 부서와 같은 응용 프로그램의 나머지 부분에서는 메뉴 내용 사이의 논리적 포커스와 키보드 포커스가 달라질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-746">Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application.</span></span> <span data-ttu-id="67f8b-747">이 시나리오에서는 응용 프로그램 UI의 한 요소에 키보드 포커스만 될 수 있습니다, 그리고 다른 포커스 사업부의 특정 요소 논리적 포커스 수 계속 유지 하는 반면 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-747">In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus.</span></span> <span data-ttu-id="67f8b-748">논리 포커스에 대 한 자세한 내용은 참조 하십시오. [포커스 개요](~/docs/framework/wpf/advanced/focus-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-748">For more information on logical focus, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="67f8b-749">(읽기 전용은)이이 속성을 설정 하 여 포커스를 설정 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-749">You do not set focus by setting this property (it is read-only).</span></span> <span data-ttu-id="67f8b-750">이 속성에 대 한 일반적인 용도 대 한 종속성 속성으로 사용 하는 것을 <xref:System.Windows.Setter> 또는 <xref:System.Windows.EventTrigger>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-750">The typical use for this property is to use it as a dependency property for a <xref:System.Windows.Setter> or <xref:System.Windows.EventTrigger>.</span></span> <span data-ttu-id="67f8b-751">프로그래밍 방식으로 포커스를 설정 하려면 호출 <xref:System.Windows.UIElement.Focus%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-751">To set focus programmatically, call <xref:System.Windows.UIElement.Focus%2A>.</span></span> <span data-ttu-id="67f8b-752">사용자 동작으로 나 가능 마우스 캡처의 동작을 포함 하는 컨트롤 구현으로 포커스를 설정할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-752">Focus can also be set by user action or by control implementations, which possibly include mouse capture behavior.</span></span>  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-753">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-753">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-754">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-754">Identifier field</span></span>|<xref:System.Windows.UIElement.IsFocusedProperty>|  
|<span data-ttu-id="67f8b-755">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-755">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-756">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-756">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-757">다음 예제는 것에 포커스가 있을 때 컨트롤의 배경을 변경 하는 코드 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-757">The following example is a code handler that changes the background of a control when it is focused.</span></span>  
  
 [!code-csharp[PopupSimple#IsFocused](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSimple/CSharp/Window1.xaml.cs#isfocused)]  
  
 <span data-ttu-id="67f8b-758">이를 위해서는 동일한 다른 일반적인 방법은 배치 하는 것을 <xref:System.Windows.Trigger> 에 <xref:System.Windows.Style> ; 컨트롤의이 방법은 코드 숨김 특정 이벤트를 처리 하지 않아도 및 디자이너의 대화형 및 그래픽 특성에 보다 쉽게 액세스할 수 있습니다 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-758">Another common way to achieve this same effect is to place a <xref:System.Windows.Trigger> in the <xref:System.Windows.Style> of a control; this approach does not require handling specific events with code-behind and allows designers greater access to the interactive and graphical nature of the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span> <span data-ttu-id="67f8b-759">예를 들어 참조 [하는 방법: 외부 글로우 효과 만드는](http://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-759">For an example, see [How to: Create an Outer Glow Effect](http://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-760">
            <see cref="P:System.Windows.UIElement.IsFocused" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-760">Identifies the <see cref="P:System.Windows.UIElement.IsFocused" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisible">
      <MemberSignature Language="C#" Value="public bool IsHitTestVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHitTestVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsHitTestVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property IsHitTestVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHitTestVisible { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-761">이 요소가 렌더링된 콘텐츠의 일부에서 롤오버 테스트 결과로 반환될 수 있는지 여부를 선언하는 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-761">Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content.</span>
          </span>
          <span data-ttu-id="67f8b-762">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-762">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-763">이 요소가 최소한 하나 이상의 지점에서 적중 테스트 결과로 반환될 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-763">
              <see langword="true" /> if this element could be returned as a hit test result from at least one point; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="67f8b-764">기본값은 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-764">The default value is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-765">이 속성의 유효 값은 논리적 트리에서 적중 횟수 테스트 가능한 요소의 상대적 위치를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-765">The effective value of this property is influenced by the relative positions of hit testable elements in the logical tree.</span></span> <span data-ttu-id="67f8b-766">자식 요소인 요소가 있는 요소를 적중 테스트를 표시 하, 자식 요소에서 속성의 유효 값이 유지 됩니다 예를 들어, `false`로컬로 해당 값을 설정 하는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-766">For instance, if an element is a child element of an element that is not hit test visible, the effective value of the property on the child will remain `false`, even if attempting to set that value locally.</span></span> <span data-ttu-id="67f8b-767">이러한 이유로 반드시 설정 하지 않으면 <xref:System.Windows.UIElement.IsHitTestVisible%2A> 를 `false` 복합 컨트롤에 입력 하거나 해당 컨트롤에 대 한 테스트에 도달 하지 않으면 하지 않는 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-767">For this reason, it is important that you do not set <xref:System.Windows.UIElement.IsHitTestVisible%2A> to `false` on a composited control unless you do not want any input or hit testing on that control.</span></span> <span data-ttu-id="67f8b-768">적중 테스트에 대한 자세한 내용은 [시각적 계층에서 테스트 적중](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="67f8b-768">For more information on hit testing, see [Hit Testing in the Visual Layer](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsHitTestVisible"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-769">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-769">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-770">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-770">Identifier field</span></span>|<xref:System.Windows.UIElement.IsHitTestVisibleProperty>|  
|<span data-ttu-id="67f8b-771">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-771">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-772">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-772">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsHitTestVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsHitTestVisibleChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-773">이 요소의 <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> 종속성 속성 값이 변경되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-773">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-774">이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트, 라우트된 이벤트가 아니라 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-774">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsHitTestVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsHitTestVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHitTestVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsHitTestVisibleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-775">
            <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-775">Identifies the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-776">[!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)] 등의 입력 메서드 시스템에서 이 요소에 대한 입력을 처리할 수 있는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-776">Gets a value indicating whether an input method system, such as an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)],  is enabled for processing the input to this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-777">입력 메서드가 활성 상태이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-777">
              <see langword="true" /> if an input method is active; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="67f8b-778">그러나 기본 연결 된 속성의 기본값은 <see langword="true;" /> 런타임에 입력된 방법의 실제 상태에 따라 달라 집니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-778">The default value of the underlying attached property is <see langword="true;" /> however, this will be influenced by the actual state of input methods at runtime.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-779">이 속성은 연결 된 속성에서 반환 되는 값을 반환 <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> 현재 활성화 된 입력된 방법 (키보드, 음성 변환, 및 기타 입력된 장치)에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-779">This property returns the value that is returned by the attached property <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> for the currently enabled input methods (keyboard, speech, and other input devices).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-780">이 요소에 키보드 포커스가 있는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-780">Gets a value indicating whether this element has keyboard focus.</span>
          </span>
          <span data-ttu-id="67f8b-781">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-781">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-782">이 요소에 키보드 포커스가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-782">
              <see langword="true" /> if this element has keyboard focus; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="67f8b-783">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-783">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-784">이 속성의 결정된 된 값에 대 한 변경 포커스 관련 이벤트 표시 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-784">Changes to the determined value of this property may be accompanied by focus-related events.</span></span>  
  
 <span data-ttu-id="67f8b-785"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> 및 <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> 일반적으로 사용 되 클래스 이벤트 처리기 내에서 다른 입력 관련 이벤트에 대 한 예를 들어 요소에 키보드 포커스를 이미 되거나 마우스 하는지를 결정 하는 이벤트 및 키보드 이벤트 함께 발생 하는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-785"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are commonly used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</span></span>  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-786">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-786">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-787">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-787">Identifier field</span></span>|<xref:System.Windows.UIElement.IsKeyboardFocusedProperty>|  
|<span data-ttu-id="67f8b-788">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-788">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-789">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-789">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
        <altmember cref="E:System.Windows.UIElement.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-790">이 요소의 <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> 속성 값이 변경되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-790">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-791">이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트, 라우트된 이벤트가 아니라 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-791">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-792">
            <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-792">Identifies the <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-793">키보드 포커스가 요소 또는 시각적 트리의 자식 요소 내에 있는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-793">Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.</span>
          </span>
          <span data-ttu-id="67f8b-794">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-794">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-795">키보드 포커스가 요소 또는 자식 요소에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-795">
              <see langword="true" /> if keyboard focus is on the element or its child elements; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-796">이 속성의 값을 변경 하는 일반적으로 발생는 <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> 이벤트의 경우 파생된 클래스 재정의 하지 않았다면 <xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A> 이벤트를 표시 하지 않으려면입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-796">Changes to the value of this property typically raise the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event, unless a derived class has overridden <xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A> to suppress the event.</span></span>  
  
 <span data-ttu-id="67f8b-797">이 속성은 직접 설정 하지는 않지만 호출 하 여 요소에 포커스를 설정할 수 <xref:System.Windows.UIElement.Focus%2A>, 하거나 여는 <xref:System.Windows.UIElement.MoveFocus%2A> 요청 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-797">You do not set this property directly, but you can set the focus to an element by calling <xref:System.Windows.UIElement.Focus%2A>, or by making a <xref:System.Windows.UIElement.MoveFocus%2A> request.</span></span> <span data-ttu-id="67f8b-798">이 속성 값이 변경 될 수 있습니다 이러한 메서드 호출 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-798">Either of these method calls might change this property value.</span></span>  
  
 <span data-ttu-id="67f8b-799"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> 및 <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> 는 일반적으로 사용 되는 클래스의 이벤트 처리기 내에서 다른 입력 관련 이벤트에 대 한 예를 들어 요소에 키보드 포커스를 이미 되거나 마우스 하는지를 결정 하는 이벤트 및 키보드 이벤트 함께 발생 하는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-799"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are typically used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</span></span>  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-800">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-800">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-801">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-801">Identifier field</span></span>|<xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty>|  
|<span data-ttu-id="67f8b-802">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-802">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-803">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-803">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-804">이 요소의 <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> 속성 값이 변경되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-804">Occurs when the value of the <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-805">이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트, 라우트된 이벤트가 아니라 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-805">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-806">
            <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-806">Identifies the <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabled">
      <MemberSignature Language="C#" Value="public bool IsManipulationEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsManipulationEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsManipulationEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsManipulationEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsManipulationEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-807">이 <see cref="T:System.Windows.UIElement" /> 요소에서 조작 이벤트가 사용되는지 여부를 나타내는 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-807">Gets or sets a value that indicates whether manipulation events are enabled on this <see cref="T:System.Windows.UIElement" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-808">이 <see cref="T:System.Windows.UIElement" />에서 조작 이벤트가 사용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-808">
              <see langword="true" /> if manipulation events are enabled on this <see cref="T:System.Windows.UIElement" />; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="67f8b-809">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-809">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-810">이 속성을 원하는 경우 true로 설정 된 <xref:System.Windows.UIElement> 받을 수는 <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationStarted>, <xref:System.Windows.UIElement.ManipulationDelta>, <xref:System.Windows.UIElement.ManipulationInertiaStarting>, <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>, 및 <xref:System.Windows.UIElement.ManipulationCompleted> 이벤트.</span><span class="sxs-lookup"><span data-stu-id="67f8b-810">Set this property to true if you want the <xref:System.Windows.UIElement> to receive the <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationStarted>, <xref:System.Windows.UIElement.ManipulationDelta>, <xref:System.Windows.UIElement.ManipulationInertiaStarting>, <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>, and <xref:System.Windows.UIElement.ManipulationCompleted> events.</span></span> <span data-ttu-id="67f8b-811">조작에 대 한 자세한 내용은 참조는 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-811">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="67f8b-812">예를 보려면 조작에 응답 하는 응용 프로그램 참조 [연습: 만드는 첫 번째 터치 응용 프로그램](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-812">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-813">다음 예제에는 빨간색 사각형을는 응용 프로그램을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-813">The following example creates an application that has a red Rectangle.</span></span>  <span data-ttu-id="67f8b-814"><xref:System.Windows.UIElement.IsManipulationEnabled%2A> 사각형의 속성이 true이 고 응용 프로그램의 창 구독 하는 <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationDelta>, 및 <xref:System.Windows.UIElement.ManipulationInertiaStarting> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-814">The <xref:System.Windows.UIElement.IsManipulationEnabled%2A> property of the Rectangle is set to true and the application's window subscribes to the <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationDelta>, and <xref:System.Windows.UIElement.ManipulationInertiaStarting> events.</span></span> <span data-ttu-id="67f8b-815">이 예제는에 보다 큰 예제의 일부 [연습: 만드는 첫 번째 터치 응용 프로그램](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-815">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-xaml[BasicManipulation#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsManipulationEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsManipulationEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsManipulationEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsManipulationEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsManipulationEnabledProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-816">
            <see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-816">Identifies the <see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMeasureValid">
      <MemberSignature Language="C#" Value="public bool IsMeasureValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMeasureValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMeasureValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMeasureValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMeasureValid { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-817">레이아웃 측정으로 반환된 현재 크기가 올바른지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-817">Gets a value indicating whether the current size returned by layout measure is valid.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-818">레이아웃의 측정 처리 단계에서 올바른 최신 값이 반환되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-818">
              <see langword="true" /> if the measure pass of layout returned a valid and current value; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-819">측정 및 정렬이를 호출 하 여 무효화 강제로 수 <xref:System.Windows.UIElement.InvalidateMeasure%2A> 이 요소 (또는 시각적 트리를 상위 요소).</span><span class="sxs-lookup"><span data-stu-id="67f8b-819">You can force measurement and arrangement to be invalidated by calling <xref:System.Windows.UIElement.InvalidateMeasure%2A> on this element (or any parent element up the visual tree).</span></span> <span data-ttu-id="67f8b-820">이렇게 지정 재 컴퍼지션에 대 한 레이아웃 비동기적으로 레이아웃 시스템에 의해 결정 되는 시간에 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-820">This designates the layout for recomposition asynchronously, occurring at a time determined by the layout system.</span></span> <span data-ttu-id="67f8b-821">직접 호출을 만들 수 또는 <xref:System.Windows.UIElement.UpdateLayout%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-821">Alternatively, you could make an immediate call to <xref:System.Windows.UIElement.UpdateLayout%2A>.</span></span> <span data-ttu-id="67f8b-822">하지만만 호출 해야 <xref:System.Windows.UIElement.UpdateLayout%2A> 때문에 보류 중인 추가 무효화 작업이 없는 것일 (불필요 하 게 강제 업데이트 수가 많은 성능 영향을 줄 합니다).</span><span class="sxs-lookup"><span data-stu-id="67f8b-822">However, you should only call <xref:System.Windows.UIElement.UpdateLayout%2A> if it is likely that no further invalidations are pending (a large number of unnecessarily forced updates will have performance consequences).</span></span>  
  
 <span data-ttu-id="67f8b-823">경우 <xref:System.Windows.UIElement.IsMeasureValid%2A> 은 `false`, <xref:System.Windows.UIElement.IsArrangeValid%2A> 수도 있어야 `false` (레이아웃 프로세스의 적용된 하는 논리를 통해 수 없는 경우가).</span><span class="sxs-lookup"><span data-stu-id="67f8b-823">If <xref:System.Windows.UIElement.IsMeasureValid%2A> is `false`, <xref:System.Windows.UIElement.IsArrangeValid%2A> must also be `false` (by the enforced logic of the layout process, arrangement cannot be valid without measurement first being valid).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-824">이 요소에 마우스가 캡처되는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-824">Gets a value indicating whether the mouse is captured to this element.</span>
          </span>
          <span data-ttu-id="67f8b-825">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-825">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-826">요소에 마우스가 캡처되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-826">
              <see langword="true" /> if the element has mouse capture; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="67f8b-827">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-827">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-828">마우스 캡처 상태는 in-process 끌어서 놓기 작업 관련이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-828">Mouse capture state is related to in-process drag-and-drop operations.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-829">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-829">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-830">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-830">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseCapturedProperty>|  
|<span data-ttu-id="67f8b-831">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-831">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-832">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-832">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-833">다음 예제에서는 마우스 캡처 상태를 설정 또는 해제는 요소에 대해 이미 캡처되어 있는지 여부에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-833">The following example turns the mouse capture state on or off based on whether the mouse is already captured for the element.</span></span>  
  
 <span data-ttu-id="67f8b-834">마우스 캡처 이면, 다른 위치에서 해당 요소에 마우스 캡처가 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-834">If mouse capture is elsewhere, the mouse capture is set to that element.</span></span> <span data-ttu-id="67f8b-835">호출 하 여 선택 취소 됨 요소에 마우스 캡처가 있으면 <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> 는 null 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-835">If the element had mouse capture, it is cleared by calling <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> with a null input.</span></span>  
  
 [!code-csharp[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#ismousecaptured)]
 [!code-vb[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-836">이 요소의 <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> 속성 값이 변경되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-836">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-837">이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트, 라우트된 이벤트가 아니라 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-837">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-838">
            <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-838">Identifies the <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-839">마우스 캡처를 이 요소 또는 해당 시각적 트리의 자식 요소가 보유하는지 여부를 결정하는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-839">Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree.</span>
          </span>
          <span data-ttu-id="67f8b-840">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-840">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-841">이 요소 또는 포함된 요소에 마우스 캡처가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-841">
              <see langword="true" /> if this element or a contained element has mouse capture; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-842">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-842">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-843">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-843">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseCaptureWithinProperty>|  
|<span data-ttu-id="67f8b-844">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-844">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-845">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-845">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-846">이 요소의 <see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /> 값이 변경되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-846">Occurs when the value of the <see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /> changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-847">이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트, 라우트된 이벤트가 아니라 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-847">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-848">
            <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-848">Identifies the <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-849">마우스 포인터의 위치가 요소 합치기를 고려한 적중 횟수 테스트 결과와 일치하는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-849">Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.</span>
          </span>
          <span data-ttu-id="67f8b-850">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-850">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-851">
            <see langword="true" /> 마우스 포인터가 적중 횟수 테스트와 동일한 요소 결과 위에 있으면 그렇지 않으면 <see langword="false" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-851">
              <see langword="true" /> if the mouse pointer is over the same element result as a hit test; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="67f8b-852">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-852">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-853">와 달리 <xref:System.Windows.UIElement.IsMouseOver%2A>,이 속성은만 `true` 마우스 포인터가 literal 요소 위에 있으면-적중 횟수 테스트의 경우와 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-853">Unlike <xref:System.Windows.UIElement.IsMouseOver%2A>, this property is only `true` if the mouse pointer is over the literal element—as it is for a hit test.</span></span> <span data-ttu-id="67f8b-854">마우스 포인터가 자식 요소 위에 있으면 특히 요소의 하위 수준 템플릿 및 합성 포함 된 요소를 통해이 속성은 됩니다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-854">If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be `false`.</span></span> <span data-ttu-id="67f8b-855">컨트롤은 복합 방법을 모를 경우 (예를 들어이 속성 사용 하면 사용자 지정 컨트롤 서식 파일에서 정의 하는 컨트롤에 대 한),이 속성에서 예기치 않은 결과 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-855">Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</span></span> <span data-ttu-id="67f8b-856">컨트롤 제작 하지 않는 대부분의 시나리오에 대 한 사용 <xref:System.Windows.UIElement.IsMouseOver%2A> 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-856">For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement.IsMouseOver%2A> instead.</span></span>  
  
 <span data-ttu-id="67f8b-857">이 요소에 마우스가 캡처되는지 경우 및이 속성은 `true` 캡처 시이 속성은 반환할 계속 `true` 때까지 마우스 캡처가 손실 되 고 해당 영역 위에 포인터가 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-857">If the mouse is captured by this element, and this property is `true` at time of capture, this property will continue to return `true` until mouse capture is lost and the pointer is not over its bounds.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-858">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-858">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-859">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-859">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseDirectlyOverProperty>|  
|<span data-ttu-id="67f8b-860">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-860">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-861">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-861">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-862">이 요소의 <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> 속성 값이 변경되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-862">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-863">이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트, 라우트된 이벤트가 아니라 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-863">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-864">
            <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-864">Identifies the <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-865">마우스 포인터가 이 요소(시각적 트리의 자식 요소 포함) 위에 있는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-865">Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).</span>
          </span>
          <span data-ttu-id="67f8b-866">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-866">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-867">마우스 포인터가 요소 또는 자식 요소 위에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-867">
              <see langword="true" /> if mouse pointer is over the element or its child elements; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="67f8b-868">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-868">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-869">일반적으로 컨트롤은 컨트롤 (시각적 트리) 내의 다양 한 요소가 모두 포함 하는 컨트롤에 대 한 마우스 상태 보고 되도록 합성입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-869">Typically, controls are composited such that the various elements inside the control (the visual tree) will all report the mouse state for the containing control.</span></span> <span data-ttu-id="67f8b-870">예를 들어는 <xref:System.Windows.Controls.ListBox> 스타일의 컨트롤에서 보고 <xref:System.Windows.UIElement.IsMouseOver%2A> 으로 `true` 기 위에 마우스가 위치 하는 경우 포함 하 여 <xref:System.Windows.Controls.ListBoxItem>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-870">For example, a <xref:System.Windows.Controls.ListBox> style control will report <xref:System.Windows.UIElement.IsMouseOver%2A> as `true` if the mouse is anywhere over its geometry, including any <xref:System.Windows.Controls.ListBoxItem>.</span></span>  
  
 <span data-ttu-id="67f8b-871">유사한 "IsMouseOverChanged" 이벤트가 존재 하지 않더라도 여러 비슷한 이벤트 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-871">Although an analogous "IsMouseOverChanged" event does not exist, several similar events do.</span></span> <span data-ttu-id="67f8b-872">예를 들어 처리할 수 있습니다 <xref:System.Windows.UIElement.MouseEnter>, <xref:System.Windows.UIElement.MouseMove>, 및 <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-872">For example, you can handle <xref:System.Windows.UIElement.MouseEnter>, <xref:System.Windows.UIElement.MouseMove>, and <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.</span></span>  
  
 <span data-ttu-id="67f8b-873">이 속성은이 요소에서 마우스를 캡처할 경우 `true` 마우스 캡처가 손실 되 고 마우스 포인터가 요소 범위를 벗어날 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-873">If this element captures the mouse, this property remains `true` until mouse capture is lost and the mouse pointer leaves the element bounds.</span></span>  
  
 <span data-ttu-id="67f8b-874">일부 컨트롤 마우스에 직접 표시 되지 않는 특정 작업에서 마우스를 의도적으로 캡처합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-874">Some controls deliberately capture the mouse on certain actions that do not appear to directly involve the mouse.</span></span> <span data-ttu-id="67f8b-875">이로 인해 발생할 수 <xref:System.Windows.UIElement.IsMouseOver%2A> 되 고 `true` 마우스 움직이지 하는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-875">This can lead to <xref:System.Windows.UIElement.IsMouseOver%2A> being `true` even though the mouse has not apparently moved.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-876">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-876">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-877">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-877">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseOverProperty>|  
|<span data-ttu-id="67f8b-878">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-878">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-879">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-879">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-880">다음 예제에서는이 속성을 속성 유형으로 참조 한 <xref:System.Windows.Trigger>의 일부인는 \<Style.Triggers > 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-880">The following example references this property as the property type of a <xref:System.Windows.Trigger>, part of a \<Style.Triggers> block.</span></span> <span data-ttu-id="67f8b-881">마우스가 컨트롤 위에 컨트롤 텍스트가 파란색으로 바뀌고 커서가 손 모양입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-881">If the mouse is over the control, the control text turns blue and the cursor becomes a hand.</span></span>  
  
 [!code-xaml[ListViewChkBox#Trigger](~/samples/snippets/csharp/VS_Snippets_Wpf/ListViewChkBox/CS/window1.xaml#trigger)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-882">
            <see cref="P:System.Windows.UIElement.IsMouseOver" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-882">Identifies the <see cref="P:System.Windows.UIElement.IsMouseOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-883">이 요소에 의해 스타일러스가 캡처되었는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-883">Gets a value indicating whether the stylus is captured by this element.</span>
          </span>
          <span data-ttu-id="67f8b-884">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-884">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-885">요소에 스타일러스가 캡처되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-885">
              <see langword="true" /> if the element has stylus capture; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="67f8b-886">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-886">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-887">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-887">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-888">자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-888">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-889">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-889">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-890">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-890">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusCapturedProperty>|  
|<span data-ttu-id="67f8b-891">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-891">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-892">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-892">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-893">이 요소의 <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> 속성 값이 변경되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-893">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-894">이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트, 라우트된 이벤트가 아니라 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-894">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-895">
            <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-895">Identifies the <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-896">스타일러스 캡처를 이 요소에서 보유하는지 또는 요소 범위 및 해당하는 시각적 트리 내의 요소에서 보유하는지 결정하는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-896">Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree.</span>
          </span>
          <span data-ttu-id="67f8b-897">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-897">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-898">이 요소 또는 포함된 요소에 스타일러스 캡처가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-898">
              <see langword="true" /> if this element or a contained element has stylus capture; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="67f8b-899">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-899">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-900">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-900">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-901">자세한 내용은 참조 [Windows Vista의 입력 지원 터치](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) 및 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-901">For more information, see [Touch Input Support in Windows Vista](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-902">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-902">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-903">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-903">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusCaptureWithinProperty>|  
|<span data-ttu-id="67f8b-904">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-904">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-905">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-905">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="P:System.Windows.UIElement.IsStylusCaptured" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-906">이 요소의 <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> 속성 값이 변경되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-906">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-907">이 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트, 라우트된 이벤트가 아니라 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-907">This is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-908">
            <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-908">Identifies the <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-909">스타일러스의 위치가 요소 합치기를 고려한 적중 횟수 테스트 결과와 일치하는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-909">Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.</span>
          </span>
          <span data-ttu-id="67f8b-910">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-910">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-911">스타일러스 포인터가 적중 테스트와 같은 요소 결과 위에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-911">
              <see langword="true" /> if the stylus pointer is over the same element result as a hit test; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="67f8b-912">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-912">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-913">와 달리 <xref:System.Windows.UIElement.IsStylusOver%2A>,이 속성은만 `true` 스타일러스가 요소 위에 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="67f8b-913">Unlike <xref:System.Windows.UIElement.IsStylusOver%2A>, this property is only `true` if the stylus is over the element.</span></span> <span data-ttu-id="67f8b-914">스타일러스가 요소의 깊은 합성 (시각적 트리)에 있는 요소 또는 자식 요소 위에 있는 경우이 속성은 됩니다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-914">If the stylus is instead over a child element or over elements that are part of an element's deeper compositing (the visual tree), this property will be `false`.</span></span>  
  
 <span data-ttu-id="67f8b-915">컨트롤은 복합 방법을 모를 경우 (예를 들어이 속성 사용 하면 사용자 지정 컨트롤 서식 파일에서 정의 하는 컨트롤에 대 한),이 속성에서 예기치 않은 결과 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-915">Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</span></span> <span data-ttu-id="67f8b-916">컨트롤 제작 하지 않는 대부분의 시나리오에 대 한 사용 <xref:System.Windows.UIElement.IsStylusOver%2A> 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-916">For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement.IsStylusOver%2A> instead.</span></span>  
  
 <span data-ttu-id="67f8b-917">이 속성은이 요소에 스타일러스 캡처가 경우 `true` 캡처 시이 속성은 `true` 스타일러스 캡처를 손실 하 고는 스타일러스가 범위 위로 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-917">If this element has stylus capture and this property is `true` at the time of capture, this property remains `true` until stylus capture is lost and the stylus is not over its bounds.</span></span>  
  
 <span data-ttu-id="67f8b-918">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-918">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-919">자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-919">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-920">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-920">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-921">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-921">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusDirectlyOverProperty>|  
|<span data-ttu-id="67f8b-922">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-922">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-923">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-923">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-924">이 요소의 <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> 속성 값이 변경되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-924">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-925">이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트, 라우트된 이벤트가 아니라 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-925">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-926">
            <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-926">Identifies the <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-927">스타일러스 커서가 이 요소(시각적 자식 요소 포함) 위에 있는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-927">Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).</span>
          </span>
          <span data-ttu-id="67f8b-928">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-928">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-929">스타일러스 커서가 요소 또는 자식 요소 위에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-929">
              <see langword="true" /> if stylus cursor is over the element or its child elements; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="67f8b-930">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-930">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-931">이 요소에 스타일러스 캡처가 있는 경우이 속성은 반환할 계속 `true` 스타일러스 캡처를 손실 하 고 포인터의 범위를 벗어났습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-931">If this element has stylus capture, this property will continue to return `true` until stylus capture is lost and the pointer is out of its bounds.</span></span>  
  
 <span data-ttu-id="67f8b-932">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-932">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-933">자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-933">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-934">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-934">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-935">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-935">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusOverProperty>|  
|<span data-ttu-id="67f8b-936">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-936">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-937">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-937">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-938">
            <see cref="P:System.Windows.UIElement.IsStylusOver" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-938">Identifies the <see cref="P:System.Windows.UIElement.IsStylusOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-939">이 요소가 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]에 표시되는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-939">Gets a value indicating whether this element is visible in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span>
          </span>
          <span data-ttu-id="67f8b-940">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-940">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-941">요소가 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-941">
              <see langword="true" /> if the element is visible; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-942">결정은 <xref:System.Windows.UIElement.IsVisible%2A> 값 레이아웃의 모든 요소를 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-942">Determination of the <xref:System.Windows.UIElement.IsVisible%2A> value takes all factors of layout into account.</span></span> <span data-ttu-id="67f8b-943">반면, <xref:System.Windows.UIElement.Visibility%2A>를 프로그래밍 방식으로 요소 표시 되거나 숨겨지도록 설정 하려는 의도 표시만 설정할 수 있는 속성인 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-943">In contrast, <xref:System.Windows.UIElement.Visibility%2A>, which is a settable property, only indicates the intention to programmatically make an element visible or invisible.</span></span>  
  
 <span data-ttu-id="67f8b-944">요소 위치 <xref:System.Windows.UIElement.IsVisible%2A> 은 `false` 입력된 이벤트 (또는 명령)에 참여을 수행 하지 않는 하지 측정에 영향을 줄 또는 정렬 전달 레이아웃의, 포커스를 받을 수, 탭 순서에 없는 및 적중 테스트에 보고 되지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-944">Elements where <xref:System.Windows.UIElement.IsVisible%2A> is `false` do not participate in input events (or commands), do not influence either the measure or arrange passes of layout, are not focusable, are not in a tab sequence, and will not be reported in hit testing.</span></span> <span data-ttu-id="67f8b-945">반대로, 요소 위치 <xref:System.Windows.UIElement.IsEnabled%2A> 은 `false` 이벤트 및 명령 및 적중 테스트에 관여 하면서도 하지 포커스를 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-945">In contrast, elements where <xref:System.Windows.UIElement.IsEnabled%2A> is `false` will still participate in events and commands, and hit testing, but are also not focusable.</span></span>  
  
<a name="dependencyPropertyInfo_IsVisible"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-946">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-946">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-947">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-947">Identifier field</span></span>|<xref:System.Windows.UIElement.IsVisibleProperty>|  
|<span data-ttu-id="67f8b-948">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-948">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-949">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-949">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsVisibleChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-950">이 요소의 <see cref="P:System.Windows.UIElement.IsVisible" /> 속성 값이 변경되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-950">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsVisible" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-951">요소 레이아웃 시스템의 값이 아닌 다른 이유로 렌더링 되지 않으면 경우이 이벤트가 발생 하지 않습니다는 <xref:System.Windows.UIElement.IsVisible%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-951">This event is not raised if the element is not being rendered by the layout system, for reasons other than the value of the <xref:System.Windows.UIElement.IsVisible%2A> property.</span></span> <span data-ttu-id="67f8b-952">예를 들어 요소에 연결 된 표시가 없을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-952">For example, the element might not have an associated visual.</span></span>  
  
 <span data-ttu-id="67f8b-953">이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트, 라우트된 이벤트가 아니라 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-953">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsVisibleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-954">
            <see cref="P:System.Windows.UIElement.IsVisible" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-954">Identifies the <see cref="P:System.Windows.UIElement.IsVisible" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-955">이 요소에 포커스가 있는 동안 키를 누르면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-955">Occurs when a key is pressed while focus is on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-956">키 처리 명령 및 텍스트 컴퍼지션 등 다른 플랫폼의 기능으로 작용합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-956">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="67f8b-957"><xref:System.Windows.UIElement.KeyDown> 이벤트는 하위 수준의 텍스트 입력된 이벤트를 특정 컨트롤에 예상 대로 동작 하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-957">The <xref:System.Windows.UIElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="67f8b-958">일부 컨트롤은 컨트롤 합성 클래스 처리에 더 높은 수준의 버전의 텍스트를 제공 하는 입력 처리 및 관련 이벤트 또는 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-958">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span>  
  
 <span data-ttu-id="67f8b-959">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.KeyDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-959">This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.KeyDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-960">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.KeyDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-960">Event handlers that are attached to the <xref:System.Windows.UIElement.KeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-961">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-961">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-962">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-962">Identifier field</span></span>|<xref:System.Windows.UIElement.KeyDownEvent>|  
|<span data-ttu-id="67f8b-963">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-963">Routing strategy</span></span>|<span data-ttu-id="67f8b-964">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-964">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-965">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-965">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="67f8b-966">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewKeyDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-966">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewKeyDown>.</span></span>  
  
-   <span data-ttu-id="67f8b-967">재정의 <xref:System.Windows.UIElement.OnKeyDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-967">Override <xref:System.Windows.UIElement.OnKeyDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-968">
            <see cref="E:System.Windows.UIElement.KeyDown" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-968">Identifies the <see cref="E:System.Windows.UIElement.KeyDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-969">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-969">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-970">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-970">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-971">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-971">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-972">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-972">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-973">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-973">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-974">이 요소에 포커스가 있는 동안 키를 놓을 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-974">Occurs when a key is released while focus is on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-975">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.KeyUp> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-975">This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event for this class so that  <xref:System.Windows.UIElement.KeyUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-976">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.KeyUp> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-976">Event handlers that are attached to the <xref:System.Windows.UIElement.KeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-977">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-977">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-978">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-978">Identifier field</span></span>|<xref:System.Windows.UIElement.KeyUpEvent>|  
|<span data-ttu-id="67f8b-979">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-979">Routing strategy</span></span>|<span data-ttu-id="67f8b-980">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-980">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-981">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-981">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="67f8b-982">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewKeyUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-982">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewKeyUp>.</span></span>  
  
-   <span data-ttu-id="67f8b-983">재정의 <xref:System.Windows.UIElement.OnKeyUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-983">Override <xref:System.Windows.UIElement.OnKeyUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-984">
            <see cref="E:System.Windows.UIElement.KeyUp" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-984">Identifies the <see cref="E:System.Windows.UIElement.KeyUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-985">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-985">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-986">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-986">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-987">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-987">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-988">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-988">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-989">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-989">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler LayoutUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LayoutUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LayoutUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LayoutUpdated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LayoutUpdated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-990">현재 <see cref="T:System.Windows.Threading.Dispatcher" />와 연결된 다양한 시각적 요소의 레이아웃이 변경되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-990">Occurs when the layout of the various visual elements associated with the current <see cref="T:System.Windows.Threading.Dispatcher" /> changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-991">레이아웃 업데이트 속성 변경, 창 크기 조정 또는 명시적인 사용자 요청으로 인해 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-991">A layout update can occur as a result of a property change, a window resize, or an explicit user request.</span></span>  
  
 <span data-ttu-id="67f8b-992">이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트, 라우트된 이벤트가 아니라 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-992">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-993">이 요소가 논리 포커스를 손실하면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-993">Occurs when this element loses logical focus.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-994">메서드 호출을 사용하여 의도적으로 포커스를 다른 위치로 이동했지만 이전 키보드 포커스가 다른 범위에 존재하는 경우 논리적 포커스와 키보드 포커스가 달라집니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-994">Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope.</span></span> <span data-ttu-id="67f8b-995">이 시나리오, 키보드 포커스 위치를 유지, 및 요소에 있는 한 <xref:System.Windows.UIElement.Focus%2A> 메서드는 여전히 논리적 포커스를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-995">In this scenario, keyboard focus remains where it is, and the element where a <xref:System.Windows.UIElement.Focus%2A> method is called still gets logical focus.</span></span>  
  
 <span data-ttu-id="67f8b-996">이 이벤트의 보다 정확 하 게 설명은 발생할 때의 값은 <xref:System.Windows.UIElement.IsFocused%2A> 에서 경로에 있는 요소의 속성 변경 `true` 를 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-996">A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement.IsFocused%2A> property of an element in the route changes from `true` to `false`.</span></span>  
  
 <span data-ttu-id="67f8b-997">이 이벤트는 버블링 라우팅을 사용 하므로 포커스를 손실 하는 요소는 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-997">Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="67f8b-998">확인은 <xref:System.Windows.RoutedEventArgs.Source%2A> 에 포커스가 있는 실제 요소를 확인 하기 위해 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-998">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.</span></span>  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-999">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-999">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-1000">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-1000">Identifier field</span></span>|<xref:System.Windows.UIElement.LostFocusEvent>|  
|<span data-ttu-id="67f8b-1001">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-1001">Routing strategy</span></span>|<span data-ttu-id="67f8b-1002">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-1002">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-1003">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-1003">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
-   <span data-ttu-id="67f8b-1004">해당 터널링 이벤트가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1004">There is no corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="67f8b-1005">재정의 <xref:System.Windows.UIElement.OnLostFocus%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1005">Override <xref:System.Windows.UIElement.OnLostFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1006">
            <see cref="E:System.Windows.UIElement.LostFocus" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1006">Identifies the <see cref="E:System.Windows.UIElement.LostFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1007">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1007">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-1008">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1008">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-1009">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1009">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-1010">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1010">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-1011">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1011">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1012">이 요소에 더 이상 키보드 포커스가 없으면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1012">Occurs when the keyboard is no longer focused on this element,.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1013">이 이벤트는 버블링 라우팅을 사용 하므로 포커스를 잃은 요소 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1013">Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="67f8b-1014">확인은 <xref:System.Windows.RoutedEventArgs.Source%2A> 에 포커스를 잃은 실제 요소를 확인 하기 위해 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1014">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="67f8b-1015">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.LostKeyboardFocus> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1015">This event creates an alias for the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.LostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-1016">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.LostKeyboardFocus> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1016">Event handlers that are attached to the <xref:System.Windows.UIElement.LostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-1017">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-1017">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-1018">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-1018">Identifier field</span></span>|<xref:System.Windows.UIElement.LostKeyboardFocusEvent>|  
|<span data-ttu-id="67f8b-1019">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-1019">Routing strategy</span></span>|<span data-ttu-id="67f8b-1020">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-1020">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-1021">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-1021">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="67f8b-1022">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1022">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="67f8b-1023">재정의 <xref:System.Windows.UIElement.OnLostKeyboardFocus%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1023">Override <xref:System.Windows.UIElement.OnLostKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1024">
            <see cref="E:System.Windows.UIElement.LostKeyboardFocus" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1024">Identifies the <see cref="E:System.Windows.UIElement.LostKeyboardFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1025">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1025">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-1026">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1026">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-1027">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1027">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-1028">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1028">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-1029">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1029">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1030">이 요소가 마우스 캡처를 손실하면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1030">Occurs when this element loses mouse capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1031">마우스를 캡처한 요소 포인터가 해당 경계 밖에 있는 경우에 마우스 입력을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1031">When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="67f8b-1032">마우스는 끌어서 놓기 작업 중에 일반적으로 캡처됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1032">The mouse is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="67f8b-1033">이 이벤트는 버블링 라우팅을 사용 하므로 캡처를 손실 하는 요소는 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1033">Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="67f8b-1034">확인 된 <xref:System.Windows.RoutedEventArgs.Source%2A> 이벤트 데이터 캡처를 손실 하는 실제 요소를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1034">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost capture.</span></span>  
  
 <span data-ttu-id="67f8b-1035">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.LostMouseCapture> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1035">This event creates an alias for the <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.LostMouseCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-1036">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.LostMouseCapture> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1036">Event handlers that are attached to the <xref:System.Windows.UIElement.LostMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-1037">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-1037">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-1038">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-1038">Identifier field</span></span>|<xref:System.Windows.UIElement.LostMouseCaptureEvent>|  
|<span data-ttu-id="67f8b-1039">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-1039">Routing strategy</span></span>|<span data-ttu-id="67f8b-1040">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-1040">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-1041">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-1041">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="67f8b-1042">정의 된 해당 터널링 이벤트가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1042">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="67f8b-1043">재정의 <xref:System.Windows.UIElement.OnLostMouseCapture%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1043">Override <xref:System.Windows.UIElement.OnLostMouseCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1044">
            <see cref="E:System.Windows.UIElement.LostMouseCapture" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1044">Identifies the <see cref="E:System.Windows.UIElement.LostMouseCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1045">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1045">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-1046">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1046">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-1047">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1047">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-1048">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1048">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-1049">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1049">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1050">이 요소가 스타일러스 캡처를 손실하면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1050">Occurs when this element loses stylus capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1051">스타일러스를 캡처한 요소 포인터가 해당 경계 밖에 있는 경우에 스타일러스 입력을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1051">When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="67f8b-1052">스타일러스가 일반적으로 끌어서 놓기 작업 중에 캡처됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1052">The stylus is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="67f8b-1053">이 이벤트는 버블링 라우팅을 사용 하므로 포커스를 손실 하는 요소는 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1053">Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="67f8b-1054">확인은 <xref:System.Windows.RoutedEventArgs.Source%2A> 에 포커스를 잃은 실제 요소를 확인 하기 위해 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1054">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="67f8b-1055">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.LostStylusCapture> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1055">This event creates an alias for the <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.LostStylusCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-1056">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.LostStylusCapture> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1056">Event handlers that are attached to the <xref:System.Windows.UIElement.LostStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-1057">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-1057">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-1058">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-1058">Identifier field</span></span>|<xref:System.Windows.UIElement.LostStylusCaptureEvent>|  
|<span data-ttu-id="67f8b-1059">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-1059">Routing strategy</span></span>|<span data-ttu-id="67f8b-1060">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-1060">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-1061">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-1061">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="67f8b-1062">정의 된 해당 터널링 이벤트가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1062">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="67f8b-1063">재정의 <xref:System.Windows.UIElement.OnLostStylusCapture%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1063">Override <xref:System.Windows.UIElement.OnLostStylusCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1064">
            <see cref="E:System.Windows.UIElement.LostStylusCapture" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1064">Identifies the <see cref="E:System.Windows.UIElement.LostStylusCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1065">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1065">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-1066">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1066">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-1067">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1067">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-1068">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1068">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-1069">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1069">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1070">이 요소에서 터치 캡처가 손실될 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1070">Occurs when this element loses a touch capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-1071">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-1071">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-1072">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-1072">Identifier field</span></span>|<xref:System.Windows.UIElement.LostTouchCaptureEvent>|  
|<span data-ttu-id="67f8b-1073">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-1073">Routing strategy</span></span>|<span data-ttu-id="67f8b-1074">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-1074">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-1075">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-1075">Delegate</span></span>|<span data-ttu-id="67f8b-1076"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1076"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="67f8b-1077">재정의 <xref:System.Windows.UIElement.OnLostTouchCapture%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1077">Override <xref:System.Windows.UIElement.OnLostTouchCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1078">
            <see cref="E:System.Windows.UIElement.LostTouchCapture" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1078">Identifies the <see cref="E:System.Windows.UIElement.LostTouchCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationBoundaryFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationBoundaryFeedback As EventHandler(Of ManipulationBoundaryFeedbackEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^&gt; ^ ManipulationBoundaryFeedback;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1079">조작에서 경계가 발견되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1079">Occurs when the manipulation encounters a boundary.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_ManipulationBoundaryFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-1080">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-1080">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-1081">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-1081">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent>|  
|<span data-ttu-id="67f8b-1082">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-1082">Routing strategy</span></span>|<span data-ttu-id="67f8b-1083">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-1083">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-1084">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-1084">Delegate</span></span>|<span data-ttu-id="67f8b-1085"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1085"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationBoundaryFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationBoundaryFeedbackEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1086">
            <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1086">Identifies the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationCompleted As EventHandler(Of ManipulationCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationCompletedEventArgs ^&gt; ^ ManipulationCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1087">
            <see cref="T:System.Windows.UIElement" /> 개체에서 조작이 완료되고 활동이 없게 될 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1087">Occurs when a manipulation and inertia on the <see cref="T:System.Windows.UIElement" /> object is complete.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1088">이 이벤트를 사용 하 여 작업이 완료 될 때 조작 하는 방법에 대 한 정보를 얻을 수 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1088">You can use this event to get information about the manipulation when it completes.</span></span>  <span data-ttu-id="67f8b-1089">예를 들어, 사용할 수는 <xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType> 총합 조작의 위치를 확인 하려면 속성을 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1089">For example, you can use the <xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType> property to determine the total amount the position of the manipulation changed.</span></span>  
  
 <span data-ttu-id="67f8b-1090">조작에 대 한 자세한 내용은 참조는 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1090">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="67f8b-1091">예를 보려면 조작에 응답 하는 응용 프로그램 참조 [연습: 만드는 첫 번째 터치 응용 프로그램](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1091">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationCompleted"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-1092">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-1092">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-1093">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-1093">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationCompletedEvent>|  
|<span data-ttu-id="67f8b-1094">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-1094">Routing strategy</span></span>|<span data-ttu-id="67f8b-1095">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-1095">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-1096">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-1096">Delegate</span></span>|<span data-ttu-id="67f8b-1097"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.ManipulationCompletedEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1097"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationCompletedEventArgs>.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompletedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationCompletedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationCompletedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationCompletedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationCompletedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationCompletedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1098">
            <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1098">Identifies the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDelta">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationDelta" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationDelta As EventHandler(Of ManipulationDeltaEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationDeltaEventArgs ^&gt; ^ ManipulationDelta;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1099">입력 장치에서 조작 중에 위치를 변경하면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1099">Occurs when the input device changes position during a manipulation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1100"><xref:System.Windows.UIElement.ManipulationDelta> 끌면 손가락 화면으로 조작 하는 동안와 관성 발생할 때 이벤트에 여러 번 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1100">The <xref:System.Windows.UIElement.ManipulationDelta> event occurs multiple times when the user drags fingers over the screen during a manipulation and again when inertia occurs.</span></span>  <span data-ttu-id="67f8b-1101">사용할 수는 <xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A> 관성 중에 이벤트가 발생 하는지 여부를 확인할 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1101">You can use the <xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A> property to check whether the event is occurring during inertia.</span></span>  
  
 <span data-ttu-id="67f8b-1102">하는 요소 <xref:System.Windows.UIElement.ManipulationDelta> 영향을 받지 않습니다 어떤 방식으로든에서 이벤트가 발생할 때 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1102">The element on with <xref:System.Windows.UIElement.ManipulationDelta> event occurs is not affected in any way when the event occurs.</span></span>  <span data-ttu-id="67f8b-1103">논리를 조작할 수 있는 요소를 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1103">You must provide the logic to the element that is to be manipulated.</span></span>  <span data-ttu-id="67f8b-1104"><xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> 및 <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> 속성 유형이 <xref:System.Windows.Input.ManipulationDelta>조작과 위치를 변경 하는 방법에 대 한 데이터를 포함 하 고 이동, 크기 조정, 또는 개체를 회전 해석 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1104">The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> and <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> properties, which are of type <xref:System.Windows.Input.ManipulationDelta>, contain data about how the position of the manipulations change and interpreted as moving, resizing, or rotating an object.</span></span>  <span data-ttu-id="67f8b-1105">조작할 수 있는 요소에 해당 정보를 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1105">You apply that information to the element that is to be manipulated.</span></span>  
  
 <span data-ttu-id="67f8b-1106">조작에 대 한 자세한 내용은 참조는 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1106">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="67f8b-1107">예를 보려면 조작에 응답 하는 응용 프로그램 참조 [연습: 만드는 첫 번째 터치 응용 프로그램](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1107">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationDelta"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-1108">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-1108">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-1109">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-1109">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationDeltaEvent>|  
|<span data-ttu-id="67f8b-1110">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-1110">Routing strategy</span></span>|<span data-ttu-id="67f8b-1111">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-1111">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-1112">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-1112">Delegate</span></span>|<span data-ttu-id="67f8b-1113"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.ManipulationDeltaEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1113"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationDeltaEventArgs>.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-1114">다음 예제에 대 한 이벤트 처리기는 <xref:System.Windows.UIElement.ManipulationDelta> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1114">The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event.</span></span> <span data-ttu-id="67f8b-1115">이 예제에서는 사용 된 <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> 속성 이동, 크기 조정 및 회전을 <xref:System.Windows.Shapes.Rectangle>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1115">The example uses the <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>.</span></span>  <span data-ttu-id="67f8b-1116">이 예제는 또한 확인 여부는 <xref:System.Windows.UIElement.ManipulationDelta> 관성 및 사각형 창의 가장자리에 연결 되어 있는지 여부는 동안 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1116">The example also checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window.</span></span>  <span data-ttu-id="67f8b-1117">이러한 경우에 해당할 경우 응용 프로그램 중지 사각형 응용 프로그램의 표시 영역을 종료 하지 못하도록 방지 하기 위해 조작 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1117">If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application.</span></span> <span data-ttu-id="67f8b-1118">이 예제는에 보다 큰 예제의 일부 [연습: 만드는 첫 번째 터치 응용 프로그램](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1118">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDeltaEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationDeltaEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationDeltaEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationDeltaEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationDeltaEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationDeltaEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1119">
            <see cref="E:System.Windows.UIElement.ManipulationDelta" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1119">Identifies the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationInertiaStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationInertiaStarting As EventHandler(Of ManipulationInertiaStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationInertiaStartingEventArgs ^&gt; ^ ManipulationInertiaStarting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1120">입력 장치에서 조작 중에 <see cref="T:System.Windows.UIElement" /> 개체와의 연결이 끊어져 활동이 없게 될 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1120">Occurs when the input device loses contact with the <see cref="T:System.Windows.UIElement" /> object during a manipulation and inertia begins.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1121"><xref:System.Windows.UIElement.ManipulationInertiaStarting> 이 이벤트는 사용자가 조작 하는 동안 화면에서 손가락을 모두를 뗄 때 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1121">The <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs when the user lifts all of the fingers from the screen during a manipulation.</span></span> <span data-ttu-id="67f8b-1122">예를 들어, "사용자"throw 하는 경우는 <xref:System.Windows.UIElement> 화면을 통해 사용자는 touch는 <xref:System.Windows.UIElement> 작업을 시작 하려면 짧은 거리에 대 한 화면에서 손가락을 이동 하 고 다음 단추는 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1122">For example, if a user "throws" a <xref:System.Windows.UIElement> across a surface, the user will touch the <xref:System.Windows.UIElement> to begin the action, move the finger across the screen for a short distance, and then release the <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="67f8b-1123">사용자가 요소를 해제 하는 경우 관성 시작 및 <xref:System.Windows.UIElement.ManipulationInertiaStarting> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1123">When the user releases the element, inertia begins and the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs.</span></span>  <span data-ttu-id="67f8b-1124"><xref:System.Windows.UIElement> 를 계속 수신 하면 <xref:System.Windows.UIElement.ManipulationDelta> 이벤트 관성 요소에서 발생 함을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1124">The <xref:System.Windows.UIElement> continues to receive <xref:System.Windows.UIElement.ManipulationDelta> events to indicate that inertia is occurring on the element.</span></span>  
  
 <span data-ttu-id="67f8b-1125">관성의 동작을 지정 하려면이 이벤트를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1125">You can use this event to specify the behavior of the inertia.</span></span>  <span data-ttu-id="67f8b-1126">예를 들어 관성을 시작할 때 사용 되는 초기 속도 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1126">For example, you can set the initial velocity that is used when inertia begins.</span></span>  <span data-ttu-id="67f8b-1127">감속을 설정 하거나 원하는 위치를 설정 하 여 관성 양을 지정할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1127">You can also specify the amount of inertia by setting the desired deceleration or by setting the desired placement.</span></span>  <span data-ttu-id="67f8b-1128">이 값을 설정할 수 없습니다 이러한 조작 (변환, 확장 또는 회전)의 각 유형에 대해 독립적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1128">You can set these values for each type of manipulation (translation, expansion, or rotation) independently.</span></span>  <span data-ttu-id="67f8b-1129">자세한 내용은 <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1129">For more information, see <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.</span></span>  
  
 <span data-ttu-id="67f8b-1130">조작에 대 한 자세한 내용은 참조는 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1130">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="67f8b-1131">예를 보려면 조작에 응답 하는 응용 프로그램 참조 [연습: 만드는 첫 번째 터치 응용 프로그램](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1131">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationInertiaStarting"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-1132">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-1132">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-1133">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-1133">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationInertiaStartingEvent>|  
|<span data-ttu-id="67f8b-1134">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-1134">Routing strategy</span></span>|<span data-ttu-id="67f8b-1135">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-1135">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-1136">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-1136">Delegate</span></span>|<span data-ttu-id="67f8b-1137"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1137"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-1138">다음 예제와 <xref:System.Windows.UIElement.ManipulationInertiaStarting> 이벤트 처리기 변환, 확장 및 관성 시 사용 되는 회전에 대 한 원하는 선언을 가져오거나 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1138">The following example shows the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event handler and sets the desired deceleration for translation, expansion, and rotation that is used during inertia.</span></span> <span data-ttu-id="67f8b-1139">이 예제는에 보다 큰 예제의 일부 [연습: 만드는 첫 번째 터치 응용 프로그램](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1139">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationinertiastarting)]
 [!code-vb[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationinertiastarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationInertiaStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationInertiaStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationInertiaStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationInertiaStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationInertiaStartingEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1140">
            <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1140">Identifies the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarted As EventHandler(Of ManipulationStartedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartedEventArgs ^&gt; ^ ManipulationStarted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1141">입력 장치가 <see cref="T:System.Windows.UIElement" /> 개체에서 조작을 시작할 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1141">Occurs when an input device begins a manipulation on the <see cref="T:System.Windows.UIElement" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1142"><xref:System.Windows.UIElement.ManipulationStarted> 이벤트 발생 후의 <xref:System.Windows.UIElement.ManipulationStarting> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1142">The <xref:System.Windows.UIElement.ManipulationStarted> event occurs after the <xref:System.Windows.UIElement.ManipulationStarting> event.</span></span>  <span data-ttu-id="67f8b-1143">사용 하 여 다음을 수행할 수 있습니다는 <xref:System.Windows.Input.ManipulationStartedEventArgs>:</span><span class="sxs-lookup"><span data-stu-id="67f8b-1143">You can do the following with the <xref:System.Windows.Input.ManipulationStartedEventArgs>:</span></span>  
  
-   <span data-ttu-id="67f8b-1144">조작의 위치를 사용 하 여 기준으로 요소는 <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1144">Get the element that the manipulation's position is relative to by using the <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A> property.</span></span>  
  
-   <span data-ttu-id="67f8b-1145">사용 하 여 조작 원점이 가져오기는 <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1145">Get the origin of the manipulation by using the <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A> property.</span></span>  
  
-   <span data-ttu-id="67f8b-1146">호출 하 여 조작 취소는 <xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1146">Cancel the manipulation by calling the <xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A> method.</span></span>  
  
 <span data-ttu-id="67f8b-1147">조작에 대 한 자세한 내용은 참조는 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1147">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="67f8b-1148">예를 보려면 조작에 응답 하는 응용 프로그램 참조 [연습: 만드는 첫 번째 터치 응용 프로그램](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1148">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationStarted"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-1149">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-1149">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-1150">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-1150">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationStartedEvent>|  
|<span data-ttu-id="67f8b-1151">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-1151">Routing strategy</span></span>|<span data-ttu-id="67f8b-1152">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-1152">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-1153">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-1153">Delegate</span></span>|<span data-ttu-id="67f8b-1154"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.ManipulationStartedEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1154"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartedEventArgs>.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1155">
            <see cref="E:System.Windows.UIElement.ManipulationStarted" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1155">Identifies the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarting As EventHandler(Of ManipulationStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartingEventArgs ^&gt; ^ ManipulationStarting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1156">조작 프로세서가 처음으로 만들어지면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1156">Occurs when the manipulation processor is first created.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1157"><xref:System.Windows.UIElement.ManipulationStarting> 이벤트 발생을 가진 요소에는 <xref:System.Windows.UIElement.IsManipulationEnabled%2A> 속성이로 설정 `true` 사용자에 손가락을 놓고 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1157">The <xref:System.Windows.UIElement.ManipulationStarting> event occurs on an element that has the <xref:System.Windows.UIElement.IsManipulationEnabled%2A> property set to `true` when the user puts a finger on it.</span></span> <span data-ttu-id="67f8b-1158">후속 조작 이벤트 기본적으로 포함 된 요소를 기준으로 조작의 위치를 보고 <xref:System.Windows.UIElement.IsManipulationEnabled%2A> 로 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1158">By default, subsequent manipulation events report the position of the manipulation relative to the element that has <xref:System.Windows.UIElement.IsManipulationEnabled%2A> set to `true`.</span></span>  <span data-ttu-id="67f8b-1159">위치를 설정 하 여 있는 다른 요소를 기준으로 해야 함을 지정할 수는 <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1159">You can specify that the position should be relative to another element by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> property.</span></span> <span data-ttu-id="67f8b-1160">예를 들어 요소의 부모에 상대적인 조작을 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1160">For example, you can make the manipulation relative to the parent of the element.</span></span>  
  
 <span data-ttu-id="67f8b-1161">에 대 한 이벤트 처리기에서 다음을 수행할 수 있습니다 <xref:System.Windows.UIElement.ManipulationStarting>:</span><span class="sxs-lookup"><span data-stu-id="67f8b-1161">You can also do the following in an event handler for <xref:System.Windows.UIElement.ManipulationStarting>:</span></span>  
  
-   <span data-ttu-id="67f8b-1162">사용자가을 설정 하 여의 조작을 수행 하려면 둘 이상의 손가락 해야 하는지 여부를 지정 된 <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1162">Specify whether the user needs more than one finger to perform the manipulations by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="67f8b-1163">조작의 유형을 설정 하 여 활성화할 지정는 <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType> 속성을는 <xref:System.Windows.Input.ManipulationModes> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1163">Specify which types of manipulation are enabled by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType> property to a <xref:System.Windows.Input.ManipulationModes> enumeration.</span></span>  
  
-   <span data-ttu-id="67f8b-1164">한 손가락 회전의 중심을 설정 하 여 지정 된 <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1164">Specify the center of a single-finger rotation by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="67f8b-1165">호출 하 여 조작 취소는 <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1165">Cancel the manipulation by calling the <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="67f8b-1166">조작에 대 한 자세한 내용은 참조는 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1166">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="67f8b-1167">예를 보려면 조작에 응답 하는 응용 프로그램 참조 [연습: 만드는 첫 번째 터치 응용 프로그램](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1167">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationStarting"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-1168">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-1168">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-1169">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-1169">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationStartingEvent>|  
|<span data-ttu-id="67f8b-1170">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-1170">Routing strategy</span></span>|<span data-ttu-id="67f8b-1171">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-1171">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-1172">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-1172">Delegate</span></span>|<span data-ttu-id="67f8b-1173"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.ManipulationStartingEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1173"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartingEventArgs>.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-1174">다음 예제에 대 한 이벤트 처리기를 보여 줍니다.는 <xref:System.Windows.UIElement.ManipulationStarting> 이벤트 및 집합에서 <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> 조작의 좌표는 부모 요소에 상대적인 있도록 조작 이벤트를 수신 하는 부모 요소에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1174">The following example shows the event handler for the <xref:System.Windows.UIElement.ManipulationStarting> event and sets the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> to the parent element that receives the manipulation events so that the coordinates of the manipulation are relative to the parent element.</span></span>  <span data-ttu-id="67f8b-1175">이 예제는에 보다 큰 예제의 일부 [연습: 만드는 첫 번째 터치 응용 프로그램](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1175">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationstarting)]
 [!code-vb[BasicManipulation#ManipulationStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationstarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartingEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1176">
            <see cref="E:System.Windows.UIElement.ManipulationStarting" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1176">Identifies the <see cref="E:System.Windows.UIElement.ManipulationStarting" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Measure">
      <MemberSignature Language="C#" Value="public void Measure (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Measure(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Measure (availableSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Measure(System::Windows::Size availableSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">
          <span data-ttu-id="67f8b-1177">부모 요소에서 자식 요소를 할당할 수 있는 사용 가능한 공간입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1177">The available space that a parent element can allocate a child element.</span>
          </span>
          <span data-ttu-id="67f8b-1178">자식 요소는 사용 가능한 공간보다 큰 공간을 요청할 수 있습니다. 현재 요소에 대한 콘텐츠 모델에서 스크롤이 가능한 경우 제공된 크기를 수용할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1178">A child element can request a larger space than what is available; the provided size might be accommodated if scrolling is possible in the content model for the current element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1179">
            <see cref="P:System.Windows.UIElement.DesiredSize" />의 <see cref="T:System.Windows.UIElement" />를 업데이트합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1179">Updates the <see cref="P:System.Windows.UIElement.DesiredSize" /> of a <see cref="T:System.Windows.UIElement" />.</span>
          </span>
          <span data-ttu-id="67f8b-1180">부모 요소는 이 메서드를 자체 <see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /> 구현에서 호출하여 재귀적 레이아웃 업데이트를 형성합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1180">Parent elements call this method from their own <see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /> implementations to form a recursive layout update.</span>
          </span>
          <span data-ttu-id="67f8b-1181">이 메서드 호출은 레이아웃 업데이트의 첫 번째 단계("측정" 단계)를 구성합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1181">Calling this method constitutes the first pass (the "Measure" pass) of a layout update.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1182">레이아웃에서 위치 계산 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 로 이루어진는 <xref:System.Windows.UIElement.Measure%2A> 호출 및 <xref:System.Windows.UIElement.Arrange%2A> 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1182">Computation of layout positioning in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] is comprised of a <xref:System.Windows.UIElement.Measure%2A> call and an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span> <span data-ttu-id="67f8b-1183">중의 <xref:System.Windows.UIElement.Measure%2A> 호출에서 요소를 사용 하 여 해당 크기 요구 사항을 결정 한 `availableSize` 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1183">During the <xref:System.Windows.UIElement.Measure%2A> call, an element determines its size requirements by using an `availableSize` input.</span></span> <span data-ttu-id="67f8b-1184">중에서 <xref:System.Windows.UIElement.Arrange%2A> 요소 크기 호출 완료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1184">During the <xref:System.Windows.UIElement.Arrange%2A> call, the element size is finalized.</span></span>  
  
 <span data-ttu-id="67f8b-1185">`availableSize` 무한를 0에서 숫자를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1185">`availableSize` can be any number from zero to infinite.</span></span> <span data-ttu-id="67f8b-1186">레이아웃에 관여 하는 요소는 최소값을 반환 해야 <xref:System.Windows.Size> 에 대해 필요로 하는 지정 된 `availableSize`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1186">Elements participating in layout should return the minimum <xref:System.Windows.Size> they require for a given `availableSize`.</span></span>  
  
 <span data-ttu-id="67f8b-1187">레이아웃이 처음 인스턴스화 항상 받습니다는 <xref:System.Windows.UIElement.Measure%2A> 하기 전에 호출 <xref:System.Windows.UIElement.Arrange%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1187">When a layout is first instantiated, it always receives a <xref:System.Windows.UIElement.Measure%2A> call before <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="67f8b-1188">그러나 첫 번째 레이아웃 단계 후를 받을 수는 <xref:System.Windows.UIElement.Arrange%2A> 하지 않고 호출는 <xref:System.Windows.UIElement.Measure%2A>;이 경우에 영향을 주는 속성에 발생할 수 <xref:System.Windows.UIElement.Arrange%2A> (예: 맞춤), 변경 또는 부모를 받을 때는 <xref:System.Windows.UIElement.Arrange%2A> 는 없이<xref:System.Windows.UIElement.Measure%2A>.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1188">However, after the first layout pass, it may receive an <xref:System.Windows.UIElement.Arrange%2A> call without a <xref:System.Windows.UIElement.Measure%2A>; this can happen when a property that affects only <xref:System.Windows.UIElement.Arrange%2A> is changed (such as alignment), or when the parent receives an <xref:System.Windows.UIElement.Arrange%2A> without a <xref:System.Windows.UIElement.Measure%2A>.</span></span> <span data-ttu-id="67f8b-1189">A <xref:System.Windows.UIElement.Measure%2A> 호출 자동으로 무효화 됩니다는 <xref:System.Windows.UIElement.Arrange%2A> 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1189">A <xref:System.Windows.UIElement.Measure%2A> call will automatically invalidate an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span>  
  
 <span data-ttu-id="67f8b-1190">레이아웃 업데이트 가능한 모든 레이아웃이 변경에 대 한 주 스레드를 기다리고 있지 않으면 되도록 비동기적으로 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1190">Layout updates happen asynchronously, such that the main thread is not waiting for every possible layout change.</span></span> <span data-ttu-id="67f8b-1191">코드 숨김 속성 값의 확인을 통해 요소 수 즉시 변경 내용을 반영 하지 크기 조정 또는 레이아웃 특성 상호 작용 하는 속성 (의 <xref:System.Windows.FrameworkElement.Width%2A> 예: 속성).</span><span class="sxs-lookup"><span data-stu-id="67f8b-1191">Querying an element via code-behind checking of property values may not immediately reflect changes to properties that interact with the sizing or layout characteristics (the <xref:System.Windows.FrameworkElement.Width%2A> property, for example).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67f8b-1192">레이아웃 업데이트를 사용 하 여 사용할 수는 <xref:System.Windows.UIElement.UpdateLayout%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1192">Layout updates can be forced by using the <xref:System.Windows.UIElement.UpdateLayout%2A> method.</span></span> <span data-ttu-id="67f8b-1193">그러나이 메서드를 호출 일반적으로 필요 하지 않으며 성능이 저하 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1193">However, calling this method is usually unnecessary and can cause poor performance.</span></span>  
  
 <span data-ttu-id="67f8b-1194">이 레이아웃 시스템은 두 개의 별도 큐에 대 한 잘못 된 레이아웃의 유지 <xref:System.Windows.UIElement.Measure%2A> 되 고 다른 하나 <xref:System.Windows.UIElement.Arrange%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1194">The layout system keeps two separate queues of invalid layouts, one for <xref:System.Windows.UIElement.Measure%2A> and one for <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="67f8b-1195">레이아웃 큐에 레이아웃을 수행 하는 요소의 시각적 트리에 있는 요소의 순서를 기준으로 정렬 됩니다. 요소 트리에서 상위 부모 항목에 반복 해 서 변경 내용이 레이아웃이 중복을 방지 하기 위해 큐의 맨 위쪽에는입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1195">The layout queue is sorted based upon the order of elements in the visual tree of the element performing layout; elements higher in the tree are at the top of the queue, to avoid redundant layouts caused by repeated changes in parents.</span></span> <span data-ttu-id="67f8b-1196">중복 된 항목은 큐에서 자동으로 제거 및 요소가 레이아웃 유효성을 검사할 이미 된 경우 자동으로 큐에서 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1196">Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already layout-validated.</span></span>  
  
 <span data-ttu-id="67f8b-1197">레이아웃을 업데이트할 때는 <xref:System.Windows.UIElement.Measure%2A> 큐를 비울 먼저 옵니다는 <xref:System.Windows.UIElement.Arrange%2A> 큐입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1197">When updating layout, the <xref:System.Windows.UIElement.Measure%2A> queue is emptied first, followed by the <xref:System.Windows.UIElement.Arrange%2A> queue.</span></span> <span data-ttu-id="67f8b-1198">요소는 <xref:System.Windows.UIElement.Arrange%2A> 큐에 요소가 없을 경우 정렬 되지 됩니다는 <xref:System.Windows.UIElement.Measure%2A> 큐입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1198">An element in the <xref:System.Windows.UIElement.Arrange%2A> queue will never be arranged if there is an element in the <xref:System.Windows.UIElement.Measure%2A> queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">
          <span data-ttu-id="67f8b-1199">부모 요소가 자식 요소에 할당할 수 있는 크기입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1199">The available size that the parent element can allocate for the child.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1200">파생 클래스에서 재정의되는 경우 자식 요소 콘텐츠의 크기를 고려하여 이 요소의 크기를 적절하게 조정하기 위한 측정 논리를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1200">When overridden in a derived class, provides measurement logic for sizing this element properly, with consideration of the size of any child element content.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67f8b-1201">레이아웃에서 이 요소에 필요한 크기입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1201">The desired size of this element in layout.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1202">요소를 파생 하는 경우가 더 일반적 <xref:System.Windows.FrameworkElement> 대신 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1202">It is more common to derive an element from <xref:System.Windows.FrameworkElement> rather than <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="67f8b-1203">파생 하는 경우 <xref:System.Windows.FrameworkElement>는 재정의 <xref:System.Windows.UIElement.MeasureCore%2A> 에 <xref:System.Windows.FrameworkElement> 봉인은 <xref:System.Windows.UIElement.MeasureCore%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1203">If you are deriving from <xref:System.Windows.FrameworkElement>, note that an override of <xref:System.Windows.UIElement.MeasureCore%2A> on <xref:System.Windows.FrameworkElement> seals the <xref:System.Windows.UIElement.MeasureCore%2A> method.</span></span> <span data-ttu-id="67f8b-1204">만 재정의 따라서 <xref:System.Windows.UIElement.MeasureCore%2A> 에서 파생 하는 경우 레이아웃 측정 특성을 변경 하는 방법으로 <xref:System.Windows.UIElement> 포함 되지 않은 상속을 통해 <xref:System.Windows.FrameworkElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1204">Therefore, you only override <xref:System.Windows.UIElement.MeasureCore%2A> as a means to alter layout measure characteristics if you derive from <xref:System.Windows.UIElement> through an inheritance that does not include <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="67f8b-1205">이 사용자 지정 구현을 구축 하는 경우 대/소문자를 수 있습니다는 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 핵심 수준입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1205">This might be the case if you are attempting to build your own implementation on the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] core-level.</span></span> <span data-ttu-id="67f8b-1206">파생 하는 경우 <xref:System.Windows.FrameworkElement>, Measure 동작 구현 서식 파일은 다음의 <xref:System.Windows.FrameworkElement> 의 구현.<xref:System.Windows.FrameworkElement.MeasureOverride%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1206">Otherwise, if you are deriving from <xref:System.Windows.FrameworkElement>, then the implementation template for Measure behavior is the <xref:System.Windows.FrameworkElement> implementation of .<xref:System.Windows.FrameworkElement.MeasureOverride%2A>.</span></span>  
  
 <span data-ttu-id="67f8b-1207">자식 요소가 있는 부모 요소를 호출 해야 <xref:System.Windows.UIElement.Measure%2A> 각 자식에 그렇지 않으면 이러한 하위 요소 하지의 크기와 배열 레이아웃에서 효과적으로 사라집니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1207">A parent element with child elements must call <xref:System.Windows.UIElement.Measure%2A> on each child, otherwise these child elements are not sized or arranged and will effectively disappear from layout.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-1208">일반적인 재정의 <xref:System.Windows.UIElement.MeasureCore%2A> 대략적인이 패턴을 따릅니다 (라는 기본 제공 컬렉션이 없기 `VisualChildren`; `VisualChildren` 는 모든 자식 컬렉션을 나타내는 자리 표시자).</span><span class="sxs-lookup"><span data-stu-id="67f8b-1208">A typical override of <xref:System.Windows.UIElement.MeasureCore%2A> follows this approximate pattern (there is not a built-in collection called `VisualChildren`; `VisualChildren` is a  placeholder that represents whatever child collection your element maintains).</span></span>  
  
 [!code-csharp[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementmeasureoverride)]
 [!code-vb[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementmeasureoverride)]  
  
-   <span data-ttu-id="67f8b-1209">호출 해야 <xref:System.Windows.UIElement.Measure%2A> 각 자식 요소에 대해 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1209">You must call <xref:System.Windows.UIElement.Measure%2A> on each child element.</span></span>  
  
-   <span data-ttu-id="67f8b-1210">일반적으로 구현 간의 측정 정보를 캐시 해야는 <xref:System.Windows.UIElement.MeasureCore%2A> 및 <xref:System.Windows.UIElement.ArrangeCore%2A> 동일한 요소에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1210">Generally, your implementation should cache measurement information between the <xref:System.Windows.UIElement.MeasureCore%2A> and <xref:System.Windows.UIElement.ArrangeCore%2A> method calls in the same element.</span></span>  
  
-   <span data-ttu-id="67f8b-1211">기본 구현을 호출 <xref:System.Windows.UIElement.MeasureCore%2A> 필수적 이지만 기본 구현에서 원하는 레이아웃 기능을 제공 하는 경우에 적합할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1211">Calling base implementations of <xref:System.Windows.UIElement.MeasureCore%2A> is not required, but might be appropriate if the base implementation provides a desired layout capability.</span></span>  
  
-   <span data-ttu-id="67f8b-1212">에 대 한 호출이 <xref:System.Windows.UIElement.Measure%2A> 자식 요소 거쳐야 같은 `availableSize` 부모 또는 영역의 하위 집합으로 레이아웃의 유형에 따라 부모 요소를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1212">Calls to <xref:System.Windows.UIElement.Measure%2A> on child elements should pass either the same `availableSize` as the parent, or a subset of the area, depending on the type of layout the parent element supports.</span></span> <span data-ttu-id="67f8b-1213">예를 들어 요소 관련 테두리 또는 패딩을, 스크롤 막대 또는 사용자 지정 컨트롤에 대 한 영역을 제거 하는 데 유효한 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1213">For example, it would be valid to remove the area for an element-specific border or padding, a scrollbar, or a custom control.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="67f8b-1214">구현에 제공 된 값을 처리할 수 있어야 <paramref name="availableSize" /> 제한이 없는 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1214">Implementations must be able to process a value provided for <paramref name="availableSize" /> that is infinite.</span>
            </span>
            <span data-ttu-id="67f8b-1215">무한 값 요청 된 제약 조건 없이 나타내고 재귀 호출 하는 측정값을 통해 부모 요소에 대 한 측정 선택을 지연 시킵니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1215">An infinite value indicates no requested constraints, and effectively defers measurement choice to the parent element, through recursive Measure calls.</span>
            </span>
            <span data-ttu-id="67f8b-1216">구현에 제공 된 값을 고려할 수 <paramref name="availableSize" /> 소프트 제한 되도록 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1216">Implementations can consider the value provided for <paramref name="availableSize" /> to be a soft constraint.</span>
            </span>
            <span data-ttu-id="67f8b-1217">자식 요소는 응용 프로그램 코드의 다른 측면은 부모 요소의 현재 실제 크기를 확인할 수 인 경우에 더 큰 크기를 지정할 수 있습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1217">The child element might specify a larger size, even if other aspects of application code were able to determine the current actual size of the parent element.</span>
            </span>
            <span data-ttu-id="67f8b-1218">더 큰 크기 요청은 자식 요소는 부모 요소에 콘텐츠 표시 영역 내에서 콘텐츠 스크롤를 지원할 수 있는지를 쿼리를 지정 하는 규칙.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1218">The large size request is a convention that indicates that the child element is querying whether your parent element can support content scrolling within a content display region.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1219">포인터가 이 요소 위에 있는 동안 마우스 단추를 누르면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1219">Occurs when any mouse button is pressed while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1220">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.MouseDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1220">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-1221">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.MouseDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1221">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-1222"><xref:System.Windows.UIElement.MouseDown> 종종 발생과 함께 <xref:System.Windows.UIElement.MouseLeftButtonDown> 또는 <xref:System.Windows.UIElement.MouseRightButtonDown>, 두 개의 표준 마우스 단추 중 하나를 누르는 것에 해당 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1222">The <xref:System.Windows.UIElement.MouseDown> event is often raised together with either <xref:System.Windows.UIElement.MouseLeftButtonDown> or <xref:System.Windows.UIElement.MouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="67f8b-1223"><xref:System.Windows.UIElement.MouseLeftButtonDown> 및 <xref:System.Windows.UIElement.MouseRightButtonDown> 라우트된 이벤트를는 있지만 직접 라우트된 이벤트를 서로 하며 적절 한 단추 특정 이벤트가 발생할 때는 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 경로 되지 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1223"><xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="67f8b-1224">에 대 한 설명 부분 참조 <xref:System.Windows.UIElement.MouseLeftButtonDown> 또는 <xref:System.Windows.UIElement.MouseRightButtonDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1224">See Remarks for <xref:System.Windows.UIElement.MouseLeftButtonDown> or <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="67f8b-1225">일부 컨트롤 마우스 단추 이벤트를 처리 하는 고유한 클래스 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1225">Some controls might have inherent class handling for mouse button events.</span></span> <span data-ttu-id="67f8b-1226">이벤트는 마우스 왼쪽된 단추에는 클래스는 컨트롤의 처리를 할 가능성이 가장 높은 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1226">The left mouse button down event is the most likely event to have class handling in a control.</span></span> <span data-ttu-id="67f8b-1227">기본 클래스 종종 처리 표시 <xref:System.Windows.Input.Mouse> 클래스 이벤트를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1227">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="67f8b-1228">이벤트 처리 됨으로 표시 되 면 해당 요소에 연결 된 다른 인스턴스 처리기 일반적으로 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1228">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="67f8b-1229">버블링 방향의 UI 트리의 루트에서 요소에 연결 되어 있는 다른 모든 클래스 또는 인스턴스 처리기도 하지 일반적으로 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1229">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="67f8b-1230">앞의 중요에 설명 된 문제를 해결 하 고 계속 받을 수 <xref:System.Windows.UIElement.MouseDown> 클래스 이러한 솔루션 중 하나를 사용 하 여 처리 하는 파생된 클래스의 마우스 왼쪽된 단추에 대 한 이벤트:</span><span class="sxs-lookup"><span data-stu-id="67f8b-1230">You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement.MouseDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="67f8b-1231">연결에 대 한 처리기는 <xref:System.Windows.UIElement.PreviewMouseDown> 이벤트를 컨트롤에 의해 처리 된 것으로 표시 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1231">Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="67f8b-1232">미리 보기 이벤트 이기 때문에 경로 루트에서 시작을 여 컨트롤로 터널링 방식을 살펴봅니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1232">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="67f8b-1233">컨트롤에 대 한 처리기를 호출 하 여 절차에 따라 등록 <xref:System.Windows.UIElement.AddHandler%2A> 처리기 라우트된 이벤트 데이터에서 처리 하는 것으로 이미 표시 된 경우에 이벤트를 수신할 수 있도록 서명 옵션을 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1233">Register a handler on the control procedurally by calling <xref:System.Windows.UIElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-1234">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-1234">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-1235">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-1235">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseDownEvent>|  
|<span data-ttu-id="67f8b-1236">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-1236">Routing strategy</span></span>|<span data-ttu-id="67f8b-1237">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-1237">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-1238">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-1238">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="67f8b-1239">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewMouseDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1239">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseDown>.</span></span>  
  
-   <span data-ttu-id="67f8b-1240">재정의 <xref:System.Windows.UIElement.OnMouseDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1240">Override <xref:System.Windows.UIElement.OnMouseDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1241">
            <see cref="E:System.Windows.UIElement.MouseDown" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1241">Identifies the <see cref="E:System.Windows.UIElement.MouseDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1242">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1242">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-1243">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1243">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-1244">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1244">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-1245">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1245">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-1246">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1246">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1247">마우스 포인터가 이 요소의 영역 안으로 들어가면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1247">Occurs when the mouse pointer enters the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1248"><xref:System.Windows.UIElement.MouseEnter> 처리 라우팅 전략 직접 이벤트를 사용 하는입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1248"><xref:System.Windows.UIElement.MouseEnter> is a  that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="67f8b-1249">경로; 직접 라우트된 이벤트를 발생 하지 않습니다. 대신,에서 처리 됩니다는 동일한 요소 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1249">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="67f8b-1250">그러나 라우트된 이벤트 동작 스타일의 이벤트 트리거 등의 다른 측면을 활성화 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1250">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="67f8b-1251">하지만 <xref:System.Windows.UIElement.MouseEnter> 트랙 마우스 포인터이 이벤트를 더이 요소의 영역 안으로 들어가면 직접적으로 보고 하는 <xref:System.Windows.UIElement.IsMouseOver%2A> 에서 속성 값이 변경 `false` 를 `true` 이 요소에 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1251">Although <xref:System.Windows.UIElement.MouseEnter> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsMouseOver%2A> property value has changed from `false` to `true` on this element.</span></span>  
  
 <span data-ttu-id="67f8b-1252">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.MouseEnter> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1252">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-1253">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.MouseEnter> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1253">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseEnter> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-1254">A <xref:System.Windows.Controls.Button> (또는 모든 <xref:System.Windows.Controls.Primitives.ButtonBase> 파생 클래스)에 대 한 기본 처리에는 <xref:System.Windows.UIElement.KeyDown> 단추에 포커스를 누른된 키 스페이스바를가 하는 경우 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1254">A <xref:System.Windows.Controls.Button> (or any <xref:System.Windows.Controls.Primitives.ButtonBase> derived class) has native handling for a <xref:System.Windows.UIElement.KeyDown> event when the button has focus, and the pressed key is the space bar.</span></span> <span data-ttu-id="67f8b-1255">기본 처리를 발생 시킵니다는 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 단추를 소스로 사용 하 여 이벤트 및 마우스 포인터를 이동으로 나타나지 않을 경우에, 마우스를 캡처합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1255">The native handling raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event with the button as the source, and also captures the mouse, even though the mouse pointer does not appear to move.</span></span> <span data-ttu-id="67f8b-1256">마우스 캡처의 결과 <xref:System.Windows.UIElement.MouseEnter> 이벤트는 소스로 단추와도 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1256">As a result of the mouse capture, a <xref:System.Windows.UIElement.MouseEnter> event is also raised with the button as the source.</span></span> <span data-ttu-id="67f8b-1257">일반적으로 마우스를 다음 캡처한 요소 <xref:System.Windows.UIElement.MouseEnter> 발생으로 <xref:System.Windows.UIElement.GotMouseCapture> 및 기타 컨트롤 관련 이벤트 것 같습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1257">In general, if an element captures the mouse, then <xref:System.Windows.UIElement.MouseEnter> is raised, as well as <xref:System.Windows.UIElement.GotMouseCapture> and possibly other control-specific events.</span></span>  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-1258">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-1258">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-1259">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-1259">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseEnterEvent>|  
|<span data-ttu-id="67f8b-1260">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-1260">Routing strategy</span></span>|<span data-ttu-id="67f8b-1261">직접</span><span class="sxs-lookup"><span data-stu-id="67f8b-1261">Direct</span></span>|  
|<span data-ttu-id="67f8b-1262">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-1262">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="67f8b-1263">재정의 <xref:System.Windows.UIElement.OnMouseEnter%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1263">Override <xref:System.Windows.UIElement.OnMouseEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1264">
            <see cref="E:System.Windows.UIElement.MouseEnter" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1264">Identifies the <see cref="E:System.Windows.UIElement.MouseEnter" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1265">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1265">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-1266">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1266">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-1267">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1267">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-1268">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1268">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-1269">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1269">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1270">마우스 포인터가 이 요소의 영역을 벗어나면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1270">Occurs when the mouse pointer leaves the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1271"><xref:System.Windows.UIElement.MouseLeave> 처리 라우팅 전략 직접 이벤트를 사용 하는입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1271"><xref:System.Windows.UIElement.MouseLeave> is a  that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="67f8b-1272">경로; 직접 라우트된 이벤트를 발생 하지 않습니다. 대신,에서 처리 됩니다는 동일한 요소 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1272">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="67f8b-1273">그러나 라우트된 이벤트 동작 스타일의 이벤트 트리거 등의 다른 측면을 활성화 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1273">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="67f8b-1274">하지만 <xref:System.Windows.UIElement.MouseLeave> 트랙 마우스를 벗어날 때이 이벤트는 요소를 더 직접적으로 보고 하는 <xref:System.Windows.UIElement.IsMouseOver%2A> 에서 속성 값이 변경 `true` 를 `false` 이 요소에 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1274">Although <xref:System.Windows.UIElement.MouseLeave> tracks when the mouse leaves an element, this event more literally reports that the <xref:System.Windows.UIElement.IsMouseOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
 <span data-ttu-id="67f8b-1275">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.MouseLeave> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1275">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-1276">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.MouseLeave> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1276">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseLeave> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-1277">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-1277">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-1278">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-1278">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseLeaveEvent>|  
|<span data-ttu-id="67f8b-1279">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-1279">Routing strategy</span></span>|<span data-ttu-id="67f8b-1280">직접</span><span class="sxs-lookup"><span data-stu-id="67f8b-1280">Direct</span></span>|  
|<span data-ttu-id="67f8b-1281">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-1281">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="67f8b-1282">재정의 <xref:System.Windows.UIElement.OnMouseLeave%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1282">Override <xref:System.Windows.UIElement.OnMouseLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1283">
            <see cref="E:System.Windows.UIElement.MouseLeave" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1283">Identifies the <see cref="E:System.Windows.UIElement.MouseLeave" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1284">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1284">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-1285">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1285">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-1286">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1286">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-1287">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1287">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-1288">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1288">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1289">마우스 포인터가 이 요소 위에 있는 동안 마우스 왼쪽 단추를 누르면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1289">Occurs when the left mouse button is pressed while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1290">이 요소 트리를 통해 버블링 경로 따르는 것 처럼 보이지만, 실제로 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1290">Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="67f8b-1291">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1291">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="67f8b-1292">이 이벤트의 이벤트 데이터의 기본 이벤트 데이터를 노출 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1292">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="67f8b-1293">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <xref:System.Windows.UIElement.AddHandler%2A>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1293">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="67f8b-1294">표시 하는 경우 <xref:System.Windows.UIElement.MouseLeftButtonDown> 처리, 기본적으로 표시 하는 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 경로 따르는 모든 후속 수신기에 대 한 처리 및 모든 관련 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1294">If you mark <xref:System.Windows.UIElement.MouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="67f8b-1295">가능한 여기에 클래스 처리기 생성 된 이벤트와 같은 <xref:System.Windows.Controls.Control.MouseDoubleClick>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1295">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="67f8b-1296">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <xref:System.Windows.UIElement>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <xref:System.Windows.Input.Mouse> 클래스).</span><span class="sxs-lookup"><span data-stu-id="67f8b-1296">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="67f8b-1297">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1297">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="67f8b-1298">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1298">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="67f8b-1299">일부 컨트롤 클래스는 마우스 단추 이벤트를 처리 하는 클래스 기본적 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1299">Some control classes might have inherent class handling for mouse button events.</span></span> <span data-ttu-id="67f8b-1300">이벤트는 마우스 왼쪽된 단추에는 클래스는 컨트롤의 처리를 할 가능성이 가장 높은 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1300">The left mouse button down event is the most likely event to have class handling in a control.</span></span> <span data-ttu-id="67f8b-1301">기본 클래스 종종 처리 표시 <xref:System.Windows.Input.Mouse> 클래스 이벤트를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1301">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="67f8b-1302">이벤트 처리 됨으로 표시 되 면 해당 요소에 연결 된 다른 인스턴스 처리기 일반적으로 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1302">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="67f8b-1303">버블링 방향의 UI 트리의 루트에서 요소에 연결 되어 있는 다른 모든 클래스 또는 인스턴스 처리기도 하지 일반적으로 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1303">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="67f8b-1304">앞의 중요에 설명 된 문제를 해결 하 고 계속 받을 수 <xref:System.Windows.UIElement.MouseLeftButtonDown> 클래스 이러한 솔루션 중 하나를 사용 하 여 처리 하는 파생된 클래스의 마우스 왼쪽된 단추에 대 한 이벤트:</span><span class="sxs-lookup"><span data-stu-id="67f8b-1304">You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement.MouseLeftButtonDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="67f8b-1305">연결에 대 한 처리기는 <xref:System.Windows.UIElement.PreviewMouseDown> 이벤트를 컨트롤에 의해 처리 된 것으로 표시 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1305">Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="67f8b-1306">미리 보기 이벤트 이기 때문에 경로 루트에서 시작을 여 컨트롤로 터널링 방식을 살펴봅니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1306">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="67f8b-1307">컨트롤에 대 한 처리기를 호출 하 여 절차에 따라 등록 <xref:System.Windows.UIElement.AddHandler%2A> 처리기 라우트된 이벤트 데이터에서 처리 하는 것으로 이미 표시 된 경우에 이벤트를 수신할 수 있도록 서명 옵션을 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1307">Register a handler on the control procedurally by calling <xref:System.Windows.UIElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-1308">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-1308">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-1309">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-1309">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseLeftButtonDownEvent>|  
|<span data-ttu-id="67f8b-1310">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-1310">Routing strategy</span></span>|<span data-ttu-id="67f8b-1311">직접</span><span class="sxs-lookup"><span data-stu-id="67f8b-1311">Direct</span></span>|  
|<span data-ttu-id="67f8b-1312">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-1312">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="67f8b-1313">재정의 <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1313">Override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1314">
            <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1314">Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1315">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1315">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-1316">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1316">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-1317">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1317">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-1318">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1318">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-1319">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1319">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1320">마우스 포인터가 이 요소 위에 있는 동안 마우스 왼쪽 단추를 놓으면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1320">Occurs when the left mouse button is released while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1321">이 요소 트리를 통해 버블링 경로 따르는 것 처럼 보이지만, 실제로 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1321">Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="67f8b-1322">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1322">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="67f8b-1323">이 이벤트의 이벤트 데이터의 기본 이벤트 데이터를 노출 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1323">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="67f8b-1324">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <xref:System.Windows.UIElement.AddHandler%2A>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1324">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="67f8b-1325">표시 하는 경우 <xref:System.Windows.UIElement.MouseLeftButtonUp> 처리, 기본적으로 표시 하는 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 경로 따르는 모든 후속 수신기에 대 한 처리 및 모든 관련 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1325">If you mark <xref:System.Windows.UIElement.MouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="67f8b-1326">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <xref:System.Windows.UIElement>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <xref:System.Windows.Input.Mouse> 클래스).</span><span class="sxs-lookup"><span data-stu-id="67f8b-1326">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="67f8b-1327">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1327">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="67f8b-1328">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1328">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-1329">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-1329">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-1330">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-1330">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseLeftButtonUpEvent>|  
|<span data-ttu-id="67f8b-1331">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-1331">Routing strategy</span></span>|<span data-ttu-id="67f8b-1332">직접</span><span class="sxs-lookup"><span data-stu-id="67f8b-1332">Direct</span></span>|  
|<span data-ttu-id="67f8b-1333">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-1333">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="67f8b-1334">재정의 <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1334">Override <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1335">
            <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1335">Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1336">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1336">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-1337">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1337">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-1338">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1338">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-1339">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1339">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-1340">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1340">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1341">이 요소 위에 있는 동안 마우스 포인터를 움직이면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1341">Occurs when the mouse pointer moves while over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1342">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.MouseMove> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1342">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-1343">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.MouseMove> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1343">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-1344">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-1344">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-1345">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-1345">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseMoveEvent>|  
|<span data-ttu-id="67f8b-1346">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-1346">Routing strategy</span></span>|<span data-ttu-id="67f8b-1347">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-1347">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-1348">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-1348">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="67f8b-1349">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewMouseMove>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1349">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseMove>.</span></span>  
  
-   <span data-ttu-id="67f8b-1350">재정의 <xref:System.Windows.UIElement.OnMouseMove%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1350">Override <xref:System.Windows.UIElement.OnMouseMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1351">
            <see cref="E:System.Windows.UIElement.MouseMove" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1351">Identifies the <see cref="E:System.Windows.UIElement.MouseMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1352">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1352">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-1353">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1353">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-1354">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1354">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-1355">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1355">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-1356">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1356">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1357">마우스 포인터가 이 요소 위에 있는 동안 마우스 오른쪽 단추를 누르면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1357">Occurs when the right mouse button is pressed while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1358">이 요소 트리를 통해 버블링 경로 따르는 것 처럼 보이지만, 실제로 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1358">Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="67f8b-1359">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1359">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="67f8b-1360">이 이벤트의 이벤트 데이터의 기본 이벤트 데이터를 노출 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1360">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="67f8b-1361">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <xref:System.Windows.UIElement.AddHandler%2A>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1361">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="67f8b-1362">표시 하는 경우 <xref:System.Windows.UIElement.MouseRightButtonDown> 처리, 기본적으로 표시 하는 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 경로 따르는 모든 후속 수신기에 대 한 처리 및 모든 관련 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1362">If you mark <xref:System.Windows.UIElement.MouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="67f8b-1363">가능한 여기에 클래스 처리기 생성 된 이벤트와 같은 <xref:System.Windows.Controls.Control.MouseDoubleClick>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1363">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="67f8b-1364">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <xref:System.Windows.UIElement>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <xref:System.Windows.Input.Mouse> 클래스).</span><span class="sxs-lookup"><span data-stu-id="67f8b-1364">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="67f8b-1365">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1365">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="67f8b-1366">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1366">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="67f8b-1367">마우스 오른쪽 단추로 마우스 이벤트는 자주 응용 프로그램 시나리오에서 기본 처리를 가집니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1367">Right button mouse events frequently have native handling in application scenarios.</span></span> <span data-ttu-id="67f8b-1368">예를 들어,를 마우스 오른쪽 단추로 상황에 맞는 메뉴를 표시할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1368">For instance, a right mouse button down might display a context menu.</span></span> <span data-ttu-id="67f8b-1369">참조 [ContextMenu 개요](~/docs/framework/wpf/controls/contextmenu-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1369">See [ContextMenu Overview](~/docs/framework/wpf/controls/contextmenu-overview.md).</span></span>  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-1370">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-1370">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-1371">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-1371">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseRightButtonDownEvent>|  
|<span data-ttu-id="67f8b-1372">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-1372">Routing strategy</span></span>|<span data-ttu-id="67f8b-1373">직접</span><span class="sxs-lookup"><span data-stu-id="67f8b-1373">Direct</span></span>|  
|<span data-ttu-id="67f8b-1374">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-1374">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="67f8b-1375">재정의 <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1375">Override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1376">
            <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1376">Identifies the <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1377">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1377">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-1378">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1378">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-1379">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1379">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-1380">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1380">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-1381">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1381">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1382">마우스 포인터가 이 요소 위에 있는 동안 마우스 오른쪽 단추를 놓으면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1382">Occurs when the right mouse button is released while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1383">이 요소 트리를 통해 버블링 경로 따르는 것 처럼 보이지만, 실제로 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1383">Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="67f8b-1384">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1384">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="67f8b-1385">이 이벤트의 이벤트 데이터의 기본 이벤트 데이터를 노출 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1385">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="67f8b-1386">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <xref:System.Windows.UIElement.AddHandler%2A>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1386">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="67f8b-1387">표시 하는 경우 <xref:System.Windows.UIElement.MouseRightButtonUp> 처리, 기본적으로 표시 하는 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 경로 따르는 모든 후속 수신기에 대 한 처리 및 모든 관련 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1387">If you mark <xref:System.Windows.UIElement.MouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="67f8b-1388">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <xref:System.Windows.UIElement>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <xref:System.Windows.Input.Mouse> 클래스).</span><span class="sxs-lookup"><span data-stu-id="67f8b-1388">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="67f8b-1389">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1389">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="67f8b-1390">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1390">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-1391">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-1391">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-1392">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-1392">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseRightButtonUpEvent>|  
|<span data-ttu-id="67f8b-1393">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-1393">Routing strategy</span></span>|<span data-ttu-id="67f8b-1394">직접</span><span class="sxs-lookup"><span data-stu-id="67f8b-1394">Direct</span></span>|  
|<span data-ttu-id="67f8b-1395">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-1395">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="67f8b-1396">재정의 <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1396">Override <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1397">
            <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1397">Identifies the <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1398">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1398">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-1399">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1399">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-1400">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1400">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-1401">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1401">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-1402">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1402">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1403">이 요소 위에서 마우스 단추를 놓으면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1403">Occurs when any mouse button is released over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1404">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.MouseUp> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1404">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-1405">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.MouseUp> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1405">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-1406"><xref:System.Windows.UIElement.MouseUp> 종종 발생과 함께 <xref:System.Windows.UIElement.MouseLeftButtonUp> 또는 <xref:System.Windows.UIElement.MouseRightButtonUp>, 두 개의 표준 마우스 단추의 릴리스의에 해당 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1406">The <xref:System.Windows.UIElement.MouseUp> event is often raised together with either <xref:System.Windows.UIElement.MouseLeftButtonUp> or <xref:System.Windows.UIElement.MouseRightButtonUp>, which correspond to a release of one of the two standard mouse buttons.</span></span> <span data-ttu-id="67f8b-1407"><xref:System.Windows.UIElement.MouseLeftButtonUp> 및 <xref:System.Windows.UIElement.MouseRightButtonUp> 라우트된 이벤트를는 있지만 직접 라우트된 이벤트를 서로 하며 적절 한 단추 특정 이벤트가 발생할 때는 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 경로 되지 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1407"><xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="67f8b-1408">에 대 한 설명 부분 참조 <xref:System.Windows.UIElement.MouseLeftButtonUp> 또는 <xref:System.Windows.UIElement.MouseRightButtonUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1408">See Remarks for <xref:System.Windows.UIElement.MouseLeftButtonUp> or <xref:System.Windows.UIElement.MouseRightButtonUp>.</span></span>  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-1409">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-1409">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-1410">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-1410">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseUpEvent>|  
|<span data-ttu-id="67f8b-1411">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-1411">Routing strategy</span></span>|<span data-ttu-id="67f8b-1412">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-1412">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-1413">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-1413">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="67f8b-1414">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewMouseUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1414">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseUp>.</span></span>  
  
-   <span data-ttu-id="67f8b-1415">재정의 <xref:System.Windows.UIElement.OnMouseUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1415">Override <xref:System.Windows.UIElement.OnMouseUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1416">
            <see cref="E:System.Windows.UIElement.MouseUp" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1416">Identifies the <see cref="E:System.Windows.UIElement.MouseUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1417">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1417">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-1418">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1418">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-1419">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1419">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-1420">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1420">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-1421">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1421">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1422">마우스 포인터가 이 요소 위에 있는 동안 사용자가 마우스 휠을 굴리면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1422">Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1423">포커스 또는 마우스 캡처 우선 마우스 포인터입니다. 따라서 수신 되 면는 <xref:System.Windows.UIElement.MouseWheel> 시점 요소에서 이벤트를 다른 요소에 마우스 포인터 수 실제로 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1423">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <xref:System.Windows.UIElement.MouseWheel> event from a focused or captured element, the mouse pointer might actually be over another element.</span></span>  
  
 <span data-ttu-id="67f8b-1424">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.MouseWheel> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1424">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseWheel> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-1425">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.MouseWheel> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1425">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseWheel> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-1426">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-1426">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-1427">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-1427">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseWheelEvent>|  
|<span data-ttu-id="67f8b-1428">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-1428">Routing strategy</span></span>|<span data-ttu-id="67f8b-1429">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-1429">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-1430">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-1430">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="67f8b-1431">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewMouseWheel>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1431">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseWheel>.</span></span>  
  
-   <span data-ttu-id="67f8b-1432">재정의 <xref:System.Windows.UIElement.OnMouseWheel%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1432">Override <xref:System.Windows.UIElement.OnMouseWheel%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1433">
            <see cref="E:System.Windows.UIElement.MouseWheel" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1433">Identifies the <see cref="E:System.Windows.UIElement.MouseWheel" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1434">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1434">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-1435">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1435">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-1436">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1436">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-1437">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1437">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-1438">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1438">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">
          <span data-ttu-id="67f8b-1439">기존 탭 순서에서 이동할 모드 또는 시각적으로 이동할 방향을 나타내는 속성이 포함된 이동 요청입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1439">A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1440">이 요소에서 다른 요소로 포커스를 이동하려고 시도합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1440">Attempts to move focus from this element to another element.</span>
          </span>
          <span data-ttu-id="67f8b-1441">포커스를 이동하는 방향은 지시 방향에 의해 지정됩니다. 이 방향은 이 요소의 표시 부모 조직 내에서 해석됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1441">The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67f8b-1442">요청된 이동이 수행되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1442">
              <see langword="true" /> if the requested traversal was performed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1443">이 메서드의 반환 값을 확인 하 고 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1443">Make sure you check the return value of this method.</span></span> <span data-ttu-id="67f8b-1444">반환 값이 `false` 방향으로 컨트롤의 구성에서 정의 된 탭 정지를 실행 하 고 이동 요청에서 줄 바꿈이 요청 하는 경우 반환 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1444">A return value of `false` might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnAccessKey">
      <MemberSignature Language="C#" Value="protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAccessKey(class System.Windows.Input.AccessKeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAccessKey (e As AccessKeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAccessKey(System::Windows::Input::AccessKeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.AccessKeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1445">선택키 이벤트에 대한 이벤트 데이터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1445">The event data to the access key event.</span>
          </span>
          <span data-ttu-id="67f8b-1446">이벤트 데이터는 호출된 키를 보고하며 이러한 이벤트를 보내는 작업을 제어하는 <see cref="T:System.Windows.Input.AccessKeyManager" /> 개체가 이 선택키 호출도 다른 요소로 보냈는지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1446">The event data reports which key was invoked, and indicate whether the <see cref="T:System.Windows.Input.AccessKeyManager" /> object that controls the sending of these events also sent this access key invocation to other elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1447">이 요소에 대해 의미가 있는 선택키를 호출하는 경우의 클래스 처리를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1447">Provides class handling for when an access key that is meaningful for this element is invoked.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1448">실제 AccessKey 이벤트가 없습니다는 <xref:System.Windows.UIElement> 클래스 또는 다른 위치에 대 한 처리기를 연결 하거나 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1448">There is no actual AccessKey event in the <xref:System.Windows.UIElement> class, or elsewhere, which you can raise or attach handlers for.</span></span> <span data-ttu-id="67f8b-1449">전용된 관리자 클래스를 통해 이벤트 시작 되는 대신, <xref:System.Windows.Input.AccessKeyManager>, 입력된 모델 전체에 적용 되는 선택 키 검색에 대 한 모든 입력 사후 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1449">Instead, the event is originated via a dedicated manager class, <xref:System.Windows.Input.AccessKeyManager>, which post-processes all input to search for access keys that are applicable to the entire input model.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="67f8b-1450">이 메서드의 기본 구현 <see cref="T:System.Windows.UIElement" /> 집합 키보드 포커스를이 요소 (호출 하 여 <see cref="M:System.Windows.UIElement.Focus" />).</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1450">The default implementation of this method in <see cref="T:System.Windows.UIElement" /> sets keyboard focus to this element (by calling <see cref="M:System.Windows.UIElement.Focus" />).</span>
            </span>
            <span data-ttu-id="67f8b-1451">구현에서 예상된 된 동작이 액세스 가능성 시나리오 이기 때문에 포커스를 받을 수, 하는 경우이 동작을 적용 해야 하는데 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1451">Implementations should perpetuate this behavior if they are focusable, because it is an expected behavior for accessibility scenarios.</span>
            </span>
            <span data-ttu-id="67f8b-1452">기본 구현을 전달 된 이벤트 데이터로 아무 작업도 수행 되는데; 더 이상 이벤트를 발생 시킵니다. 방금 포커스를 설정합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1452">Note that the base implementation does nothing with the passed event data and raises no further event; it just sets the focus.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnChildDesiredSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnChildDesiredSizeChanged (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChildDesiredSizeChanged(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnChildDesiredSizeChanged (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnChildDesiredSizeChanged(System::Windows::UIElement ^ child);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child">
          <span data-ttu-id="67f8b-1453">크기를 조정하는 자식 요소입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1453">The child element that is being resized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1454">자식 요소의 크기를 조정할 때 레이아웃 동작을 지원합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1454">Supports layout behavior when a child element is resized.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1455">이 메서드는 일반적으로 응용 프로그램 코드에서 호출 되지 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1455">This method is typically not called by your application code.</span></span> <span data-ttu-id="67f8b-1456">자체 레이아웃 잘못 되었을 수 있는 상태에서 확인 파생된 되는 요소 클래스를 추가로 만들 수 있도록 노출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1456">It is exposed so that derived element classes can make further checks on their own possibly invalid layout state.</span></span> <span data-ttu-id="67f8b-1457">클래스는 자식 요소에 크기 변화에 따라 레이아웃 단계에 대 한 처리 시간을 최소화 하는 최적화를 시도할 수도 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1457">Classes could also attempt optimizations to minimize the processing time for a layout pass based on size changes to child elements.</span></span> <span data-ttu-id="67f8b-1458">예 구현 하는 요소 클래스를 파생 <xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A> 는 <xref:System.Windows.Controls.Grid> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1458">An example derived element class that implements <xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A> is the <xref:System.Windows.Controls.Grid> control.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="67f8b-1459">
              <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> 메서드는 호출의 기본 구현 <see cref="M:System.Windows.UIElement.InvalidateMeasure" /> 자체에 있습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1459">The <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> method has the default implementation of calling <see cref="M:System.Windows.UIElement.InvalidateMeasure" /> on itself.</span>
            </span>
            <span data-ttu-id="67f8b-1460">일반적인 구현: 사용자가 직접 요소 모든 최적화 작업을 지원 하 고 다음 일반적으로 기본 구현을 호출 <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> 코드 분기 (캐싱 논리 자체 측정 "더티" 상태를 나타내는 하나) 중 하나 이상에서 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1460">A typical implementation would be: do whatever optimization your own element supports, and then typically call base <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> from at least one of the code branches (the one that indicated "dirty" state per your own measure caching logic).</span>
            </span>
            <span data-ttu-id="67f8b-1461">이 메서드는 자식이 크기 변경을 인 경우 레이아웃 처리에 호출 됩니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1461">This method is only called in the layout processing if it was the child itself that originated the size changes.</span>
            </span>
            <span data-ttu-id="67f8b-1462">부모 요소를 시작 하는 경우는 <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> 통과 레이아웃 시스템 규칙에 따라 부모 다시 계산 하는 레이아웃 이미 있습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1462">Otherwise, if the parent element initiates the <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> pass, according to the layout system rules, the parent is recalculating layout already.</span>
            </span>
            <span data-ttu-id="67f8b-1463">이 레이아웃 시스템 이므로 자식 요소 레이아웃 호출에서 부모 요소 크기 조정에 반환 없는 필요 레이아웃 자식-부모 순서 대로 처리 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1463">The layout system processes layout in the order of child-to-parent, so no return to parent element sizing from the child element layout calls is necessary.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-1464">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 인프라에 대해 클래스 관련 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 구현을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1464">Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67f8b-1465">형식별 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 구현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1465">The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="67f8b-1466">이 메서드의 구현은 특정 생성자를 호출 하는 일반적으로 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 구현 하 고 반환 값으로 반환 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1466">The implementation of this method is typically to call the constructor of a specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation, and return it as the return value.</span>
            </span>
            <span data-ttu-id="67f8b-1467">모든 <see cref="T:System.Windows.UIElement" /> 파생된 클래스가 자신의 특정 제공 하기 위해이 메서드를 구현 해야 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 구현에는 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 인프라입니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1467">All <see cref="T:System.Windows.UIElement" /> derived classes should implement this method in order to provide their own specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations to the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.</span>
            </span>
            <span data-ttu-id="67f8b-1468">이 패턴을 구현에 대 한 자세한 내용은 참조 하십시오. <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1468">For details on implementing this pattern, see <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1469">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1469">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1470">처리되지 않은 <see cref="E:System.Windows.DragDrop.DragEnter" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1470">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1471">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1471">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1472">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1472">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1473">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1473">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-1474">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1474">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1475">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1475">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-1476">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1476">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-1477">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1477">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-1478">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1478">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-1479">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1479">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-1480">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1480">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1481">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1481">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1482">처리되지 않은 <see cref="E:System.Windows.DragDrop.DragLeave" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1482">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragLeave" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1483">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1483">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1484">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1484">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1485">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1485">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-1486">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1486">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1487">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1487">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-1488">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1488">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-1489">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1489">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-1490">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1490">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-1491">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1491">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-1492">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1492">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1493">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1493">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1494">처리되지 않은 <see cref="E:System.Windows.DragDrop.DragOver" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1494">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragOver" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1495">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1495">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1496">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1496">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1497">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1497">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-1498">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1498">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1499">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1499">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-1500">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1500">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-1501">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1501">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-1502">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1502">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-1503">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1503">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-1504">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1504">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1505">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1505">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1506">처리되지 않은 <see cref="E:System.Windows.DragDrop.DragEnter" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1506">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1507">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1507">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1508">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1508">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1509">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1509">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-1510">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1510">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1511">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1511">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-1512">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1512">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-1513">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1513">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-1514">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1514">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-1515">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1515">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-1516">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1516">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1517">이벤트 데이터를 포함하는 <see cref="T:System.Windows.GiveFeedbackEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1517">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1518">처리되지 않은 <see cref="E:System.Windows.DragDrop.GiveFeedback" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1518">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.GiveFeedback" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1519">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1519">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1520">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1520">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1521">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1521">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-1522">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1522">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1523">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1523">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-1524">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1524">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-1525">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1525">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-1526">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1526">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-1527">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1527">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-1528">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1528">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1529">이벤트 데이터가 들어 있는 <see cref="T:System.Windows.RoutedEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1529">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data.</span>
          </span>
          <span data-ttu-id="67f8b-1530">이 이벤트 데이터에는 <see cref="E:System.Windows.UIElement.GotFocus" /> 이벤트의 식별자가 포함되어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1530">This event data must contain the identifier for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1531">지정된 이벤트 데이터를 사용하여 <see cref="E:System.Windows.UIElement.GotFocus" /> 라우트된 이벤트를 발생시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1531">Raises the <see cref="E:System.Windows.UIElement.GotFocus" /> routed event by using the event data provided.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1532">이 메서드를 가상가 이벤트를 발생 시키는 기본 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1532">This method, although virtual, does have a default implementation that raises the event.</span></span>  
  
 <span data-ttu-id="67f8b-1533">에 대 한 \* 메서드 구현 이벤트를 발생 시키기 위한 것 이며이 같은 메서드 구현을 이벤트를 발생 시키는 경우는 <xref:System.Windows.UIElement.IsFocused%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1533">This On\* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes.</span></span> <span data-ttu-id="67f8b-1534"><xref:System.Windows.UIElement.OnGotFocus%2A> 구현은 일부 다른 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 에 \* 구현과 해당 이벤트에 대 한 클래스 처리를 추가 하는 편리한 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1534">The <xref:System.Windows.UIElement.OnGotFocus%2A> implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On\* implementations, which only provide a convenient way to add class handling for that event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="67f8b-1535">포커스 이벤트를 발생 시 키 지를 의도적으로 필요가 없는 경우 구현 하는 기본 구현을 호출 해야 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1535">Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</span>
            </span>
            <span data-ttu-id="67f8b-1536">그렇지 않은 경우는 <see cref="E:System.Windows.UIElement.GotFocus" /> 이 요소에 포커스를 설정 하는 일반적인 사용자 작업 중에 이벤트가 발생 하지 않습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1536">Otherwise, the <see cref="E:System.Windows.UIElement.GotFocus" /> event is not raised during typical user operations that ordinarily set focus to this element.</span>
            </span>
            <span data-ttu-id="67f8b-1537">프로그램 요소 의도가 없으면 상태로 설정에서 요소를 방지할 수 있습니다 <see cref="P:System.Windows.UIElement.Focusable" /> 를 <see langword="false" />합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1537">If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <see cref="P:System.Windows.UIElement.Focusable" /> to <see langword="false" />.</span>
            </span>
          </para>
        </block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1538">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1538">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1539">처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1539">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1540">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1540">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1541">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1541">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1542">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1542">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-1543">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1543">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1544">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1544">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-1545">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1545">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-1546">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1546">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-1547">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1547">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-1548">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1548">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-1549">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1549">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1550">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1550">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1551">처리되지 않은 <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1551">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1552">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1552">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1553">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1553">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1554">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1554">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-1555">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1555">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1556">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1556">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-1557">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1557">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-1558">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1558">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-1559">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1559">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-1560">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1560">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-1561">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1561">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1562">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1562">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1563">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1563">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1564">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1564">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1565">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1565">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1566">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1566">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-1567">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1567">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1568">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1568">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-1569">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1569">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-1570">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1570">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-1571">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1571">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-1572">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1572">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-1573">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1573">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1574">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1574">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1575">이 요소에 터치가 캡처될 때 발생하는 <see cref="E:System.Windows.UIElement.GotTouchCapture" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1575">Provides class handling for the <see cref="E:System.Windows.UIElement.GotTouchCapture" /> routed event that occurs when a touch is captured to this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1576"><xref:System.Windows.UIElement.OnGotTouchCapture%2A> 메서드에 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1576">The <xref:System.Windows.UIElement.OnGotTouchCapture%2A> method has no default implementation.</span></span> <span data-ttu-id="67f8b-1577">재정의 <xref:System.Windows.UIElement.OnGotTouchCapture%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.UIElement.GotTouchCapture> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1577">Override <xref:System.Windows.UIElement.OnGotTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement.GotTouchCapture> event.</span></span> <span data-ttu-id="67f8b-1578">기본 클래스를 호출 해야 <xref:System.Windows.UIElement.OnGotTouchCapture%2A> 기본 클래스가 메서드 이벤트를 받도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1578">Be sure to call the base class’s <xref:System.Windows.UIElement.OnGotTouchCapture%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1579">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1579">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1580">처리되지 않은 <see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /> 이벤트가 이 요소에서 발생할 때 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1580">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="67f8b-1581">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1581">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1582">이 가상 메서드는 발생 하는 경우의 값은 <xref:System.Windows.UIElement.IsKeyboardFocused%2A> 종속성 속성이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1582">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsKeyboardFocused%2A> dependency property changes.</span></span> <span data-ttu-id="67f8b-1583">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1583">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="67f8b-1584">그런 다음 <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1584">Then the <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="67f8b-1585">에 <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> 이벤트 라우트된 이벤트가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1585">Notice that the  <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> event is not a routed event.</span></span> <span data-ttu-id="67f8b-1586">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1586">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="67f8b-1587">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1587">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1588">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1588">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="67f8b-1589">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1589">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1590">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1590">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1591">이 요소에 의해 <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> 이벤트가 발생하기 직전에 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1591">Invoked just before the <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> event is raised by this element.</span>
          </span>
          <span data-ttu-id="67f8b-1592">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1592">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1593">이 가상 메서드는 발생 하는 경우의 값은 <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> 종속성 속성이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1593">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> dependency property changes .</span></span> <span data-ttu-id="67f8b-1594">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1594">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="67f8b-1595">그런 다음 <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1595">Then the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="67f8b-1596">에 <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> 이벤트 라우트된 이벤트가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1596">Notice that the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event is not a routed event.</span></span> <span data-ttu-id="67f8b-1597">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1597">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="67f8b-1598">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1598">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1599">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1599">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="67f8b-1600">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1600">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1601">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1601">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1602">처리되지 않은 <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /> 이벤트가 이 요소에서 발생할 때 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1602">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="67f8b-1603">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1603">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1604">이 가상 메서드는 발생 하는 때의 값은 <xref:System.Windows.UIElement.IsMouseCaptured%2A> 종속성 속성의 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1604">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsMouseCaptured%2A> dependency property changes its value.</span></span> <span data-ttu-id="67f8b-1605">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1605">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="67f8b-1606">그런 다음 <xref:System.Windows.UIElement.IsMouseCapturedChanged> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1606">Then the <xref:System.Windows.UIElement.IsMouseCapturedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="67f8b-1607">에 <xref:System.Windows.UIElement.IsMouseCapturedChanged> 이벤트 라우트된 이벤트가; 아닙니다. 따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1607">Notice that the <xref:System.Windows.UIElement.IsMouseCapturedChanged> event is not a routed event; Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="67f8b-1608">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1608">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1609">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1609">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="67f8b-1610">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1610">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1611">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1611">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1612">처리되지 않은 <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> 이벤트가 이 요소에서 발생할 때 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1612">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="67f8b-1613">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1613">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="67f8b-1614">이 가상 메서드는 발생 하는 때의 값은 <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> 종속성 속성의 값이 변경 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1614">This virtual method is raised when the value of the <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> dependency property changes its value.</span>
            </span>
            <span data-ttu-id="67f8b-1615">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1615">The virtual method is raised first and can manipulate the event data as necessary.</span>
            </span>
            <span data-ttu-id="67f8b-1616">그런 다음 <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1616">Then the <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> event is raised with that same event data instance.</span>
            </span>
            <span data-ttu-id="67f8b-1617">이 이벤트는 라우트된 이벤트의; 없습니다 따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1617">Notice that the event is not a routed event; Therefore,  you cannot mark it as handled in the class handler.</span>
            </span>
            <span data-ttu-id="67f8b-1618">이 메서드는 기본 구현이 없습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1618">This method has no default implementation.</span>
            </span>
            <span data-ttu-id="67f8b-1619">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1619">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span>
            </span>
            <span data-ttu-id="67f8b-1620">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1620">You may call base either before or after your special handling, depending on your requirements.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1621">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1621">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1622">처리되지 않은 <see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /> 이벤트가 이 요소에서 발생할 때 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1622">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="67f8b-1623">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1623">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1624">이 가상 메서드는 발생 하는 때의 값은 <xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> 종속성 속성의 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1624">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> dependency property changes its value.</span></span> <span data-ttu-id="67f8b-1625">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1625">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="67f8b-1626">그런 다음 <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1626">Then the <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="67f8b-1627">에 <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> 이벤트 라우트된 이벤트가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1627">Notice that the <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> event is not a routed event.</span></span> <span data-ttu-id="67f8b-1628">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1628">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="67f8b-1629">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1629">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1630">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1630">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="67f8b-1631">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1631">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1632">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1632">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1633">처리되지 않은 <see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /> 이벤트가 이 요소에서 발생할 때 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1633">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="67f8b-1634">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1634">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1635">이 가상 메서드는 발생 하는 때의 값은 <xref:System.Windows.UIElement.IsStylusCaptured%2A> 종속성 속성의 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1635">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusCaptured%2A> dependency property changes its value.</span></span> <span data-ttu-id="67f8b-1636">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1636">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="67f8b-1637">그런 다음 <xref:System.Windows.UIElement.IsStylusCapturedChanged> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1637">Then the <xref:System.Windows.UIElement.IsStylusCapturedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="67f8b-1638">이벤트 라우트된 이벤트 아닌지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1638">Notice that the event is not a routed event.</span></span> <span data-ttu-id="67f8b-1639">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1639">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="67f8b-1640">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1640">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1641">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1641">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="67f8b-1642">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1642">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1643">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1643">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1644">처리되지 않은 <see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /> 이벤트가 이 요소에서 발생할 때 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1644">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="67f8b-1645">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1645">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1646">이 가상 메서드는 발생 하는 때의 값은 <xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> 종속성 속성의 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1646">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> dependency property changes its value.</span></span> <span data-ttu-id="67f8b-1647">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1647">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="67f8b-1648">그런 다음 <xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1648">Then the <xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="67f8b-1649">이벤트 라우트된 이벤트 아닌지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1649">Notice that the event is not a routed event.</span></span> <span data-ttu-id="67f8b-1650">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1650">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="67f8b-1651">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1651">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1652">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1652">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="67f8b-1653">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1653">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1654">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1654">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1655">처리되지 않은 <see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /> 이벤트가 이 요소에서 발생할 때 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1655">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="67f8b-1656">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1656">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1657">이 가상 메서드는 발생 하는 때의 값은 <xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> 종속성 속성의 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1657">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> dependency property changes its value.</span></span> <span data-ttu-id="67f8b-1658">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1658">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="67f8b-1659">그런 다음 <xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1659">Then the <xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="67f8b-1660">이벤트 라우트된 이벤트 아닌지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1660">Notice that the event is not a routed event.</span></span> <span data-ttu-id="67f8b-1661">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1661">Therefore you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="67f8b-1662">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1662">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1663">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1663">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="67f8b-1664">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1664">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1665">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.KeyEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1665">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1666">처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1666">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1667">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1667">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1668">키 입력은 입력된 전용된 관리자에서 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1668">Keystrokes are handled by a dedicated input manager.</span></span> <span data-ttu-id="67f8b-1669">예를 들어, 입력 및 명령 바인딩과 키 입력을 사용 하는 다른 프로그래밍 기능은 일반 키 입력으로 노출 되기 전에 키 입력을 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1669">Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</span></span> <span data-ttu-id="67f8b-1670">이러한 입력 처리 한 다음 시스템 기능에는 이벤트가 표시 <xref:System.Windows.UIElement.OnKeyDown%2A> 가 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1670">If these input system features mark the event as handled, then <xref:System.Windows.UIElement.OnKeyDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="67f8b-1671">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1671">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1672">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1672">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-1673">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1673">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1674">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1674">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-1675">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1675">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-1676">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1676">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-1677">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1677">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-1678">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1678">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-1679">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1679">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1680">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.KeyEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1680">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1681">처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1681">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1682">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1682">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1683">키 입력은 입력된 전용된 관리자에서 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1683">Keystrokes are handled by a dedicated input manager.</span></span> <span data-ttu-id="67f8b-1684">예를 들어, 입력 및 명령 바인딩과 키 입력을 사용 하는 다른 프로그래밍 기능은 일반 키 입력으로 노출 되기 전에 키 입력을 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1684">Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</span></span> <span data-ttu-id="67f8b-1685">이러한 입력 처리 한 다음 시스템 기능에는 이벤트가 표시 <xref:System.Windows.UIElement.OnKeyUp%2A> 가 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1685">If these input system features mark the event as handled, then <xref:System.Windows.UIElement.OnKeyUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="67f8b-1686">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1686">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1687">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1687">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-1688">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1688">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1689">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1689">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-1690">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1690">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-1691">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1691">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-1692">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1692">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-1693">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1693">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-1694">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1694">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1695">이벤트 데이터가 들어 있는 <see cref="T:System.Windows.RoutedEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1695">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data.</span>
          </span>
          <span data-ttu-id="67f8b-1696">이 이벤트 데이터에는 <see cref="E:System.Windows.UIElement.LostFocus" /> 이벤트의 식별자가 포함되어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1696">This event data must contain the identifier for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1697">지정된 이벤트 데이터를 사용하여 <see cref="E:System.Windows.UIElement.LostFocus" /> 라우트된 이벤트를 발생시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1697">Raises the <see cref="E:System.Windows.UIElement.LostFocus" /> routed event by using the event data that is provided.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1698">이 메서드를 가상가 이벤트를 발생 시키는 기본 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1698">This method, although virtual, does have a default implementation that raises the event.</span></span>  
  
 <span data-ttu-id="67f8b-1699">에 대 한 \* 메서드 구현 이벤트를 발생 시키기 위한 것 이며이 같은 메서드 구현을 이벤트를 발생 시키는 경우는 <xref:System.Windows.UIElement.IsFocused%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1699">This On\* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes.</span></span> <span data-ttu-id="67f8b-1700">이 구현은 일부 다른 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 에 \* 구현과 해당 이벤트에 대 한 클래스 처리를 추가 하는 편리한 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1700">This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On\* implementations, which only provide a convenient way to add class handling for that event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="67f8b-1701">포커스 이벤트를 발생 시 키 지를 의도적으로 필요가 없는 경우 구현 하는 기본 구현을 호출 해야 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1701">Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</span>
            </span>
            <span data-ttu-id="67f8b-1702">그렇지 않은 경우는 <see cref="E:System.Windows.UIElement.LostFocus" /> 이 요소에 포커스를 설정 하는 일반적인 사용자 작업 중에 이벤트가 발생 하지 않습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1702">Otherwise, the <see cref="E:System.Windows.UIElement.LostFocus" /> event is not raised during typical user operations that ordinarily set focus to this element.</span>
            </span>
            <span data-ttu-id="67f8b-1703">프로그램 요소 의도가 없으면 상태로 설정에서 요소를 방지할 수 있습니다 <see cref="P:System.Windows.UIElement.Focusable" /> 를 <see langword="false" />합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-1703">If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <see cref="P:System.Windows.UIElement.Focusable" /> to <see langword="false" />.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1704">이벤트 데이터가 들어 있는 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1704">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1705">처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1705">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1706">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1706">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1707">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1707">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1708">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1708">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-1709">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1709">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1710">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1710">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-1711">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1711">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-1712">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1712">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-1713">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1713">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-1714">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1714">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-1715">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1715">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1716">이벤트 데이터가 들어 있는 <see cref="T:System.Windows.Input.MouseEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1716">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1717">처리되지 않은 <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1717">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1718">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1718">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1719">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1719">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1720">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1720">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-1721">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1721">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1722">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1722">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-1723">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1723">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-1724">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1724">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-1725">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1725">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-1726">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1726">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-1727">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1727">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1728">이벤트 데이터가 들어 있는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1728">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1729">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1729">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1730">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1730">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1731">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1731">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1732">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1732">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-1733">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1733">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1734">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1734">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-1735">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1735">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-1736">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1736">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-1737">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1737">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-1738">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1738">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-1739">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1739">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1740">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1740">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1741">이 요소에서 터치 캡처가 손실될 때 발생하는 <see cref="E:System.Windows.UIElement.LostTouchCapture" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1741">Provides class handling for the <see cref="E:System.Windows.UIElement.LostTouchCapture" /> routed event that occurs when this element loses a touch capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1742"><xref:System.Windows.UIElement.OnLostTouchCapture%2A> 메서드에 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1742">The <xref:System.Windows.UIElement.OnLostTouchCapture%2A> method has no default implementation.</span></span> <span data-ttu-id="67f8b-1743">재정의 <xref:System.Windows.UIElement.OnLostTouchCapture%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.UIElement.LostTouchCapture> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1743">Override <xref:System.Windows.UIElement.OnLostTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement.LostTouchCapture> event.</span></span> <span data-ttu-id="67f8b-1744">기본 클래스를 호출 해야 <xref:System.Windows.UIElement.OnLostTouchCapture%2A> 기본 클래스가 메서드 이벤트를 받도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1744">Be sure to call the base class’s <xref:System.Windows.UIElement.OnLostTouchCapture%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationBoundaryFeedback(class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationBoundaryFeedback (e As ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationBoundaryFeedback(System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationBoundaryFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1745">이벤트 데이터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1745">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1746">
            <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> 이벤트가 발생할 때 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1746">Called when the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1747"><xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> 메서드에 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1747">The <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> method has no default implementation.</span></span> <span data-ttu-id="67f8b-1748">재정의 <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1748">Override <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event.</span></span> <span data-ttu-id="67f8b-1749">호출 하 여 <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> 기본 클래스가 기본 클래스의 메서드는 이벤트를 받도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1749">Be sure to call the <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationCompleted (System.Windows.Input.ManipulationCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationCompleted(class System.Windows.Input.ManipulationCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationCompleted (e As ManipulationCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationCompleted(System::Windows::Input::ManipulationCompletedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1750">이벤트 데이터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1750">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1751">
            <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> 이벤트가 발생할 때 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1751">Called when the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> event occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1752"><xref:System.Windows.UIElement.OnManipulationCompleted%2A> 메서드에 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1752">The <xref:System.Windows.UIElement.OnManipulationCompleted%2A> method has no default implementation.</span></span> <span data-ttu-id="67f8b-1753">재정의 <xref:System.Windows.UIElement.OnManipulationCompleted%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.UIElement.ManipulationCompleted> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1753">Override <xref:System.Windows.UIElement.OnManipulationCompleted%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationCompleted> event.</span></span> <span data-ttu-id="67f8b-1754">호출 하 여 <xref:System.Windows.UIElement.OnManipulationCompleted%2A> 기본 클래스가 기본 클래스의 메서드는 이벤트를 받도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1754">Be sure to call the <xref:System.Windows.UIElement.OnManipulationCompleted%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationDelta">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationDelta (System.Windows.Input.ManipulationDeltaEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationDelta(class System.Windows.Input.ManipulationDeltaEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationDelta (e As ManipulationDeltaEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationDelta(System::Windows::Input::ManipulationDeltaEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationDeltaEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1755">이벤트 데이터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1755">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1756">
            <see cref="E:System.Windows.UIElement.ManipulationDelta" /> 이벤트가 발생할 때 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1756">Called when the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> event occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1757"><xref:System.Windows.UIElement.OnManipulationDelta%2A> 메서드에 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1757">The <xref:System.Windows.UIElement.OnManipulationDelta%2A> method has no default implementation.</span></span> <span data-ttu-id="67f8b-1758">재정의 <xref:System.Windows.UIElement.OnManipulationDelta%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.UIElement.ManipulationDelta> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1758">Override <xref:System.Windows.UIElement.OnManipulationDelta%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationDelta> event.</span></span> <span data-ttu-id="67f8b-1759">호출 하 여 <xref:System.Windows.UIElement.OnManipulationDelta%2A> 기본 클래스가 기본 클래스의 메서드는 이벤트를 받도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1759">Be sure to call the <xref:System.Windows.UIElement.OnManipulationDelta%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationInertiaStarting (System.Windows.Input.ManipulationInertiaStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationInertiaStarting(class System.Windows.Input.ManipulationInertiaStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationInertiaStarting (e As ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationInertiaStarting(System::Windows::Input::ManipulationInertiaStartingEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationInertiaStartingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1760">이벤트 데이터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1760">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1761">
            <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> 이벤트가 발생할 때 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1761">Called when the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> event occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1762"><xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> 메서드에 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1762">The <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> method has no default implementation.</span></span> <span data-ttu-id="67f8b-1763">재정의 <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.UIElement.ManipulationInertiaStarting> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1763">Override <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event.</span></span> <span data-ttu-id="67f8b-1764">호출 하 여 <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> 기본 클래스가 기본 클래스의 메서드는 이벤트를 받도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1764">Be sure to call the <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarted (System.Windows.Input.ManipulationStartedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarted(class System.Windows.Input.ManipulationStartedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarted (e As ManipulationStartedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarted(System::Windows::Input::ManipulationStartedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1765">이벤트 데이터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1765">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1766">
            <see cref="E:System.Windows.UIElement.ManipulationStarted" /> 이벤트가 발생할 때 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1766">Called when the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> event occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1767"><xref:System.Windows.UIElement.OnManipulationStarted%2A> 메서드에 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1767">The <xref:System.Windows.UIElement.OnManipulationStarted%2A> method has no default implementation.</span></span> <span data-ttu-id="67f8b-1768">재정의 <xref:System.Windows.UIElement.OnManipulationStarted%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.UIElement.ManipulationStarted> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1768">Override <xref:System.Windows.UIElement.OnManipulationStarted%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationStarted> event.</span></span> <span data-ttu-id="67f8b-1769">호출 하 여 <xref:System.Windows.UIElement.OnManipulationStarted%2A> 기본 클래스가 기본 클래스의 메서드는 이벤트를 받도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1769">Be sure to call the <xref:System.Windows.UIElement.OnManipulationStarted%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarting (System.Windows.Input.ManipulationStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarting(class System.Windows.Input.ManipulationStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarting (e As ManipulationStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarting(System::Windows::Input::ManipulationStartingEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1770">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.ManipulationStartingEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1770">A <see cref="T:System.Windows.Input.ManipulationStartingEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1771">조작 프로세서가 처음으로 만들어지면 발생하는 <see cref="E:System.Windows.UIElement.ManipulationStarting" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1771">Provides class handling for the <see cref="E:System.Windows.UIElement.ManipulationStarting" /> routed event that occurs when the manipulation processor is first created.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1772"><xref:System.Windows.UIElement.OnManipulationStarting%2A> 메서드에 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1772">The <xref:System.Windows.UIElement.OnManipulationStarting%2A> method has no default implementation.</span></span> <span data-ttu-id="67f8b-1773">재정의 <xref:System.Windows.UIElement.OnManipulationStarting%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.UIElement.ManipulationStarting> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1773">Override <xref:System.Windows.UIElement.OnManipulationStarting%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationStarting> event.</span></span> <span data-ttu-id="67f8b-1774">기본 클래스를 호출 해야 <xref:System.Windows.UIElement.OnManipulationStarting%2A> 기본 클래스가 메서드 이벤트를 받도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1774">Be sure to call the base class’s <xref:System.Windows.UIElement.OnManipulationStarting%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1775">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1775">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="67f8b-1776">이 이벤트 데이터는 누른 상태 및 처리된 상태의 마우스 단추에 대한 세부 사항을 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1776">This event data reports details about the mouse button that was pressed and the handled state.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1777">처리되지 않은 <see cref="E:System.Windows.Input.Mouse.MouseDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1777">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1778">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1778">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1779">마우스 단추 작업 입력된 전용된 관리자에서 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1779">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="67f8b-1780">명령 바인딩과 및 입력과 같은 마우스 단추 작업을 사용 하는 다른 프로그래밍 기능은 일반 마우스 단추 동작으로 노출 되기 전에 작업에 대 한 처리기를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1780">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="67f8b-1781">이러한 시스템 기능 표시 입력은 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이벤트를 처리 <xref:System.Windows.UIElement.OnMouseDown%2A> 가 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1781">If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnMouseDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="67f8b-1782">이 클래스 처리기를 사용 하 여 처리 된 것으로 이벤트를 표시 하는 경우 사용자에 영향을 주는 다음과 같은 이벤트: <xref:System.Windows.UIElement.MouseLeftButtonDown> 및 <xref:System.Windows.UIElement.MouseRightButtonDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1782">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="67f8b-1783">이들이 이벤트는 받는 요소에서 발생할 수 있습니다 때 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1783">Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="67f8b-1784">이 이벤트를 처리 하는 클래스에서 처리 된 것으로 표시 하는 경우 하위 이벤트는 여전히 발생 됩니다. 그러나 이벤트 데이터에서의 처리 상태를 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1784">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="67f8b-1785">명시적으로 사용 하지 않는 한 인스턴스 처리기 하위 이벤트에 대 한 클래스 처리에서의 이벤트를 처리 하는 경우 호출 되지 않습니다 <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 와 `handledEventsToo` `true` 처리기를 연결 하기 위해 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1785">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="67f8b-1786">클래스 처리기도가 호출 되지 않으면 해당 클래스 처리기에 등록 된는 <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 서명을 `handledEventsToo` `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1786">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="67f8b-1787">처리 하 여 <xref:System.Windows.UIElement.OnMouseDown%2A>을 처리 클래스 처리에 가능한 모든 마우스 단추 누르기 작업이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1787">By handling <xref:System.Windows.UIElement.OnMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions.</span></span> <span data-ttu-id="67f8b-1788">이 동작은 원치 않을 수 있습니다. 따라서이 가상 메서드를 사용 하 여 이벤트를 처리 하는 경우 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1788">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="67f8b-1789">각 단추 특정 직접 이벤트에는 가상 \*; 메서드 여부 이러한 단추 특정 클래스 처리기를 재정의 더 적합할 수 있습니다 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1789">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="67f8b-1790">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1790">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1791">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1791">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-1792">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1792">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1793">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1793">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-1794">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1794">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-1795">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1795">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-1796">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1796">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-1797">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1797">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-1798">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1798">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1799">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1799">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1800">이 요소에 의해 처리되지 않은 <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> 연결된 이벤트가 발생할 때 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1800">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event is raised on this element.</span>
          </span>
          <span data-ttu-id="67f8b-1801">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1801">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1802">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1802">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1803">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1803">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="67f8b-1804">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1804">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="67f8b-1805">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1805">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1806">이 경우 일치 하는 이벤트는 직접 라우팅 전략으로 라우트된 이벤트를 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1806">In this case the matching event is a routed event, with a direct routing strategy.</span></span> <span data-ttu-id="67f8b-1807">이벤트 처리로 표시 하는 것은 일반적인 인스턴스 처리기를 방지 하는 데 유용 (지정 하지 않는 `handledEventsToo`) 호출 되지 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1807">Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1808">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1808">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1809">이 요소에 의해 처리되지 않은 <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> 연결된 이벤트가 발생할 때 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1809">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event is raised on this element.</span>
          </span>
          <span data-ttu-id="67f8b-1810">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1810">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1811">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1811">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1812">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1812">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="67f8b-1813">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1813">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="67f8b-1814">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1814">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1815">이 경우 일치 하는 이벤트는 직접 라우팅 전략으로 라우트된 이벤트를 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1815">In this case the matching event is a routed event, with a direct routing strategy.</span></span> <span data-ttu-id="67f8b-1816">이벤트 처리로 표시 하는 것은 일반적인 인스턴스 처리기를 방지 하는 데 유용 (지정 하지 않는 `handledEventsToo`) 호출 되지 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1816">Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1817">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1817">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="67f8b-1818">이벤트 데이터는 마우스 왼쪽 단추를 놓았음을 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1818">The event data reports that the left mouse button was pressed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1819">이 요소에 의해 처리되지 않은 <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> 라우트된 이벤트가 발생할 때 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1819">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event is raised on this element.</span>
          </span>
          <span data-ttu-id="67f8b-1820">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1820">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1821"><xref:System.Windows.UIElement.MouseLeftButtonDown> 이벤트가 버블링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1821">The <xref:System.Windows.UIElement.MouseLeftButtonDown> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="67f8b-1822"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이 이벤트는, 및 각 <xref:System.Windows.UIElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시킵니다. <xref:System.Windows.UIElement.MouseLeftButtonDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1822"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseLeftButtonDown>.</span></span> <span data-ttu-id="67f8b-1823">사용 하기는 <xref:System.Windows.UIElement.MouseLeftButtonDown> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1823">Although you can mark the <xref:System.Windows.UIElement.MouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="67f8b-1824">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 `handledEventsToo`) 호출 되지 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1824">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="67f8b-1825">일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.UIElement> 수신 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 여 적절 한 로컬 이벤트로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1825">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="67f8b-1826">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1826">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="67f8b-1827">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1827">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="67f8b-1828">마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.UIElement> 재정의 하 여 <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1828">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="67f8b-1829">또는 이벤트는 특정 마우스 상태에 대 한 처리를 변경 하려면이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1829">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="67f8b-1830">기본 구현을 호출 것인지 여부는 각 시나리오에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1830">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="67f8b-1831">기본 호출 하지 못하면 해당 마우스 이벤트 호출 하지 못하면 하는 상위 클래스에 대 한 기본 입력된 처리를 비활성화 <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1831">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>.</span></span> <span data-ttu-id="67f8b-1832">하지만 파생 될 수 예를 들어 <xref:System.Windows.Controls.Button> 재정의 <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> 프로그램 파생된 클래스에서 기본 구현을 호출 하지 않고이 재정의 해제 합니다.는 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1832">For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1833">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1833">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="67f8b-1834">이벤트 데이터는 마우스 왼쪽 단추를 놓았음을 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1834">The event data reports that the left mouse button was released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1835">처리되지 않은 <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1835">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1836">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1836">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1837"><xref:System.Windows.UIElement.MouseLeftButtonUp> 이벤트가 버블링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1837">The <xref:System.Windows.UIElement.MouseLeftButtonUp> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="67f8b-1838"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 이 이벤트는, 및 각 <xref:System.Windows.UIElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시킵니다. <xref:System.Windows.UIElement.MouseLeftButtonUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1838"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseLeftButtonUp>.</span></span> <span data-ttu-id="67f8b-1839">사용 하기는 <xref:System.Windows.UIElement.MouseLeftButtonUp> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1839">Although you can mark the <xref:System.Windows.UIElement.MouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="67f8b-1840">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 `handledEventsToo`) 호출 되지 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1840">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="67f8b-1841">일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.UIElement> 수신 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 여 적절 한 로컬 이벤트로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1841">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="67f8b-1842">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1842">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="67f8b-1843">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1843">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="67f8b-1844">마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.UIElement> 재정의 하 여 <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1844">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1845">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1845">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1846">처리되지 않은 <see cref="E:System.Windows.Input.Mouse.MouseMove" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1846">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1847">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1847">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1848">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1848">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1849">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1849">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-1850">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1850">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1851">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1851">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-1852">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1852">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-1853">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1853">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-1854">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1854">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-1855">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1855">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-1856">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1856">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1857">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1857">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="67f8b-1858">이벤트 데이터는 마우스 오른쪽 단추를 놓았음을 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1858">The event data reports that the right mouse button was pressed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1859">처리되지 않은 <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1859">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1860">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1860">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1861"><xref:System.Windows.UIElement.MouseRightButtonDown> 이벤트가 버블링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1861">The <xref:System.Windows.UIElement.MouseRightButtonDown> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="67f8b-1862"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이 이벤트는, 및 각 <xref:System.Windows.UIElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시킵니다. <xref:System.Windows.UIElement.MouseRightButtonDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1862"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="67f8b-1863">사용 하기는 <xref:System.Windows.UIElement.MouseRightButtonDown> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1863">Although you can mark the <xref:System.Windows.UIElement.MouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="67f8b-1864">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 `handledEventsToo`) 호출 되지 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1864">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="67f8b-1865">일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.UIElement> 수신 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 여 적절 한 로컬 이벤트로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1865">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="67f8b-1866">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1866">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="67f8b-1867">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1867">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="67f8b-1868">마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.UIElement> 재정의 하 여 <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1868">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="67f8b-1869">또는 이벤트는 특정 마우스 상태에 대 한 처리를 변경 하려면이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1869">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="67f8b-1870">기본 구현을 호출 것인지 여부는 각 시나리오에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1870">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="67f8b-1871">기본 호출 하지 못하면 해당 마우스 이벤트 호출 하지 못하면 하는 상위 클래스에 대 한 기본 입력된 처리를 비활성화 <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1871">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>.</span></span> <span data-ttu-id="67f8b-1872">하지만 파생 될 수 예를 들어 <xref:System.Windows.Controls.Control> 재정의 <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> 기본 호출 하지 않고 파생된 클래스에서이 재정의 사용할 구성 요소인 컨트롤에 대해 상황에 맞는 메뉴 서비스의는 <xref:System.Windows.Controls.Control> 기본 동작입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1872">For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1873">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1873">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="67f8b-1874">이벤트 데이터는 마우스 오른쪽 단추를 놓았음을 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1874">The event data reports that the right mouse button was released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1875">처리되지 않은 <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1875">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1876">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1876">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1877"><xref:System.Windows.UIElement.MouseRightButtonUp> 이벤트가 버블링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1877">The <xref:System.Windows.UIElement.MouseRightButtonUp> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="67f8b-1878"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 이 이벤트는, 및 각 <xref:System.Windows.UIElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시킵니다. <xref:System.Windows.UIElement.MouseRightButtonUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1878"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonUp>.</span></span> <span data-ttu-id="67f8b-1879">사용 하기는 <xref:System.Windows.UIElement.MouseRightButtonUp> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1879">Although you can mark the <xref:System.Windows.UIElement.MouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="67f8b-1880">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 `handledEventsToo`) 호출 되지 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1880">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="67f8b-1881">일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.UIElement> 수신 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 여 적절 한 로컬 이벤트로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1881">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="67f8b-1882">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1882">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="67f8b-1883">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1883">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="67f8b-1884">마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.UIElement> 재정의 하 여 <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1884">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1885">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1885">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="67f8b-1886">이벤트 데이터는 마우스 단추를 놓았음을 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1886">The event data reports that the mouse button was released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1887">처리되지 않은 <see cref="E:System.Windows.Input.Mouse.MouseUp" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1887">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1888">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1888">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1889">마우스 단추 작업 입력된 전용된 관리자에서 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1889">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="67f8b-1890">명령 바인딩과 및 입력과 같은 마우스 단추 작업을 사용 하는 다른 프로그래밍 기능은 일반 마우스 단추 동작으로 노출 되기 전에 작업에 대 한 처리기를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1890">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="67f8b-1891">이러한 시스템 기능 표시 입력은 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 이벤트를 처리 <xref:System.Windows.UIElement.OnMouseUp%2A> 가 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1891">If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnMouseUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="67f8b-1892">이 클래스 처리기를 사용 하 여 처리 된 것으로 이벤트를 표시 하는 경우 사용자에 영향을 주는 다음과 같은 이벤트: <xref:System.Windows.UIElement.MouseLeftButtonUp> 및 <xref:System.Windows.UIElement.MouseRightButtonUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1892">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp>.</span></span> <span data-ttu-id="67f8b-1893">이들이 이벤트는 받는 요소에서 발생할 수 있습니다 때 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1893">Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="67f8b-1894">이 이벤트를 처리 하는 클래스에서 처리 된 것으로 표시 하는 경우 하위 이벤트는 여전히 발생 됩니다. 그러나 이벤트 데이터에서의 처리 상태를 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1894">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="67f8b-1895">명시적으로 사용 하지 않는 한 인스턴스 처리기 하위 이벤트에 대 한 클래스 처리에서의 이벤트를 처리 하는 경우 호출 되지 않습니다 <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 와 `handledEventsToo` `true` 처리기를 연결 하기 위해 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1895">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="67f8b-1896">클래스 처리기도가 호출 되지 않으면 해당 클래스 처리기에 등록 된는 <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 서명을 `handledEventsToo` `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1896">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="67f8b-1897">처리 하 여 <xref:System.Windows.UIElement.OnMouseUp%2A>을 처리 클래스 처리에 가능한 모든 마우스 단추 동작을 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1897">By handling <xref:System.Windows.UIElement.OnMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions.</span></span> <span data-ttu-id="67f8b-1898">이 동작은 원치 않을 수 있습니다. 따라서이 가상 메서드를 사용 하 여 이벤트를 처리 하는 경우 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1898">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="67f8b-1899">각 단추 특정 직접 이벤트에는 가상 \*; 메서드 여부 이러한 단추 특정 클래스 처리기를 재정의 더 적합할 수 있습니다 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1899">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="67f8b-1900">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1900">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1901">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1901">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-1902">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1902">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1903">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1903">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-1904">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1904">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-1905">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1905">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-1906">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1906">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-1907">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1907">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-1908">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1908">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1909">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseWheelEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1909">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1910">처리되지 않은 <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1910">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1911">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1911">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1912">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1912">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1913">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1913">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-1914">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1914">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1915">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1915">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-1916">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1916">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-1917">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1917">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-1918">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1918">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-1919">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1919">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-1920">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1920">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1921">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1921">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1922">처리되지 않은 <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1922">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1923">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1923">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1924">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1924">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1925">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1925">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-1926">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1926">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1927">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1927">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-1928">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1928">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-1929">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1929">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-1930">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1930">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-1931">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1931">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-1932">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1932">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="67f8b-1933">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1933">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1934">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1934">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1935">처리되지 않은 <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1935">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1936">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1936">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1937">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1937">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1938">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1938">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-1939">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1939">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1940">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1940">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-1941">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1941">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-1942">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1942">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-1943">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1943">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-1944">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1944">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-1945">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1945">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="67f8b-1946">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1946">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1947">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1947">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1948">처리되지 않은 <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1948">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1949">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1949">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1950">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1950">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1951">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1951">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-1952">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1952">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1953">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1953">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-1954">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1954">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-1955">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1955">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-1956">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1956">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-1957">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1957">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-1958">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1958">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="67f8b-1959">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1959">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1960">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1960">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1961">처리되지 않은 <see cref="E:System.Windows.DragDrop.PreviewDrop" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1961">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDrop" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1962">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1962">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1963">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1963">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1964">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1964">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-1965">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1965">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1966">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1966">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-1967">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1967">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-1968">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1968">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-1969">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1969">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-1970">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1970">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-1971">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1971">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="67f8b-1972">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1972">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1973">이벤트 데이터를 포함하는 <see cref="T:System.Windows.GiveFeedbackEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1973">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1974">처리되지 않은 <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1974">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1975">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1975">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1976">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1976">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1977">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1977">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-1978">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1978">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1979">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1979">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-1980">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1980">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-1981">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1981">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-1982">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1982">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-1983">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1983">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-1984">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1984">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="67f8b-1985">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1985">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1986">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1986">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-1987">처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1987">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-1988">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1988">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-1989">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1989">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-1990">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1990">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-1991">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1991">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-1992">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1992">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-1993">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1993">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-1994">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1994">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-1995">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1995">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-1996">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1996">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-1997">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1997">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="67f8b-1998">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-1998">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-1999">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.KeyEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-1999">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2000">처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2000">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2001">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2001">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2002">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2002">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2003">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2003">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2004">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2004">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2005">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2005">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2006">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2006">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2007">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2007">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2008">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2008">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2009">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2009">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2010">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2010">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="67f8b-2011">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2011">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2012">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.KeyEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2012">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2013">처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2013">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2014">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2014">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2015">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2015">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2016">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2016">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2017">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2017">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2018">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2018">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2019">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2019">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2020">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2020">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2021">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2021">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2022">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2022">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2023">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2023">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="67f8b-2024">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2024">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2025">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2025">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2026">처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2026">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2027">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2027">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2028">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2028">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2029">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2029">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2030">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2030">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2031">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2031">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2032">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2032">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2033">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2033">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2034">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2034">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2035">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2035">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2036">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2036">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="67f8b-2037">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2037">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2038">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2038">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="67f8b-2039">이벤트 데이터는 하나 이상의 마우스 단추를 놓았음을 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2039">The event data reports that one or more mouse buttons were pressed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2040">처리되지 않은 <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> 연결된 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2040">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2041">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2041">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2042">마우스 단추 작업 입력된 전용된 관리자에서 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2042">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="67f8b-2043">명령 바인딩과 및 입력과 같은 마우스 단추 작업을 사용 하는 다른 프로그래밍 기능은 일반 마우스 단추 동작으로 노출 되기 전에 작업에 대 한 처리기를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2043">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="67f8b-2044">이러한 시스템 기능 표시 입력은 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 이벤트를 처리 <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> 가 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2044">If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="67f8b-2045">이 클래스 처리기를 사용 하 여 처리 된 것으로 이벤트를 표시 하는 경우 사용자에 영향을 주는 다음과 같은 이벤트: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> 및 <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2045">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.</span></span> <span data-ttu-id="67f8b-2046">이들이 이벤트는 받는 요소에서 발생할 수 있습니다 때 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2046">Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="67f8b-2047">이 이벤트를 처리 하는 클래스에서 처리 된 것으로 표시 하는 경우 하위 이벤트는 여전히 발생 됩니다. 그러나 이벤트 데이터에서의 처리 상태를 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2047">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="67f8b-2048">명시적으로 사용 하지 않는 한 인스턴스 처리기 하위 이벤트에 대 한 클래스 처리에서의 이벤트를 처리 하는 경우 호출 되지 않습니다 <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 와 `handledEventsToo` `true` 처리기를 연결 하기 위해 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2048">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="67f8b-2049">클래스 처리기도가 호출 되지 않으면 해당 클래스 처리기에 등록 된는 <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 서명을 `handledEventsToo` `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2049">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="67f8b-2050">처리 하 여 <xref:System.Windows.UIElement.OnPreviewMouseDown%2A>을 처리 클래스 처리에 가능한 모든 마우스 단추 누르기 작업이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2050">By handling <xref:System.Windows.UIElement.OnPreviewMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions.</span></span> <span data-ttu-id="67f8b-2051">이 동작은 원치 않을 수 있습니다. 따라서이 가상 메서드를 사용 하 여 이벤트를 처리 하는 경우 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2051">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="67f8b-2052">각 단추 특정 직접 이벤트에는 가상 \*; 메서드 여부 이러한 단추 특정 클래스 처리기를 재정의 더 적합할 수 있습니다 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2052">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="67f8b-2053">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2053">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2054">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2054">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2055">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2055">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2056">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2056">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2057">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2057">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2058">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2058">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2059">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2059">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2060">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2060">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2061">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2061">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="67f8b-2062">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2062">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2063">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2063">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="67f8b-2064">이벤트 데이터는 마우스 왼쪽 단추를 놓았음을 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2064">The event data reports that the left mouse button was pressed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2065">처리되지 않은 <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2065">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2066">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2066">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2067"><xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> 이벤트 터널링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2067">The <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="67f8b-2068"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 이 이벤트는 라우팅, 터널 및 각 <xref:System.Windows.UIElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2068"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>.</span></span> <span data-ttu-id="67f8b-2069">사용 하기는 <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2069">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="67f8b-2070">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 `handledEventsToo`) 호출 되지 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2070">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="67f8b-2071">일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.UIElement> 수신 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 여 적절 한 로컬 이벤트로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2071">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="67f8b-2072">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2072">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="67f8b-2073">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2073">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="67f8b-2074">마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.UIElement> 재정의 하 여 <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2074">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="67f8b-2075">또는 이벤트는 특정 마우스 상태에 대 한 처리를 변경 하려면이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2075">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="67f8b-2076">기본 구현을 호출 것인지 여부는 각 시나리오에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2076">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="67f8b-2077">기본 호출 하지 못하면 해당 마우스 이벤트 호출 하지 못하면 하는 상위 클래스에 대 한 기본 입력된 처리를 비활성화 <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2077">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>.</span></span> <span data-ttu-id="67f8b-2078">하지만 파생 될 수 예를 들어 <xref:System.Windows.Controls.Button> 재정의 <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> 프로그램 파생된 클래스에서 기본 구현을 호출 하지 않고이 재정의 해제 합니다.는 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2078">For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2079">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2079">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="67f8b-2080">이벤트 데이터는 마우스 왼쪽 단추를 놓았음을 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2080">The event data reports that the left mouse button was released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2081">처리되지 않은 <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2081">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2082">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2082">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2083"><xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> 이벤트 터널링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2083">The <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="67f8b-2084"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 이 이벤트는 라우팅, 터널 및 각 <xref:System.Windows.UIElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2084"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>.</span></span> <span data-ttu-id="67f8b-2085">사용 하기는 <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2085">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="67f8b-2086">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 `handledEventsToo`) 호출 되지 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2086">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="67f8b-2087">일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.UIElement> 수신 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 여 적절 한 로컬 이벤트로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2087">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="67f8b-2088">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2088">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="67f8b-2089">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2089">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="67f8b-2090">마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.UIElement> 재정의 하 여 <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2090">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2091">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2091">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2092">처리되지 않은 <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2092">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2093">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2093">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2094">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2094">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2095">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2095">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2096">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2096">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2097">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2097">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2098">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2098">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2099">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2099">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2100">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2100">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2101">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2101">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2102">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2102">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="67f8b-2103">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2103">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2104">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2104">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="67f8b-2105">이벤트 데이터는 마우스 오른쪽 단추를 놓았음을 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2105">The event data reports that the right mouse button was pressed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2106">처리되지 않은 <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2106">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2107">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2107">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2108"><xref:System.Windows.UIElement.PreviewMouseRightButtonDown> 이벤트 터널링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2108">The <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="67f8b-2109"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 이 이벤트는 라우팅, 터널 및 각 <xref:System.Windows.UIElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <xref:System.Windows.UIElement.MouseRightButtonDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2109"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="67f8b-2110">사용 하기는 <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2110">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="67f8b-2111">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 `handledEventsToo`) 호출 되지 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2111">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="67f8b-2112">일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.UIElement> 수신 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 여 적절 한 로컬 이벤트로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2112">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="67f8b-2113">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2113">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="67f8b-2114">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2114">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="67f8b-2115">마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.UIElement> 재정의 하 여 <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2115">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="67f8b-2116">또는 이벤트는 특정 마우스 상태에 대 한 처리를 변경 하려면이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2116">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="67f8b-2117">기본 구현을 호출 것인지 여부는 각 시나리오에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2117">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="67f8b-2118">기본 호출 하지 못하면 해당 마우스 이벤트 호출 하지 못하면 하는 상위 클래스에 대 한 기본 입력된 처리를 비활성화 <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2118">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>.</span></span> <span data-ttu-id="67f8b-2119">하지만 파생 될 수 예를 들어 <xref:System.Windows.Controls.Control> 재정의 <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> 기본 호출 하지 않고 파생된 클래스에서이 재정의 사용할 구성 요소인 컨트롤에 대해 상황에 맞는 메뉴 서비스의는 <xref:System.Windows.Controls.Control> 기본 동작입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2119">For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2120">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2120">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="67f8b-2121">이벤트 데이터는 마우스 오른쪽 단추를 놓았음을 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2121">The event data reports that the right mouse button was released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2122">처리되지 않은 <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2122">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2123">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2123">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2124"><xref:System.Windows.UIElement.PreviewMouseRightButtonUp> 이벤트 터널링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2124">The <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="67f8b-2125"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 이 이벤트는 라우팅, 터널 및 각 <xref:System.Windows.UIElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2125"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="67f8b-2126">사용 하기는 <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2126">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="67f8b-2127">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 `handledEventsToo`) 호출 되지 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2127">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="67f8b-2128">일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.UIElement> 수신 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 여 적절 한 로컬 이벤트로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2128">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="67f8b-2129">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2129">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="67f8b-2130">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2130">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="67f8b-2131">마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.UIElement> 재정의 하 여 <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2131">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2132">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2132">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="67f8b-2133">이벤트 데이터는 하나 이상의 마우스 단추를 놓았음을 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2133">The event data reports that one or more mouse buttons were released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2134">처리되지 않은 <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2134">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2135">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2135">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2136">마우스 단추 작업 입력된 전용된 관리자에서 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2136">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="67f8b-2137">명령 바인딩과 및 입력과 같은 마우스 단추 작업을 사용 하는 다른 프로그래밍 기능은 일반 마우스 단추 동작으로 노출 되기 전에 작업에 대 한 처리기를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2137">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="67f8b-2138">이러한 시스템 기능 표시 입력은 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 이벤트를 처리 <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> 가 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2138">If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="67f8b-2139">이 클래스 처리기를 사용 하 여 처리 된 것으로 이벤트를 표시 하는 경우 사용자에 영향을 주는 다음과 같은 이벤트: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> 및 <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2139">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="67f8b-2140">이들이 이벤트는 받는 요소에서 발생할 수 있습니다 때 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2140">Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="67f8b-2141">이 이벤트를 처리 하는 클래스에서 처리 된 것으로 표시 하는 경우 하위 이벤트는 여전히 발생 됩니다. 그러나 이벤트 데이터에서의 처리 상태를 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2141">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="67f8b-2142">명시적으로 사용 하지 않는 한 인스턴스 처리기 하위 이벤트에 대 한 클래스 처리에서의 이벤트를 처리 하는 경우 호출 되지 않습니다 <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 와 `handledEventsToo` `true` 처리기를 연결 하기 위해 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2142">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="67f8b-2143">클래스 처리기도가 호출 되지 않으면 해당 클래스 처리기에 등록 된는 <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 서명을 `handledEventsToo` `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2143">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="67f8b-2144">처리 하 여 <xref:System.Windows.UIElement.OnPreviewMouseUp%2A>을 처리 클래스 처리에 가능한 모든 마우스 단추 동작을 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2144">By handling <xref:System.Windows.UIElement.OnPreviewMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions.</span></span> <span data-ttu-id="67f8b-2145">이 동작은 원치 않을 수 있습니다. 따라서이 가상 메서드를 사용 하 여 이벤트를 처리 하는 경우 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2145">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="67f8b-2146">각 단추 특정 직접 이벤트에는 가상 \*; 메서드 여부 이러한 단추 특정 클래스 처리기를 재정의 더 적합할 수 있습니다 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2146">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="67f8b-2147">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2147">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2148">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2148">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2149">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2149">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2150">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2150">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2151">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2151">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2152">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2152">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2153">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2153">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2154">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2154">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2155">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2155">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2156">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseWheelEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2156">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2157">처리되지 않은 <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2157">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2158">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2158">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2159">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2159">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2160">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2160">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2161">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2161">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2162">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2162">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2163">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2163">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2164">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2164">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2165">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2165">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2166">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2166">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2167">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2167">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="67f8b-2168">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2168">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2169">이벤트 데이터를 포함하는 <see cref="T:System.Windows.QueryContinueDragEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2169">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2170">처리되지 않은 <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2170">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2171">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2171">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2172">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2172">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2173">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2173">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2174">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2174">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2175">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2175">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2176">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2176">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2177">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2177">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2178">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2178">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2179">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2179">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2180">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2180">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="67f8b-2181">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2181">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2182">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2182">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2183">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2183">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2184">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2184">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2185">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2185">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2186">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2186">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2187">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2187">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2188">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2188">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2189">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2189">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2190">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2190">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2191">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2191">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2192">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2192">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2193">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2193">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="67f8b-2194">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2194">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2195">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2195">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2196">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2196">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2197">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2197">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2198">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2198">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2199">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2199">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2200">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2200">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2201">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2201">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2202">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2202">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2203">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2203">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2204">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2204">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2205">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2205">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2206">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2206">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="67f8b-2207">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2207">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2208">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusDownEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2208">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2209">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2209">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2210">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2210">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2211">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2211">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2212">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2212">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2213">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2213">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2214">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2214">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2215">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2215">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2216">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2216">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2217">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2217">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2218">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2218">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2219">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2219">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="67f8b-2220">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2220">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2221">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2221">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2222">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2222">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2223">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2223">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2224">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2224">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2225">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2225">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2226">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2226">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2227">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2227">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2228">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2228">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2229">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2229">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2230">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2230">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2231">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2231">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2232">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2232">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="67f8b-2233">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2233">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2234">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2234">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2235">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2235">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2236">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2236">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2237">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2237">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2238">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2238">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2239">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2239">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2240">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2240">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2241">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2241">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2242">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2242">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2243">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2243">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2244">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2244">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2245">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2245">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="67f8b-2246">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2246">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2247">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2247">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2248">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2248">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2249">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2249">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2250">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2250">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2251">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2251">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2252">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2252">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2253">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2253">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2254">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2254">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2255">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2255">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2256">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2256">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2257">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2257">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2258">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2258">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="67f8b-2259">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2259">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2260">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2260">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2261">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2261">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2262">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2262">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2263">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2263">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2264">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2264">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2265">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2265">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2266">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2266">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2267">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2267">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2268">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2268">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2269">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2269">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2270">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2270">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2271">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2271">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="67f8b-2272">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2272">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2273">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2273">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2274">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2274">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2275">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2275">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2276">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2276">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2277">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2277">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2278">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2278">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2279">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2279">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2280">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2280">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2281">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2281">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2282">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2282">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2283">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2283">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2284">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2284">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="67f8b-2285">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2285">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2286">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2286">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2287">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2287">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2288">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2288">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2289">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2289">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2290">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2290">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2291">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2291">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2292">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2292">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2293">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2293">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2294">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2294">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2295">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2295">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2296">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2296">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2297">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2297">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="67f8b-2298">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2298">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2299">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TextCompositionEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2299">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2300">처리되지 않은 <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2300">Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2301">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2301">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2302">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2302">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2303">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2303">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2304">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2304">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2305">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2305">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2306">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2306">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2307">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2307">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2308">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2308">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2309">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2309">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2310">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2310">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="67f8b-2311">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2311">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.UIElement.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2312">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2312">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2313">터치가 이 요소를 누를 때 발생하는 <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2313">Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> routed event that occurs when a touch presses this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2314"><xref:System.Windows.UIElement.OnPreviewTouchDown%2A> 메서드에 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2314">The <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> method has no default implementation.</span></span> <span data-ttu-id="67f8b-2315">재정의 <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.UIElement.PreviewTouchDown> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2315">Override <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchDown> event.</span></span> <span data-ttu-id="67f8b-2316">기본 클래스를 호출 해야 <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> 기본 클래스가 메서드 이벤트를 받도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2316">Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2317">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2317">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2318">이 요소 내부에 있는 동안 터치가 이동할 때 발생하는 <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2318">Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> routed event that occurs when a touch moves while inside this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2319"><xref:System.Windows.UIElement.OnPreviewTouchMove%2A> 메서드에 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2319">The <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> method has no default implementation.</span></span> <span data-ttu-id="67f8b-2320">재정의 <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.UIElement.PreviewTouchMove> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2320">Override <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchMove> event.</span></span> <span data-ttu-id="67f8b-2321">기본 클래스를 호출 해야 <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> 기본 클래스가 메서드 이벤트를 받도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2321">Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2322">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2322">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2323">이 요소 내에서 터치를 해제할 때 발생하는 <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2323">Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> routed event that occurs when a touch is released inside this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2324"><xref:System.Windows.UIElement.OnPreviewTouchUp%2A> 메서드에 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2324">The <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> method has no default implementation.</span></span> <span data-ttu-id="67f8b-2325">재정의 <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.UIElement.PreviewTouchUp> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2325">Override <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchUp> event.</span></span> <span data-ttu-id="67f8b-2326">기본 클래스를 호출 해야 <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> 기본 클래스가 메서드 이벤트를 받도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2326">Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2327">이벤트 데이터를 포함하는 <see cref="T:System.Windows.QueryContinueDragEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2327">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2328">처리되지 않은 <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2328">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2329">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2329">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2330">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2330">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2331">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2331">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2332">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2332">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2333">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2333">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2334">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2334">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2335">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2335">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2336">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2336">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2337">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2337">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2338">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2338">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2339">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.QueryCursorEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2339">The <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2340">처리되지 않은 <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2340">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2341">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2341">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2342">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2342">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2343">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2343">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2344">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2344">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2345">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2345">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2346">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2346">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2347">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2347">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2348">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2348">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2349">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2349">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2350">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2350">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnRender">
      <MemberSignature Language="C#" Value="protected virtual void OnRender (System.Windows.Media.DrawingContext drawingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRender(class System.Windows.Media.DrawingContext drawingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRender(System::Windows::Media::DrawingContext ^ drawingContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drawingContext" Type="System.Windows.Media.DrawingContext" />
      </Parameters>
      <Docs>
        <param name="drawingContext">
          <span data-ttu-id="67f8b-2351">특정 요소의 그리기 지침입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2351">The drawing instructions for a specific element.</span>
          </span>
          <span data-ttu-id="67f8b-2352">이 컨텍스트는 레이아웃 시스템에 제공됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2352">This context is provided to the layout system.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2353">파생 클래스에서 재정의된 경우 레이아웃 시스템에서 감독하는 렌더링 작업에 참여합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2353">When overridden in a derived class, participates in rendering operations that are directed by the layout system.</span>
          </span>
          <span data-ttu-id="67f8b-2354">이 요소의 렌더링 지침은 이 메서드를 호출할 때 직접 사용되지 않으며 나중에 레이아웃 및 그리기에 비동기 방식으로 사용하도록 유지됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2354">The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2355">기본 구현에는이 메서드는 <xref:System.Windows.UIElement> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2355">This method has no default implementation in the <xref:System.Windows.UIElement> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-2356">다음 코드 예제에서는 패널 파생 클래스에 대 한 가능한 구현을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2356">The following code example shows a possible implementation for a panel derived class.</span></span>  
  
 [!code-csharp[LightWeightCustomPanel#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LightWeightCustomPanel/CSharp/OffsetPanel.cs#1)]
 [!code-vb[LightWeightCustomPanel#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LightWeightCustomPanel/visualbasic/offsetpanel.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="67f8b-2357">
              <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> 효과 또는 표시기 등의 렌더링 된 요소에 그래픽 요소 (이전에 정의 되지 논리적 트리에서) 강화를 위해 메서드를 재정의할 수 있습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-2357">The <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> method can be overridden to add further graphical elements (not previously defined in a logical tree) to a rendered element, such as effects or adorners.</span>
            </span>
            <span data-ttu-id="67f8b-2358">A <see cref="T:System.Windows.Media.DrawingContext" /> 개체 셰이프, 텍스트, 이미지 또는 비디오를 그리기 위한 메서드를 제공 하는 인수로 전달 됩니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-2358">A <see cref="T:System.Windows.Media.DrawingContext" /> object is passed as an argument, which provides methods for drawing shapes, text, images or videos.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRenderSizeChanged (System.Windows.SizeChangedInfo info);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo info) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRenderSizeChanged (info As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ info);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="67f8b-2359">이전 크기와 새 크기를 포함하며 크기가 실제로 변경되는 패키지된 매개 변수(<see cref="T:System.Windows.SizeChangedInfo" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2359">The packaged parameters (<see cref="T:System.Windows.SizeChangedInfo" />), which includes old and new sizes, and which dimension actually changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2360">파생 클래스에서 재정의된 경우 레이아웃 시스템에서 감독하는 렌더링 작업에 참여합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2360">When overridden in a derived class, participates in rendering operations that are directed by the layout system.</span>
          </span>
          <span data-ttu-id="67f8b-2361">레이아웃 업데이트 결과 요소의 <see cref="P:System.Windows.UIElement.RenderSize" />가 변경된 경우 이 메서드는 레이아웃 업데이트와 렌더링 사이에 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2361">This method is invoked after layout update, and before rendering, if the element's <see cref="P:System.Windows.UIElement.RenderSize" /> has changed as a result of layout update.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2362">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2362">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2363">일반적인 WPF 프레임 워크 수준 요소에서 재정의 구현을 사용 하 여 <xref:System.Windows.FrameworkElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2363">A typical WPF framework-level element uses the override implementation from <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="67f8b-2364"><xref:System.Windows.FrameworkElement> 구현 무효화는 <xref:System.Windows.FrameworkElement.Width%2A> 및 <xref:System.Windows.FrameworkElement.Height%2A> 속성 및 레이아웃을 다시 만드는의 기본 작업을 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2364">The <xref:System.Windows.FrameworkElement> implementation invalidates the <xref:System.Windows.FrameworkElement.Width%2A> and <xref:System.Windows.FrameworkElement.Height%2A> properties and handles the basics of remaking the layout.</span></span> <span data-ttu-id="67f8b-2365">재정의 <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> 에 <xref:System.Windows.UIElement> 수준 요소 구현 WPF 프레임 워크 수준 구현을 사용 하 여 의도적으로 되 고 따라서 요소 처리 해야 레이아웃 논리를 보다 직접적 일반적으로 작성 하 여 있음을 의미는 이 레이아웃 시스템을 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2365">Overriding <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> at the <xref:System.Windows.UIElement> level implies that your element implementation is deliberately not using the WPF framework-level implementation, and therefore your element must handle layout logic more directly, typically by writing a replacement layout system.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2366">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2366">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2367">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2367">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2368">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2368">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2369">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2369">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2370">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2370">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2371">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2371">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2372">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2372">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2373">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2373">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2374">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2374">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2375">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2375">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2376">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2376">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2377">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2377">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2378">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2378">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2379">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2379">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2380">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2380">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2381">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2381">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2382">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2382">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2383">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2383">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2384">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2384">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2385">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2385">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2386">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2386">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2387">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2387">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2388">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2388">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2389">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2389">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2390">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusDownEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2390">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2391">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2391">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2392">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2392">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2393">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2393">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2394">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2394">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2395">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2395">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2396">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2396">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2397">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2397">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2398">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2398">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2399">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2399">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2400">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2400">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2401">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2401">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2402">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2402">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2403">이 요소에 의해 처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> 연결된 이벤트가 발생할 때 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2403">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> attached event is raised by this element.</span>
          </span>
          <span data-ttu-id="67f8b-2404">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2404">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2405">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2405">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2406">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2406">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="67f8b-2407">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2407">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="67f8b-2408">이 메서드는 비슷합니다 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2408">The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2409">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2409">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2410">이벤트 처리로 표시 하는 것은 일반적인 인스턴스 처리기를 방지 하는 데 유용 (지정 하지 않는 `handledEventsToo`) 호출 되지 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2410">Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2411">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2411">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2412">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2412">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2413">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2413">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2414">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2414">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2415">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2415">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2416">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2416">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2417">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2417">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2418">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2418">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2419">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2419">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2420">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2420">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2421">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2421">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2422">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2422">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2423">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2423">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2424">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2424">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2425">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2425">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2426">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2426">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2427">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2427">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2428">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2428">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2429">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2429">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2430">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2430">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2431">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2431">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2432">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2432">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2433">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2433">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2434">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2434">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2435">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2435">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2436">이 요소에 의해 처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> 연결된 이벤트가 발생할 때 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2436">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> attached event is raised by this element.</span>
          </span>
          <span data-ttu-id="67f8b-2437">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2437">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2438">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2438">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2439">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2439">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="67f8b-2440">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2440">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="67f8b-2441">이 메서드는 비슷합니다 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2441">The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2442">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2442">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2443">이벤트 처리로 표시 하는 것은 일반적인 인스턴스 처리기를 방지 하는 데 유용 (지정 하지 않는 `handledEventsToo`) 호출 되지 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2443">Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2444">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2444">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2445">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusMove" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2445">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2446">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2446">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2447">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2447">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2448">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2448">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2449">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2449">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2450">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2450">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2451">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2451">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2452">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2452">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2453">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2453">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2454">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2454">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2455">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2455">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2456">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2456">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2457">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2457">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2458">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2458">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2459">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2459">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2460">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2460">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2461">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2461">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2462">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2462">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2463">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2463">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2464">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2464">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2465">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2465">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2466">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2466">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2467">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2467">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2468">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2468">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2469">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2469">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2470">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2470">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2471">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2471">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2472">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2472">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2473">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2473">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2474">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2474">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2475">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2475">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2476">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2476">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2477">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2477">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2478">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2478">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2479">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2479">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2480">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2480">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2481">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusUp" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2481">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2482">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2482">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2483">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2483">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2484">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2484">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2485">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2485">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2486">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2486">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2487">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2487">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2488">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2488">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2489">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2489">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2490">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2490">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2491">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2491">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2492">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TextCompositionEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2492">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2493">처리되지 않은 <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2493">Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="67f8b-2494">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2494">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2495">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2495">This method has no default implementation.</span></span> <span data-ttu-id="67f8b-2496">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2496">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="67f8b-2497">이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2497">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="67f8b-2498">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2498">In this case the matching event is a routed event.</span></span> <span data-ttu-id="67f8b-2499">On \* 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2499">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="67f8b-2500">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2500">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="67f8b-2501">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2501">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="67f8b-2502">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.UIElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2502">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="67f8b-2503">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2503">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2504">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2504">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2505">터치가 이 요소 내부를 누를 때 발생하는 <see cref="E:System.Windows.UIElement.TouchDown" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2505">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchDown" /> routed event that occurs when a touch presses inside this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2506"><xref:System.Windows.UIElement.OnTouchDown%2A> 메서드에 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2506">The <xref:System.Windows.UIElement.OnTouchDown%2A> method has no default implementation.</span></span> <span data-ttu-id="67f8b-2507">재정의 <xref:System.Windows.UIElement.OnTouchDown%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.UIElement.TouchDown> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2507">Override <xref:System.Windows.UIElement.OnTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchDown> event.</span></span> <span data-ttu-id="67f8b-2508">기본 클래스를 호출 해야 <xref:System.Windows.UIElement.OnTouchDown%2A> 기본 클래스가 메서드 이벤트를 받도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2508">Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchDown%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2509">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2509">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2510">터치가 이 요소의 경계 외부에서 내부로 이동할 때 발생하는 <see cref="E:System.Windows.UIElement.TouchEnter" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2510">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchEnter" /> routed event that occurs when a touch moves from outside to inside the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2511"><xref:System.Windows.UIElement.OnTouchEnter%2A> 메서드에 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2511">The <xref:System.Windows.UIElement.OnTouchEnter%2A> method has no default implementation.</span></span> <span data-ttu-id="67f8b-2512">재정의 <xref:System.Windows.UIElement.OnTouchEnter%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.UIElement.TouchEnter> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2512">Override <xref:System.Windows.UIElement.OnTouchEnter%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchEnter> event.</span></span> <span data-ttu-id="67f8b-2513">기본 클래스를 호출 해야 <xref:System.Windows.UIElement.OnTouchEnter%2A> 기본 클래스가 메서드 이벤트를 받도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2513">Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchEnter%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2514">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2514">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2515">터치가 이 <see cref="E:System.Windows.UIElement.TouchLeave" />의 경계 내부에서 외부로 이동할 때 발생하는 <see cref="T:System.Windows.UIElement" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2515">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchLeave" /> routed event that occurs when a touch moves from inside to outside the bounds of this <see cref="T:System.Windows.UIElement" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2516"><xref:System.Windows.UIElement.OnTouchLeave%2A> 메서드에 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2516">The <xref:System.Windows.UIElement.OnTouchLeave%2A> method has no default implementation.</span></span> <span data-ttu-id="67f8b-2517">재정의 <xref:System.Windows.UIElement.OnTouchLeave%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.UIElement.TouchLeave> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2517">Override <xref:System.Windows.UIElement.OnTouchLeave%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchLeave> event.</span></span> <span data-ttu-id="67f8b-2518">기본 클래스를 호출 해야 <xref:System.Windows.UIElement.OnTouchLeave%2A> 기본 클래스가 메서드 이벤트를 받도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2518">Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchLeave%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2519">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2519">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2520">이 요소 내부에 있는 동안 터치가 이동할 때 발생하는 <see cref="E:System.Windows.UIElement.TouchMove" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2520">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchMove" /> routed event that occurs when a touch moves while inside this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2521"><xref:System.Windows.UIElement.OnTouchMove%2A> 메서드에 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2521">The <xref:System.Windows.UIElement.OnTouchMove%2A> method has no default implementation.</span></span> <span data-ttu-id="67f8b-2522">재정의 <xref:System.Windows.UIElement.OnTouchMove%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.UIElement.TouchMove> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2522">Override <xref:System.Windows.UIElement.OnTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchMove> event.</span></span> <span data-ttu-id="67f8b-2523">기본 클래스를 호출 해야 <xref:System.Windows.UIElement.OnTouchMove%2A> 기본 클래스가 메서드 이벤트를 받도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2523">Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchMove%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-2524">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2524">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2525">이 요소 내에서 터치를 해제할 때 발생하는 <see cref="E:System.Windows.UIElement.TouchUp" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2525">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchUp" /> routed event that occurs when a touch is released inside this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2526"><xref:System.Windows.UIElement.OnTouchUp%2A> 메서드에 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2526">The <xref:System.Windows.UIElement.OnTouchUp%2A> method has no default implementation.</span></span> <span data-ttu-id="67f8b-2527">재정의 <xref:System.Windows.UIElement.OnTouchUp%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.UIElement.TouchUp> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2527">Override <xref:System.Windows.UIElement.OnTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchUp> event.</span></span> <span data-ttu-id="67f8b-2528">기본 클래스를 호출 해야 <xref:System.Windows.UIElement.OnTouchUp%2A> 기본 클래스가 메서드 이벤트를 받도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2528">Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchUp%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">
          <span data-ttu-id="67f8b-2529">이전 부모입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2529">The previous parent.</span>
          </span>
          <span data-ttu-id="67f8b-2530">이전에 <see cref="T:System.Windows.DependencyObject" />에 부모 요소가 없었던 경우 <see langword="null" />로 제공될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2530">This may be provided as <see langword="null" /> if the <see cref="T:System.Windows.DependencyObject" /> did not have a parent element previously.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2531">이 <see cref="T:System.Windows.UIElement" />의 부모 요소가 기본 시각적 부모의 변경을 보고하면 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2531">Invoked when the parent element of this <see cref="T:System.Windows.UIElement" /> reports a change to its underlying visual parent.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="67f8b-2532">이 메서드를 재정의 하는 경우에 항상 기본 구현을 호출 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-2532">If you override this method, always call the base implementation.</span>
            </span>
            <span data-ttu-id="67f8b-2533">기본 구현은 일부 내부 역방향 상속 속성 상태를 유지 관리를 수행합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-2533">The default base implementation performs some internal maintenance of reverse-inherited property state.</span>
            </span>
            <span data-ttu-id="67f8b-2534">기본 구현을 호출 하지 못하면이 상태를 무효화 됩니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-2534">Failing to call the base implementation will invalidate this state.</span>
            </span>
            <span data-ttu-id="67f8b-2535">이 메서드는 <see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />를 재정의합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-2535">This method overrides <see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />.</span>
            </span>
            <span data-ttu-id="67f8b-2536">
              <see cref="T:System.Windows.FrameworkElement" /> 및 <see cref="T:System.Windows.Window" /> 둘 다 재정의 <see cref="T:System.Windows.UIElement" /> 구현의 <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />, 및 <see cref="T:System.Windows.Window" /> 봉인 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="67f8b-2536">
                <see cref="T:System.Windows.FrameworkElement" /> and <see cref="T:System.Windows.Window" /> both also override the <see cref="T:System.Windows.UIElement" /> implementation of <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />, and <see cref="T:System.Windows.Window" /> seals it.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Opacity">
      <MemberSignature Language="C#" Value="public double Opacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Opacity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Opacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Opacity As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Opacity { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2537">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]에 렌더링될 때 전체 <see cref="T:System.Windows.UIElement" />에 적용되는 불투명도 인수를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2537">Gets or sets the opacity factor applied to the entire <see cref="T:System.Windows.UIElement" /> when it is rendered in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span>
          </span>
          <span data-ttu-id="67f8b-2538">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2538">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-2539">불투명도 요소입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2539">The opacity factor.</span>
          </span>
          <span data-ttu-id="67f8b-2540">기본 불투명도는 1.0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2540">Default opacity is 1.0.</span>
          </span>
          <span data-ttu-id="67f8b-2541">예상 값은 0.0에서 1.0 사이입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2541">Expected values are between 0.0 and 1.0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2542">1.0 기본 값은 기본적으로이 종속성 속성의 초기 메타 데이터는 <xref:System.Windows.UIElement> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2542">The 1.0 default value is the default provided by the initial metadata of this dependency property on the <xref:System.Windows.UIElement> class.</span></span> <span data-ttu-id="67f8b-2543">잠재적으로 다른 파생된 클래스 해당 클래스 생성자 내에서 메타 데이터를 재정의 하 여이 기본값을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2543">Other derived classes may potentially change this default value by overriding the metadata from within their class constructor.</span></span>  
  
 <span data-ttu-id="67f8b-2544">값 <xref:System.Windows.UIElement.Opacity%2A> 요소가 표시 하지 않는 한 실제 레이아웃에 적용 되지 않습니다 (<xref:System.Windows.UIElement.IsVisible%2A> 은 `true`).</span><span class="sxs-lookup"><span data-stu-id="67f8b-2544">The value of <xref:System.Windows.UIElement.Opacity%2A> won't be applied to actual layout unless the element is also visible (<xref:System.Windows.UIElement.IsVisible%2A> is `true`).</span></span>  
  
 <span data-ttu-id="67f8b-2545"><xref:System.Windows.UIElement.Opacity%2A> 가에서 부모 요소에 적용 요소 트리의 자식 요소를 있지만 중첩된 된 불투명도 설정의 개별 자식 요소 속성 값에 나타나지의 시각 효과를.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2545"><xref:System.Windows.UIElement.Opacity%2A> is applied from parent elements on down the element tree to child elements, but the visible effects of the nested opacity settings aren't indicated in the property value of individual child elements.</span></span> <span data-ttu-id="67f8b-2546">예를 들어, 목록에는 불투명도 50% (0.5)은 해당 목록 항목 중 하나에 불투명도 20% (0.2)로 설정 하는 경우 해당 목록 항목에 대 한 순수 표시 불투명도 됩니다 처럼 렌더링 되도록는 10% (0.1) 목록 항목의 속성 값을 제외한 <xref:System.Windows.UIElement.Opacity%2A> 속성 수  쿼리할 때 0.2입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2546">For instance, if a list has a 50% (0.5) opacity and one of its list items has its own opacity set to 20% (0.2), the net visible opacity for that list item will be rendered as if it were 10% (0.1), but the property value of the list item <xref:System.Windows.UIElement.Opacity%2A> property would still be 0.2 when queried.</span></span>  
  
 <span data-ttu-id="67f8b-2547">선언 또는 계산 된 불투명도 0 인 경우에 요소 여전히 입력된 이벤트 및 명령에 참여 하 고 잠재적으로 포커스를 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2547">Even if the declared or evaluated opacity is 0, an element still participates in input events and commands, and is potentially focusable.</span></span> <span data-ttu-id="67f8b-2548">이 측면이 마스킹 투명 한 요소가 포함 된 내부 개체에 대 한 불투명도 0 개체 (예: 모양)를 사용할 수는 예를 들어 유용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2548">This aspect can be useful, for instance you can use an opacity-zero object (such as a shape) for masking underlying objects with transparent elements.</span></span> <span data-ttu-id="67f8b-2549">불투명도 0 인 개체는 모든 입력된 이벤트의 기본 영역에 대 한 처리를 처리한 다음 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2549">The opacity-zero object can then handle all the input event processing for an underlying area.</span></span> <span data-ttu-id="67f8b-2550">그러나는 `Background` 또는 `Fill` 개체 또는 셰이프 설정할지를 값으로는 경우에 <xref:System.Windows.Media.Brushes.Transparent%2A>, 그렇지 않으면 적중 테스트를 사용 하지 않는 및 받은 이벤트가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2550">However, the `Background` or `Fill` of the object or shape should be set to a value, even if it is <xref:System.Windows.Media.Brushes.Transparent%2A>, otherwise hit testing is not enabled, and no events are received.</span></span>  
  
<a name="dependencyPropertyInfo_Opacity"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-2551">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2551">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2552">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2552">Identifier field</span></span>|<xref:System.Windows.UIElement.OpacityProperty>|  
|<span data-ttu-id="67f8b-2553">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-2553">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-2554">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-2554">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.OpacityMask" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMask">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush OpacityMask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush OpacityMask" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.OpacityMask" />
      <MemberSignature Language="VB.NET" Value="Public Property OpacityMask As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Brush ^ OpacityMask { System::Windows::Media::Brush ^ get(); void set(System::Windows::Media::Brush ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2555">이 요소의 렌더링된 내용에 대한 알파 채널 마스킹에 적용되는 <see cref="T:System.Windows.Media.Brush" /> 구현으로 불투명 마스크를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2555">Gets or sets an opacity mask, as a <see cref="T:System.Windows.Media.Brush" /> implementation that is applied to any alpha-channel masking for the rendered content of this element.</span>
          </span>
          <span data-ttu-id="67f8b-2556">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2556">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-2557">불투명 마스크에 사용할 브러시입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2557">The brush to use for opacity masking.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2558">이 속성에서 제공 된 무엇이 알파 채널 값만 사용 <xref:System.Windows.Media.Brush>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2558">This property only uses whatever the alpha channel value is for the supplied <xref:System.Windows.Media.Brush>.</span></span> <span data-ttu-id="67f8b-2559">다른 채널의는 <xref:System.Windows.Media.Brush>의 렌더링 된 콘텐츠에 (빨강, 녹색 또는 파란색)은 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2559">The other channels of the <xref:System.Windows.Media.Brush>'s rendered content (Red, Green, or Blue) are ignored.</span></span>  
  
 <span data-ttu-id="67f8b-2560">가장 일반적인 <xref:System.Windows.Media.Brush> 이러한 용도로 <xref:System.Windows.Media.ImageBrush>, 다양 한 사진 마스킹는 비네팅 같은 기술에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2560">The most typical <xref:System.Windows.Media.Brush> for this purpose is an <xref:System.Windows.Media.ImageBrush>, which can be used for a variety of photo masking techniques such as a vignette.</span></span> <span data-ttu-id="67f8b-2561">하지만 정의 <xref:System.Windows.Media.Brush> (예: <xref:System.Windows.Media.LinearGradientBrush>) 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2561">But any defined <xref:System.Windows.Media.Brush> (such as <xref:System.Windows.Media.LinearGradientBrush>) can be used.</span></span>  
  
 <span data-ttu-id="67f8b-2562">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)],이 속성 값의 각 구현은에 관련 된 인라인 구문을 사용할 수는 <xref:System.Windows.Media.Brush> 추상 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2562">In [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], this property value can use an inline syntax that is specific to each implementation of the <xref:System.Windows.Media.Brush> abstract class.</span></span> <span data-ttu-id="67f8b-2563">자세한 내용은 참조 [단색 및 그라데이션 개요 그리기](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2563">For more information, see [Painting with Solid Colors and Gradients Overview](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_OpacityMask"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-2564">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2564">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2565">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2565">Identifier field</span></span>|<xref:System.Windows.UIElement.OpacityMaskProperty>|  
|<span data-ttu-id="67f8b-2566">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-2566">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-2567">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-2567">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-2568">다음 예제에서는 태그는 <xref:System.Windows.Media.ImageBrush> 다른 적용 된 불투명도 마스크가 <xref:System.Windows.Controls.Image>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2568">The following markup example shows an <xref:System.Windows.Media.ImageBrush> opacity mask applied to another <xref:System.Windows.Controls.Image>.</span></span>  
  
 [!code-xaml[OpacityMasksSnippet#UIElementOpacityMask](~/samples/snippets/csharp/VS_Snippets_Wpf/OpacityMasksSnippet/CS/ImageBrushExample.xaml#uielementopacitymask)]   
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Opacity" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMaskProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityMaskProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityMaskProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityMaskProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityMaskProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityMaskProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2569">
            <see cref="P:System.Windows.UIElement.OpacityMask" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2569">Identifies the <see cref="P:System.Windows.UIElement.OpacityMask" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpacityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2570">
            <see cref="P:System.Windows.UIElement.Opacity" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2570">Identifies the <see cref="P:System.Windows.UIElement.Opacity" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PersistId">
      <MemberSignature Language="C#" Value="public int PersistId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PersistId" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.PersistId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PersistId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PersistId { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("PersistId is an obsolete property and may be removed in a future release.  The value of this property is not defined.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2571">이 요소를 고유하게 식별하는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2571">Gets a value that uniquely identifies this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-2572">이 요소에 대한 고유 식별자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2572">The unique identifier for this element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2573"><xref:System.Windows.UIElement.PersistId%2A> 각 요소를 고유 하 게 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2573"><xref:System.Windows.UIElement.PersistId%2A> uniquely identifies each element.</span></span> <span data-ttu-id="67f8b-2574">동일한 요소 유지 <xref:System.Windows.UIElement.PersistId%2A> 될 때마다 동일한 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] (바이너리 포함)에 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2574">An element keeps the same <xref:System.Windows.UIElement.PersistId%2A> every time the same [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] is loaded (including binary representations).</span></span> <span data-ttu-id="67f8b-2575">이 식별자는 내부 로드, 구문 분석 및 serialization 요구 사항에 대해 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2575">This identifier is used for internal loading, parsing and serialization requirements.</span></span> <span data-ttu-id="67f8b-2576">응용 프로그램 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2576">It is not intended to be used by your application code.</span></span>  
  
 <span data-ttu-id="67f8b-2577">이 속성에 관계 없이 <xref:System.Object.GetHashCode%2A> 지정된 된 인스턴스에 대 한 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2577">This property has no relationship to the <xref:System.Object.GetHashCode%2A> result for any given instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">
          <span data-ttu-id="67f8b-2578">요청된 포커스 이동 방향입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2578">The direction of the requested focus traversal.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-2579">파생 클래스에서 재정의되는 경우 지정된 포커스 이동 방향에 대해 포커스를 받는 요소를 반환하며 실제로 해당 요소로 포커스를 이동하지는 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2579">When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67f8b-2580">
            <see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />가 실제로 호출된 경우에 포커스를 받는 요소입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2580">The element that would have received focus if <see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> were actually invoked.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2581">이 클래스에이 메서드의 기본 구현 완료 되며 항상 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2581">The default implementation of this method in this class is incomplete, and always returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2582">입력 시스템에서 이 요소를 끌기 대상으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2582">Occurs when the input system reports an underlying drag event with this element as the drag target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2583">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewDragEnter> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2583">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-2584">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewDragEnter> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2584">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-2585">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2585">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2586">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2586">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDragEnterEvent>|  
|<span data-ttu-id="67f8b-2587">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-2587">Routing strategy</span></span>|<span data-ttu-id="67f8b-2588">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-2588">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-2589">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-2589">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="67f8b-2590">해당 버블링 이벤트가 <xref:System.Windows.UIElement.DragEnter>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2590">The corresponding bubbling event is <xref:System.Windows.UIElement.DragEnter>.</span></span>  
  
-   <span data-ttu-id="67f8b-2591">재정의 <xref:System.Windows.UIElement.OnPreviewDragEnter%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2591">Override <xref:System.Windows.UIElement.OnPreviewDragEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2592">
            <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2592">Identifies the <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2593">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2593">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-2594">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2594">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-2595">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2595">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-2596">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2596">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-2597">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2597">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2598">입력 시스템에서 이 요소를 끌기 원본으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2598">Occurs when the input system reports an underlying drag event with this element as the drag origin.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2599">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewDragLeave> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2599">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-2600">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewDragLeave> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2600">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-2601">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2601">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2602">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2602">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDragLeaveEvent>|  
|<span data-ttu-id="67f8b-2603">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-2603">Routing strategy</span></span>|<span data-ttu-id="67f8b-2604">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-2604">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-2605">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-2605">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="67f8b-2606">해당 버블링 이벤트가 <xref:System.Windows.UIElement.DragLeave>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2606">The corresponding bubbling event is <xref:System.Windows.UIElement.DragLeave>.</span></span>  
  
-   <span data-ttu-id="67f8b-2607">재정의 <xref:System.Windows.UIElement.OnPreviewDragLeave%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2607">Override <xref:System.Windows.UIElement.OnPreviewDragLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2608">
            <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2608">Identifies the <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2609">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2609">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-2610">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2610">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-2611">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2611">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-2612">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2612">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-2613">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2613">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2614">입력 시스템에서 이 요소를 잠재적인 놓기 대상으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2614">Occurs when the input system reports an underlying drag event with this element as the potential drop target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2615">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewDragOver> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2615">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragOver> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-2616">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewDragOver> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2616">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragOver> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-2617">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2617">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2618">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2618">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDragOverEvent>|  
|<span data-ttu-id="67f8b-2619">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-2619">Routing strategy</span></span>|<span data-ttu-id="67f8b-2620">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-2620">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-2621">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-2621">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="67f8b-2622">해당 버블링 이벤트가 <xref:System.Windows.UIElement.DragOver>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2622">The corresponding bubbling event is <xref:System.Windows.UIElement.DragOver>.</span></span>  
  
-   <span data-ttu-id="67f8b-2623">재정의 <xref:System.Windows.UIElement.OnPreviewDragOver%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2623">Override <xref:System.Windows.UIElement.OnPreviewDragOver%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2624">
            <see cref="E:System.Windows.UIElement.PreviewDragOver" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2624">Identifies the <see cref="E:System.Windows.UIElement.PreviewDragOver" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2625">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2625">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-2626">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2626">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-2627">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2627">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-2628">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2628">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-2629">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2629">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2630">입력 시스템에서 이 요소를 놓기 대상으로 사용하는 기본 놓기 이벤트를 보고하면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2630">Occurs when the input system reports an underlying drop event with this element as the drop target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2631">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewDrop> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2631">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDrop> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-2632">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewDrop> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2632">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDrop> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-2633">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2633">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2634">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2634">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDropEvent>|  
|<span data-ttu-id="67f8b-2635">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-2635">Routing strategy</span></span>|<span data-ttu-id="67f8b-2636">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-2636">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-2637">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-2637">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="67f8b-2638">해당 버블링 이벤트가 <xref:System.Windows.UIElement.Drop>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2638">The corresponding bubbling event is <xref:System.Windows.UIElement.Drop>.</span></span>  
  
-   <span data-ttu-id="67f8b-2639">재정의 <xref:System.Windows.UIElement.OnPreviewDrop%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2639">Override <xref:System.Windows.UIElement.OnPreviewDrop%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2640">
            <see cref="E:System.Windows.UIElement.PreviewDrop" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2640">Identifies the <see cref="E:System.Windows.UIElement.PreviewDrop" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2641">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2641">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-2642">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2642">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-2643">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2643">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-2644">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2644">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-2645">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2645">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2646">끌어서 놓기 작업이 시작되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2646">Occurs when a drag-and-drop operation is started.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2647"><xref:System.Windows.UIElement.PreviewGiveFeedback> 이벤트를 사용 하면 끌어서 놓기 작업 중 사용자의 시각적 피드백을 제공 하기 위해 마우스 포인터의 모양을 수정 하려면 끌기 이벤트의 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2647">The <xref:System.Windows.UIElement.PreviewGiveFeedback> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.</span></span>  
  
 <span data-ttu-id="67f8b-2648">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewGiveFeedback> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2648">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewGiveFeedback> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-2649">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewGiveFeedback> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2649">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewGiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-2650">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2650">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2651">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2651">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewGiveFeedbackEvent>|  
|<span data-ttu-id="67f8b-2652">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-2652">Routing strategy</span></span>|<span data-ttu-id="67f8b-2653">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-2653">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-2654">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-2654">Delegate</span></span>|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   <span data-ttu-id="67f8b-2655">해당 버블링 이벤트가 <xref:System.Windows.UIElement.GiveFeedback>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2655">The corresponding bubbling event is <xref:System.Windows.UIElement.GiveFeedback>.</span></span>  
  
-   <span data-ttu-id="67f8b-2656">재정의 <xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2656">Override <xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2657">
            <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2657">Identifies the <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2658">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2658">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-2659">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2659">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-2660">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2660">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-2661">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2661">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-2662">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2662">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2663">이 요소에 키보드 포커스가 있으면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2663">Occurs when the keyboard is focused on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2664">이 이벤트는 라우팅 터널링을 사용 하므로 포커스가 있는 요소는 이벤트 처리기가 실제로 연결 된 요소가 아닌 자식 요소 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2664">Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="67f8b-2665">확인의 <xref:System.Windows.RoutedEventArgs.Source%2A> 이벤트 데이터에 포커스가 있는 실제 요소를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2665">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.</span></span>  
  
 <span data-ttu-id="67f8b-2666">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2666">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-2667">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2667">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-2668">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2668">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2669">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2669">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent>|  
|<span data-ttu-id="67f8b-2670">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-2670">Routing strategy</span></span>|<span data-ttu-id="67f8b-2671">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-2671">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-2672">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-2672">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="67f8b-2673">해당 버블링 이벤트가 <xref:System.Windows.UIElement.GotKeyboardFocus>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2673">The corresponding bubbling event is <xref:System.Windows.UIElement.GotKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="67f8b-2674">재정의 <xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2674">Override <xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2675">
            <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2675">Identifies the <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2676">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2676">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-2677">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2677">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-2678">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2678">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-2679">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2679">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-2680">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2680">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2681">이 요소에 포커스가 있는 동안 키를 누르면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2681">Occurs when a key is pressed while focus is on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2682">키 처리 명령 및 텍스트 컴퍼지션 등 다른 플랫폼의 기능으로 작용합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2682">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="67f8b-2683"><xref:System.Windows.UIElement.KeyDown> 이벤트는 하위 수준의 텍스트 입력된 이벤트를 특정 컨트롤에 예상 대로 동작 하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2683">The <xref:System.Windows.UIElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="67f8b-2684">일부 컨트롤은 컨트롤 합성 클래스 처리에 더 높은 수준의 버전의 텍스트를 제공 하는 입력 처리 및 관련 이벤트 또는 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2684">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span>  
  
 <span data-ttu-id="67f8b-2685">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewKeyDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2685">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewKeyDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-2686">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewKeyDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2686">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewKeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-2687">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2687">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2688">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2688">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewKeyDownEvent>|  
|<span data-ttu-id="67f8b-2689">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-2689">Routing strategy</span></span>|<span data-ttu-id="67f8b-2690">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-2690">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-2691">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-2691">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="67f8b-2692">해당 버블링 이벤트가 <xref:System.Windows.UIElement.KeyDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2692">The corresponding bubbling event is <xref:System.Windows.UIElement.KeyDown>.</span></span>  
  
-   <span data-ttu-id="67f8b-2693">재정의 <xref:System.Windows.UIElement.OnPreviewKeyDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2693">Override <xref:System.Windows.UIElement.OnPreviewKeyDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2694">
            <see cref="E:System.Windows.UIElement.PreviewKeyDown" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2694">Identifies the <see cref="E:System.Windows.UIElement.PreviewKeyDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2695">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2695">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-2696">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2696">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-2697">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2697">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-2698">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2698">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-2699">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2699">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2700">이 요소에 포커스가 있는 동안 키를 놓을 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2700">Occurs when a key is released while focus is on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2701">키 처리 명령 및 텍스트 컴퍼지션 등 다른 플랫폼의 기능으로 작용합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2701">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="67f8b-2702"><xref:System.Windows.UIElement.KeyUp> 이벤트는 하위 수준의 텍스트 입력된 이벤트를 특정 컨트롤에 예상 대로 동작 하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2702">The <xref:System.Windows.UIElement.KeyUp> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="67f8b-2703">일부 컨트롤은 컨트롤 합성 클래스 처리에 더 높은 수준의 버전의 텍스트를 제공 하는 입력 처리 및 관련 이벤트 또는 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2703">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span> <span data-ttu-id="67f8b-2704">자세한 내용은 개별 컨트롤에 대 한 설명서를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2704">For details, check the documentation for individual controls.</span></span>  
  
 <span data-ttu-id="67f8b-2705">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewKeyUp> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2705">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewKeyUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-2706">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewKeyUp> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2706">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewKeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-2707">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2707">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2708">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2708">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewKeyUpEvent>|  
|<span data-ttu-id="67f8b-2709">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-2709">Routing strategy</span></span>|<span data-ttu-id="67f8b-2710">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-2710">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-2711">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-2711">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="67f8b-2712">해당 버블링 이벤트가 <xref:System.Windows.UIElement.KeyUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2712">The corresponding bubbling event is <xref:System.Windows.UIElement.KeyUp>.</span></span>  
  
-   <span data-ttu-id="67f8b-2713">재정의 <xref:System.Windows.UIElement.OnPreviewKeyUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2713">Override <xref:System.Windows.UIElement.OnPreviewKeyUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2714">
            <see cref="E:System.Windows.UIElement.PreviewKeyUp" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2714">Identifies the <see cref="E:System.Windows.UIElement.PreviewKeyUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2715">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2715">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-2716">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2716">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-2717">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2717">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-2718">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2718">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-2719">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2719">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2720">이 요소에 더 이상 키보드 포커스가 없으면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2720">Occurs when the keyboard is no longer focused on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2721">이 이벤트는 라우팅 터널링을 사용 하므로 포커스를 잃은 요소의 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2721">Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="67f8b-2722">확인은 <xref:System.Windows.RoutedEventArgs.Source%2A> 에 포커스를 잃은 실제 요소를 확인 하기 위해 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2722">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="67f8b-2723">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2723">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-2724">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2724">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-2725">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2725">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2726">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2726">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent>|  
|<span data-ttu-id="67f8b-2727">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-2727">Routing strategy</span></span>|<span data-ttu-id="67f8b-2728">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-2728">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-2729">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-2729">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="67f8b-2730">해당 버블링 이벤트가 <xref:System.Windows.UIElement.LostKeyboardFocus>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2730">The corresponding bubbling event is <xref:System.Windows.UIElement.LostKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="67f8b-2731">재정의 <xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2731">Override <xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2732">
            <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2732">Identifies the <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2733">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2733">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-2734">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2734">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-2735">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2735">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-2736">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2736">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-2737">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2737">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2738">포인터가 이 요소 위에 있는 동안 마우스 단추를 누르면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2738">Occurs when any mouse button is pressed while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2739">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewMouseDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2739">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-2740">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewMouseDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2740">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-2741"><xref:System.Windows.UIElement.PreviewMouseDown> 종종 발생과 함께 <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> 또는 <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>, 두 개의 표준 마우스 단추 중 하나를 누르는 것에 해당 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2741">The <xref:System.Windows.UIElement.PreviewMouseDown> event is often raised together with either <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="67f8b-2742"><xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> 및 <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> 라우트된 이벤트를는 있지만 직접 라우트된 이벤트를 서로 하며 적절 한 단추 특정 이벤트가 발생할 때는 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 경로 되지 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2742"><xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="67f8b-2743">에 대 한 설명 부분 참조 <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> 또는 <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2743">See Remarks for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-2744">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2744">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2745">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2745">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseDownEvent>|  
|<span data-ttu-id="67f8b-2746">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-2746">Routing strategy</span></span>|<span data-ttu-id="67f8b-2747">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-2747">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-2748">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-2748">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="67f8b-2749">해당 버블링 이벤트가 <xref:System.Windows.UIElement.MouseDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2749">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseDown>.</span></span>  
  
-   <span data-ttu-id="67f8b-2750">재정의 <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2750">Override <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2751">
            <see cref="E:System.Windows.UIElement.PreviewMouseDown" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2751">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2752">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2752">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-2753">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2753">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-2754">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2754">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-2755">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2755">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-2756">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2756">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2757">마우스 포인터가 이 요소 위에 있는 동안 마우스 왼쪽 단추를 누르면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2757">Occurs when the left mouse button is pressed while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2758">이 요소 트리를 통해 터널링 경로 따르는 것 처럼 보이지만, 실제로 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2758">Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="67f8b-2759">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2759">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="67f8b-2760">이 이벤트의 이벤트 데이터의 기본 이벤트 데이터를 노출 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2760">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="67f8b-2761">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <xref:System.Windows.UIElement.AddHandler%2A>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2761">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="67f8b-2762">표시 하는 경우 <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> 처리, 기본적으로 표시 하는 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 경로 따르는 모든 후속 수신기에 대 한 처리 및 모든 관련 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2762">If you mark <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="67f8b-2763">가능한 여기에 클래스 처리기 생성 된 이벤트와 같은 <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2763">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="67f8b-2764">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <xref:System.Windows.UIElement>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <xref:System.Windows.Input.Mouse> 클래스).</span><span class="sxs-lookup"><span data-stu-id="67f8b-2764">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="67f8b-2765">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2765">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="67f8b-2766">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2766">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-2767">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2767">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2768">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2768">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent>|  
|<span data-ttu-id="67f8b-2769">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-2769">Routing strategy</span></span>|<span data-ttu-id="67f8b-2770">직접</span><span class="sxs-lookup"><span data-stu-id="67f8b-2770">Direct</span></span>|  
|<span data-ttu-id="67f8b-2771">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-2771">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="67f8b-2772">재정의 <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2772">Override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2773">
            <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2773">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2774">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2774">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-2775">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2775">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-2776">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2776">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-2777">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2777">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-2778">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2778">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2779">마우스 포인터가 이 요소 위에 있는 동안 마우스 왼쪽 단추를 놓으면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2779">Occurs when the left mouse button is released while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2780">이 요소 트리를 통해 터널링 경로 따르는 것 처럼 보이지만, 실제로 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2780">Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="67f8b-2781">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2781">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="67f8b-2782">이 이벤트의 이벤트 데이터의 기본 이벤트 데이터를 노출 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2782">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="67f8b-2783">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <xref:System.Windows.UIElement.AddHandler%2A>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2783">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="67f8b-2784">표시 하는 경우 <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> 처리, 기본적으로 표시 하는 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 경로 따르는 모든 후속 수신기에 대 한 처리 및 모든 관련 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2784">If you mark <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="67f8b-2785">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <xref:System.Windows.UIElement>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <xref:System.Windows.Input.Mouse> 클래스).</span><span class="sxs-lookup"><span data-stu-id="67f8b-2785">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="67f8b-2786">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2786">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="67f8b-2787">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2787">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-2788">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2788">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2789">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2789">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent>|  
|<span data-ttu-id="67f8b-2790">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-2790">Routing strategy</span></span>|<span data-ttu-id="67f8b-2791">직접</span><span class="sxs-lookup"><span data-stu-id="67f8b-2791">Direct</span></span>|  
|<span data-ttu-id="67f8b-2792">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-2792">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="67f8b-2793">재정의 <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2793">Override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2794">
            <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2794">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2795">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2795">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-2796">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2796">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-2797">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2797">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-2798">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2798">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-2799">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2799">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2800">마우스 포인터가 이 요소 위에 있는 동안 마우스 포인터를 움직이면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2800">Occurs when the mouse pointer moves while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2801">마우스 포인터가 요소의 경계에 처음 실행 하면이 이벤트가 발생 둘 다도 마우스 포인터가 이동할 때 요소 범위 내에서 그대로 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2801">This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.</span></span>  
  
 <span data-ttu-id="67f8b-2802">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewMouseMove> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2802">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-2803">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewMouseMove> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2803">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-2804">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2804">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2805">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2805">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseMoveEvent>|  
|<span data-ttu-id="67f8b-2806">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-2806">Routing strategy</span></span>|<span data-ttu-id="67f8b-2807">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-2807">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-2808">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-2808">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="67f8b-2809">해당 버블링 이벤트가 <xref:System.Windows.UIElement.MouseMove>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2809">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseMove>.</span></span>  
  
-   <span data-ttu-id="67f8b-2810">재정의 <xref:System.Windows.UIElement.OnPreviewMouseMove%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2810">Override <xref:System.Windows.UIElement.OnPreviewMouseMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2811">
            <see cref="E:System.Windows.UIElement.PreviewMouseMove" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2811">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2812">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2812">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-2813">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2813">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-2814">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2814">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-2815">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2815">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-2816">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2816">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2817">마우스 포인터가 이 요소 위에 있는 동안 마우스 오른쪽 단추를 누르면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2817">Occurs when the right mouse button is pressed while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2818">이 요소 트리를 통해 터널링 경로 따르는 것 처럼 보이지만, 실제로 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2818">Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="67f8b-2819">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2819">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="67f8b-2820">이 이벤트의 이벤트 데이터의 기본 이벤트 데이터를 노출 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2820">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="67f8b-2821">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <xref:System.Windows.UIElement.AddHandler%2A>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2821">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="67f8b-2822">표시 하는 경우 <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> 처리, 기본적으로 표시 하는 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 경로 따르는 모든 후속 수신기에 대 한 처리 및 모든 관련 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2822">If you mark <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="67f8b-2823">가능한 여기에 클래스 처리기 생성 된 이벤트와 같은 <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2823">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="67f8b-2824">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <xref:System.Windows.UIElement>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <xref:System.Windows.Input.Mouse> 클래스).</span><span class="sxs-lookup"><span data-stu-id="67f8b-2824">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="67f8b-2825">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2825">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="67f8b-2826">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2826">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-2827">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2827">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2828">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2828">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent>|  
|<span data-ttu-id="67f8b-2829">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-2829">Routing strategy</span></span>|<span data-ttu-id="67f8b-2830">직접</span><span class="sxs-lookup"><span data-stu-id="67f8b-2830">Direct</span></span>|  
|<span data-ttu-id="67f8b-2831">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-2831">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="67f8b-2832">재정의 <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2832">Override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2833">
            <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2833">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2834">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2834">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-2835">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2835">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-2836">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2836">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-2837">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2837">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-2838">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2838">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2839">마우스 포인터가 이 요소 위에 있는 동안 마우스 오른쪽 단추를 놓으면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2839">Occurs when the right mouse button is released while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2840">이 요소 트리를 통해 터널링 경로 따르는 것 처럼 보이지만, 실제로 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2840">Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="67f8b-2841">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2841">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="67f8b-2842">이 이벤트의 이벤트 데이터의 기본 이벤트 데이터를 노출 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2842">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="67f8b-2843">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <xref:System.Windows.UIElement.AddHandler%2A>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2843">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="67f8b-2844">표시 하는 경우 <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> 처리, 기본적으로 표시 하는 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 경로 따르는 모든 후속 수신기에 대 한 처리 및 모든 관련 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2844">If you mark <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="67f8b-2845">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <xref:System.Windows.UIElement>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <xref:System.Windows.Input.Mouse> 클래스).</span><span class="sxs-lookup"><span data-stu-id="67f8b-2845">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="67f8b-2846">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2846">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="67f8b-2847">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2847">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-2848">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2848">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2849">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2849">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent>|  
|<span data-ttu-id="67f8b-2850">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-2850">Routing strategy</span></span>|<span data-ttu-id="67f8b-2851">직접</span><span class="sxs-lookup"><span data-stu-id="67f8b-2851">Direct</span></span>|  
|<span data-ttu-id="67f8b-2852">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-2852">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="67f8b-2853">재정의 <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2853">Override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2854">
            <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2854">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2855">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2855">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-2856">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2856">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-2857">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2857">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-2858">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2858">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-2859">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2859">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2860">마우스 포인터가 이 요소 위에 있는 동안 마우스 단추를 놓으면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2860">Occurs when any mouse button is released while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2861">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewMouseUp> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2861">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-2862">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewMouseUp> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2862">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-2863"><xref:System.Windows.UIElement.PreviewMouseUp> 종종 발생과 함께 <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> 또는 <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>, 두 개의 표준 마우스 단추 중 하나를 누르는 것에 해당 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2863">The <xref:System.Windows.UIElement.PreviewMouseUp> event is often raised together with either <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="67f8b-2864"><xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> 및 <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> 라우트된 이벤트를는 있지만 직접 라우트된 이벤트를 서로 하며 적절 한 단추 특정 이벤트가 발생할 때는 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 경로 되지 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2864"><xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="67f8b-2865">에 대 한 설명 부분 참조 <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> 또는 <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2865">See Remarks for <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-2866">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2866">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2867">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2867">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseUpEvent>|  
|<span data-ttu-id="67f8b-2868">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-2868">Routing strategy</span></span>|<span data-ttu-id="67f8b-2869">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-2869">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-2870">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-2870">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="67f8b-2871">해당 버블링 이벤트가 <xref:System.Windows.UIElement.MouseUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2871">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseUp>.</span></span>  
  
-   <span data-ttu-id="67f8b-2872">재정의 <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2872">Override <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2873">
            <see cref="E:System.Windows.UIElement.PreviewMouseUp" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2873">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2874">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2874">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-2875">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2875">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-2876">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2876">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-2877">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2877">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-2878">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2878">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2879">마우스 포인터가 이 요소 위에 있는 동안 사용자가 마우스 휠을 굴리면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2879">Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2880">포커스 또는 마우스 캡처 우선 마우스 포인터입니다. 따라서 시점 요소에서이 이벤트를 수신 되 면 마우스 포인터가 실제로 다른 요소 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2880">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.</span></span>  
  
 <span data-ttu-id="67f8b-2881">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewMouseMove> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2881">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-2882">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewMouseMove> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2882">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-2883">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2883">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2884">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2884">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseWheelEvent>|  
|<span data-ttu-id="67f8b-2885">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-2885">Routing strategy</span></span>|<span data-ttu-id="67f8b-2886">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-2886">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-2887">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-2887">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="67f8b-2888">해당 버블링 이벤트가 <xref:System.Windows.UIElement.MouseWheel>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2888">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseWheel>.</span></span>  
  
-   <span data-ttu-id="67f8b-2889">재정의 <xref:System.Windows.UIElement.OnPreviewMouseWheel%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2889">Override <xref:System.Windows.UIElement.OnPreviewMouseWheel%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2890">
            <see cref="E:System.Windows.UIElement.PreviewMouseWheel" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2890">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseWheel" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2891">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2891">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-2892">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2892">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-2893">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2893">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-2894">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2894">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-2895">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2895">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2896">끌어서 놓기 작업 중 키보드 또는 마우스 단추 상태가 변경되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2896">Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2897"><xref:System.Windows.UIElement.PreviewQueryContinueDrag> 이벤트를 사용 하면 끌기 소스가 끌어서 놓기 작업을 취소 해야 하는지 여부를 선언 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2897">The <xref:System.Windows.UIElement.PreviewQueryContinueDrag> event enables the drag source to declare whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="67f8b-2898">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewQueryContinueDrag> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2898">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewQueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-2899">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewQueryContinueDrag> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2899">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewQueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-2900">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2900">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2901">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2901">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewQueryContinueDragEvent>|  
|<span data-ttu-id="67f8b-2902">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-2902">Routing strategy</span></span>|<span data-ttu-id="67f8b-2903">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-2903">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-2904">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-2904">Delegate</span></span>|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   <span data-ttu-id="67f8b-2905">해당 버블링 이벤트가 <xref:System.Windows.UIElement.QueryContinueDrag>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2905">The corresponding bubbling event is <xref:System.Windows.UIElement.QueryContinueDrag>.</span></span>  
  
-   <span data-ttu-id="67f8b-2906">재정의 <xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2906">Override <xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2907">
            <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2907">Identifies the <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2908">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2908">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-2909">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2909">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-2910">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2910">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-2911">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2911">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-2912">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2912">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2913">포인터가 이 요소 위에 있는 동안 스타일러스 단추를 누르면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2913">Occurs when the stylus button is pressed while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2914">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewStylusButtonDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2914">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-2915">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewStylusButtonDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2915">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-2916">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2916">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-2917">자세한 내용은 참조 [Windows Vista의 입력 지원 터치](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) 및 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2917">For more information, see [Touch Input Support in Windows Vista](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-2918">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2918">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2919">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2919">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusButtonDownEvent>|  
|<span data-ttu-id="67f8b-2920">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-2920">Routing strategy</span></span>|<span data-ttu-id="67f8b-2921">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-2921">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-2922">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-2922">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="67f8b-2923">해당 버블링 이벤트가 <xref:System.Windows.UIElement.StylusButtonDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2923">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusButtonDown>.</span></span>  
  
-   <span data-ttu-id="67f8b-2924">재정의 <xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2924">Override <xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2925">
            <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2925">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2926">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2926">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-2927">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2927">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-2928">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2928">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-2929">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2929">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-2930">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2930">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2931">포인터가 이 요소 위에 있는 동안 스타일러스 단추를 놓으면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2931">Occurs when the stylus button is released while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2932">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewStylusButtonUp> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2932">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-2933">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewStylusButtonUp> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2933">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-2934">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2934">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-2935">자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2935">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-2936">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2936">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2937">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2937">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusButtonUpEvent>|  
|<span data-ttu-id="67f8b-2938">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-2938">Routing strategy</span></span>|<span data-ttu-id="67f8b-2939">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-2939">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-2940">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-2940">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="67f8b-2941">해당 버블링 이벤트가 <xref:System.Windows.UIElement.StylusButtonUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2941">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusButtonUp>.</span></span>  
  
-   <span data-ttu-id="67f8b-2942">재정의 <xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2942">Override <xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2943">
            <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2943">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2944">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2944">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-2945">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2945">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-2946">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2946">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-2947">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2947">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-2948">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2948">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2949">이 요소 위에 있는 동안 스타일러스가 디지타이저를 건드리면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2949">Occurs when the stylus touches the digitizer while it is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2950">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewStylusDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2950">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-2951">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewStylusDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2951">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-2952">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2952">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-2953">자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2953">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-2954">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2954">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2955">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2955">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusDownEvent>|  
|<span data-ttu-id="67f8b-2956">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-2956">Routing strategy</span></span>|<span data-ttu-id="67f8b-2957">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-2957">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-2958">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-2958">Delegate</span></span>|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   <span data-ttu-id="67f8b-2959">해당 버블링 이벤트가 <xref:System.Windows.UIElement.StylusDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2959">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusDown>.</span></span>  
  
-   <span data-ttu-id="67f8b-2960">재정의 <xref:System.Windows.UIElement.OnPreviewStylusDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2960">Override <xref:System.Windows.UIElement.OnPreviewStylusDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2961">
            <see cref="E:System.Windows.UIElement.PreviewStylusDown" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2961">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2962">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2962">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-2963">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2963">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-2964">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2964">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-2965">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2965">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-2966">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2966">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2967">스타일러스가 디지타이저를 실제로 건드리지 않고 요소 위로 움직이면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2967">Occurs when the stylus moves over an element without actually touching the digitizer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2968">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewStylusInAirMove> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2968">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-2969">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewStylusInAirMove> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2969">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-2970">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2970">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-2971">자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2971">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-2972">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2972">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2973">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2973">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent>|  
|<span data-ttu-id="67f8b-2974">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-2974">Routing strategy</span></span>|<span data-ttu-id="67f8b-2975">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-2975">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-2976">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-2976">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="67f8b-2977">해당 버블링 이벤트가 <xref:System.Windows.UIElement.StylusInAirMove>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2977">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusInAirMove>.</span></span>  
  
-   <span data-ttu-id="67f8b-2978">재정의 <xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2978">Override <xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2979">
            <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2979">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2980">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2980">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-2981">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2981">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-2982">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2982">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-2983">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2983">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-2984">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2984">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2985">이 요소 위에 있는 동안 스타일러스가 디지타이저를 검색할 만큼 가까이 있으면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2985">Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2986">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewStylusInRange> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2986">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusInRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-2987">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewStylusInRange> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2987">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-2988">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2988">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-2989">자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2989">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-2990">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-2990">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-2991">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-2991">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusInRangeEvent>|  
|<span data-ttu-id="67f8b-2992">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-2992">Routing strategy</span></span>|<span data-ttu-id="67f8b-2993">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-2993">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-2994">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-2994">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="67f8b-2995">해당 버블링 이벤트가 <xref:System.Windows.UIElement.StylusInRange>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2995">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusInRange>.</span></span>  
  
-   <span data-ttu-id="67f8b-2996">재정의 <xref:System.Windows.UIElement.OnPreviewStylusInRange%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2996">Override <xref:System.Windows.UIElement.OnPreviewStylusInRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-2997">
            <see cref="E:System.Windows.UIElement.PreviewStylusInRange" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-2997">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusInRange" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-2998">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2998">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-2999">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-2999">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-3000">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3000">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-3001">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3001">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-3002">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3002">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3003">요소 위에 있는 동안 스타일러스를 움직이면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3003">Occurs when the stylus moves while over the element.</span>
          </span>
          <span data-ttu-id="67f8b-3004">이 이벤트를 발생시키려면 디지타이저에서 검색하는 동안 스타일러스를 움직여야 합니다. 움직이지 않으면 <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />가 대신 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3004">The stylus must move while being detected by the digitizer to raise this event, otherwise, <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> is raised instead.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3005">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewStylusMove> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3005">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-3006">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewStylusMove> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3006">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-3007">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3007">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-3008">자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3008">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3009">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3009">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3010">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3010">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusMoveEvent>|  
|<span data-ttu-id="67f8b-3011">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3011">Routing strategy</span></span>|<span data-ttu-id="67f8b-3012">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-3012">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-3013">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3013">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="67f8b-3014">해당 버블링 이벤트가 <xref:System.Windows.UIElement.StylusMove>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3014">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusMove>.</span></span>  
  
-   <span data-ttu-id="67f8b-3015">재정의 <xref:System.Windows.UIElement.OnPreviewStylusMove%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3015">Override <xref:System.Windows.UIElement.OnPreviewStylusMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3016">
            <see cref="E:System.Windows.UIElement.PreviewStylusMove" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3016">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3017">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3017">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-3018">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3018">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-3019">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3019">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-3020">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3020">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-3021">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3021">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3022">스타일러스가 디지타이저에서 멀리 떨어져 있어 검색할 수 없으면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3022">Occurs when the stylus is too far from the digitizer to be detected.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3023">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewStylusOutOfRange> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3023">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-3024">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewStylusOutOfRange> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3024">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-3025">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3025">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-3026">자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3026">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3027">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3027">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3028">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3028">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent>|  
|<span data-ttu-id="67f8b-3029">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3029">Routing strategy</span></span>|<span data-ttu-id="67f8b-3030">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-3030">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-3031">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3031">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="67f8b-3032">해당 버블링 이벤트가 <xref:System.Windows.UIElement.StylusOutOfRange>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3032">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusOutOfRange>.</span></span>  
  
-   <span data-ttu-id="67f8b-3033">재정의 <xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3033">Override <xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3034">
            <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3034">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3035">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3035">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-3036">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3036">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-3037">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3037">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-3038">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3038">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-3039">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3039">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3040">사용자가 여러 스타일러스 제스처 중 하나를 수행하면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3040">Occurs when a user performs one of several stylus gestures.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3041">스타일러스 제스처에 대 한 정보를 참조 하십시오. <xref:System.Windows.Input.SystemGesture>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3041">For information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.</span></span>  
  
 <span data-ttu-id="67f8b-3042">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewStylusSystemGesture> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3042">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-3043">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewStylusSystemGesture> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3043">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-3044">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3044">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-3045">자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3045">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3046">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3046">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3047">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3047">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent>|  
|<span data-ttu-id="67f8b-3048">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3048">Routing strategy</span></span>|<span data-ttu-id="67f8b-3049">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-3049">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-3050">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3050">Delegate</span></span>|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   <span data-ttu-id="67f8b-3051">해당 버블링 이벤트가 <xref:System.Windows.UIElement.StylusSystemGesture>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3051">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusSystemGesture>.</span></span>  
  
-   <span data-ttu-id="67f8b-3052">재정의 <xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3052">Override <xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3053">
            <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3053">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3054">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3054">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-3055">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3055">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-3056">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3056">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-3057">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3057">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-3058">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3058">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3059">스타일러스가 이 요소 위에 있는 동안 사용자가 디지타이저에서 스타일러스를 올리면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3059">Occurs when the user raises the stylus off the digitizer while the stylus is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3060">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewStylusDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3060">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-3061">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewStylusDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3061">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-3062">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3062">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-3063">자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3063">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3064">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3064">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3065">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3065">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusUpEvent>|  
|<span data-ttu-id="67f8b-3066">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3066">Routing strategy</span></span>|<span data-ttu-id="67f8b-3067">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-3067">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-3068">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3068">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="67f8b-3069">해당 버블링 이벤트가 <xref:System.Windows.UIElement.StylusUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3069">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusUp>.</span></span>  
  
-   <span data-ttu-id="67f8b-3070">재정의 <xref:System.Windows.UIElement.OnPreviewStylusUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3070">Override <xref:System.Windows.UIElement.OnPreviewStylusUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3071">
            <see cref="E:System.Windows.UIElement.PreviewStylusUp" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3071">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3072">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3072">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-3073">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3073">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-3074">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3074">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-3075">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3075">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-3076">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3076">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3077">이 요소가 장치와 별개의 방식으로 텍스트를 가져오면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3077">Occurs when this element gets text in a device-independent manner.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3078"><xref:System.Windows.UIElement.PreviewTextInput> 이벤트를 사용 하면 구성 요소 또는 응용 프로그램을 장치에 관계 없이 텍스트 입력에 대 한 수신 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3078">The <xref:System.Windows.UIElement.PreviewTextInput> event allows a component or application to listen for text input in a device-independent manner.</span></span> <span data-ttu-id="67f8b-3079">키보드는 주요 수단입니다 <xref:System.Windows.UIElement.PreviewTextInput>; 음성, 필기 및 기타 입력된 장치를 생성할 수도 있지만 <xref:System.Windows.UIElement.PreviewTextInput>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3079">The keyboard is the primary means of <xref:System.Windows.UIElement.PreviewTextInput>; but speech, handwriting, and other input devices can also generate <xref:System.Windows.UIElement.PreviewTextInput>.</span></span>  
  
 <span data-ttu-id="67f8b-3080">키 조합으로 인해-기본 키보드 또는 입력된 방법 편집기를 통해-여러 주요 이벤트 하나만 텍스트 입력된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3080">Because of key combinations—either in default keyboards or through input method editors—multiple key events may raise just one text input event.</span></span>  
  
 <span data-ttu-id="67f8b-3081">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.PreviewTextInput> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3081">This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewTextInput> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-3082">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.PreviewTextInput> 이벤트 원본에 연결 된 <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3082">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewTextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3083">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3083">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3084">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3084">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTextInputEvent>|  
|<span data-ttu-id="67f8b-3085">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3085">Routing strategy</span></span>|<span data-ttu-id="67f8b-3086">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-3086">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-3087">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3087">Delegate</span></span>|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   <span data-ttu-id="67f8b-3088">해당 버블링 이벤트가 <xref:System.Windows.UIElement.TextInput>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3088">The corresponding bubbling event is <xref:System.Windows.UIElement.TextInput>.</span></span>  
  
-   <span data-ttu-id="67f8b-3089">재정의 <xref:System.Windows.UIElement.OnPreviewTextInput%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3089">Override <xref:System.Windows.UIElement.OnPreviewTextInput%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3090">
            <see cref="E:System.Windows.UIElement.PreviewTextInput" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3090">Identifies the <see cref="E:System.Windows.UIElement.PreviewTextInput" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3091">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3091">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-3092">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3092">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-3093">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3093">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-3094">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3094">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-3095">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3095">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3096">손가락이 이 요소 위에 있는 동안 화면을 터치하면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3096">Occurs when a finger touches the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3097">기본적으로는 <xref:System.Windows.UIElement.PreviewTouchDown> 및 <xref:System.Windows.UIElement.TouchDown> 손가락 화면을 터치 하 고 이동 될 때까지 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3097">By default, the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events do not occur until a finger touches the screen and moves.</span></span> <span data-ttu-id="67f8b-3098">손가락 화면에서 이동 하지 않고 수행 하는 키를 눌러를 누른 채로의 동작을 보유 한 <xref:System.Windows.Input.Stylus>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3098">Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>.</span></span> <span data-ttu-id="67f8b-3099">키를 누른 동작을 마우스 오른쪽 단추로 클릭 하는 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3099">The press and hold behavior is equivalent to a mouse right-click.</span></span>  
  
 <span data-ttu-id="67f8b-3100">발생 하는 <xref:System.Windows.UIElement.PreviewTouchDown> 및 <xref:System.Windows.UIElement.TouchDown> 손가락으로 화면을 터치 하는 즉시 발생 하도록 이벤트를 설정할는 <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> 연결 된 속성을 `false` 이 요소에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3100">To cause the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> attached property to `false` for this element.</span></span>  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3101">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3101">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3102">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3102">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTouchDownEvent>|  
|<span data-ttu-id="67f8b-3103">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3103">Routing strategy</span></span>|<span data-ttu-id="67f8b-3104">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-3104">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-3105">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3105">Delegate</span></span>|<span data-ttu-id="67f8b-3106"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3106"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="67f8b-3107">해당 버블링 이벤트가 <xref:System.Windows.UIElement.TouchDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3107">The corresponding bubbling event is <xref:System.Windows.UIElement.TouchDown>.</span></span>  
  
-   <span data-ttu-id="67f8b-3108">재정의 <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3108">Override <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3109">
            <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3109">Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3110">손가락이 이 요소 위에 있는 동안 화면에서 손가락을 움직이면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3110">Occurs when a finger moves on the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3111">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3111">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3112">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3112">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTouchMoveEvent>|  
|<span data-ttu-id="67f8b-3113">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3113">Routing strategy</span></span>|<span data-ttu-id="67f8b-3114">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-3114">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-3115">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3115">Delegate</span></span>|<span data-ttu-id="67f8b-3116"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3116"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="67f8b-3117">해당 버블링 이벤트가 <xref:System.Windows.UIElement.TouchMove>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3117">The corresponding bubbling event is <xref:System.Windows.UIElement.TouchMove>.</span></span>  
  
-   <span data-ttu-id="67f8b-3118">재정의 <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3118">Override <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3119">
            <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3119">Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3120">손가락이 이 요소 위에 있는 동안 화면에서 손가락을 떼면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3120">Occurs when a finger is raised off of the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3121">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3121">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3122">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3122">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTouchUpEvent>|  
|<span data-ttu-id="67f8b-3123">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3123">Routing strategy</span></span>|<span data-ttu-id="67f8b-3124">터널링</span><span class="sxs-lookup"><span data-stu-id="67f8b-3124">Tunneling</span></span>|  
|<span data-ttu-id="67f8b-3125">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3125">Delegate</span></span>|<span data-ttu-id="67f8b-3126"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3126"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="67f8b-3127">해당 버블링 이벤트가 <xref:System.Windows.UIElement.TouchUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3127">The corresponding bubbling event is <xref:System.Windows.UIElement.TouchUp>.</span></span>  
  
-   <span data-ttu-id="67f8b-3128">재정의 <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3128">Override <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3129">
            <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3129">Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3130">끌어서 놓기 작업 중 키보드 또는 마우스 단추 상태가 변경되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3130">Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3131"><xref:System.Windows.UIElement.QueryContinueDrag> 이벤트를 사용 하면 끌기 소스가 끌어서 놓기 작업을 취소 해야 할지를 결정 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3131">The <xref:System.Windows.UIElement.QueryContinueDrag> event enables the drag source to determine whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="67f8b-3132">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.QueryContinueDrag> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3132">This event creates an alias for the <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.QueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-3133">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.QueryContinueDrag> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3133">Event handlers that are attached to the <xref:System.Windows.UIElement.QueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3134">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3134">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3135">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3135">Identifier field</span></span>|<xref:System.Windows.UIElement.QueryContinueDragEvent>|  
|<span data-ttu-id="67f8b-3136">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3136">Routing strategy</span></span>|<span data-ttu-id="67f8b-3137">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-3137">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-3138">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3138">Delegate</span></span>|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   <span data-ttu-id="67f8b-3139">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewQueryContinueDrag>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3139">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewQueryContinueDrag>.</span></span>  
  
-   <span data-ttu-id="67f8b-3140">재정의 <xref:System.Windows.UIElement.OnQueryContinueDrag%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3140">Override <xref:System.Windows.UIElement.OnQueryContinueDrag%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3141">
            <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3141">Identifies the <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3142">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3142">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-3143">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3143">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-3144">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3144">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-3145">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3145">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-3146">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3146">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3147">커서를 표시하도록 요청하면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3147">Occurs when the cursor is requested to display.</span>
          </span>
          <span data-ttu-id="67f8b-3148">이 이벤트는 마우스 포인터를 새 위치로 이동할 때마다 요소에서 발생합니다. 즉, 새로운 위치에 따라 커서 개체가 변경되어야 할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3148">This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3149">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.QueryCursor> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3149">This event creates an alias for the <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.QueryCursor> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-3150">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.QueryCursor> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3150">Event handlers that are attached to the <xref:System.Windows.UIElement.QueryCursor> event are attached to the underlying <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-3151">이 이벤트 이름으로 참조 하는 커서가 반드시 않습니다 텍스트 커서 (삽입점 라고도 함).</span><span class="sxs-lookup"><span data-stu-id="67f8b-3151">The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point).</span></span> <span data-ttu-id="67f8b-3152">대신,이 컨텍스트에서 커서 가능한 여러 입력 관련 장치 또는 Windows 프로그래밍에 대 한 개념 화면의 그래픽 표시를 선언 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3152">Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in Windows programming.</span></span> <span data-ttu-id="67f8b-3153">해당 개체도 표시 됩니다는 <xref:System.Windows.Input.Cursor> wpf에서 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3153">That object is represented by the <xref:System.Windows.Input.Cursor> class in WPF.</span></span> <span data-ttu-id="67f8b-3154">WPF 입력된 시스템에서 마우스 포인터의 화면 위치를 나타낼 때이 커서를 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3154">The WPF input system enables you to change this cursor when it represents the onscreen position of the mouse pointer.</span></span> <span data-ttu-id="67f8b-3155">미리 정의 된 값을 사용할 수 있습니다는 <xref:System.Windows.Input.Cursors> 열거형 또는 있습니다 이미지 파일로 사용자 지정 커서를 선언할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3155">You can use predefined values from the <xref:System.Windows.Input.Cursors> enumeration, or you can declare a custom cursor as an image file.</span></span>  
  
 <span data-ttu-id="67f8b-3156">에 대 한 수신 대기 하는 <xref:System.Windows.UIElement.QueryCursor> 이벤트는 커서 관리를 위한 효율적인 기술 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3156">Listening for the <xref:System.Windows.UIElement.QueryCursor> event is not an efficient technique for cursor management.</span></span> <span data-ttu-id="67f8b-3157">각 요소는 자체 커서 동작을 정의 해야 대신 <xref:System.Windows.FrameworkContentElement.Cursor%2A> 및 <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3157">Instead, each element should define its own cursor behavior with <xref:System.Windows.FrameworkContentElement.Cursor%2A> and <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>.</span></span> <span data-ttu-id="67f8b-3158">만 사용 해야 <xref:System.Windows.UIElement.QueryCursor> WPF 프레임 워크 수준 기본 요소를 사용 하지 않는 경우 또는에 특별 한 경우 여기서 커서 동작을 요소 마다 별로 정의지 않습니다 요구를 충족 하지 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3158">You should only rely on <xref:System.Windows.UIElement.QueryCursor> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs.</span></span> <span data-ttu-id="67f8b-3159">커서 동작에 대 한 응답에서 구현에 대 한 자세한 내용은 <xref:System.Windows.UIElement.QueryCursor>, 참조 <xref:System.Windows.Input.QueryCursorEventHandler>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3159">For more information on implementing cursor behavior in response to <xref:System.Windows.UIElement.QueryCursor>, see <xref:System.Windows.Input.QueryCursorEventHandler>.</span></span>  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3160">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3160">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3161">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3161">Identifier field</span></span>|<xref:System.Windows.UIElement.QueryCursorEvent>|  
|<span data-ttu-id="67f8b-3162">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3162">Routing strategy</span></span>|<span data-ttu-id="67f8b-3163">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-3163">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-3164">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3164">Delegate</span></span>|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   <span data-ttu-id="67f8b-3165">정의 된 해당 터널링 이벤트가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3165">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="67f8b-3166">재정의 <xref:System.Windows.UIElement.OnQueryCursor%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3166">Override <xref:System.Windows.UIElement.OnQueryCursor%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3167">
            <see cref="E:System.Windows.UIElement.QueryCursor" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3167">Identifies the <see cref="E:System.Windows.UIElement.QueryCursor" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3168">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3168">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-3169">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3169">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-3170">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3170">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-3171">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3171">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-3172">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3172">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="67f8b-3173">이벤트 데이터를 포함하며 발생시킬 이벤트를 식별하는 <see cref="T:System.Windows.RoutedEventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3173">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data and also identifies the event to raise.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-3174">특정 라우트된 이벤트를 발생시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3174">Raises a specific routed event.</span>
          </span>
          <span data-ttu-id="67f8b-3175">발생시킬 <see cref="T:System.Windows.RoutedEvent" />는 해당 이벤트 데이터의 <see cref="T:System.Windows.RoutedEventArgs" /> 속성으로 제공되는 <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> 인스턴스 내에서 식별됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3175">The <see cref="T:System.Windows.RoutedEvent" /> to be raised is identified within the <see cref="T:System.Windows.RoutedEventArgs" /> instance that is provided (as the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of that event data).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3176">하지만 `e` 매개 변수의 모든 라우트된 이벤트 데이터에 대 한 일반적인 기본 형식으로 지정 됩니다; 이벤트 데이터 때문에 발생 하는 이벤트에 사용할 수 있는 가장 구체적인 이벤트 데이터 형식으로 제공 되어야 <xref:System.Windows.RoutedEventArgs> 파생된 클래스에 포함 된 특정 이벤트 발생 하는 경우를 위해 사용 되는 특정 실제 데이터 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3176">The `e` parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <xref:System.Windows.RoutedEventArgs> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.</span></span>  
  
 <span data-ttu-id="67f8b-3177"><xref:System.Windows.RoutedEventArgs> 이벤트에 대 한 상태 속성만 않습니다. 라우트된 발생할 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3177"><xref:System.Windows.RoutedEventArgs> is not just the state properties for the event; it also identifies which routed event to raise.</span></span> <span data-ttu-id="67f8b-3178">이 이벤트를 발생 시키는 패턴 및 라우트된 이벤트 데이터에서 다를 둘 다 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 및 데이터 클래스는 이벤트에 관련 된 속성을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3178">This event-raising pattern and the routed event data both differ from [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events and data classes, which typically just contain properties that are related to the event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-3179">이벤트 데이터 만들고 데이터에 이벤트 식별자를 추가한 다음 이벤트 데이터 인스턴스를 사용 하 여 사용자 지정 된 라우트된 이벤트를 발생 하는 다음 예제입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3179">The following example creates event data, appends the event identifier to the data, and then uses the event data instance to raise a custom routed event.</span></span>  
  
 [!code-csharp[RoutedEventCustom#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#raiseevent)]
 [!code-vb[RoutedEventCustom#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3180">이 요소에서 캡처된 터치 장치를 모두 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3180">Releases all captured touch devices from this element.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3181">이 요소가 마우스를 캡처한 경우 캡처를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3181">Releases the mouse capture, if this element held the capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3182">이 요소는 캡처를 유지 하지 않은 경우이 메서드를 호출 효과가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3182">If this element did not hold the capture, calling this method has no effect.</span></span> <span data-ttu-id="67f8b-3183">값을 확인 하는 것이 좋습니다. <xref:System.Windows.UIElement.IsMouseCaptured%2A> 이 메서드를 호출 하기 전에.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3183">Consider checking the value of <xref:System.Windows.UIElement.IsMouseCaptured%2A> before you call this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-3184">다음 예제에 대 한 제공 된 예제는 <xref:System.Windows.UIElement.CaptureMouse%2A>:에 마우스 단추를 처리 하 고 마우스 이동 다시 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3184">The following example is the parallel to the example given for <xref:System.Windows.UIElement.CaptureMouse%2A>: it handles mouse button up to release mouse capture and re-enable moving the mouse.</span></span>  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3185">이 요소가 스타일러스 장치를 캡처한 경우 캡처를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3185">Releases the stylus device capture, if this element held the capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3186">이 요소는 캡처를 유지 하지 않은 경우이 메서드를 호출 효과가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3186">If this element did not hold the capture, calling this method has no effect.</span></span> <span data-ttu-id="67f8b-3187">값을 확인 하는 것이 좋습니다. <xref:System.Windows.UIElement.IsStylusCaptured%2A> 이 메서드를 호출 하기 전에.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3187">Consider checking the value of <xref:System.Windows.UIElement.IsStylusCaptured%2A> before you call this method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">
          <span data-ttu-id="67f8b-3188">해제할 장치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3188">The device to release.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-3189">이 요소에서 지정된 터치 장치를 해제하려고 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3189">Attempts to release the specified touch device from this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67f8b-3190">터치 장치가 해제되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3190">
              <see langword="true" /> if the touch device is released; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="67f8b-3191">
            <paramref name="touchDevice" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3191">
              <paramref name="touchDevice" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">
          <span data-ttu-id="67f8b-3192">처리기가 연결된 라우팅된 이벤트의 식별자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3192">The identifier of the routed event for which the handler is attached.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="67f8b-3193">이 요소의 이벤트 처리기 컬렉션에서 제거할 특정 처리기 구현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3193">The specific handler implementation to remove from the event handler collection on this element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-3194">지정된 라우트된 이벤트 처리기를 이 요소에서 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3194">Removes the specified routed event handler from this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3195">이 사용 하는 가장 일반적인 시나리오 [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] 구현 하는 경우이 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 연결 된 사용자 지정 처리기에 대 한 "제거" 논리를 구현 하는 경우에 특히 라우트된 이벤트를 "래퍼" 이벤트는 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 수준입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3195">The most common scenario for using this [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] is when you implement the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] "wrapper" event that is associated with a custom routed event, specifically when you implement the "remove" logic for handlers at the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] level.</span></span> <span data-ttu-id="67f8b-3196">이 다음에 나오는 예제 주의 섹션에서는이 시나리오를 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3196">The example that follows this remarks section illustrates this scenario.</span></span>  
  
 <span data-ttu-id="67f8b-3197">다음과 같은 메서드 호출에 대 한 입력된 매개 변수와 일치 하는 조건으로 등록 된 처리기가 경우에이 메서드를 호출 하면 효과가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3197">Calling this method has no effect if there were no handlers registered with criteria that matches the input parameters for the method call.</span></span>  
  
 <span data-ttu-id="67f8b-3198">둘 이상의 처리기 처리기 저장소를 제거한 경우에 첫 번째 처리기는 조건과 일치 하는 연결 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3198">If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed.</span></span> <span data-ttu-id="67f8b-3199">이 동작은 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 의 동작에서 `-=` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3199">This behavior is consistent with [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] behavior of the `-=` operator.</span></span>  
  
 <span data-ttu-id="67f8b-3200">모두 `routedEvent` 나 `handler` 수 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3200">Neither `routedEvent` nor `handler` may be `null`.</span></span> <span data-ttu-id="67f8b-3201">와 값 중 하나를 제공 하려고 `null` 하면 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3201">Attempting to provide either value as `null` will raise an exception.</span></span>  
  
 <span data-ttu-id="67f8b-3202">이 메서드는 무시는 `handledEventsToo` 와 첫 번째 처리기가 제공 되는 매개 변수 정보를 추가 <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 서명을 이미 처리 된 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3202">This method ignores the `handledEventsToo` parameter information, which is provided if the handler was first added with the <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature that enables handling of already-handled events.</span></span> <span data-ttu-id="67f8b-3203">두 형식의 처리기 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3203">Either type of handler is removed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-3204">다음 예제에서는 <xref:System.Windows.UIElement.RemoveHandler%2A> 이벤트 래퍼 정의의 일부로 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3204">The following example uses <xref:System.Windows.UIElement.RemoveHandler%2A> as part of an event wrapper definition.</span></span>  
  
 [!code-csharp[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#addremovehandler)]
 [!code-vb[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#addremovehandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="RenderSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size RenderSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size RenderSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderSize" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size RenderSize { System::Windows::Size get(); void set(System::Windows::Size value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3205">이 요소의 최종 렌더링 크기를 가져옵니다(또는 설정합니다).</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3205">Gets (or sets) the final render size of this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-3206">이 요소의 렌더링된 크기입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3206">The rendered size for this element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="67f8b-3207">이 속성을 설정 하지 마십시오 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 또는 WPF 프레임 워크 수준 레이아웃 시스템을 사용 하는 경우 코드에서.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3207">Do not attempt to set this property, either in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] or in code, if using the WPF framework-level layout system.</span></span> <span data-ttu-id="67f8b-3208">거의 모든 일반 응용 프로그램 시나리오는이 레이아웃 시스템을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3208">Nearly all typical application scenarios will use this layout system.</span></span> <span data-ttu-id="67f8b-3209">이 레이아웃 시스템에서 설정 된 크기를 고려 하지 것입니다는 <xref:System.Windows.UIElement.RenderSize%2A> 속성을 직접 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3209">The layout system will not respect sizes set in the <xref:System.Windows.UIElement.RenderSize%2A> property directly.</span></span> <span data-ttu-id="67f8b-3210"><xref:System.Windows.UIElement.RenderSize%2A> 특정 WPF 핵심 수준 브리징 의도적으로 지원과 같이 일반적인 레이아웃 프로토콜을 사용 하지 사례를 사용 하도록 설정에 쓰기 가능 속성 선언에서 <xref:System.Windows.Documents.Adorner> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3210">The <xref:System.Windows.UIElement.RenderSize%2A> property is declared writable only to enable certain WPF core-level bridging cases that deliberately circumvent the typical layout protocols, such as support for the <xref:System.Windows.Documents.Adorner> class.</span></span>  
  
 <span data-ttu-id="67f8b-3211">이 레이아웃 시스템 내에서 적용 가능한 렌더링 크기와 같은 재정의 검사에 대 한이 속성을 사용할 수 있습니다 <xref:System.Windows.UIElement.OnRender%2A> 또는 <xref:System.Windows.UIElement.GetLayoutClip%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3211">This property can be used for checking the applicable render size within layout system overrides such as <xref:System.Windows.UIElement.OnRender%2A> or <xref:System.Windows.UIElement.GetLayoutClip%2A>.</span></span>  
  
 <span data-ttu-id="67f8b-3212">처리 하는 보다 일반적인 시나리오는 <xref:System.Windows.FrameworkElement.SizeChanged> 클래스 처리기를 사용 하 여 이벤트 재정의 또는 <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3212">A more common scenario is handling the <xref:System.Windows.FrameworkElement.SizeChanged> event with the class handler override or the <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> event.</span></span>  
  
## Examples  
 <span data-ttu-id="67f8b-3213">다음 예제에서는 사용자 지정 표시기 사용 하는 방법을 보여 줍니다.는 <xref:System.Windows.UIElement.RenderSize%2A> 값을 만들고 크기의 일환으로 표시기를 정의 하는 사각형 그래픽 해당 <xref:System.Windows.UIElement.OnRender%2A> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3213">The following example shows how a custom adorner uses the <xref:System.Windows.UIElement.RenderSize%2A> value in order to create and size the rectangle graphic that defines the adorner, as part of its <xref:System.Windows.UIElement.OnRender%2A> implementation.</span></span>  
  
 [!code-csharp[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/csharp/VS_Snippets_Wpf/AdornersMiscCode/CSharp/Window1.xaml.cs#uielementdesiredsize)]
 [!code-vb[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/visualbasic/VS_Snippets_Wpf/AdornersMiscCode/visualbasic/window1.xaml.vb#uielementdesiredsize)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform RenderTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform RenderTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ RenderTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3214">이 요소의 렌더링 위치에 영향을 주는 변형 정보를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3214">Gets or sets transform information that affects the rendering position of this element.</span>
          </span>
          <span data-ttu-id="67f8b-3215">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3215">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-3216">원하는 렌더링 변환의 세부 사항을 설명합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3216">Describes the specifics of the desired render transform.</span>
          </span>
          <span data-ttu-id="67f8b-3217">기본값은 <see cref="P:System.Windows.Media.Transform.Identity" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3217">The default is <see cref="P:System.Windows.Media.Transform.Identity" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3218">렌더링 변형의 레이아웃의 크기를 다시 생성 하지 않거나 크기 정보를 렌더링 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3218">A render transform does not regenerate layout size or render size information.</span></span> <span data-ttu-id="67f8b-3219">렌더링 변형에 애니메이션 효과나 임시 효과 요소에 적용 일반적으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3219">Render transforms are typically intended for animating or applying a temporary effect to an element.</span></span> <span data-ttu-id="67f8b-3220">예를 들어 요소 수 확대할 초점을 맞춘 마우스로, 하거나 수의 해당 부분을 강조할 수는 부하에는 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3220">For example, the element might zoom when focused or moused over, or might jitter on load to draw the eye to that part of the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span>  
  
<a name="dependencyPropertyInfo_RenderTransform"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-3221">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3221">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3222">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3222">Identifier field</span></span>|<xref:System.Windows.UIElement.RenderTransformProperty>|  
|<span data-ttu-id="67f8b-3223">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-3223">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-3224">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-3224">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOrigin">
      <MemberSignature Language="C#" Value="public System.Windows.Point RenderTransformOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point RenderTransformOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransformOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransformOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point RenderTransformOrigin { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3225">요소의 영역을 기준으로 <see cref="P:System.Windows.UIElement.RenderTransform" />에서 선언하는 가능한 렌더링 변환의 중심점을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3225">Gets or sets the center point of any possible render transform declared by <see cref="P:System.Windows.UIElement.RenderTransform" />, relative to the bounds of the element.</span>
          </span>
          <span data-ttu-id="67f8b-3226">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3226">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-3227">렌더링 변형을 선언하는 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3227">The value that declares the render transform.</span>
          </span>
          <span data-ttu-id="67f8b-3228">기본값은 좌표가 (0,0)인 <see cref="T:System.Windows.Point" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3228">The default value is a <see cref="T:System.Windows.Point" /> with coordinates (0,0).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3229"><xref:System.Windows.UIElement.RenderTransformOrigin%2A> 비표준 다소 사용권을 가집니다는 <xref:System.Windows.Point> 구조체에 값은 <xref:System.Windows.Point> 좌표 시스템의 절대 위치를 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3229"><xref:System.Windows.UIElement.RenderTransformOrigin%2A> has a somewhat nonstandard use of the <xref:System.Windows.Point> structure value, in that the <xref:System.Windows.Point> does not represent an absolute location in a coordinate system.</span></span> <span data-ttu-id="67f8b-3230">대신, 0과 1 사이의 값은 각 x, y 축에서에서 현재 요소의 범위에 대 한 인수로 해석 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3230">Instead, values between 0 and 1 are interpreted as a factor for the range of the current element in each x,y axis.</span></span> <span data-ttu-id="67f8b-3231">예를 들어 (0.5,0.5) 요소에 가운데 맞춤 될 렌더링 변환 하면 (1, 1)은 렌더링 변환이 맨 아래에 오른쪽 모서리에 있는 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3231">For example, (0.5,0.5) will cause the render transform to be centered on the element, or (1,1) would place the render transform at the bottom right corner of the element.</span></span> <span data-ttu-id="67f8b-3232"><xref:System.Double.NaN> 허용 된 값이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3232"><xref:System.Double.NaN> is not an accepted value.</span></span>  
  
 <span data-ttu-id="67f8b-3233">0과 1을 초과 하는 값도 사용할 수 있으며 독특한 변환 효과 더 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3233">Values beyond 0 and 1 are also accepted, and will result in more unconventional transform effects.</span></span> <span data-ttu-id="67f8b-3234">예를 들어, 설정한 경우 <xref:System.Windows.UIElement.RenderTransformOrigin%2A> (5, 5) 다음 적용 하는 <xref:System.Windows.Media.RotateTransform>, 회전 점 요소 자체의 경계 바깥에 있게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3234">For instance, if you set <xref:System.Windows.UIElement.RenderTransformOrigin%2A> to be (5,5), and then apply a <xref:System.Windows.Media.RotateTransform>, the rotation point will be well outside the bounds of the element itself.</span></span> <span data-ttu-id="67f8b-3235">변환에서 오른쪽 아래의 외부 발생 하는 큰 원 중심으로 요소를 회전 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3235">The transform will spin your element around in a big circle that originates beyond bottom right.</span></span> <span data-ttu-id="67f8b-3236">부모 요소 내부에 있을 수도 원본과 프레임 또는 보기에 있을 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3236">The origin might be somewhere inside its parent element and could possibly be possibly out of frame or view.</span></span> <span data-ttu-id="67f8b-3237">음수 지점 값이 비슷할, 벗어나게 됩니다 왼쪽 위 범위입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3237">Negative point values are similar, these will go beyond the top left bounds.</span></span>  
  
 <span data-ttu-id="67f8b-3238">렌더링 변형 레이아웃에 영향을 주지 않는 및 일반적으로 애니메이션을 적용 하거나 요소에 임시 효과 적용 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3238">Render transforms do not affect layout, and are typically used to animate or apply a temporary effect to an element.</span></span>  
  
<a name="xamlAttributeUsage_RenderTransformOrigin"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="67f8b-3239">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="67f8b-3239">XAML Attribute Usage</span></span>  
  
```  
<object RenderTransformOrigin="xOrigin, yOrigin"/>  
```  
  
<a name="xamlPropertyElementUsage_RenderTransformOrigin"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="67f8b-3240">XAML 속성 요소 사용</span><span class="sxs-lookup"><span data-stu-id="67f8b-3240">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.RenderTransformOrigin>  
    <Point X=" xOrigin " Y=" yOrigin "/>  
  </object.RenderTransformOrigin>  
</object>  
```  
  
<a name="xamlValues_RenderTransformOrigin"></a>   
## <a name="xaml-values"></a><span data-ttu-id="67f8b-3241">XAML 값</span><span class="sxs-lookup"><span data-stu-id="67f8b-3241">XAML Values</span></span>  
 <span data-ttu-id="67f8b-3242">*xOrigin*</span><span class="sxs-lookup"><span data-stu-id="67f8b-3242">*xOrigin*</span></span>  
 <span data-ttu-id="67f8b-3243">원래의 가로 길이 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3243">The horizontal origin factor.</span></span> <span data-ttu-id="67f8b-3244">이 일반적으로 0과 1 사이의 값으로 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3244">This is typically given as a value between 0 and 1.</span></span> <span data-ttu-id="67f8b-3245">설명 부분을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3245">See Remarks.</span></span>  
  
 <span data-ttu-id="67f8b-3246">*yOrigin*</span><span class="sxs-lookup"><span data-stu-id="67f8b-3246">*yOrigin*</span></span>  
 <span data-ttu-id="67f8b-3247">세로 시작 비율입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3247">The vertical origin factor.</span></span> <span data-ttu-id="67f8b-3248">이 일반적으로 0과 1 사이의 값으로 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3248">This is typically given as a value between 0 and 1.</span></span> <span data-ttu-id="67f8b-3249">설명 부분을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3249">See Remarks.</span></span>  
  
<a name="dependencyPropertyInfo_RenderTransformOrigin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-3250">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3250">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3251">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3251">Identifier field</span></span>|<xref:System.Windows.UIElement.RenderTransformOriginProperty>|  
|<span data-ttu-id="67f8b-3252">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-3252">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-3253">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-3253">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-3254">다음 예제에서는 코드에서 요소를 작성, 적용 되는 <xref:System.Windows.UIElement.RenderTransformOrigin%2A>를 적용 하는 <xref:System.Windows.UIElement.RenderTransform%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3254">The following example builds up elements in code, applies a <xref:System.Windows.UIElement.RenderTransformOrigin%2A>, and then applies a  <xref:System.Windows.UIElement.RenderTransform%2A>.</span></span>  
  
 [!code-csharp[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/csharp/VS_Snippets_Wpf/transformanimations_snip/CSharp/RotateAboutCenterExample.cs#uielementrendertransformorigin)]
 [!code-vb[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/visualbasic/VS_Snippets_Wpf/transformanimations_snip/visualbasic/rotateaboutcenterexample.vb#uielementrendertransformorigin)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.RenderTransform" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOriginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformOriginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformOriginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformOriginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformOriginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformOriginProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3255">
            <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3255">Identifies the <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3256">
            <see cref="P:System.Windows.UIElement.RenderTransform" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3256">Identifies the <see cref="P:System.Windows.UIElement.RenderTransform" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3257">serialization 프로세스에서 이 클래스의 인스턴스에 있는 <see cref="P:System.Windows.UIElement.CommandBindings" /> 속성의 콘텐츠를 serialize해야 하는지 여부를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3257">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement.CommandBindings" /> property on instances of this class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67f8b-3258">
            <see cref="P:System.Windows.UIElement.CommandBindings" /> 속성 값을 serialize해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3258">
              <see langword="true" /> if the <see cref="P:System.Windows.UIElement.CommandBindings" /> property value should be serialized; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3259">이 반환 됩니다 `true` 경우 <xref:System.Windows.UIElement.CommandBindings%2A> 로컬로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3259">This will return `true` if <xref:System.Windows.UIElement.CommandBindings%2A> is locally set.</span></span>  
  
 <span data-ttu-id="67f8b-3260">이 `ShouldSerialize` 메서드가 때문에 제공 되는 <xref:System.Windows.UIElement.CommandBindings%2A> 속성 간단한 기본 값이 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3260">This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.CommandBindings%2A> property does not have a simple default value.</span></span> <span data-ttu-id="67f8b-3261">이 메서드는 속성이 기본값에서 변경 되었는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3261">This method indicates whether the property has changed from its default value.</span></span> <span data-ttu-id="67f8b-3262">디자이너를 개발 하거나 포함 하는 사용자 고유의 컨트롤 개발 하는 경우 일반적으로이 메서드를 호출는 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3262">You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="67f8b-3263">자세한 내용은 참조 [ShouldSerialize 및 다시 설정 하는 메서드를 사용 하 여 기본 값 정의](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3263">For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3264">serialization 프로세스에서 이 클래스의 인스턴스에 있는 <see cref="P:System.Windows.UIElement.InputBindings" /> 속성의 콘텐츠를 serialize해야 하는지 여부를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3264">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement.InputBindings" /> property on instances of this class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67f8b-3265">
            <see cref="P:System.Windows.UIElement.InputBindings" /> 속성 값을 serialize해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3265">
              <see langword="true" /> if the <see cref="P:System.Windows.UIElement.InputBindings" /> property value should be serialized; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3266">이 반환 됩니다 `true` 경우 <xref:System.Windows.UIElement.InputBindings%2A> 로컬로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3266">This will return `true` if <xref:System.Windows.UIElement.InputBindings%2A> is locally set.</span></span>  
  
 <span data-ttu-id="67f8b-3267">이 `ShouldSerialize` 메서드가 때문에 제공 되는 <xref:System.Windows.UIElement.InputBindings%2A> 속성 간단한 기본 값이 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3267">This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.InputBindings%2A> property does not have a simple default value.</span></span> <span data-ttu-id="67f8b-3268">이 메서드는 속성이 기본값에서 변경 되었는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3268">This method indicates whether the property has changed from its default value.</span></span> <span data-ttu-id="67f8b-3269">디자이너를 개발 하거나 포함 하는 사용자 고유의 컨트롤 개발 하는 경우 일반적으로이 메서드를 호출는 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3269">You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="67f8b-3270">자세한 내용은 참조 [ShouldSerialize 및 다시 설정 하는 메서드를 사용 하 여 기본 값 정의](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3270">For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixels">
      <MemberSignature Language="C#" Value="public bool SnapsToDevicePixels { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SnapsToDevicePixels" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.SnapsToDevicePixels" />
      <MemberSignature Language="VB.NET" Value="Public Property SnapsToDevicePixels As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SnapsToDevicePixels { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3271">렌더링하는 동안 이 요소의 렌더링에 장치 관련 픽셀 설정을 사용할지 여부를 결정하는 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3271">Gets or sets a value that determines whether rendering for this element should use device-specific pixel settings during rendering.</span>
          </span>
          <span data-ttu-id="67f8b-3272">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3272">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-3273">장치 픽셀에 따라 이 요소를 렌더링해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3273">
              <see langword="true" /> if the element should render in accordance to device pixels; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="67f8b-3274">
            <see cref="T:System.Windows.UIElement" />에 선언되어 있는 기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3274">The default as declared on <see cref="T:System.Windows.UIElement" /> is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3275">이 속성 설정할 수 있습니다 `true` 스냅 픽셀 수 있도록 루트 요소에서 UI 전체에서 렌더링 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3275">You can set this property to `true` on your root element to enable pixel snap rendering throughout the UI.</span></span> <span data-ttu-id="67f8b-3276">96 이상에서 작동 하는 장치에 대 한 [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)], 픽셀 맞춤 렌더링 단일 단위 실선 주변의 앤티앨리어싱 시각적 아티팩트로 최소화할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3276">For devices operating at greater than 96 [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)], pixel snap rendering can minimize anti-aliasing visual artifacts in the vicinity of single-unit solid lines.</span></span>  
  
 <span data-ttu-id="67f8b-3277">상속 되는 경우 <xref:System.Windows.FrameworkElement> 또는 가능한 클래스를 파생 <xref:System.Windows.FrameworkElement> 이 종속성 속성을 설정에 대 한 메타 데이터 재정의 <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> 메타 데이터 속성을 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3277">When inherited by <xref:System.Windows.FrameworkElement> or any possible derived classes, <xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property to set the <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> metadata property to `true`.</span></span> <span data-ttu-id="67f8b-3278">이렇게 하면 하위 트리의 가장 바깥쪽 요소에만 지정 해야 한다는 <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> 으로 `true`, 해당 하위 트리의 모든 자식 요소가 보고 하 고 <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> 으로 `true` 갖습니다는 <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> 시각 효과입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3278">What this achieves is that only the outermost element in a subtree needs to specify <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> as `true`, and all child elements of that subtree will then report <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> as `true` and will have the <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> visual effect.</span></span>  
  
<a name="dependencyPropertyInfo_SnapsToDevicePixels"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-3279">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3279">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3280">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3280">Identifier field</span></span>|<xref:System.Windows.UIElement.SnapsToDevicePixelsProperty>|  
|<span data-ttu-id="67f8b-3281">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-3281">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-3282">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-3282">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixelsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SnapsToDevicePixelsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SnapsToDevicePixelsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.SnapsToDevicePixelsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SnapsToDevicePixelsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SnapsToDevicePixelsProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3283">
            <see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3283">Identifies the <see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3284">포인터가 이 요소 위에 있는 동안 스타일러스 단추를 누르면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3284">Occurs when the stylus button is pressed while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3285">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.StylusButtonDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3285">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-3286">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.StylusButtonDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3286">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-3287">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3287">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-3288">자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3288">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3289">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3289">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3290">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3290">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusButtonDownEvent>|  
|<span data-ttu-id="67f8b-3291">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3291">Routing strategy</span></span>|<span data-ttu-id="67f8b-3292">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-3292">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-3293">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3293">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="67f8b-3294">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewStylusButtonDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3294">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusButtonDown>.</span></span>  
  
-   <span data-ttu-id="67f8b-3295">재정의 <xref:System.Windows.UIElement.OnStylusButtonDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3295">Override <xref:System.Windows.UIElement.OnStylusButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3296">
            <see cref="E:System.Windows.UIElement.StylusButtonDown" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3296">Identifies the <see cref="E:System.Windows.UIElement.StylusButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3297">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3297">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-3298">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3298">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-3299">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3299">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-3300">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3300">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-3301">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3301">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3302">포인터가 이 요소 위에 있는 동안 스타일러스 단추를 놓으면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3302">Occurs when the stylus button is released while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3303">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.StylusButtonUp> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3303">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-3304">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.StylusButtonUp> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3304">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-3305">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3305">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-3306">자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3306">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3307">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3307">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3308">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3308">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusButtonUpEvent>|  
|<span data-ttu-id="67f8b-3309">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3309">Routing strategy</span></span>|<span data-ttu-id="67f8b-3310">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-3310">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-3311">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3311">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="67f8b-3312">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewStylusButtonUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3312">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusButtonUp>.</span></span>  
  
-   <span data-ttu-id="67f8b-3313">재정의 <xref:System.Windows.UIElement.OnStylusButtonUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3313">Override <xref:System.Windows.UIElement.OnStylusButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3314">
            <see cref="E:System.Windows.UIElement.StylusButtonUp" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3314">Identifies the <see cref="E:System.Windows.UIElement.StylusButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3315">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3315">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-3316">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3316">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-3317">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3317">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-3318">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3318">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-3319">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3319">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3320">스타일러스가 이 요소 위에 있는 동안 스타일러스가 디지타이저를 건드리면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3320">Occurs when the stylus touches the digitizer while the stylus is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3321">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.StylusDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3321">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-3322">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.StylusDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3322">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-3323">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3323">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-3324">자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3324">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3325">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3325">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3326">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3326">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusDownEvent>|  
|<span data-ttu-id="67f8b-3327">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3327">Routing strategy</span></span>|<span data-ttu-id="67f8b-3328">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-3328">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-3329">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3329">Delegate</span></span>|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   <span data-ttu-id="67f8b-3330">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewStylusDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3330">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusDown>.</span></span>  
  
-   <span data-ttu-id="67f8b-3331">재정의 <xref:System.Windows.UIElement.OnStylusDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3331">Override <xref:System.Windows.UIElement.OnStylusDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3332">
            <see cref="E:System.Windows.UIElement.StylusDown" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3332">Identifies the <see cref="E:System.Windows.UIElement.StylusDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3333">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3333">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-3334">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3334">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-3335">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3335">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-3336">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3336">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-3337">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3337">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3338">스타일러스가 이 요소의 영역 안으로 들어가면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3338">Occurs when the stylus enters the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3339"><xref:System.Windows.UIElement.StylusEnter> 처리 라우팅 전략 직접 이벤트를 사용 하는입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3339"><xref:System.Windows.UIElement.StylusEnter> is a  that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="67f8b-3340">경로; 직접 라우트된 이벤트를 발생 하지 않습니다. 대신,에서 처리 됩니다는 동일한 요소 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3340">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="67f8b-3341">그러나 라우트된 이벤트 동작 스타일의 이벤트 트리거 등의 다른 측면을 활성화 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3341">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="67f8b-3342">하지만 <xref:System.Windows.UIElement.StylusEnter> 트랙 스타일러스이 이벤트를 더이 요소의 영역 안으로 들어가면 직접적으로 보고 하는 <xref:System.Windows.UIElement.IsStylusOver%2A> 에서 속성 값이 변경 `false` 를 `true` 이 요소에 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3342">Although <xref:System.Windows.UIElement.StylusEnter> tracks when the stylus enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsStylusOver%2A> property value has changed from `false` to `true` on this element.</span></span>  
  
 <span data-ttu-id="67f8b-3343">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.StylusEnter> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3343">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-3344">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.StylusEnter> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3344">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusEnter> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-3345">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3345">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-3346">자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3346">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3347">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3347">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3348">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3348">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusEnterEvent>|  
|<span data-ttu-id="67f8b-3349">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3349">Routing strategy</span></span>|<span data-ttu-id="67f8b-3350">직접</span><span class="sxs-lookup"><span data-stu-id="67f8b-3350">Direct</span></span>|  
|<span data-ttu-id="67f8b-3351">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3351">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="67f8b-3352">재정의 <xref:System.Windows.UIElement.OnStylusEnter%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3352">Override <xref:System.Windows.UIElement.OnStylusEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3353">
            <see cref="E:System.Windows.UIElement.StylusEnter" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3353">Identifies the <see cref="E:System.Windows.UIElement.StylusEnter" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3354">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3354">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-3355">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3355">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-3356">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3356">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-3357">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3357">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-3358">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3358">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3359">스타일러스가 디지타이저를 실제로 건드리지 않고 요소 위로 움직이면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3359">Occurs when the stylus moves over an element without actually touching the digitizer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3360">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.StylusInAirMove> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3360">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-3361">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.StylusInAirMove> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3361">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-3362">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3362">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-3363">자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3363">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3364">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3364">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3365">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3365">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusInAirMoveEvent>|  
|<span data-ttu-id="67f8b-3366">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3366">Routing strategy</span></span>|<span data-ttu-id="67f8b-3367">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-3367">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-3368">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3368">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="67f8b-3369">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewStylusInAirMove>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3369">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusInAirMove>.</span></span>  
  
-   <span data-ttu-id="67f8b-3370">재정의 <xref:System.Windows.UIElement.OnStylusInAirMove%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3370">Override <xref:System.Windows.UIElement.OnStylusInAirMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3371">
            <see cref="E:System.Windows.UIElement.StylusInAirMove" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3371">Identifies the <see cref="E:System.Windows.UIElement.StylusInAirMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3372">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3372">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-3373">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3373">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-3374">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3374">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-3375">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3375">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-3376">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3376">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3377">이 요소 위에 있는 동안 스타일러스가 디지타이저를 검색할 만큼 가까이 있으면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3377">Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3378">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.StylusInRange> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3378">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusInRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-3379">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.StylusInRange> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3379">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-3380">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3380">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-3381">자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3381">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3382">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3382">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3383">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3383">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusInRangeEvent>|  
|<span data-ttu-id="67f8b-3384">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3384">Routing strategy</span></span>|<span data-ttu-id="67f8b-3385">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-3385">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-3386">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3386">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="67f8b-3387">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewStylusInRange>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3387">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusInRange>.</span></span>  
  
-   <span data-ttu-id="67f8b-3388">재정의 <xref:System.Windows.UIElement.OnStylusInRange%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3388">Override <xref:System.Windows.UIElement.OnStylusInRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3389">
            <see cref="E:System.Windows.UIElement.StylusInRange" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3389">Identifies the <see cref="E:System.Windows.UIElement.StylusInRange" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3390">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3390">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-3391">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3391">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-3392">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3392">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-3393">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3393">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-3394">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3394">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3395">스타일러스가 요소의 영역을 벗어나면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3395">Occurs when the stylus leaves the bounds of the element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3396"><xref:System.Windows.UIElement.StylusLeave> 처리 라우팅 전략 직접 이벤트를 사용 하는입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3396"><xref:System.Windows.UIElement.StylusLeave> is a  that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="67f8b-3397">경로; 직접 라우트된 이벤트를 발생 하지 않습니다. 대신,에서 처리 됩니다는 동일한 요소 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3397">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="67f8b-3398">그러나 라우트된 이벤트 동작 스타일의 이벤트 트리거 등의 다른 측면을 활성화 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3398">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="67f8b-3399">하지만 <xref:System.Windows.UIElement.StylusLeave> 트랙 위에 있는 범위를 벗어날 때이 이벤트는 요소 중 더 직접적으로 보고 하는 <xref:System.Windows.UIElement.IsStylusOver%2A> 에서 속성 값이 변경 `true` 를 `false` 이 요소에 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3399">Although <xref:System.Windows.UIElement.StylusLeave> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsStylusOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
 <span data-ttu-id="67f8b-3400">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.StylusLeave> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3400">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-3401">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.StylusLeave> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3401">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusLeave> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-3402">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3402">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-3403">자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3403">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3404">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3404">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3405">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3405">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusLeaveEvent>|  
|<span data-ttu-id="67f8b-3406">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3406">Routing strategy</span></span>|<span data-ttu-id="67f8b-3407">직접</span><span class="sxs-lookup"><span data-stu-id="67f8b-3407">Direct</span></span>|  
|<span data-ttu-id="67f8b-3408">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3408">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="67f8b-3409">재정의 <xref:System.Windows.UIElement.OnStylusLeave%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3409">Override <xref:System.Windows.UIElement.OnStylusLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3410">
            <see cref="E:System.Windows.UIElement.StylusLeave" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3410">Identifies the <see cref="E:System.Windows.UIElement.StylusLeave" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3411">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3411">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-3412">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3412">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-3413">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3413">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-3414">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3414">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-3415">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3415">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3416">스타일러스가 이 요소 위로 움직일 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3416">Occurs when the stylus moves over this element.</span>
          </span>
          <span data-ttu-id="67f8b-3417">이 이벤트가 발생하려면 스타일러스가 디지타이저 위에서 움직여야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3417">The stylus must move while on the digitizer to raise this event.</span>
          </span>
          <span data-ttu-id="67f8b-3418">그렇지 않으면 이 이벤트 대신 <see cref="E:System.Windows.UIElement.StylusInAirMove" />가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3418">Otherwise, <see cref="E:System.Windows.UIElement.StylusInAirMove" /> is raised instead.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3419">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.StylusMove> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3419">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-3420">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.StylusMove> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3420">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-3421">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3421">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-3422">자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3422">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3423">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3423">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3424">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3424">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusMoveEvent>|  
|<span data-ttu-id="67f8b-3425">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3425">Routing strategy</span></span>|<span data-ttu-id="67f8b-3426">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-3426">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-3427">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3427">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="67f8b-3428">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewStylusMove>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3428">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusMove>.</span></span>  
  
-   <span data-ttu-id="67f8b-3429">재정의 <xref:System.Windows.UIElement.OnStylusMove%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3429">Override <xref:System.Windows.UIElement.OnStylusMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3430">
            <see cref="E:System.Windows.UIElement.StylusMove" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3430">Identifies the <see cref="E:System.Windows.UIElement.StylusMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3431">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3431">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-3432">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3432">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-3433">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3433">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-3434">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3434">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-3435">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3435">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3436">이 요소 위에 있는 동안 스타일러스가 디지타이저에서 멀리 떨어져 있어 검색할 수 없으면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3436">Occurs when the stylus is too far from the digitizer to be detected, while over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3437">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.StylusOutOfRange> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3437">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-3438">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.StylusOutOfRange> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3438">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-3439">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3439">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-3440">자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3440">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3441">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3441">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3442">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3442">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusOutOfRangeEvent>|  
|<span data-ttu-id="67f8b-3443">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3443">Routing strategy</span></span>|<span data-ttu-id="67f8b-3444">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-3444">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-3445">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3445">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="67f8b-3446">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewStylusOutOfRange>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3446">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusOutOfRange>.</span></span>  
  
-   <span data-ttu-id="67f8b-3447">재정의 <xref:System.Windows.UIElement.OnStylusOutOfRange%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3447">Override <xref:System.Windows.UIElement.OnStylusOutOfRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3448">
            <see cref="E:System.Windows.UIElement.StylusOutOfRange" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3448">Identifies the <see cref="E:System.Windows.UIElement.StylusOutOfRange" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3449">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3449">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-3450">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3450">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-3451">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3451">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-3452">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3452">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-3453">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3453">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusPlugIns">
      <MemberSignature Language="C#" Value="protected System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.StylusPlugIns" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property StylusPlugIns As StylusPlugInCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ StylusPlugIns { System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusPlugIns.StylusPlugInCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3454">이 요소와 연결된 모든 스타일러스 플러그 인(사용자 지정) 개체 컬렉션을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3454">Gets a collection of all stylus plug-in (customization) objects associated with this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-3455">특수 컬렉션인 스타일러스 플러그 인 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3455">The collection of stylus plug-ins, as a specialized collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3456">이 컬렉션을 채우는 컨트롤의 예로 <xref:System.Windows.Controls.InkCanvas>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3456">An example of a control that populates this collection is <xref:System.Windows.Controls.InkCanvas>.</span></span> <span data-ttu-id="67f8b-3457"><xref:System.Windows.Controls.InkCanvas> 추가 <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> 수 있는 컬렉션 항목으로는 <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> 스타일러스 입력와 상호 작용 하 여 고유한 렌더링 스타일러스 구동 이벤트에 대 한 응답에서을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3457"><xref:System.Windows.Controls.InkCanvas> adds the <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> as a collection item, which enables the <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> to interact with stylus input and produce the unique rendering in response to stylus driven events.</span></span>  
  
 <span data-ttu-id="67f8b-3458">사용자 지정 플러그 인을 만드는 방법에 대 한 정보는 수신 하 고 스타일러스 입력을 해석 수, 참조 [스타일러스를](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3458">For information on creating custom plug-ins that can receive and interpret stylus input, see [Intercepting Input from the Stylus](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-3459">다음 예제에서는 한 <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> 인스턴스 및에 추가 <xref:System.Windows.UIElement.StylusPlugIns%2A> 사용자 지정 잉크 처리 컨트롤에 대 한 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3459">The following example creates a <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> instance and adds it to the <xref:System.Windows.UIElement.StylusPlugIns%2A> collection for a custom ink handling control.</span></span>  
  
 [!code-csharp[StylusPluginSamples#3](~/samples/snippets/csharp/VS_Snippets_Wpf/StylusPluginSamples/CSharp/StylusControl.cs#3)]
 [!code-vb[StylusPluginSamples#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StylusPluginSamples/VisualBasic/StylusControl.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.StylusPlugIns.DynamicRenderer" />
        <altmember cref="T:System.Windows.Controls.InkCanvas" />
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3460">사용자가 여러 스타일러스 제스처 중 하나를 수행하면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3460">Occurs when a user performs one of several stylus gestures.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3461">스타일러스 제스처에 대 한 자세한 내용은 참조 하십시오. <xref:System.Windows.Input.SystemGesture>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3461">For more information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.</span></span>  
  
 <span data-ttu-id="67f8b-3462">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.StylusSystemGesture> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3462">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-3463">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.StylusSystemGesture> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3463">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-3464">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3464">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-3465">자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3465">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3466">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3466">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3467">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3467">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusSystemGestureEvent>|  
|<span data-ttu-id="67f8b-3468">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3468">Routing strategy</span></span>|<span data-ttu-id="67f8b-3469">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-3469">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-3470">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3470">Delegate</span></span>|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   <span data-ttu-id="67f8b-3471">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewStylusSystemGesture>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3471">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusSystemGesture>.</span></span>  
  
-   <span data-ttu-id="67f8b-3472">재정의 <xref:System.Windows.UIElement.OnStylusSystemGesture%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3472">Override <xref:System.Windows.UIElement.OnStylusSystemGesture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3473">
            <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3473">Identifies the <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3474">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3474">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-3475">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3475">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-3476">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3476">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-3477">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3477">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-3478">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3478">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3479">스타일러스가 이 요소 위에 있는 동안 사용자가 디지타이저에서 스타일러스를 올리면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3479">Occurs when the user raises the stylus off the digitizer while it is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3480">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.StylusUp> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3480">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-3481">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.StylusUp> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3481">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="67f8b-3482">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3482">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="67f8b-3483">자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3483">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3484">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3484">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3485">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3485">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusUpEvent>|  
|<span data-ttu-id="67f8b-3486">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3486">Routing strategy</span></span>|<span data-ttu-id="67f8b-3487">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-3487">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-3488">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3488">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="67f8b-3489">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewStylusUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3489">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusUp>.</span></span>  
  
-   <span data-ttu-id="67f8b-3490">재정의 <xref:System.Windows.UIElement.OnStylusUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3490">Override <xref:System.Windows.UIElement.OnStylusUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3491">
            <see cref="E:System.Windows.UIElement.StylusUp" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3491">Identifies the <see cref="E:System.Windows.UIElement.StylusUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3492">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3492">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-3493">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3493">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-3494">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3494">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-3495">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3495">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-3496">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3496">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3497">이 요소가 장치와 별개의 방식으로 텍스트를 가져오면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3497">Occurs when this element gets text in a device-independent manner.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="67f8b-3498">합성 컨트롤의 내부 구현에 의해 처리 된 것으로이 이벤트가 이미 표시 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3498">This event might already be marked as handled by the internal implementations of composited controls.</span></span> <span data-ttu-id="67f8b-3499">아래의 설명을 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3499">See Remark below.</span></span>  
  
 <span data-ttu-id="67f8b-3500"><xref:System.Windows.UIElement.TextInput> 이벤트 합성 컨트롤의 내부 구현에 의해 처리 된 것으로 이미 표시 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3500">The <xref:System.Windows.UIElement.TextInput> event may already be marked as handled by the internal implementations of composited controls.</span></span> <span data-ttu-id="67f8b-3501">예를 들어 한 <xref:System.Windows.Controls.TextBox> 는 합성 컨트롤 위치는 <xref:System.Windows.UIElement.TextInput> 이벤트는 이미 처리;의 합성 내에서 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3501">For example, a <xref:System.Windows.Controls.TextBox> is a composited control where the <xref:System.Windows.UIElement.TextInput> event is already marked as handled; within its compositing.</span></span> <span data-ttu-id="67f8b-3502">컨트롤은 컨트롤의 입력을 해당 컨트롤에 특별 한 의미가 있는 것으로 화살표 키 같은 일부 형식을 해석 하기 때문에이 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3502">Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control.</span></span> <span data-ttu-id="67f8b-3503">사용 하는 경우 <xref:System.Windows.UIElement.PreviewTextInput> 텍스트 입력에 대 한 처리기를 연결 하는 이벤트로 더 나은 결과 나타날 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3503">If you use <xref:System.Windows.UIElement.PreviewTextInput> as the event where you attach handlers for text input, you may receive better results.</span></span> <span data-ttu-id="67f8b-3504">이 방법은 대부분의 경우 컨트롤 컴퍼지션 이미 표시가이 이벤트를 처리 하 고 처리기 이벤트 경로 따라가 이벤트를 수신 하지 못하도록 하는 위치를 우회 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3504">This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.</span></span>  
  
 <span data-ttu-id="67f8b-3505"><xref:System.Windows.UIElement.TextInput> 이벤트를 사용 하면 구성 요소 또는 응용 프로그램을 장치에 관계 없이 텍스트 입력에 대 한 수신 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3505">The <xref:System.Windows.UIElement.TextInput> event allows a component or application to listen for text input in a device-independent manner.</span></span> <span data-ttu-id="67f8b-3506">키보드는 주요 수단입니다 <xref:System.Windows.UIElement.TextInput>, 음성, 필기 및 기타 입력된 장치를 발생 시킬 수 있지만 <xref:System.Windows.UIElement.TextInput>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3506">The keyboard is the primary means of <xref:System.Windows.UIElement.TextInput>, but speech, handwriting, and other input devices can also raise <xref:System.Windows.UIElement.TextInput>.</span></span>  
  
 <span data-ttu-id="67f8b-3507">키 조합으로 인해-기본 키보드 또는 입력된 방법 편집기를 통해-여러 주요 이벤트 하나만 텍스트 입력된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3507">Because of key combinations—either in default keyboards or through input method editors—multiple key events might raise just one text input event.</span></span>  
  
 <span data-ttu-id="67f8b-3508">이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.UIElement.TextInput> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.UIElement> 의 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3508">This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.TextInput> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="67f8b-3509">에 연결 된 이벤트 처리기는 <xref:System.Windows.UIElement.TextInput> 이벤트 원본에 연결 된 <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3509">Event handlers that are attached to the <xref:System.Windows.UIElement.TextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3510">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3510">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3511">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3511">Identifier field</span></span>|<xref:System.Windows.UIElement.TextInputEvent>|  
|<span data-ttu-id="67f8b-3512">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3512">Routing strategy</span></span>|<span data-ttu-id="67f8b-3513">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-3513">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-3514">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3514">Delegate</span></span>|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   <span data-ttu-id="67f8b-3515">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewTextInput>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3515">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTextInput>.</span></span>  
  
-   <span data-ttu-id="67f8b-3516">재정의 <xref:System.Windows.UIElement.OnTextInput%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3516">Override <xref:System.Windows.UIElement.OnTextInput%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3517">
            <see cref="E:System.Windows.UIElement.TextInput" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3517">Identifies the <see cref="E:System.Windows.UIElement.TextInput" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3518">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3518">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="67f8b-3519">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3519">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="67f8b-3520">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3520">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="67f8b-3521">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3521">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="67f8b-3522">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3522">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3523">손가락이 이 요소 위에 있는 동안 화면을 터치하면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3523">Occurs when a finger touches the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3524">기본적으로는 <xref:System.Windows.UIElement.PreviewTouchDown> 및 <xref:System.Windows.UIElement.TouchDown> 손가락 화면을 터치 하 고 이동 될 때까지 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3524">By default, the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events do not occur until a finger touches the screen and moves.</span></span> <span data-ttu-id="67f8b-3525">손가락 화면에서 이동 하지 않고 수행 하는 키를 눌러를 누른 채로의 동작을 보유 한 <xref:System.Windows.Input.Stylus>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3525">Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>.</span></span> <span data-ttu-id="67f8b-3526">키를 누른 동작을 마우스 오른쪽 단추로 클릭 하는 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3526">The press and hold behavior is equivalent to a mouse right-click.</span></span>  
  
 <span data-ttu-id="67f8b-3527">발생 하는 <xref:System.Windows.UIElement.PreviewTouchDown> 및 <xref:System.Windows.UIElement.TouchDown> 손가락으로 화면을 터치 하는 즉시 발생 하도록 이벤트를 설정할는 <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> 연결 된 속성을 `false` 이 요소에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3527">To cause the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> attached property to `false` for this element.</span></span>  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3528">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3528">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3529">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3529">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchDownEvent>|  
|<span data-ttu-id="67f8b-3530">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3530">Routing strategy</span></span>|<span data-ttu-id="67f8b-3531">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-3531">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-3532">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3532">Delegate</span></span>|<span data-ttu-id="67f8b-3533"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3533"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="67f8b-3534">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewTouchDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3534">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchDown>.</span></span>  
  
-   <span data-ttu-id="67f8b-3535">재정의 <xref:System.Windows.UIElement.OnTouchDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3535">Override <xref:System.Windows.UIElement.OnTouchDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3536">
            <see cref="E:System.Windows.UIElement.TouchDown" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3536">Identifies the <see cref="E:System.Windows.UIElement.TouchDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3537">터치가 이 요소의 경계 외부에서 내부로 이동할 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3537">Occurs when a touch moves from outside to inside the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3538">이 이벤트는이 요소에 터치 장치 캡처되는지 여부 항상 발생 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3538">This event is always raised, whether or not the touch device is captured to this element.</span></span>  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3539">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3539">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3540">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3540">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchEnterEvent>|  
|<span data-ttu-id="67f8b-3541">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3541">Routing strategy</span></span>|<span data-ttu-id="67f8b-3542">직접</span><span class="sxs-lookup"><span data-stu-id="67f8b-3542">Direct</span></span>|  
|<span data-ttu-id="67f8b-3543">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3543">Delegate</span></span>|<span data-ttu-id="67f8b-3544"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3544"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="67f8b-3545">재정의 <xref:System.Windows.UIElement.OnTouchEnter%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3545">Override <xref:System.Windows.UIElement.OnTouchEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3546">
            <see cref="E:System.Windows.UIElement.TouchEnter" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3546">Identifies the <see cref="E:System.Windows.UIElement.TouchEnter" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3547">이 요소에 캡처된 터치 장치를 모두 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3547">Gets all touch devices that are captured to this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-3548">이 요소에 캡처된 <see cref="T:System.Windows.Input.TouchDevice" /> 개체의 열거형입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3548">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3549">이 요소나 시각적 트리의 임의 자식 요소에 캡처된 터치 장치를 모두 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3549">Gets all touch devices that are captured to this element or any child elements in its visual tree.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-3550">이 요소나 시각적 트리의 임의 자식 요소에 캡처된 <see cref="T:System.Windows.Input.TouchDevice" /> 개체의 열거형입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3550">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element or any child elements in its visual tree.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3551">이 요소 위에 있는 터치 장치를 모두 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3551">Gets all touch devices that are over this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-3552">이 요소 위에 있는 <see cref="T:System.Windows.Input.TouchDevice" /> 개체의 열거형입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3552">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3553">이 요소나 시각적 트리의 임의 자식 요소 위에 있는 터치 장치를 모두 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3553">Gets all touch devices that are over this element or any child elements in its visual tree.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-3554">이 요소나 시각적 트리의 임의 자식 요소 위에 있는 <see cref="T:System.Windows.Input.TouchDevice" /> 개체의 열거형입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3554">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element or any child elements in its visual tree.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3555">터치가 이 요소의 경계 내부에서 외부로 이동할 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3555">Occurs when a touch moves from inside to outside the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3556">이 이벤트는이 요소에 터치 장치 캡처되는지 여부 항상 발생 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3556">This event is always raised, whether or not the touch device is captured to this element.</span></span>  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3557">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3557">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3558">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3558">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchLeaveEvent>|  
|<span data-ttu-id="67f8b-3559">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3559">Routing strategy</span></span>|<span data-ttu-id="67f8b-3560">직접</span><span class="sxs-lookup"><span data-stu-id="67f8b-3560">Direct</span></span>|  
|<span data-ttu-id="67f8b-3561">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3561">Delegate</span></span>|<span data-ttu-id="67f8b-3562"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3562"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="67f8b-3563">재정의 <xref:System.Windows.UIElement.OnTouchLeave%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3563">Override <xref:System.Windows.UIElement.OnTouchLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3564">
            <see cref="E:System.Windows.UIElement.TouchLeave" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3564">Identifies the <see cref="E:System.Windows.UIElement.TouchLeave" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3565">손가락이 이 요소 위에 있는 동안 화면에서 손가락을 움직이면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3565">Occurs when a finger moves on the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3566">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3566">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3567">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3567">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchMoveEvent>|  
|<span data-ttu-id="67f8b-3568">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3568">Routing strategy</span></span>|<span data-ttu-id="67f8b-3569">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-3569">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-3570">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3570">Delegate</span></span>|<span data-ttu-id="67f8b-3571"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3571"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="67f8b-3572">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewTouchMove>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3572">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchMove>.</span></span>  
  
-   <span data-ttu-id="67f8b-3573">재정의 <xref:System.Windows.UIElement.OnTouchMove%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3573">Override <xref:System.Windows.UIElement.OnTouchMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3574">
            <see cref="E:System.Windows.UIElement.TouchMove" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3574">Identifies the <see cref="E:System.Windows.UIElement.TouchMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3575">손가락이 이 요소 위에 있는 동안 화면에서 손가락을 떼면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3575">Occurs when a finger is raised off of the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="67f8b-3576">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3576">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3577">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3577">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchUpEvent>|  
|<span data-ttu-id="67f8b-3578">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="67f8b-3578">Routing strategy</span></span>|<span data-ttu-id="67f8b-3579">버블링</span><span class="sxs-lookup"><span data-stu-id="67f8b-3579">Bubbling</span></span>|  
|<span data-ttu-id="67f8b-3580">대리자</span><span class="sxs-lookup"><span data-stu-id="67f8b-3580">Delegate</span></span>|<span data-ttu-id="67f8b-3581"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3581"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="67f8b-3582">해당 터널링 이벤트는 <xref:System.Windows.UIElement.PreviewTouchUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3582">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchUp>.</span></span>  
  
-   <span data-ttu-id="67f8b-3583">재정의 <xref:System.Windows.UIElement.OnTouchUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3583">Override <xref:System.Windows.UIElement.OnTouchUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3584">
            <see cref="E:System.Windows.UIElement.TouchUp" /> 라우트된 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3584">Identifies the <see cref="E:System.Windows.UIElement.TouchUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslatePoint">
      <MemberSignature Language="C#" Value="public System.Windows.Point TranslatePoint (System.Windows.Point point, System.Windows.UIElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Point TranslatePoint(valuetype System.Windows.Point point, class System.Windows.UIElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Point TranslatePoint(System::Windows::Point point, System::Windows::UIElement ^ relativeTo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="relativeTo" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="point">
          <span data-ttu-id="67f8b-3585">이 요소에 상대적인 점 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3585">The point value, as relative to this element.</span>
          </span>
        </param>
        <param name="relativeTo">
          <span data-ttu-id="67f8b-3586">지정된 점을 변환할 요소입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3586">The element to translate the given point into.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67f8b-3587">이 요소와 관련된 점을 지정된 요소와 관련된 좌표로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3587">Translates a point relative to this element to coordinates that are relative to the specified element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67f8b-3588">이제 이 원본 요소가 아닌 대상 요소에 상대적인 점 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3588">A point value, now relative to the target element rather than this source element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3589">전달 `null` 에 대 한 `relativeTo` 을 사용할 수도 및이 요소가 속한 논리적 트리 루트 요소를 기준으로 좌표 되어야 함을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3589">Passing `null` for `relativeTo` is permitted, and indicates that coordinates should be relative to the root element in the logical tree that this element belongs to.</span></span>  
  
 <span data-ttu-id="67f8b-3590">이 메서드는 테스트 지점 값에 도달 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3590">This method is used for translating hit test point values.</span></span> <span data-ttu-id="67f8b-3591">이 메서드를 호출 하는 컨트롤 만드는 낮은 수준에서 입력을 처리 해야 하는 경우 주로 관련이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3591">Calling this method is mainly relevant if you are authoring a control and need to process input at a lower level.</span></span> <span data-ttu-id="67f8b-3592">기존 컨트롤을 사용 하는 완전된 한 컨트롤이 올바르게 번역 된 적중 횟수 테스트 결과 보고 합니다 일반적으로 가정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3592">If you are using existing controls, you can generally assume that completed controls will report correctly translated hit test results.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uid">
      <MemberSignature Language="C#" Value="public string Uid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Uid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Uid" />
      <MemberSignature Language="VB.NET" Value="Public Property Uid As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Uid { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3593">이 요소의 고유 식별자(지역화에 대한)를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3593">Gets or sets the unique identifier (for localization) for this element.</span>
          </span>
          <span data-ttu-id="67f8b-3594">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3594">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-3595">이 요소의 고유 식별자인 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3595">A string that is the unique identifier for this element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3596">디자이너에서 가져오는 데 사용 된 `x:Uid` 값 (참조 [WPF 전역화 및 지역화 개요](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md) 에 대 한 자세한 내용은).</span><span class="sxs-lookup"><span data-stu-id="67f8b-3596">Used by designers to get the `x:Uid` value (see [WPF Globalization and Localization Overview](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md) for more information).</span></span>  
  
<a name="dependencyPropertyInfo_WindowWindowStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-3597">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3597">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3598">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3598">Identifier field</span></span>|<xref:System.Windows.UIElement.UidProperty>|  
|<span data-ttu-id="67f8b-3599">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-3599">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-3600">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-3600">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UidProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UidProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UidProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.UidProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UidProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UidProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3601">
            <see cref="P:System.Windows.UIElement.Uid" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3601">Identifies the <see cref="P:System.Windows.UIElement.Uid" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateLayout">
      <MemberSignature Language="C#" Value="public void UpdateLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.UpdateLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateLayout();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3602">이 요소의 모든 시각적 자식 요소가 레이아웃용으로 적절하게 업데이트되도록 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3602">Ensures that all visual child elements of this element are properly updated for layout.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3603">이 메서드를 사용 하 여 요소를 호출 하는 경우 <xref:System.Windows.UIElement.IsMeasureValid%2A> `false` 또는 <xref:System.Windows.UIElement.IsArrangeValid%2A> `false` 요소 관련 호출 <xref:System.Windows.UIElement.MeasureCore%2A> 및 <xref:System.Windows.UIElement.ArrangeCore%2A> 메서드는 레이아웃을 강제로 업데이트 하 고, 모든 계산 된 크기의 유효성을 검사 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3603">When you call this method, elements with <xref:System.Windows.UIElement.IsMeasureValid%2A>`false` or <xref:System.Windows.UIElement.IsArrangeValid%2A>`false` will call element-specific <xref:System.Windows.UIElement.MeasureCore%2A> and <xref:System.Windows.UIElement.ArrangeCore%2A> methods, which forces layout update, and all computed sizes will be validated.</span></span>  
  
 <span data-ttu-id="67f8b-3604">다음과 같은 레이아웃이 변경 된 경우 또는 레이아웃의 정렬 또는 측정 상태에 유효 하지 않을 경우에이 메서드를 호출 하면 효과가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3604">Calling this method has no effect if layout is unchanged, or if neither arrangement nor measurement state of a layout is invalid.</span></span> <span data-ttu-id="67f8b-3605">그러나 어느 관점에서 레이아웃 유효 하지 않을 경우, 고 <xref:System.Windows.UIElement.UpdateLayout%2A> 호출 전체 레이아웃을 다시 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3605">However, if layout is invalid in either respect, the <xref:System.Windows.UIElement.UpdateLayout%2A> call will redo the entire layout.</span></span> <span data-ttu-id="67f8b-3606">따라서 호출 해서는 <xref:System.Windows.UIElement.UpdateLayout%2A> 요소 트리에 있는 각 증분 및 사소한 변경 후 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3606">Therefore, you should avoid calling <xref:System.Windows.UIElement.UpdateLayout%2A> after each incremental and minor change in the element tree.</span></span> <span data-ttu-id="67f8b-3607">이 레이아웃 시스템 성능 및 통화와 균형을 조정 하는 알고리즘을 사용 하 여 지연 된 방식에서 및 모든 자식 요소가 유효한 될 때까지 루트에 대 한 변경 내용을 연기 하는 가중치 전략으로 요소 레이아웃을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3607">The layout system will perform element layout in a deferred manner, using an algorithm that balances performance and currency, and with a weighting strategy to defer changes to roots until all child elements are valid.</span></span> <span data-ttu-id="67f8b-3608">에 호출 해야 <xref:System.Windows.UIElement.UpdateLayout%2A> 업데이트 된 크기 및 위치를 반드시 필요한 하 고 사용자가 제어 하며 있는 수에 영향을 레이아웃 하는 속성을 모든 변경이 완료 되었음을 확인 한 후에 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3608">You should only call <xref:System.Windows.UIElement.UpdateLayout%2A> if you absolutely need updated sizes and positions, and only after you are certain that all changes to properties that you control and that may affect layout are completed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Visibility">
      <MemberSignature Language="C#" Value="public System.Windows.Visibility Visibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Visibility Visibility" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Visibility" />
      <MemberSignature Language="VB.NET" Value="Public Property Visibility As Visibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Visibility Visibility { System::Windows::Visibility get(); void set(System::Windows::Visibility value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Visibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3609">이 요소의 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 표시 여부를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3609">Gets or sets the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] visibility of this element.</span>
          </span>
          <span data-ttu-id="67f8b-3610">이 속성은 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3610">This is a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="67f8b-3611">열거형 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3611">A value of the enumeration.</span>
          </span>
          <span data-ttu-id="67f8b-3612">기본값은 <see cref="F:System.Windows.Visibility.Visible" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3612">The default value is <see cref="F:System.Windows.Visibility.Visible" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67f8b-3613">이 속성의 값에 영향을 줍니다 <xref:System.Windows.UIElement.IsVisible%2A>를 차례로 발생 시킬 수는 <xref:System.Windows.UIElement.IsVisibleChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3613">Setting this property affects the value of <xref:System.Windows.UIElement.IsVisible%2A>, which in turn may raise the <xref:System.Windows.UIElement.IsVisibleChanged> event.</span></span> <span data-ttu-id="67f8b-3614">그러나 <xref:System.Windows.UIElement.IsVisible%2A> 를 포함 하는 부모 항목의 표시 유형 설정 예를 들어, 영향을 주는 다른 요소에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3614">However, <xref:System.Windows.UIElement.IsVisible%2A> has other factors that influence it, for instance the visibility settings of parents that contain it.</span></span>  
  
 <span data-ttu-id="67f8b-3615">요소 위치 <xref:System.Windows.UIElement.Visibility%2A> 않습니다 <xref:System.Windows.Visibility.Visible> 입력 이벤트 (또는 명령)에 참여 하지 않습니다, 레이아웃의 측정 또는 정렬 전달에 영향을 주지 않는, 탭 순서에 없는 및 적중 테스트에 보고 되지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3615">Elements where <xref:System.Windows.UIElement.Visibility%2A> is not <xref:System.Windows.Visibility.Visible> do not participate in input events (or commands), do not influence either the Measure or Arrange passes of layout, are not in a tab sequence, and will not be reported in hit testing.</span></span>  
  
 <span data-ttu-id="67f8b-3616">상속 되는 경우 <xref:System.Windows.Window> 또는 해당 파생된 클래스 <xref:System.Windows.Window> 되려면이 속성의 기본값을 재정의 <xref:System.Windows.Visibility.Collapsed>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3616">When inherited by <xref:System.Windows.Window> or its derived classes, <xref:System.Windows.Window> redefines the default value of this property to be <xref:System.Windows.Visibility.Collapsed>.</span></span> <span data-ttu-id="67f8b-3617">이 실행 되 고 있지 레이아웃의 측정 단계는 처음에 만든의 효과가 <xref:System.Windows.Window>, 및 <xref:System.Windows.UIElement.RenderSize%2A> (0, 0)를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3617">This has the effect of not running the Measure pass of layout on an initially created <xref:System.Windows.Window>, and <xref:System.Windows.UIElement.RenderSize%2A> returns (0,0).</span></span> <span data-ttu-id="67f8b-3618">자세한 내용은 <xref:System.Windows.Window>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3618">For details, see <xref:System.Windows.Window>.</span></span> <span data-ttu-id="67f8b-3619"><xref:System.Windows.Controls.Primitives.Popup> 또한 되도록 기본값을 재정의 <xref:System.Windows.Visibility.Collapsed>에 대 한 유사한 결과 동작 <xref:System.Windows.Controls.Primitives.Popup> 와 해당 파생된 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3619"><xref:System.Windows.Controls.Primitives.Popup> also redefines the default value to be <xref:System.Windows.Visibility.Collapsed>, with similar resulting behavior for <xref:System.Windows.Controls.Primitives.Popup> and its derived classes.</span></span>  
  
<a name="dependencyPropertyInfo_Visibility"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="67f8b-3620">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="67f8b-3620">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="67f8b-3621">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="67f8b-3621">Identifier field</span></span>|<xref:System.Windows.UIElement.VisibilityProperty>|  
|<span data-ttu-id="67f8b-3622">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="67f8b-3622">Metadata properties set to `true`</span></span>|<span data-ttu-id="67f8b-3623">없음</span><span class="sxs-lookup"><span data-stu-id="67f8b-3623">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="67f8b-3624">다음 예제에서는 두 개의 서로 다른 명명 된 단추는 사용자 인터페이스에는 상호 배타적인 쌍으로 사용 하는 참조 하는 처리기를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3624">The following example implements a handler that references two different named buttons that are intended to be a mutually exclusive pair in the user interface.</span></span> <span data-ttu-id="67f8b-3625">으로 설정 되어 자체 단추는 단추와 연결 된 실제 프로그램 논리를 실행 하기 전에 <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>로 설정 된 쌍의 다른 단추와 <xref:System.Windows.Visibility.Visible?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="67f8b-3625">Prior to running the actual program logic associated with the button, the button itself is set to be <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>, and the other button in the pair is set to <xref:System.Windows.Visibility.Visible?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[MediaElement_snip#UIElementVisibility](~/samples/snippets/csharp/VS_Snippets_Wpf/MediaElement_snip/CSharp/PlaybackExample.cs#uielementvisibility)]
 [!code-vb[MediaElement_snip#UIElementVisibility](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MediaElement_snip/VB/PlaybackExample.vb#uielementvisibility)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsVisible" />
        <altmember cref="T:System.Windows.Visibility" />
      </Docs>
    </Member>
    <Member MemberName="VisibilityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisibilityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisibilityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.VisibilityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisibilityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisibilityProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="67f8b-3626">
            <see cref="P:System.Windows.UIElement.Visibility" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67f8b-3626">Identifies the <see cref="P:System.Windows.UIElement.Visibility" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>