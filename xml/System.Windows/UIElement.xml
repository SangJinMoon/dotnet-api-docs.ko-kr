<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="UIElement.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9d63614a-fd48-4a83-9dc4-ea1e401b6c153108d80804c11f9fc73349a26d55755b88a3cf5f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3108d80804c11f9fc73349a26d55755b88a3cf5f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4b4804968da1dfdf71c501075a5b66957b54f2e8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/27/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.UIElement">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>는 WPF(Windows Presentation Foundation) 요소 및 기본 표시 특성을 기반으로 하여 구축되는 WPF 핵심 수준 구현에 대한 기본 클래스입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> provides a starting point for element layout characteristics, and also exposes virtual methods that derived classes can override, which can influence the layout rendering behavior of the element and its child elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 요소 레이아웃 특성 및 요소와 해당 자식 동작 요소를 렌더링 하는 레이아웃에 영향을 줄 수 있는 노출 클래스를 파생 하는 가상 메서드를 재정의할 수 있는 시작 지점을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Much of the input and focusing behavior for elements in general is also defined in the <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> class.</source>
          <target state="translated">대부분의 입력 및 포커스 동작 요소에 대 한 일반적에 정의 되어는 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>This includes the events for keyboard, mouse and stylus input, and related status properties.</source>
          <target state="translated">여기에 키보드, 마우스 및 스타일러스 입력 및 관련된 상태 속성에 대 한 이벤트 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Many of these events are routed events, and many of the input-related events have both a bubbling routing version as well as a tunneling version of the event.</source>
          <target state="translated">이러한 이벤트 중 많은 라우트된 이벤트를 되며 모두는 버블링 라우팅을 사용할 입력 관련 이벤트 중 많은 이벤트의 터널링 버전 뿐만 아니라 버전입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>These paired events are typically the events of greatest interest to control authors.</source>
          <target state="translated">이러한 쌍으로 연결 된 이벤트는 일반적으로 가장 큰 컨트롤 작성자 관심 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> also includes <ph id="ph2">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> that relate to the <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> event model, including methods that can raise specified routed events that are sourced from an element instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 또한 포함 <ph id="ph2">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> 관련 된는 <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 이벤트 모델 요소 인스턴스에서 발생 한 이벤트를 라우팅할 지정 된 발생 시킬 수 있는 메서드를 포함 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>In terms of architecture, <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> can be considered roughly equivalent to a window handle in <ph id="ph2">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> programming, or an Element in <ph id="ph3">[!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)]</ph> programming.</source>
          <target state="translated">아키텍처 측면에서 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 창 핸들 라고 간주 될 수 있습니다 <ph id="ph2">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> 프로그래밍, 또는 요소에 <ph id="ph3">[!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)]</ph> 프로그래밍 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> is a base element at the WPF core level.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> WPF 핵심 수준 기본 요소가입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>A <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> has the following capabilities that are specifically defined by the <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> class:</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 에서만 정의 하는 다음과 같은 기능이 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 클래스:</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Can render as a child element (<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> derives from <ph id="ph2">&lt;xref:System.Windows.Media.Visual&gt;</ph>, a high level graphics class)</source>
          <target state="translated">자식 요소를 렌더링할 수 있습니다 (<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 에서 파생 <ph id="ph2">&lt;xref:System.Windows.Media.Visual&gt;</ph>, 높은 수준의 graphics 클래스)</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Contains logic that is used to size and position possible child elements of a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> (when interpreted by a layout system)</source>
          <target state="translated">크기 조정 하 고 가능한 자식 요소의 위치를 지정 하는 데 사용 되는 논리를 포함 한 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> (경우에이 레이아웃 시스템에 의해 해석)</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Can respond to user input (including control of where input is getting sent to via their handling of event routing, or routing of commands)</source>
          <target state="translated">사용자 입력 (여기서 입력은 통해 전송 이벤트 라우팅 또는 명령 라우팅을 처리의 제어 포함)에 응답할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Can raise routed events that travel a route through the logical element tree</source>
          <target state="translated">논리 요소 트리를 통해 경로 이동 하는 라우트된 이벤트를 발생 시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Supports some aspects of the animation system</source>
          <target state="translated">애니메이션 시스템의 일부 측면을 지원합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> is the WPF framework-level implementation class that builds on <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>, and adds specific interactions with the WPF framework level.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 기반으로 하는 WPF 프레임 워크 수준 구현 클래스 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>, 추가 된 WPF 프레임 워크 수준의 특정 상호 작용 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> adds and defines the following capabilities:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 추가 하 고 다음과 같은 기능을 정의 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Additional framework-specific layout characteristics</source>
          <target state="translated">추가 프레임 워크별 레이아웃 특성</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Support for richer metadata reporting on properties</source>
          <target state="translated">다양 한 메타 데이터 속성에 대 한 보고에 대 한 지원</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Class-specific implementation of certain input base classes and their attached properties or attached events</source>
          <target state="translated">특정 클래스 관련 구현 입력 기본 클래스와 연결 된 속성 또는 연결 된 이벤트</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Style support</source>
          <target state="translated">스타일 지원</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Further animation support</source>
          <target state="translated">추가 애니메이션 지원</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Another related class is <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">클래스는 관련 된 다른 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> class implements many of the same members as does <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>; the difference between these two classes has to do with their intended place in the overall content model.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 클래스는 대부분의 동일한 멤버를 구현 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>; 수행의 의도 된 전체 콘텐츠 모델에 저장 하려면이 두 클래스 간의 차이점에 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>A <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> derived class typically defines a relatively rigid content model, meaning that there are restrictions on what elements may be child elements in markup.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 파생된 클래스는 일반적으로 요소 태그의 자식 요소 수에 제한이 즉 상대적으로 고정 된 관계로 콘텐츠 모델을 정의 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>There might be capacity for taking less restrictive child content in a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>, but that capacity is typically centralized in designated content properties.</source>
          <target state="translated">덜 제한적인 자식 콘텐츠를 가져오는 기능이 있을 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>지정 된 콘텐츠 속성에서 용량 한 곳에서 일반적으로 없지만 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>A <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> derived class is typically not as restrictive about content, to support scenarios such as flow-format documents.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 일반적으로 파생된 클래스는 형식 흐름 문서와 같은 시나리오를 지원 하기 위해 내용에 대 한 제한 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> state affects all input handling by that element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> 상태는 해당 요소가 처리 하는 모든 입력에 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Elements that are not visible do not participate in hit testing and do not receive input events, even if the mouse is over the bounds where the element would be if were visible.</source>
          <target state="translated">표시 되지 않는 요소 적중 횟수 테스트에 참여 하지 않는 및 마우스가 경계 요소 수 없는 경우에 입력된 이벤트를 수신 하지 않는 경우 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.#ctor">
          <source>Creating a new instance that is actually of type <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> is uncommon in application code, because <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> is a base element.</source>
          <target state="translated">형식이 실제로 새 인스턴스를 만드는 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 가 응용 프로그램 코드에서 일반적으로 하기 때문에 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 기본 요소입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.#ctor">
          <source>See <bpt id="p1">[</bpt>Base Elements Overview<ept id="p1">](~/docs/framework/wpf/advanced/base-elements-overview.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>요소 개요 기본<ept id="p1">](~/docs/framework/wpf/advanced/base-elements-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="T:System.Windows.UIElement">
          <source>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</source>
          <target state="translated">지정된 라우트된 이벤트에 대해 라우트된 이벤트 처리기를 추가하여 해당 처리기를 현재 요소의 처리기 컬렉션에 추가합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>An identifier for the routed event to be handled.</source>
          <target state="translated">처리할 라우트된 이벤트의 식별자입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>A reference to the handler implementation.</source>
          <target state="translated">처리기 구현에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</source>
          <target state="translated">지정된 라우트된 이벤트에 대해 라우트된 이벤트 처리기를 추가하여 해당 처리기를 현재 요소의 처리기 컬렉션에 추가합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>You can add the same handler for the same event multiple times without raising an exception.</source>
          <target state="translated">예외가 발생 하지 않고 동일한 이벤트에 대 한 동일한 처리기를 여러 번 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>However, the handler is actually invoked multiple times when the event is handled.</source>
          <target state="translated">그러나 처리기는 실제로 이벤트를 처리 하는 여러 번 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</source>
          <target state="translated">따라서이 동작은 처리기 구현에 대해 계산 해야 하는 의도 하지 않은 있습니다 어떻게 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>You typically use this method to provide the implementation of the "add" accessor for the <ph id="ph1">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> event access pattern of a custom routed event.</source>
          <target state="translated">"추가" 접근자에 대 한 구현을 제공 하기 위해 일반적으로이 방법을 사용 하면는 <ph id="ph1">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> 사용자 지정 된 라우트된 이벤트의 이벤트 액세스 패턴입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>An identifier for the routed event to be handled.</source>
          <target state="translated">처리할 라우트된 이벤트의 식별자입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>A reference to the handler implementation.</source>
          <target state="translated">처리기 구현에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to register the handler such that it is invoked even when  the routed event is marked handled in its event data; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.</source>
          <target state="translated">라우트된 이벤트가 해당 이벤트 데이터에서 처리된 것으로 표시된 경우에도 처리기를 호출하도록 등록하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 라우트된 이벤트가 이미 처리된 것으로 표시된 경우 처리기를 호출하지 않는 기본 조건으로 등록하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Do not routinely ask to rehandle a routed event.</source>
          <target state="translated">라우트된 이벤트를 다시 처리하도록 자주 요청하지 마세요.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</source>
          <target state="translated">지정된 라우트된 이벤트에 대해 라우트된 이벤트 처리기를 추가하여 해당 처리기를 현재 요소의 처리기 컬렉션에 추가합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Specify <ph id="ph1">&lt;paramref name="handledEventsToo" /&gt;</ph> as <ph id="ph2">&lt;see langword="true" /&gt;</ph> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.</source>
          <target state="translated">이벤트 경로를 따라 다른 요소에서 처리된 것으로 이미 표시된 라우트된 이벤트에 대해 제공된 처리기를 호출하기 위해 <ph id="ph1">&lt;paramref name="handledEventsToo" /&gt;</ph>를 <ph id="ph2">&lt;see langword="true" /&gt;</ph>로 지정합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Processing low-level input events in a practical way is a complex task.</source>
          <target state="translated">효율적으로 낮은 수준의 입력된 이벤트를 처리 하는 것은 복잡 한 작업입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event.</source>
          <target state="translated">특정 이벤트를 처리 하는 것으로 표시 되 고 다른 보다 직관적인 이벤트에 의해 대체 됩니다 있는 동작을 구현 하는 많은 컨트롤입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Generally, a control will only mark a platform input event as handled if there is some design intention for doing so.</source>
          <target state="translated">일반적으로 컨트롤은 처리 되므로 이렇게 하는 것에 대 한 디자인을 하는 경우 플랫폼 입력된 이벤트를 표시만 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>In certain scenarios, those design intentions might not be what your particular handling of the input event requires.</source>
          <target state="translated">특정 시나리오에서 이러한 디자인 의도 하지 못할 입력된 이벤트의 특정 처리에 필요한 사항입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>It is for these scenarios that registering handlers with <ph id="ph1">`handledEventsToo`</ph> as <ph id="ph2">`true`</ph> is appropriate.</source>
          <target state="translated">등록 하 이러한 시나리오는 사용 하 여 처리기 <ph id="ph1">`handledEventsToo`</ph> 으로 <ph id="ph2">`true`</ph> 적합 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>But you should not do this routinely.</source>
          <target state="translated">하지만 수행 해야이 정기적으로.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Invoking handlers in response to all events even if handled will complicate your own application event processing logic.</source>
          <target state="translated">처리 하는 경우에 모든 이벤트에 대 한 응답으로 처리기를 호출 하지 처리 논리가 응용 프로그램 이벤트 복잡 하 게 됩니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>You may see a decrease in performance if the handler logic is substantial.</source>
          <target state="translated">처리기 논리는 많은 경우 성능이 저하를 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.</source>
          <target state="translated">여기서 특정 컨트롤이 응용 프로그램 논리를 처리 하려면 이벤트를 처리 하는 개발 프로세스 중 이미 검색 한 경우 이미 처리 된 이벤트에 대 한 처리기를 연결의 사용을 예약 해야 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative.</source>
          <target state="translated">클래스를 특정 이벤트 제어 조합의 처리를 방지 하기 위한 또 다른 방법은 해당 이벤트의 대체 미리 보기를 사용 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>For example, if <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> is marked handled by class handling, you might be able to add handlers for <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> instead.</source>
          <target state="translated">예를 들어 경우 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> 처리 됨으로 표시 클래스 처리에 의해 수 있습니다에 대 한 처리기를 추가 하려면 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> 대신 합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>You can add the same handler for the same event multiple times without raising an exception.</source>
          <target state="translated">예외가 발생 하지 않고 동일한 이벤트에 대 한 동일한 처리기를 여러 번 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>However, the handler is actually invoked multiple times when the event is handled.</source>
          <target state="translated">그러나 처리기는 실제로 이벤트를 처리 하는 여러 번 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</source>
          <target state="translated">따라서이 동작은 처리기 구현에 대해 계산 해야 하는 의도 하지 않은 있습니다 어떻게 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>You typically use this method to provide the implementation of the "add" accessor for the <ph id="ph1">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> event access pattern of a custom routed event.</source>
          <target state="translated">"추가" 접근자에 대 한 구현을 제공 하기 위해 일반적으로이 방법을 사용 하면는 <ph id="ph1">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> 사용자 지정 된 라우트된 이벤트의 이벤트 액세스 패턴입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>The following example implements a handler invoked on the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> event on a page that attaches a defined handler to one of the named elements on the page using <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
          <target state="translated">다음 예제에서는 구현에서 호출 된 처리기는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> 페이지에서 사용 하 여 페이지에서 명명 된 요소 중 하나에 정의 된 처리기를 연결 하는 이벤트 <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>This handler would be invoked even if another element along the route marked the shared event data as handled before reaching the handling element in the route.</source>
          <target state="translated">경로 따라 다른 요소는 경로에서 처리 요소에 도달 하기 전에 처리 되므로 공유 이벤트 데이터를 표시 하는 경우에이 처리기를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>The event route that handlers are added to.</source>
          <target state="translated">처리기가 추가되는 이벤트 경로입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>The event data that is used to add the handlers.</source>
          <target state="translated">처리기를 추가하는 데 사용되는 이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>This method uses the <ph id="ph1">&lt;see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /&gt;</ph> property of the event data to create the handlers.</source>
          <target state="translated">이 메서드는 이벤트 데이터의 <ph id="ph1">&lt;see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /&gt;</ph> 속성을 사용하여 처리기를 만듭니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>Adds handlers to the specified <ph id="ph1">&lt;see cref="T:System.Windows.EventRoute" /&gt;</ph> for the current <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> event handler collection.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Windows.EventRoute" /&gt;</ph> 이벤트 처리기 컬렉션에 대해 지정된 <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>에 처리기를 추가합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>This method can be used by content host elements (either those that implement <ph id="ph1">&lt;xref:System.Windows.IContentHost&gt;</ph> or those that don't) to add handlers for child elements to the <ph id="ph2">&lt;xref:System.Windows.EventRoute&gt;</ph>.</source>
          <target state="translated">이 메서드는 콘텐츠 호스트 요소에서 사용할 수 있습니다 (구현 하는 <ph id="ph1">&lt;xref:System.Windows.IContentHost&gt;</ph> 또는 하지 않는) 자식 요소에 대 한 처리기를 추가 하는 <ph id="ph2">&lt;xref:System.Windows.EventRoute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>Ordinarily, this is not required for <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>, because handlers are automatically added for all elements found in a completed logical tree.</source>
          <target state="translated">일반적으로이 필요 하지 않습니다 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>하므로 처리기에 완료 된 논리적 트리에서 모든 요소에 대 한 자동으로 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>However, in some cases where <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> are mixed in templated trees, intervening elements that came from the template need to be added to a route.</source>
          <target state="translated">그러나 경우에 따라 여기서 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 혼합 되어 있는 템플릿 경로에 추가할 필요가 서식 파일에서 생성 된 중간 요소 트리에 있습니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>Both <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> support a version of this method.</source>
          <target state="translated">둘 다 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이 메서드의 버전을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.AllowDrop">
          <source>Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.</source>
          <target state="translated">이 요소를 끌어서 놓기 작업의 대상으로 사용할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.AllowDrop">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element can be used as the target of a drag-and-drop operation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 요소를 끌어서 놓기 작업의 대상으로 사용할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>The default value is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <ph id="ph1">&lt;xref:System.Windows.UIElement.AllowDrop%2A&gt;</ph> to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">끌어서 놓기 작업이 기본적으로 활성화 되지 않으며 설정 하 여 의도적으로 사용할 수 있어야 합니다 <ph id="ph1">&lt;xref:System.Windows.UIElement.AllowDrop%2A&gt;</ph> 를 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> or any other base element class.</source>
          <target state="translated">이 기본 설정을 제외 끌어서 놓기 동작 구현 특정은 전적으로 및에서 정의 되지 않은 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 또는 기타 요소 기본 클래스입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>Certain controls, for example, <ph id="ph1">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph>, do have a default behavior.</source>
          <target state="translated">예를 들어 특정 컨트롤을 <ph id="ph1">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph>, 기본 동작이 수행 됩니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>For more information on drag and drop, see <bpt id="p1">[</bpt>Drag and Drop Overview<ept id="p1">](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)</ept>.</source>
          <target state="translated">끌어서 놓기에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>놓기<ept id="p1">](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> overrides the metadata for this dependency property in its implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 구현에서이 종속성 속성에 대 한 메타 데이터를 재정의합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>Specifically, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> designates this property to allow property value inheritance (<ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph> is <ph id="ph3">`true`</ph> in metadata).</source>
          <target state="translated">특히, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 속성 값 상속을 허용 하려면이 속성을 지정 (<ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph> 은 <ph id="ph3">`true`</ph> 메타 데이터에).</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>Property value inheritance in this context means that if there are child elements with no other value for <ph id="ph1">&lt;xref:System.Windows.UIElement.AllowDrop%2A&gt;</ph> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from the parent element will be assigned to all previously unassigned child elements by the property system.</source>
          <target state="translated">이 컨텍스트에서 속성 값을 상속 하는 경우에 대 한 다른 값이 없는 자식 요소가 <ph id="ph1">&lt;xref:System.Windows.UIElement.AllowDrop%2A&gt;</ph> 로컬 값 또는 스타일을이 값이 할당 된 (다시, 스타일, 기본적으로 가장 가까운 부모 요소의 값을 통해 할당 값 또는 로컬 값) 부모 요소의 값은 속성 시스템에서 모든 자식 요소에 할당 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>In practice this means that you can specify whether to allow drop operations at the root element, and that value will propagate to all child elements that have not specifically assigned it as <ph id="ph1">`false`</ph>.</source>
          <target state="translated">실제로 즉, 루트 요소에서 놓기 작업을 허용할지 여부를 지정할 수로 할당 값은 특히 하지 않은 모든 자식 요소로 전파 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>The following markup example sets the <ph id="ph1">&lt;xref:System.Windows.UIElement.AllowDrop%2A&gt;</ph> property <ph id="ph2">`true`</ph> using an attribute on a <ph id="ph3">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>, as well as setting some other related properties that in aggregate enable that <ph id="ph4">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> to be the target of a multiline text data object when it is dragged in.</source>
          <target state="translated">다음 예제에서는 태그는 <ph id="ph1">&lt;xref:System.Windows.UIElement.AllowDrop%2A&gt;</ph> 속성 <ph id="ph2">`true`</ph> 에 특성을 사용 하는 <ph id="ph3">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>뿐만 아니라 수 있는 속성을 집계에서 하는 관련 된 다른 설정 <ph id="ph4">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> 여러 줄 텍스트 데이터 개체의 대상이 될 때 드래그 합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>For the complete sample, see <bpt id="p1">[</bpt>Load a Dropped File Sample<ept id="p1">](http://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7)</ept>.</source>
          <target state="translated">전체 샘플을 참조 하십시오. <bpt id="p1">[</bpt>삭제 파일 샘플 로드<ept id="p1">](http://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.AllowDropProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.AllowDrop" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.AllowDrop" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="T:System.Windows.UIElement">
          <source>Applies an animation to a specified dependency property on this element.</source>
          <target state="translated">이 요소의 지정된 종속성 속성에 애니메이션을 적용합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>This method is sealed and cannot be overridden.</source>
          <target state="translated">이 메서드는 봉인되어 있으며 재정의할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>The identifier for the property to animate.</source>
          <target state="translated">애니메이션 효과를 줄 속성의 식별자입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>The animation clock that controls and declares the animation.</source>
          <target state="translated">애니메이션을 제어하고 선언하는 애니메이션 클록입니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>Applies an animation to a specified dependency property on this element.</source>
          <target state="translated">이 요소의 지정된 종속성 속성에 애니메이션을 적용합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>Any existing animations are stopped and replaced with the new animation.</source>
          <target state="translated">모든 기존 애니메이션이 중지되고 새 애니메이션으로 대체됩니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>To remove an animation from a property, specify the identifier for that property as <ph id="ph1">`dp`</ph> and specify <ph id="ph2">`clock`</ph> as <ph id="ph3">`null`</ph>.</source>
          <target state="translated">애니메이션에서 속성을 제거 하려면 해당 속성에 대 한 식별자를 지정 <ph id="ph1">`dp`</ph> 지정 <ph id="ph2">`clock`</ph> 으로 <ph id="ph3">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>This removes the animation and the animated property is set to its base value.</source>
          <target state="translated">애니메이션 제거한 속성 기준 값으로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>However, the originally associated animation clock is not stopped.</source>
          <target state="translated">그러나 원래 연결된 애니메이션 클록 중지 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>Any other animations assigned to that clock will continue to run.</source>
          <target state="translated">모든 애니메이션 클록 해당에 할당 된 계속 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>In the following example, a <ph id="ph1">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> <ph id="ph2">`myAnimatedRectangle`</ph> has a particular timing animation applied to it by calling <ph id="ph3">&lt;xref:System.Windows.UIElement.ApplyAnimationClock%2A&gt;</ph> .</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> <ph id="ph2">`myAnimatedRectangle`</ph> 에 호출 하 여 적용할 특정 타이밍 애니메이션이 <ph id="ph3">&lt;xref:System.Windows.UIElement.ApplyAnimationClock%2A&gt;</ph> 합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The property to animate.</source>
          <target state="translated">애니메이션 효과를 주는 속성입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The animation clock that controls and declares the animation.</source>
          <target state="translated">애니메이션을 제어하고 선언하는 애니메이션 클록입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>A value of the enumeration.</source>
          <target state="translated">열거형 값입니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /&gt;</ph>, which will stop any existing animation and replace with the new one.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /&gt;</ph>이며 이는 모든 기존 애니메이션을 중지하고 새 애니메이션으로 대체합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.</source>
          <target state="translated">속성에 이미 실행되는 애니메이션이 있는 경우 어떤 일이 발생할지를 지정하는 기능과 함께 이 요소의 지정된 종속성 속성에 애니메이션을 적용합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>To remove an animation from a property, specify the identifier for that property as <ph id="ph1">`dp`</ph> and specify <ph id="ph2">`clock`</ph> as <ph id="ph3">`null`</ph>.</source>
          <target state="translated">애니메이션에서 속성을 제거 하려면 해당 속성에 대 한 식별자를 지정 <ph id="ph1">`dp`</ph> 지정 <ph id="ph2">`clock`</ph> 으로 <ph id="ph3">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>This removes the animation and the animated property is set to its base value.</source>
          <target state="translated">애니메이션 제거한 속성 기준 값으로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>However, the originally associated animation clock is not stopped.</source>
          <target state="translated">그러나 원래 연결된 애니메이션 클록 중지 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Any other animations assigned to that clock will continue to run.</source>
          <target state="translated">모든 애니메이션 클록 해당에 할당 된 계속 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.AreAnyTouchesCaptured">
          <source>Gets a value that indicates whether at least one touch is captured to this element.</source>
          <target state="translated">하나 이상의 터치가 이 요소에 캡처되는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AreAnyTouchesCaptured">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if at least one touch is captured to this element; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">하나 이상의 터치가 이 요소에 캡처되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.AreAnyTouchesCapturedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin">
          <source>Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</source>
          <target state="translated">하나 이상의 터치가 이 요소나 시각적 트리의 임의 자식 요소에 캡처되는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if at least one touch is captured to this element or any child elements in its visual tree; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">하나 이상의 터치가 이 요소나 시각적 트리의 임의 자식 요소에 캡처되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver">
          <source>Gets a value that indicates whether at least one touch is pressed over this element.</source>
          <target state="translated">이 요소 위에서 하나 이상의 터치를 눌렀는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if at least one touch is pressed over this element; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 요소 위에서 하나 이상의 터치를 눌렀으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.AreAnyTouchesOver">
          <source>Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.</source>
          <target state="translated">이 요소나 시각적 트리의 임의 자식 요소 위에서 하나 이상의 터치를 눌렀는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AreAnyTouchesOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 요소나 시각적 트리의 임의 자식 요소 위에서 하나 이상의 터치를 눌렀으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.AreAnyTouchesOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>The final size that the parent computes for the child element, provided as a <ph id="ph1">&lt;see cref="T:System.Windows.Rect" /&gt;</ph> instance.</source>
          <target state="translated">부모가 자식 요소에 대해 계산하는 최종 크기로, <ph id="ph1">&lt;see cref="T:System.Windows.Rect" /&gt;</ph> 인스턴스로 제공됩니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Positions child elements and determines a size for a <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>.</source>
          <target state="translated">자식 요소를 배치하고 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>에 대한 크기를 결정합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Parent elements call this method from their <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /&gt;</ph> implementation (or a WPF framework-level equivalent) to form a recursive layout update.</source>
          <target state="translated">부모 요소는 재귀적 레이아웃 업데이트를 구성하기 위해 해당 <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /&gt;</ph> 구현(또는 WPF 프레임워크 수준)에서 이 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>This method constitutes the second pass of a layout update.</source>
          <target state="translated">이 메서드는 레이아웃 업데이트의 두 번째 단계를 구성합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>For WPF framework-level element deriving scenarios, behavior for <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> should not (and cannot, unless you shadow) be changed.</source>
          <target state="translated">WPF 프레임 워크 수준 요소를 파생 시키는 경우에 대 한 동작에 대 한 <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> 하지 않아야 합니다 (및 숨기는 경우가 아니면 수 없습니다) 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Instead, you should override the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph> implementation in your class.</source>
          <target state="translated">대신,를 재정의 해야 하는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph> 클래스에서 구현 합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Your <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph> implementation is called internally by <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> as part of default WPF framework-level layout operations.</source>
          <target state="translated">프로그램 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph> 구현에서 내부적으로 호출 됩니다 <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> 기본 WPF 프레임 워크 수준 레이아웃 작업의 일환으로 합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Your <ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> implementation should also call <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph> on each child element, if it has child elements.</source>
          <target state="translated">프로그램 <ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> 구현도 호출 해야 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph> 자식 요소가 있는 경우 각 자식 요소에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>For WPF core-level element deriving scenarios, the behavior for <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> should not (and cannot, unless you shadow) be changed.</source>
          <target state="translated">WPF 핵심 수준 요소를 파생 시키는 경우에 대 한 동작에 대 한 <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> 하지 않아야 합니다 (및 숨기는 경우가 아니면 수 없습니다) 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Instead, you should override <ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> in your class.</source>
          <target state="translated">대신, 재정의 해야 하는 <ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> 클래스에 있습니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Your <ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> implementation is called internally by <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> as part of default WPF framework-level layout operations.</source>
          <target state="translated">프로그램 <ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> 구현에서 내부적으로 호출 됩니다 <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> 기본 WPF 프레임 워크 수준 레이아웃 작업의 일환으로 합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>However, this assumes you are using WPF framework-level layout and its layout system, which is often not the case if you are specifically deriving elements at the WPF core-level from the <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> base element class.</source>
          <target state="translated">그러나 WPF 프레임 워크 수준 레이아웃 및 종종 되지 않는 경우 WPF 핵심 수준에서에 있는 요소를 파생 하는 경우 해당 레이아웃 시스템을 사용 하 여 가정이 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 기본 요소 클래스입니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Your <ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> implementation should also call <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> on each child element, if it has child elements.</source>
          <target state="translated">프로그램 <ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> 구현도 호출 해야 <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> 자식 요소가 있는 경우 각 자식 요소에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Note that the WPF core-level scenario implies that you are not using a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class, because <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> seals <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ArrangeCore%2A&gt;</ph>.</source>
          <target state="translated">WPF 핵심 수준 시나리오는 사용 하지 않는 의미 하는 참고는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 파생 클래스를 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 봉인 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ArrangeCore%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Computation of WPF framework-level layout positioning in <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> consists of a <ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call and an <ph id="ph3">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call.</source>
          <target state="translated">WPF 프레임 워크 수준 레이아웃 위치 계산 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 이루어져는 <ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> 호출 및 <ph id="ph3">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> 호출 합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>During the <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call, the layout system determines an element's size requirements using a provided <ph id="ph2">&lt;xref:System.Windows.Size&gt;</ph> (<ph id="ph3">`availableSize`</ph>) argument.</source>
          <target state="translated">중에서 <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> 호출 레이아웃 시스템에서 요소의 크기 요구 사항을 사용 하 여 제공 된 확인 <ph id="ph2">&lt;xref:System.Windows.Size&gt;</ph> (<ph id="ph3">`availableSize`</ph>) 인수입니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>During the <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call, the layout system finalizes the size and position of an element's bounding box.</source>
          <target state="translated">동안는 <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> 호출, 레이아웃 시스템 크기를 종료 하 고 경계 상자는 요소의 위치를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>For more information, see <bpt id="p1">[</bpt>Layout<ept id="p1">](~/docs/framework/wpf/advanced/layout.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>레이아웃<ept id="p1">](~/docs/framework/wpf/advanced/layout.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source><ph id="ph1">`availableSize`</ph> can be any number from zero to infinity.</source>
          <target state="translated"><ph id="ph1">`availableSize`</ph> 0 ~ 무한대에서에서 숫자를 수 있습니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Elements to be laid out return the minimum <ph id="ph1">&lt;xref:System.Windows.Size&gt;</ph> they require through the <ph id="ph2">`availableSize`</ph> parameter.</source>
          <target state="translated">요소 레이아웃을 지정할 त स ग <ph id="ph1">&lt;xref:System.Windows.Size&gt;</ph> 통해 필요로 하는 <ph id="ph2">`availableSize`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>When a layout is first instantiated, it always receives a <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call before <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>.</source>
          <target state="translated">레이아웃이 처음 인스턴스화 항상 받습니다는 <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> 하기 전에 호출 <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>However, after the first layout pass, it may receive an <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call without a <ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>; this can happen when a property that affects only <ph id="ph3">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> is changed (such as alignment), or when the parent receives an <ph id="ph4">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> without a <ph id="ph5">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>.</source>
          <target state="translated">그러나 첫 번째 레이아웃 단계 후를 받을 수는 <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> 하지 않고 호출는 <ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>;이 경우에 영향을 주는 속성에 발생할 수 <ph id="ph3">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> (예: 맞춤), 변경 또는 부모를 받을 때는 <ph id="ph4">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> 는 없이<ph id="ph5">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>A <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call will automatically invalidate an <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> 호출 자동으로 무효화 됩니다는 <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> 호출 합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Layout updates generally occur asynchronously (at a time determined by the layout system).</source>
          <target state="translated">레이아웃 업데이트 비동기적으로 (한 번에 레이아웃 시스템에 의해 결정) 일반적으로 발생 합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>An element might not immediately reflect changes to properties that affect element sizing (such as <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>).</source>
          <target state="translated">요소 속성 요소 크기 조정에 영향을 주는 변경 내용은 즉시 반영 하지는 않습니다 (예: <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Layout updates can be forced by using the <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> method; however, calling this function is not recommended, as it is usually unnecessary and can cause poor performance.</source>
          <target state="translated">레이아웃 업데이트를 사용 하 여 사용할 수는 <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> 메서드도 있습니다; 그러나이 함수를 호출 하므로 권장 하지 않습니다은 일반적으로 필요 하 고 성능이 저하 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>In many situations where calling <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> might be appropriate, the layout system will probably already be processing updates.</source>
          <target state="translated">대부분의 경우에서를 호출 하는 <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> 적절 한 있을 수 있으며,이 레이아웃 시스템 업데이트 처리 아마 이미 있을 것입니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>The layout system can process layout changes in a manner that can optimize all necessary updates as part of a package.</source>
          <target state="translated">이 레이아웃 시스템에 필요한 모든 업데이트 패키지의 일부로 최적화할 수 있는 방식으로 레이아웃 변경 내용을 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>The layout system keeps two separate queues of invalid layouts, one for <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> and one for <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>.</source>
          <target state="translated">이 레이아웃 시스템은 두 개의 별도 큐에 대 한 잘못 된 레이아웃의 유지 <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> 되 고 다른 하나 <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>The layout queue is sorted based upon the order of elements in the visual tree.</source>
          <target state="translated">레이아웃 큐는 시각적 트리에 있는 요소의 순서에 따라 정렬 됩니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Elements higher in the tree are at the top of the queue, in order to avoid redundant layouts caused by repeated changes in parents.</source>
          <target state="translated">요소 트리에서 상위 부모 항목에 반복 해 서 변경 내용이 레이아웃이 중복을 방지 하기 위해 큐, 위쪽에서는입니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already valid.</source>
          <target state="translated">중복 된 항목은 큐에서 자동으로 제거 및 요소가 이미 잘못 된 경우 자동으로 큐에서 제거 됩니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>When updating layout, the <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> queue is emptied first, followed by the <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> queue.</source>
          <target state="translated">레이아웃을 업데이트할 때는 <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> 큐를 비울 먼저 옵니다는 <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> 큐입니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>An element in the <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> queue will never be arranged if there is an element in the <ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> queue.</source>
          <target state="translated">요소는 <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> 큐에 요소가 없을 경우 정렬 되지 됩니다는 <ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> 큐입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)">
          <source>The final area within the parent that element should use to arrange itself and its child elements.</source>
          <target state="translated">요소가 자신과 자식을 정렬하는 데 사용해야 하는 부모 내의 마지막 영역입니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)">
          <source>Defines the template for WPF core-level arrange layout definition.</source>
          <target state="translated">WPF 핵심 수준 정렬 레이아웃 정의에 대한 서식 파일을 정의합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)">
          <source>Overriding this method is only appropriate if you are deriving at the WPF core-level, and you are not using the WPF framework-level layout system and <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class, because <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> seals <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ArrangeCore%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 재정의 하는 적절 한 경우에 WPF 핵심 수준에서 파생 하 고 WPF 프레임 워크 수준 레이아웃 시스템을 사용 하지 않는 및 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 파생 클래스를 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 봉인 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ArrangeCore%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)">
          <source>If you are using the WPF framework-level layout system, the appropriate method to override for class-specific layout arrange behavior is <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>.</source>
          <target state="translated">레이아웃의 클래스 관련 재정의를 적절 한 방법을 정렬 동작을 WPF 프레임 워크 수준 레이아웃 시스템을 사용 하는 경우 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> implementations should call the base implementation to return a size, then call the <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> method of each visible child element, and reconcile the sizes returned by these <ph id="ph3">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> calls with the size of the base implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> 구현에는 크기를 반환 하는 기본 구현을 호출 해야 다음 호출는 <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> 각 시각적 자식 요소의 이러한에서 반환 된 크기를 조정 하 고 <ph id="ph3">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> 기본 구현의 크기를 사용 하 여 호출 합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)">
          <source>The logic for the reconciliation aspect of a <ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> implementation might vary, depending on the layout characteristics of your element.</source>
          <target state="translated">조정 부분에 대 한 논리는 <ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> 구현 프로그램 요소의 레이아웃 특성에 따라 달라질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)">
          <source>In the following example template, <ph id="ph1">`VisualChildren`</ph> is a hypothetical property that your element might define to help enumerate its content; <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> does not define content collections at this level, the WPF framework-level architecture defers content behavior to derived elements such as specific controls or control base classes.</source>
          <target state="translated">다음 예제에서는 서식 파일에서 <ph id="ph1">`VisualChildren`</ph> 요소는 해당 콘텐츠를 열거할 수 있도록 정의할 수 있습니다 하는 가상 속성 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 콘텐츠 컬렉션을 정의 하지 않습니다 WPF 프레임 워크 수준 아키텍처를이 수준에서는 특정 컨트롤 또는 컨트롤의 기본 클래스 등의 파생 된 요소에 콘텐츠 동작을 지연 합니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)">
          <source>If you are developing elements at the WPF core level,you should override this method to give your WPF core-level element a unique arrange layout behavior, or to make proper layout decisions about the child elements of your elements.</source>
          <target state="translated">이 재정의 해야 WPF 핵심 수준에 있는 요소를 개발 하는 경우 메서드는 고유한 WPF 핵심 수준 요소를 정렬 레이아웃 동작 또는 요소가 자식 요소에 대 한 결정 사항을 적절 한 레이아웃을 확인 합니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)">
          <source>An override might be necessary if those child elements are not recognizable from a defined pattern such as an <ph id="ph1">&lt;see cref="T:System.Windows.Controls.ItemCollection" /&gt;</ph>.</source>
          <target state="translated">재정의 같은 자식 요소 정의 된 패턴에서 인식 되지 않는 경우에 필요할 수 있습니다는 <ph id="ph1">&lt;see cref="T:System.Windows.Controls.ItemCollection" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)">
          <source>A parent element must call the class-specific <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /&gt;</ph> on each child element, otherwise those child elements are not rendered.</source>
          <target state="translated">부모 요소에는 클래스 관련 호출 해야 <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /&gt;</ph> 각 자식 요소에 대해 그렇지 않으면 해당 자식 요소는 렌더링 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="T:System.Windows.UIElement">
          <source>Starts an animation for a specified animated property on this element.</source>
          <target state="translated">이 요소에서 지정된 애니메이션 속성에 대한 애니메이션을 시작합니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>The property to animate, which is specified as a dependency property identifier.</source>
          <target state="translated">종속성 속성 식별자로 지정된, 애니메이션을 지정할 속성입니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>The timeline of the animation to start.</source>
          <target state="translated">시작할 애니메이션의 Timeline입니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>Starts an animation for a specified animated property on this element.</source>
          <target state="translated">이 요소에서 지정된 애니메이션 속성에 대한 애니메이션을 시작합니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</source>
          <target state="translated">속성에 애니메이션을 여부를 확인 하는 경우 note 애니메이션 시작 되 고 간주할 애니메이션이 적용 되지 않은 시작 지점 벗어난 첫 번째 프레임이 렌더링 되 면에 애니메이션 합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> for <ph id="ph2">`animation`</ph> is <ph id="ph3">`null`</ph>, then any current animations are removed and the current value of the property is held.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> 에 대 한 <ph id="ph2">`animation`</ph> 은 <ph id="ph3">`null`</ph>, 그런 다음 현재 애니메이션이 모두 제거 되 고 속성의 현재 값이 유지 됩니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>If the entire <ph id="ph1">`animation`</ph> value is <ph id="ph2">`null`</ph>, all animations are removed from the property and the property value reverts to its base value.</source>
          <target state="translated">경우 전체 <ph id="ph1">`animation`</ph> 값은 <ph id="ph2">`null`</ph>, 모든 애니메이션이 속성에서 제거 되 고 속성 값 기준 값으로 돌아갑니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>However, the originally associated animation timeline is not stopped.</source>
          <target state="translated">그러나 원래 연결된 애니메이션 타임 라인 중지 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>Any other animations assigned to that timeline will continue to run.</source>
          <target state="translated">해당 일정에 할당 된 다른 애니메이션 계속 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>The following example creates an animation, assigns it, and then calls <ph id="ph1">&lt;xref:System.Windows.UIElement.BeginAnimation%2A&gt;</ph> to start it.</source>
          <target state="translated">다음 예제는 애니메이션을 만드는 것을 할당 하 고 다음 호출 <ph id="ph1">&lt;xref:System.Windows.UIElement.BeginAnimation%2A&gt;</ph> 시작 되려고 합니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The property to animate, which is specified as the dependency property identifier.</source>
          <target state="translated">종속성 속성 식별자로 지정된, 애니메이션을 지정할 속성입니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The timeline of the animation to be applied.</source>
          <target state="translated">적용할 애니메이션의 Timeline입니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.</source>
          <target state="translated">새 애니메이션이 이미 속성 값에 영향을 주고 있는 현재(실행 중인) 애니메이션과 상호 작용하는 방법을 지정하는 열거형 값입니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.</source>
          <target state="translated">속성에 이미 실행 중인 애니메이션이 있는 경우 수행할 동작을 지정하는 옵션을 사용하여 이 요소의 지정된 애니메이션 속성에 대해 특정 애니메이션을 시작합니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</source>
          <target state="translated">속성에 애니메이션을 여부를 확인 하는 경우 note 애니메이션 시작 되 고 간주할 애니메이션이 적용 되지 않은 시작 지점 벗어난 첫 번째 프레임이 렌더링 되 면에 애니메이션 합니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> for <ph id="ph2">`animation`</ph> is <ph id="ph3">`null`</ph>, then any current animations are removed and the current value of the property is held.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> 에 대 한 <ph id="ph2">`animation`</ph> 은 <ph id="ph3">`null`</ph>, 그런 다음 현재 애니메이션이 모두 제거 되 고 속성의 현재 값이 유지 됩니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>If the entire <ph id="ph1">`animation`</ph> value is <ph id="ph2">`null`</ph>, all animations are removed from the property and the property value reverts to its base value.</source>
          <target state="translated">경우 전체 <ph id="ph1">`animation`</ph> 값은 <ph id="ph2">`null`</ph>, 모든 애니메이션이 속성에서 제거 되 고 속성 값 기준 값으로 돌아갑니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>However, the originally associated animation timeline is not stopped.</source>
          <target state="translated">그러나 원래 연결된 애니메이션 타임 라인 중지 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Any other animations assigned to that timeline will continue to run.</source>
          <target state="translated">해당 일정에 할당 된 다른 애니메이션 계속 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The following example implements a handler that obtains an existing animation from a resource and then calls <ph id="ph1">&lt;xref:System.Windows.UIElement.BeginAnimation%2A&gt;</ph> with a specified handoff behavior.</source>
          <target state="translated">가 리소스 및 호출에서 기존 애니메이션을 가져오는 처리기를 구현 하는 다음 예제에서는 <ph id="ph1">&lt;xref:System.Windows.UIElement.BeginAnimation%2A&gt;</ph> 지정된 전달 동작이 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.BitmapEffect">
          <source>Gets or sets a bitmap effect that applies directly to the rendered content for this element.</source>
          <target state="translated">이 요소의 렌더링된 콘텐츠에 직접 적용되는 비트맵 효과를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.BitmapEffect">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffect">
          <source>The bitmap effect to apply.</source>
          <target state="translated">적용할 비트맵 효과입니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffect">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;</ph> is an abstract type, therefore the <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage requires an implemented derived class of <ph id="ph3">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;</ph>, such as <ph id="ph4">&lt;xref:System.Windows.Media.Effects.OuterGlowBitmapEffect&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;</ph> 이 추상 형식이 면 따라서는 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 사용의 구현된 된 파생된 클래스가 필요 <ph id="ph3">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;</ph>와 같은 <ph id="ph4">&lt;xref:System.Windows.Media.Effects.OuterGlowBitmapEffect&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffect">
          <source>Note that one implemented derived class is a collection type that allows you to specify more than one sequential <ph id="ph1">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;</ph>, using a nested tag syntax.</source>
          <target state="translated">컬렉션 형식이 파생 된 구현 클래스 수 있도록 여러 개 지정할 순차적 <ph id="ph1">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;</ph>, 중첩된 된 태그 구문을 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffect">
          <source>No existing derived class of <ph id="ph1">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;</ph> supports a type converter, so the <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> syntax that you use for this property is generally property element syntax.</source>
          <target state="translated">기존 파생 클래스의 <ph id="ph1">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;</ph> 형식 변환기를 지원 하므로 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 이 속성에 대해 사용 하는 구문은 일반적으로 속성 요소 구문.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffect">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffect">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffect">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffect">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffect">
          <source>The following example sets a bitmap effect, using <ph id="ph1">&lt;xref:System.Windows.Media.Effects.BlurBitmapEffect&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 비트맵 효과 사용 하 여 <ph id="ph1">&lt;xref:System.Windows.Media.Effects.BlurBitmapEffect&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.BitmapEffectInput">
          <source>Gets or sets an input source for the bitmap effect that applies directly to the rendered content for this element.</source>
          <target state="translated">이 요소의 렌더링된 콘텐츠에 직접 적용되는 비트맵 효과의 입력 소스를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.BitmapEffectInput">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffectInput">
          <source>The source for bitmap effects.</source>
          <target state="translated">비트맵 효과의 원본입니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffectInput">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffectInput">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffectInput">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffectInput">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.BitmapEffectInputProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.BitmapEffectInput" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.BitmapEffectInput" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.BitmapEffectProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.BitmapEffect" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.BitmapEffect" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.CacheMode">
          <source>Gets or sets a cached representation of the <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>의 캐시된 표현을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CacheMode">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Media.CacheMode" /&gt;</ph> that holds a cached representation of the <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Media.CacheMode" /&gt;</ph>의 캐시된 표현을 보유하는 <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CacheMode">
          <source>Set the <ph id="ph1">&lt;xref:System.Windows.UIElement.CacheMode%2A&gt;</ph> property when you need to increase performance for content that is time consuming to render.</source>
          <target state="translated">설정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.CacheMode%2A&gt;</ph> 속성은 시간이 오래 걸리고 렌더링 하는 콘텐츠에 대 한 성능 향상을 위해 필요 합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CacheMode">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Windows.Media.BitmapCache&gt;</ph>.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Media.BitmapCache&gt;</ph>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.CacheModeProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.CacheMode" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.CacheMode" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.CaptureMouse">
          <source>Attempts to force capture of the mouse to this element.</source>
          <target state="translated">이 요소가 마우스를 캡처하게 합니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.CaptureMouse">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the mouse is successfully captured; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">마우스가 캡처되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureMouse">
          <source>To be captured, an element must be enabled.</source>
          <target state="translated">캡처할 수 요소를 사용할 수 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureMouse">
          <source>Check whether <ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> is <ph id="ph2">`true`</ph> before you call <ph id="ph3">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph>.</source>
          <target state="translated">확인 여부 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> 은 <ph id="ph2">`true`</ph> 호출 하기 전에 <ph id="ph3">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureMouse">
          <source>If calling <ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, then <ph id="ph3">&lt;xref:System.Windows.UIElement.IsMouseCaptured%2A&gt;</ph> is also <ph id="ph4">`true`</ph>.</source>
          <target state="translated">호출 하는 경우 <ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph> 반환 <ph id="ph2">`true`</ph>, 다음 <ph id="ph3">&lt;xref:System.Windows.UIElement.IsMouseCaptured%2A&gt;</ph> 이기도 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureMouse">
          <source>If calling <ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, then the <ph id="ph3">&lt;xref:System.Windows.UIElement.GotMouseCapture&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;</ph> events are raised, with <ph id="ph5">&lt;xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType&gt;</ph> in the event data reported as the element where the <ph id="ph6">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph> method is called.</source>
          <target state="translated">호출 하는 경우 <ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph> 반환 <ph id="ph2">`true`</ph>, 하면 <ph id="ph3">&lt;xref:System.Windows.UIElement.GotMouseCapture&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;</ph> 이벤트가 발생와 <ph id="ph5">&lt;xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType&gt;</ph> 데이터 요소와 보고 하는 이벤트에 여기서는 <ph id="ph6">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph> 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureMouse">
          <source>If you force capture, you might interfere with existing captures—especially with captures that relate to drag-and-drop with the mouse.</source>
          <target state="translated">캡처를 강제 적용 하는 경우에 기존 캡처 충돌할 수 있습니다-특히 마우스 끌어서 놓기와 관련 된 캡처를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureMouse">
          <source>To clear mouse capture from all elements, call <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType&gt;</ph> with the <ph id="ph2">`element`</ph> parameter provided as <ph id="ph3">`null`</ph>.</source>
          <target state="translated">모든 요소에서 마우스 캡처를 지우려면 호출 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType&gt;</ph> 와 <ph id="ph2">`element`</ph> 매개 변수로 제공 <ph id="ph3">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureMouse">
          <source>The following example implements a pair of handlers for mouse and key input combination that capture (and uncapture) the mouse and enable a special mouse mode for viewing a 3D model.</source>
          <target state="translated">다음 예제에서는 한 쌍의 마우스를 캡처 (및 캡처 해제) 여부를 지정 하는 마우스 및 키 입력된 조합을 대 한 처리기를 구현 하 고 3D 모델 보기에 대 한 특수 한 마우스 모드를 사용 하도록 설정 합니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.CaptureStylus">
          <source>Attempts to force capture of the stylus to this element.</source>
          <target state="translated">이 요소가 스타일러스를 캡처하게 합니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.CaptureStylus">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stylus was successfully captured; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">스타일러스가 캡처되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureStylus">
          <source>The default implementation based on the underlying default stylus device always returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">기본 구현은 항상 기본 기본 스타일러스 장치에 따라 반환 <ph id="ph1">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureStylus">
          <source>However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.</source>
          <target state="translated">그러나, 입력된 시스템에 대 한 장치 구현을 제공 하는 입력된 장치를 확장 하는 경우 다른 결과 반환할 수 있는 대체 스타일러스 장치 구현으로 시스템을 만들 수는 있습니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureStylus">
          <source>When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds.</source>
          <target state="translated">스타일러스를 캡처한 요소 스타일러스가 해당 경계 밖에 있는 경우에 스타일러스 입력을 받습니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureStylus">
          <source>The stylus is typically captured only during drag-and-drop operations.</source>
          <target state="translated">스타일러스가 일반적으로 끌어서 놓기 작업 중에 캡처됩니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureStylus">
          <source>Calling this method calls an underlying static <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph> method <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.Capture%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출는 내부 정적 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph> 메서드 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.Capture%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureStylus">
          <source>The actual capture behavior is implemented by the active stylus device implementation.</source>
          <target state="translated">기본 캡처 동작이 활성 스타일러스 장치 구현에 의해 구현 됩니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureStylus">
          <source>To be captured, an element must be enabled.</source>
          <target state="translated">캡처할 수 요소를 사용할 수 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureStylus">
          <source>Check whether <ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> is <ph id="ph2">`true`</ph> return before you call <ph id="ph3">&lt;xref:System.Windows.UIElement.CaptureStylus%2A&gt;</ph>.</source>
          <target state="translated">확인 여부 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> 은 <ph id="ph2">`true`</ph> 호출 하기 전에 반환 <ph id="ph3">&lt;xref:System.Windows.UIElement.CaptureStylus%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureStylus">
          <source>If calling <ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureStylus%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Windows.UIElement.IsStylusCaptured%2A&gt;</ph> is also <ph id="ph4">`true`</ph>.</source>
          <target state="translated">호출 하는 경우 <ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureStylus%2A&gt;</ph> 반환 <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Windows.UIElement.IsStylusCaptured%2A&gt;</ph> 이기도 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source>The device to capture.</source>
          <target state="translated">캡처할 장치입니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source>Attempts to force capture of a touch to this element.</source>
          <target state="translated">이 요소에 터치를 캡처하도록 강제합니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified touch is captured to this element; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">지정된 터치가 이 요소에 캡처되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureTouch%2A&gt;</ph> will return <ph id="ph2">`false`</ph> if the <ph id="ph3">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> is currently captured to another element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureTouch%2A&gt;</ph> 반환 <ph id="ph2">`false`</ph> 경우는 <ph id="ph3">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> 현재 다른 요소에 캡처됩니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source>If <ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureTouch%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, then the <ph id="ph3">&lt;xref:System.Windows.UIElement.GotTouchCapture&gt;</ph> event is raised.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureTouch%2A&gt;</ph> 반환 <ph id="ph2">`true`</ph>, 그런 다음 <ph id="ph3">&lt;xref:System.Windows.UIElement.GotTouchCapture&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source>To release capture of a single touch from this element, use the <ph id="ph1">&lt;xref:System.Windows.UIElement.ReleaseTouchCapture%2A&gt;</ph> method and specify the touch device to release.</source>
          <target state="translated">이 요소에서 단일 터치의 캡처를 해제 하려면 사용는 <ph id="ph1">&lt;xref:System.Windows.UIElement.ReleaseTouchCapture%2A&gt;</ph> 메서드 터치 장치 릴리스를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source>To release all touches from this element, use the <ph id="ph1">&lt;xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A&gt;</ph> method.</source>
          <target state="translated">이 요소에서 모든 터치를 해제 하기 위해 사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source><ph id="ph1">&lt;paramref name="touchDevice" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="touchDevice" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Clip">
          <source>Gets or sets the geometry used to define the outline of the contents of an element.</source>
          <target state="translated">요소 내용의 윤곽선을 정의하는 데 사용할 기하 도형을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Clip">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>The geometry to be used for clipping area sizing.</source>
          <target state="translated">클리핑 영역 크기 조정에 사용할 기하 도형입니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>The default is a null <ph id="ph1">&lt;see cref="T:System.Windows.Media.Geometry" /&gt;</ph>.</source>
          <target state="translated">기본값은 null <ph id="ph1">&lt;see cref="T:System.Windows.Media.Geometry" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>Elements outside the geometry will be visually clipped in the rendered layout.</source>
          <target state="translated">기 하 도형 외부 요소는 렌더링 된 레이아웃에 시각적으로 잘립니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>The geometry does not have to be rectangular.</source>
          <target state="translated">기 하 도형을 사각형 될 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>This example shows how to define a framework element's <ph id="ph1">&lt;xref:System.Windows.UIElement.Clip%2A&gt;</ph> region.</source>
          <target state="translated">프레임 워크 요소를 정의 하는 방법을 보여 주는이 예제 <ph id="ph1">&lt;xref:System.Windows.UIElement.Clip%2A&gt;</ph> 영역입니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>To define a clip, use a <ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph> (for example, an <ph id="ph2">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> to set the element's <ph id="ph3">&lt;xref:System.Windows.UIElement.Clip%2A&gt;</ph> property.</source>
          <target state="translated">클립을 정의 하려면 사용을 <ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph> (예를 들어는 <ph id="ph2">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> 요소를 설정 하려면 <ph id="ph3">&lt;xref:System.Windows.UIElement.Clip%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>Only the area that is within the region of the geometry will be visible.</source>
          <target state="translated">기 하 도형 영역 내에 있는 영역에만 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>The following example shows an <ph id="ph1">&lt;xref:System.Windows.Controls.Image&gt;</ph> element without a defined clip region.</source>
          <target state="translated">다음 예제와 <ph id="ph1">&lt;xref:System.Windows.Controls.Image&gt;</ph> 정의 된 클립 영역이 없는 요소입니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>Because no clip region is defined, the entire image is displayed.</source>
          <target state="translated">클립 영역이 없는 정의 되었기 때문에 전체 이미지가 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source><bpt id="p1">![</bpt>An object before applying a clip region<ept id="p1">]</ept><bpt id="p2">(~/add/media/mil-task-clip-region-noclip.png "</bpt>An object before applying a clip region<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>클립 영역을 적용 하기 전에 개체<ept id="p1">]</ept><bpt id="p2">(~/add/media/mil-task-clip-region-noclip.png "</bpt>클립 영역을 적용 하기 전의 개체<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>Image with No Clip Region</source>
          <target state="translated">클립 영역이 없는 이미지</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>In the next example, an identical Image is created, except that it has a defined clip region.</source>
          <target state="translated">다음 예제에서는 정의 된 클립 영역이 있다는 점을 제외 하 고 동일한 이미지 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>Only the part of the image that is within the area the <ph id="ph1">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> will be displayed.</source>
          <target state="translated">영역 내에 있는 이미지의 일부만 <ph id="ph1">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source><bpt id="p1">![</bpt>A clipped object<ept id="p1">]</ept><bpt id="p2">(~/add/media/mil-task-clip-region-ellispe.PNG "</bpt>A clipped object<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>클리핑된 개체<ept id="p1">]</ept><bpt id="p2">(~/add/media/mil-task-clip-region-ellispe.PNG "</bpt>클리핑된 개체<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>Image with an Elliptical Clip Region</source>
          <target state="translated">타원형 클립 영역을 사용 하 여 이미지</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>The following example shows how animate a framework element's <ph id="ph1">&lt;xref:System.Windows.UIElement.Clip%2A&gt;</ph> region.</source>
          <target state="translated">다음 예제에서는 어떻게 애니메이션 프레임 워크 요소의 <ph id="ph1">&lt;xref:System.Windows.UIElement.Clip%2A&gt;</ph> 영역입니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>In this example, an <ph id="ph1">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> is used to define an elliptical clip region for an <ph id="ph2">&lt;xref:System.Windows.Controls.Image&gt;</ph> element.</source>
          <target state="translated">이 예제는 <ph id="ph1">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> 에 대 한 타원형 클립 영역을 정의 하는 데 사용 되는 <ph id="ph2">&lt;xref:System.Windows.Controls.Image&gt;</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Media.Animation.PointAnimation&gt;</ph> animates the ellipse geometry's <ph id="ph2">&lt;xref:System.Windows.Media.EllipseGeometry.Center%2A&gt;</ph> property from (0, 0) to (200, 150).</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Media.Animation.PointAnimation&gt;</ph> 타원 기 애니메이션 효과 적용 <ph id="ph2">&lt;xref:System.Windows.Media.EllipseGeometry.Center%2A&gt;</ph> 속성 (0, 0)를 (200, 150).</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>The animation starts playing after the image is loaded and repeats indefinitely.</source>
          <target state="translated">애니메이션은 이미지가 로드 되 고 무한 반복 후 재생 하기 시작 합니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>For the full sample, see the <bpt id="p1">[</bpt>Clip Region Sample<ept id="p1">](http://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67)</ept>.</source>
          <target state="translated">전체 샘플에 대 한 참조는 <bpt id="p1">[</bpt>클립 영역 샘플<ept id="p1">](http://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.ClipProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Clip" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Clip" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element) to fit into the size of the containing element.</source>
          <target state="translated">요소를 포함하는 컨테이너의 크기에 맞게 이 요소의 콘텐츠 또는 이 요소의 자식 요소의 콘텐츠를 잘라 낼지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the content should be clipped; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">콘텐츠를 잘라내야 하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그러지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>The default value is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>For child elements, <ph id="ph1">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> has different effects on layout behaviors depending on whether the height and width of the parent element are being determined by <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph><ph id="ph3"> / </ph><ph id="ph4">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> or <ph id="ph5">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph><ph id="ph6"> / </ph><ph id="ph7">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>.</source>
          <target state="translated">자식 요소에 대해 <ph id="ph1">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> 부모 요소의 너비와 높이가에 의해 결정 되는 여부에 따라 레이아웃 동작에 영향을 다른 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> <ph id="ph3"> / </ph> <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> 또는 <ph id="ph5">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph> <ph id="ph6"> / </ph> <ph id="ph7">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph><ph id="ph2"> / </ph><ph id="ph3">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph> of the parent element are always respected regardless of the value of <ph id="ph4">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> and the effective clipping will always clip the content based on these maximums.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph><ph id="ph2"> / </ph><ph id="ph3">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph> 부모 요소의 항상 적용의 값에 관계 없이 <ph id="ph4">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> 및 효과적인 클리핑이이 최대값을 기반으로 내용이 클리핑됩니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>The parent's <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph><ph id="ph2"> / </ph><ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> settings will not clip the content when <ph id="ph4">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> is <ph id="ph5">`false`</ph>, but will clip the content if <ph id="ph6">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> is <ph id="ph7">`true`</ph>.</source>
          <target state="translated">부모의 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> <ph id="ph2"> / </ph> <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> 설정을 콘텐츠가 클리핑 때 <ph id="ph4">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> 은 <ph id="ph5">`false`</ph>, 콘텐츠 if 클리핑하지 않지만 <ph id="ph6">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> 은 <ph id="ph7">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>Note that defaulting to <ph id="ph1">`false`</ph> is the general behavior as implemented in the <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> class.</source>
          <target state="translated">가 기본값으로 <ph id="ph1">`false`</ph> 은 일반적인 동작에서 구현 되는 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>It is possible for any given element that derives from <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> to override the dependency property metadata for this property in that instance to default to <ph id="ph2">`true`</ph> instead.</source>
          <target state="translated">파생 되는 지정된 된 요소 수 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 해당 인스턴스를 기본값으로 설정에서이 속성에 대 한 종속성 속성 메타 데이터를 무시 하려면 <ph id="ph2">`true`</ph> 대신 합니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>Several existing derived classes override this metadata and/or adjust the dependency property default value.</source>
          <target state="translated">기존 파생된 클래스가 몇 재정의이 메타 데이터 및/또는 종속성 속성의 기본값을 조정 합니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.InkPresenter&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> each override the default value to be <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph><ph id="ph2">&lt;xref:System.Windows.Controls.InkPresenter&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> 되도록 기본값을 재정의할 각 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> overrides the metadata for this dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 이 종속성 속성에 대 한 메타 데이터를 재정의합니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>Specifically, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> designates this property to allow property value inheritance (<ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph> is <ph id="ph3">`true`</ph> in metadata).</source>
          <target state="translated">특히, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 속성 값 상속을 허용 하려면이 속성을 지정 (<ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph> 은 <ph id="ph3">`true`</ph> 메타 데이터에).</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>Property value inheritance in this context means that if there are child elements with no other value for <ph id="ph1">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a locally value), then the value from the parent element will be assigned to all unassigned child elements by the property system.</source>
          <target state="translated">이 컨텍스트에서 속성 값을 상속 하는 경우에 대 한 다른 값이 없는 자식 요소가 <ph id="ph1">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> 로컬 값 또는 스타일을이 값이 할당 된 (다시, 스타일, 기본적으로 가장 가까운 부모 요소의 값을 통해 할당 값 또는 로컬 값), 부모 요소의 값은 속성 시스템에서 모든 자식 요소에 할당 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>In practice this means that you can specify whether to allow clip to bounds at the root element, and that value will propagate to all child elements that have not specifically assigned it as <ph id="ph1">`false`</ph>.</source>
          <target state="translated">실제로 즉, 루트 요소에서 범위에 맞춰 잘라 내기를 허용할지 여부를 지정할 수로 할당 값은 특히 하지 않은 모든 자식 요소로 전파 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.ClipToBoundsProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.ClipToBounds" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.ClipToBounds" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.CommandBindings">
          <source>Gets a collection of <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> objects associated with this element.</source>
          <target state="translated">이 요소와 연결된 <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> 개체의 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.CommandBindings">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> enables command handling for this element, and declares the linkage between a command, its events, and the handlers attached by this element.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph>을 사용하면 이 요소에 대해 명령을 처리할 수 있으며 명령, 해당 이벤트 및 이 요소에 의해 연결되는 처리기 간의 연결을 선언할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source>The collection of all <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> objects.</source>
          <target state="translated">모든 <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> 개체의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source>Another typical way to populate the <ph id="ph1">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph> collection is to use <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> methods programmatically.</source>
          <target state="translated">또 다른 일반적인 방법은 채우는 데는 <ph id="ph1">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph> 를 사용 하는 컬렉션 <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> 메서드 프로그래밍 방식으로 합니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML 속성 요소 사용</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source><bpt id="p1">*</bpt>oneOrMoreCommandBindings<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>oneOrMoreCommandBindings<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source>One or more <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> elements.</source>
          <target state="translated">하나 이상의 <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source>Each of these should have a <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding.Command%2A&gt;</ph> attribute set to a known command, and attributes set for the <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> handler implementations.</source>
          <target state="translated">이러한 각 있어야는 <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding.Command%2A&gt;</ph> 특성이 알려진된 명령으로 설정 하 고 특성에 대 한 설정에서 <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> 처리기를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source>For more information see <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source>The following example adds a <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> to a window using markup.</source>
          <target state="translated">다음 예제에서는 추가 <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> 태그를 사용 하 여 창에 있습니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source>Note that in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Windows.Input.CommandBindingCollection&gt;</ph> is not declared in the markup as an element; the collection object is inferred by the type that the property takes, and you populate the property element with one or more <ph id="ph3">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> elements:</source>
          <target state="translated">에 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.CommandBindingCollection&gt;</ph> 요소로; 태그에 선언 되지 않은 컬렉션 개체 속성에 사용 되는 형식에 의해 유추 됩니다 및 하나 이상의 속성 요소를 채울 <ph id="ph3">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> 요소:</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source>For more information about the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> syntax for collections, see <bpt id="p1">[</bpt>XAML Syntax In Detail<ept id="p1">](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)</ept>.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 컬렉션에 대 한 구문을 참조 <bpt id="p1">[</bpt>XAML 구문에서 세부<ept id="p1">](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source>The following example does essentially the same thing in code:</source>
          <target state="translated">다음 예제에서는 코드에서 기본적으로 동일한 작업을 수행합니다.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.DesiredSize">
          <source>Gets the size that this element computed during the measure pass of the layout process.</source>
          <target state="translated">레이아웃 프로세스의 측정 단계 중 이 요소가 계산한 크기를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.DesiredSize">
          <source>The computed size, which becomes the desired size for the arrange pass.</source>
          <target state="translated">정렬 단계에 필요한 크기인 계산된 크기입니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.DesiredSize">
          <source>The value returned by this property will only be a valid measurement if the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">이 속성에서 반환 되는 값만 됩니다 올바른 측정 하는 경우의 값은 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;</ph> 속성은 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.DesiredSize">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> is typically checked as one of the measurement factors when you implement layout behavior overrides such as <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.Windows.UIElement.OnRender%2A&gt;</ph> (in the <ph id="ph5">&lt;xref:System.Windows.UIElement.OnRender%2A&gt;</ph> case, you might check <ph id="ph6">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph> instead, but this depends on your implementation).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> 요소 중 하나는 측정 레이아웃 동작을 구현 하는 경우와 같은 재정의 하기 때문에 일반적으로 확인란이 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph>, 또는 <ph id="ph4">&lt;xref:System.Windows.UIElement.OnRender%2A&gt;</ph> (에 <ph id="ph5">&lt;xref:System.Windows.UIElement.OnRender%2A&gt;</ph> 대/소문자를 확인할 수 있습니다 <ph id="ph6">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph> 대신에 따라 달라 집니다 하지만 프로그램 구현)입니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.DesiredSize">
          <source>Depending on the scenario, <ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> might be fully respected by your implementation logic, constraints on <ph id="ph2">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> might be applied, and such constraints might also change other characteristics of either the parent element or child element.</source>
          <target state="translated">시나리오에 따라 <ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> 적용 구현 논리, 제약 조건에서에 <ph id="ph2">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> 적용 될 수 있습니다 및 이러한 제약 조건은 다른 특성을 부모 요소 또는 자식 요소가 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.DesiredSize">
          <source>For example, a control that supports scrollable regions (but chooses not to derive from the WPF framework-level controls that already enable scrollable regions) could compare available size to <ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph>.</source>
          <target state="translated">예를 들어 스크롤 가능한 영역을 지원 합니다 (그러나 하지 않도록 선택 하면 이미 스크롤 가능한 영역을 사용 하도록 설정 하는 WPF 프레임 워크 수준 컨트롤에서 파생) 하는 컨트롤에 사용 가능한 크기를 비교할 수 <ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.DesiredSize">
          <source>The control could then set an internal state that enabled scrollbars in the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> for that control.</source>
          <target state="translated">컨트롤에 스크롤 막대를 사용 하도록 설정 하는 내부 상태를 설정한 다음 수는 <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> 해당 컨트롤에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.DesiredSize">
          <source>Or, <ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> could potentially also be ignored in certain scenarios.</source>
          <target state="translated">또는, <ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> 수를 잠재적으로 특정 시나리오에서 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.DesiredSize">
          <source>The following example shows <ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> as part of a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph> implementation.</source>
          <target state="translated">다음 예제와 <ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> 의 일부로 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph> 구현 합니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.DesiredSize">
          <source>Notice how <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> is called immediately prior to obtaining <ph id="ph2">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph>.</source>
          <target state="translated">알림 방법을 <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> 을 만들기 전에 바로 호출 <ph id="ph2">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.DesiredSize">
          <source>This assures that <ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> holds a legitimate value.</source>
          <target state="translated">이 기능은 <ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> 적절 한 값을 보유 합니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.DragEnter">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag target.</source>
          <target state="translated">입력 시스템에서 이 요소를 끌기 대상으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragEnter">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragEnter">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.DragEnter&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.DragEnter&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragEnter">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragEnter">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragEnter">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragEnter">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragEnter">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragEnter">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDragEnter&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDragEnter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragEnter">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDragEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDragEnter%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.DragEnterEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.DragEnter" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.DragEnter" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragEnterEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragEnterEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragEnterEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragEnterEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragEnterEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.DragLeave">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag origin.</source>
          <target state="translated">입력 시스템에서 이 요소를 끌기 원본으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragLeave">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragLeave">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.DragLeave&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.DragLeave&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragLeave">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragLeave">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragLeave">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragLeave">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragLeave">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragLeave">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragLeave&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragLeave&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragLeave">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDragLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDragLeave%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.DragLeaveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.DragLeave" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.DragLeave" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragLeaveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragLeaveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragLeaveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragLeaveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragLeaveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.DragOver">
          <source>Occurs when the input system reports an underlying drag event with this element as the potential drop target.</source>
          <target state="translated">입력 시스템에서 이 요소를 잠재적인 놓기 대상으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragOver">
          <source>This event occurs even if the drag originates in the element bounds.</source>
          <target state="translated">이 이벤트는 끌기 요소 범위에서 시작 하는 경우에 발생 합니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragOver">
          <source>If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <ph id="ph1">&lt;xref:System.Windows.UIElement.DragEnter&gt;</ph> and related preview events.</source>
          <target state="translated">끌기 범위 외부에서 시작, 내부 이동 후도이 이벤트가 발생 하는 경우와 <ph id="ph1">&lt;xref:System.Windows.UIElement.DragEnter&gt;</ph> 및 관련 미리 보기 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragOver">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragOver">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.DragOver&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.DragOver&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragOver">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragOver">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragOver">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragOver">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragOver">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragOver">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragOver&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragOver&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragOver">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDragOver%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDragOver%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.DragOverEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.DragOver" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.DragOver" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragOverEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragOverEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragOverEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragOverEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragOverEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.Drop">
          <source>Occurs when the input system reports an underlying drop event with this element as the drop target.</source>
          <target state="translated">입력 시스템에서 이 요소를 놓기 대상으로 사용하는 기본 놓기 이벤트를 보고하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.Drop">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.UIElement.Drop?displayProperty=nameWithType&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.Drop?displayProperty=nameWithType&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.Drop">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.Drop&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.Drop&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.Drop">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.Drop">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.Drop">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.Drop">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.Drop">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.Drop">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDrop&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDrop&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.Drop">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDrop%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDrop%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.DropEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.Drop" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.Drop" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DropEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DropEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DropEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DropEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DropEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Effect">
          <source>Gets or sets the bitmap effect to apply to the <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>에 적용할 비트맵 효과를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Effect">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Effect">
          <source>An <ph id="ph1">&lt;see cref="T:System.Windows.Media.Effects.Effect" /&gt;</ph> that represents the bitmap effect.</source>
          <target state="translated">비트맵 효과를 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Media.Effects.Effect" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Effect">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.UIElement.Effect%2A&gt;</ph> property to apply a bitmap effect to a <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.UIElement.Effect%2A&gt;</ph> 속성에 비트맵 효과를 적용 하는 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Effect">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Effect">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Effect">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Effect">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Effect">
          <source>The following XAML shows how to assign a custom <ph id="ph1">&lt;xref:System.Windows.Media.Effects.ShaderEffect&gt;</ph> to the <ph id="ph2">&lt;xref:System.Windows.UIElement.Effect%2A&gt;</ph> property.</source>
          <target state="translated">다음 XAML에서는 사용자 지정을 할당 하는 방법을 보여 줍니다. <ph id="ph1">&lt;xref:System.Windows.Media.Effects.ShaderEffect&gt;</ph> 에 <ph id="ph2">&lt;xref:System.Windows.UIElement.Effect%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.EffectProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Effect" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Effect" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.Focus">
          <source>Attempts to set focus to this element.</source>
          <target state="translated">이 요소에 포커스를 설정하려고 시도합니다.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.Focus">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if keyboard focus and logical focus were set to this element; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if only logical focus was set to this element, or if the call to this method did not force the focus to change.</source>
          <target state="translated">키보드 포커스와 논리적 포커스가 이 요소로 설정되어 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 논리적 포커스만 이 요소로 설정되어 있거나 이 메서드에 대한 호출이 포커스를 강제로 변경하지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Focus">
          <source>To be focusable, <ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> must both be <ph id="ph3">`true`</ph>.</source>
          <target state="translated">포커스를 <ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> 모두 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Focus">
          <source>Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">요소가 이면 특정 트리 내에서 포커스를 받을 수 하 고 사용 가능한 이벤트 처리 하는 경우에 포커스를 허용 하지 않음으로써 미리 보기 포커스 이벤트에 응답할 수 있습니다 (예: 합성 컨트롤) 하므로이 메서드는 반환 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Focus">
          <source>Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical.</source>
          <target state="translated">포커스 일반적 두 개의 별개의 개념에 의해 관리: 키보드 포커스와 논리 포커스를 항상 동일 하지 않은입니다.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Focus">
          <source>For more information, see <bpt id="p1">[</bpt>Focus Overview<ept id="p1">](~/docs/framework/wpf/advanced/focus-overview.md)</ept> or <bpt id="p2">[</bpt>Input Overview<ept id="p2">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>포커스 개요<ept id="p1">](~/docs/framework/wpf/advanced/focus-overview.md)</ept> 또는 <bpt id="p2">[</bpt>입력 개요<ept id="p2">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Focus">
          <source>If calling <ph id="ph1">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph> are also <ph id="ph5">`true`</ph>.</source>
          <target state="translated">호출 하는 경우 <ph id="ph1">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph> 반환 <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph> 도 <ph id="ph5">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Focus">
          <source>If the related properties are not already <ph id="ph1">`true`</ph>, when you call  <ph id="ph2">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph>, one or more of the following events are raised in the following order: <ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt;</ph> (source is the new focus target), <ph id="ph5">&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph> (source is the new focus target).</source>
          <target state="translated">관련된 속성이 없는 경우 <ph id="ph1">`true`</ph>호출 하는 경우, <ph id="ph2">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph>, 다음과 같은 순서로 발생 하는 다음 이벤트 중 하나 이상이: <ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt;</ph> (소스는 새 포커스 대상), <ph id="ph5">&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph> (소스 대상인 새 포커스).</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Focus">
          <source>In order for this call to be successful, some other element in the application needed to have focus previously.</source>
          <target state="translated">찾기가 성공 하려면 다른 요소 이전에 포커스가 있어야 하는 데 필요한 응용 프로그램에서이 호출에 대 한 하는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Focus">
          <source>The following example sets focus to a <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> referenced by <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>, and then adjusts the position of the cursor within the <ph id="ph3">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.</source>
          <target state="translated">포커스를 설정 하는 다음 예제는 <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> 참조 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>, 다음 내에서 커서의 위치를 조정 하 고는 <ph id="ph3">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Focusable">
          <source>Gets or sets a value that indicates whether the element can receive focus.</source>
          <target state="translated">요소가 포커스를 받을 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Focusable">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is focusable; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">요소가 포커스를 받을 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>Only the focused element receives keyboard input.</source>
          <target state="translated">포커스가 있는 요소는 키보드 입력을 받습니다.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> is the <ph id="ph2">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> property accessor for what is in reality a dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> 이 <ph id="ph2">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> 이란 현실에서 종속성 속성에 대 한 속성 접근자입니다.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>This particular dependency property quite frequently has its apparent "default" value set differently in derived element classes, particularly in controls.</source>
          <target state="translated">이 특정 종속성 속성에는 상당히 자주 해당 "기본값"이 특히 컨트롤에서에서 파생 된 요소 클래스에서 서로 다르게 설정 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>This commonly occurs in one of two ways:</source>
          <target state="translated">이 두 가지 방법 중 하나에 일반적으로 발생합니다.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>The dependency property is inherited by a particular derived class, but that derived class overrides the metadata of the dependency property and changes the property default value.</source>
          <target state="translated">종속성 속성은 특정 파생된 클래스에서 상속 되지만 해당 파생 클래스를 재정의 종속성 속성의 메타 데이터 속성 기본값을 변경 합니다.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>A style or template is applied to an element, which sets that dependency property value differently.</source>
          <target state="translated">스타일이 나 템플릿을 해당 종속성 속성 값을 다르게 설정 하는 요소에 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>For example, the apparent "default" of <ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> for a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> control will be <ph id="ph3">`true`</ph>, even though <ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph> inherits <ph id="ph5">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> as a <ph id="ph6">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> property directly from <ph id="ph7">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">예를 들어 명백한 "기본값"의 <ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> 에 대 한는 <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> 컨트롤 됩니다 <ph id="ph3">`true`</ph>경우라도, <ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph> 상속 <ph id="ph5">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> 으로 <ph id="ph6">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 에서 직접 속성 <ph id="ph7">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>This is because the applied metadata value for the <ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> dependency property was overridden within the static constructor of the <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph> base class, which is situated between <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.UIElement&gt;</ph> in the class hierarchy.</source>
          <target state="translated">적용 된 메타 데이터에 대 한 값 때문에 이것이 <ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> 종속성 속성의 정적 생성자 내에서 재정의 <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph> 기본 클래스 사이 <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Windows.UIElement&gt;</ph> 클래스 계층 구조에서입니다.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>When inherited by <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> or its derived classes, <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph> redefines the default value of this property to be <ph id="ph3">`true`</ph>.</source>
          <target state="translated">상속 되는 경우 <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> 또는 해당 파생된 클래스 <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph> 되려면이 속성의 기본값을 재정의 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>When inherited by <ph id="ph1">&lt;xref:System.Windows.Controls.Label&gt;</ph> (which is a <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph> derived class), the default value is again redefined to be <ph id="ph3">`false`</ph>.</source>
          <target state="translated">상속 되는 경우 <ph id="ph1">&lt;xref:System.Windows.Controls.Label&gt;</ph> (되는 <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph> 파생 클래스), 기본 값은로 다시 정의 됩니다. <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>The following example code illustrates a control template for a particular custom control, which sets <ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> <ph id="ph2">`false`</ph> on one of the elements within the template.</source>
          <target state="translated">다음 예제 코드에서는 특정 사용자 지정 컨트롤을 설정에 대 한 <ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> <ph id="ph2">`false`</ph> 템플릿 내의 요소 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>When deriving from <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> directly (as opposed to from <ph id="ph2">&lt;see cref="T:System.Windows.Controls.Control" /&gt;</ph>), consider whether you wish your element to be focusable, because by default the element will not be focusable.</source>
          <target state="translated">파생 된 경우 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 직접 (에서 반대로 <ph id="ph2">&lt;see cref="T:System.Windows.Controls.Control" /&gt;</ph>), 프로그램 요소를 기본적으로 요소가 되지 않으므로 포커스를 잠글지 여부를 고려 합니다.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>If you wish your element to be focusable, override the metadata for this property within your type's static constructor as follows:</source>
          <target state="translated">프로그램 요소를 원하는 종류의 정적 생성자 내에서이 속성에 대 한 메타 데이터를 다음과 같이 재정의:</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>where <ph id="ph1">&lt;paramref name="myElement" /&gt;</ph> should be the class name of the type that you are overriding the metadata value on.</source>
          <target state="translated">여기서 <ph id="ph1">&lt;paramref name="myElement" /&gt;</ph> 에 메타 데이터 값을 재정의 하는 형식의 클래스 이름 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.FocusableChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Focusable" /&gt;</ph> property changes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Focusable" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.FocusableChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">이 멤버는 한 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트, 라우트된 이벤트가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.FocusableProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Focusable" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Focusable" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>The dependency property to check.</source>
          <target state="translated">확인할 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.</source>
          <target state="translated">실행하거나 중지된 애니메이션의 가능한 애니메이션 값을 모두 무시하고 이 요소에 대해 지정된 속성의 기본 속성 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>The property value as if no animations are attached to the specified dependency property.</source>
          <target state="translated">지정된 종속성 속성에 연결된 애니메이션이 없는 경우와 동일한 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>If no animations are attached to the property, then the <ph id="ph1">&lt;xref:System.Windows.UIElement.GetAnimationBaseValue%2A&gt;</ph> return value is always identical to the <ph id="ph2">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph> return value.</source>
          <target state="translated">속성에 연결 된 애니메이션이 없는 경우 하면 <ph id="ph1">&lt;xref:System.Windows.UIElement.GetAnimationBaseValue%2A&gt;</ph> 반환 값은 항상 동일는 <ph id="ph2">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph> 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs.</source>
          <target state="translated">애니메이션이 연결 인 경우 모든 가능한 애니메이션 시작 부분을 포함 하 여 값을 파생 하는 다음 및 중지 값 무시 되 고 속성 값이 가능한 다른 모든 입력에 따라 결정 됩니다.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>종속성 속성 값 우선 순위<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>The following example implements a handler that reports the base value of an animated <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> property on a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>, as well as the base value of a transform.</source>
          <target state="translated">애니메이션의 기준 값을 보고 하는 처리기를 구현 하는 다음 예제에서는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> 속성에는 <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>, 변환의 기준 값 뿐만 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)">
          <source>The available size provided by the element.</source>
          <target state="translated">요소에서 제공된 사용 가능한 크기입니다.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)">
          <source>Returns an alternative clipping geometry that represents the region that would be clipped if <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.ClipToBounds" /&gt;</ph> were set to <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.ClipToBounds" /&gt;</ph>가 <ph id="ph2">&lt;see langword="true" /&gt;</ph>로 설정된 경우 클리핑되는 영역을 나타내는 다른 클리핑 기하 도형을 반환합니다.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)">
          <source>The potential clipping geometry.</source>
          <target state="translated">잠재적인 클리핑 기하 도형입니다.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)">
          <source>The default implementation will return a legitimate value, but does not use the <ph id="ph1">`layoutSlotSize`</ph> parameter in its calculations.</source>
          <target state="translated">기본 구현은 적절 한 값을 반환 하지만 사용 하지 않는 <ph id="ph1">`layoutSlotSize`</ph> 계산에서 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)">
          <source>Instead it uses the value of <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph>.</source>
          <target state="translated">값을 사용 하 여 대신 <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)">
          <source>This method is substantially overridden by the immediately derived <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> class, and the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> override produces a more sophisticated behavior for general WPF framework-level elements.</source>
          <target state="translated">이 메서드를 재정의 대체로에서 즉시 파생 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 클래스 및 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 재정의 일반 WPF 프레임 워크 수준 요소에 대 한 보다 복잡 한 동작을 생성 합니다.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)">
          <source>For details, see <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.GetUIParentCore">
          <source>When overridden in a derived class, returns an alternative <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> parent for this element if no visual parent exists.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 시각적 부모가 없으면 이 요소에 대해 다른 <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> 부모를 반환합니다.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.GetUIParentCore">
          <source>An object, if implementation of a derived class has an alternate parent connection to report.</source>
          <target state="translated">파생 클래스 구현에 보고할 다른 부모 연결이 있는 경우의 개체입니다.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.GetUIParentCore">
          <source>The default virtual implementation of this method returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">이 메서드의 기본 가상 구현 반환 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.GetUIParentCore">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> provides a practical implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 실제 구현을 제공합니다.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.GetUIParentCore">
          <source>Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.</source>
          <target state="translated">대체 부모가 있는 요소를 만들어 경우 대체 부모 구조체 이벤트 라우트 되도록 표준 부모 시각적 트리를 라우팅의 표준 패턴에서와 차이가 하는 방식에서, 이벤트 라우팅에 사용 되는 중이거나에서 아래쪽의 라우팅 전략을 미리 봅니다.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>Occurs when the input system reports an underlying drag-and-drop event that involves this element.</source>
          <target state="translated">입력 시스템에서 이 요소를 포함하는 기본 끌어서 놓기 이벤트를 보고하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.GiveFeedback&gt;</ph> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.GiveFeedback&gt;</ph> 이벤트를 사용 하면 끌어서 놓기 작업 중 사용자의 시각적 피드백을 제공 하기 위해 마우스 포인터의 모양을 수정 하려면 끌기 이벤트의 소스입니다.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>The visual feedback reinforces that a drag-and-drop operation is in process.</source>
          <target state="translated">시각적 피드백 끌어서 놓기 작업이 진행 되는 것입니다.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.UIElement.GiveFeedback&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.GiveFeedback&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.GiveFeedback&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.GiveFeedback&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewGiveFeedback&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewGiveFeedback&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGiveFeedback%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGiveFeedback%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.GiveFeedbackEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GiveFeedback" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GiveFeedback" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GiveFeedbackEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GiveFeedbackEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GiveFeedbackEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GiveFeedbackEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GiveFeedbackEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.GotFocus">
          <source>Occurs when this element gets logical focus.</source>
          <target state="translated">이 요소가 논리 포커스를 가져오면 발생합니다.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope.</source>
          <target state="translated">메서드 호출을 사용 하 여 포커스를 강제로 했지만 이전 키보드 포커스가 다른 범위에 있는 경우 논리적 포커스와 키보드 포커스가 다릅니다.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>In this scenario, keyboard focus remains where it is and the element where a <ph id="ph1">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph> method is called still gets logical focus.</source>
          <target state="translated">이 시나리오에서는 키보드 포커스가 유지 되 고 요소에는 <ph id="ph1">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph> 메서드는 여전히 논리적 포커스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>A more precise interpretation of this event is that it is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph> property of an element in the route is changed from <ph id="ph2">`false`</ph> to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">이 이벤트의 보다 정확 하 게 설명은 발생할 때의 값은 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph> 경로에 있는 요소의 속성에서 변경 되 <ph id="ph2">`false`</ph> 를 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">이 이벤트는 버블링 라우팅을 사용 하므로 포커스를 받는 요소 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that gained focus.</source>
          <target state="translated">확인은 <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> 에 포커스가 있는 실제 요소를 확인 하기 위해 이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>There is no corresponding tunneling event.</source>
          <target state="translated">해당 터널링 이벤트가 없습니다.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotFocus%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.GotFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotFocus" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotFocus" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>Occurs when the keyboard is focused on this element.</source>
          <target state="translated">이 요소에 키보드 포커스가 있으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;</ph> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <ph id="ph2">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph> event is raised in many of the same circumstances.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;</ph> 요소;에 대 한 포커스 상태를 유지 하는 속성에서 상태 변경을 추적 하는 유사한 이벤트 <ph id="ph2">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph> 이벤트는 대부분의 동일한 상황에서 발생 합니다.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">이 이벤트는 버블링 라우팅을 사용 하므로 포커스가 있는 요소는 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has focus.</source>
          <target state="translated">확인의 <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> 이벤트 데이터에 포커스가 있는 실제 요소를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotKeyboardFocus%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.GotKeyboardFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotKeyboardFocus" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotKeyboardFocus" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotKeyboardFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotKeyboardFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotKeyboardFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotKeyboardFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotKeyboardFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>Occurs when this element captures the mouse.</source>
          <target state="translated">이 요소가 마우스를 캡처하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds.</source>
          <target state="translated">마우스를 캡처한 요소 마우스 포인터가 해당 경계 밖에 있는 경우에 마우스 입력을 받습니다.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.</source>
          <target state="translated">마우스는 일반적으로 끌어서 놓기 작업 중에 캡처됩니다 및 끌어서 놓기 작업의 삭제 동작이 발생할 때까지 캡처된 상태로 유지 됩니다.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">이 이벤트는 버블링 라우팅을 사용 하기 때문에 캡처를 가진 요소를 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has mouse capture.</source>
          <target state="translated">확인 된 <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> 마우스 있는 실제 요소를 결정 하는 데이터의 캡처 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType&gt;</ph> attached event for  this class so that <ph id="ph2">&lt;xref:System.Windows.UIElement.GotMouseCapture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.GotMouseCapture&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.GotMouseCapture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.GotMouseCapture&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>There is no defined corresponding tunneling event.</source>
          <target state="translated">정의 된 해당 터널링 이벤트가 없습니다.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotMouseCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotMouseCapture%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.GotMouseCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotMouseCapture" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotMouseCapture" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotMouseCaptureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotMouseCaptureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotMouseCaptureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotMouseCaptureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotMouseCaptureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>Occurs when this element captures the stylus.</source>
          <target state="translated">이 요소가 스타일러스를 캡처하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</source>
          <target state="translated">스타일러스를 캡처한 요소 포인터가 해당 경계 밖에 있는 경우에 스타일러스 입력을 받습니다.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.</source>
          <target state="translated">스타일러스가 끌어서 놓기 작업의 삭제 동작이 발생할 때까지 캡처를 저장 하 고는 일반적으로 끌어서 놓기 작업 중에 캡처됩니다.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">이 이벤트는 버블링 라우팅을 사용 하기 때문에 캡처를 가진 요소를 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has capture.</source>
          <target state="translated">확인은 <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> 이벤트 데이터 캡처를 가진 실제 요소를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>This event creates an alias for the attached event for this class so that <ph id="ph1">&lt;xref:System.Windows.UIElement.GotStylusCapture&gt;</ph> is part of the class members list when <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트는이 클래스에 대 한 연결 된 이벤트에 대 한 별칭을 만들어 있도록 <ph id="ph1">&lt;xref:System.Windows.UIElement.GotStylusCapture&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.GotStylusCapture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.GotStylusCapture&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>There is no defined corresponding tunneling event.</source>
          <target state="translated">정의 된 해당 터널링 이벤트가 없습니다.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotStylusCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotStylusCapture%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.GotStylusCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotStylusCapture" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotStylusCapture" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotStylusCaptureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotStylusCaptureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotStylusCaptureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotStylusCaptureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotStylusCaptureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.GotTouchCapture">
          <source>Occurs when a touch is captured to this element.</source>
          <target state="translated">이 요소에 터치가 캡처될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotTouchCapture">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotTouchCapture">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotTouchCapture">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotTouchCapture">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotTouchCapture">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotTouchCapture">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotTouchCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotTouchCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotTouchCapture%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.GotTouchCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotTouchCapture" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotTouchCapture" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.HasAnimatedProperties">
          <source>Gets a value indicating whether this element has any animated properties.</source>
          <target state="translated">이 요소에 애니메이션이 적용된 속성이 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.HasAnimatedProperties">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element has animations attached to any of its properties; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 요소의 속성에 애니메이션이 연결되어 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.HasAnimatedProperties">
          <source>This property returns <ph id="ph1">`true`</ph> either for persistent (unclocked, always-running) animations, or for animations that have a specific timeline.</source>
          <target state="translated">이 속성은 반환 <ph id="ph1">`true`</ph> 영구 (unclocked, 항상 실행 중) 애니메이션이 또는 특정 시간 표시 막대의 애니메이션 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.HasEffectiveKeyboardFocus">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> has focus.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>에 포커스가 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.HasEffectiveKeyboardFocus">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> has focus; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 컨트롤에 포커스가 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.HasEffectiveKeyboardFocus">
          <source>Subclasses can override this property to specify when the element has keyboard focus.</source>
          <target state="translated">서브 클래스 요소에 키보드 포커스가 있을 때를 지정 하려면이 속성을 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.HasEffectiveKeyboardFocus">
          <source>This is useful when your <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> contains elements that can have keyboard focus and you want your element to report that it has focus.</source>
          <target state="translated">이 때 유용 프로그램 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 키보드 포커스를 가질 수 있는 요소를 포함 하거나 요소에 포커스가 있을 보고서 중이 고 합니다.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" uid="T:System.Windows.UIElement">
          <source>Implements <ph id="ph1">&lt;see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /&gt;</ph> to supply base element hit testing behavior.</source>
          <target state="translated">기본 요소 적중 테스트 동작을 제공하는 <ph id="ph1">&lt;see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /&gt;</ph>를 구현합니다.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
          <source>Describes the hit test to perform, including the initial hit point.</source>
          <target state="translated">초기 적중 지점을 포함하여 수행할 적중 횟수 테스트를 설명합니다.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
          <source>Implements <ph id="ph1">&lt;see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /&gt;</ph> to supply base element hit testing behavior (returning <ph id="ph2">&lt;see cref="T:System.Windows.Media.GeometryHitTestResult" /&gt;</ph>).</source>
          <target state="translated">기본 요소 적중 횟수 테스트 동작을 제공할 <ph id="ph1">&lt;see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /&gt;</ph>를 구현합니다(<ph id="ph2">&lt;see cref="T:System.Windows.Media.GeometryHitTestResult" /&gt;</ph> 반환).</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
          <source>Results of the test, including the evaluated geometry.</source>
          <target state="translated">계산한 기하 도형을 포함하는 테스트의 결과입니다.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
          <source>See the original virtual method <ph id="ph1">&lt;xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType&gt;</ph> for information on overriding this method in further derived classes.</source>
          <target state="translated">원래 가상 메서드 <ph id="ph1">&lt;xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType&gt;</ph> 더 이상에서이 메서드를 재정의 하는 방법은 파생 클래스에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
          <source>Note that several specific controls (<ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph>, for example) do have distinct implementations, which override this one.</source>
          <target state="translated">몇 가지 특정 컨트롤 (<ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph>예를 들면)는이 무시 하는 고유한 구현이 있습니다.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
          <source>This method is not intended to be called from your application code.</source>
          <target state="translated">이 메서드는 응용 프로그램 코드에서 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
          <source>This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).</source>
          <target state="translated">이 메서드는 마우스 포인터가 요소, 예를 들어) (여부 입력된 시스템의 다양 한 측면에 의해 노출 되는 내부 적중된 테스트 동작을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)">
          <source>Describes the hit test to perform, including the initial hit point.</source>
          <target state="translated">초기 적중 지점을 포함하여 수행할 적중 횟수 테스트를 설명합니다.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)">
          <source>Implements <ph id="ph1">&lt;see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /&gt;</ph> to supply base element hit testing behavior (returning <ph id="ph2">&lt;see cref="T:System.Windows.Media.HitTestResult" /&gt;</ph>).</source>
          <target state="translated">기본 요소 적중 횟수 테스트 동작을 제공할 <ph id="ph1">&lt;see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /&gt;</ph>를 구현합니다(<ph id="ph2">&lt;see cref="T:System.Windows.Media.HitTestResult" /&gt;</ph> 반환).</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)">
          <source>Results of the test, including the evaluated point.</source>
          <target state="translated">계산한 지점을 포함하는 테스트의 결과입니다.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)">
          <source>See the original virtual method <ph id="ph1">&lt;xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType&gt;</ph> for information on overriding this method in further derived classes.</source>
          <target state="translated">원래 가상 메서드 <ph id="ph1">&lt;xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType&gt;</ph> 더 이상에서이 메서드를 재정의 하는 방법은 파생 클래스에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)">
          <source>Note that several specific controls (<ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph>, for example) do have distinct implementations, which override <ph id="ph2">&lt;xref:System.Windows.UIElement.HitTestCore%2A&gt;</ph> as defined by <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">몇 가지 특정 컨트롤 (<ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph>예를 들면)는 무시 하는 고유한 구현이 <ph id="ph2">&lt;xref:System.Windows.UIElement.HitTestCore%2A&gt;</ph> 에 정의 된 대로 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)">
          <source>This method is not intended to be called from your application code.</source>
          <target state="translated">이 메서드는 응용 프로그램 코드에서 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)">
          <source>This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).</source>
          <target state="translated">이 메서드는 마우스 포인터가 요소, 예를 들어) (여부 입력된 시스템의 다양 한 측면에 의해 노출 되는 내부 적중된 테스트 동작을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.InputBindings">
          <source>Gets the collection of input bindings associated with this element.</source>
          <target state="translated">이 요소에 연결된 입력 바인딩의 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>The collection of input bindings.</source>
          <target state="translated">입력 바인딩 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>Input bindings support the binding of commands to input devices.</source>
          <target state="translated">입력된 바인딩 입력 장치에 있는 명령의 바인딩을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>For example, <ph id="ph1">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> implements input bindings that include properties that are particular to mouse devices.</source>
          <target state="translated">예를 들어 <ph id="ph1">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> 입력은 마우스 장치와 관련 속성을 포함 하는 바인딩을 구현 합니다.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>The collection of input bindings will include both input bindings that pertain to the type as well as input bindings that are declared on the instance.</source>
          <target state="translated">입력된 바인딩 컬렉션에는 형식과 관련 된 입력된 바인딩을 뿐만 아니라 인스턴스에서 선언 모두 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>A related property, <ph id="ph1">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph>, maintains a collection of command bindings.</source>
          <target state="translated">관련된 속성인 <ph id="ph1">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph>, 명령 바인딩의 컬렉션을 유지 합니다.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>These differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands.</source>
          <target state="translated">이러한 입력된 바인딩 한다는 점에서 다릅니다 명령 처리 알려진된 명령에 연결 된 작업의 다음 수준 아래로 나타냅니다.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML 속성 요소 사용</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source><bpt id="p1">*</bpt>oneOrMoreInputBindings<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>oneOrMoreInputBindings<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>One or more <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> elements (typically the <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> derived classes).</source>
          <target state="translated">하나 이상의 <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> 요소 (일반적으로 <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> 파생 클래스).</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>Each of these is expected to have a <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;</ph> attribute set.</source>
          <target state="translated">사용할 수는 이러한 각는 <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;</ph> 특성이 설정 합니다.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>The following example populates this property on a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, with a single <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph>.</source>
          <target state="translated">다음 예제에서이 속성을 채우는 한 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, 단일 <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>For more information about the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> syntax for collections, see <bpt id="p1">[</bpt>XAML Syntax In Detail<ept id="p1">](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)</ept>.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 컬렉션에 대 한 구문을 참조 <bpt id="p1">[</bpt>XAML 구문에서 세부<ept id="p1">](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)">
          <source>The offset coordinates within this element.</source>
          <target state="translated">이 요소 내의 오프셋 좌표입니다.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)">
          <source>Returns the input element within the current element that is at the specified coordinates, relative to the current element's origin.</source>
          <target state="translated">현재 요소의 원점을 기준으로 지정된 좌표에 있는 현재 요소 내의 입력 요소를 반환합니다.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)">
          <source>The element child that is located at the given position.</source>
          <target state="translated">지정된 위치에 있는 요소 자식입니다.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)">
          <source><ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> is returned as the return type, because that type is a common interface for both <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> 해당 형식의 공통 인터페이스를 둘 다 이므로 반환 형식으로 반환 됩니다 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)">
          <source>You can then cast the return type appropriately, or use the interface instance for certain members that are defined by the <ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> interface.</source>
          <target state="translated">그런 다음 적절 하 게 반환 형식을 캐스팅 하거나에 정의 된 특정 멤버에 대 한 인스턴스를 사용할 수는 <ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)">
          <source>This method typically is not called from your application code.</source>
          <target state="translated">일반적으로이 메서드는 하지 응용 프로그램 코드에서 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)">
          <source>Calling this method is only appropriate if you intend to re-implement a substantial amount of the low level input features that are already present, such as recreating mouse device logic.</source>
          <target state="translated">이 메서드를 호출 하는 상당한 양의 마우스 장치 논리를 다시 만드는 등 존재 하는 하위 수준의 입력된 기능을 다시 구현 하려는 경우에 적절 한만 있습니다.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)">
          <source><ph id="ph1">&lt;xref:System.Windows.IContentHost&gt;</ph> contracts an <ph id="ph2">&lt;xref:System.Windows.IContentHost.InputHitTest%2A&gt;</ph> method with the same signature, which some elements choose to implement explicitly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.IContentHost&gt;</ph> 계약은 <ph id="ph2">&lt;xref:System.Windows.IContentHost.InputHitTest%2A&gt;</ph> 명시적으로 구현 하도록 선택 일부 요소는 동일한 서명으로 메서드.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.InvalidateArrange">
          <source>Invalidates the arrange state (layout) for the element.</source>
          <target state="translated">요소의 정렬 상태(레이아웃)를 무효화합니다.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.InvalidateArrange">
          <source>After the invalidation, the element will have its layout updated, which will occur asynchronously unless subsequently forced by <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.UpdateLayout" /&gt;</ph>.</source>
          <target state="translated">무효화 이후 해당 요소의 레이아웃은 업데이트되며, 이후에 <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.UpdateLayout" /&gt;</ph>이 강제로 지정하는 경우가 아니면 업데이트는 비동기적으로 수행됩니다.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateArrange">
          <source>Frequent calls to <ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> or in particular to <ph id="ph2">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> have significant performance consequences.</source>
          <target state="translated">자주 호출할 <ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> , 특히 <ph id="ph2">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> 성능이 크게 영향을 줄 합니다.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateArrange">
          <source>Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> in your code.</source>
          <target state="translated">따라서 다른에 대 한 후속 호출에 대 한 정확한 레이아웃 상태가 반드시 필요한 경우에이 메서드를 호출 하지 마십시오 <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> 코드에서입니다.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateArrange">
          <source>An advanced scenario where you might call <ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> is if you are creating a <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> for a dependency property that is not on a <ph id="ph3">&lt;xref:System.Windows.Freezable&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class that still influences the arrange pass of layout when it changes.</source>
          <target state="translated">호출할 수 있는 고급 시나리오에서 <ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> 만드는 경우이 <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> 에 있지 않은 종속성 속성에 대 한 한 <ph id="ph3">&lt;xref:System.Windows.Freezable&gt;</ph> 또는 <ph id="ph4">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 파생 클래스를 변경할 때 레이아웃의 정렬 단계에 영향을 주는 합니다.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.InvalidateMeasure">
          <source>Invalidates the measurement state (layout) for the element.</source>
          <target state="translated">요소의 측정 상태(레이아웃)를 무효화합니다.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateMeasure">
          <source>Calling this method also calls <ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> internally, there is no need to call <ph id="ph2">&lt;xref:System.Windows.UIElement.InvalidateMeasure%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> in succession.</source>
          <target state="translated">이 메서드를 호출 또한 호출 <ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> 내부적으로 호출을 할 필요가 없기 때문 <ph id="ph2">&lt;xref:System.Windows.UIElement.InvalidateMeasure%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> 연속적으로 합니다.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateMeasure">
          <source>After the invalidation, the element will have its layout updated, which will occur asynchronously, unless <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> is called to force a synchronous layout change.</source>
          <target state="translated">무효화 이후 요소가 해당 레이아웃은 업데이트 하지 않는 한 비동기적으로 발생 하는 갖습니다 <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> 동기 레이아웃 변경 내용을 적용 하기 위해 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateMeasure">
          <source>The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and in most common layout invalidation cases the layout system is calling the equivalent of this method when necessary.</source>
          <target state="translated">WPF 프레임 워크 수준 레이아웃 시스템은 고유 요소의 시각적 트리에 대 한 변경 내용 처리를 수행 하 고 레이아웃 시스템에서는 가장 일반적인 레이아웃 무효화 필요한 경우이 메서드에 해당 하는 호출 합니다.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateMeasure">
          <source>You should only call this method if you are producing a complete layout implementation, which does direct manipulation of the element tree, or similar advanced scenarios.</source>
          <target state="translated">직접 조작 요소 트리의 또는 유사한 고급 시나리오는 전체 레이아웃 구현을 생성 하는 경우에이 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateMeasure">
          <source>One such advanced scenario is if you are creating a <ph id="ph1">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> for a dependency property that is not on a <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class that still influences the measure pass of layout when it changes.</source>
          <target state="translated">이러한 고급 시나리오 중 하나를 만드는 경우이 <ph id="ph1">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> 에 있지 않은 종속성 속성에 대 한는 <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 파생 클래스를 변경할 때 레이아웃의 측정 단계에 영향을 주는 합니다.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateMeasure">
          <source>Frequent calls to <ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateMeasure%2A&gt;</ph> or in particular to <ph id="ph2">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> have significant performance consequences.</source>
          <target state="translated">자주 호출할 <ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateMeasure%2A&gt;</ph> , 특히 <ph id="ph2">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> 성능이 크게 영향을 줄 합니다.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateMeasure">
          <source>Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> in your code.</source>
          <target state="translated">따라서 다른에 대 한 후속 호출에 대 한 정확한 레이아웃 상태가 반드시 필요한 경우에이 메서드를 호출 하지 마십시오 <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> 코드에서입니다.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.InvalidateVisual">
          <source>Invalidates the rendering of the element, and forces a complete new layout pass.</source>
          <target state="translated">요소의 렌더링을 무효화하고 완전히 새로운 레이아웃 단계를 적용합니다.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.InvalidateVisual">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /&gt;</ph> is called after the layout cycle is completed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /&gt;</ph>는 레이아웃 주기가 완료된 후에 호출됩니다.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateVisual">
          <source>This method calls <ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> internally.</source>
          <target state="translated">이 메서드를 호출 <ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> 내부적으로 합니다.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateVisual">
          <source>This method is not generally called from your application code.</source>
          <target state="translated">이 메서드는 응용 프로그램 코드에서 일반적으로 호출 되지 됩니다.</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateVisual">
          <source>The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and would be calling the equivalent of this method when necessary already.</source>
          <target state="translated">WPF 프레임 워크 수준 레이아웃 시스템은 고유 요소의 시각적 트리에 대 한 변경 내용 처리를 수행 하며 필요한 경우이 메서드에 해당 하는 호출 될 이미 있습니다.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateVisual">
          <source>Calling this method is necessary only for advanced scenarios.</source>
          <target state="translated">이 메서드를 호출 하는 것은 고급 시나리오에만 필요 합니다.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateVisual">
          <source>One such advanced scenario is if you are creating a <ph id="ph1">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> for a dependency property that is not on a <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class that still influences the layout when it changes.</source>
          <target state="translated">이러한 고급 시나리오 중 하나를 만드는 경우이 <ph id="ph1">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> 에 있지 않은 종속성 속성에 대 한는 <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 파생 클래스를 변경할 때 레이아웃에 영향을 주는 합니다.</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsArrangeValid">
          <source>Gets a value indicating whether the computed size and position of child elements in this element's layout are valid.</source>
          <target state="translated">이 요소의 레이아웃에 있는 자식 요소의 계산된 크기 및 위치가 유효한지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsArrangeValid">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the size and position of layout are valid; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">레이아웃의 크기 및 위치가 유효하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsArrangeValid">
          <source>You can force arrangement to be invalidated by calling <ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> on this element (or its parents).</source>
          <target state="translated">호출 하 여 무효화 정렬을 적용할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> 이 요소 (또는 해당 부모)에 있습니다.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsArrangeValid">
          <source>This flags the layout for recomposition at such time as the layout system determines.</source>
          <target state="translated">에 때마다 같은 레이아웃 시스템 결정 재 컴퍼지션에 대 한 레이아웃 플래그 지정 합니다.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsArrangeValid">
          <source>Alternatively, an immediate call to <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> could be made, but this should only be done if it is certain that no further invalidations are pending (a large number of unnecessarily forced updates has performance consequences).</source>
          <target state="translated">직접 호출 또한 <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> 만들어질 수 있지만이 방법은 해야만 때문에 보류 중인 추가 무효화 작업이 없는 경우 (불필요 하 게 강제 업데이트 수가 많은 경우 성능이 저하 될을 가짐).</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsArrangeValid">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.IsArrangeValid%2A&gt;</ph> cannot be <ph id="ph2">`true`</ph> unless <ph id="ph3">&lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;</ph> is also <ph id="ph4">`true`</ph> (in the layout process, arrangement cannot be valid without measurement first being valid).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.IsArrangeValid%2A&gt;</ph> 일 수 없습니다 <ph id="ph2">`true`</ph> 하지 않는 한 <ph id="ph3">&lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;</ph> 이기도 <ph id="ph4">`true`</ph> (레이아웃 프로세스의 수 없는 경우가).</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsEnabled">
          <source>Gets or sets a value indicating whether this element is enabled in the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>에서 이 요소를 사용할지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsEnabled">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is enabled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">요소를 사용할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source>Note that this property is influenced by class-specific implementations of <ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabledCore%2A&gt;</ph> on particular elements, often at runtime.</source>
          <target state="translated">이 속성의 관련 클래스 구현 받습니다는 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabledCore%2A&gt;</ph> 런타임에 특정 요소에 있습니다.</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source>Therefore, the default value listed here is sometimes not effective.</source>
          <target state="translated">따라서 여기에 나열 된 기본값이 않습니다 경우가 유효 합니다.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source>For instance, a <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ScrollBar&gt;</ph> will be <ph id="ph2">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> <ph id="ph3">`false`</ph> whenever it is determined that there is no need to support a scrollbar.</source>
          <target state="translated">예를 들어, 한 <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ScrollBar&gt;</ph> 됩니다 <ph id="ph2">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> <ph id="ph3">`false`</ph> 때마다 것은 스크롤 막대를 지원할 필요가 없는 있다는 것입니다.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source>Attempting to set this value will also potentially be overridden by the value returned by <ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabledCore%2A&gt;</ph>.</source>
          <target state="translated">이 값을 설정 하는 잠재적으로으로 재정의 됩니다에서 반환한 값 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabledCore%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source>Elements that are not enabled do not participate in hit testing or focus and therefore will not be sources of input events.</source>
          <target state="translated">활성화 되지 않은 요소 적중 테스트 나 포커스에 참여 하지 않는 하며 따라서 입력된 이벤트의 소스가 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source>The following example shows a handler on one button that when executed will set <ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> <ph id="ph2">`false`</ph> on another named button <ph id="ph3">`b1`</ph>.</source>
          <target state="translated">다음 예제에서는 처리기 하나 단추 하에서는 실행된 될 때 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> <ph id="ph2">`false`</ph> 명명 된 단추에 <ph id="ph3">`b1`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.IsEnabledChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsEnabled" /&gt;</ph> property on this element changes.</source>
          <target state="translated">이 요소의 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsEnabled" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsEnabledChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">이 멤버는 한 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트, 라우트된 이벤트가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsEnabledCore">
          <source>Gets a value that becomes the return value of <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsEnabled" /&gt;</ph> in derived classes.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsEnabled" /&gt;</ph>의 반환 값이 되는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabledCore">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is enabled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">요소를 사용할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabledCore">
          <source>The default implementation of this property caches the value and also calculates whether the parent element of this element is enabled.</source>
          <target state="translated">이 속성의 기본 구현 값을 캐시 하 고도이 요소의 부모 요소를 사용할 수 있는지 여부를 계산 합니다.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabledCore">
          <source>(If the parent is not enabled, the child element cannot be effectively enabled in practical <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.) If you choose to override this implementation, make certain that you call the base implementation to preserve this behavior.</source>
          <target state="translated">(부모를 사용 하지 않는 경우 자식 요소가 없습니다 사용 하도록 유용한 <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.) 이 구현을 재정의 확인 하려는 경우이 동작을 유지 하는 기본 구현을 호출 합니다.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabledCore">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Controls.Primitives.ScrollBar" /&gt;</ph> class provides an existing override implementation of this property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Controls.Primitives.ScrollBar" /&gt;</ph> 클래스는이 속성의 기존 재정의 구현을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabledCore">
          <source>This override determines whether the content inside the content presentation area exceeds the available area.</source>
          <target state="translated">이 재정의 콘텐츠 표시 영역 내에서 콘텐츠 사용할 수 있는 영역을 초과 하는지 여부를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabledCore">
          <source>If the content does exceed the area, the scrollbar portion is enabled.</source>
          <target state="translated">콘텐츠 영역을 초과 하는 스크롤 막대 부분이 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabledCore">
          <source>Otherwise, the scrollbar is not enabled.</source>
          <target state="translated">그렇지 않은 경우 스크롤 막대 사용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsEnabledProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsEnabled" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsEnabled" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsFocused">
          <source>Gets a value that determines whether this element has logical focus.</source>
          <target state="translated">이 요소에 논리 포커스가 있는지 여부를 결정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsFocused">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element has logical focus; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 요소에 논리적 포커스가 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application.</source>
          <target state="translated">응용 프로그램에 여러 포커스 부서와 같은 응용 프로그램의 나머지 부분에서는 메뉴 내용 사이의 논리적 포커스와 키보드 포커스가 달라질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus.</source>
          <target state="translated">이 시나리오에서는 응용 프로그램 UI의 한 요소에 키보드 포커스만 될 수 있습니다, 그리고 다른 포커스 사업부의 특정 요소 논리적 포커스 수 계속 유지 하는 반면 합니다.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>For more information on logical focus, see <bpt id="p1">[</bpt>Focus Overview<ept id="p1">](~/docs/framework/wpf/advanced/focus-overview.md)</ept>.</source>
          <target state="translated">논리 포커스에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>포커스 개요<ept id="p1">](~/docs/framework/wpf/advanced/focus-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>You do not set focus by setting this property (it is read-only).</source>
          <target state="translated">(읽기 전용은)이이 속성을 설정 하 여 포커스를 설정 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>The typical use for this property is to use it as a dependency property for a <ph id="ph1">&lt;xref:System.Windows.Setter&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.EventTrigger&gt;</ph>.</source>
          <target state="translated">이 속성에 대 한 일반적인 용도 대 한 종속성 속성으로 사용 하는 것을 <ph id="ph1">&lt;xref:System.Windows.Setter&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.EventTrigger&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>To set focus programmatically, call <ph id="ph1">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph>.</source>
          <target state="translated">프로그래밍 방식으로 포커스를 설정 하려면 호출 <ph id="ph1">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>Focus can also be set by user action or by control implementations, which possibly include mouse capture behavior.</source>
          <target state="translated">사용자 동작으로 나 가능 마우스 캡처의 동작을 포함 하는 컨트롤 구현으로 포커스를 설정할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>The following example is a code handler that changes the background of a control when it is focused.</source>
          <target state="translated">다음 예제는 것에 포커스가 있을 때 컨트롤의 배경을 변경 하는 코드 처리기입니다.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>Another common way to achieve this same effect is to place a <ph id="ph1">&lt;xref:System.Windows.Trigger&gt;</ph> in the <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph> of a control; this approach does not require handling specific events with code-behind and allows designers greater access to the interactive and graphical nature of the <ph id="ph3">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>.</source>
          <target state="translated">이를 위해서는 동일한 다른 일반적인 방법은 배치 하는 것을 <ph id="ph1">&lt;xref:System.Windows.Trigger&gt;</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph> ; 컨트롤의이 방법은 코드 숨김 특정 이벤트를 처리 하지 않아도 및 디자이너의 대화형 및 그래픽 특성에 보다 쉽게 액세스할 수 있습니다 <ph id="ph3">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>For an example, see <bpt id="p1">[</bpt>How to: Create an Outer Glow Effect<ept id="p1">](http://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1)</ept>.</source>
          <target state="translated">예를 들어 참조 <bpt id="p1">[</bpt>하는 방법: 외부 글로우 효과 만드는<ept id="p1">](http://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsFocusedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsFocused" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsFocused" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source>Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content.</source>
          <target state="translated">이 요소가 렌더링된 콘텐츠의 일부에서 롤오버 테스트 결과로 반환될 수 있는지 여부를 선언하는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element could be returned as a hit test result from at least one point; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 요소가 최소한 하나 이상의 지점에서 적중 테스트 결과로 반환될 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source>The effective value of this property is influenced by the relative positions of hit testable elements in the logical tree.</source>
          <target state="translated">이 속성의 유효 값은 논리적 트리에서 적중 횟수 테스트 가능한 요소의 상대적 위치를 받습니다.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source>For instance, if an element is a child element of an element that is not hit test visible, the effective value of the property on the child will remain <ph id="ph1">`false`</ph>, even if attempting to set that value locally.</source>
          <target state="translated">자식 요소인 요소가 있는 요소를 적중 테스트를 표시 하, 자식 요소에서 속성의 유효 값이 유지 됩니다 예를 들어, <ph id="ph1">`false`</ph>로컬로 해당 값을 설정 하는 경우에 합니다.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source>For this reason, it is important that you do not set <ph id="ph1">&lt;xref:System.Windows.UIElement.IsHitTestVisible%2A&gt;</ph> to <ph id="ph2">`false`</ph> on a composited control unless you do not want any input or hit testing on that control.</source>
          <target state="translated">이러한 이유로 반드시 설정 하지 않으면 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsHitTestVisible%2A&gt;</ph> 를 <ph id="ph2">`false`</ph> 복합 컨트롤에 입력 하거나 해당 컨트롤에 대 한 테스트에 도달 하지 않으면 하지 않는 한 합니다.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source>For more information on hit testing, see <bpt id="p1">[</bpt>Hit Testing in the Visual Layer<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md)</ept>.</source>
          <target state="translated">적중 테스트에 대한 자세한 내용은 <bpt id="p1">[</bpt>시각적 계층에서 테스트 적중<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.IsHitTestVisibleChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsHitTestVisible" /&gt;</ph> dependency property changes on this element.</source>
          <target state="translated">이 요소의 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsHitTestVisible" /&gt;</ph> 종속성 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsHitTestVisibleChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">이 멤버는 한 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트, 라우트된 이벤트가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsHitTestVisibleProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsHitTestVisible" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsHitTestVisible" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsInputMethodEnabled">
          <source>Gets a value indicating whether an input method system, such as an <ph id="ph1">[!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)]</ph>,  is enabled for processing the input to this element.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)]</ph> 등의 입력 메서드 시스템에서 이 요소에 대한 입력을 처리할 수 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsInputMethodEnabled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if an input method is active; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">입력 메서드가 활성 상태이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsInputMethodEnabled">
          <source>The default value of the underlying attached property is <ph id="ph1">&lt;see langword="true;" /&gt;</ph> however, this will be influenced by the actual state of input methods at runtime.</source>
          <target state="translated">그러나 기본 연결 된 속성의 기본값은 <ph id="ph1">&lt;see langword="true;" /&gt;</ph> 런타임에 입력된 방법의 실제 상태에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsInputMethodEnabled">
          <source>This property returns the value that is returned by the attached property <ph id="ph1">&lt;xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType&gt;</ph> for the currently enabled input methods (keyboard, speech, and other input devices).</source>
          <target state="translated">이 속성은 연결 된 속성에서 반환 되는 값을 반환 <ph id="ph1">&lt;xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType&gt;</ph> 현재 활성화 된 입력된 방법 (키보드, 음성 변환, 및 기타 입력된 장치)에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsKeyboardFocused">
          <source>Gets a value indicating whether this element has keyboard focus.</source>
          <target state="translated">이 요소에 키보드 포커스가 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsKeyboardFocused">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocused">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element has keyboard focus; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 요소에 키보드 포커스가 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocused">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocused">
          <source>Changes to the determined value of this property may be accompanied by focus-related events.</source>
          <target state="translated">이 속성의 결정된 된 값에 대 한 변경 포커스 관련 이벤트 표시 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocused">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph> are commonly used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph> 일반적으로 사용 되 클래스 이벤트 처리기 내에서 다른 입력 관련 이벤트에 대 한 예를 들어 요소에 키보드 포커스를 이미 되거나 마우스 하는지를 결정 하는 이벤트 및 키보드 이벤트 함께 발생 하는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocused">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocused">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocused">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocused">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.IsKeyboardFocusedChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsKeyboardFocused" /&gt;</ph> property changes on this element.</source>
          <target state="translated">이 요소의 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsKeyboardFocused" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsKeyboardFocusedChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">이 멤버는 한 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트, 라우트된 이벤트가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsKeyboardFocusedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsKeyboardFocused" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsKeyboardFocused" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsKeyboardFocusWithin">
          <source>Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.</source>
          <target state="translated">키보드 포커스가 요소 또는 시각적 트리의 자식 요소 내에 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsKeyboardFocusWithin">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocusWithin">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if keyboard focus is on the element or its child elements; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">키보드 포커스가 요소 또는 자식 요소에 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocusWithin">
          <source>Changes to the value of this property typically raise the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;</ph> event, unless a derived class has overridden <ph id="ph2">&lt;xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A&gt;</ph> to suppress the event.</source>
          <target state="translated">이 속성의 값을 변경 하는 일반적으로 발생는 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;</ph> 이벤트의 경우 파생된 클래스 재정의 하지 않았다면 <ph id="ph2">&lt;xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A&gt;</ph> 이벤트를 표시 하지 않으려면입니다.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocusWithin">
          <source>You do not set this property directly, but you can set the focus to an element by calling <ph id="ph1">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph>, or by making a <ph id="ph2">&lt;xref:System.Windows.UIElement.MoveFocus%2A&gt;</ph> request.</source>
          <target state="translated">이 속성은 직접 설정 하지는 않지만 호출 하 여 요소에 포커스를 설정할 수 <ph id="ph1">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph>, 하거나 여는 <ph id="ph2">&lt;xref:System.Windows.UIElement.MoveFocus%2A&gt;</ph> 요청 합니다.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocusWithin">
          <source>Either of these method calls might change this property value.</source>
          <target state="translated">이 속성 값이 변경 될 수 있습니다 이러한 메서드 호출 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocusWithin">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph> are typically used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph> 는 일반적으로 사용 되는 클래스의 이벤트 처리기 내에서 다른 입력 관련 이벤트에 대 한 예를 들어 요소에 키보드 포커스를 이미 되거나 마우스 하는지를 결정 하는 이벤트 및 키보드 이벤트 함께 발생 하는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocusWithin">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocusWithin">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocusWithin">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocusWithin">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /&gt;</ph> property changes on this element.</source>
          <target state="translated">이 요소의 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">이 멤버는 한 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트, 라우트된 이벤트가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsKeyboardFocusWithinProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsManipulationEnabled">
          <source>Gets or sets a value that indicates whether manipulation events are enabled on this <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 요소에서 조작 이벤트가 사용되는지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsManipulationEnabled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if manipulation events are enabled on this <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>에서 조작 이벤트가 사용되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsManipulationEnabled">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsManipulationEnabled">
          <source>Set this property to true if you want the <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> to receive the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.UIElement.ManipulationStarted&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph>, and <ph id="ph7">&lt;xref:System.Windows.UIElement.ManipulationCompleted&gt;</ph> events.</source>
          <target state="translated">이 속성을 원하는 경우 true로 설정 된 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 받을 수는 <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.UIElement.ManipulationStarted&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph>, 및 <ph id="ph7">&lt;xref:System.Windows.UIElement.ManipulationCompleted&gt;</ph> 이벤트.</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsManipulationEnabled">
          <source>For more information about manipulations, see the <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">조작에 대 한 자세한 내용은 참조는 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsManipulationEnabled">
          <source>For an example of an application that responds to manipulations, see <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">예를 보려면 조작에 응답 하는 응용 프로그램 참조 <bpt id="p1">[</bpt>연습: 만드는 첫 번째 터치 응용 프로그램<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsManipulationEnabled">
          <source>The following example creates an application that has a red Rectangle.</source>
          <target state="translated">다음 예제에는 빨간색 사각형을는 응용 프로그램을 만듭니다.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsManipulationEnabled">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.IsManipulationEnabled%2A&gt;</ph> property of the Rectangle is set to true and the application's window subscribes to the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph> events.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.IsManipulationEnabled%2A&gt;</ph> 사각형의 속성이 true이 고 응용 프로그램의 창 구독 하는 <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsManipulationEnabled">
          <source>This example is part of a larger example in <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">이 예제는에 보다 큰 예제의 일부 <bpt id="p1">[</bpt>연습: 만드는 첫 번째 터치 응용 프로그램<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsManipulationEnabledProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsManipulationEnabled" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsManipulationEnabled" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsMeasureValid">
          <source>Gets a value indicating whether the current size returned by layout measure is valid.</source>
          <target state="translated">레이아웃 측정으로 반환된 현재 크기가 올바른지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMeasureValid">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the measure pass of layout returned a valid and current value; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">레이아웃의 측정 처리 단계에서 올바른 최신 값이 반환되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMeasureValid">
          <source>You can force measurement and arrangement to be invalidated by calling <ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateMeasure%2A&gt;</ph> on this element (or any parent element up the visual tree).</source>
          <target state="translated">측정 및 정렬이를 호출 하 여 무효화 강제로 수 <ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateMeasure%2A&gt;</ph> 이 요소 (또는 시각적 트리를 상위 요소).</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMeasureValid">
          <source>This designates the layout for recomposition asynchronously, occurring at a time determined by the layout system.</source>
          <target state="translated">이렇게 지정 재 컴퍼지션에 대 한 레이아웃 비동기적으로 레이아웃 시스템에 의해 결정 되는 시간에 됩니다.</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMeasureValid">
          <source>Alternatively, you could make an immediate call to <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph>.</source>
          <target state="translated">직접 호출을 만들 수 또는 <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMeasureValid">
          <source>However, you should only call <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> if it is likely that no further invalidations are pending (a large number of unnecessarily forced updates will have performance consequences).</source>
          <target state="translated">하지만만 호출 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> 때문에 보류 중인 추가 무효화 작업이 없는 것일 (불필요 하 게 강제 업데이트 수가 많은 성능 영향을 줄 합니다).</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMeasureValid">
          <source>If <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;</ph> is <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Windows.UIElement.IsArrangeValid%2A&gt;</ph> must also be <ph id="ph4">`false`</ph> (by the enforced logic of the layout process, arrangement cannot be valid without measurement first being valid).</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;</ph> 은 <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Windows.UIElement.IsArrangeValid%2A&gt;</ph> 수도 있어야 <ph id="ph4">`false`</ph> (레이아웃 프로세스의 적용된 하는 논리를 통해 수 없는 경우가).</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source>Gets a value indicating whether the mouse is captured to this element.</source>
          <target state="translated">이 요소에 마우스가 캡처되는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element has mouse capture; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">요소에 마우스가 캡처되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source>Mouse capture state is related to in-process drag-and-drop operations.</source>
          <target state="translated">마우스 캡처 상태는 in-process 끌어서 놓기 작업 관련이 있습니다.</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source>The following example turns the mouse capture state on or off based on whether the mouse is already captured for the element.</source>
          <target state="translated">다음 예제에서는 마우스 캡처 상태를 설정 또는 해제는 요소에 대해 이미 캡처되어 있는지 여부에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source>If mouse capture is elsewhere, the mouse capture is set to that element.</source>
          <target state="translated">마우스 캡처 이면, 다른 위치에서 해당 요소에 마우스 캡처가 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source>If the element had mouse capture, it is cleared by calling <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType&gt;</ph> with a null input.</source>
          <target state="translated">호출 하 여 선택 취소 됨 요소에 마우스 캡처가 있으면 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType&gt;</ph> 는 null 입력 합니다.</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.IsMouseCapturedChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseCaptured" /&gt;</ph> property changes on this element.</source>
          <target state="translated">이 요소의 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseCaptured" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsMouseCapturedChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">이 멤버는 한 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트, 라우트된 이벤트가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsMouseCapturedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseCaptured" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseCaptured" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsMouseCaptureWithin">
          <source>Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree.</source>
          <target state="translated">마우스 캡처를 이 요소 또는 해당 시각적 트리의 자식 요소가 보유하는지 여부를 결정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsMouseCaptureWithin">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptureWithin">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element or a contained element has mouse capture; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 요소 또는 포함된 요소에 마우스 캡처가 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptureWithin">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptureWithin">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptureWithin">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptureWithin">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.IsMouseCaptureWithinChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /&gt;</ph> changes on this element.</source>
          <target state="translated">이 요소의 <ph id="ph1">&lt;see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /&gt;</ph> 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsMouseCaptureWithinChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">이 멤버는 한 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트, 라우트된 이벤트가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsMouseCaptureWithinProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.</source>
          <target state="translated">마우스 포인터의 위치가 요소 합치기를 고려한 적중 횟수 테스트 결과와 일치하는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the mouse pointer is over the same element result as a hit test; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 마우스 포인터가 적중 횟수 테스트와 동일한 요소 결과 위에 있으면 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>Unlike <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph>, this property is only <ph id="ph2">`true`</ph> if the mouse pointer is over the literal element—as it is for a hit test.</source>
          <target state="translated">와 달리 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph>,이 속성은만 <ph id="ph2">`true`</ph> 마우스 포인터가 literal 요소 위에 있으면-적중 횟수 테스트의 경우와 합니다.</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be <ph id="ph1">`false`</ph>.</source>
          <target state="translated">마우스 포인터가 자식 요소 위에 있으면 특히 요소의 하위 수준 템플릿 및 합성 포함 된 요소를 통해이 속성은 됩니다 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</source>
          <target state="translated">컨트롤은 복합 방법을 모를 경우 (예를 들어이 속성 사용 하면 사용자 지정 컨트롤 서식 파일에서 정의 하는 컨트롤에 대 한),이 속성에서 예기치 않은 결과 반환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>For most scenarios where you are not authoring controls, use <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> instead.</source>
          <target state="translated">컨트롤 제작 하지 않는 대부분의 시나리오에 대 한 사용 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> 대신 합니다.</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>If the mouse is captured by this element, and this property is <ph id="ph1">`true`</ph> at time of capture, this property will continue to return <ph id="ph2">`true`</ph> until mouse capture is lost and the pointer is not over its bounds.</source>
          <target state="translated">이 요소에 마우스가 캡처되는지 경우 및이 속성은 <ph id="ph1">`true`</ph> 캡처 시이 속성은 반환할 계속 <ph id="ph2">`true`</ph> 때까지 마우스 캡처가 손실 되 고 해당 영역 위에 포인터가 않습니다.</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.IsMouseDirectlyOverChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /&gt;</ph> property changes on this element.</source>
          <target state="translated">이 요소의 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsMouseDirectlyOverChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">이 멤버는 한 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트, 라우트된 이벤트가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsMouseDirectlyOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).</source>
          <target state="translated">마우스 포인터가 이 요소(시각적 트리의 자식 요소 포함) 위에 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if mouse pointer is over the element or its child elements; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">마우스 포인터가 요소 또는 자식 요소 위에 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>Typically, controls are composited such that the various elements inside the control (the visual tree) will all report the mouse state for the containing control.</source>
          <target state="translated">일반적으로 컨트롤은 컨트롤 (시각적 트리) 내의 다양 한 요소가 모두 포함 하는 컨트롤에 대 한 마우스 상태 보고 되도록 합성입니다.</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> style control will report <ph id="ph2">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> as <ph id="ph3">`true`</ph> if the mouse is anywhere over its geometry, including any <ph id="ph4">&lt;xref:System.Windows.Controls.ListBoxItem&gt;</ph>.</source>
          <target state="translated">예를 들어는 <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> 스타일의 컨트롤에서 보고 <ph id="ph2">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> 으로 <ph id="ph3">`true`</ph> 기 위에 마우스가 위치 하는 경우 포함 하 여 <ph id="ph4">&lt;xref:System.Windows.Controls.ListBoxItem&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>Although an analogous "IsMouseOverChanged" event does not exist, several similar events do.</source>
          <target state="translated">유사한 "IsMouseOverChanged" 이벤트가 존재 하지 않더라도 여러 비슷한 이벤트 수행 합니다.</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>For example, you can handle <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;</ph>.</source>
          <target state="translated">예를 들어 처리할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>If this element captures the mouse, this property remains <ph id="ph1">`true`</ph> until mouse capture is lost and the mouse pointer leaves the element bounds.</source>
          <target state="translated">이 속성은이 요소에서 마우스를 캡처할 경우 <ph id="ph1">`true`</ph> 마우스 캡처가 손실 되 고 마우스 포인터가 요소 범위를 벗어날 때까지 합니다.</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>Some controls deliberately capture the mouse on certain actions that do not appear to directly involve the mouse.</source>
          <target state="translated">일부 컨트롤 마우스에 직접 표시 되지 않는 특정 작업에서 마우스를 의도적으로 캡처합니다.</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>This can lead to <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> being <ph id="ph2">`true`</ph> even though the mouse has not apparently moved.</source>
          <target state="translated">이로 인해 발생할 수 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> 되 고 <ph id="ph2">`true`</ph> 마우스 움직이지 하는 경우에 합니다.</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>The following example references this property as the property type of a <ph id="ph1">&lt;xref:System.Windows.Trigger&gt;</ph>, part of a <ph id="ph2">\&lt;</ph>Style.Triggers&gt; block.</source>
          <target state="translated">다음 예제에서는이 속성을 속성 유형으로 참조 한 <ph id="ph1">&lt;xref:System.Windows.Trigger&gt;</ph>의 일부인는 <ph id="ph2">\&lt;</ph>Style.Triggers &gt; 블록입니다.</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>If the mouse is over the control, the control text turns blue and the cursor becomes a hand.</source>
          <target state="translated">마우스가 컨트롤 위에 컨트롤 텍스트가 파란색으로 바뀌고 커서가 손 모양입니다.</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsMouseOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseOver" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseOver" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsStylusCaptured">
          <source>Gets a value indicating whether the stylus is captured by this element.</source>
          <target state="translated">이 요소에 의해 스타일러스가 캡처되었는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsStylusCaptured">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptured">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element has stylus capture; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">요소에 스타일러스가 캡처되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptured">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptured">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptured">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptured">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptured">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptured">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptured">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.IsStylusCapturedChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusCaptured" /&gt;</ph> property changes on this element.</source>
          <target state="translated">이 요소의 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusCaptured" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsStylusCapturedChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">이 멤버는 한 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트, 라우트된 이벤트가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsStylusCapturedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusCaptured" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusCaptured" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsStylusCaptureWithin">
          <source>Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree.</source>
          <target state="translated">스타일러스 캡처를 이 요소에서 보유하는지 또는 요소 범위 및 해당하는 시각적 트리 내의 요소에서 보유하는지 결정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsStylusCaptureWithin">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptureWithin">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element or a contained element has stylus capture; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 요소 또는 포함된 요소에 스타일러스 캡처가 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptureWithin">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptureWithin">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptureWithin">
          <source>For more information, see <bpt id="p1">[</bpt>Touch Input Support in Windows Vista<ept id="p1">](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)</ept> and <bpt id="p2">[</bpt>Input Overview<ept id="p2">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>Windows Vista의 입력 지원 터치<ept id="p1">](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)</ept> 및 <bpt id="p2">[</bpt>입력 개요<ept id="p2">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptureWithin">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptureWithin">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptureWithin">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptureWithin">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.IsStylusCaptureWithinChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /&gt;</ph> property changes on this element.</source>
          <target state="translated">이 요소의 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsStylusCaptureWithinChanged">
          <source>This is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">이 한 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트, 라우트된 이벤트가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsStylusCaptureWithinProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.</source>
          <target state="translated">스타일러스의 위치가 요소 합치기를 고려한 적중 횟수 테스트 결과와 일치하는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stylus pointer is over the same element result as a hit test; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">스타일러스 포인터가 적중 테스트와 같은 요소 결과 위에 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>Unlike <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;</ph>, this property is only <ph id="ph2">`true`</ph> if the stylus is over the element.</source>
          <target state="translated">와 달리 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;</ph>,이 속성은만 <ph id="ph2">`true`</ph> 스타일러스가 요소 위에 있는 경우.</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>If the stylus is instead over a child element or over elements that are part of an element's deeper compositing (the visual tree), this property will be <ph id="ph1">`false`</ph>.</source>
          <target state="translated">스타일러스가 요소의 깊은 합성 (시각적 트리)에 있는 요소 또는 자식 요소 위에 있는 경우이 속성은 됩니다 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</source>
          <target state="translated">컨트롤은 복합 방법을 모를 경우 (예를 들어이 속성 사용 하면 사용자 지정 컨트롤 서식 파일에서 정의 하는 컨트롤에 대 한),이 속성에서 예기치 않은 결과 반환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>For most scenarios where you are not authoring controls, use <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;</ph> instead.</source>
          <target state="translated">컨트롤 제작 하지 않는 대부분의 시나리오에 대 한 사용 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;</ph> 대신 합니다.</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>If this element has stylus capture and this property is <ph id="ph1">`true`</ph> at the time of capture, this property remains <ph id="ph2">`true`</ph> until stylus capture is lost and the stylus is not over its bounds.</source>
          <target state="translated">이 속성은이 요소에 스타일러스 캡처가 경우 <ph id="ph1">`true`</ph> 캡처 시이 속성은 <ph id="ph2">`true`</ph> 스타일러스 캡처를 손실 하 고는 스타일러스가 범위 위로 때까지 합니다.</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.IsStylusDirectlyOverChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /&gt;</ph> property changes on this element.</source>
          <target state="translated">이 요소의 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsStylusDirectlyOverChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">이 멤버는 한 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트, 라우트된 이벤트가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsStylusDirectlyOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsStylusOver">
          <source>Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).</source>
          <target state="translated">스타일러스 커서가 이 요소(시각적 자식 요소 포함) 위에 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsStylusOver">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if stylus cursor is over the element or its child elements; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">스타일러스 커서가 요소 또는 자식 요소 위에 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusOver">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusOver">
          <source>If this element has stylus capture, this property will continue to return <ph id="ph1">`true`</ph> until stylus capture is lost and the pointer is out of its bounds.</source>
          <target state="translated">이 요소에 스타일러스 캡처가 있는 경우이 속성은 반환할 계속 <ph id="ph1">`true`</ph> 스타일러스 캡처를 손실 하 고 포인터의 범위를 벗어났습니다.</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusOver">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusOver">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusOver">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusOver">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusOver">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusOver">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsStylusOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusOver" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusOver" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsVisible">
          <source>Gets a value indicating whether this element is visible in the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.</source>
          <target state="translated">이 요소가 <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>에 표시되는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsVisible">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsVisible">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is visible; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">요소가 표시되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsVisible">
          <source>Determination of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph> value takes all factors of layout into account.</source>
          <target state="translated">결정은 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph> 값 레이아웃의 모든 요소를 고려 합니다.</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsVisible">
          <source>In contrast, <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>, which is a settable property, only indicates the intention to programmatically make an element visible or invisible.</source>
          <target state="translated">반면, <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>를 프로그래밍 방식으로 요소 표시 되거나 숨겨지도록 설정 하려는 의도 표시만 설정할 수 있는 속성인 합니다.</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsVisible">
          <source>Elements where <ph id="ph1">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph> is <ph id="ph2">`false`</ph> do not participate in input events (or commands), do not influence either the measure or arrange passes of layout, are not focusable, are not in a tab sequence, and will not be reported in hit testing.</source>
          <target state="translated">요소 위치 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph> 은 <ph id="ph2">`false`</ph> 입력된 이벤트 (또는 명령)에 참여을 수행 하지 않는 하지 측정에 영향을 줄 또는 정렬 전달 레이아웃의, 포커스를 받을 수, 탭 순서에 없는 및 적중 테스트에 보고 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsVisible">
          <source>In contrast, elements where <ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> is <ph id="ph2">`false`</ph> will still participate in events and commands, and hit testing, but are also not focusable.</source>
          <target state="translated">반대로, 요소 위치 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> 은 <ph id="ph2">`false`</ph> 이벤트 및 명령 및 적중 테스트에 관여 하면서도 하지 포커스를 받을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsVisible">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsVisible">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsVisible">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsVisible">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.IsVisibleChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsVisible" /&gt;</ph> property changes on this element.</source>
          <target state="translated">이 요소의 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsVisible" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsVisibleChanged">
          <source>This event is not raised if the element is not being rendered by the layout system, for reasons other than the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph> property.</source>
          <target state="translated">요소 레이아웃 시스템의 값이 아닌 다른 이유로 렌더링 되지 않으면 경우이 이벤트가 발생 하지 않습니다는 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsVisibleChanged">
          <source>For example, the element might not have an associated visual.</source>
          <target state="translated">예를 들어 요소에 연결 된 표시가 없을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsVisibleChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">이 멤버는 한 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트, 라우트된 이벤트가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsVisibleProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsVisible" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsVisible" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.KeyDown">
          <source>Occurs when a key is pressed while focus is on this element.</source>
          <target state="translated">이 요소에 포커스가 있는 동안 키를 누르면 발생합니다.</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>Key handling interacts with other platform features such as commanding and text composition.</source>
          <target state="translated">키 처리 명령 및 텍스트 컴퍼지션 등 다른 플랫폼의 기능으로 작용합니다.</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph> event is a lower-level text input event that might not behave as expected on certain controls.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph> 이벤트는 하위 수준의 텍스트 입력된 이벤트를 특정 컨트롤에 예상 대로 동작 하지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</source>
          <target state="translated">일부 컨트롤은 컨트롤 합성 클래스 처리에 더 높은 수준의 버전의 텍스트를 제공 하는 입력 처리 및 관련 이벤트 또는 때문입니다.</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewKeyDown&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewKeyDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnKeyDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnKeyDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.KeyDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.KeyDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.KeyDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.KeyDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.KeyDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.KeyDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.KeyDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.KeyDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.KeyUp">
          <source>Occurs when a key is released while focus is on this element.</source>
          <target state="translated">이 요소에 포커스가 있는 동안 키를 놓을 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType&gt;</ph> attached event for this class so that  <ph id="ph2">&lt;xref:System.Windows.UIElement.KeyUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.KeyUp&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.KeyUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.KeyUp&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyUp">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyUp">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewKeyUp&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewKeyUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnKeyUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnKeyUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.KeyUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.KeyUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.KeyUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.KeyUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.KeyUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.KeyUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.KeyUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.KeyUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.LayoutUpdated">
          <source>Occurs when the layout of the various visual elements associated with the current <ph id="ph1">&lt;see cref="T:System.Windows.Threading.Dispatcher" /&gt;</ph> changes.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Windows.Threading.Dispatcher" /&gt;</ph>와 연결된 다양한 시각적 요소의 레이아웃이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LayoutUpdated">
          <source>A layout update can occur as a result of a property change, a window resize, or an explicit user request.</source>
          <target state="translated">레이아웃 업데이트 속성 변경, 창 크기 조정 또는 명시적인 사용자 요청으로 인해 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LayoutUpdated">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">이 멤버는 한 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트, 라우트된 이벤트가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.LostFocus">
          <source>Occurs when this element loses logical focus.</source>
          <target state="translated">이 요소가 논리 포커스를 손실하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope.</source>
          <target state="translated">메서드 호출을 사용하여 의도적으로 포커스를 다른 위치로 이동했지만 이전 키보드 포커스가 다른 범위에 존재하는 경우 논리적 포커스와 키보드 포커스가 달라집니다.</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>In this scenario, keyboard focus remains where it is, and the element where a <ph id="ph1">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph> method is called still gets logical focus.</source>
          <target state="translated">이 시나리오, 키보드 포커스 위치를 유지, 및 요소에 있는 한 <ph id="ph1">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph> 메서드는 여전히 논리적 포커스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>A more precise interpretation of this event is that it is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph> property of an element in the route changes from <ph id="ph2">`true`</ph> to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">이 이벤트의 보다 정확 하 게 설명은 발생할 때의 값은 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph> 에서 경로에 있는 요소의 속성 변경 <ph id="ph2">`true`</ph> 를 <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">이 이벤트는 버블링 라우팅을 사용 하므로 포커스를 손실 하는 요소는 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that gained focus.</source>
          <target state="translated">확인은 <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> 에 포커스가 있는 실제 요소를 확인 하기 위해 이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>There is no corresponding tunneling event.</source>
          <target state="translated">해당 터널링 이벤트가 없습니다.</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostFocus%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.LostFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostFocus" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostFocus" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>Occurs when the keyboard is no longer focused on this element,.</source>
          <target state="translated">이 요소에 더 이상 키보드 포커스가 없으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">이 이벤트는 버블링 라우팅을 사용 하므로 포커스를 잃은 요소 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost focus.</source>
          <target state="translated">확인은 <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> 에 포커스를 잃은 실제 요소를 확인 하기 위해 이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostKeyboardFocus%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.LostKeyboardFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostKeyboardFocus" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostKeyboardFocus" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostKeyboardFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostKeyboardFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostKeyboardFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostKeyboardFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostKeyboardFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>Occurs when this element loses mouse capture.</source>
          <target state="translated">이 요소가 마우스 캡처를 손실하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds.</source>
          <target state="translated">마우스를 캡처한 요소 포인터가 해당 경계 밖에 있는 경우에 마우스 입력을 받습니다.</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>The mouse is typically captured only during drag-and-drop operations.</source>
          <target state="translated">마우스는 끌어서 놓기 작업 중에 일반적으로 캡처됩니다.</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">이 이벤트는 버블링 라우팅을 사용 하므로 캡처를 손실 하는 요소는 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost capture.</source>
          <target state="translated">확인 된 <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> 이벤트 데이터 캡처를 손실 하는 실제 요소를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.LostMouseCapture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.LostMouseCapture&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.LostMouseCapture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.LostMouseCapture&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>There is no defined corresponding tunneling event.</source>
          <target state="translated">정의 된 해당 터널링 이벤트가 없습니다.</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostMouseCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostMouseCapture%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.LostMouseCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostMouseCapture" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostMouseCapture" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostMouseCaptureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostMouseCaptureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostMouseCaptureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostMouseCaptureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostMouseCaptureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>Occurs when this element loses stylus capture.</source>
          <target state="translated">이 요소가 스타일러스 캡처를 손실하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</source>
          <target state="translated">스타일러스를 캡처한 요소 포인터가 해당 경계 밖에 있는 경우에 스타일러스 입력을 받습니다.</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>The stylus is typically captured only during drag-and-drop operations.</source>
          <target state="translated">스타일러스가 일반적으로 끌어서 놓기 작업 중에 캡처됩니다.</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">이 이벤트는 버블링 라우팅을 사용 하므로 포커스를 손실 하는 요소는 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost focus.</source>
          <target state="translated">확인은 <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> 에 포커스를 잃은 실제 요소를 확인 하기 위해 이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.LostStylusCapture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.LostStylusCapture&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.LostStylusCapture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.LostStylusCapture&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>There is no defined corresponding tunneling event.</source>
          <target state="translated">정의 된 해당 터널링 이벤트가 없습니다.</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostStylusCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostStylusCapture%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.LostStylusCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostStylusCapture" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostStylusCapture" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostStylusCaptureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostStylusCaptureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostStylusCaptureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostStylusCaptureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostStylusCaptureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.LostTouchCapture">
          <source>Occurs when this element loses a touch capture.</source>
          <target state="translated">이 요소에서 터치 캡처가 손실될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostTouchCapture">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostTouchCapture">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostTouchCapture">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostTouchCapture">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostTouchCapture">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostTouchCapture">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostTouchCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostTouchCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostTouchCapture%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.LostTouchCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostTouchCapture" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostTouchCapture" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.ManipulationBoundaryFeedback">
          <source>Occurs when the manipulation encounters a boundary.</source>
          <target state="translated">조작에서 경계가 발견되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationBoundaryFeedback">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationBoundaryFeedback">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationBoundaryFeedback">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationBoundaryFeedback">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationBoundaryFeedback">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationBoundaryFeedback">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /&gt;</ph> 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.ManipulationCompleted">
          <source>Occurs when a manipulation and inertia on the <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> object is complete.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 개체에서 조작이 완료되고 활동이 없게 될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationCompleted">
          <source>You can use this event to get information about the manipulation when it completes.</source>
          <target state="translated">이 이벤트를 사용 하 여 작업이 완료 될 때 조작 하는 방법에 대 한 정보를 얻을 수 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationCompleted">
          <source>For example, you can use the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType&gt;</ph> property to determine the total amount the position of the manipulation changed.</source>
          <target state="translated">예를 들어, 사용할 수는 <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType&gt;</ph> 총합 조작의 위치를 확인 하려면 속성을 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationCompleted">
          <source>For more information about manipulations, see the <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">조작에 대 한 자세한 내용은 참조는 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationCompleted">
          <source>For an example of an application that responds to manipulations, see <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">예를 보려면 조작에 응답 하는 응용 프로그램 참조 <bpt id="p1">[</bpt>연습: 만드는 첫 번째 터치 응용 프로그램<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationCompleted">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationCompleted">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationCompleted">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationCompleted">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationCompleted">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationCompleted">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationCompletedEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationCompletedEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.ManipulationCompletedEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationCompleted" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationCompleted" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>Occurs when the input device changes position during a manipulation.</source>
          <target state="translated">입력 장치에서 조작 중에 위치를 변경하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event occurs multiple times when the user drags fingers over the screen during a manipulation and again when inertia occurs.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> 끌면 손가락 화면으로 조작 하는 동안와 관성 발생할 때 이벤트에 여러 번 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>You can use the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A&gt;</ph> property to check whether the event is occurring during inertia.</source>
          <target state="translated">사용할 수는 <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A&gt;</ph> 관성 중에 이벤트가 발생 하는지 여부를 확인할 속성입니다.</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>The element on with <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event occurs is not affected in any way when the event occurs.</source>
          <target state="translated">하는 요소 <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> 영향을 받지 않습니다 어떤 방식으로든에서 이벤트가 발생할 때 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>You must provide the logic to the element that is to be manipulated.</source>
          <target state="translated">논리를 조작할 수 있는 요소를 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt;</ph> properties, which are of type <ph id="ph3">&lt;xref:System.Windows.Input.ManipulationDelta&gt;</ph>, contain data about how the position of the manipulations change and interpreted as moving, resizing, or rotating an object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt;</ph> 속성 유형이 <ph id="ph3">&lt;xref:System.Windows.Input.ManipulationDelta&gt;</ph>조작과 위치를 변경 하는 방법에 대 한 데이터를 포함 하 고 이동, 크기 조정, 또는 개체를 회전 해석 합니다.</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>You apply that information to the element that is to be manipulated.</source>
          <target state="translated">조작할 수 있는 요소에 해당 정보를 적용 합니다.</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>For more information about manipulations, see the <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">조작에 대 한 자세한 내용은 참조는 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>For an example of an application that responds to manipulations, see <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">예를 보려면 조작에 응답 하는 응용 프로그램 참조 <bpt id="p1">[</bpt>연습: 만드는 첫 번째 터치 응용 프로그램<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>The following example shows an event handler for the <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event.</source>
          <target state="translated">다음 예제에 대 한 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt;</ph> property to move, resize, and rotate a <ph id="ph2">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph>.</source>
          <target state="translated">이 예제에서는 사용 된 <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt;</ph> 속성 이동, 크기 조정 및 회전을 <ph id="ph2">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>The example also checks whether the <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event occurred during inertia and whether the rectangle is touching the edge of a window.</source>
          <target state="translated">이 예제는 또한 확인 여부는 <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> 관성 및 사각형 창의 가장자리에 연결 되어 있는지 여부는 동안 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application.</source>
          <target state="translated">이러한 경우에 해당할 경우 응용 프로그램 중지 사각형 응용 프로그램의 표시 영역을 종료 하지 못하도록 방지 하기 위해 조작 합니다.</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>This example is part of a larger example in <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">이 예제는에 보다 큰 예제의 일부 <bpt id="p1">[</bpt>연습: 만드는 첫 번째 터치 응용 프로그램<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.ManipulationDeltaEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationDelta" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationDelta" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>Occurs when the input device loses contact with the <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> object during a manipulation and inertia begins.</source>
          <target state="translated">입력 장치에서 조작 중에 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 개체와의 연결이 끊어져 활동이 없게 될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph> event occurs when the user lifts all of the fingers from the screen during a manipulation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph> 이 이벤트는 사용자가 조작 하는 동안 화면에서 손가락을 모두를 뗄 때 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>For example, if a user "throws" a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> across a surface, the user will touch the <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> to begin the action, move the finger across the screen for a short distance, and then release the <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">예를 들어, "사용자"throw 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 화면을 통해 사용자는 touch는 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 작업을 시작 하려면 짧은 거리에 대 한 화면에서 손가락을 이동 하 고 다음 단추는 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>When the user releases the element, inertia begins and the <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph> event occurs.</source>
          <target state="translated">사용자가 요소를 해제 하는 경우 관성 시작 및 <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> continues to receive <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> events to indicate that inertia is occurring on the element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 를 계속 수신 하면 <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> 이벤트 관성 요소에서 발생 함을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>You can use this event to specify the behavior of the inertia.</source>
          <target state="translated">관성의 동작을 지정 하려면이 이벤트를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>For example, you can set the initial velocity that is used when inertia begins.</source>
          <target state="translated">예를 들어 관성을 시작할 때 사용 되는 초기 속도 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>You can also specify the amount of inertia by setting the desired deceleration or by setting the desired placement.</source>
          <target state="translated">감속을 설정 하거나 원하는 위치를 설정 하 여 관성 양을 지정할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>You can set these values for each type of manipulation (translation, expansion, or rotation) independently.</source>
          <target state="translated">이 값을 설정할 수 없습니다 이러한 조작 (변환, 확장 또는 회전)의 각 유형에 대해 독립적으로 합니다.</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ph>.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ph>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>For more information about manipulations, see the <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">조작에 대 한 자세한 내용은 참조는 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>For an example of an application that responds to manipulations, see <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">예를 보려면 조작에 응답 하는 응용 프로그램 참조 <bpt id="p1">[</bpt>연습: 만드는 첫 번째 터치 응용 프로그램<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>The following example shows the <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph> event handler and sets the desired deceleration for translation, expansion, and rotation that is used during inertia.</source>
          <target state="translated">다음 예제와 <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph> 이벤트 처리기 변환, 확장 및 관성 시 사용 되는 회전에 대 한 원하는 선언을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>This example is part of a larger example in <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">이 예제는에 보다 큰 예제의 일부 <bpt id="p1">[</bpt>연습: 만드는 첫 번째 터치 응용 프로그램<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.ManipulationInertiaStartingEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>Occurs when an input device begins a manipulation on the <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> object.</source>
          <target state="translated">입력 장치가 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 개체에서 조작을 시작할 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationStarted&gt;</ph> event occurs after the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationStarted&gt;</ph> 이벤트 발생 후의 <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>You can do the following with the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs&gt;</ph>:</source>
          <target state="translated">사용 하 여 다음을 수행할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>Get the element that the manipulation's position is relative to by using the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A&gt;</ph> property.</source>
          <target state="translated">조작의 위치를 사용 하 여 기준으로 요소는 <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>Get the origin of the manipulation by using the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A&gt;</ph> property.</source>
          <target state="translated">사용 하 여 조작 원점이 가져오기는 <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>Cancel the manipulation by calling the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A&gt;</ph> method.</source>
          <target state="translated">호출 하 여 조작 취소는 <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>For more information about manipulations, see the <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">조작에 대 한 자세한 내용은 참조는 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>For an example of an application that responds to manipulations, see <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">예를 보려면 조작에 응답 하는 응용 프로그램 참조 <bpt id="p1">[</bpt>연습: 만드는 첫 번째 터치 응용 프로그램<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.ManipulationStartedEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationStarted" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationStarted" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>Occurs when the manipulation processor is first created.</source>
          <target state="translated">조작 프로세서가 처음으로 만들어지면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph> event occurs on an element that has the <ph id="ph2">&lt;xref:System.Windows.UIElement.IsManipulationEnabled%2A&gt;</ph> property set to <ph id="ph3">`true`</ph> when the user puts a finger on it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph> 이벤트 발생을 가진 요소에는 <ph id="ph2">&lt;xref:System.Windows.UIElement.IsManipulationEnabled%2A&gt;</ph> 속성이로 설정 <ph id="ph3">`true`</ph> 사용자에 손가락을 놓고 하는 경우.</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>By default, subsequent manipulation events report the position of the manipulation relative to the element that has <ph id="ph1">&lt;xref:System.Windows.UIElement.IsManipulationEnabled%2A&gt;</ph> set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">후속 조작 이벤트 기본적으로 포함 된 요소를 기준으로 조작의 위치를 보고 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsManipulationEnabled%2A&gt;</ph> 로 설정 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>You can specify that the position should be relative to another element by setting the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A&gt;</ph> property.</source>
          <target state="translated">위치를 설정 하 여 있는 다른 요소를 기준으로 해야 함을 지정할 수는 <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>For example, you can make the manipulation relative to the parent of the element.</source>
          <target state="translated">예를 들어 요소의 부모에 상대적인 조작을 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>You can also do the following in an event handler for <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph>:</source>
          <target state="translated">에 대 한 이벤트 처리기에서 다음을 수행할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>Specify whether the user needs more than one finger to perform the manipulations by setting the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">사용자가을 설정 하 여의 조작을 수행 하려면 둘 이상의 손가락 해야 하는지 여부를 지정 된 <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>Specify which types of manipulation are enabled by setting the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType&gt;</ph> property to a <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationModes&gt;</ph> enumeration.</source>
          <target state="translated">조작의 유형을 설정 하 여 활성화할 지정는 <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType&gt;</ph> 속성을는 <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationModes&gt;</ph> 열거형입니다.</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>Specify the center of a single-finger rotation by setting the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">한 손가락 회전의 중심을 설정 하 여 지정 된 <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>Cancel the manipulation by calling the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">호출 하 여 조작 취소는 <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>For more information about manipulations, see the <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">조작에 대 한 자세한 내용은 참조는 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>For an example of an application that responds to manipulations, see <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">예를 보려면 조작에 응답 하는 응용 프로그램 참조 <bpt id="p1">[</bpt>연습: 만드는 첫 번째 터치 응용 프로그램<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>The following example shows the event handler for the <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph> event and sets the <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A&gt;</ph> to the parent element that receives the manipulation events so that the coordinates of the manipulation are relative to the parent element.</source>
          <target state="translated">다음 예제에 대 한 이벤트 처리기를 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph> 이벤트 및 집합에서 <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A&gt;</ph> 조작의 좌표는 부모 요소에 상대적인 있도록 조작 이벤트를 수신 하는 부모 요소에 있습니다.</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>This example is part of a larger example in <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">이 예제는에 보다 큰 예제의 일부 <bpt id="p1">[</bpt>연습: 만드는 첫 번째 터치 응용 프로그램<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.ManipulationStartingEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationStarting" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationStarting" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>The available space that a parent element can allocate a child element.</source>
          <target state="translated">부모 요소에서 자식 요소를 할당할 수 있는 사용 가능한 공간입니다.</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>A child element can request a larger space than what is available; the provided size might be accommodated if scrolling is possible in the content model for the current element.</source>
          <target state="translated">자식 요소는 사용 가능한 공간보다 큰 공간을 요청할 수 있습니다. 현재 요소에 대한 콘텐츠 모델에서 스크롤이 가능한 경우 제공된 크기를 수용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>Updates the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.DesiredSize" /&gt;</ph> of a <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.DesiredSize" /&gt;</ph>의 <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>를 업데이트합니다.</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>Parent elements call this method from their own <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /&gt;</ph> implementations to form a recursive layout update.</source>
          <target state="translated">부모 요소는 이 메서드를 자체 <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /&gt;</ph> 구현에서 호출하여 재귀적 레이아웃 업데이트를 형성합니다.</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>Calling this method constitutes the first pass (the "Measure" pass) of a layout update.</source>
          <target state="translated">이 메서드 호출은 레이아웃 업데이트의 첫 번째 단계("측정" 단계)를 구성합니다.</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>Computation of layout positioning in <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> is comprised of a <ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call and an <ph id="ph3">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call.</source>
          <target state="translated">레이아웃에서 위치 계산 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 로 이루어진는 <ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> 호출 및 <ph id="ph3">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> 호출 합니다.</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>During the <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call, an element determines its size requirements by using an <ph id="ph2">`availableSize`</ph> input.</source>
          <target state="translated">중의 <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> 호출에서 요소를 사용 하 여 해당 크기 요구 사항을 결정 한 <ph id="ph2">`availableSize`</ph> 입력 합니다.</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>During the <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call, the element size is finalized.</source>
          <target state="translated">중에서 <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> 요소 크기 호출 완료 됩니다.</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source><ph id="ph1">`availableSize`</ph> can be any number from zero to infinite.</source>
          <target state="translated"><ph id="ph1">`availableSize`</ph> 무한를 0에서 숫자를 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>Elements participating in layout should return the minimum <ph id="ph1">&lt;xref:System.Windows.Size&gt;</ph> they require for a given <ph id="ph2">`availableSize`</ph>.</source>
          <target state="translated">레이아웃에 관여 하는 요소는 최소값을 반환 해야 <ph id="ph1">&lt;xref:System.Windows.Size&gt;</ph> 에 대해 필요로 하는 지정 된 <ph id="ph2">`availableSize`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>When a layout is first instantiated, it always receives a <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call before <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>.</source>
          <target state="translated">레이아웃이 처음 인스턴스화 항상 받습니다는 <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> 하기 전에 호출 <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>However, after the first layout pass, it may receive an <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call without a <ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>; this can happen when a property that affects only <ph id="ph3">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> is changed (such as alignment), or when the parent receives an <ph id="ph4">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> without a <ph id="ph5">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>.</source>
          <target state="translated">그러나 첫 번째 레이아웃 단계 후를 받을 수는 <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> 하지 않고 호출는 <ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>;이 경우에 영향을 주는 속성에 발생할 수 <ph id="ph3">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> (예: 맞춤), 변경 또는 부모를 받을 때는 <ph id="ph4">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> 는 없이<ph id="ph5">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>A <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call will automatically invalidate an <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> 호출 자동으로 무효화 됩니다는 <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> 호출 합니다.</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>Layout updates happen asynchronously, such that the main thread is not waiting for every possible layout change.</source>
          <target state="translated">레이아웃 업데이트 가능한 모든 레이아웃이 변경에 대 한 주 스레드를 기다리고 있지 않으면 되도록 비동기적으로 수행 합니다.</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>Querying an element via code-behind checking of property values may not immediately reflect changes to properties that interact with the sizing or layout characteristics (the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> property, for example).</source>
          <target state="translated">코드 숨김 속성 값의 확인을 통해 요소 수 즉시 변경 내용을 반영 하지 크기 조정 또는 레이아웃 특성 상호 작용 하는 속성 (의 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> 예: 속성).</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>Layout updates can be forced by using the <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> method.</source>
          <target state="translated">레이아웃 업데이트를 사용 하 여 사용할 수는 <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>However, calling this method is usually unnecessary and can cause poor performance.</source>
          <target state="translated">그러나이 메서드를 호출 일반적으로 필요 하지 않으며 성능이 저하 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>The layout system keeps two separate queues of invalid layouts, one for <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> and one for <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>.</source>
          <target state="translated">이 레이아웃 시스템은 두 개의 별도 큐에 대 한 잘못 된 레이아웃의 유지 <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> 되 고 다른 하나 <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>The layout queue is sorted based upon the order of elements in the visual tree of the element performing layout; elements higher in the tree are at the top of the queue, to avoid redundant layouts caused by repeated changes in parents.</source>
          <target state="translated">레이아웃 큐에 레이아웃을 수행 하는 요소의 시각적 트리에 있는 요소의 순서를 기준으로 정렬 됩니다. 요소 트리에서 상위 부모 항목에 반복 해 서 변경 내용이 레이아웃이 중복을 방지 하기 위해 큐의 맨 위쪽에는입니다.</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already layout-validated.</source>
          <target state="translated">중복 된 항목은 큐에서 자동으로 제거 및 요소가 레이아웃 유효성을 검사할 이미 된 경우 자동으로 큐에서 제거 됩니다.</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>When updating layout, the <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> queue is emptied first, followed by the <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> queue.</source>
          <target state="translated">레이아웃을 업데이트할 때는 <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> 큐를 비울 먼저 옵니다는 <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> 큐입니다.</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>An element in the <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> queue will never be arranged if there is an element in the <ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> queue.</source>
          <target state="translated">요소는 <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> 큐에 요소가 없을 경우 정렬 되지 됩니다는 <ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> 큐입니다.</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>The available size that the parent element can allocate for the child.</source>
          <target state="translated">부모 요소가 자식 요소에 할당할 수 있는 크기입니다.</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>When overridden in a derived class, provides measurement logic for sizing this element properly, with consideration of the size of any child element content.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 자식 요소 콘텐츠의 크기를 고려하여 이 요소의 크기를 적절하게 조정하기 위한 측정 논리를 제공합니다.</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>The desired size of this element in layout.</source>
          <target state="translated">레이아웃에서 이 요소에 필요한 크기입니다.</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>It is more common to derive an element from <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> rather than <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">요소를 파생 하는 경우가 더 일반적 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 대신 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>If you are deriving from <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, note that an override of <ph id="ph2">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> on <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph> seals the <ph id="ph4">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> method.</source>
          <target state="translated">파생 하는 경우 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>는 재정의 <ph id="ph2">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> 에 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 봉인은 <ph id="ph4">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>Therefore, you only override <ph id="ph1">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> as a means to alter layout measure characteristics if you derive from <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> through an inheritance that does not include <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
          <target state="translated">만 재정의 따라서 <ph id="ph1">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> 에서 파생 하는 경우 레이아웃 측정 특성을 변경 하는 방법으로 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 포함 되지 않은 상속을 통해 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>This might be the case if you are attempting to build your own implementation on the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> core-level.</source>
          <target state="translated">이 사용자 지정 구현을 구축 하는 경우 대/소문자를 수 있습니다는 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 핵심 수준입니다.</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>Otherwise, if you are deriving from <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, then the implementation template for Measure behavior is the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> implementation of .<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph>.</source>
          <target state="translated">파생 하는 경우 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, Measure 동작 구현 서식 파일은 다음의 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 의 구현.<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>A parent element with child elements must call <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> on each child, otherwise these child elements are not sized or arranged and will effectively disappear from layout.</source>
          <target state="translated">자식 요소가 있는 부모 요소를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> 각 자식에 그렇지 않으면 이러한 하위 요소 하지의 크기와 배열 레이아웃에서 효과적으로 사라집니다.</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>A typical override of <ph id="ph1">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> follows this approximate pattern (there is not a built-in collection called <ph id="ph2">`VisualChildren`</ph>; <ph id="ph3">`VisualChildren`</ph> is a  placeholder that represents whatever child collection your element maintains).</source>
          <target state="translated">일반적인 재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> 대략적인이 패턴을 따릅니다 (라는 기본 제공 컬렉션이 없기 <ph id="ph2">`VisualChildren`</ph>; <ph id="ph3">`VisualChildren`</ph> 는 모든 자식 컬렉션을 나타내는 자리 표시자).</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>You must call <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> on each child element.</source>
          <target state="translated">호출 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> 각 자식 요소에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>Generally, your implementation should cache measurement information between the <ph id="ph1">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> method calls in the same element.</source>
          <target state="translated">일반적으로 구현 간의 측정 정보를 캐시 해야는 <ph id="ph1">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> 동일한 요소에서 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>Calling base implementations of <ph id="ph1">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> is not required, but might be appropriate if the base implementation provides a desired layout capability.</source>
          <target state="translated">기본 구현을 호출 <ph id="ph1">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> 필수적 이지만 기본 구현에서 원하는 레이아웃 기능을 제공 하는 경우에 적합할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>Calls to <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> on child elements should pass either the same <ph id="ph2">`availableSize`</ph> as the parent, or a subset of the area, depending on the type of layout the parent element supports.</source>
          <target state="translated">에 대 한 호출이 <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> 자식 요소 거쳐야 같은 <ph id="ph2">`availableSize`</ph> 부모 또는 영역의 하위 집합으로 레이아웃의 유형에 따라 부모 요소를 지원 합니다.</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>For example, it would be valid to remove the area for an element-specific border or padding, a scrollbar, or a custom control.</source>
          <target state="translated">예를 들어 요소 관련 테두리 또는 패딩을, 스크롤 막대 또는 사용자 지정 컨트롤에 대 한 영역을 제거 하는 데 유효한 됩니다.</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>Implementations must be able to process a value provided for <ph id="ph1">&lt;paramref name="availableSize" /&gt;</ph> that is infinite.</source>
          <target state="translated">구현에 제공 된 값을 처리할 수 있어야 <ph id="ph1">&lt;paramref name="availableSize" /&gt;</ph> 제한이 없는 합니다.</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>An infinite value indicates no requested constraints, and effectively defers measurement choice to the parent element, through recursive Measure calls.</source>
          <target state="translated">무한 값 요청 된 제약 조건 없이 나타내고 재귀 호출 하는 측정값을 통해 부모 요소에 대 한 측정 선택을 지연 시킵니다.</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>Implementations can consider the value provided for <ph id="ph1">&lt;paramref name="availableSize" /&gt;</ph> to be a soft constraint.</source>
          <target state="translated">구현에 제공 된 값을 고려할 수 <ph id="ph1">&lt;paramref name="availableSize" /&gt;</ph> 소프트 제한 되도록 합니다.</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>The child element might specify a larger size, even if other aspects of application code were able to determine the current actual size of the parent element.</source>
          <target state="translated">자식 요소는 응용 프로그램 코드의 다른 측면은 부모 요소의 현재 실제 크기를 확인할 수 인 경우에 더 큰 크기를 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>The large size request is a convention that indicates that the child element is querying whether your parent element can support content scrolling within a content display region.</source>
          <target state="translated">더 큰 크기 요청은 자식 요소는 부모 요소에 콘텐츠 표시 영역 내에서 콘텐츠 스크롤를 지원할 수 있는지를 쿼리를 지정 하는 규칙.</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.MouseDown">
          <source>Occurs when any mouse button is pressed while the pointer is over this element.</source>
          <target state="translated">포인터가 이 요소 위에 있는 동안 마우스 단추를 누르면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph> event is often raised together with either <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>, which correspond to a press of one of the two standard mouse buttons.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph> 종종 발생과 함께 <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>, 두 개의 표준 마우스 단추 중 하나를 누르는 것에 해당 하는 합니다.</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event reaches this element along the event route.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph> 라우트된 이벤트를는 있지만 직접 라우트된 이벤트를 서로 하며 적절 한 단추 특정 이벤트가 발생할 때는 <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 경로 되지 합니다.</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>.</source>
          <target state="translated">에 대 한 설명 부분 참조 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Some controls might have inherent class handling for mouse button events.</source>
          <target state="translated">일부 컨트롤 마우스 단추 이벤트를 처리 하는 고유한 클래스 포함 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>The left mouse button down event is the most likely event to have class handling in a control.</source>
          <target state="translated">이벤트는 마우스 왼쪽된 단추에는 클래스는 컨트롤의 처리를 할 가능성이 가장 높은 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>The class handling often marks the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class event as handled.</source>
          <target state="translated">기본 클래스 종종 처리 표시 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 클래스 이벤트를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</source>
          <target state="translated">이벤트 처리 됨으로 표시 되 면 해당 요소에 연결 된 다른 인스턴스 처리기 일반적으로 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</source>
          <target state="translated">버블링 방향의 UI 트리의 루트에서 요소에 연결 되어 있는 다른 모든 클래스 또는 인스턴스 처리기도 하지 일반적으로 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>You can resolve the issue that is outlined in the preceding Important and still receive <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</source>
          <target state="translated">앞의 중요에 설명 된 문제를 해결 하 고 계속 받을 수 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph> 클래스 이러한 솔루션 중 하나를 사용 하 여 처리 하는 파생된 클래스의 마우스 왼쪽된 단추에 대 한 이벤트:</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Attach handlers for the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph> event, which is not marked as handled by the controls.</source>
          <target state="translated">연결에 대 한 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph> 이벤트를 컨트롤에 의해 처리 된 것으로 표시 되어 있지 않습니다.</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</source>
          <target state="translated">미리 보기 이벤트 이기 때문에 경로 루트에서 시작을 여 컨트롤로 터널링 방식을 살펴봅니다.</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Register a handler on the control procedurally by calling <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</source>
          <target state="translated">컨트롤에 대 한 처리기를 호출 하 여 절차에 따라 등록 <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph> 처리기 라우트된 이벤트 데이터에서 처리 하는 것으로 이미 표시 된 경우에 이벤트를 수신할 수 있도록 서명 옵션을 선택 합니다.</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.MouseDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.MouseEnter">
          <source>Occurs when the mouse pointer enters the bounds of this element.</source>
          <target state="translated">마우스 포인터가 이 요소의 영역 안으로 들어가면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> is a  that uses the direct event handling routing strategy.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> 처리 라우팅 전략 직접 이벤트를 사용 하는입니다.</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">경로; 직접 라우트된 이벤트를 발생 하지 않습니다. 대신,에서 처리 됩니다는 동일한 요소 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">그러나 라우트된 이벤트 동작 스타일의 이벤트 트리거 등의 다른 측면을 활성화 합니다.</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>Although <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <ph id="ph2">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> property value has changed from <ph id="ph3">`false`</ph> to <ph id="ph4">`true`</ph> on this element.</source>
          <target state="translated">하지만 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> 트랙 마우스 포인터이 이벤트를 더이 요소의 영역 안으로 들어가면 직접적으로 보고 하는 <ph id="ph2">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> 에서 속성 값이 변경 <ph id="ph3">`false`</ph> 를 <ph id="ph4">`true`</ph> 이 요소에 합니다.</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> (or any <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.ButtonBase&gt;</ph> derived class) has native handling for a <ph id="ph3">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph> event when the button has focus, and the pressed key is the space bar.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> (또는 모든 <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.ButtonBase&gt;</ph> 파생 클래스)에 대 한 기본 처리에는 <ph id="ph3">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph> 단추에 포커스를 누른된 키 스페이스바를가 하는 경우 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>The native handling raises the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event with the button as the source, and also captures the mouse, even though the mouse pointer does not appear to move.</source>
          <target state="translated">기본 처리를 발생 시킵니다는 <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> 단추를 소스로 사용 하 여 이벤트 및 마우스 포인터를 이동으로 나타나지 않을 경우에, 마우스를 캡처합니다.</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>As a result of the mouse capture, a <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> event is also raised with the button as the source.</source>
          <target state="translated">마우스 캡처의 결과 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> 이벤트는 소스로 단추와도 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>In general, if an element captures the mouse, then <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> is raised, as well as <ph id="ph2">&lt;xref:System.Windows.UIElement.GotMouseCapture&gt;</ph> and possibly other control-specific events.</source>
          <target state="translated">일반적으로 마우스를 다음 캡처한 요소 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> 발생으로 <ph id="ph2">&lt;xref:System.Windows.UIElement.GotMouseCapture&gt;</ph> 및 기타 컨트롤 관련 이벤트 것 같습니다.</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseEnter%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.MouseEnterEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseEnter" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseEnter" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseEnterEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseEnterEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseEnterEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseEnterEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseEnterEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.MouseLeave">
          <source>Occurs when the mouse pointer leaves the bounds of this element.</source>
          <target state="translated">마우스 포인터가 이 요소의 영역을 벗어나면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph> is a  that uses the direct event handling routing strategy.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph> 처리 라우팅 전략 직접 이벤트를 사용 하는입니다.</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">경로; 직접 라우트된 이벤트를 발생 하지 않습니다. 대신,에서 처리 됩니다는 동일한 요소 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">그러나 라우트된 이벤트 동작 스타일의 이벤트 트리거 등의 다른 측면을 활성화 합니다.</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source>Although <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph> tracks when the mouse leaves an element, this event more literally reports that the <ph id="ph2">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> property value has changed from <ph id="ph3">`true`</ph> to <ph id="ph4">`false`</ph> on this element.</source>
          <target state="translated">하지만 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph> 트랙 마우스를 벗어날 때이 이벤트는 요소를 더 직접적으로 보고 하는 <ph id="ph2">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> 에서 속성 값이 변경 <ph id="ph3">`true`</ph> 를 <ph id="ph4">`false`</ph> 이 요소에 합니다.</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeave%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.MouseLeaveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseLeave" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseLeave" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeaveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeaveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeaveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeaveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeaveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Occurs when the left mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 마우스 왼쪽 단추를 누르면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">이 요소 트리를 통해 버블링 경로 따르는 것 처럼 보이지만, 실제로 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>The event data of this event exposes the event data of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">이 이벤트의 이벤트 데이터의 기본 이벤트 데이터를 노출 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>If you mark <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> handled, you are essentially marking <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">표시 하는 경우 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> 처리, 기본적으로 표시 하는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 경로 따르는 모든 후속 수신기에 대 한 처리 및 모든 관련 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>This possibly includes class-handler generated events such as <ph id="ph1">&lt;xref:System.Windows.Controls.Control.MouseDoubleClick&gt;</ph>.</source>
          <target state="translated">가능한 여기에 클래스 처리기 생성 된 이벤트와 같은 <ph id="ph1">&lt;xref:System.Windows.Controls.Control.MouseDoubleClick&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 클래스).</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 에 해당 하는 대신 클래스 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Some control classes might have inherent class handling for mouse button events.</source>
          <target state="translated">일부 컨트롤 클래스는 마우스 단추 이벤트를 처리 하는 클래스 기본적 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>The left mouse button down event is the most likely event to have class handling in a control.</source>
          <target state="translated">이벤트는 마우스 왼쪽된 단추에는 클래스는 컨트롤의 처리를 할 가능성이 가장 높은 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>The class handling often marks the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class event as handled.</source>
          <target state="translated">기본 클래스 종종 처리 표시 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 클래스 이벤트를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</source>
          <target state="translated">이벤트 처리 됨으로 표시 되 면 해당 요소에 연결 된 다른 인스턴스 처리기 일반적으로 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</source>
          <target state="translated">버블링 방향의 UI 트리의 루트에서 요소에 연결 되어 있는 다른 모든 클래스 또는 인스턴스 처리기도 하지 일반적으로 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>You can resolve the issue that is outlined in the preceding Important and still receive <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</source>
          <target state="translated">앞의 중요에 설명 된 문제를 해결 하 고 계속 받을 수 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> 클래스 이러한 솔루션 중 하나를 사용 하 여 처리 하는 파생된 클래스의 마우스 왼쪽된 단추에 대 한 이벤트:</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Attach handlers for the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph> event, which is not marked as handled by the controls.</source>
          <target state="translated">연결에 대 한 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph> 이벤트를 컨트롤에 의해 처리 된 것으로 표시 되어 있지 않습니다.</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</source>
          <target state="translated">미리 보기 이벤트 이기 때문에 경로 루트에서 시작을 여 컨트롤로 터널링 방식을 살펴봅니다.</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Register a handler on the control procedurally by calling <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</source>
          <target state="translated">컨트롤에 대 한 처리기를 호출 하 여 절차에 따라 등록 <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph> 처리기 라우트된 이벤트 데이터에서 처리 하는 것으로 이미 표시 된 경우에 이벤트를 수신할 수 있도록 서명 옵션을 선택 합니다.</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.MouseLeftButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeftButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeftButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeftButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeftButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeftButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>Occurs when the left mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 마우스 왼쪽 단추를 놓으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">이 요소 트리를 통해 버블링 경로 따르는 것 처럼 보이지만, 실제로 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>The event data of this event exposes the event data of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">이 이벤트의 이벤트 데이터의 기본 이벤트 데이터를 노출 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>If you mark <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> handled, you are essentially marking <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">표시 하는 경우 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> 처리, 기본적으로 표시 하는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 경로 따르는 모든 후속 수신기에 대 한 처리 및 모든 관련 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 클래스).</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 에 해당 하는 대신 클래스 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.MouseLeftButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeftButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeftButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeftButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeftButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeftButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.MouseMove">
          <source>Occurs when the mouse pointer moves while over this element.</source>
          <target state="translated">이 요소 위에 있는 동안 마우스 포인터를 움직이면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseMove">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseMove">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseMove">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseMove">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseMove">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseMove">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseMove%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.MouseMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseMove" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseMove" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>Occurs when the right mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 마우스 오른쪽 단추를 누르면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">이 요소 트리를 통해 버블링 경로 따르는 것 처럼 보이지만, 실제로 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>The event data of this event exposes the event data of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">이 이벤트의 이벤트 데이터의 기본 이벤트 데이터를 노출 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>If you mark <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph> handled, you are essentially marking <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">표시 하는 경우 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph> 처리, 기본적으로 표시 하는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 경로 따르는 모든 후속 수신기에 대 한 처리 및 모든 관련 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>This possibly includes class-handler generated events such as <ph id="ph1">&lt;xref:System.Windows.Controls.Control.MouseDoubleClick&gt;</ph>.</source>
          <target state="translated">가능한 여기에 클래스 처리기 생성 된 이벤트와 같은 <ph id="ph1">&lt;xref:System.Windows.Controls.Control.MouseDoubleClick&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 클래스).</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 에 해당 하는 대신 클래스 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>Right button mouse events frequently have native handling in application scenarios.</source>
          <target state="translated">마우스 오른쪽 단추로 마우스 이벤트는 자주 응용 프로그램 시나리오에서 기본 처리를 가집니다.</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>For instance, a right mouse button down might display a context menu.</source>
          <target state="translated">예를 들어,를 마우스 오른쪽 단추로 상황에 맞는 메뉴를 표시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>See <bpt id="p1">[</bpt>ContextMenu Overview<ept id="p1">](~/docs/framework/wpf/controls/contextmenu-overview.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>ContextMenu 개요<ept id="p1">](~/docs/framework/wpf/controls/contextmenu-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseRightButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseRightButtonDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.MouseRightButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseRightButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseRightButtonDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseRightButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseRightButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseRightButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseRightButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseRightButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>Occurs when the right mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 마우스 오른쪽 단추를 놓으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">이 요소 트리를 통해 버블링 경로 따르는 것 처럼 보이지만, 실제로 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>The event data of this event exposes the event data of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">이 이벤트의 이벤트 데이터의 기본 이벤트 데이터를 노출 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>If you mark <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph> handled, you are essentially marking <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">표시 하는 경우 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph> 처리, 기본적으로 표시 하는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 경로 따르는 모든 후속 수신기에 대 한 처리 및 모든 관련 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 클래스).</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 에 해당 하는 대신 클래스 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseRightButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseRightButtonUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.MouseRightButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseRightButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseRightButtonUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseRightButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseRightButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseRightButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseRightButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseRightButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.MouseUp">
          <source>Occurs when any mouse button is released over this element.</source>
          <target state="translated">이 요소 위에서 마우스 단추를 놓으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseUp&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseUp&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseUp&gt;</ph> event is often raised together with either <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>, which correspond to a release of one of the two standard mouse buttons.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseUp&gt;</ph> 종종 발생과 함께 <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>, 두 개의 표준 마우스 단추의 릴리스의에 해당 하는 합니다.</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event reaches this element along the event route.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph> 라우트된 이벤트를는 있지만 직접 라우트된 이벤트를 서로 하며 적절 한 단추 특정 이벤트가 발생할 때는 <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 경로 되지 합니다.</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>.</source>
          <target state="translated">에 대 한 설명 부분 참조 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseUp&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.MouseUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.MouseWheel">
          <source>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 사용자가 마우스 휠을 굴리면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseWheel">
          <source>Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseWheel&gt;</ph> event from a focused or captured element, the mouse pointer might actually be over another element.</source>
          <target state="translated">포커스 또는 마우스 캡처 우선 마우스 포인터입니다. 따라서 수신 되 면는 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseWheel&gt;</ph> 시점 요소에서 이벤트를 다른 요소에 마우스 포인터 수 실제로 있습니다.</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseWheel">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseWheel&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseWheel&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseWheel">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseWheel&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseWheel&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseWheel">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseWheel">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseWheel">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseWheel">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseWheel">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseWheel">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseWheel&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseWheel&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseWheel">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseWheel%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseWheel%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.MouseWheelEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseWheel" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseWheel" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseWheelEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseWheelEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseWheelEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseWheelEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseWheelEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</source>
          <target state="translated">기존 탭 순서에서 이동할 모드 또는 시각적으로 이동할 방향을 나타내는 속성이 포함된 이동 요청입니다.</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>Attempts to move focus from this element to another element.</source>
          <target state="translated">이 요소에서 다른 요소로 포커스를 이동하려고 시도합니다.</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.</source>
          <target state="translated">포커스를 이동하는 방향은 지시 방향에 의해 지정됩니다. 이 방향은 이 요소의 표시 부모 조직 내에서 해석됩니다.</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the requested traversal was performed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">요청된 이동이 수행되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>Make sure you check the return value of this method.</source>
          <target state="translated">이 메서드의 반환 값을 확인 하 고 있는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>A return value of <ph id="ph1">`false`</ph> might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.</source>
          <target state="translated">반환 값이 <ph id="ph1">`false`</ph> 방향으로 컨트롤의 구성에서 정의 된 탭 정지를 실행 하 고 이동 요청에서 줄 바꿈이 요청 하는 경우 반환 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
          <source>The event data to the access key event.</source>
          <target state="translated">선택키 이벤트에 대한 이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
          <source>The event data reports which key was invoked, and indicate whether the <ph id="ph1">&lt;see cref="T:System.Windows.Input.AccessKeyManager" /&gt;</ph> object that controls the sending of these events also sent this access key invocation to other elements.</source>
          <target state="translated">이벤트 데이터는 호출된 키를 보고하며 이러한 이벤트를 보내는 작업을 제어하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.AccessKeyManager" /&gt;</ph> 개체가 이 선택키 호출도 다른 요소로 보냈는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
          <source>Provides class handling for when an access key that is meaningful for this element is invoked.</source>
          <target state="translated">이 요소에 대해 의미가 있는 선택키를 호출하는 경우의 클래스 처리를 제공합니다.</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
          <source>There is no actual AccessKey event in the <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> class, or elsewhere, which you can raise or attach handlers for.</source>
          <target state="translated">실제 AccessKey 이벤트가 없습니다는 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 클래스 또는 다른 위치에 대 한 처리기를 연결 하거나 발생 시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
          <source>Instead, the event is originated via a dedicated manager class, <ph id="ph1">&lt;xref:System.Windows.Input.AccessKeyManager&gt;</ph>, which post-processes all input to search for access keys that are applicable to the entire input model.</source>
          <target state="translated">전용된 관리자 클래스를 통해 이벤트 시작 되는 대신, <ph id="ph1">&lt;xref:System.Windows.Input.AccessKeyManager&gt;</ph>, 입력된 모델 전체에 적용 되는 선택 키 검색에 대 한 모든 입력 사후 처리 합니다.</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
          <source>The default implementation of this method in <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> sets keyboard focus to this element (by calling <ph id="ph2">&lt;see cref="M:System.Windows.UIElement.Focus" /&gt;</ph>).</source>
          <target state="translated">이 메서드의 기본 구현 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 집합 키보드 포커스를이 요소 (호출 하 여 <ph id="ph2">&lt;see cref="M:System.Windows.UIElement.Focus" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
          <source>Implementations should perpetuate this behavior if they are focusable, because it is an expected behavior for accessibility scenarios.</source>
          <target state="translated">구현에서 예상된 된 동작이 액세스 가능성 시나리오 이기 때문에 포커스를 받을 수, 하는 경우이 동작을 적용 해야 하는데 합니다.</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
          <source>Note that the base implementation does nothing with the passed event data and raises no further event; it just sets the focus.</source>
          <target state="translated">기본 구현을 전달 된 이벤트 데이터로 아무 작업도 수행 되는데; 더 이상 이벤트를 발생 시킵니다. 방금 포커스를 설정합니다.</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
          <source>The child element that is being resized.</source>
          <target state="translated">크기를 조정하는 자식 요소입니다.</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
          <source>Supports layout behavior when a child element is resized.</source>
          <target state="translated">자식 요소의 크기를 조정할 때 레이아웃 동작을 지원합니다.</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
          <source>This method is typically not called by your application code.</source>
          <target state="translated">이 메서드는 일반적으로 응용 프로그램 코드에서 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
          <source>It is exposed so that derived element classes can make further checks on their own possibly invalid layout state.</source>
          <target state="translated">자체 레이아웃 잘못 되었을 수 있는 상태에서 확인 파생된 되는 요소 클래스를 추가로 만들 수 있도록 노출 됩니다.</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
          <source>Classes could also attempt optimizations to minimize the processing time for a layout pass based on size changes to child elements.</source>
          <target state="translated">클래스는 자식 요소에 크기 변화에 따라 레이아웃 단계에 대 한 처리 시간을 최소화 하는 최적화를 시도할 수도 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
          <source>An example derived element class that implements <ph id="ph1">&lt;xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A&gt;</ph> is the <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph> control.</source>
          <target state="translated">예 구현 하는 요소 클래스를 파생 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A&gt;</ph> 는 <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph> 제어 합니다.</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /&gt;</ph> method has the default implementation of calling <ph id="ph2">&lt;see cref="M:System.Windows.UIElement.InvalidateMeasure" /&gt;</ph> on itself.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /&gt;</ph> 메서드는 호출의 기본 구현 <ph id="ph2">&lt;see cref="M:System.Windows.UIElement.InvalidateMeasure" /&gt;</ph> 자체에 있습니다.</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
          <source>A typical implementation would be: do whatever optimization your own element supports, and then typically call base <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /&gt;</ph> from at least one of the code branches (the one that indicated "dirty" state per your own measure caching logic).</source>
          <target state="translated">일반적인 구현: 사용자가 직접 요소 모든 최적화 작업을 지원 하 고 다음 일반적으로 기본 구현을 호출 <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /&gt;</ph> 코드 분기 (캐싱 논리 자체 측정 "더티" 상태를 나타내는 하나) 중 하나 이상에서 합니다.</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
          <source>This method is only called in the layout processing if it was the child itself that originated the size changes.</source>
          <target state="translated">이 메서드는 자식이 크기 변경을 인 경우 레이아웃 처리에 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
          <source>Otherwise, if the parent element initiates the <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /&gt;</ph> pass, according to the layout system rules, the parent is recalculating layout already.</source>
          <target state="translated">부모 요소를 시작 하는 경우는 <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /&gt;</ph> 통과 레이아웃 시스템 규칙에 따라 부모 다시 계산 하는 레이아웃 이미 있습니다.</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
          <source>The layout system processes layout in the order of child-to-parent, so no return to parent element sizing from the child element layout calls is necessary.</source>
          <target state="translated">이 레이아웃 시스템 이므로 자식 요소 레이아웃 호출에서 부모 요소 크기 조정에 반환 없는 필요 레이아웃 자식-부모 순서 대로 처리 합니다.</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnCreateAutomationPeer">
          <source>Returns class-specific <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> implementations for the <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> infrastructure.</source>
          <target state="translated"><ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 인프라에 대해 클래스 관련 <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> 구현을 반환합니다.</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnCreateAutomationPeer">
          <source>The type-specific <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> implementation.</source>
          <target state="translated">형식별 <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> 구현입니다.</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnCreateAutomationPeer">
          <source>The implementation of this method is typically to call the constructor of a specific <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> implementation, and return it as the return value.</source>
          <target state="translated">이 메서드의 구현은 특정 생성자를 호출 하는 일반적으로 <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> 구현 하 고 반환 값으로 반환 합니다.</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnCreateAutomationPeer">
          <source>All <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> derived classes should implement this method in order to provide their own specific <ph id="ph2">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> implementations to the <ph id="ph3">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> infrastructure.</source>
          <target state="translated">모든 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 파생된 클래스가 자신의 특정 제공 하기 위해이 메서드를 구현 해야 <ph id="ph2">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> 구현에는 <ph id="ph3">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 인프라입니다.</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnCreateAutomationPeer">
          <source>For details on implementing this pattern, see <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph>.</source>
          <target state="translated">이 패턴을 구현에 대 한 자세한 내용은 참조 하십시오. <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragEnter" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragEnter" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragLeave" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragLeave" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragOver" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragOver" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragEnter" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragEnter" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.GiveFeedbackEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.GiveFeedbackEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.GiveFeedback" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.GiveFeedback" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> that contains event data.</source>
          <target state="translated">이벤트 데이터가 들어 있는 <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>This event data must contain the identifier for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotFocus" /&gt;</ph> event.</source>
          <target state="translated">이 이벤트 데이터에는 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotFocus" /&gt;</ph> 이벤트의 식별자가 포함되어야 합니다.</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotFocus" /&gt;</ph> routed event by using the event data provided.</source>
          <target state="translated">지정된 이벤트 데이터를 사용하여 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotFocus" /&gt;</ph> 라우트된 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>This method, although virtual, does have a default implementation that raises the event.</source>
          <target state="translated">이 메서드를 가상가 이벤트를 발생 시키는 기본 구현입니다.</target>       </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph> property value changes.</source>
          <target state="translated">에 대 한 * 메서드 구현 이벤트를 발생 시키기 위한 것 이며이 같은 메서드 구현을 이벤트를 발생 시키는 경우는 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotFocus%2A&gt;</ph> implementation differs from some other <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> On* implementations, which only provide a convenient way to add class handling for that event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotFocus%2A&gt;</ph> 구현은 일부 다른 <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 에 * 구현과 해당 이벤트에 대 한 클래스 처리를 추가 하는 편리한 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</source>
          <target state="translated">포커스 이벤트를 발생 시 키 지를 의도적으로 필요가 없는 경우 구현 하는 기본 구현을 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Otherwise, the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotFocus" /&gt;</ph> event is not raised during typical user operations that ordinarily set focus to this element.</source>
          <target state="translated">그렇지 않은 경우는 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotFocus" /&gt;</ph> 이 요소에 포커스를 설정 하는 일반적인 사용자 작업 중에 이벤트가 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Focusable" /&gt;</ph> to <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">프로그램 요소 의도가 없으면 상태로 설정에서 요소를 방지할 수 있습니다 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Focusable" /&gt;</ph> 를 <ph id="ph2">&lt;see langword="false" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotTouchCapture" /&gt;</ph> routed event that occurs when a touch is captured to this element.</source>
          <target state="translated">이 요소에 터치가 캡처될 때 발생하는 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotTouchCapture" /&gt;</ph> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</target>       </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotTouchCapture%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotTouchCapture%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotTouchCapture%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.GotTouchCapture&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotTouchCapture%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.UIElement.GotTouchCapture&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotTouchCapture%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">기본 클래스를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotTouchCapture%2A&gt;</ph> 기본 클래스가 메서드 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /&gt;</ph> 이벤트가 이 요소에서 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;</ph> dependency property changes.</source>
          <target state="translated">이 가상 메서드는 발생 하는 경우의 값은 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;</ph> 종속성 속성이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">그런 다음 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;</ph> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the  <ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;</ph> event is not a routed event.</source>
          <target state="translated">에 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;</ph> 이벤트 라우트된 이벤트가 아닙니다.</target>       </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked just before the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /&gt;</ph> event is raised by this element.</source>
          <target state="translated">이 요소에 의해 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /&gt;</ph> 이벤트가 발생하기 직전에 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph> dependency property changes .</source>
          <target state="translated">이 가상 메서드는 발생 하는 경우의 값은 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph> 종속성 속성이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">그런 다음 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;</ph> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;</ph> event is not a routed event.</source>
          <target state="translated">에 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;</ph> 이벤트 라우트된 이벤트가 아닙니다.</target>       </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /&gt;</ph> 이벤트가 이 요소에서 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseCaptured%2A&gt;</ph> dependency property changes its value.</source>
          <target state="translated">이 가상 메서드는 발생 하는 때의 값은 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseCaptured%2A&gt;</ph> 종속성 속성의 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">그런 다음 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;</ph> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;</ph> event is not a routed event; Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">에 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;</ph> 이벤트 라우트된 이벤트가; 아닙니다. 따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /&gt;</ph> 이벤트가 이 요소에서 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /&gt;</ph> dependency property changes its value.</source>
          <target state="translated">이 가상 메서드는 발생 하는 때의 값은 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /&gt;</ph> 종속성 속성의 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">그런 다음 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /&gt;</ph> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the event is not a routed event; Therefore,  you cannot mark it as handled in the class handler.</source>
          <target state="translated">이 이벤트는 라우트된 이벤트의; 없습니다 따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /&gt;</ph> 이벤트가 이 요소에서 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseDirectlyOver%2A&gt;</ph> dependency property changes its value.</source>
          <target state="translated">이 가상 메서드는 발생 하는 때의 값은 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseDirectlyOver%2A&gt;</ph> 종속성 속성의 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">그런 다음 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;</ph> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;</ph> event is not a routed event.</source>
          <target state="translated">에 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;</ph> 이벤트 라우트된 이벤트가 아닙니다.</target>       </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /&gt;</ph> 이벤트가 이 요소에서 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusCaptured%2A&gt;</ph> dependency property changes its value.</source>
          <target state="translated">이 가상 메서드는 발생 하는 때의 값은 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusCaptured%2A&gt;</ph> 종속성 속성의 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusCapturedChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">그런 다음 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusCapturedChanged&gt;</ph> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the event is not a routed event.</source>
          <target state="translated">이벤트 라우트된 이벤트 아닌지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /&gt;</ph> 이벤트가 이 요소에서 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusCaptureWithin%2A&gt;</ph> dependency property changes its value.</source>
          <target state="translated">이 가상 메서드는 발생 하는 때의 값은 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusCaptureWithin%2A&gt;</ph> 종속성 속성의 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusCaptureWithinChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">그런 다음 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusCaptureWithinChanged&gt;</ph> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the event is not a routed event.</source>
          <target state="translated">이벤트 라우트된 이벤트 아닌지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /&gt;</ph> 이벤트가 이 요소에서 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusDirectlyOver%2A&gt;</ph> dependency property changes its value.</source>
          <target state="translated">이 가상 메서드는 발생 하는 때의 값은 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusDirectlyOver%2A&gt;</ph> 종속성 속성의 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusDirectlyOverChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">그런 다음 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusDirectlyOverChanged&gt;</ph> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the event is not a routed event.</source>
          <target state="translated">이벤트 라우트된 이벤트 아닌지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore you cannot mark it as handled in the class handler.</source>
          <target state="translated">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyDown" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Keystrokes are handled by a dedicated input manager.</source>
          <target state="translated">키 입력은 입력된 전용된 관리자에서 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</source>
          <target state="translated">예를 들어, 입력 및 명령 바인딩과 키 입력을 사용 하는 다른 프로그래밍 기능은 일반 키 입력으로 노출 되기 전에 키 입력을 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>If these input system features mark the event as handled, then <ph id="ph1">&lt;xref:System.Windows.UIElement.OnKeyDown%2A&gt;</ph> is not invoked.</source>
          <target state="translated">이러한 입력 처리 한 다음 시스템 기능에는 이벤트가 표시 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnKeyDown%2A&gt;</ph> 가 호출 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyUp" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Keystrokes are handled by a dedicated input manager.</source>
          <target state="translated">키 입력은 입력된 전용된 관리자에서 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</source>
          <target state="translated">예를 들어, 입력 및 명령 바인딩과 키 입력을 사용 하는 다른 프로그래밍 기능은 일반 키 입력으로 노출 되기 전에 키 입력을 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>If these input system features mark the event as handled, then <ph id="ph1">&lt;xref:System.Windows.UIElement.OnKeyUp%2A&gt;</ph> is not invoked.</source>
          <target state="translated">이러한 입력 처리 한 다음 시스템 기능에는 이벤트가 표시 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnKeyUp%2A&gt;</ph> 가 호출 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> that contains event data.</source>
          <target state="translated">이벤트 데이터가 들어 있는 <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>This event data must contain the identifier for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostFocus" /&gt;</ph> event.</source>
          <target state="translated">이 이벤트 데이터에는 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostFocus" /&gt;</ph> 이벤트의 식별자가 포함되어야 합니다.</target>       </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostFocus" /&gt;</ph> routed event by using the event data that is provided.</source>
          <target state="translated">지정된 이벤트 데이터를 사용하여 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostFocus" /&gt;</ph> 라우트된 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>This method, although virtual, does have a default implementation that raises the event.</source>
          <target state="translated">이 메서드를 가상가 이벤트를 발생 시키는 기본 구현입니다.</target>       </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph> property value changes.</source>
          <target state="translated">에 대 한 * 메서드 구현 이벤트를 발생 시키기 위한 것 이며이 같은 메서드 구현을 이벤트를 발생 시키는 경우는 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>This implementation differs from some other <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> On* implementations, which only provide a convenient way to add class handling for that event.</source>
          <target state="translated">이 구현은 일부 다른 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 에 * 구현과 해당 이벤트에 대 한 클래스 처리를 추가 하는 편리한 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</source>
          <target state="translated">포커스 이벤트를 발생 시 키 지를 의도적으로 필요가 없는 경우 구현 하는 기본 구현을 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>Otherwise, the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostFocus" /&gt;</ph> event is not raised during typical user operations that ordinarily set focus to this element.</source>
          <target state="translated">그렇지 않은 경우는 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostFocus" /&gt;</ph> 이 요소에 포커스를 설정 하는 일반적인 사용자 작업 중에 이벤트가 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Focusable" /&gt;</ph> to <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">프로그램 요소 의도가 없으면 상태로 설정에서 요소를 방지할 수 있습니다 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Focusable" /&gt;</ph> 를 <ph id="ph2">&lt;see langword="false" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph> that contains event data.</source>
          <target state="translated">이벤트 데이터가 들어 있는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains event data.</source>
          <target state="translated">이벤트 데이터가 들어 있는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains event data.</source>
          <target state="translated">이벤트 데이터가 들어 있는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostTouchCapture" /&gt;</ph> routed event that occurs when this element loses a touch capture.</source>
          <target state="translated">이 요소에서 터치 캡처가 손실될 때 발생하는 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostTouchCapture" /&gt;</ph> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</target>       </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostTouchCapture%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostTouchCapture%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostTouchCapture%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.LostTouchCapture&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostTouchCapture%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.UIElement.LostTouchCapture&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostTouchCapture%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">기본 클래스를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostTouchCapture%2A&gt;</ph> 기본 클래스가 메서드 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>The data for the event.</source>
          <target state="translated">이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>Called when the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /&gt;</ph> event occurs.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /&gt;</ph> 이벤트가 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>Be sure to call the <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A&gt;</ph> method of the base class so that base classes receive the event.</source>
          <target state="translated">호출 하 여 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A&gt;</ph> 기본 클래스가 기본 클래스의 메서드는 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)">
          <source>The data for the event.</source>
          <target state="translated">이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)">
          <source>Called when the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationCompleted" /&gt;</ph> event occurs.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationCompleted" /&gt;</ph> 이벤트가 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationCompleted%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationCompleted%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationCompleted%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationCompleted&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationCompleted%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationCompleted&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)">
          <source>Be sure to call the <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationCompleted%2A&gt;</ph> method of the base class so that base classes receive the event.</source>
          <target state="translated">호출 하 여 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationCompleted%2A&gt;</ph> 기본 클래스가 기본 클래스의 메서드는 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)">
          <source>The data for the event.</source>
          <target state="translated">이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)">
          <source>Called when the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationDelta" /&gt;</ph> event occurs.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationDelta" /&gt;</ph> 이벤트가 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationDelta%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationDelta%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationDelta%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationDelta%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)">
          <source>Be sure to call the <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationDelta%2A&gt;</ph> method of the base class so that base classes receive the event.</source>
          <target state="translated">호출 하 여 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationDelta%2A&gt;</ph> 기본 클래스가 기본 클래스의 메서드는 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)">
          <source>The data for the event.</source>
          <target state="translated">이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)">
          <source>Called when the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /&gt;</ph> event occurs.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /&gt;</ph> 이벤트가 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)">
          <source>Be sure to call the <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A&gt;</ph> method of the base class so that base classes receive the event.</source>
          <target state="translated">호출 하 여 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A&gt;</ph> 기본 클래스가 기본 클래스의 메서드는 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)">
          <source>The data for the event.</source>
          <target state="translated">이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)">
          <source>Called when the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationStarted" /&gt;</ph> event occurs.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationStarted" /&gt;</ph> 이벤트가 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarted%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarted%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarted%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationStarted&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarted%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationStarted&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)">
          <source>Be sure to call the <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarted%2A&gt;</ph> method of the base class so that base classes receive the event.</source>
          <target state="translated">호출 하 여 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarted%2A&gt;</ph> 기본 클래스가 기본 클래스의 메서드는 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.ManipulationStartingEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.ManipulationStartingEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationStarting" /&gt;</ph> routed event that occurs when the manipulation processor is first created.</source>
          <target state="translated">조작 프로세서가 처음으로 만들어지면 발생하는 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationStarting" /&gt;</ph> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</target>       </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarting%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarting%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarting%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarting%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarting%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">기본 클래스를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarting%2A&gt;</ph> 기본 클래스가 메서드 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>This event data reports details about the mouse button that was pressed and the handled state.</source>
          <target state="translated">이 이벤트 데이터는 누른 상태 및 처리된 상태의 마우스 단추에 대한 세부 사항을 보고합니다.</target>       </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseDown" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Mouse button actions are also handled by a dedicated input manager.</source>
          <target state="translated">마우스 단추 작업 입력된 전용된 관리자에서 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</source>
          <target state="translated">명령 바인딩과 및 입력과 같은 마우스 단추 작업을 사용 하는 다른 프로그래밍 기능은 일반 마우스 단추 동작으로 노출 되기 전에 작업에 대 한 처리기를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If these input system features mark the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event as handled, <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseDown%2A&gt;</ph> is not invoked.</source>
          <target state="translated">이러한 시스템 기능 표시 입력은 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 이벤트를 처리 <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseDown%2A&gt;</ph> 가 호출 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>.</source>
          <target state="translated">이 클래스 처리기를 사용 하 여 처리 된 것으로 이벤트를 표시 하는 경우 사용자에 영향을 주는 다음과 같은 이벤트: <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either of these events may be raised on the receiving element when <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> is received.</source>
          <target state="translated">이들이 이벤트는 받는 요소에서 발생할 수 있습니다 때 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 수신 합니다.</target>       </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</source>
          <target state="translated">이 이벤트를 처리 하는 클래스에서 처리 된 것으로 표시 하는 경우 하위 이벤트는 여전히 발생 됩니다. 그러나 이벤트 데이터에서의 처리 상태를 전달합니다.</target>       </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> in order to attach handlers.</source>
          <target state="translated">명시적으로 사용 하지 않는 한 인스턴스 처리기 하위 이벤트에 대 한 클래스 처리에서의 이벤트를 처리 하는 경우 호출 되지 않습니다 <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> 와 <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> 처리기를 연결 하기 위해 합니다.</target>       </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Class handlers also are not invoked unless those class handlers were registered with the <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
          <target state="translated">클래스 처리기도가 호출 되지 않으면 해당 클래스 처리기에 등록 된는 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> 서명을 <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>By handling <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseDown%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button down actions.</source>
          <target state="translated">처리 하 여 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseDown%2A&gt;</ph>을 처리 클래스 처리에 가능한 모든 마우스 단추 누르기 작업이 있습니다.</target>       </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</source>
          <target state="translated">이 동작은 원치 않을 수 있습니다. 따라서이 가상 메서드를 사용 하 여 이벤트를 처리 하는 경우 주의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.</source>
          <target state="translated">각 단추 특정 직접 이벤트에는 가상 *; 메서드 여부 이러한 단추 특정 클래스 처리기를 재정의 더 적합할 수 있습니다 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseEnter" /&gt;</ph> attached event is raised on this element.</source>
          <target state="translated">이 요소에 의해 처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseEnter" /&gt;</ph> 연결된 이벤트가 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event, with a direct routing strategy.</source>
          <target state="translated">이 경우 일치 하는 이벤트는 직접 라우팅 전략으로 라우트된 이벤트를 합니다.</target>       </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">이벤트 처리로 표시 하는 것은 일반적인 인스턴스 처리기를 방지 하는 데 유용 (지정 하지 않는 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseLeave" /&gt;</ph> attached event is raised on this element.</source>
          <target state="translated">이 요소에 의해 처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseLeave" /&gt;</ph> 연결된 이벤트가 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event, with a direct routing strategy.</source>
          <target state="translated">이 경우 일치 하는 이벤트는 직접 라우팅 전략으로 라우트된 이벤트를 합니다.</target>       </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">이벤트 처리로 표시 하는 것은 일반적인 인스턴스 처리기를 방지 하는 데 유용 (지정 하지 않는 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the left mouse button was pressed.</source>
          <target state="translated">이벤트 데이터는 마우스 왼쪽 단추를 놓았음을 보고합니다.</target>       </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /&gt;</ph> routed event is raised on this element.</source>
          <target state="translated">이 요소에 의해 처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /&gt;</ph> 라우트된 이벤트가 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> 이벤트가 버블링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> is the underlying event that is bubble routed, and each <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 이 이벤트는, 및 각 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시킵니다. <ph id="ph3">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">사용 하기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">일반 마우스 이벤트 처리에 대 한 기본 구현은 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 수신 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 여 적절 한 로컬 이벤트로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</target>       </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph>.</source>
          <target state="translated">마우스 처리 동작을 변경할 수 없습니다 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 재정의 하 여 <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">또는 이벤트는 특정 마우스 상태에 대 한 처리를 변경 하려면이 메서드를 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">기본 구현을 호출 것인지 여부는 각 시나리오에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph>.</source>
          <target state="translated">기본 호출 하지 못하면 해당 마우스 이벤트 호출 하지 못하면 하는 상위 클래스에 대 한 기본 입력된 처리를 비활성화 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>For example, you can derive from <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> and override <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph> in your derived class without calling the base implementation; however, this override disables the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
          <target state="translated">하지만 파생 될 수 예를 들어 <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> 재정의 <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph> 프로그램 파생된 클래스에서 기본 구현을 호출 하지 않고이 재정의 해제 합니다.는 <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the left mouse button was released.</source>
          <target state="translated">이벤트 데이터는 마우스 왼쪽 단추를 놓았음을 보고합니다.</target>       </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /&gt;</ph> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> 이벤트가 버블링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> is the underlying event that is bubble routed, and each <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 이 이벤트는, 및 각 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시킵니다. <ph id="ph3">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">사용 하기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">일반 마우스 이벤트 처리에 대 한 기본 구현은 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 수신 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 여 적절 한 로컬 이벤트로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</target>       </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A&gt;</ph>.</source>
          <target state="translated">마우스 처리 동작을 변경할 수 없습니다 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 재정의 하 여 <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseMove" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the right mouse button was pressed.</source>
          <target state="translated">이벤트 데이터는 마우스 오른쪽 단추를 놓았음을 보고합니다.</target>       </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseRightButtonDown" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseRightButtonDown" /&gt;</ph> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph> 이벤트가 버블링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> is the underlying event that is bubble routed, and each <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 이 이벤트는, 및 각 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시킵니다. <ph id="ph3">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">사용 하기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">일반 마우스 이벤트 처리에 대 한 기본 구현은 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 수신 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 여 적절 한 로컬 이벤트로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</target>       </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseRightButtonDown%2A&gt;</ph>.</source>
          <target state="translated">마우스 처리 동작을 변경할 수 없습니다 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 재정의 하 여 <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseRightButtonDown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">또는 이벤트는 특정 마우스 상태에 대 한 처리를 변경 하려면이 메서드를 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">기본 구현을 호출 것인지 여부는 각 시나리오에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseRightButtonDown%2A&gt;</ph>.</source>
          <target state="translated">기본 호출 하지 못하면 해당 마우스 이벤트 호출 하지 못하면 하는 상위 클래스에 대 한 기본 입력된 처리를 비활성화 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseRightButtonDown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>For example, you can derive from <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> and override <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseRightButtonDown%2A&gt;</ph> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <ph id="ph3">&lt;xref:System.Windows.Controls.Control&gt;</ph> default behavior.</source>
          <target state="translated">하지만 파생 될 수 예를 들어 <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> 재정의 <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseRightButtonDown%2A&gt;</ph> 기본 호출 하지 않고 파생된 클래스에서이 재정의 사용할 구성 요소인 컨트롤에 대해 상황에 맞는 메뉴 서비스의는 <ph id="ph3">&lt;xref:System.Windows.Controls.Control&gt;</ph> 기본 동작입니다.</target>       </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the right mouse button was released.</source>
          <target state="translated">이벤트 데이터는 마우스 오른쪽 단추를 놓았음을 보고합니다.</target>       </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseRightButtonUp" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseRightButtonUp" /&gt;</ph> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph> 이벤트가 버블링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> is the underlying event that is bubble routed, and each <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 이 이벤트는, 및 각 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시킵니다. <ph id="ph3">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">사용 하기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">일반 마우스 이벤트 처리에 대 한 기본 구현은 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 수신 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 여 적절 한 로컬 이벤트로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</target>       </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseRightButtonUp%2A&gt;</ph>.</source>
          <target state="translated">마우스 처리 동작을 변경할 수 없습니다 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 재정의 하 여 <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseRightButtonUp%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the mouse button was released.</source>
          <target state="translated">이벤트 데이터는 마우스 단추를 놓았음을 보고합니다.</target>       </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseUp" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseUp" /&gt;</ph> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Mouse button actions are also handled by a dedicated input manager.</source>
          <target state="translated">마우스 단추 작업 입력된 전용된 관리자에서 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</source>
          <target state="translated">명령 바인딩과 및 입력과 같은 마우스 단추 작업을 사용 하는 다른 프로그래밍 기능은 일반 마우스 단추 동작으로 노출 되기 전에 작업에 대 한 처리기를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If these input system features mark the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> event as handled, <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseUp%2A&gt;</ph> is not invoked.</source>
          <target state="translated">이러한 시스템 기능 표시 입력은 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 이벤트를 처리 <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseUp%2A&gt;</ph> 가 호출 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>.</source>
          <target state="translated">이 클래스 처리기를 사용 하 여 처리 된 것으로 이벤트를 표시 하는 경우 사용자에 영향을 주는 다음과 같은 이벤트: <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either of these events might be raised on the receiving element when <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> is received.</source>
          <target state="translated">이들이 이벤트는 받는 요소에서 발생할 수 있습니다 때 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 수신 합니다.</target>       </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</source>
          <target state="translated">이 이벤트를 처리 하는 클래스에서 처리 된 것으로 표시 하는 경우 하위 이벤트는 여전히 발생 됩니다. 그러나 이벤트 데이터에서의 처리 상태를 전달합니다.</target>       </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> in order to attach handlers.</source>
          <target state="translated">명시적으로 사용 하지 않는 한 인스턴스 처리기 하위 이벤트에 대 한 클래스 처리에서의 이벤트를 처리 하는 경우 호출 되지 않습니다 <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> 와 <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> 처리기를 연결 하기 위해 합니다.</target>       </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Class handlers also are not invoked unless those class handlers were registered with the <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
          <target state="translated">클래스 처리기도가 호출 되지 않으면 해당 클래스 처리기에 등록 된는 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> 서명을 <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>By handling <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseUp%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button up actions.</source>
          <target state="translated">처리 하 여 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseUp%2A&gt;</ph>을 처리 클래스 처리에 가능한 모든 마우스 단추 동작을 합니다.</target>       </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</source>
          <target state="translated">이 동작은 원치 않을 수 있습니다. 따라서이 가상 메서드를 사용 하 여 이벤트를 처리 하는 경우 주의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.</source>
          <target state="translated">각 단추 특정 직접 이벤트에는 가상 *; 메서드 여부 이러한 단추 특정 클래스 처리기를 재정의 더 적합할 수 있습니다 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseWheelEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseWheelEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseWheel" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseWheel" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragEnter" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragEnter" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragLeave" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragLeave" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragOver" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragOver" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDrop" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDrop" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.GiveFeedbackEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.GiveFeedbackEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2013" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2014" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2016" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2023" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2024" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="2025" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2026" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2027" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2031" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2032" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2033" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2034" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2036" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2037" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="2038" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2039" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that one or more mouse buttons were pressed.</source>
          <target state="translated">이벤트 데이터는 하나 이상의 마우스 단추를 놓았음을 보고합니다.</target>       </trans-unit>
        <trans-unit id="2040" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /&gt;</ph> attached routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /&gt;</ph> 연결된 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2041" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2042" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Mouse button actions are also handled by a dedicated input manager.</source>
          <target state="translated">마우스 단추 작업 입력된 전용된 관리자에서 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="2043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</source>
          <target state="translated">명령 바인딩과 및 입력과 같은 마우스 단추 작업을 사용 하는 다른 프로그래밍 기능은 일반 마우스 단추 동작으로 노출 되기 전에 작업에 대 한 처리기를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2044" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If these input system features mark the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event as handled, <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseDown%2A&gt;</ph> is not invoked.</source>
          <target state="translated">이러한 시스템 기능 표시 입력은 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 이벤트를 처리 <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseDown%2A&gt;</ph> 가 호출 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="2045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph>.</source>
          <target state="translated">이 클래스 처리기를 사용 하 여 처리 된 것으로 이벤트를 표시 하는 경우 사용자에 영향을 주는 다음과 같은 이벤트: <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2046" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either of these events may be raised on the receiving element when <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> is received.</source>
          <target state="translated">이들이 이벤트는 받는 요소에서 발생할 수 있습니다 때 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2047" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</source>
          <target state="translated">이 이벤트를 처리 하는 클래스에서 처리 된 것으로 표시 하는 경우 하위 이벤트는 여전히 발생 됩니다. 그러나 이벤트 데이터에서의 처리 상태를 전달합니다.</target>       </trans-unit>
        <trans-unit id="2048" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> in order to attach handlers.</source>
          <target state="translated">명시적으로 사용 하지 않는 한 인스턴스 처리기 하위 이벤트에 대 한 클래스 처리에서의 이벤트를 처리 하는 경우 호출 되지 않습니다 <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> 와 <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> 처리기를 연결 하기 위해 합니다.</target>       </trans-unit>
        <trans-unit id="2049" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Class handlers also are not invoked unless those class handlers were registered with the <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
          <target state="translated">클래스 처리기도가 호출 되지 않으면 해당 클래스 처리기에 등록 된는 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> 서명을 <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2050" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>By handling <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseDown%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button down actions.</source>
          <target state="translated">처리 하 여 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseDown%2A&gt;</ph>을 처리 클래스 처리에 가능한 모든 마우스 단추 누르기 작업이 있습니다.</target>       </trans-unit>
        <trans-unit id="2051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</source>
          <target state="translated">이 동작은 원치 않을 수 있습니다. 따라서이 가상 메서드를 사용 하 여 이벤트를 처리 하는 경우 주의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.</source>
          <target state="translated">각 단추 특정 직접 이벤트에는 가상 *; 메서드 여부 이러한 단추 특정 클래스 처리기를 재정의 더 적합할 수 있습니다 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2054" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2055" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2057" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2059" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2060" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2061" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="2063" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2064" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the left mouse button was pressed.</source>
          <target state="translated">이벤트 데이터는 마우스 왼쪽 단추를 놓았음을 보고합니다.</target>       </trans-unit>
        <trans-unit id="2065" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /&gt;</ph> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2066" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2067" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> 이벤트 터널링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="2068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> is the underlying event that is tunnel routed, and each <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 이 이벤트는 라우팅, 터널 및 각 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">사용 하기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="2070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="2071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">일반 마우스 이벤트 처리에 대 한 기본 구현은 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 수신 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 여 적절 한 로컬 이벤트로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="2072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</target>       </trans-unit>
        <trans-unit id="2073" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>.</source>
          <target state="translated">마우스 처리 동작을 변경할 수 없습니다 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 재정의 하 여 <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2075" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">또는 이벤트는 특정 마우스 상태에 대 한 처리를 변경 하려면이 메서드를 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2076" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">기본 구현을 호출 것인지 여부는 각 시나리오에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="2077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>.</source>
          <target state="translated">기본 호출 하지 못하면 해당 마우스 이벤트 호출 하지 못하면 하는 상위 클래스에 대 한 기본 입력된 처리를 비활성화 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>For example, you can derive from <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> and override <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph> in your derived class without calling the base implementation; however, this override disables the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
          <target state="translated">하지만 파생 될 수 예를 들어 <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> 재정의 <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph> 프로그램 파생된 클래스에서 기본 구현을 호출 하지 않고이 재정의 해제 합니다.는 <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2079" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2080" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the left mouse button was released.</source>
          <target state="translated">이벤트 데이터는 마우스 왼쪽 단추를 놓았음을 보고합니다.</target>       </trans-unit>
        <trans-unit id="2081" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /&gt;</ph> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2082" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2083" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> 이벤트 터널링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="2084" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> is the underlying event that is tunnel routed, and each <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 이 이벤트는 라우팅, 터널 및 각 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2085" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">사용 하기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="2086" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="2087" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">일반 마우스 이벤트 처리에 대 한 기본 구현은 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 수신 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 여 적절 한 로컬 이벤트로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="2088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</target>       </trans-unit>
        <trans-unit id="2089" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2090" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A&gt;</ph>.</source>
          <target state="translated">마우스 처리 동작을 변경할 수 없습니다 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 재정의 하 여 <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2091" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2092" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2093" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2100" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2101" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2103" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="2104" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2105" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the right mouse button was pressed.</source>
          <target state="translated">이벤트 데이터는 마우스 오른쪽 단추를 놓았음을 보고합니다.</target>       </trans-unit>
        <trans-unit id="2106" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /&gt;</ph> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2107" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph> 이벤트 터널링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="2109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> is the underlying event that is tunnel routed, and each <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 이 이벤트는 라우팅, 터널 및 각 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <ph id="ph3">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">사용 하기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="2111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="2112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">일반 마우스 이벤트 처리에 대 한 기본 구현은 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 수신 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 여 적절 한 로컬 이벤트로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="2113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</target>       </trans-unit>
        <trans-unit id="2114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>.</source>
          <target state="translated">마우스 처리 동작을 변경할 수 없습니다 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 재정의 하 여 <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">또는 이벤트는 특정 마우스 상태에 대 한 처리를 변경 하려면이 메서드를 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">기본 구현을 호출 것인지 여부는 각 시나리오에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="2118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>.</source>
          <target state="translated">기본 호출 하지 못하면 해당 마우스 이벤트 호출 하지 못하면 하는 상위 클래스에 대 한 기본 입력된 처리를 비활성화 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>For example, you can derive from <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> and override <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A&gt;</ph> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <ph id="ph3">&lt;xref:System.Windows.Controls.Control&gt;</ph> default behavior.</source>
          <target state="translated">하지만 파생 될 수 예를 들어 <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> 재정의 <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A&gt;</ph> 기본 호출 하지 않고 파생된 클래스에서이 재정의 사용할 구성 요소인 컨트롤에 대해 상황에 맞는 메뉴 서비스의는 <ph id="ph3">&lt;xref:System.Windows.Controls.Control&gt;</ph> 기본 동작입니다.</target>       </trans-unit>
        <trans-unit id="2120" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2121" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the right mouse button was released.</source>
          <target state="translated">이벤트 데이터는 마우스 오른쪽 단추를 놓았음을 보고합니다.</target>       </trans-unit>
        <trans-unit id="2122" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /&gt;</ph> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2123" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph> 이벤트 터널링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="2125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> is the underlying event that is tunnel routed, and each <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 이 이벤트는 라우팅, 터널 및 각 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">사용 하기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="2127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="2128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">일반 마우스 이벤트 처리에 대 한 기본 구현은 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 수신 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 여 적절 한 로컬 이벤트로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="2129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</target>       </trans-unit>
        <trans-unit id="2130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A&gt;</ph>.</source>
          <target state="translated">마우스 처리 동작을 변경할 수 없습니다 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 재정의 하 여 <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2132" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2133" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that one or more mouse buttons were released.</source>
          <target state="translated">이벤트 데이터는 하나 이상의 마우스 단추를 놓았음을 보고합니다.</target>       </trans-unit>
        <trans-unit id="2134" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2135" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Mouse button actions are also handled by a dedicated input manager.</source>
          <target state="translated">마우스 단추 작업 입력된 전용된 관리자에서 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="2137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</source>
          <target state="translated">명령 바인딩과 및 입력과 같은 마우스 단추 작업을 사용 하는 다른 프로그래밍 기능은 일반 마우스 단추 동작으로 노출 되기 전에 작업에 대 한 처리기를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If these input system features mark the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event as handled, <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseUp%2A&gt;</ph> is not invoked.</source>
          <target state="translated">이러한 시스템 기능 표시 입력은 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 이벤트를 처리 <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseUp%2A&gt;</ph> 가 호출 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="2139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>.</source>
          <target state="translated">이 클래스 처리기를 사용 하 여 처리 된 것으로 이벤트를 표시 하는 경우 사용자에 영향을 주는 다음과 같은 이벤트: <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either of these events might be raised on the receiving element when <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> is received.</source>
          <target state="translated">이들이 이벤트는 받는 요소에서 발생할 수 있습니다 때 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</source>
          <target state="translated">이 이벤트를 처리 하는 클래스에서 처리 된 것으로 표시 하는 경우 하위 이벤트는 여전히 발생 됩니다. 그러나 이벤트 데이터에서의 처리 상태를 전달합니다.</target>       </trans-unit>
        <trans-unit id="2142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> in order to attach handlers.</source>
          <target state="translated">명시적으로 사용 하지 않는 한 인스턴스 처리기 하위 이벤트에 대 한 클래스 처리에서의 이벤트를 처리 하는 경우 호출 되지 않습니다 <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> 와 <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> 처리기를 연결 하기 위해 합니다.</target>       </trans-unit>
        <trans-unit id="2143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Class handlers also are not invoked unless those class handlers were registered with the <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
          <target state="translated">클래스 처리기도가 호출 되지 않으면 해당 클래스 처리기에 등록 된는 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> 서명을 <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>By handling <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseUp%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button up actions.</source>
          <target state="translated">처리 하 여 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseUp%2A&gt;</ph>을 처리 클래스 처리에 가능한 모든 마우스 단추 동작을 합니다.</target>       </trans-unit>
        <trans-unit id="2145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</source>
          <target state="translated">이 동작은 원치 않을 수 있습니다. 따라서이 가상 메서드를 사용 하 여 이벤트를 처리 하는 경우 주의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.</source>
          <target state="translated">각 단추 특정 직접 이벤트에는 가상 *; 메서드 여부 이러한 단추 특정 클래스 처리기를 재정의 더 적합할 수 있습니다 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2156" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseWheelEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseWheelEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2157" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2158" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="2169" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.QueryContinueDragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.QueryContinueDragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2170" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2171" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="2182" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2183" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2184" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="2195" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2196" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2197" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="2208" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusDownEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusDownEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2209" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2210" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="2221" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2222" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2223" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="2234" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2235" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2236" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="2247" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2248" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2249" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="2260" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2261" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2262" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="2273" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2274" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2275" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="2286" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2287" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2288" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="2299" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.TextCompositionEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TextCompositionEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2300" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2301" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="2312" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2313" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchDown" /&gt;</ph> routed event that occurs when a touch presses this element.</source>
          <target state="translated">터치가 이 요소를 누를 때 발생하는 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchDown" /&gt;</ph> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</target>       </trans-unit>
        <trans-unit id="2314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchDown%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchDown%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchDown%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchDown%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchDown%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">기본 클래스를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchDown%2A&gt;</ph> 기본 클래스가 메서드 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="2317" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2318" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchMove" /&gt;</ph> routed event that occurs when a touch moves while inside this element.</source>
          <target state="translated">이 요소 내부에 있는 동안 터치가 이동할 때 발생하는 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchMove" /&gt;</ph> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</target>       </trans-unit>
        <trans-unit id="2319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchMove%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchMove%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchMove%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewTouchMove&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchMove%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewTouchMove&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchMove%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">기본 클래스를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchMove%2A&gt;</ph> 기본 클래스가 메서드 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="2322" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2323" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchUp" /&gt;</ph> routed event that occurs when a touch is released inside this element.</source>
          <target state="translated">이 요소 내에서 터치를 해제할 때 발생하는 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchUp" /&gt;</ph> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</target>       </trans-unit>
        <trans-unit id="2324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchUp%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchUp%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchUp%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewTouchUp&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchUp%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewTouchUp&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchUp%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">기본 클래스를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchUp%2A&gt;</ph> 기본 클래스가 메서드 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="2327" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.QueryContinueDragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.QueryContinueDragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2328" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.QueryContinueDrag" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.QueryContinueDrag" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2329" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2339" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.QueryCursorEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.QueryCursorEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2340" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.QueryCursor" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.QueryCursor" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2341" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2351" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)">
          <source>The drawing instructions for a specific element.</source>
          <target state="translated">특정 요소의 그리기 지침입니다.</target>       </trans-unit>
        <trans-unit id="2352" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)">
          <source>This context is provided to the layout system.</source>
          <target state="translated">이 컨텍스트는 레이아웃 시스템에 제공됩니다.</target>       </trans-unit>
        <trans-unit id="2353" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)">
          <source>When overridden in a derived class, participates in rendering operations that are directed by the layout system.</source>
          <target state="translated">파생 클래스에서 재정의된 경우 레이아웃 시스템에서 감독하는 렌더링 작업에 참여합니다.</target>       </trans-unit>
        <trans-unit id="2354" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)">
          <source>The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.</source>
          <target state="translated">이 요소의 렌더링 지침은 이 메서드를 호출할 때 직접 사용되지 않으며 나중에 레이아웃 및 그리기에 비동기 방식으로 사용하도록 유지됩니다.</target>       </trans-unit>
        <trans-unit id="2355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)">
          <source>This method has no default implementation in the <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> class.</source>
          <target state="translated">기본 구현에는이 메서드는 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)">
          <source>The following code example shows a possible implementation for a panel derived class.</source>
          <target state="translated">다음 코드 예제에서는 패널 파생 클래스에 대 한 가능한 구현을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="2357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /&gt;</ph> method can be overridden to add further graphical elements (not previously defined in a logical tree) to a rendered element, such as effects or adorners.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /&gt;</ph> 효과 또는 표시기 등의 렌더링 된 요소에 그래픽 요소 (이전에 정의 되지 논리적 트리에서) 강화를 위해 메서드를 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Media.DrawingContext" /&gt;</ph> object is passed as an argument, which provides methods for drawing shapes, text, images or videos.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Windows.Media.DrawingContext" /&gt;</ph> 개체 셰이프, 텍스트, 이미지 또는 비디오를 그리기 위한 메서드를 제공 하는 인수로 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="2359" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>The packaged parameters (<ph id="ph1">&lt;see cref="T:System.Windows.SizeChangedInfo" /&gt;</ph>), which includes old and new sizes, and which dimension actually changes.</source>
          <target state="translated">이전 크기와 새 크기를 포함하며 크기가 실제로 변경되는 패키지된 매개 변수(<ph id="ph1">&lt;see cref="T:System.Windows.SizeChangedInfo" /&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="2360" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>When overridden in a derived class, participates in rendering operations that are directed by the layout system.</source>
          <target state="translated">파생 클래스에서 재정의된 경우 레이아웃 시스템에서 감독하는 렌더링 작업에 참여합니다.</target>       </trans-unit>
        <trans-unit id="2361" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>This method is invoked after layout update, and before rendering, if the element's <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.RenderSize" /&gt;</ph> has changed as a result of layout update.</source>
          <target state="translated">레이아웃 업데이트 결과 요소의 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.RenderSize" /&gt;</ph>가 변경된 경우 이 메서드는 레이아웃 업데이트와 렌더링 사이에 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>A typical WPF framework-level element uses the override implementation from <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
          <target state="translated">일반적인 WPF 프레임 워크 수준 요소에서 재정의 구현을 사용 하 여 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> implementation invalidates the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> properties and handles the basics of remaking the layout.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 구현 무효화는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> 속성 및 레이아웃을 다시 만드는의 기본 작업을 처리 합니다.</target>       </trans-unit>
        <trans-unit id="2365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>Overriding <ph id="ph1">&lt;xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt;</ph> at the <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> level implies that your element implementation is deliberately not using the WPF framework-level implementation, and therefore your element must handle layout logic more directly, typically by writing a replacement layout system.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt;</ph> 에 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 수준 요소 구현 WPF 프레임 워크 수준 구현을 사용 하 여 의도적으로 되 고 따라서 요소 처리 해야 레이아웃 논리를 보다 직접적 일반적으로 작성 하 여 있음을 의미는 이 레이아웃 시스템을 대체 합니다.</target>       </trans-unit>
        <trans-unit id="2366" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2367" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2368" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2378" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2379" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2380" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2390" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusDownEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusDownEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2391" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusDown" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2392" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2402" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2403" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusEnter" /&gt;</ph> attached event is raised by this element.</source>
          <target state="translated">이 요소에 의해 처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusEnter" /&gt;</ph> 연결된 이벤트가 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2404" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="2408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">이벤트 처리로 표시 하는 것은 일반적인 인스턴스 처리기를 방지 하는 데 유용 (지정 하지 않는 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="2411" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2412" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2413" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2423" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2424" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusInRange" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusInRange" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2425" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2435" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2436" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusLeave" /&gt;</ph> attached event is raised by this element.</source>
          <target state="translated">이 요소에 의해 처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusLeave" /&gt;</ph> 연결된 이벤트가 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2437" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="2441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">이벤트 처리로 표시 하는 것은 일반적인 인스턴스 처리기를 방지 하는 데 유용 (지정 하지 않는 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="2444" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2445" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusMove" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2446" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2456" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2457" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2458" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2468" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2469" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2470" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2480" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2481" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusUp" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2482" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2492" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.TextCompositionEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TextCompositionEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2493" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2494" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="2495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="2499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="2500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="2502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2504" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2505" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchDown" /&gt;</ph> routed event that occurs when a touch presses inside this element.</source>
          <target state="translated">터치가 이 요소 내부를 누를 때 발생하는 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchDown" /&gt;</ph> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</target>       </trans-unit>
        <trans-unit id="2506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchDown%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchDown%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchDown%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchDown%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchDown%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">기본 클래스를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchDown%2A&gt;</ph> 기본 클래스가 메서드 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="2509" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2510" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchEnter" /&gt;</ph> routed event that occurs when a touch moves from outside to inside the bounds of this element.</source>
          <target state="translated">터치가 이 요소의 경계 외부에서 내부로 이동할 때 발생하는 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchEnter" /&gt;</ph> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</target>       </trans-unit>
        <trans-unit id="2511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchEnter%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchEnter%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchEnter%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchEnter&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchEnter%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchEnter&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchEnter%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">기본 클래스를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchEnter%2A&gt;</ph> 기본 클래스가 메서드 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="2514" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2515" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchLeave" /&gt;</ph> routed event that occurs when a touch moves from inside to outside the bounds of this <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>.</source>
          <target state="translated">터치가 이 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchLeave" /&gt;</ph>의 경계 내부에서 외부로 이동할 때 발생하는 <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</target>       </trans-unit>
        <trans-unit id="2516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchLeave%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchLeave%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchLeave%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchLeave&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchLeave%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchLeave&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchLeave%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">기본 클래스를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchLeave%2A&gt;</ph> 기본 클래스가 메서드 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="2519" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2520" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchMove" /&gt;</ph> routed event that occurs when a touch moves while inside this element.</source>
          <target state="translated">이 요소 내부에 있는 동안 터치가 이동할 때 발생하는 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchMove" /&gt;</ph> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</target>       </trans-unit>
        <trans-unit id="2521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchMove%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchMove%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchMove%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchMove&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchMove%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchMove&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchMove%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">기본 클래스를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchMove%2A&gt;</ph> 기본 클래스가 메서드 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="2524" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2525" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchUp" /&gt;</ph> routed event that occurs when a touch is released inside this element.</source>
          <target state="translated">이 요소 내에서 터치를 해제할 때 발생하는 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchUp" /&gt;</ph> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</target>       </trans-unit>
        <trans-unit id="2526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchUp%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchUp%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchUp%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchUp&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchUp%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchUp&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchUp%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">기본 클래스를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchUp%2A&gt;</ph> 기본 클래스가 메서드 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="2529" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>The previous parent.</source>
          <target state="translated">이전 부모입니다.</target>       </trans-unit>
        <trans-unit id="2530" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>This may be provided as <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> did not have a parent element previously.</source>
          <target state="translated">이전에 <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>에 부모 요소가 없었던 경우 <ph id="ph1">&lt;see langword="null" /&gt;</ph>로 제공될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2531" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Invoked when the parent element of this <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> reports a change to its underlying visual parent.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>의 부모 요소가 기본 시각적 부모의 변경을 보고하면 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>If you override this method, always call the base implementation.</source>
          <target state="translated">이 메서드를 재정의 하는 경우에 항상 기본 구현을 호출 합니다.</target>       </trans-unit>
        <trans-unit id="2533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>The default base implementation performs some internal maintenance of reverse-inherited property state.</source>
          <target state="translated">기본 구현은 일부 내부 역방향 상속 속성 상태를 유지 관리를 수행합니다.</target>       </trans-unit>
        <trans-unit id="2534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Failing to call the base implementation will invalidate this state.</source>
          <target state="translated">기본 구현을 호출 하지 못하면이 상태를 무효화 됩니다.</target>       </trans-unit>
        <trans-unit id="2535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>This method overrides <ph id="ph1">&lt;see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" /&gt;</ph>.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" /&gt;</ph>를 재정의합니다.</target>       </trans-unit>
        <trans-unit id="2536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> both also override the <ph id="ph3">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> implementation of <ph id="ph4">&lt;see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" /&gt;</ph>, and <ph id="ph5">&lt;see cref="T:System.Windows.Window" /&gt;</ph> seals it.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 둘 다 재정의 <ph id="ph3">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 구현의 <ph id="ph4">&lt;see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" /&gt;</ph>, 및 <ph id="ph5">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 봉인 합니다.</target>       </trans-unit>
        <trans-unit id="2537" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Opacity">
          <source>Gets or sets the opacity factor applied to the entire <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> when it is rendered in the <ph id="ph2">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph2">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>에 렌더링될 때 전체 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>에 적용되는 불투명도 인수를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="2538" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Opacity">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="2539" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>The opacity factor.</source>
          <target state="translated">불투명도 요소입니다.</target>       </trans-unit>
        <trans-unit id="2540" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>Default opacity is 1.0.</source>
          <target state="translated">기본 불투명도는 1.0입니다.</target>       </trans-unit>
        <trans-unit id="2541" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>Expected values are between 0.0 and 1.0.</source>
          <target state="translated">예상 값은 0.0에서 1.0 사이입니다.</target>       </trans-unit>
        <trans-unit id="2542" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>The 1.0 default value is the default provided by the initial metadata of this dependency property on the <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> class.</source>
          <target state="translated">1.0 기본 값은 기본적으로이 종속성 속성의 초기 메타 데이터는 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2543" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>Other derived classes may potentially change this default value by overriding the metadata from within their class constructor.</source>
          <target state="translated">잠재적으로 다른 파생된 클래스 해당 클래스 생성자 내에서 메타 데이터를 재정의 하 여이 기본값을 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2544" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>The value of <ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> won't be applied to actual layout unless the element is also visible (<ph id="ph2">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph> is <ph id="ph3">`true`</ph>).</source>
          <target state="translated">값 <ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> 요소가 표시 하지 않는 한 실제 레이아웃에 적용 되지 않습니다 (<ph id="ph2">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph> 은 <ph id="ph3">`true`</ph>).</target>       </trans-unit>
        <trans-unit id="2545" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> is applied from parent elements on down the element tree to child elements, but the visible effects of the nested opacity settings aren't indicated in the property value of individual child elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> 가에서 부모 요소에 적용 요소 트리의 자식 요소를 있지만 중첩된 된 불투명도 설정의 개별 자식 요소 속성 값에 나타나지의 시각 효과를.</target>       </trans-unit>
        <trans-unit id="2546" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>For instance, if a list has a 50% (0.5) opacity and one of its list items has its own opacity set to 20% (0.2), the net visible opacity for that list item will be rendered as if it were 10% (0.1), but the property value of the list item <ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> property would still be 0.2 when queried.</source>
          <target state="translated">예를 들어, 목록에는 불투명도 50% (0.5)은 해당 목록 항목 중 하나에 불투명도 20% (0.2)로 설정 하는 경우 해당 목록 항목에 대 한 순수 표시 불투명도 됩니다 처럼 렌더링 되도록는 10% (0.1) 목록 항목의 속성 값을 제외한 <ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> 속성 수  쿼리할 때 0.2입니다.</target>       </trans-unit>
        <trans-unit id="2547" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>Even if the declared or evaluated opacity is 0, an element still participates in input events and commands, and is potentially focusable.</source>
          <target state="translated">선언 또는 계산 된 불투명도 0 인 경우에 요소 여전히 입력된 이벤트 및 명령에 참여 하 고 잠재적으로 포커스를 받을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2548" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>This aspect can be useful, for instance you can use an opacity-zero object (such as a shape) for masking underlying objects with transparent elements.</source>
          <target state="translated">이 측면이 마스킹 투명 한 요소가 포함 된 내부 개체에 대 한 불투명도 0 개체 (예: 모양)를 사용할 수는 예를 들어 유용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2549" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>The opacity-zero object can then handle all the input event processing for an underlying area.</source>
          <target state="translated">불투명도 0 인 개체는 모든 입력된 이벤트의 기본 영역에 대 한 처리를 처리한 다음 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2550" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>However, the <ph id="ph1">`Background`</ph> or <ph id="ph2">`Fill`</ph> of the object or shape should be set to a value, even if it is <ph id="ph3">&lt;xref:System.Windows.Media.Brushes.Transparent%2A&gt;</ph>, otherwise hit testing is not enabled, and no events are received.</source>
          <target state="translated">그러나는 <ph id="ph1">`Background`</ph> 또는 <ph id="ph2">`Fill`</ph> 개체 또는 셰이프 설정할지를 값으로는 경우에 <ph id="ph3">&lt;xref:System.Windows.Media.Brushes.Transparent%2A&gt;</ph>, 그렇지 않으면 적중 테스트를 사용 하지 않는 및 받은 이벤트가 없습니다.</target>       </trans-unit>
        <trans-unit id="2551" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="2552" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2553" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="2554" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="2555" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.OpacityMask">
          <source>Gets or sets an opacity mask, as a <ph id="ph1">&lt;see cref="T:System.Windows.Media.Brush" /&gt;</ph> implementation that is applied to any alpha-channel masking for the rendered content of this element.</source>
          <target state="translated">이 요소의 렌더링된 내용에 대한 알파 채널 마스킹에 적용되는 <ph id="ph1">&lt;see cref="T:System.Windows.Media.Brush" /&gt;</ph> 구현으로 불투명 마스크를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="2556" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.OpacityMask">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="2557" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>The brush to use for opacity masking.</source>
          <target state="translated">불투명 마스크에 사용할 브러시입니다.</target>       </trans-unit>
        <trans-unit id="2558" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>This property only uses whatever the alpha channel value is for the supplied <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph>.</source>
          <target state="translated">이 속성에서 제공 된 무엇이 알파 채널 값만 사용 <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2559" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>The other channels of the <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph>'s rendered content (Red, Green, or Blue) are ignored.</source>
          <target state="translated">다른 채널의는 <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph>의 렌더링 된 콘텐츠에 (빨강, 녹색 또는 파란색)은 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="2560" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>The most typical <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph> for this purpose is an <ph id="ph2">&lt;xref:System.Windows.Media.ImageBrush&gt;</ph>, which can be used for a variety of photo masking techniques such as a vignette.</source>
          <target state="translated">가장 일반적인 <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph> 이러한 용도로 <ph id="ph2">&lt;xref:System.Windows.Media.ImageBrush&gt;</ph>, 다양 한 사진 마스킹는 비네팅 같은 기술에 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2561" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>But any defined <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph> (such as <ph id="ph2">&lt;xref:System.Windows.Media.LinearGradientBrush&gt;</ph>) can be used.</source>
          <target state="translated">하지만 정의 <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph> (예: <ph id="ph2">&lt;xref:System.Windows.Media.LinearGradientBrush&gt;</ph>) 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2562" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>In <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph>, this property value can use an inline syntax that is specific to each implementation of the <ph id="ph2">&lt;xref:System.Windows.Media.Brush&gt;</ph> abstract class.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph>,이 속성 값의 각 구현은에 관련 된 인라인 구문을 사용할 수는 <ph id="ph2">&lt;xref:System.Windows.Media.Brush&gt;</ph> 추상 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2563" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>For more information, see <bpt id="p1">[</bpt>Painting with Solid Colors and Gradients Overview<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>단색 및 그라데이션 개요 그리기<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2564" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="2565" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2566" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="2567" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="2568" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>The following markup example shows an <ph id="ph1">&lt;xref:System.Windows.Media.ImageBrush&gt;</ph> opacity mask applied to another <ph id="ph2">&lt;xref:System.Windows.Controls.Image&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 태그는 <ph id="ph1">&lt;xref:System.Windows.Media.ImageBrush&gt;</ph> 다른 적용 된 불투명도 마스크가 <ph id="ph2">&lt;xref:System.Windows.Controls.Image&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2569" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.OpacityMaskProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.OpacityMask" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.OpacityMask" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="2570" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.OpacityProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Opacity" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Opacity" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="2571" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.PersistId">
          <source>Gets a value that uniquely identifies this element.</source>
          <target state="translated">이 요소를 고유하게 식별하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="2572" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.PersistId">
          <source>The unique identifier for this element.</source>
          <target state="translated">이 요소에 대한 고유 식별자입니다.</target>       </trans-unit>
        <trans-unit id="2573" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.PersistId">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.PersistId%2A&gt;</ph> uniquely identifies each element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PersistId%2A&gt;</ph> 각 요소를 고유 하 게 식별합니다.</target>       </trans-unit>
        <trans-unit id="2574" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.PersistId">
          <source>An element keeps the same <ph id="ph1">&lt;xref:System.Windows.UIElement.PersistId%2A&gt;</ph> every time the same <ph id="ph2">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> is loaded (including binary representations).</source>
          <target state="translated">동일한 요소 유지 <ph id="ph1">&lt;xref:System.Windows.UIElement.PersistId%2A&gt;</ph> 될 때마다 동일한 <ph id="ph2">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> (바이너리 포함)에 로드 됩니다.</target>       </trans-unit>
        <trans-unit id="2575" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.PersistId">
          <source>This identifier is used for internal loading, parsing and serialization requirements.</source>
          <target state="translated">이 식별자는 내부 로드, 구문 분석 및 serialization 요구 사항에 대해 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="2576" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.PersistId">
          <source>It is not intended to be used by your application code.</source>
          <target state="translated">응용 프로그램 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="2577" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.PersistId">
          <source>This property has no relationship to the <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> result for any given instance.</source>
          <target state="translated">이 속성에 관계 없이 <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> 지정된 된 인스턴스에 대 한 결과입니다.</target>       </trans-unit>
        <trans-unit id="2578" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>The direction of the requested focus traversal.</source>
          <target state="translated">요청된 포커스 이동 방향입니다.</target>       </trans-unit>
        <trans-unit id="2579" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 지정된 포커스 이동 방향에 대해 포커스를 받는 요소를 반환하며 실제로 해당 요소로 포커스를 이동하지는 않습니다.</target>       </trans-unit>
        <trans-unit id="2580" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>The element that would have received focus if <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" /&gt;</ph> were actually invoked.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" /&gt;</ph>가 실제로 호출된 경우에 포커스를 받는 요소입니다.</target>       </trans-unit>
        <trans-unit id="2581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>The default implementation of this method in this class is incomplete, and always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">이 클래스에이 메서드의 기본 구현 완료 되며 항상 반환 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2582" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewDragEnter">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag target.</source>
          <target state="translated">입력 시스템에서 이 요소를 끌기 대상으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2583" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragEnter">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewDragEnter&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewDragEnter&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2584" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragEnter">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDragEnter&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDragEnter&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2585" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragEnter">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2586" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragEnter">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2587" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragEnter">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2588" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragEnter">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2589" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragEnter">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2590" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragEnter">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.DragEnter&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.DragEnter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2591" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragEnter">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewDragEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewDragEnter%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2592" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewDragEnterEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewDragEnter" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewDragEnter" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2593" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragEnterEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2594" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragEnterEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2595" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragEnterEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2596" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragEnterEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2597" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragEnterEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2598" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewDragLeave">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag origin.</source>
          <target state="translated">입력 시스템에서 이 요소를 끌기 원본으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2599" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragLeave">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewDragLeave&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewDragLeave&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2600" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragLeave">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDragLeave&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDragLeave&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2601" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragLeave">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2602" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragLeave">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2603" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragLeave">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2604" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragLeave">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2605" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragLeave">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2606" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragLeave">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.DragLeave&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.DragLeave&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2607" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragLeave">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewDragLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewDragLeave%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2608" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewDragLeaveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewDragLeave" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewDragLeave" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2609" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragLeaveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2610" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragLeaveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2611" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragLeaveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2612" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragLeaveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2613" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragLeaveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2614" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewDragOver">
          <source>Occurs when the input system reports an underlying drag event with this element as the potential drop target.</source>
          <target state="translated">입력 시스템에서 이 요소를 잠재적인 놓기 대상으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2615" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragOver">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewDragOver&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewDragOver&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2616" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragOver">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDragOver&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDragOver&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2617" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragOver">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2618" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragOver">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2619" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragOver">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2620" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragOver">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2621" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragOver">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2622" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragOver">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.DragOver&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.DragOver&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2623" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragOver">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewDragOver%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewDragOver%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2624" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewDragOverEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewDragOver" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewDragOver" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2625" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragOverEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2626" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragOverEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2627" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragOverEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2628" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragOverEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2629" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragOverEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2630" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewDrop">
          <source>Occurs when the input system reports an underlying drop event with this element as the drop target.</source>
          <target state="translated">입력 시스템에서 이 요소를 놓기 대상으로 사용하는 기본 놓기 이벤트를 보고하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2631" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDrop">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewDrop&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewDrop&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2632" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDrop">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDrop&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDrop&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2633" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDrop">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2634" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDrop">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2635" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDrop">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2636" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDrop">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2637" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDrop">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2638" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDrop">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.Drop&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.Drop&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2639" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDrop">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewDrop%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewDrop%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2640" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewDropEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewDrop" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewDrop" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2641" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDropEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2642" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDropEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2643" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDropEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2644" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDropEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2645" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDropEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2646" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewGiveFeedback">
          <source>Occurs when a drag-and-drop operation is started.</source>
          <target state="translated">끌어서 놓기 작업이 시작되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2647" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGiveFeedback">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewGiveFeedback&gt;</ph> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewGiveFeedback&gt;</ph> 이벤트를 사용 하면 끌어서 놓기 작업 중 사용자의 시각적 피드백을 제공 하기 위해 마우스 포인터의 모양을 수정 하려면 끌기 이벤트의 소스입니다.</target>       </trans-unit>
        <trans-unit id="2648" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGiveFeedback">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewGiveFeedback&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewGiveFeedback&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2649" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGiveFeedback">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewGiveFeedback&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewGiveFeedback&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2650" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGiveFeedback">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2651" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGiveFeedback">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2652" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGiveFeedback">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2653" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGiveFeedback">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2654" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGiveFeedback">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2655" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGiveFeedback">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.GiveFeedback&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.GiveFeedback&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2656" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGiveFeedback">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2657" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewGiveFeedbackEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2658" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewGiveFeedbackEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2659" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewGiveFeedbackEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2660" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewGiveFeedbackEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2661" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewGiveFeedbackEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2662" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewGiveFeedbackEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2663" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>Occurs when the keyboard is focused on this element.</source>
          <target state="translated">이 요소에 키보드 포커스가 있으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2664" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">이 이벤트는 라우팅 터널링을 사용 하므로 포커스가 있는 요소는 이벤트 처리기가 실제로 연결 된 요소가 아닌 자식 요소 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2665" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has focus.</source>
          <target state="translated">확인의 <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> 이벤트 데이터에 포커스가 있는 실제 요소를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="2666" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2667" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2668" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2669" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2670" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2671" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2672" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2673" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2674" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2675" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2676" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2677" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2678" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2679" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2680" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2681" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>Occurs when a key is pressed while focus is on this element.</source>
          <target state="translated">이 요소에 포커스가 있는 동안 키를 누르면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2682" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>Key handling interacts with other platform features such as commanding and text composition.</source>
          <target state="translated">키 처리 명령 및 텍스트 컴퍼지션 등 다른 플랫폼의 기능으로 작용합니다.</target>       </trans-unit>
        <trans-unit id="2683" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph> event is a lower-level text input event that might not behave as expected on certain controls.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph> 이벤트는 하위 수준의 텍스트 입력된 이벤트를 특정 컨트롤에 예상 대로 동작 하지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2684" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</source>
          <target state="translated">일부 컨트롤은 컨트롤 합성 클래스 처리에 더 높은 수준의 버전의 텍스트를 제공 하는 입력 처리 및 관련 이벤트 또는 때문입니다.</target>       </trans-unit>
        <trans-unit id="2685" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewKeyDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewKeyDown&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2686" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewKeyDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewKeyDown&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2687" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2688" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2689" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2690" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2691" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2692" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2693" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewKeyDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewKeyDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2694" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewKeyDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewKeyDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewKeyDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2695" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewKeyDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2696" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewKeyDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2697" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewKeyDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2698" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewKeyDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2699" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewKeyDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2700" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>Occurs when a key is released while focus is on this element.</source>
          <target state="translated">이 요소에 포커스가 있는 동안 키를 놓을 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="2701" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>Key handling interacts with other platform features such as commanding and text composition.</source>
          <target state="translated">키 처리 명령 및 텍스트 컴퍼지션 등 다른 플랫폼의 기능으로 작용합니다.</target>       </trans-unit>
        <trans-unit id="2702" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.KeyUp&gt;</ph> event is a lower-level text input event that might not behave as expected on certain controls.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.KeyUp&gt;</ph> 이벤트는 하위 수준의 텍스트 입력된 이벤트를 특정 컨트롤에 예상 대로 동작 하지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2703" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</source>
          <target state="translated">일부 컨트롤은 컨트롤 합성 클래스 처리에 더 높은 수준의 버전의 텍스트를 제공 하는 입력 처리 및 관련 이벤트 또는 때문입니다.</target>       </trans-unit>
        <trans-unit id="2704" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>For details, check the documentation for individual controls.</source>
          <target state="translated">자세한 내용은 개별 컨트롤에 대 한 설명서를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="2705" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewKeyUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewKeyUp&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2706" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewKeyUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewKeyUp&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2707" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2708" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2709" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2710" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2711" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2712" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.KeyUp&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.KeyUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2713" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewKeyUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewKeyUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2714" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewKeyUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewKeyUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewKeyUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2715" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewKeyUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2716" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewKeyUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2717" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewKeyUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2718" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewKeyUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2719" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewKeyUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2720" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>Occurs when the keyboard is no longer focused on this element.</source>
          <target state="translated">이 요소에 더 이상 키보드 포커스가 없으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2721" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">이 이벤트는 라우팅 터널링을 사용 하므로 포커스를 잃은 요소의 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2722" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost focus.</source>
          <target state="translated">확인은 <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> 에 포커스를 잃은 실제 요소를 확인 하기 위해 이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="2723" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2724" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2725" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2726" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2727" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2728" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2729" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2730" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2731" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2732" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2733" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2734" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2735" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2736" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2737" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2738" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>Occurs when any mouse button is pressed while the pointer is over this element.</source>
          <target state="translated">포인터가 이 요소 위에 있는 동안 마우스 단추를 누르면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2739" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2740" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2741" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph> event is often raised together with either <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph>, which correspond to a press of one of the two standard mouse buttons.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph> 종종 발생과 함께 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph>, 두 개의 표준 마우스 단추 중 하나를 누르는 것에 해당 하는 합니다.</target>       </trans-unit>
        <trans-unit id="2742" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event reaches this element along the event route.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph> 라우트된 이벤트를는 있지만 직접 라우트된 이벤트를 서로 하며 적절 한 단추 특정 이벤트가 발생할 때는 <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 경로 되지 합니다.</target>       </trans-unit>
        <trans-unit id="2743" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph>.</source>
          <target state="translated">에 대 한 설명 부분 참조 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2744" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2745" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2746" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2747" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2748" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2749" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2750" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2751" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewMouseDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2752" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2753" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2754" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2755" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2756" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2757" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>Occurs when the left mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 마우스 왼쪽 단추를 누르면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2758" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">이 요소 트리를 통해 터널링 경로 따르는 것 처럼 보이지만, 실제로 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2759" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2760" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>The event data of this event exposes the event data of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">이 이벤트의 이벤트 데이터의 기본 이벤트 데이터를 노출 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2761" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</target>       </trans-unit>
        <trans-unit id="2762" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>If you mark <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> handled, you are essentially marking <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">표시 하는 경우 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> 처리, 기본적으로 표시 하는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 경로 따르는 모든 후속 수신기에 대 한 처리 및 모든 관련 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2763" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>This possibly includes class-handler generated events such as <ph id="ph1">&lt;xref:System.Windows.Controls.Control.PreviewMouseDoubleClick&gt;</ph>.</source>
          <target state="translated">가능한 여기에 클래스 처리기 생성 된 이벤트와 같은 <ph id="ph1">&lt;xref:System.Windows.Controls.Control.PreviewMouseDoubleClick&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2764" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 클래스).</target>       </trans-unit>
        <trans-unit id="2765" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2766" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 에 해당 하는 대신 클래스 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2767" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2768" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2769" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2770" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="2771" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2772" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2773" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2774" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2775" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2776" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2777" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2778" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2779" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>Occurs when the left mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 마우스 왼쪽 단추를 놓으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2780" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">이 요소 트리를 통해 터널링 경로 따르는 것 처럼 보이지만, 실제로 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2781" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2782" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>The event data of this event exposes the event data of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">이 이벤트의 이벤트 데이터의 기본 이벤트 데이터를 노출 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2783" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</target>       </trans-unit>
        <trans-unit id="2784" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>If you mark <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> handled, you are essentially marking <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">표시 하는 경우 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> 처리, 기본적으로 표시 하는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 경로 따르는 모든 후속 수신기에 대 한 처리 및 모든 관련 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2785" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 클래스).</target>       </trans-unit>
        <trans-unit id="2786" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2787" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 에 해당 하는 대신 클래스 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2788" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2789" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2790" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2791" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="2792" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2793" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2794" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2795" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2796" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2797" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2798" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2799" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2800" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewMouseMove">
          <source>Occurs when the mouse pointer moves while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 마우스 포인터를 움직이면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2801" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseMove">
          <source>This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.</source>
          <target state="translated">마우스 포인터가 요소의 경계에 처음 실행 하면이 이벤트가 발생 둘 다도 마우스 포인터가 이동할 때 요소 범위 내에서 그대로 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="2802" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2803" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2804" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseMove">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2805" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseMove">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2806" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseMove">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2807" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseMove">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2808" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseMove">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2809" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseMove">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2810" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseMove%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2811" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewMouseMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseMove" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseMove" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2812" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2813" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2814" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2815" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2816" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2817" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>Occurs when the right mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 마우스 오른쪽 단추를 누르면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2818" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">이 요소 트리를 통해 터널링 경로 따르는 것 처럼 보이지만, 실제로 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2819" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2820" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>The event data of this event exposes the event data of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">이 이벤트의 이벤트 데이터의 기본 이벤트 데이터를 노출 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2821" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</target>       </trans-unit>
        <trans-unit id="2822" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>If you mark <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph> handled, you are essentially marking <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">표시 하는 경우 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph> 처리, 기본적으로 표시 하는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 경로 따르는 모든 후속 수신기에 대 한 처리 및 모든 관련 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2823" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>This possibly includes class-handler generated events such as <ph id="ph1">&lt;xref:System.Windows.Controls.Control.PreviewMouseDoubleClick&gt;</ph>.</source>
          <target state="translated">가능한 여기에 클래스 처리기 생성 된 이벤트와 같은 <ph id="ph1">&lt;xref:System.Windows.Controls.Control.PreviewMouseDoubleClick&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2824" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 클래스).</target>       </trans-unit>
        <trans-unit id="2825" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2826" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 에 해당 하는 대신 클래스 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2827" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2828" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2829" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2830" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="2831" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2832" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2833" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2834" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2835" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2836" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2837" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2838" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2839" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>Occurs when the right mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 마우스 오른쪽 단추를 놓으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2840" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">이 요소 트리를 통해 터널링 경로 따르는 것 처럼 보이지만, 실제로 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2841" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2842" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>The event data of this event exposes the event data of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">이 이벤트의 이벤트 데이터의 기본 이벤트 데이터를 노출 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2843" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</target>       </trans-unit>
        <trans-unit id="2844" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>If you mark <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph> handled, you are essentially marking <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">표시 하는 경우 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph> 처리, 기본적으로 표시 하는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 경로 따르는 모든 후속 수신기에 대 한 처리 및 모든 관련 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2845" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 클래스).</target>       </trans-unit>
        <trans-unit id="2846" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2847" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 에 해당 하는 대신 클래스 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2848" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2849" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2850" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2851" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="2852" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2853" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2854" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2855" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2856" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2857" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2858" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2859" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2860" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>Occurs when any mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 마우스 단추를 놓으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2861" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseUp&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2862" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseUp&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2863" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseUp&gt;</ph> event is often raised together with either <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>, which correspond to a press of one of the two standard mouse buttons.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseUp&gt;</ph> 종종 발생과 함께 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>, 두 개의 표준 마우스 단추 중 하나를 누르는 것에 해당 하는 합니다.</target>       </trans-unit>
        <trans-unit id="2864" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event reaches this element along the event route.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph> 라우트된 이벤트를는 있지만 직접 라우트된 이벤트를 서로 하며 적절 한 단추 특정 이벤트가 발생할 때는 <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 경로 되지 합니다.</target>       </trans-unit>
        <trans-unit id="2865" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>.</source>
          <target state="translated">에 대 한 설명 부분 참조 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2866" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2867" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2868" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2869" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2870" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2871" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseUp&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2872" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2873" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewMouseUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2874" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2875" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2876" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2877" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2878" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2879" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewMouseWheel">
          <source>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 사용자가 마우스 휠을 굴리면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2880" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseWheel">
          <source>Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.</source>
          <target state="translated">포커스 또는 마우스 캡처 우선 마우스 포인터입니다. 따라서 시점 요소에서이 이벤트를 수신 되 면 마우스 포인터가 실제로 다른 요소 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2881" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseWheel">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2882" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseWheel">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2883" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseWheel">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2884" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseWheel">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2885" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseWheel">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2886" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseWheel">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2887" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseWheel">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2888" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseWheel">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseWheel&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseWheel&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2889" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseWheel">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseWheel%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseWheel%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2890" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewMouseWheelEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseWheel" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseWheel" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2891" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseWheelEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2892" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseWheelEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2893" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseWheelEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2894" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseWheelEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2895" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseWheelEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2896" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewQueryContinueDrag">
          <source>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</source>
          <target state="translated">끌어서 놓기 작업 중 키보드 또는 마우스 단추 상태가 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2897" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewQueryContinueDrag">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewQueryContinueDrag&gt;</ph> event enables the drag source to declare whether the drag-and-drop operation should be canceled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewQueryContinueDrag&gt;</ph> 이벤트를 사용 하면 끌기 소스가 끌어서 놓기 작업을 취소 해야 하는지 여부를 선언 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="2898" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewQueryContinueDrag">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewQueryContinueDrag&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewQueryContinueDrag&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2899" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewQueryContinueDrag">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewQueryContinueDrag&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewQueryContinueDrag&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2900" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewQueryContinueDrag">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2901" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewQueryContinueDrag">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2902" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewQueryContinueDrag">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2903" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewQueryContinueDrag">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2904" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewQueryContinueDrag">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2905" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewQueryContinueDrag">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.QueryContinueDrag&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.QueryContinueDrag&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2906" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewQueryContinueDrag">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2907" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewQueryContinueDragEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2908" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewQueryContinueDragEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2909" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewQueryContinueDragEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2910" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewQueryContinueDragEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2911" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewQueryContinueDragEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2912" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewQueryContinueDragEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2913" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>Occurs when the stylus button is pressed while the pointer is over this element.</source>
          <target state="translated">포인터가 이 요소 위에 있는 동안 스타일러스 단추를 누르면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2914" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusButtonDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusButtonDown&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2915" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusButtonDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusButtonDown&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2916" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2917" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>For more information, see <bpt id="p1">[</bpt>Touch Input Support in Windows Vista<ept id="p1">](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)</ept> and <bpt id="p2">[</bpt>Input Overview<ept id="p2">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>Windows Vista의 입력 지원 터치<ept id="p1">](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)</ept> 및 <bpt id="p2">[</bpt>입력 개요<ept id="p2">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2918" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2919" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2920" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2921" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2922" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2923" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusButtonDown&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusButtonDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2924" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2925" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewStylusButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2926" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2927" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2928" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2929" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2930" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2931" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>Occurs when the stylus button is released while the pointer is over this element.</source>
          <target state="translated">포인터가 이 요소 위에 있는 동안 스타일러스 단추를 놓으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2932" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusButtonUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusButtonUp&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2933" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusButtonUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusButtonUp&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2934" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2935" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2936" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2937" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2938" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2939" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2940" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2941" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusButtonUp&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusButtonUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2942" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2943" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewStylusButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2944" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2945" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2946" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2947" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2948" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2949" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>Occurs when the stylus touches the digitizer while it is over this element.</source>
          <target state="translated">이 요소 위에 있는 동안 스타일러스가 디지타이저를 건드리면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2950" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2951" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2952" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2953" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2954" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2955" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2956" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2957" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2958" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2959" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusDown&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2960" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2961" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewStylusDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2962" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2963" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2964" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2965" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2966" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2967" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>Occurs when the stylus moves over an element without actually touching the digitizer.</source>
          <target state="translated">스타일러스가 디지타이저를 실제로 건드리지 않고 요소 위로 움직이면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2968" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusInAirMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusInAirMove&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2969" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusInAirMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusInAirMove&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2970" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2971" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2972" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2973" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2974" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2975" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2976" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2977" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusInAirMove&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusInAirMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2978" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2979" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2980" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2981" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2982" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2983" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2984" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2985" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</source>
          <target state="translated">이 요소 위에 있는 동안 스타일러스가 디지타이저를 검색할 만큼 가까이 있으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2986" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusInRange&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusInRange&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2987" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusInRange&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusInRange&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2988" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2989" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2990" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2991" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2992" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2993" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2994" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2995" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusInRange&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusInRange&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2996" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusInRange%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusInRange%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2997" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewStylusInRangeEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusInRange" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusInRange" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2998" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusInRangeEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2999" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusInRangeEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="3000" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusInRangeEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3001" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusInRangeEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3002" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusInRangeEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3003" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>Occurs when the stylus moves while over the element.</source>
          <target state="translated">요소 위에 있는 동안 스타일러스를 움직이면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3004" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>The stylus must move while being detected by the digitizer to raise this event, otherwise, <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /&gt;</ph> is raised instead.</source>
          <target state="translated">이 이벤트를 발생시키려면 디지타이저에서 검색하는 동안 스타일러스를 움직여야 합니다. 움직이지 않으면 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /&gt;</ph>가 대신 발생합니다.</target>       </trans-unit>
        <trans-unit id="3005" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusMove&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="3006" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusMove&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="3007" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="3008" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3009" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3010" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3011" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3012" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="3013" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3014" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusMove&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3015" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusMove%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3016" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewStylusMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusMove" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusMove" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3017" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="3018" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="3019" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3020" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3021" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3022" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>Occurs when the stylus is too far from the digitizer to be detected.</source>
          <target state="translated">스타일러스가 디지타이저에서 멀리 떨어져 있어 검색할 수 없으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3023" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusOutOfRange&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusOutOfRange&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="3024" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusOutOfRange&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusOutOfRange&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="3025" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="3026" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3027" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3028" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3029" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3030" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="3031" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3032" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusOutOfRange&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusOutOfRange&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3033" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3034" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3035" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="3036" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="3037" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3038" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3039" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3040" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>Occurs when a user performs one of several stylus gestures.</source>
          <target state="translated">사용자가 여러 스타일러스 제스처 중 하나를 수행하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3041" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>For information about stylus gestures, see <ph id="ph1">&lt;xref:System.Windows.Input.SystemGesture&gt;</ph>.</source>
          <target state="translated">스타일러스 제스처에 대 한 정보를 참조 하십시오. <ph id="ph1">&lt;xref:System.Windows.Input.SystemGesture&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3042" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusSystemGesture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusSystemGesture&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="3043" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusSystemGesture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusSystemGesture&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="3044" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="3045" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3046" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3047" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3048" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3049" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="3050" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3051" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusSystemGesture&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusSystemGesture&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3052" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3053" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3054" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="3055" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="3056" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3057" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3058" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3059" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>Occurs when the user raises the stylus off the digitizer while the stylus is over this element.</source>
          <target state="translated">스타일러스가 이 요소 위에 있는 동안 사용자가 디지타이저에서 스타일러스를 올리면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3060" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="3061" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="3062" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="3063" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3064" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3065" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3066" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3067" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="3068" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3069" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusUp&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3070" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3071" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewStylusUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3072" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="3073" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="3074" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3075" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3076" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3077" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>Occurs when this element gets text in a device-independent manner.</source>
          <target state="translated">이 요소가 장치와 별개의 방식으로 텍스트를 가져오면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3078" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph> event allows a component or application to listen for text input in a device-independent manner.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph> 이벤트를 사용 하면 구성 요소 또는 응용 프로그램을 장치에 관계 없이 텍스트 입력에 대 한 수신 대기 합니다.</target>       </trans-unit>
        <trans-unit id="3079" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>The keyboard is the primary means of <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph>; but speech, handwriting, and other input devices can also generate <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph>.</source>
          <target state="translated">키보드는 주요 수단입니다 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph>; 음성, 필기 및 기타 입력된 장치를 생성할 수도 있지만 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3080" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>Because of key combinations—either in default keyboards or through input method editors—multiple key events may raise just one text input event.</source>
          <target state="translated">키 조합으로 인해-기본 키보드 또는 입력된 방법 편집기를 통해-여러 주요 이벤트 하나만 텍스트 입력된 이벤트를 발생 시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3081" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="3082" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="3083" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3084" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3085" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3086" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="3087" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3088" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3089" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTextInput%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTextInput%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3090" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewTextInputEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTextInput" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTextInput" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3091" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewTextInputEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="3092" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewTextInputEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="3093" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewTextInputEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3094" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewTextInputEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3095" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewTextInputEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3096" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>Occurs when a finger touches the screen while the finger is over this element.</source>
          <target state="translated">손가락이 이 요소 위에 있는 동안 화면을 터치하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3097" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>By default, the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> events do not occur until a finger touches the screen and moves.</source>
          <target state="translated">기본적으로는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> 손가락 화면을 터치 하 고 이동 될 때까지 이벤트가 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="3098" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph>.</source>
          <target state="translated">손가락 화면에서 이동 하지 않고 수행 하는 키를 눌러를 누른 채로의 동작을 보유 한 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3099" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>The press and hold behavior is equivalent to a mouse right-click.</source>
          <target state="translated">키를 누른 동작을 마우스 오른쪽 단추로 클릭 하는 것과 같습니다.</target>       </trans-unit>
        <trans-unit id="3100" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>To cause the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> events to occur as soon as a finger touches the screen, set the <ph id="ph3">&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType&gt;</ph> attached property to <ph id="ph4">`false`</ph> for this element.</source>
          <target state="translated">발생 하는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> 손가락으로 화면을 터치 하는 즉시 발생 하도록 이벤트를 설정할는 <ph id="ph3">&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType&gt;</ph> 연결 된 속성을 <ph id="ph4">`false`</ph> 이 요소에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="3101" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3102" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3103" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3104" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="3105" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3106" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3107" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3108" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3109" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewTouchDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3110" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewTouchMove">
          <source>Occurs when a finger moves on the screen while the finger is over this element.</source>
          <target state="translated">손가락이 이 요소 위에 있는 동안 화면에서 손가락을 움직이면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3111" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchMove">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3112" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchMove">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3113" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchMove">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3114" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchMove">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="3115" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchMove">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3116" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchMove">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3117" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchMove">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.TouchMove&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.TouchMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3118" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchMove%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3119" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewTouchMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchMove" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchMove" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3120" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewTouchUp">
          <source>Occurs when a finger is raised off of the screen while the finger is over this element.</source>
          <target state="translated">손가락이 이 요소 위에 있는 동안 화면에서 손가락을 떼면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3121" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3122" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3123" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3124" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchUp">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="3125" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3126" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchUp">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3127" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchUp">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.TouchUp&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.UIElement.TouchUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3128" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3129" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewTouchUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3130" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.QueryContinueDrag">
          <source>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</source>
          <target state="translated">끌어서 놓기 작업 중 키보드 또는 마우스 단추 상태가 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3131" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryContinueDrag">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.QueryContinueDrag&gt;</ph> event enables the drag source to determine whether the drag-and-drop operation should be canceled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.QueryContinueDrag&gt;</ph> 이벤트를 사용 하면 끌기 소스가 끌어서 놓기 작업을 취소 해야 할지를 결정 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="3132" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryContinueDrag">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.QueryContinueDrag&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.QueryContinueDrag&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="3133" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryContinueDrag">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.QueryContinueDrag&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.QueryContinueDrag&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="3134" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryContinueDrag">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3135" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryContinueDrag">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3136" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryContinueDrag">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3137" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryContinueDrag">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="3138" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryContinueDrag">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3139" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryContinueDrag">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewQueryContinueDrag&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewQueryContinueDrag&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3140" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryContinueDrag">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnQueryContinueDrag%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnQueryContinueDrag%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3141" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.QueryContinueDragEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.QueryContinueDrag" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.QueryContinueDrag" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3142" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.QueryContinueDragEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="3143" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.QueryContinueDragEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="3144" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.QueryContinueDragEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3145" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.QueryContinueDragEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3146" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.QueryContinueDragEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3147" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.QueryCursor">
          <source>Occurs when the cursor is requested to display.</source>
          <target state="translated">커서를 표시하도록 요청하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3148" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.QueryCursor">
          <source>This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.</source>
          <target state="translated">이 이벤트는 마우스 포인터를 새 위치로 이동할 때마다 요소에서 발생합니다. 즉, 새로운 위치에 따라 커서 개체가 변경되어야 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3149" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="3150" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="3151" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point).</source>
          <target state="translated">이 이벤트 이름으로 참조 하는 커서가 반드시 않습니다 텍스트 커서 (삽입점 라고도 함).</target>       </trans-unit>
        <trans-unit id="3152" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in Windows programming.</source>
          <target state="translated">대신,이 컨텍스트에서 커서 가능한 여러 입력 관련 장치 또는 Windows 프로그래밍에 대 한 개념 화면의 그래픽 표시를 선언 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="3153" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>That object is represented by the <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph> class in WPF.</source>
          <target state="translated">해당 개체도 표시 됩니다는 <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph> wpf에서 클래스입니다.</target>       </trans-unit>
        <trans-unit id="3154" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>The WPF input system enables you to change this cursor when it represents the onscreen position of the mouse pointer.</source>
          <target state="translated">WPF 입력된 시스템에서 마우스 포인터의 화면 위치를 나타낼 때이 커서를 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3155" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>You can use predefined values from the <ph id="ph1">&lt;xref:System.Windows.Input.Cursors&gt;</ph> enumeration, or you can declare a custom cursor as an image file.</source>
          <target state="translated">미리 정의 된 값을 사용할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Input.Cursors&gt;</ph> 열거형 또는 있습니다 이미지 파일로 사용자 지정 커서를 선언할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3156" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>Listening for the <ph id="ph1">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph> event is not an efficient technique for cursor management.</source>
          <target state="translated">에 대 한 수신 대기 하는 <ph id="ph1">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph> 이벤트는 커서 관리를 위한 효율적인 기술 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="3157" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>Instead, each element should define its own cursor behavior with <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement.Cursor%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement.ForceCursor%2A&gt;</ph>.</source>
          <target state="translated">각 요소는 자체 커서 동작을 정의 해야 대신 <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement.Cursor%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement.ForceCursor%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3158" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>You should only rely on <ph id="ph1">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs.</source>
          <target state="translated">만 사용 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph> WPF 프레임 워크 수준 기본 요소를 사용 하지 않는 경우 또는에 특별 한 경우 여기서 커서 동작을 요소 마다 별로 정의지 않습니다 요구를 충족 하지 합니다.</target>       </trans-unit>
        <trans-unit id="3159" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>For more information on implementing cursor behavior in response to <ph id="ph1">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph>, see <ph id="ph2">&lt;xref:System.Windows.Input.QueryCursorEventHandler&gt;</ph>.</source>
          <target state="translated">커서 동작에 대 한 응답에서 구현에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph>, 참조 <ph id="ph2">&lt;xref:System.Windows.Input.QueryCursorEventHandler&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3160" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3161" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3162" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3163" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="3164" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3165" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>There is no defined corresponding tunneling event.</source>
          <target state="translated">정의 된 해당 터널링 이벤트가 없습니다.</target>       </trans-unit>
        <trans-unit id="3166" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnQueryCursor%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnQueryCursor%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3167" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.QueryCursorEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.QueryCursor" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.QueryCursor" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3168" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.QueryCursorEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="3169" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.QueryCursorEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="3170" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.QueryCursorEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3171" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.QueryCursorEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3172" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.QueryCursorEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3173" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> that contains the event data and also identifies the event to raise.</source>
          <target state="translated">이벤트 데이터를 포함하며 발생시킬 이벤트를 식별하는 <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3174" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>Raises a specific routed event.</source>
          <target state="translated">특정 라우트된 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="3175" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEvent" /&gt;</ph> to be raised is identified within the <ph id="ph2">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> instance that is provided (as the <ph id="ph3">&lt;see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /&gt;</ph> property of that event data).</source>
          <target state="translated">발생시킬 <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEvent" /&gt;</ph>는 해당 이벤트 데이터의 <ph id="ph2">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> 속성으로 제공되는 <ph id="ph3">&lt;see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /&gt;</ph> 인스턴스 내에서 식별됩니다.</target>       </trans-unit>
        <trans-unit id="3176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>The <ph id="ph1">`e`</ph> parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <ph id="ph2">&lt;xref:System.Windows.RoutedEventArgs&gt;</ph> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.</source>
          <target state="translated">하지만 <ph id="ph1">`e`</ph> 매개 변수의 모든 라우트된 이벤트 데이터에 대 한 일반적인 기본 형식으로 지정 됩니다; 이벤트 데이터 때문에 발생 하는 이벤트에 사용할 수 있는 가장 구체적인 이벤트 데이터 형식으로 제공 되어야 <ph id="ph2">&lt;xref:System.Windows.RoutedEventArgs&gt;</ph> 파생된 클래스에 포함 된 특정 이벤트 발생 하는 경우를 위해 사용 되는 특정 실제 데이터 속성입니다.</target>       </trans-unit>
        <trans-unit id="3177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs&gt;</ph> is not just the state properties for the event; it also identifies which routed event to raise.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs&gt;</ph> 이벤트에 대 한 상태 속성만 않습니다. 라우트된 발생할 이벤트를 식별 합니다.</target>       </trans-unit>
        <trans-unit id="3178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>This event-raising pattern and the routed event data both differ from <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> events and data classes, which typically just contain properties that are related to the event.</source>
          <target state="translated">이 이벤트를 발생 시키는 패턴 및 라우트된 이벤트 데이터에서 다를 둘 다 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 및 데이터 클래스는 이벤트에 관련 된 속성을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="3179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>The following example creates event data, appends the event identifier to the data, and then uses the event data instance to raise a custom routed event.</source>
          <target state="translated">이벤트 데이터 만들고 데이터에 이벤트 식별자를 추가한 다음 이벤트 데이터 인스턴스를 사용 하 여 사용자 지정 된 라우트된 이벤트를 발생 하는 다음 예제입니다.</target>       </trans-unit>
        <trans-unit id="3180" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ReleaseAllTouchCaptures">
          <source>Releases all captured touch devices from this element.</source>
          <target state="translated">이 요소에서 캡처된 터치 장치를 모두 해제합니다.</target>       </trans-unit>
        <trans-unit id="3181" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ReleaseMouseCapture">
          <source>Releases the mouse capture, if this element held the capture.</source>
          <target state="translated">이 요소가 마우스를 캡처한 경우 캡처를 해제합니다.</target>       </trans-unit>
        <trans-unit id="3182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ReleaseMouseCapture">
          <source>If this element did not hold the capture, calling this method has no effect.</source>
          <target state="translated">이 요소는 캡처를 유지 하지 않은 경우이 메서드를 호출 효과가 없습니다.</target>       </trans-unit>
        <trans-unit id="3183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ReleaseMouseCapture">
          <source>Consider checking the value of <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseCaptured%2A&gt;</ph> before you call this method.</source>
          <target state="translated">값을 확인 하는 것이 좋습니다. <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseCaptured%2A&gt;</ph> 이 메서드를 호출 하기 전에.</target>       </trans-unit>
        <trans-unit id="3184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ReleaseMouseCapture">
          <source>The following example is the parallel to the example given for <ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph>: it handles mouse button up to release mouse capture and re-enable moving the mouse.</source>
          <target state="translated">다음 예제에 대 한 제공 된 예제는 <ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph>:에 마우스 단추를 처리 하 고 마우스 이동 다시 사용 하도록 설정 합니다.</target>       </trans-unit>
        <trans-unit id="3185" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ReleaseStylusCapture">
          <source>Releases the stylus device capture, if this element held the capture.</source>
          <target state="translated">이 요소가 스타일러스 장치를 캡처한 경우 캡처를 해제합니다.</target>       </trans-unit>
        <trans-unit id="3186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ReleaseStylusCapture">
          <source>If this element did not hold the capture, calling this method has no effect.</source>
          <target state="translated">이 요소는 캡처를 유지 하지 않은 경우이 메서드를 호출 효과가 없습니다.</target>       </trans-unit>
        <trans-unit id="3187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ReleaseStylusCapture">
          <source>Consider checking the value of <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusCaptured%2A&gt;</ph> before you call this method.</source>
          <target state="translated">값을 확인 하는 것이 좋습니다. <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusCaptured%2A&gt;</ph> 이 메서드를 호출 하기 전에.</target>       </trans-unit>
        <trans-unit id="3188" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)">
          <source>The device to release.</source>
          <target state="translated">해제할 장치입니다.</target>       </trans-unit>
        <trans-unit id="3189" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)">
          <source>Attempts to release the specified touch device from this element.</source>
          <target state="translated">이 요소에서 지정된 터치 장치를 해제하려고 합니다.</target>       </trans-unit>
        <trans-unit id="3190" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the touch device is released; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">터치 장치가 해제되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3191" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)">
          <source><ph id="ph1">&lt;paramref name="touchDevice" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="touchDevice" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="3192" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>The identifier of the routed event for which the handler is attached.</source>
          <target state="translated">처리기가 연결된 라우팅된 이벤트의 식별자입니다.</target>       </trans-unit>
        <trans-unit id="3193" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>The specific handler implementation to remove from the event handler collection on this element.</source>
          <target state="translated">이 요소의 이벤트 처리기 컬렉션에서 제거할 특정 처리기 구현입니다.</target>       </trans-unit>
        <trans-unit id="3194" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Removes the specified routed event handler from this element.</source>
          <target state="translated">지정된 라우트된 이벤트 처리기를 이 요소에서 제거합니다.</target>       </trans-unit>
        <trans-unit id="3195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>The most common scenario for using this <ph id="ph1">[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]</ph> is when you implement the <ph id="ph2">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> "wrapper" event that is associated with a custom routed event, specifically when you implement the "remove" logic for handlers at the <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> level.</source>
          <target state="translated">이 사용 하는 가장 일반적인 시나리오 <ph id="ph1">[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]</ph> 구현 하는 경우이 <ph id="ph2">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 연결 된 사용자 지정 처리기에 대 한 "제거" 논리를 구현 하는 경우에 특히 라우트된 이벤트를 "래퍼" 이벤트는 <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 수준입니다.</target>       </trans-unit>
        <trans-unit id="3196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>The example that follows this remarks section illustrates this scenario.</source>
          <target state="translated">이 다음에 나오는 예제 주의 섹션에서는이 시나리오를 설명 합니다.</target>       </trans-unit>
        <trans-unit id="3197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Calling this method has no effect if there were no handlers registered with criteria that matches the input parameters for the method call.</source>
          <target state="translated">다음과 같은 메서드 호출에 대 한 입력된 매개 변수와 일치 하는 조건으로 등록 된 처리기가 경우에이 메서드를 호출 하면 효과가 없습니다.</target>       </trans-unit>
        <trans-unit id="3198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed.</source>
          <target state="translated">둘 이상의 처리기 처리기 저장소를 제거한 경우에 첫 번째 처리기는 조건과 일치 하는 연결 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="3199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>This behavior is consistent with <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> behavior of the <ph id="ph2">`-=`</ph> operator.</source>
          <target state="translated">이 동작은 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 의 동작에서 <ph id="ph2">`-=`</ph> 연산자입니다.</target>       </trans-unit>
        <trans-unit id="3200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Neither <ph id="ph1">`routedEvent`</ph> nor <ph id="ph2">`handler`</ph> may be <ph id="ph3">`null`</ph>.</source>
          <target state="translated">모두 <ph id="ph1">`routedEvent`</ph> 나 <ph id="ph2">`handler`</ph> 수 <ph id="ph3">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Attempting to provide either value as <ph id="ph1">`null`</ph> will raise an exception.</source>
          <target state="translated">와 값 중 하나를 제공 하려고 <ph id="ph1">`null`</ph> 하면 예외가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="3202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>This method ignores the <ph id="ph1">`handledEventsToo`</ph> parameter information, which is provided if the handler was first added with the <ph id="ph2">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature that enables handling of already-handled events.</source>
          <target state="translated">이 메서드는 무시는 <ph id="ph1">`handledEventsToo`</ph> 와 첫 번째 처리기가 제공 되는 매개 변수 정보를 추가 <ph id="ph2">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> 서명을 이미 처리 된 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Either type of handler is removed.</source>
          <target state="translated">두 형식의 처리기 제거 됩니다.</target>       </trans-unit>
        <trans-unit id="3204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>The following example uses <ph id="ph1">&lt;xref:System.Windows.UIElement.RemoveHandler%2A&gt;</ph> as part of an event wrapper definition.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Windows.UIElement.RemoveHandler%2A&gt;</ph> 이벤트 래퍼 정의의 일부로 합니다.</target>       </trans-unit>
        <trans-unit id="3205" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.RenderSize">
          <source>Gets (or sets) the final render size of this element.</source>
          <target state="translated">이 요소의 최종 렌더링 크기를 가져옵니다(또는 설정합니다).</target>       </trans-unit>
        <trans-unit id="3206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderSize">
          <source>The rendered size for this element.</source>
          <target state="translated">이 요소의 렌더링된 크기입니다.</target>       </trans-unit>
        <trans-unit id="3207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderSize">
          <source>Do not attempt to set this property, either in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> or in code, if using the WPF framework-level layout system.</source>
          <target state="translated">이 속성을 설정 하지 마십시오 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 또는 WPF 프레임 워크 수준 레이아웃 시스템을 사용 하는 경우 코드에서.</target>       </trans-unit>
        <trans-unit id="3208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderSize">
          <source>Nearly all typical application scenarios will use this layout system.</source>
          <target state="translated">거의 모든 일반 응용 프로그램 시나리오는이 레이아웃 시스템을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="3209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderSize">
          <source>The layout system will not respect sizes set in the <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph> property directly.</source>
          <target state="translated">이 레이아웃 시스템에서 설정 된 크기를 고려 하지 것입니다는 <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph> 속성을 직접 합니다.</target>       </trans-unit>
        <trans-unit id="3210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderSize">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph> property is declared writable only to enable certain WPF core-level bridging cases that deliberately circumvent the typical layout protocols, such as support for the <ph id="ph2">&lt;xref:System.Windows.Documents.Adorner&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph> 특정 WPF 핵심 수준 브리징 의도적으로 지원과 같이 일반적인 레이아웃 프로토콜을 사용 하지 사례를 사용 하도록 설정에 쓰기 가능 속성 선언에서 <ph id="ph2">&lt;xref:System.Windows.Documents.Adorner&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="3211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderSize">
          <source>This property can be used for checking the applicable render size within layout system overrides such as <ph id="ph1">&lt;xref:System.Windows.UIElement.OnRender%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.UIElement.GetLayoutClip%2A&gt;</ph>.</source>
          <target state="translated">이 레이아웃 시스템 내에서 적용 가능한 렌더링 크기와 같은 재정의 검사에 대 한이 속성을 사용할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnRender%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.UIElement.GetLayoutClip%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderSize">
          <source>A more common scenario is handling the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.SizeChanged&gt;</ph> event with the class handler override or the <ph id="ph2">&lt;xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt;</ph> event.</source>
          <target state="translated">처리 하는 보다 일반적인 시나리오는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.SizeChanged&gt;</ph> 클래스 처리기를 사용 하 여 이벤트 재정의 또는 <ph id="ph2">&lt;xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderSize">
          <source>The following example shows how a custom adorner uses the <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph> value in order to create and size the rectangle graphic that defines the adorner, as part of its <ph id="ph2">&lt;xref:System.Windows.UIElement.OnRender%2A&gt;</ph> implementation.</source>
          <target state="translated">다음 예제에서는 사용자 지정 표시기 사용 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph> 값을 만들고 크기의 일환으로 표시기를 정의 하는 사각형 그래픽 해당 <ph id="ph2">&lt;xref:System.Windows.UIElement.OnRender%2A&gt;</ph> 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3214" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.RenderTransform">
          <source>Gets or sets transform information that affects the rendering position of this element.</source>
          <target state="translated">이 요소의 렌더링 위치에 영향을 주는 변형 정보를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="3215" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.RenderTransform">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="3216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransform">
          <source>Describes the specifics of the desired render transform.</source>
          <target state="translated">원하는 렌더링 변환의 세부 사항을 설명합니다.</target>       </trans-unit>
        <trans-unit id="3217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransform">
          <source>The default is <ph id="ph1">&lt;see cref="P:System.Windows.Media.Transform.Identity" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="P:System.Windows.Media.Transform.Identity" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransform">
          <source>A render transform does not regenerate layout size or render size information.</source>
          <target state="translated">렌더링 변형의 레이아웃의 크기를 다시 생성 하지 않거나 크기 정보를 렌더링 합니다.</target>       </trans-unit>
        <trans-unit id="3219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransform">
          <source>Render transforms are typically intended for animating or applying a temporary effect to an element.</source>
          <target state="translated">렌더링 변형에 애니메이션 효과나 임시 효과 요소에 적용 일반적으로 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="3220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransform">
          <source>For example, the element might zoom when focused or moused over, or might jitter on load to draw the eye to that part of the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.</source>
          <target state="translated">예를 들어 요소 수 확대할 초점을 맞춘 마우스로, 하거나 수의 해당 부분을 강조할 수는 부하에는 <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransform">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="3222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransform">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransform">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="3224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransform">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="3225" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>Gets or sets the center point of any possible render transform declared by <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.RenderTransform" /&gt;</ph>, relative to the bounds of the element.</source>
          <target state="translated">요소의 영역을 기준으로 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.RenderTransform" /&gt;</ph>에서 선언하는 가능한 렌더링 변환의 중심점을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="3226" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="3227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>The value that declares the render transform.</source>
          <target state="translated">렌더링 변형을 선언하는 값입니다.</target>       </trans-unit>
        <trans-unit id="3228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>The default value is a <ph id="ph1">&lt;see cref="T:System.Windows.Point" /&gt;</ph> with coordinates (0,0).</source>
          <target state="translated">기본값은 좌표가 (0,0)인 <ph id="ph1">&lt;see cref="T:System.Windows.Point" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransformOrigin%2A&gt;</ph> has a somewhat nonstandard use of the <ph id="ph2">&lt;xref:System.Windows.Point&gt;</ph> structure value, in that the <ph id="ph3">&lt;xref:System.Windows.Point&gt;</ph> does not represent an absolute location in a coordinate system.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransformOrigin%2A&gt;</ph> 비표준 다소 사용권을 가집니다는 <ph id="ph2">&lt;xref:System.Windows.Point&gt;</ph> 구조체에 값은 <ph id="ph3">&lt;xref:System.Windows.Point&gt;</ph> 좌표 시스템의 절대 위치를 나타내지 않습니다.</target>       </trans-unit>
        <trans-unit id="3230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>Instead, values between 0 and 1 are interpreted as a factor for the range of the current element in each x,y axis.</source>
          <target state="translated">대신, 0과 1 사이의 값은 각 x, y 축에서에서 현재 요소의 범위에 대 한 인수로 해석 됩니다.</target>       </trans-unit>
        <trans-unit id="3231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>For example, (0.5,0.5) will cause the render transform to be centered on the element, or (1,1) would place the render transform at the bottom right corner of the element.</source>
          <target state="translated">예를 들어 (0.5,0.5) 요소에 가운데 맞춤 될 렌더링 변환 하면 (1, 1)은 렌더링 변환이 맨 아래에 오른쪽 모서리에 있는 요소입니다.</target>       </trans-unit>
        <trans-unit id="3232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source><ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph> is not an accepted value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph> 허용 된 값이 아닙니다.</target>       </trans-unit>
        <trans-unit id="3233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>Values beyond 0 and 1 are also accepted, and will result in more unconventional transform effects.</source>
          <target state="translated">0과 1을 초과 하는 값도 사용할 수 있으며 독특한 변환 효과 더 합니다.</target>       </trans-unit>
        <trans-unit id="3234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>For instance, if you set <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransformOrigin%2A&gt;</ph> to be (5,5), and then apply a <ph id="ph2">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph>, the rotation point will be well outside the bounds of the element itself.</source>
          <target state="translated">예를 들어, 설정한 경우 <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransformOrigin%2A&gt;</ph> (5, 5) 다음 적용 하는 <ph id="ph2">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph>, 회전 점 요소 자체의 경계 바깥에 있게 됩니다.</target>       </trans-unit>
        <trans-unit id="3235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>The transform will spin your element around in a big circle that originates beyond bottom right.</source>
          <target state="translated">변환에서 오른쪽 아래의 외부 발생 하는 큰 원 중심으로 요소를 회전 합니다.</target>       </trans-unit>
        <trans-unit id="3236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>The origin might be somewhere inside its parent element and could possibly be possibly out of frame or view.</source>
          <target state="translated">부모 요소 내부에 있을 수도 원본과 프레임 또는 보기에 있을 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="3237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>Negative point values are similar, these will go beyond the top left bounds.</source>
          <target state="translated">음수 지점 값이 비슷할, 벗어나게 됩니다 왼쪽 위 범위입니다.</target>       </trans-unit>
        <trans-unit id="3238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>Render transforms do not affect layout, and are typically used to animate or apply a temporary effect to an element.</source>
          <target state="translated">렌더링 변형 레이아웃에 영향을 주지 않는 및 일반적으로 애니메이션을 적용 하거나 요소에 임시 효과 적용 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="3239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 특성 사용</target>       </trans-unit>
        <trans-unit id="3240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML 속성 요소 사용</target>       </trans-unit>
        <trans-unit id="3241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="3242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source><bpt id="p1">*</bpt>xOrigin<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>xOrigin<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="3243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>The horizontal origin factor.</source>
          <target state="translated">원래의 가로 길이 인수입니다.</target>       </trans-unit>
        <trans-unit id="3244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>This is typically given as a value between 0 and 1.</source>
          <target state="translated">이 일반적으로 0과 1 사이의 값으로 제공 됩니다.</target>       </trans-unit>
        <trans-unit id="3245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>See Remarks.</source>
          <target state="translated">설명 부분을 참조하세요.</target>       </trans-unit>
        <trans-unit id="3246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source><bpt id="p1">*</bpt>yOrigin<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>yOrigin<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="3247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>The vertical origin factor.</source>
          <target state="translated">세로 시작 비율입니다.</target>       </trans-unit>
        <trans-unit id="3248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>This is typically given as a value between 0 and 1.</source>
          <target state="translated">이 일반적으로 0과 1 사이의 값으로 제공 됩니다.</target>       </trans-unit>
        <trans-unit id="3249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>See Remarks.</source>
          <target state="translated">설명 부분을 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="3251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="3253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="3254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>The following example builds up elements in code, applies a <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransformOrigin%2A&gt;</ph>, and then applies a  <ph id="ph2">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 코드에서 요소를 작성, 적용 되는 <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransformOrigin%2A&gt;</ph>를 적용 하는 <ph id="ph2">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3255" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.RenderTransformOriginProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.RenderTransformOrigin" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.RenderTransformOrigin" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="3256" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.RenderTransformProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.RenderTransform" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.RenderTransform" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="3257" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ShouldSerializeCommandBindings">
          <source>Returns whether serialization processes should serialize the contents of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.CommandBindings" /&gt;</ph> property on instances of this class.</source>
          <target state="translated">serialization 프로세스에서 이 클래스의 인스턴스에 있는 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.CommandBindings" /&gt;</ph> 속성의 콘텐츠를 serialize해야 하는지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="3258" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ShouldSerializeCommandBindings">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="P:System.Windows.UIElement.CommandBindings" /&gt;</ph> property value should be serialized; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="P:System.Windows.UIElement.CommandBindings" /&gt;</ph> 속성 값을 serialize해야 하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ShouldSerializeCommandBindings">
          <source>This will return <ph id="ph1">`true`</ph> if <ph id="ph2">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph> is locally set.</source>
          <target state="translated">이 반환 됩니다 <ph id="ph1">`true`</ph> 경우 <ph id="ph2">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph> 로컬로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="3260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ShouldSerializeCommandBindings">
          <source>This <ph id="ph1">`ShouldSerialize`</ph> method is provided because the <ph id="ph2">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph> property does not have a simple default value.</source>
          <target state="translated">이 <ph id="ph1">`ShouldSerialize`</ph> 메서드가 때문에 제공 되는 <ph id="ph2">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph> 속성 간단한 기본 값이 없는 합니다.</target>       </trans-unit>
        <trans-unit id="3261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ShouldSerializeCommandBindings">
          <source>This method indicates whether the property has changed from its default value.</source>
          <target state="translated">이 메서드는 속성이 기본값에서 변경 되었는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="3262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ShouldSerializeCommandBindings">
          <source>You typically invoke this method if you are either developing a designer or developing your own control incorporating a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">디자이너를 개발 하거나 포함 하는 사용자 고유의 컨트롤 개발 하는 경우 일반적으로이 메서드를 호출는 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ShouldSerializeCommandBindings">
          <source>For more information, see <bpt id="p1">[</bpt>Defining Default Values with the ShouldSerialize and Reset Methods<ept id="p1">](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>ShouldSerialize 및 다시 설정 하는 메서드를 사용 하 여 기본 값 정의<ept id="p1">](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3264" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ShouldSerializeInputBindings">
          <source>Returns whether serialization processes should serialize the contents of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.InputBindings" /&gt;</ph> property on instances of this class.</source>
          <target state="translated">serialization 프로세스에서 이 클래스의 인스턴스에 있는 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.InputBindings" /&gt;</ph> 속성의 콘텐츠를 serialize해야 하는지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="3265" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ShouldSerializeInputBindings">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="P:System.Windows.UIElement.InputBindings" /&gt;</ph> property value should be serialized; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="P:System.Windows.UIElement.InputBindings" /&gt;</ph> 속성 값을 serialize해야 하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ShouldSerializeInputBindings">
          <source>This will return <ph id="ph1">`true`</ph> if <ph id="ph2">&lt;xref:System.Windows.UIElement.InputBindings%2A&gt;</ph> is locally set.</source>
          <target state="translated">이 반환 됩니다 <ph id="ph1">`true`</ph> 경우 <ph id="ph2">&lt;xref:System.Windows.UIElement.InputBindings%2A&gt;</ph> 로컬로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="3267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ShouldSerializeInputBindings">
          <source>This <ph id="ph1">`ShouldSerialize`</ph> method is provided because the <ph id="ph2">&lt;xref:System.Windows.UIElement.InputBindings%2A&gt;</ph> property does not have a simple default value.</source>
          <target state="translated">이 <ph id="ph1">`ShouldSerialize`</ph> 메서드가 때문에 제공 되는 <ph id="ph2">&lt;xref:System.Windows.UIElement.InputBindings%2A&gt;</ph> 속성 간단한 기본 값이 없는 합니다.</target>       </trans-unit>
        <trans-unit id="3268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ShouldSerializeInputBindings">
          <source>This method indicates whether the property has changed from its default value.</source>
          <target state="translated">이 메서드는 속성이 기본값에서 변경 되었는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="3269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ShouldSerializeInputBindings">
          <source>You typically invoke this method if you are either developing a designer or developing your own control incorporating a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">디자이너를 개발 하거나 포함 하는 사용자 고유의 컨트롤 개발 하는 경우 일반적으로이 메서드를 호출는 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ShouldSerializeInputBindings">
          <source>For more information, see <bpt id="p1">[</bpt>Defining Default Values with the ShouldSerialize and Reset Methods<ept id="p1">](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>ShouldSerialize 및 다시 설정 하는 메서드를 사용 하 여 기본 값 정의<ept id="p1">](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3271" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source>Gets or sets a value that determines whether rendering for this element should use device-specific pixel settings during rendering.</source>
          <target state="translated">렌더링하는 동안 이 요소의 렌더링에 장치 관련 픽셀 설정을 사용할지 여부를 결정하는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="3272" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="3273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element should render in accordance to device pixels; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">장치 픽셀에 따라 이 요소를 렌더링해야 하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source>The default as declared on <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>에 선언되어 있는 기본값은 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source>You can set this property to <ph id="ph1">`true`</ph> on your root element to enable pixel snap rendering throughout the UI.</source>
          <target state="translated">이 속성 설정할 수 있습니다 <ph id="ph1">`true`</ph> 스냅 픽셀 수 있도록 루트 요소에서 UI 전체에서 렌더링 합니다.</target>       </trans-unit>
        <trans-unit id="3276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source>For devices operating at greater than 96 <ph id="ph1">[!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)]</ph>, pixel snap rendering can minimize anti-aliasing visual artifacts in the vicinity of single-unit solid lines.</source>
          <target state="translated">96 이상에서 작동 하는 장치에 대 한 <ph id="ph1">[!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)]</ph>, 픽셀 맞춤 렌더링 단일 단위 실선 주변의 앤티앨리어싱 시각적 아티팩트로 최소화할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source>When inherited by <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or any possible derived classes, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> overrides the metadata for this dependency property to set the <ph id="ph3">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph> metadata property to <ph id="ph4">`true`</ph>.</source>
          <target state="translated">상속 되는 경우 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 또는 가능한 클래스를 파생 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 이 종속성 속성을 설정에 대 한 메타 데이터 재정의 <ph id="ph3">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph> 메타 데이터 속성을 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source>What this achieves is that only the outermost element in a subtree needs to specify <ph id="ph1">&lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt;</ph> as <ph id="ph2">`true`</ph>, and all child elements of that subtree will then report <ph id="ph3">&lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt;</ph> as <ph id="ph4">`true`</ph> and will have the <ph id="ph5">&lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt;</ph> visual effect.</source>
          <target state="translated">이렇게 하면 하위 트리의 가장 바깥쪽 요소에만 지정 해야 한다는 <ph id="ph1">&lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt;</ph> 으로 <ph id="ph2">`true`</ph>, 해당 하위 트리의 모든 자식 요소가 보고 하 고 <ph id="ph3">&lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt;</ph> 으로 <ph id="ph4">`true`</ph> 갖습니다는 <ph id="ph5">&lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt;</ph> 시각 효과입니다.</target>       </trans-unit>
        <trans-unit id="3279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="3280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="3282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="3283" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.SnapsToDevicePixelsProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="3284" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>Occurs when the stylus button is pressed while the pointer is over this element.</source>
          <target state="translated">포인터가 이 요소 위에 있는 동안 스타일러스 단추를 누르면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3285" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusButtonDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusButtonDown&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="3286" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusButtonDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusButtonDown&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="3287" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="3288" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3289" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3290" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3291" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3292" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="3293" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3294" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusButtonDown&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusButtonDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3295" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusButtonDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3296" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.StylusButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusButtonDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3297" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="3298" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="3299" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3300" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3301" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3302" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>Occurs when the stylus button is released while the pointer is over this element.</source>
          <target state="translated">포인터가 이 요소 위에 있는 동안 스타일러스 단추를 놓으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3303" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusButtonUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusButtonUp&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="3304" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusButtonUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusButtonUp&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="3305" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="3306" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3307" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3308" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3309" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3310" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="3311" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3312" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusButtonUp&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusButtonUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3313" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusButtonUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3314" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.StylusButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusButtonUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3315" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="3316" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="3317" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3318" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3319" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3320" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusDown">
          <source>Occurs when the stylus touches the digitizer while the stylus is over this element.</source>
          <target state="translated">스타일러스가 이 요소 위에 있는 동안 스타일러스가 디지타이저를 건드리면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3321" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusDown&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="3322" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusDown&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="3323" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusDown">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="3324" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusDown">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3325" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3326" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3327" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3328" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusDown">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="3329" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3330" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusDown">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3331" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3332" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.StylusDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3333" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="3334" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="3335" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3336" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3337" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3338" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusEnter">
          <source>Occurs when the stylus enters the bounds of this element.</source>
          <target state="translated">스타일러스가 이 요소의 영역 안으로 들어가면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3339" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.StylusEnter&gt;</ph> is a  that uses the direct event handling routing strategy.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.StylusEnter&gt;</ph> 처리 라우팅 전략 직접 이벤트를 사용 하는입니다.</target>       </trans-unit>
        <trans-unit id="3340" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">경로; 직접 라우트된 이벤트를 발생 하지 않습니다. 대신,에서 처리 됩니다는 동일한 요소 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="3341" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">그러나 라우트된 이벤트 동작 스타일의 이벤트 트리거 등의 다른 측면을 활성화 합니다.</target>       </trans-unit>
        <trans-unit id="3342" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>Although <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusEnter&gt;</ph> tracks when the stylus enters the bounds of an element, this event more literally reports that the <ph id="ph2">&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;</ph> property value has changed from <ph id="ph3">`false`</ph> to <ph id="ph4">`true`</ph> on this element.</source>
          <target state="translated">하지만 <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusEnter&gt;</ph> 트랙 스타일러스이 이벤트를 더이 요소의 영역 안으로 들어가면 직접적으로 보고 하는 <ph id="ph2">&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;</ph> 에서 속성 값이 변경 <ph id="ph3">`false`</ph> 를 <ph id="ph4">`true`</ph> 이 요소에 합니다.</target>       </trans-unit>
        <trans-unit id="3343" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusEnter&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusEnter&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="3344" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusEnter&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusEnter&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="3345" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="3346" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3347" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3348" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3349" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3350" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="3351" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3352" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusEnter%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3353" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.StylusEnterEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusEnter" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusEnter" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3354" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusEnterEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="3355" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusEnterEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="3356" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusEnterEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3357" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusEnterEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3358" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusEnterEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3359" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>Occurs when the stylus moves over an element without actually touching the digitizer.</source>
          <target state="translated">스타일러스가 디지타이저를 실제로 건드리지 않고 요소 위로 움직이면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3360" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusInAirMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusInAirMove&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="3361" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusInAirMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusInAirMove&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="3362" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="3363" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3364" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3365" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3366" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3367" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="3368" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3369" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusInAirMove&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusInAirMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3370" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusInAirMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusInAirMove%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3371" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.StylusInAirMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusInAirMove" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusInAirMove" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3372" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusInAirMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="3373" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusInAirMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="3374" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusInAirMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3375" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusInAirMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3376" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusInAirMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3377" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusInRange">
          <source>Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</source>
          <target state="translated">이 요소 위에 있는 동안 스타일러스가 디지타이저를 검색할 만큼 가까이 있으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3378" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInRange">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusInRange&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusInRange&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="3379" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInRange">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusInRange&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusInRange&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="3380" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInRange">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="3381" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInRange">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3382" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInRange">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3383" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInRange">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3384" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInRange">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3385" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInRange">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="3386" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInRange">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3387" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInRange">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusInRange&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusInRange&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3388" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInRange">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusInRange%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusInRange%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3389" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.StylusInRangeEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusInRange" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusInRange" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3390" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusInRangeEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="3391" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusInRangeEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="3392" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusInRangeEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3393" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusInRangeEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3394" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusInRangeEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3395" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusLeave">
          <source>Occurs when the stylus leaves the bounds of the element.</source>
          <target state="translated">스타일러스가 요소의 영역을 벗어나면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3396" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.StylusLeave&gt;</ph> is a  that uses the direct event handling routing strategy.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.StylusLeave&gt;</ph> 처리 라우팅 전략 직접 이벤트를 사용 하는입니다.</target>       </trans-unit>
        <trans-unit id="3397" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">경로; 직접 라우트된 이벤트를 발생 하지 않습니다. 대신,에서 처리 됩니다는 동일한 요소 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="3398" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">그러나 라우트된 이벤트 동작 스타일의 이벤트 트리거 등의 다른 측면을 활성화 합니다.</target>       </trans-unit>
        <trans-unit id="3399" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>Although <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusLeave&gt;</ph> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <ph id="ph2">&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;</ph> property value has changed from <ph id="ph3">`true`</ph> to <ph id="ph4">`false`</ph> on this element.</source>
          <target state="translated">하지만 <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusLeave&gt;</ph> 트랙 위에 있는 범위를 벗어날 때이 이벤트는 요소 중 더 직접적으로 보고 하는 <ph id="ph2">&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;</ph> 에서 속성 값이 변경 <ph id="ph3">`true`</ph> 를 <ph id="ph4">`false`</ph> 이 요소에 합니다.</target>       </trans-unit>
        <trans-unit id="3400" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusLeave&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusLeave&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="3401" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusLeave&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusLeave&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="3402" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="3403" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3404" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3405" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3406" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3407" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="3408" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3409" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusLeave%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3410" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.StylusLeaveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusLeave" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusLeave" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3411" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusLeaveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="3412" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusLeaveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="3413" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusLeaveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3414" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusLeaveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3415" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusLeaveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3416" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusMove">
          <source>Occurs when the stylus moves over this element.</source>
          <target state="translated">스타일러스가 이 요소 위로 움직일 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="3417" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusMove">
          <source>The stylus must move while on the digitizer to raise this event.</source>
          <target state="translated">이 이벤트가 발생하려면 스타일러스가 디지타이저 위에서 움직여야 합니다.</target>       </trans-unit>
        <trans-unit id="3418" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusMove">
          <source>Otherwise, <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusInAirMove" /&gt;</ph> is raised instead.</source>
          <target state="translated">그렇지 않으면 이 이벤트 대신 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusInAirMove" /&gt;</ph>가 발생합니다.</target>       </trans-unit>
        <trans-unit id="3419" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusMove&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="3420" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusMove&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="3421" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusMove">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="3422" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusMove">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3423" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusMove">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3424" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusMove">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3425" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusMove">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3426" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusMove">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="3427" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusMove">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3428" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusMove">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusMove&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3429" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusMove%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3430" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.StylusMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusMove" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusMove" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3431" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="3432" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="3433" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3434" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3435" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3436" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>Occurs when the stylus is too far from the digitizer to be detected, while over this element.</source>
          <target state="translated">이 요소 위에 있는 동안 스타일러스가 디지타이저에서 멀리 떨어져 있어 검색할 수 없으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3437" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusOutOfRange&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusOutOfRange&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="3438" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusOutOfRange&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusOutOfRange&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="3439" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="3440" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3441" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3442" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3443" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3444" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="3445" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3446" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusOutOfRange&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusOutOfRange&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3447" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusOutOfRange%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusOutOfRange%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3448" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.StylusOutOfRangeEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusOutOfRange" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusOutOfRange" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3449" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusOutOfRangeEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="3450" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusOutOfRangeEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="3451" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusOutOfRangeEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3452" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusOutOfRangeEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3453" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusOutOfRangeEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3454" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.StylusPlugIns">
          <source>Gets a collection of all stylus plug-in (customization) objects associated with this element.</source>
          <target state="translated">이 요소와 연결된 모든 스타일러스 플러그 인(사용자 지정) 개체 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="3455" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.StylusPlugIns">
          <source>The collection of stylus plug-ins, as a specialized collection.</source>
          <target state="translated">특수 컬렉션인 스타일러스 플러그 인 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="3456" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.StylusPlugIns">
          <source>An example of a control that populates this collection is <ph id="ph1">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph>.</source>
          <target state="translated">이 컬렉션을 채우는 컨트롤의 예로 <ph id="ph1">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3457" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.StylusPlugIns">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph> adds the <ph id="ph2">&lt;xref:System.Windows.Input.StylusPlugIns.DynamicRenderer&gt;</ph> as a collection item, which enables the <ph id="ph3">&lt;xref:System.Windows.Input.StylusPlugIns.DynamicRenderer&gt;</ph> to interact with stylus input and produce the unique rendering in response to stylus driven events.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph> 추가 <ph id="ph2">&lt;xref:System.Windows.Input.StylusPlugIns.DynamicRenderer&gt;</ph> 수 있는 컬렉션 항목으로는 <ph id="ph3">&lt;xref:System.Windows.Input.StylusPlugIns.DynamicRenderer&gt;</ph> 스타일러스 입력와 상호 작용 하 여 고유한 렌더링 스타일러스 구동 이벤트에 대 한 응답에서을 생성 합니다.</target>       </trans-unit>
        <trans-unit id="3458" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.StylusPlugIns">
          <source>For information on creating custom plug-ins that can receive and interpret stylus input, see <bpt id="p1">[</bpt>Intercepting Input from the Stylus<ept id="p1">](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md)</ept>.</source>
          <target state="translated">사용자 지정 플러그 인을 만드는 방법에 대 한 정보는 수신 하 고 스타일러스 입력을 해석 수, 참조 <bpt id="p1">[</bpt>스타일러스를<ept id="p1">](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3459" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.StylusPlugIns">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.Input.StylusPlugIns.DynamicRenderer&gt;</ph> instance and adds it to the <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusPlugIns%2A&gt;</ph> collection for a custom ink handling control.</source>
          <target state="translated">다음 예제에서는 한 <ph id="ph1">&lt;xref:System.Windows.Input.StylusPlugIns.DynamicRenderer&gt;</ph> 인스턴스 및에 추가 <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusPlugIns%2A&gt;</ph> 사용자 지정 잉크 처리 컨트롤에 대 한 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="3460" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>Occurs when a user performs one of several stylus gestures.</source>
          <target state="translated">사용자가 여러 스타일러스 제스처 중 하나를 수행하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3461" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>For more information about stylus gestures, see <ph id="ph1">&lt;xref:System.Windows.Input.SystemGesture&gt;</ph>.</source>
          <target state="translated">스타일러스 제스처에 대 한 자세한 내용은 참조 하십시오. <ph id="ph1">&lt;xref:System.Windows.Input.SystemGesture&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3462" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusSystemGesture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusSystemGesture&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="3463" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusSystemGesture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusSystemGesture&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="3464" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="3465" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3466" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3467" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3468" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3469" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="3470" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3471" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusSystemGesture&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusSystemGesture&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3472" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusSystemGesture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusSystemGesture%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3473" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.StylusSystemGestureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusSystemGesture" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusSystemGesture" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3474" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusSystemGestureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="3475" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusSystemGestureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="3476" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusSystemGestureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3477" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusSystemGestureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3478" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusSystemGestureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3479" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusUp">
          <source>Occurs when the user raises the stylus off the digitizer while it is over this element.</source>
          <target state="translated">스타일러스가 이 요소 위에 있는 동안 사용자가 디지타이저에서 스타일러스를 올리면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3480" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusUp&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="3481" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusUp&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="3482" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusUp">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="3483" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusUp">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3484" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3485" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3486" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3487" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusUp">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="3488" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3489" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusUp">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusUp&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3490" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3491" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.StylusUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3492" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="3493" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="3494" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3495" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3496" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3497" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.TextInput">
          <source>Occurs when this element gets text in a device-independent manner.</source>
          <target state="translated">이 요소가 장치와 별개의 방식으로 텍스트를 가져오면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3498" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>This event might already be marked as handled by the internal implementations of composited controls.</source>
          <target state="translated">합성 컨트롤의 내부 구현에 의해 처리 된 것으로이 이벤트가 이미 표시 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3499" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>See Remark below.</source>
          <target state="translated">아래의 설명을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="3500" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph> event may already be marked as handled by the internal implementations of composited controls.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph> 이벤트 합성 컨트롤의 내부 구현에 의해 처리 된 것으로 이미 표시 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3501" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> is a composited control where the <ph id="ph2">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph> event is already marked as handled; within its compositing.</source>
          <target state="translated">예를 들어 한 <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> 는 합성 컨트롤 위치는 <ph id="ph2">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph> 이벤트는 이미 처리;의 합성 내에서 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="3502" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control.</source>
          <target state="translated">컨트롤은 컨트롤의 입력을 해당 컨트롤에 특별 한 의미가 있는 것으로 화살표 키 같은 일부 형식을 해석 하기 때문에이 작업을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="3503" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>If you use <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph> as the event where you attach handlers for text input, you may receive better results.</source>
          <target state="translated">사용 하는 경우 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph> 텍스트 입력에 대 한 처리기를 연결 하는 이벤트로 더 나은 결과 나타날 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3504" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.</source>
          <target state="translated">이 방법은 대부분의 경우 컨트롤 컴퍼지션 이미 표시가이 이벤트를 처리 하 고 처리기 이벤트 경로 따라가 이벤트를 수신 하지 못하도록 하는 위치를 우회 합니다.</target>       </trans-unit>
        <trans-unit id="3505" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph> event allows a component or application to listen for text input in a device-independent manner.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph> 이벤트를 사용 하면 구성 요소 또는 응용 프로그램을 장치에 관계 없이 텍스트 입력에 대 한 수신 대기 합니다.</target>       </trans-unit>
        <trans-unit id="3506" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>The keyboard is the primary means of <ph id="ph1">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph>, but speech, handwriting, and other input devices can also raise <ph id="ph2">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph>.</source>
          <target state="translated">키보드는 주요 수단입니다 <ph id="ph1">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph>, 음성, 필기 및 기타 입력된 장치를 발생 시킬 수 있지만 <ph id="ph2">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3507" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>Because of key combinations—either in default keyboards or through input method editors—multiple key events might raise just one text input event.</source>
          <target state="translated">키 조합으로 인해-기본 키보드 또는 입력된 방법 편집기를 통해-여러 주요 이벤트 하나만 텍스트 입력된 이벤트를 발생 시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3508" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="3509" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="3510" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3511" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3512" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3513" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="3514" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3515" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3516" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTextInput%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTextInput%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3517" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.TextInputEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TextInput" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TextInput" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3518" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.TextInputEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="3519" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.TextInputEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="3520" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.TextInputEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3521" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.TextInputEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3522" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.TextInputEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="3523" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.TouchDown">
          <source>Occurs when a finger touches the screen while the finger is over this element.</source>
          <target state="translated">손가락이 이 요소 위에 있는 동안 화면을 터치하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3524" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source>By default, the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> events do not occur until a finger touches the screen and moves.</source>
          <target state="translated">기본적으로는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> 손가락 화면을 터치 하 고 이동 될 때까지 이벤트가 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="3525" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source>Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph>.</source>
          <target state="translated">손가락 화면에서 이동 하지 않고 수행 하는 키를 눌러를 누른 채로의 동작을 보유 한 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3526" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source>The press and hold behavior is equivalent to a mouse right-click.</source>
          <target state="translated">키를 누른 동작을 마우스 오른쪽 단추로 클릭 하는 것과 같습니다.</target>       </trans-unit>
        <trans-unit id="3527" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source>To cause the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> events to occur as soon as a finger touches the screen, set the <ph id="ph3">&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType&gt;</ph> attached property to <ph id="ph4">`false`</ph> for this element.</source>
          <target state="translated">발생 하는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> 손가락으로 화면을 터치 하는 즉시 발생 하도록 이벤트를 설정할는 <ph id="ph3">&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType&gt;</ph> 연결 된 속성을 <ph id="ph4">`false`</ph> 이 요소에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="3528" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3529" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3530" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3531" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="3532" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3533" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3534" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3535" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3536" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.TouchDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3537" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.TouchEnter">
          <source>Occurs when a touch moves from outside to inside the bounds of this element.</source>
          <target state="translated">터치가 이 요소의 경계 외부에서 내부로 이동할 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="3538" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchEnter">
          <source>This event is always raised, whether or not the touch device is captured to this element.</source>
          <target state="translated">이 이벤트는이 요소에 터치 장치 캡처되는지 여부 항상 발생 됩니다.</target>       </trans-unit>
        <trans-unit id="3539" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchEnter">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3540" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchEnter">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3541" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchEnter">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3542" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchEnter">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="3543" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchEnter">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3544" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchEnter">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3545" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchEnter">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchEnter%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3546" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.TouchEnterEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchEnter" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchEnter" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3547" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.TouchesCaptured">
          <source>Gets all touch devices that are captured to this element.</source>
          <target state="translated">이 요소에 캡처된 터치 장치를 모두 가져옵니다.</target>       </trans-unit>
        <trans-unit id="3548" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.TouchesCaptured">
          <source>An enumeration of <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> objects that are captured to this element.</source>
          <target state="translated">이 요소에 캡처된 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> 개체의 열거형입니다.</target>       </trans-unit>
        <trans-unit id="3549" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.TouchesCapturedWithin">
          <source>Gets all touch devices that are captured to this element or any child elements in its visual tree.</source>
          <target state="translated">이 요소나 시각적 트리의 임의 자식 요소에 캡처된 터치 장치를 모두 가져옵니다.</target>       </trans-unit>
        <trans-unit id="3550" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.TouchesCapturedWithin">
          <source>An enumeration of <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> objects that are captured to this element or any child elements in its visual tree.</source>
          <target state="translated">이 요소나 시각적 트리의 임의 자식 요소에 캡처된 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> 개체의 열거형입니다.</target>       </trans-unit>
        <trans-unit id="3551" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.TouchesDirectlyOver">
          <source>Gets all touch devices that are over this element.</source>
          <target state="translated">이 요소 위에 있는 터치 장치를 모두 가져옵니다.</target>       </trans-unit>
        <trans-unit id="3552" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.TouchesDirectlyOver">
          <source>An enumeration of <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> objects that are over this element.</source>
          <target state="translated">이 요소 위에 있는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> 개체의 열거형입니다.</target>       </trans-unit>
        <trans-unit id="3553" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.TouchesOver">
          <source>Gets all touch devices that are over this element or any child elements in its visual tree.</source>
          <target state="translated">이 요소나 시각적 트리의 임의 자식 요소 위에 있는 터치 장치를 모두 가져옵니다.</target>       </trans-unit>
        <trans-unit id="3554" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.TouchesOver">
          <source>An enumeration of <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> objects that are over this element or any child elements in its visual tree.</source>
          <target state="translated">이 요소나 시각적 트리의 임의 자식 요소 위에 있는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> 개체의 열거형입니다.</target>       </trans-unit>
        <trans-unit id="3555" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.TouchLeave">
          <source>Occurs when a touch moves from inside to outside the bounds of this element.</source>
          <target state="translated">터치가 이 요소의 경계 내부에서 외부로 이동할 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="3556" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchLeave">
          <source>This event is always raised, whether or not the touch device is captured to this element.</source>
          <target state="translated">이 이벤트는이 요소에 터치 장치 캡처되는지 여부 항상 발생 됩니다.</target>       </trans-unit>
        <trans-unit id="3557" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchLeave">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3558" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchLeave">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3559" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchLeave">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3560" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchLeave">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="3561" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchLeave">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3562" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchLeave">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3563" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchLeave">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchLeave%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3564" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.TouchLeaveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchLeave" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchLeave" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3565" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.TouchMove">
          <source>Occurs when a finger moves on the screen while the finger is over this element.</source>
          <target state="translated">손가락이 이 요소 위에 있는 동안 화면에서 손가락을 움직이면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3566" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchMove">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3567" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchMove">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3568" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchMove">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3569" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchMove">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="3570" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchMove">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3571" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchMove">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3572" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchMove">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchMove&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3573" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchMove%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3574" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.TouchMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchMove" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchMove" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3575" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.TouchUp">
          <source>Occurs when a finger is raised off of the screen while the finger is over this element.</source>
          <target state="translated">손가락이 이 요소 위에 있는 동안 화면에서 손가락을 떼면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3576" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="3577" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3578" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="3579" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchUp">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="3580" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="3581" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchUp">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3582" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchUp">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchUp&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3583" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3584" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.TouchUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="3585" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)">
          <source>The point value, as relative to this element.</source>
          <target state="translated">이 요소에 상대적인 점 값입니다.</target>       </trans-unit>
        <trans-unit id="3586" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)">
          <source>The element to translate the given point into.</source>
          <target state="translated">지정된 점을 변환할 요소입니다.</target>       </trans-unit>
        <trans-unit id="3587" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)">
          <source>Translates a point relative to this element to coordinates that are relative to the specified element.</source>
          <target state="translated">이 요소와 관련된 점을 지정된 요소와 관련된 좌표로 변환합니다.</target>       </trans-unit>
        <trans-unit id="3588" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)">
          <source>A point value, now relative to the target element rather than this source element.</source>
          <target state="translated">이제 이 원본 요소가 아닌 대상 요소에 상대적인 점 값입니다.</target>       </trans-unit>
        <trans-unit id="3589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)">
          <source>Passing <ph id="ph1">`null`</ph> for <ph id="ph2">`relativeTo`</ph> is permitted, and indicates that coordinates should be relative to the root element in the logical tree that this element belongs to.</source>
          <target state="translated">전달 <ph id="ph1">`null`</ph> 에 대 한 <ph id="ph2">`relativeTo`</ph> 을 사용할 수도 및이 요소가 속한 논리적 트리 루트 요소를 기준으로 좌표 되어야 함을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="3590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)">
          <source>This method is used for translating hit test point values.</source>
          <target state="translated">이 메서드는 테스트 지점 값에 도달 합니다.</target>       </trans-unit>
        <trans-unit id="3591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)">
          <source>Calling this method is mainly relevant if you are authoring a control and need to process input at a lower level.</source>
          <target state="translated">이 메서드를 호출 하는 컨트롤 만드는 낮은 수준에서 입력을 처리 해야 하는 경우 주로 관련이 있습니다.</target>       </trans-unit>
        <trans-unit id="3592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)">
          <source>If you are using existing controls, you can generally assume that completed controls will report correctly translated hit test results.</source>
          <target state="translated">기존 컨트롤을 사용 하는 완전된 한 컨트롤이 올바르게 번역 된 적중 횟수 테스트 결과 보고 합니다 일반적으로 가정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3593" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Uid">
          <source>Gets or sets the unique identifier (for localization) for this element.</source>
          <target state="translated">이 요소의 고유 식별자(지역화에 대한)를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="3594" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Uid">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="3595" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Uid">
          <source>A string that is the unique identifier for this element.</source>
          <target state="translated">이 요소의 고유 식별자인 문자열입니다.</target>       </trans-unit>
        <trans-unit id="3596" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Uid">
          <source>Used by designers to get the <ph id="ph1">`x:Uid`</ph> value (see <bpt id="p1">[</bpt>WPF Globalization and Localization Overview<ept id="p1">](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md)</ept> for more information).</source>
          <target state="translated">디자이너에서 가져오는 데 사용 된 <ph id="ph1">`x:Uid`</ph> 값 (참조 <bpt id="p1">[</bpt>WPF 전역화 및 지역화 개요<ept id="p1">](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md)</ept> 에 대 한 자세한 내용은).</target>       </trans-unit>
        <trans-unit id="3597" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Uid">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="3598" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Uid">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3599" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Uid">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="3600" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Uid">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="3601" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.UidProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Uid" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Uid" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="3602" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.UpdateLayout">
          <source>Ensures that all visual child elements of this element are properly updated for layout.</source>
          <target state="translated">이 요소의 모든 시각적 자식 요소가 레이아웃용으로 적절하게 업데이트되도록 합니다.</target>       </trans-unit>
        <trans-unit id="3603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.UpdateLayout">
          <source>When you call this method, elements with <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;</ph><ph id="ph2">`false`</ph> or <ph id="ph3">&lt;xref:System.Windows.UIElement.IsArrangeValid%2A&gt;</ph><ph id="ph4">`false`</ph> will call element-specific <ph id="ph5">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> and <ph id="ph6">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> methods, which forces layout update, and all computed sizes will be validated.</source>
          <target state="translated">이 메서드를 사용 하 여 요소를 호출 하는 경우 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;</ph> <ph id="ph2">`false`</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.UIElement.IsArrangeValid%2A&gt;</ph> <ph id="ph4">`false`</ph> 요소 관련 호출 <ph id="ph5">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> 및 <ph id="ph6">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> 메서드는 레이아웃을 강제로 업데이트 하 고, 모든 계산 된 크기의 유효성을 검사 합니다.</target>       </trans-unit>
        <trans-unit id="3604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.UpdateLayout">
          <source>Calling this method has no effect if layout is unchanged, or if neither arrangement nor measurement state of a layout is invalid.</source>
          <target state="translated">다음과 같은 레이아웃이 변경 된 경우 또는 레이아웃의 정렬 또는 측정 상태에 유효 하지 않을 경우에이 메서드를 호출 하면 효과가 없습니다.</target>       </trans-unit>
        <trans-unit id="3605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.UpdateLayout">
          <source>However, if layout is invalid in either respect, the <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> call will redo the entire layout.</source>
          <target state="translated">그러나 어느 관점에서 레이아웃 유효 하지 않을 경우, 고 <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> 호출 전체 레이아웃을 다시 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="3606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.UpdateLayout">
          <source>Therefore, you should avoid calling <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> after each incremental and minor change in the element tree.</source>
          <target state="translated">따라서 호출 해서는 <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> 요소 트리에 있는 각 증분 및 사소한 변경 후 합니다.</target>       </trans-unit>
        <trans-unit id="3607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.UpdateLayout">
          <source>The layout system will perform element layout in a deferred manner, using an algorithm that balances performance and currency, and with a weighting strategy to defer changes to roots until all child elements are valid.</source>
          <target state="translated">이 레이아웃 시스템 성능 및 통화와 균형을 조정 하는 알고리즘을 사용 하 여 지연 된 방식에서 및 모든 자식 요소가 유효한 될 때까지 루트에 대 한 변경 내용을 연기 하는 가중치 전략으로 요소 레이아웃을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="3608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.UpdateLayout">
          <source>You should only call <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> if you absolutely need updated sizes and positions, and only after you are certain that all changes to properties that you control and that may affect layout are completed.</source>
          <target state="translated">에 호출 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> 업데이트 된 크기 및 위치를 반드시 필요한 하 고 사용자가 제어 하며 있는 수에 영향을 레이아웃 하는 속성을 모든 변경이 완료 되었음을 확인 한 후에 합니다.</target>       </trans-unit>
        <trans-unit id="3609" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Visibility">
          <source>Gets or sets the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> visibility of this element.</source>
          <target state="translated">이 요소의 <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> 표시 여부를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="3610" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Visibility">
          <source>This is a dependency property.</source>
          <target state="translated">이 속성은 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="3611" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>A value of the enumeration.</source>
          <target state="translated">열거형 값입니다.</target>       </trans-unit>
        <trans-unit id="3612" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>The default value is <ph id="ph1">&lt;see cref="F:System.Windows.Visibility.Visible" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Windows.Visibility.Visible" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3613" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>Setting this property affects the value of <ph id="ph1">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph>, which in turn may raise the <ph id="ph2">&lt;xref:System.Windows.UIElement.IsVisibleChanged&gt;</ph> event.</source>
          <target state="translated">이 속성의 값에 영향을 줍니다 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph>를 차례로 발생 시킬 수는 <ph id="ph2">&lt;xref:System.Windows.UIElement.IsVisibleChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3614" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>However, <ph id="ph1">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph> has other factors that influence it, for instance the visibility settings of parents that contain it.</source>
          <target state="translated">그러나 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph> 를 포함 하는 부모 항목의 표시 유형 설정 예를 들어, 영향을 주는 다른 요소에 있습니다.</target>       </trans-unit>
        <trans-unit id="3615" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>Elements where <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> is not <ph id="ph2">&lt;xref:System.Windows.Visibility.Visible&gt;</ph> do not participate in input events (or commands), do not influence either the Measure or Arrange passes of layout, are not in a tab sequence, and will not be reported in hit testing.</source>
          <target state="translated">요소 위치 <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> 않습니다 <ph id="ph2">&lt;xref:System.Windows.Visibility.Visible&gt;</ph> 입력 이벤트 (또는 명령)에 참여 하지 않습니다, 레이아웃의 측정 또는 정렬 전달에 영향을 주지 않는, 탭 순서에 없는 및 적중 테스트에 보고 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="3616" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>When inherited by <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> or its derived classes, <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> redefines the default value of this property to be <ph id="ph3">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>.</source>
          <target state="translated">상속 되는 경우 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 또는 해당 파생된 클래스 <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> 되려면이 속성의 기본값을 재정의 <ph id="ph3">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3617" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>This has the effect of not running the Measure pass of layout on an initially created <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, and <ph id="ph2">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph> returns (0,0).</source>
          <target state="translated">이 실행 되 고 있지 레이아웃의 측정 단계는 처음에 만든의 효과가 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, 및 <ph id="ph2">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph> (0, 0)를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="3618" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>For details, see <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="3619" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> also redefines the default value to be <ph id="ph2">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>, with similar resulting behavior for <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> and its derived classes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> 또한 되도록 기본값을 재정의 <ph id="ph2">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>에 대 한 유사한 결과 동작 <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> 와 해당 파생된 클래스입니다.</target>       </trans-unit>
        <trans-unit id="3620" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="3621" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="3622" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="3623" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="3624" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>The following example implements a handler that references two different named buttons that are intended to be a mutually exclusive pair in the user interface.</source>
          <target state="translated">다음 예제에서는 두 개의 서로 다른 명명 된 단추는 사용자 인터페이스에는 상호 배타적인 쌍으로 사용 하는 참조 하는 처리기를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="3625" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>Prior to running the actual program logic associated with the button, the button itself is set to be <ph id="ph1">&lt;xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType&gt;</ph>, and the other button in the pair is set to <ph id="ph2">&lt;xref:System.Windows.Visibility.Visible?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">으로 설정 되어 자체 단추는 단추와 연결 된 실제 프로그램 논리를 실행 하기 전에 <ph id="ph1">&lt;xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType&gt;</ph>로 설정 된 쌍의 다른 단추와 <ph id="ph2">&lt;xref:System.Windows.Visibility.Visible?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3626" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.VisibilityProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Visibility" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Visibility" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>