<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="FrameworkElement.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac518d1098f1b9a5e35ee665acf1608578bf6a2bb4f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">18d1098f1b9a5e35ee665acf1608578bf6a2bb4f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.FrameworkElement">
          <source>Provides a WPF framework-level set of properties, events, and methods for Windows Presentation Foundation (WPF) elements.</source>
          <target state="translated">WPF(Windows Presentation Foundation) 요소에 WPF 프레임워크 수준의 속성, 이벤트 및 메서드 집합을 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.FrameworkElement">
          <source>This class represents the provided WPF framework-level implementation that is built on the WPF core-level APIs that are defined by <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>.</source>
          <target state="translated">이 클래스는 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>에 정의된 WPF 코어 수준의 API를 기반으로 하여 제공된 WPF 프레임워크 수준의 구현을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> is the connecting point between WPF framework-level element classes and the WPF core-level set of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> presentation services.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> WPF 프레임 워크 수준 요소 클래스와의 WPF 핵심 수준 집합 간의 연결 지점이 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 프레젠테이션 서비스입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>For more information about these concepts, see <bpt id="p1">[</bpt>WPF Architecture<ept id="p1">](~/docs/framework/wpf/advanced/wpf-architecture.md)</ept>.</source>
          <target state="translated">이러한 개념에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>WPF 아키텍처<ept id="p1">](~/docs/framework/wpf/advanced/wpf-architecture.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> extends <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> and adds the following capabilities:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 확장 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 다음과 같은 기능을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source><bpt id="p1">**</bpt>Layout system definition<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> provides specific WPF framework-level implementations for certain methods that were defined as virtual members in  <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>레이아웃 시스템 정의<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 제공 되는 특정 WPF 프레임 워크 수준 구현 특정 가상 멤버로 정의 된 메서드를 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>Most notably, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> seals certain WPF core-level layout overrides, and instead provides a WPF framework-level equivalent that derived classes should override instead.</source>
          <target state="translated">가장 주목할 만한 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 특정 WPF 핵심 수준 레이아웃 재정의가 봉인 하 고 대신 제공 하는 대신 WPF 프레임 워크 수준 동등 파생 된 클래스를 재정의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>For example, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> seals <ph id="ph2">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> but provides <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>.</source>
          <target state="translated">예를 들어 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 봉인 <ph id="ph2">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> 제공 하지만 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>These changes reflect the fact that at the WPF framework-level there is a full layout system in place that can render any <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class.</source>
          <target state="translated">이러한 변경 내용을 반영 된다는 사실에 입각 WPF 프레임 워크 수준에 있는 전체 레이아웃 시스템 하나라도 렌더링할 수 있는 원위치 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>At the WPF core level, certain members that will structure a general <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> based layout solution are in place, but the actual engine of the layout system is not defined.</source>
          <target state="translated">WPF 핵심 수준, 특정 구성원을 일반 구성 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 기반된 레이아웃 솔루션 장소에 있더라도 레이아웃 시스템의 실제 엔진 정의 되어 있지 않습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>For more information, see <bpt id="p1">[</bpt>Layout<ept id="p1">](~/docs/framework/wpf/advanced/layout.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>레이아웃<ept id="p1">](~/docs/framework/wpf/advanced/layout.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source><bpt id="p1">**</bpt>The logical tree:<ept id="p1">**</ept> The general <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> programming model is often expressed in terms of being a tree of elements.</source>
          <target state="translated"><bpt id="p1">**</bpt>논리적 트리:<ept id="p1">**</ept> 일반 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 프로그래밍 모델은 종종 요소 트리 되 고 측면에서 표현 됩니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>Support for expressing the tree of elements as a logical tree, and accompanying support for defining that tree in markup is implemented at the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> level.</source>
          <target state="translated">논리적 트리에서 요소 트리를 표현 하 고에서 구현 되며 해당 트리 태그에서 정의에 대 한 지원의 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 수준입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>Note however that <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> deliberately does not define a content model, and leaves that responsibility to derived classes.</source>
          <target state="translated">하지만 참고 해당 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 고의로 콘텐츠 모델을 정의 하지 않는 하 고 해당 작업 파생 된 클래스를 수행 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>For more information, see <bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](~/docs/framework/wpf/advanced/trees-in-wpf.md)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>WPF의 트리<ept id="p1">](~/docs/framework/wpf/advanced/trees-in-wpf.md)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source><bpt id="p1">**</bpt>Object lifetime events:<ept id="p1">**</ept> It is often useful to know when an element is initialized (the constructor is called) or when the element is first loaded into a logical tree.</source>
          <target state="translated"><bpt id="p1">**</bpt>개체 수명 이벤트:<ept id="p1">**</ept> 요소의 초기화 시기를 알고 유용 (생성자를 호출) 요소는 처음으로 로드 논리적 트리로 또는 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> defines several events related to object lifetime that provide useful hooks for code-behind operations that involve elements, such as adding more child elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 개체 수명 관련 된 다른 자식 요소를 추가 하는 등의 요소를 포함 하는 코드 숨김 작업에 대 한 유용한 후크를 제공 하는 여러 이벤트를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>For more information, see <bpt id="p1">[</bpt>Object Lifetime Events<ept id="p1">](~/docs/framework/wpf/advanced/object-lifetime-events.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>개체 수명 이벤트<ept id="p1">](~/docs/framework/wpf/advanced/object-lifetime-events.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source><bpt id="p1">**</bpt>Support for data binding and dynamic resource references:<ept id="p1">**</ept> The property-level support for data binding and resources is implemented by the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph> class and embodied in the property system, but the ability to resolve a member value that is stored as an <ph id="ph2">&lt;xref:System.Windows.Expression&gt;</ph> (the programming construct that underlies both data binding and dynamic resources) is implemented by <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>데이터 바인딩 및 동적 리소스 참조에 대 한 지원:<ept id="p1">**</ept> 데이터 바인딩 및 리소스에 대 한 속성 수준 지원을 구현한는 <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph> 클래스 및 속성 시스템 하지만 멤버 값을 해결 하는 기능에 포함 된 로 저장 한 <ph id="ph2">&lt;xref:System.Windows.Expression&gt;</ph> (데이터 바인딩 및 동적 리소스 둘 다의 기반이 되는 프로그래밍 구문)에 의해 구현 됩니다 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>For more information, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept> and <bpt id="p2">[</bpt>XAML Resources<ept id="p2">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 바인딩 개요<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept> 및 <bpt id="p2">[</bpt>XAML 리소스<ept id="p2">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source><bpt id="p1">**</bpt>Styles:<ept id="p1">**</ept> <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> defines the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property.</source>
          <target state="translated"><bpt id="p1">**</bpt>스타일:<ept id="p1">**</ept> <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 정의 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>However, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> does not yet define support for templates, or support decorators.</source>
          <target state="translated">그러나 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 템플릿에 대 한 지원을 정의 하지 않은 하거나 데코레이터를 지원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>These features are introduced by control classes such as <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>.</source>
          <target state="translated">이러한 기능을와 같은 컨트롤 클래스에 의해 도입 <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source><bpt id="p1">**</bpt>More animation support:<ept id="p1">**</ept> Some animation support was already defined at the WPF core level, but <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> extends this by implementing <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.BeginStoryboard%2A&gt;</ph> and related members.</source>
          <target state="translated"><bpt id="p1">**</bpt>지원:<ept id="p1">**</ept> WPF 핵심 수준 일부 애니메이션 지원을 이미 정의 하지만 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 구현 하 여이 확장 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.BeginStoryboard%2A&gt;</ph> 및 멤버를 관련 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>As can be seen from the class hierarchy, many <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> classes derive from <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, either directly or through intermediate base classes such as <ph id="ph3">&lt;xref:System.Windows.Controls.Panel&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.Controls.Control&gt;</ph>.</source>
          <target state="translated">클래스 계층 구조에서 볼 수 있듯이 많은 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 클래스에서 파생 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, 직접 또는 중간 기본 클래스와 같은 <ph id="ph3">&lt;xref:System.Windows.Controls.Panel&gt;</ph> 또는 <ph id="ph4">&lt;xref:System.Windows.Controls.Control&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>If you intend to use <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> as a base class, you might want to first examine the existing derived classes.</source>
          <target state="translated">사용 하려는 경우 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 를 기본 클래스로 하려는 경우 먼저 기존의 파생 된 클래스를 검사 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> provides support for a number of basic scenarios, but also lacks a number of features that are desirable for an "element" in the sense of a building block that you use to create <ph id="ph2">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> in <ph id="ph3">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 다양 한 기본 시나리오에 대 한 지원을 제공 하지만 또한 다양 한 기능을 만드는 데 사용 하는 빌딩 블록의 의미의 "요소"에 대해 적합 하지 않습니다 <ph id="ph2">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> 에서 <ph id="ph3">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>For instance, a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> does not define any true content model; <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> as a base class does not define a property that can create <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> child elements.</source>
          <target state="translated">예를 들어, 한 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> ;는 true 콘텐츠 모델을 정의 하지 않습니다 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 기본 클래스를 만들 수 있는 속성을 정의 하지 않습니다 대로 <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 자식 요소입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.FrameworkElement">
          <source>In particular, you might want to look at <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>.</source>
          <target state="translated">확인 하려는 특히 <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>Gets the rendered height of this element.</source>
          <target state="translated">이 요소의 렌더링된 높이를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>The element's height, as a value in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>.</source>
          <target state="translated">요소의 높이(<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>의 값)입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>The default value is 0 (zero).</source>
          <target state="translated">기본값은 0입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>This property is a calculated value based on other height inputs, and the layout system.</source>
          <target state="translated">이 속성은 다른 높이 입력 레이아웃 시스템에 따라 계산된 된 값입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> that are the basis of the input change.</source>
          <target state="translated">값은 실제 렌더링 단계에 따라 레이아웃 시스템 자체에서 설정 되며와 같은 속성의 설정 값 뒤에 약간 지연 될 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> 입력된 변경 기준인 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>Because <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</ph> is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</ph> 수 계산된 된 값이 있을 수 여러 또는 점증적 변경 하 여 다양 한 작업의 결과로 레이아웃 시스템에서 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.</source>
          <target state="translated">레이아웃 시스템은 자식 요소에 필요한 측정 공간, 부모 요소에 의한 제약 조건 등을 계산할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>Although you cannot set this property from <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, you can base a <ph id="ph2">&lt;xref:System.Windows.Trigger&gt;</ph> upon its value in a style.</source>
          <target state="translated">이 속성을 설정할 수 없어도 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, 기준을 지정할 수 있습니다는 <ph id="ph2">&lt;xref:System.Windows.Trigger&gt;</ph> 스타일의 해당 값에 있습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualHeight">
          <source>The following example displays various height properties.</source>
          <target state="translated">다음 예제에서는 다양 한 높이 속성을 표시합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.ActualHeightProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ActualHeight" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ActualHeight" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>Gets the rendered width of this element.</source>
          <target state="translated">이 요소의 렌더링된 너비를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>The element's width, as a value in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>.</source>
          <target state="translated">요소의 너비(<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>의 값)입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>The default value is 0 (zero).</source>
          <target state="translated">기본값은 0입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>This property is a calculated value based on other width inputs, and the layout system.</source>
          <target state="translated">이 속성은 다른 너비 입력 레이아웃 시스템에 따라 계산된 된 값입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> that are the basis of the input change.</source>
          <target state="translated">값은 실제 렌더링 단계에 따라 레이아웃 시스템 자체에서 설정 되며와 같은 속성의 설정 값 뒤에 약간 지연 될 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> 입력된 변경 기준인 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>Because <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph> is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph> 수 계산된 된 값이 있을 수 여러 또는 점증적 변경 하 여 다양 한 작업의 결과로 레이아웃 시스템에서 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.</source>
          <target state="translated">레이아웃 시스템은 자식 요소에 필요한 측정 공간, 부모 요소에 의한 제약 조건 등을 계산할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>Although you cannot set this property from <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, you can base a <ph id="ph2">&lt;xref:System.Windows.Trigger&gt;</ph> upon its value in a style.</source>
          <target state="translated">이 속성을 설정할 수 없어도 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, 기준을 지정할 수 있습니다는 <ph id="ph2">&lt;xref:System.Windows.Trigger&gt;</ph> 스타일의 해당 값에 있습니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ActualWidth">
          <source>The following example displays various width properties.</source>
          <target state="translated">다음 예제에서는 다양 한 너비 속성을 표시합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.ActualWidthProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ActualWidth" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ActualWidth" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source>Child element to be added.</source>
          <target state="translated">추가할 자식 요소입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source>Adds the provided object to the logical tree of this element.</source>
          <target state="translated">제공된 개체를 이 요소의 논리적 트리에 추가합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source>Use this method for the implementation of collections on objects that represent logical child elements of an element.</source>
          <target state="translated">이 메서드는 요소의 논리 자식 요소를 나타내는 개체에는 컬렉션의 구현에 사용 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source>Collection maintenance for child element collections might be done in property getters or setters, class handling of Changed events, constructors, or within the collection types themselves.</source>
          <target state="translated">속성 getter 또는 setter, Changed 이벤트, 생성자의 또는 컬렉션 형식 자체 내에서 처리 하는 클래스에서 자식 요소 컬렉션에 대 한 컬렉션 유지 관리를 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source>For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the content models for available base control classes are appropriate for your control scenario.</source>
          <target state="translated">컨트롤 작성자에 대 한이 수준에서 논리 트리를 조작 하지 않는 것이 좋을 사용 가능한 기본 컨트롤 클래스에 대 한 콘텐츠 모델의 제어 시나리오에 적합 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source>Consider subclassing at the level of <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Controls.HeaderedItemsControl&gt;</ph>.</source>
          <target state="translated">수준에서 서브클래싱 고려 <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Windows.Controls.HeaderedItemsControl&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source>These classes provide a content model with particular enforcement of logical tree child elements through dedicated <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph>, as well as support for other features typically desirable in a <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> control such as styling through templates.</source>
          <target state="translated">이러한 클래스는 특정 적용 전용 통해 논리적 트리에서 자식 요소의 콘텐츠 모델을 제공 <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph>에서 일반적으로 사용 가능한 다른 기능에 대 한 지원 및는 <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 스타일 템플릿을 통해 같은 제어 합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source>For more information on how to use <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LogicalChildren%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.AddLogicalChild%2A&gt;</ph>, see <bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](~/docs/framework/wpf/advanced/trees-in-wpf.md)</ept>.</source>
          <target state="translated">사용 하는 방법에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LogicalChildren%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.AddLogicalChild%2A&gt;</ph>, 참조 <bpt id="p1">[</bpt>In WPF<ept id="p1">](~/docs/framework/wpf/advanced/trees-in-wpf.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.AddLogicalChild%2A&gt;</ph> may throw an exception if called at a time when the logical tree is being iterated by another process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.AddLogicalChild%2A&gt;</ph> 논리적 트리를 다른 프로세스에 의해 반복 중일 때 한 번에 메서드를 호출 하면 예외가 throw 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source>The following example implements a <ph id="ph1">`Child`</ph> property on a custom <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that does its own visual layer implementation.</source>
          <target state="translated">다음 예제에서는 구현 된 <ph id="ph1">`Child`</ph> 사용자 지정 속성 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 자체 시각적 계층 구현을 수행 하는 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source>The property setter is designed so that if the value changes, the old value is removed from the logical tree, as well as a class-specific visual collection.</source>
          <target state="translated">속성 setter는 이전 값으로 논리적 트리에서 클래스별 시각적 컬렉션에서 제거 값이 변경 되도록 설계 되었습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)">
          <source>The property value is cached, and then the new value is added to both the logical tree and the custom visual collection.</source>
          <target state="translated">속성 값이 캐시 되 고 새 값 논리 트리와 사용자 지정 시각적 컬렉션에 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ApplyTemplate">
          <source>Builds the current template's visual tree if necessary, and returns a value that indicates whether the visual tree was rebuilt by this call.</source>
          <target state="translated">필요한 경우 현재 템플릿의 시각적 트리를 작성하고 시각적 트리가 이 호출로 다시 작성되었는지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ApplyTemplate">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if visuals were added to the tree; returns <ph id="ph2">&lt;see langword="false" /&gt;</ph> otherwise.</source>
          <target state="translated">시각적 개체가 트리에 추가되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ApplyTemplate">
          <source>Applications can call this method to guarantee that the visual tree of an element is complete.</source>
          <target state="translated">응용 프로그램 프로그램 요소의 시각적 트리에 완료 되었음을 보장 하기 위해이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ApplyTemplate">
          <source>This guarantee step might be necessary if code will be checking the child elements in the tree.</source>
          <target state="translated">이 보장 단계 코드는 트리의 자식 요소를 확인 하는 경우에 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ApplyTemplate">
          <source>For typical element logic within applications, calling <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ApplyTemplate%2A&gt;</ph> is not necessary, because templates will be applied to elements at an appropriate point in their lifetimes automatically.</source>
          <target state="translated">호출 응용 프로그램 내에서 일반 요소 논리 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ApplyTemplate%2A&gt;</ph> 서식 파일에 적용 됩니다 적절 한 시점에 있는 요소에서의 수명을 자동으로 하므로 필요 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ApplyTemplate">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ApplyTemplate%2A&gt;</ph> is called on every Measure pass by the WPF framework-level layout system.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ApplyTemplate%2A&gt;</ph> 모든 측정값에서 호출 되는 WPF 프레임 워크 수준 레이아웃 시스템으로 전달 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ApplyTemplate">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived classes can use the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.OnApplyTemplate%2A&gt;</ph> class handler to be notified of cases where this method was called explicitly, or by the layout system.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 파생된 클래스가 사용할 수는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.OnApplyTemplate%2A&gt;</ph> 클래스 처리기의 경우가이 메서드가 명시적으로 호출 된 또는 레이아웃 시스템에서 알림을 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ApplyTemplate">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnApplyTemplate%2A&gt;</ph> is called after the template is completely generated and attached to the logical tree.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnApplyTemplate%2A&gt;</ph> 서식 파일 완전히 생성 되 고 논리적 트리에서에 연결 된 후 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)">
          <source>The final area within the parent that this element should use to arrange itself and its children.</source>
          <target state="translated">이 요소에서 자신과 자식을 정렬하는 데 사용해야 하는 부모 내의 마지막 영역입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)">
          <source>Implements <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /&gt;</ph> (defined as virtual in <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>) and seals the implementation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /&gt;</ph>(<ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>에 가상 항목으로 정의되어 있음)를 구현하고 구현을 봉인합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)">
          <source>This method is sealed.</source>
          <target state="translated">이 메서드는 봉인 클래스입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)">
          <source>In order to override the logic in your custom element specifically for the arrange pass of element layout, your <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class must override <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>.</source>
          <target state="translated">요소 레이아웃의 정렬 단계에 맞게 사용자 지정 요소에 논리를 재정의 하려면 사용자 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 파생된 클래스에서 재정의 해야 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)">
          <source>The final area within the parent that this element should use to arrange itself and its children.</source>
          <target state="translated">이 요소에서 자신과 자식을 정렬하는 데 사용해야 하는 부모 내의 마지막 영역입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)">
          <source>When overridden in a derived class, positions child elements and determines a size for a <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> derived class.</source>
          <target state="translated">파생 클래스에서 재정의하는 경우 자식 요소를 배치하고 <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> 파생 클래스에 대한 크기를 결정합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)">
          <source>The actual size used.</source>
          <target state="translated">사용되는 실제 크기입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)">
          <source>Control authors who want to customize the arrange pass of layout processing should override this method.</source>
          <target state="translated">번 처리 레이아웃의 정렬 단계를 사용자 지정 하려면이 메서드를 재정의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)">
          <source>The implementation pattern should call <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /&gt;</ph> on each visible child element, and pass the final desired size for each child element as the <ph id="ph2">&lt;paramref name="finalRect" /&gt;</ph> parameter.</source>
          <target state="translated">구현 패턴 호출 해야 <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /&gt;</ph> 각 표시 되는 자식 요소 및 원하는 최종 크기가 각 자식 요소에 대 한 단계는 <ph id="ph2">&lt;paramref name="finalRect" /&gt;</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)">
          <source>Parent elements should call <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /&gt;</ph> on each child, otherwise the child elements will not be rendered.</source>
          <target state="translated">부모 요소를 호출 해야 <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /&gt;</ph> 각 자식에 그렇지 않은 경우 자식 요소 렌더링 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)">
          <source>Many derived classes offer implementations of this method.</source>
          <target state="translated">대부분의 파생된 클래스에는이 메서드의 구현을 제공합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)">
          <source>Prominent ones include: <ph id="ph1">&lt;see cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.Windows.Controls.Page.ArrangeOverride(System.Windows.Size)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.Windows.Controls.Control.ArrangeOverride(System.Windows.Size)" /&gt;</ph>.</source>
          <target state="translated">대표적인: <ph id="ph1">&lt;see cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.Windows.Controls.Page.ArrangeOverride(System.Windows.Size)" /&gt;</ph> 및 <ph id="ph3">&lt;see cref="M:System.Windows.Controls.Control.ArrangeOverride(System.Windows.Size)" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BeginInit">
          <source>Starts the initialization process for this element.</source>
          <target state="translated">이 요소의 초기화 프로세스를 시작합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginInit">
          <source>You can call this method on individual elements if you are adjusting them in ways that do not yet expose or connect the element to any element tree.</source>
          <target state="translated">아직 노출 하거나 요소 요소 트리에 있는 방식으로 조정 하는 경우 개별 요소에서이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginInit">
          <source>For instance, you might have created a new <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, but have not yet attached it to any logical tree.</source>
          <target state="translated">예를 들어, 만든 새 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, 논리적 트리에 아직 연결 되지 했으며 하지만 합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginInit">
          <source>Or, the logical tree where your element is a child element within it might not be connected to a window or page of the application.</source>
          <target state="translated">또는 논리적 트리 요소가 자식 요소 내 창 또는 응용 프로그램의 페이지에 연결 하지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginInit">
          <source>Implement this method to provide special handling that should happen before your element is initialized during the element loading process.</source>
          <target state="translated">요소를 로드 프로세스 중 요소를 초기화 하기 전에 발생 해야 하는 특수 처리를 제공 하려면이 메서드를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginInit">
          <source>Your implementation should call the base implementation, because the base (default) implementation sets some internal flags to keep track of initialization.</source>
          <target state="translated">(기본값) 기본 구현을 초기화를 추적 하기 위해 일부 내부 플래그를 설정 하기 때문에 구현에서 기본 구현을 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginInit">
          <source>One possible implementation is to use this method as a hook into your own private class initialization routines that are not already enabled by constructors.</source>
          <target state="translated">가능한 한 구현을 한 후크로 생성자에 의해 이미 활성화 되지 않은 사용자 고유의 개인 클래스 초기화 루틴에이 메서드를 사용 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginInit">
          <source>The base implementation will throw an exception if <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.BeginInit" /&gt;</ph> is called more than one time on the same element prior to <ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.EndInit" /&gt;</ph> being called.</source>
          <target state="translated">기본 구현 하는 경우 예외가 throw 됩니다 <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.BeginInit" /&gt;</ph> 라고 여러 번 같은 요소에 전에 <ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.EndInit" /&gt;</ph> 호출 합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="T:System.Windows.FrameworkElement">
          <source>Begins the sequence of actions contained in the provided storyboard.</source>
          <target state="translated">제공된 Storyboard에 포함된 작업 시퀀스를 시작합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)">
          <source>The storyboard to begin.</source>
          <target state="translated">시작할 Storyboard입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)">
          <source>Begins the sequence of actions that are contained in the provided storyboard.</source>
          <target state="translated">제공된 Storyboard에 포함된 작업 시퀀스를 시작합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)">
          <source>Most typical animation scenarios do not use this method.</source>
          <target state="translated">애니메이션의 가장 일반적인 시나리오는이 메서드를 사용 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)">
          <source>Typically, you create the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph> element in markup, and then you place these as the <ph id="ph3">&lt;xref:System.Windows.EventTrigger&gt;</ph> content on an element.</source>
          <target state="translated">만들 때는 일반적으로 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph> 태그 및 다음에 요소 배치는 <ph id="ph3">&lt;xref:System.Windows.EventTrigger&gt;</ph> 요소에 콘텐츠입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)">
          <source>When triggered by the event, the animation then runs.</source>
          <target state="translated">이벤트에 의해 트리거될 때 애니메이션 다음 실행 합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)">
          <source>Most of the control aspects of a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> can be addressed by properties that are exposed in markup.</source>
          <target state="translated">대부분의 컨트롤 측면의는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> 태그에서 노출 된 속성을 통해 해결할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)">
          <source>For the signatures that do not use the <ph id="ph1">`isControllable`</ph>, parameter, or when that parameter is specified <ph id="ph2">`false`</ph>, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</source>
          <target state="translated">사용 하지 않는 서명을 위한는 <ph id="ph1">`isControllable`</ph>, 매개 변수를 해당 매개 변수에 지정 된 경우 또는 <ph id="ph2">`false`</ph>, 연결 된 애니메이션 시간 표시 막대 clock은 애니메이션이 "전체" 기간의 끝에 도달 하는 즉시 제거 됩니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)">
          <source>Therefore the animation cannot be restarted after running once.</source>
          <target state="translated">따라서 애니메이션을 한 번 실행 한 후에 다시 시작할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)">
          <source>Controlling an animation also requires that the storyboard have an <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](~/docs/framework/xaml-services/x-name-directive.md)</ept> or be accessible by reference in code.</source>
          <target state="translated">애니메이션을 제어 또한 있어야 스토리 보드는 <bpt id="p1">[</bpt>X:name 지시문<ept id="p1">](~/docs/framework/xaml-services/x-name-directive.md)</ept> 코드에서 참조로 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)">
          <source>The following example retrieves a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> from resources, and then runs that <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> when an internal event is class handled.</source>
          <target state="translated">다음 예제에서는 검색는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> 리소스에서 실행 하 고 <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> 내부 이벤트 클래스에서 처리는 하는 경우.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The storyboard to begin.</source>
          <target state="translated">시작할 Storyboard입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</source>
          <target state="translated">Storyboard에 설명되어 있는 속성에 이미 애니메이션이 적용되어 있는 경우에 사용할 동작을 설명하는 열거형의 값입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Begins the sequence of actions contained in the provided storyboard, with options specified for what should happen if the property is already animated.</source>
          <target state="translated">속성에 이미 애니메이션이 적용되어 있는 경우 수행할 작업에 대해 지정된 옵션을 사용하여 제공된 Storyboard에 포함된 작업 시퀀스를 시작합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Most typical animation scenarios do not use this method.</source>
          <target state="translated">애니메이션의 가장 일반적인 시나리오는이 메서드를 사용 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Typically, you create the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph> element in markup, and then you place these as the <ph id="ph3">&lt;xref:System.Windows.EventTrigger&gt;</ph> content on an element.</source>
          <target state="translated">만들 때는 일반적으로 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph> 태그 및 다음에 요소 배치는 <ph id="ph3">&lt;xref:System.Windows.EventTrigger&gt;</ph> 요소에 콘텐츠입니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>When triggered by the event, the animation then runs.</source>
          <target state="translated">이벤트에 의해 트리거될 때 애니메이션 다음 실행 합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Most of the control aspects of a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> can be addressed by properties that are exposed in markup.</source>
          <target state="translated">대부분의 컨트롤 측면의는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> 태그에서 노출 된 속성을 통해 해결할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>For the signatures that do not use the <ph id="ph1">`isControllable`</ph>, parameter, or when that parameter is specified <ph id="ph2">`false`</ph>, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</source>
          <target state="translated">사용 하지 않는 서명을 위한는 <ph id="ph1">`isControllable`</ph>, 매개 변수를 해당 매개 변수에 지정 된 경우 또는 <ph id="ph2">`false`</ph>, 연결 된 애니메이션 시간 표시 막대 clock은 애니메이션이 "전체" 기간의 끝에 도달 하는 즉시 제거 됩니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Therefore the animation cannot be restarted after running once.</source>
          <target state="translated">따라서 애니메이션을 한 번 실행 한 후에 다시 시작할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Controlling an animation also requires that the storyboard have an <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](~/docs/framework/xaml-services/x-name-directive.md)</ept> or be accessible by reference in code.</source>
          <target state="translated">애니메이션을 제어 또한 있어야 스토리 보드는 <bpt id="p1">[</bpt>X:name 지시문<ept id="p1">](~/docs/framework/xaml-services/x-name-directive.md)</ept> 코드에서 참조로 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Handoff behavior can be specified as an attribute of <ph id="ph1">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph>.</source>
          <target state="translated">전달 동작의 특성으로 지정할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Using the Compose HandoffBehavior</source>
          <target state="translated">사용 하 여 HandoffBehavior 작성</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>When you apply a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> to a property by using the <ph id="ph4">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph> <ph id="ph5">&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;</ph>, any <ph id="ph6">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.</source>
          <target state="translated">적용 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;</ph>, 또는 <ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> 를 사용 하 여 속성에는 <ph id="ph4">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph> <ph id="ph5">&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;</ph>있으면 모든 <ph id="ph6">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> 이전에 해당 속성과 연관 된 개체를 계속 시스템 리소스를 사용 하 고 타이밍 시스템 않습니다 시계를 자동으로 제거 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>To avoid performance issues when you apply a large number of clocks by using <ph id="ph1">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph>, you should remove composing clocks from the animated property after they complete.</source>
          <target state="translated">사용 하 여 많은 수의 clock 적용할 때 성능 문제를 방지 하려면 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph>를 완성 한 후 속성에서 구성 중인 clock를 제거 해야 합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>There are several ways to remove a clock:</source>
          <target state="translated">클록을 제거 하는 방법은 여러 가지가 있습니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>To remove all clocks from a property, use the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt;</ph> method of the animated object.</source>
          <target state="translated">에서 제거 하려면 모든 clock 속성을 사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt;</ph> 애니메이션된 된 개체의 메서드.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Specify the property being animated as the first parameter, and <ph id="ph1">`null`</ph> as the second.</source>
          <target state="translated">첫 번째 매개 변수로 애니메이션 효과가 적용 되는 속성을 지정 하 고 <ph id="ph1">`null`</ph> 를 두 번째입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>This removes all animation clocks from the property.</source>
          <target state="translated">그러면 모든 애니메이션 클록 속성에서 제거 됩니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>To remove a specific <ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> from a list of clocks, use the <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> to retrieve a <ph id="ph4">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>, then call the <ph id="ph5">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph> method of the <ph id="ph6">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>.</source>
          <target state="translated">특정을 제거 하려면 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> 클록 목록에서 사용 하 여는 <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph> 속성의는 <ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> 검색 하는 <ph id="ph4">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>, 호출는 <ph id="ph5">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph> 의 메서드는 <ph id="ph6">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>This is typically done in the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph> event handler for a clock.</source>
          <target state="translated">이 일반적으로 수행 된 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph> 클록에 대 한 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Note that only root clocks can be controlled by a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>; the <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph> property of a child clock returns <ph id="ph3">`null`</ph>.</source>
          <target state="translated">유일한 루트 클록을 제어할 수 있는 참고는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>; <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph> 자식 클록의 속성을 반환 <ph id="ph3">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Note also that the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph> event is not raised if the effective duration of the clock is forever.</source>
          <target state="translated">또한는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph> 클록의 유효 기간이 무제한 인 경우 이벤트가 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>In that case, the user must determine when to call <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph>.</source>
          <target state="translated">사용자를 호출 하는 시기를 결정 해야 경우 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>This is primarily an issue for animations on objects that have a long lifetime.</source>
          <target state="translated">이것은 주로 수명이 긴 개체에 대한 애니메이션에서 문제가 됩니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>When an object is garbage collected, its clocks are also disconnected and garbage collected.</source>
          <target state="translated">개체가 가비지 수집 된 경우 해당 clock도 연결이 끊어지고 가비지 수집.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>For more information about clock objects, see <bpt id="p1">[</bpt>Animation and Timing System Overview<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)</ept>.</source>
          <target state="translated">클록 개체에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>애니메이션 및 타이밍 시스템 개요<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The following example retrieves a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> from resources, and then runs that <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> when an internal event is class handled.</source>
          <target state="translated">다음 예제에서는 검색는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> 리소스에서 실행 하 고 <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> 내부 이벤트 클래스에서 처리는 하는 경우.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>The storyboard to begin.</source>
          <target state="translated">시작할 Storyboard입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</source>
          <target state="translated">Storyboard에 설명되어 있는 속성에 이미 애니메이션이 적용되어 있는 경우에 사용할 동작을 설명하는 열거형의 값입니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Declares whether the animation is controllable (can be paused) after it is started.</source>
          <target state="translated">애니메이션을 시작한 후 제어(일시 중지)할 수 있는지 여부를 선언합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Begins the sequence of actions contained in the provided storyboard, with specified state for control of the animation after it is started.</source>
          <target state="translated">애니메이션이 시작된 후 제어하기 위한 지정된 상태를 사용하여 제공된 Storyboard에 포함된 작업 시퀀스를 시작합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Most typical animation scenarios do not use this method.</source>
          <target state="translated">애니메이션의 가장 일반적인 시나리오는이 메서드를 사용 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Typically, you create the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph> element in markup, and then you place these as the <ph id="ph3">&lt;xref:System.Windows.EventTrigger&gt;</ph> content on an element.</source>
          <target state="translated">만들 때는 일반적으로 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph> 태그 및 다음에 요소 배치는 <ph id="ph3">&lt;xref:System.Windows.EventTrigger&gt;</ph> 요소에 콘텐츠입니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>When triggered by the event, the animation then runs.</source>
          <target state="translated">이벤트에 의해 트리거될 때 애니메이션 다음 실행 합니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Most of the control aspects of a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> can be addressed by properties that are exposed in markup.</source>
          <target state="translated">대부분의 컨트롤 측면의는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> 태그에서 노출 된 속성을 통해 해결할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>For the signatures that do not use the <ph id="ph1">`isControllable`</ph>, parameter, or when that parameter is specified <ph id="ph2">`false`</ph>, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</source>
          <target state="translated">사용 하지 않는 서명을 위한는 <ph id="ph1">`isControllable`</ph>, 매개 변수를 해당 매개 변수에 지정 된 경우 또는 <ph id="ph2">`false`</ph>, 연결 된 애니메이션 시간 표시 막대 clock은 애니메이션이 "전체" 기간의 끝에 도달 하는 즉시 제거 됩니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Therefore the animation cannot be restarted after running once.</source>
          <target state="translated">따라서 애니메이션을 한 번 실행 한 후에 다시 시작할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Controlling an animation also requires that the storyboard have an <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](~/docs/framework/xaml-services/x-name-directive.md)</ept> or be accessible by reference in code.</source>
          <target state="translated">애니메이션을 제어 또한 있어야 스토리 보드는 <bpt id="p1">[</bpt>X:name 지시문<ept id="p1">](~/docs/framework/xaml-services/x-name-directive.md)</ept> 코드에서 참조로 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Handoff behavior can be specified as an attribute of <ph id="ph1">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph>.</source>
          <target state="translated">전달 동작의 특성으로 지정할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Using the Compose HandoffBehavior</source>
          <target state="translated">사용 하 여 HandoffBehavior 작성</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>When you apply a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> to a property by using the <ph id="ph4">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph> <ph id="ph5">&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;</ph>, any <ph id="ph6">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.</source>
          <target state="translated">적용 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;</ph>, 또는 <ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> 를 사용 하 여 속성에는 <ph id="ph4">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph> <ph id="ph5">&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;</ph>있으면 모든 <ph id="ph6">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> 이전에 해당 속성과 연관 된 개체를 계속 시스템 리소스를 사용 하 고 타이밍 시스템 않습니다 시계를 자동으로 제거 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>To avoid performance issues when you apply a large number of clocks by using <ph id="ph1">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph>, you should remove composing clocks from the animated property after they complete.</source>
          <target state="translated">사용 하 여 많은 수의 clock 적용할 때 성능 문제를 방지 하려면 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.HandoffBehavior.Compose&gt;</ph>를 완성 한 후 속성에서 구성 중인 clock를 제거 해야 합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>There are several ways to remove a clock:</source>
          <target state="translated">클록을 제거 하는 방법은 여러 가지가 있습니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>To remove all clocks from a property, use the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt;</ph> method of the animated object.</source>
          <target state="translated">에서 제거 하려면 모든 clock 속성을 사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt;</ph> 애니메이션된 된 개체의 메서드.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Specify the property being animated as the first parameter, and <ph id="ph1">`null`</ph> as the second.</source>
          <target state="translated">첫 번째 매개 변수로 애니메이션 효과가 적용 되는 속성을 지정 하 고 <ph id="ph1">`null`</ph> 를 두 번째입니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>This removes all animation clocks from the property.</source>
          <target state="translated">그러면 모든 애니메이션 클록 속성에서 제거 됩니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>To remove a specific <ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> from a list of clocks, use the <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> to retrieve a <ph id="ph4">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>, then call the <ph id="ph5">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph> method of the <ph id="ph6">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>.</source>
          <target state="translated">특정을 제거 하려면 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> 클록 목록에서 사용 하 여는 <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph> 속성의는 <ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> 검색 하는 <ph id="ph4">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>, 호출는 <ph id="ph5">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph> 의 메서드는 <ph id="ph6">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>This is typically done in the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph> event handler for a clock.</source>
          <target state="translated">이 일반적으로 수행 된 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph> 클록에 대 한 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Note that only root clocks can be controlled by a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>; the <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph> property of a child clock returns <ph id="ph3">`null`</ph>.</source>
          <target state="translated">유일한 루트 클록을 제어할 수 있는 참고는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>; <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph> 자식 클록의 속성을 반환 <ph id="ph3">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>Note also that the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph> event is not raised if the effective duration of the clock is forever.</source>
          <target state="translated">또한는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph> 클록의 유효 기간이 무제한 인 경우 이벤트가 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>In that case, the user must determine when to call <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph>.</source>
          <target state="translated">사용자를 호출 하는 시기를 결정 해야 경우 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>This is primarily an issue for animations on objects that have a long lifetime.</source>
          <target state="translated">이것은 주로 수명이 긴 개체에 대한 애니메이션에서 문제가 됩니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>When an object is garbage collected, its clocks are also disconnected and garbage collected.</source>
          <target state="translated">개체가 가비지 수집 된 경우 해당 clock도 연결이 끊어지고 가비지 수집.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
          <source>For more information about clock objects, see <bpt id="p1">[</bpt>Animation and Timing System Overview<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)</ept>.</source>
          <target state="translated">클록 개체에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>애니메이션 및 타이밍 시스템 개요<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Windows.Data.BindingGroup" /&gt;</ph> that is used for the element.</source>
          <target state="translated">요소에 사용되는 <ph id="ph1">&lt;see cref="T:System.Windows.Data.BindingGroup" /&gt;</ph>을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Data.BindingGroup" /&gt;</ph> that is used for the element.</source>
          <target state="translated">요소에 사용되는 <ph id="ph1">&lt;see cref="T:System.Windows.Data.BindingGroup" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> can be used to validate the values of multiple properties of an object.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> 개체의 여러 속성 값의 유효성 검사를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>For example, suppose that an application prompts the user to enter an address and then populates an object of type <ph id="ph1">`Address`</ph>, which has the properties <ph id="ph2">`Street`</ph>, <ph id="ph3">`City`</ph>, <ph id="ph4">`ZipCode`</ph>, and <ph id="ph5">`Country`</ph>, with the values that the user provided.</source>
          <target state="translated">예를 들어 응용 프로그램 주소를 입력 하 라는 메시지를 표시 하 고 다음 유형의 개체를 채웁니다 <ph id="ph1">`Address`</ph>, 속성이 있는 <ph id="ph2">`Street`</ph>, <ph id="ph3">`City`</ph>, <ph id="ph4">`ZipCode`</ph>, 및 <ph id="ph5">`Country`</ph>, 값을 사용 하는 사용자 제공 됩니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>The application has a panel that contains four <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> controls, each of which is bound to one of the object’s properties.</source>
          <target state="translated">응용 프로그램에 4 개를 포함 하는 패널 <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> 개체의 속성 중 하나에 바인딩되는 컨트롤입니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>You can use a <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> in a <ph id="ph2">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> to validate the <ph id="ph3">`Address`</ph> object.</source>
          <target state="translated">사용할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> 유효성을 검사 하 여 <ph id="ph3">`Address`</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>For example, the <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> can ensure that the zip code is valid for the country of the address.</source>
          <target state="translated">예를 들어는 <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> 우편 번호 주소 국가 대 한 유효한 되는지 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>Child elements inherit the <ph id="ph1">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> from their parent elements, just as with any other inheritable property.</source>
          <target state="translated">자식 요소를 상속 된 <ph id="ph1">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> 다른 상속 가능한 속성 경우와 마찬가지로, 부모 요소 로부터 합니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>Metadata properties set to <bpt id="p1">**</bpt>true<ept id="p1">**</ept></source>
          <target state="translated">메타 데이터 속성이 <bpt id="p1">**</bpt>true<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>The following examples are part of an application that checks whether the user has set the properties of two objects to equal values.</source>
          <target state="translated">다음 예제는 사용자가을 동일한 값으로 두 개체의 속성을 설정 하는지 여부를 확인 하는 응용 프로그램의 일부입니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>The first example creates two <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> controls, each of which is bound to a different data source.</source>
          <target state="translated">첫 번째 예에서는 두 개의 <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> 다른 데이터 소스에 바인딩된 각각 컨트롤입니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> has a <ph id="ph2">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> that contains a <ph id="ph3">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> that checks that the two strings are equal.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> 를 포함 하는 <ph id="ph3">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> 두 문자열이 같은지를 확인 하 합니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>The following example shows the <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> that the previous example uses.</source>
          <target state="translated">다음 예제와 <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> 이전 예제에서 사용 하 합니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>In the <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule.Validate%2A&gt;</ph> method override, the example gets each source object from the <ph id="ph2">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> and checks whether the properties of the objects are equal.</source>
          <target state="translated">에 <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule.Validate%2A&gt;</ph> 메서드 재정의 예제에서 각 원본 개체를 가져오고는 <ph id="ph2">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> 개체의 속성이 같은지 여부를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>To invoke the <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph>, call the <ph id="ph2">&lt;xref:System.Windows.Data.BindingGroup.UpdateSources%2A&gt;</ph> method.</source>
          <target state="translated">호출 하는 <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph>, 호출 된 <ph id="ph2">&lt;xref:System.Windows.Data.BindingGroup.UpdateSources%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.BindingGroup">
          <source>The following example calls <ph id="ph1">&lt;xref:System.Windows.Data.BindingGroup.UpdateSources%2A&gt;</ph> when the click event of the button occurs.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Data.BindingGroup.UpdateSources%2A&gt;</ph> 단추의 클릭 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.BindingGroupProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.BindingGroup" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.BindingGroup" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="T:System.Windows.FrameworkElement">
          <source>Attempts to bring this element into view, within any scrollable regions it is contained within.</source>
          <target state="translated">이 요소를 포함된 스크롤 가능한 영역 내에서 뷰에 표시하려고 합니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source>Attempts to bring this element into view, within any scrollable regions it is contained within.</source>
          <target state="translated">이 요소를 포함된 스크롤 가능한 영역 내에서 뷰에 표시하려고 합니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source>By calling this method, you raise a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> event that originates from the current element.</source>
          <target state="translated">이 메서드를 호출 하 여 발생 한 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> 현재 요소에서 시작 된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source>This event is raised so that it can be handled by a <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph>, or a derived or similar class.</source>
          <target state="translated">처리 될 수 있도록이 이벤트는 발생 한 <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph>, 또는 파생 또는 유사한 클래스입니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source>The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> control.</source>
          <target state="translated">예상 되는 동작은 표시 된 이벤트 데이터에서 처리 하는 부모 요소에는 이벤트를 처리 하 고 이벤트 소스에 포함 된 논리를 통해 보기에 표시 되는 <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> 제어 합니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source>Neither the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> event nor the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;</ph> method transmit any information about success or failure, other than that the event is typically marked handled on success.</source>
          <target state="translated">모두는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> 이벤트와 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;</ph> 메서드에 대 한 성공 또는 실패를 이외의 이벤트는 일반적으로 표시 된 처리에 성공 하는 모든 정보를 전송 합니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source>Reasons for failure can include the element settings, such as <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> being some value other than <ph id="ph2">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>.</source>
          <target state="translated">오류 요소 설정에 같은 포함할 수 다음과 같은 이유일 <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> 이외의 일부 값 되 고 <ph id="ph2">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source>If you use the signature that does not specify a <ph id="ph1">`targetRectangle`</ph>, then the entire element size (its <ph id="ph2">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph>) will be made visible.</source>
          <target state="translated">지정 하지 않는 서명을 사용 하는 경우는 <ph id="ph1">`targetRectangle`</ph>, 전체 요소 크기 합니다 (해당 <ph id="ph2">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph>) 볼 수 있게 됩니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source>By calling this method, you potentially will call <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A&gt;</ph> on any parent scrollable area that contains the element.</source>
          <target state="translated">이 메서드를 호출 하면 호출 됩니다 <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A&gt;</ph> 요소가 포함 된 부모 스크롤 가능한 영역에 있습니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source>If this element is not contained in a scrollable area, the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> event is still raised, but there will be no effect because there are no event listeners.</source>
          <target state="translated">이 요소는 스크롤 가능한 영역에 포함 되지 않은 경우는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> 이벤트는 발생 하지만 이벤트 수신기가 때문에 영향을 주지 않습니다 됩니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source>The following example implements a handler for an application navigation event that responds whenever the <ph id="ph1">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]</ph> being navigated to includes a fragment.</source>
          <target state="translated">다음 예제에서는 때마다 응답 하는 응용 프로그램 탐색 이벤트에 대 한 처리기를 구현 하는 <ph id="ph1">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]</ph> 조각에 포함 되어 탐색 중인 합니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source>The fragment is named in the <ph id="ph1">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]</ph> following the hash sign (#), and the implemented behavior causes the element to scroll into view within the frame.</source>
          <target state="translated">에 조각의 명명는 <ph id="ph1">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]</ph> 해시 기호 다음 (#), 구현 되는 동작으로 인해 요소가 프레임 내에서 뷰로 스크롤할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> request that scrolling behavior in the example.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> 예제에서는 스크롤 동작을 요청 합니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>Specified size of the element that should also be brought into view.</source>
          <target state="translated">뷰에 함께 표시할 요소의 지정된 크기입니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>Attempts to bring the provided region size of this element into view, within any scrollable regions it is contained within.</source>
          <target state="translated">이 요소의 제공된 영역 크기를 요소가 포함된 스크롤 가능 영역 내에서 뷰에 표시하려고 합니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>By calling this method, you raise a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> event that originates from the current element.</source>
          <target state="translated">이 메서드를 호출 하 여 발생 한 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> 현재 요소에서 시작 된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>This event is raised so that it can be handled by a <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph>, or a derived or similar class.</source>
          <target state="translated">처리 될 수 있도록이 이벤트는 발생 한 <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph>, 또는 파생 또는 유사한 클래스입니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> control.</source>
          <target state="translated">예상 되는 동작은 표시 된 이벤트 데이터에서 처리 하는 부모 요소에는 이벤트를 처리 하 고 이벤트 소스에 포함 된 논리를 통해 보기에 표시 되는 <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> 제어 합니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>Neither the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> event nor the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;</ph> method transmit any information about success or failure, other than that the event is typically marked handled on success.</source>
          <target state="translated">모두는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> 이벤트와 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;</ph> 메서드에 대 한 성공 또는 실패를 이외의 이벤트는 일반적으로 표시 된 처리에 성공 하는 모든 정보를 전송 합니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>Reasons for failure can include the element settings, such as <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> being some value other than <ph id="ph2">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>.</source>
          <target state="translated">오류 요소 설정에 같은 포함할 수 다음과 같은 이유일 <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> 이외의 일부 값 되 고 <ph id="ph2">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>If you use the signature that does not specify a <ph id="ph1">`targetRectangle`</ph>, then the entire element size (its <ph id="ph2">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph>) will be made visible.</source>
          <target state="translated">지정 하지 않는 서명을 사용 하는 경우는 <ph id="ph1">`targetRectangle`</ph>, 전체 요소 크기 합니다 (해당 <ph id="ph2">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph>) 볼 수 있게 됩니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>By calling this method, you potentially will call <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A&gt;</ph> on any parent scrollable area that contains the element.</source>
          <target state="translated">이 메서드를 호출 하면 호출 됩니다 <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A&gt;</ph> 요소가 포함 된 부모 스크롤 가능한 영역에 있습니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>If this element is not contained in a scrollable area, the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> event is still raised, but there will be no effect because there are no event listeners.</source>
          <target state="translated">이 요소는 스크롤 가능한 영역에 포함 되지 않은 경우는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> 이벤트는 발생 하지만 이벤트 수신기가 때문에 영향을 주지 않습니다 됩니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>The following example has a large graphic in a constrained scrolling region.</source>
          <target state="translated">다음 예제에서는 제한 된 스크롤 영역에는 큰 그래픽을 있습니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)">
          <source>A button on the page has a handler that scrolls the view to a particular region of the large graphic.</source>
          <target state="translated">페이지의 단추에 큰 그래픽의 특정 영역에 보기를 스크롤 하는 처리기.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.ContextMenu">
          <source>Gets or sets the context menu element that should appear whenever the context menu is requested through <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> from within this element.</source>
          <target state="translated">이 요소 내에서 <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>를 통해 상황에 맞는 메뉴가 요청될 때마다 표시되는 상황에 맞는 메뉴 요소를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ContextMenu">
          <source>The context menu assigned to this element.</source>
          <target state="translated">이 요소에 할당된 상황에 맞는 메뉴입니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ContextMenu">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> itself is a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class, and it is technically possible for <ph id="ph3">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> itself to have a <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> 자체는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 클래스를 파생 하 고이 기술적으로 가능 <ph id="ph3">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> 자체에 <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ContextMenu">
          <source>However, this creates a confusing context menu experience for the user and this practice is not recommended.</source>
          <target state="translated">그러나 이렇게 사용자에 대 한 혼란 스러운 상황에 맞는 메뉴 환경 만들어지고이 방법은 권장 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ContextMenu">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ContextMenu">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ContextMenu">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ContextMenu">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>Occurs just before any context menu on the element is closed.</source>
          <target state="translated">요소의 상황에 맞는 메뉴를 닫기 직전에 발생합니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>To suppress closing context menus, handlers of the event should mark it as handled.</source>
          <target state="translated">닫히지 않도록 하려면 상황에 맞는 메뉴는 이벤트 처리기로 표시 해야 처리.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>To use this event as an <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> in a style, you must reference the underlying service's definition of the event:</source>
          <target state="translated">이 이벤트로 사용 하는 <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> 스타일에서 이벤트의 원본으로 사용 하는 서비스의 정의 참조 해야 합니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>(This usage is required because the event implementation on <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that exposes the underlying service event does not map the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ContextMenuClosing&gt;</ph> identifier such that you can use it as a trigger).</source>
          <target state="translated">(때문에이 사용은 필수에서 이벤트를 구현 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 있는지 노출 기본 서비스 이벤트를 매핑하지 않습니다는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ContextMenuClosing&gt;</ph> 식별자를 이와 같이 사용할 수 있습니다).</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> itself is a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class, but the <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ContextMenuClosing&gt;</ph> event will not be raised by a context menu directly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> 자체는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 파생 클래스를 되지만 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ContextMenuClosing&gt;</ph> 이벤트 발생 하지 것입니다 상황에 맞는 메뉴에서 직접 합니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>Instead, the event is raised from the element that "owns" the context menu as a property and is only raised when a user attempts to close a context menu in the UI.</source>
          <target state="translated">대신,이 이벤트는 속성으로 상황에 맞는 메뉴를 "소유" 하 고는 사용자가 UI의 상황에 맞는 메뉴를 시도할 때만 발생 하는 요소에서 발생 합니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>However it is possible for <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> itself to have a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;</ph> property (a nested context menu).</source>
          <target state="translated">그러나 것이 가능 <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> 자체에 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;</ph> 속성 (중첩 된 상황에 맞는 메뉴).</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>In this case the <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> really does own the nested <ph id="ph2">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> and might raise the event, with the source of the event being the nested context menu.</source>
          <target state="translated">이 경우에 <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> 실제로 소유 하 고 중첩 된 <ph id="ph2">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> 및 중첩 된 상황에 맞는 메뉴 되는 이벤트의 원본과 이벤트를 발생 시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> class itself also has a similar event (<ph id="ph2">&lt;xref:System.Windows.Controls.ContextMenu.Closed&gt;</ph>) but the <ph id="ph3">&lt;xref:System.Windows.Controls.ContextMenu.Closed&gt;</ph> event does not provide you the opportunity to cancel the user action.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> 자체 클래스에 비슷한 이벤트 (<ph id="ph2">&lt;xref:System.Windows.Controls.ContextMenu.Closed&gt;</ph>) 이지만 <ph id="ph3">&lt;xref:System.Windows.Controls.ContextMenu.Closed&gt;</ph> 이벤트는 사용자 작업을 취소할 기회 제공 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuClosing">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.ContextMenuClosingEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ContextMenuClosingEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ContextMenuClosingEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ContextMenuClosingEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ContextMenuClosingEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ContextMenuClosingEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>Occurs when any context menu on the element is opened.</source>
          <target state="translated">요소의 상황에 맞는 메뉴를 열 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>To manually open context menus, handlers of the events should mark the relevant event as handled.</source>
          <target state="translated">상황에 맞는 메뉴를 열어야 하는 처리 된 것으로 이벤트의 처리기 관련 이벤트를 표시 해야 합니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>Otherwise, the existing value of the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;</ph> property will be used to automatically open a context menu.</source>
          <target state="translated">그렇지 않은 경우의 기존 값에서 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;</ph> 를 자동으로 상황에 맞는 메뉴를 열려면 속성을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>Marking the event handled will effectively cancel the default action, and could be an opportunity to reset the value of the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;</ph> property and then open the new <ph id="ph2">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph>.</source>
          <target state="translated">이벤트를 처리 된을 효과적으로 기본 작업을 취소 하 고 수 값을 다시 설정 하는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;</ph> 속성을 열고 새 <ph id="ph2">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>However, there is a timing issue you should be aware of.</source>
          <target state="translated">그러나은 알고 있어야 하는 타이밍 문제입니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>In order to completely replace the context menu through a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ContextMenuOpening&gt;</ph> handler, the initial context menu must not be null / empty.</source>
          <target state="translated">통해 상황에 맞는 메뉴를 완전히 바꾸기 위해는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ContextMenuOpening&gt;</ph> 처리기를 초기 상황에 맞는 메뉴 않아야 null 이거나 비어 있습니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>Alternatively, you might need to handle the event and then manually open a new context menu.</source>
          <target state="translated">또는 이벤트를 처리 한 다음 수동으로 새 상황에 맞는 메뉴를 엽니다. 해야 합니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>For details, see <bpt id="p1">[</bpt>How to: Handle the ContextMenuOpening Event<ept id="p1">](~/docs/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>하는 방법: ContextMenuOpening 이벤트를 처리할<ept id="p1">](~/docs/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>To use this event as an <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> in a style, you must reference the underlying attached event:</source>
          <target state="translated">이 이벤트로 사용 하는 <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> 스타일에서 연결 된 이벤트를 참조 해야 합니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>(This usage is required because the event implementation on <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that exposes the underlying service event does not map the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ContextMenuOpening&gt;</ph> identifier such that you can use it in triggers).</source>
          <target state="translated">(때문에이 사용은 필수에서 이벤트를 구현 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 있는지 노출 기본 서비스 이벤트를 매핑하지 않습니다는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ContextMenuOpening&gt;</ph> 식별자 트리거에서 사용할 수 있도록).</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> itself is a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class, but this event will not be raised from the context menu being opened as a source.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> 자체는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 클래스를 파생 되지만이 이벤트를 원본으로 열려는 상황에 맞는 메뉴에서 발생 하지 것입니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>The event is raised from the element that "owns" the context menu as a property and is only raised when a user attempts to open a context menu in the UI.</source>
          <target state="translated">속성으로 상황에 맞는 메뉴를 "소유" 하 고는 사용자가 UI의 상황에 맞는 메뉴를 열 때만 발생 하는 요소에서 발생 합니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>It is possible for <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> itself to have a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;</ph> property, but you should avoid this scenario (for details, see <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> 자체에 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;</ph> 속성을 하지만이 시나리오를 방지 해야 (세부 정보를 참조 하십시오. <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=nameWithType&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> class itself also has a similar event (<ph id="ph2">&lt;xref:System.Windows.Controls.ContextMenu.Opened&gt;</ph>) but <ph id="ph3">&lt;xref:System.Windows.Controls.ContextMenu.Opened&gt;</ph> does not provide you the opportunity to cancel the user action.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> 자체 클래스에 비슷한 이벤트 (<ph id="ph2">&lt;xref:System.Windows.Controls.ContextMenu.Opened&gt;</ph>) 하지만 <ph id="ph3">&lt;xref:System.Windows.Controls.ContextMenu.Opened&gt;</ph> 사용자 작업을 취소할 기회 제공 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ContextMenuOpening">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.ContextMenuProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ContextMenu" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ContextMenu" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Gets or sets the cursor that displays when the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있을 때 표시되는 커서를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>The cursor to display.</source>
          <target state="translated">표시할 커서입니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>The default value is defined as <ph id="ph1">&lt;see langword="null" /&gt;</ph> per this dependency property.</source>
          <target state="translated">기본값은 이 종속성 속성마다 <ph id="ph1">&lt;see langword="null" /&gt;</ph>로 정의됩니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>However, the practical default at run time will come from a variety of factors.</source>
          <target state="translated">그러나 런타임 시 실제 기본값은 다양한 요소에서 비롯됩니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>When you set this property in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, the <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> processor relies on type conversion for the <ph id="ph3">&lt;xref:System.Windows.Input.Cursor&gt;</ph> class to evaluate the string.</source>
          <target state="translated">이 속성을 설정 하면 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 프로세서 사용에 대 한 형식 변환의 <ph id="ph3">&lt;xref:System.Windows.Input.Cursor&gt;</ph> 문자열을 평가 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>The provided string should evaluate to a <ph id="ph1">&lt;xref:System.Windows.Input.CursorType&gt;</ph> value.</source>
          <target state="translated">제공 된 문자열에 <ph id="ph1">&lt;xref:System.Windows.Input.CursorType&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph> for details.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Whether the cursor as established by this property will or will not display when the mouse pointer is over this element is also dependent on the value of the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ForceCursor%2A&gt;</ph> property.</source>
          <target state="translated">이 속성에서 설정한 커서가 여부 마우스 포인터가이 요소 위에 있을 때 표시 되지 것입니다의 값에 따라 결정 됩니다.는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ForceCursor%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Also, event-related considerations such as an active drag, mouse capture, text editing modes within controls, and so on, will also affect the cursor with higher priority than the value you specify in this property.</source>
          <target state="translated">또한는 활성 끌기, 마우스 캡처, 컨트롤 및 등 내의 텍스트 편집 모드와 같은 이벤트 관련 고려 사항 보다 우선 순위가 높은 사용자가이 속성에 지정한 값 보다 커서를 적용도 됩니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>To revert the behavior of setting this property to the eventual default, set it to <ph id="ph1">`null`</ph> again.</source>
          <target state="translated">최종 기본적으로이 속성을 설정 하는 동작을 되돌리려면로 설정 <ph id="ph1">`null`</ph> 다시 합니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>The <ph id="ph1">`null`</ph> default really means that determination of the practical cursor value is deferred here and should be obtained from elsewhere.</source>
          <target state="translated"><ph id="ph1">`null`</ph> 실제 커서 값의 결정 지연 시키고 다른 곳에서 가져올 기본값인 의미 합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>If presented without programmatic values from any source, the default cursor that is visually over a <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> application will be an arrow.</source>
          <target state="translated">제공 되지 않는 경우 소스에서 프로그래밍 방식으로 값을 기본 커서를 초과 하는 시각적으로 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 응용 프로그램에 화살표가 됩니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>However, the transient cursor changes are not set to the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Cursor%2A&gt;</ph> values of the elements when they are passed over.</source>
          <target state="translated">그러나 일시적인 커서 변경 사항으로 설정 되지 않은 경우는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Cursor%2A&gt;</ph> 를 통해 전달 될 때 요소의 값입니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Cursor%2A&gt;</ph> property will only report non null values in cases where it was actually set, for instance through code or a style.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Cursor%2A&gt;</ph> 속성 합니다만 보고서 null이 아닌 값에 실제로 설정 된, 예를 들어 코드 또는 스타일을 통해의 경우에서.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Each movement of the mouse over a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> application raises a <ph id="ph2">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph> event.</source>
          <target state="translated">각 위로 마우스를 움직일은 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 발생 한 <ph id="ph2">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>The event bubbles, and any element along the route has the opportunity to handle the event and to set the value of the cursor through the arguments of this event.</source>
          <target state="translated">이벤트 버블 및 경로 따라 모든 요소에는 이벤트를 처리 하 고이 이벤트의 인수를 통해 커서의 값을 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>This is the mechanism that produces the visually apparent cursor in most cases.</source>
          <target state="translated">대부분의 경우에서 명백 커서를 생성 하는 메커니즘입니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>If a <ph id="ph1">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph> handler returns a cursor result, then the fact that the event is handled and has a changed value in the arguments takes precedence over the value of the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Cursor%2A&gt;</ph> property at any level, unless <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ForceCursor%2A&gt;</ph> is set.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph> 커서 결과 반환 하는 처리기 이벤트 처리 되 고 인수에서 변경 된 값은 팩트의 값 보다 우선 됩니다는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Cursor%2A&gt;</ph> 모든 수준에서 속성 하지 않는 한 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ForceCursor%2A&gt;</ph> 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>If not are not creating a custom cursor, you typically set this property to a static property value of the <ph id="ph1">&lt;xref:System.Windows.Input.Cursors&gt;</ph> class.</source>
          <target state="translated">사용자 지정 커서를 만드는 경우가, 하는 경우 일반적으로이 속성을 설정 하면의 정적 속성 값은 <ph id="ph1">&lt;xref:System.Windows.Input.Cursors&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Cursor%2A&gt;</ph> in code requires one of the following:</source>
          <target state="translated">설정 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Cursor%2A&gt;</ph> 코드에서 다음 중 하나 필요로 합니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph> constructor to get a <ph id="ph2">&lt;xref:System.Windows.Input.Cursor&gt;</ph> instance.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph> 를 가져오기 위해 생성자는 <ph id="ph2">&lt;xref:System.Windows.Input.Cursor&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Both signatures of the <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph> constructor use streams or files, in anticipation that you are creating the <ph id="ph2">&lt;xref:System.Windows.Input.Cursor&gt;</ph> object for a custom cursor.</source>
          <target state="translated">두 시그니처는 <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph> 생성자에서 만들고 있는 대비 하 여 파일을 사용 하 여는 <ph id="ph2">&lt;xref:System.Windows.Input.Cursor&gt;</ph> 사용자 지정 커서에 대 한 개체입니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Input.CursorConverter&gt;</ph> class and its <ph id="ph2">&lt;xref:System.Windows.Input.CursorConverter.ConvertFrom%2A&gt;</ph> method to specify a cursor by <ph id="ph3">&lt;xref:System.Windows.Input.CursorType&gt;</ph>, or a string that can evaluate to a <ph id="ph4">&lt;xref:System.Windows.Input.CursorType&gt;</ph>, and cast the return to <ph id="ph5">&lt;xref:System.Windows.Input.Cursor&gt;</ph>.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.Input.CursorConverter&gt;</ph> 클래스 및 해당 <ph id="ph2">&lt;xref:System.Windows.Input.CursorConverter.ConvertFrom%2A&gt;</ph> 하 여 커서를 지정 하는 메서드 <ph id="ph3">&lt;xref:System.Windows.Input.CursorType&gt;</ph>, 또는으로 계산 되는 문자열을 <ph id="ph4">&lt;xref:System.Windows.Input.CursorType&gt;</ph>, 돌아가기 캐스팅 하 고 <ph id="ph5">&lt;xref:System.Windows.Input.Cursor&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Setting the <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph> to a custom value is not enabled in partial trust.</source>
          <target state="translated">설정의 <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph> 사용자 지정 값으로 설정 되지 않은 부분 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>For more information on custom cursors, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">사용자 지정 커서에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Cursor">
          <source>The following example shows how to deliberately set the cursor graphic.</source>
          <target state="translated">다음 예에서는 커서 그래픽 설정 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.CursorProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Cursor" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Cursor" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>Gets or sets the data context for an element when it participates in data binding.</source>
          <target state="translated">데이터 바인딩에 참여할 때 요소에 대한 데이터 컨텍스트를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>The object to use as data context.</source>
          <target state="translated">데이터 컨텍스트로 사용할 개체입니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source><bpt id="p1">*</bpt>Data context<ept id="p1">*</ept> is a concept that allows elements to inherit information from their parent elements about the data source that is used for binding, as well as other characteristics of the binding, such as the path.</source>
          <target state="translated"><bpt id="p1">*</bpt>데이터 컨텍스트<ept id="p1">*</ept> 정보 바인딩 뿐만 아니라 경로 같은 바인딩의 다른 특성에 사용 되는 데이터 원본에 대 한 부모 요소 로부터 상속할 수 있도록 하는 개념은 합니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>Data context can be set directly to a <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> object, with the bindings evaluating to properties of that object.</source>
          <target state="translated">데이터 컨텍스트를 직접 설정할 수는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 바인딩 해당 개체의 속성을 사용 하 여 개체입니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>Alternatively, you can set the data context to a <ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider&gt;</ph> object.</source>
          <target state="translated">또는 데이터 컨텍스트 설정할 수는 <ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>This dependency property inherits property values.</source>
          <target state="translated">속성 값이 종속성 속성을 상속 합니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>If there are child elements without other values for <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> established through local values or styles, then the property system will set the value to be the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> value of the nearest parent element with this value assigned.</source>
          <target state="translated">에 대 한 다른 값이 없는 자식 요소가 있으면 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> 속성 시스템이 값을 설정 하는 다음 로컬 값 또는 스타일을 통해 설정 된는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> 이 값이 할당 된 가장 가까운 부모 요소의 값입니다.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>Alternatively, you can use one of the following properties of the <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> class to specify the binding source explicitly: <ph id="ph2">&lt;xref:System.Windows.Data.Binding.ElementName%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Data.Binding.Source%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.Windows.Data.Binding.RelativeSource%2A&gt;</ph>.</source>
          <target state="translated">다음 속성 중 하나를 사용할 수 있습니다 또는 <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> 바인딩 소스를 명시적으로 지정 하려면 클래스: <ph id="ph2">&lt;xref:System.Windows.Data.Binding.ElementName%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Data.Binding.Source%2A&gt;</ph>, 또는 <ph id="ph4">&lt;xref:System.Windows.Data.Binding.RelativeSource%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Specify the Binding Source<ept id="p1">](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>하는 방법: 바인딩 소스를 지정<ept id="p1">](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> is most typically set to as a <ph id="ph3">&lt;xref:System.Windows.Data.Binding&gt;</ph> declaration.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> 은 가장 일반적으로로 설정 된 <ph id="ph3">&lt;xref:System.Windows.Data.Binding&gt;</ph> 선언 합니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>You can use either property element syntax or attribute syntax.</source>
          <target state="translated">속성 요소 구문 또는 특성 구문 중 하나를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>Attribute syntax is shown in the example on this page.</source>
          <target state="translated">특성 구문은이 페이지에 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>You can also use code to set <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph>.</source>
          <target state="translated">설정 하려면 코드를 사용할 수도 있습니다 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> is a bindable property, to facilitate scenarios where one context might be bound to another.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> 한 컨텍스트가 다른에 바인딩하여 있는 시나리오를 용이 하 게 바인딩할 수 있는 속성이입니다.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>However, if you bind to <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph>, be careful to not create circular binding references (do not bind a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> to itself, which is possible to do because of the property value inheritance nature of the <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> property).</source>
          <target state="translated">그러나에 바인딩하는 경우 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph>, 순환 바인딩 참조를 만들지 않도록 주의 해야 (바인딩하지 마십시오는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> 자체에 속성 값 상속 이기 때문에 작업을 수행 하는 지원 되는 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> 속성).</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML 속성 요소 사용</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 특성 사용</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source><bpt id="p1">*</bpt>dataContextObject<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>dataContextObject<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>A directly embedded object that serves as data context for any bindings within the parent element.</source>
          <target state="translated">부모 요소 내에서 모든 바인딩에 대 한 데이터 컨텍스트 역할을 하는 직접 포함 된 개체입니다.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>Typically, this object is a <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> or another <ph id="ph2">&lt;xref:System.Windows.Data.BindingBase&gt;</ph> derived class.</source>
          <target state="translated">이 개체는 일반적으로 <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> 또는 다른 <ph id="ph2">&lt;xref:System.Windows.Data.BindingBase&gt;</ph> 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>Alternatively, raw data of any <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> object type intended for binding may be placed here, with the actual bindings defined later.</source>
          <target state="translated">또는 원시 데이터 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 개체 바인딩 나중에 정의 된 실제 바인딩은 여기서 배치 될 수 있습니다에 사용 되는 형식입니다.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source><bpt id="p1">*</bpt>bindingUsage<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>bindingUsage<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>A binding usage that evaluates to an appropriate data context.</source>
          <target state="translated">적절 한 데이터 컨텍스트로 계산 되는 바인딩 사용 합니다.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>For details, see <bpt id="p1">[</bpt>Binding Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/binding-markup-extension.md)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>Binding 태그 확장<ept id="p1">](~/docs/framework/wpf/advanced/binding-markup-extension.md)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source><bpt id="p1">*</bpt>resourceExtension<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>resourceExtension<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>One of the following:  or .</source>
          <target state="translated">다음 중 하나: 또는 합니다.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>This usage is used when referring to raw data defined as an object in resources.</source>
          <target state="translated">리소스에는 개체로 정의 하는 원시 데이터를 참조할 때 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>See <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>XAML 리소스<ept id="p1">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source><bpt id="p1">*</bpt>contextResourceKey<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>contextResourceKey<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>The key identifier for the object being requested from within a <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>.</source>
          <target state="translated">내에서 요청 된 개체에 대 한 키 식별자는 <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DataContext">
          <source>The following example illustrates how a data context acts on a binding and provides the information that defines the specific values of bound properties.</source>
          <target state="translated">다음 예제에서는 바인딩에 대해 데이터 컨텍스트 작동 하는 방법을 보여 줍니다. 고 바인딩된 속성의 특정 값을 정의 하는 정보를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.DataContextChanged">
          <source>Occurs when the data context for this element changes.</source>
          <target state="translated">이 요소의 데이터 컨텍스트가 변경될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.DataContextChanged">
          <source>For an explanation of data contexts and data binding, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
          <target state="translated">참조에 대 한 데이터 컨텍스트 및 데이터 바인딩에 설명은 <bpt id="p1">[</bpt>데이터 바인딩 개요<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.DataContextChanged">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> for an element changes, all data-bound properties on this element are potentially affected.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> 요소 변경 내용의 경우이 요소에 모든 데이터 바인딩 속성은 영향을 받을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.DataContextChanged">
          <source>This applies to any elements that are child elements of the current element in the logical tree, which inherit the data context, and also the current element itself.</source>
          <target state="translated">이 모든 요소는 데이터 컨텍스트를 상속 하는 현재 요소의 논리적 트리에서 자식 요소를 서로 그리고 현재 요소 자체에 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.DataContextChanged">
          <source>All such existing bindings must re-interpret the new <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> and will reevaluate the binding results.</source>
          <target state="translated">이러한 모든 기존 바인딩은 다시 새 해석 해야 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> 고 바인딩 결과 다시 평가 됩니다.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.DataContextChanged">
          <source>The data binding engine is not deterministic about the order of these reevaluations, relative to the raising of the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContextChanged&gt;</ph> event.</source>
          <target state="translated">데이터 바인딩 엔진의 이러한 재계산이의 발생을 기준으로 순서에 대 한 명확 하지 않은 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContextChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.DataContextChanged">
          <source>The reevaluations can occur before the event, after the event, or in any mixture.</source>
          <target state="translated">혼합 또는 이벤트 이후에 전이나 이벤트 전에 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.DataContextProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.DataContext" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.DataContext" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>Gets or sets the key to use to reference the style for this control, when theme styles are used or defined.</source>
          <target state="translated">테마 스타일을 사용하거나 정의할 때 이 컨트롤에 대한 스타일을 참조하는 데 사용할 키를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>The style key.</source>
          <target state="translated">스타일 키입니다.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>To work correctly as part of theme style lookup, this value is expected to be the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the control being styled.</source>
          <target state="translated">테마 스타일 조회의 일부로 올바르게 사용하려면 이 값은 스타일을 지정하는 컨트롤의 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>이어야 합니다.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>This property is typically not set through any of its direct property accessors.</source>
          <target state="translated">이 속성은 일반적으로 직접 속성 접근자를 통해 설정 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>Instead, you override the type-specific metadata of this dependency property every time you create a new <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class.</source>
          <target state="translated">새로 만들 때마다이 종속성 속성의 유형별 메타 데이터 재정의 대신 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>When you derive a control, call the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph> method against the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty&gt;</ph> identifier, within the static constructor of the control derived class (or equivalent class initialization).</source>
          <target state="translated">컨트롤을 파생 시킬 때 호출의 <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph> 에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty&gt;</ph> 컨트롤의 정적 생성자 내에서 식별자 파생 클래스 (또는 해당 하는 클래스 초기화).</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>A control typically overrides the default value of this property to be its own type, but in some cases could also use a base type for which a style in the theme dictionaries exists.</source>
          <target state="translated">컨트롤은 일반적으로 자체 형식으로이 속성의 기본값을 재정의 하지만 일부 경우에 사용할 수도 스타일 테마 사전에 존재 하는 기본 형식.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>This is only practical if the control templates of the base control entirely define the visual representation of that derived control, and if whatever additional members the derived types expose do not require additional elements as part of the control template.</source>
          <target state="translated">이 기본 컨트롤의 컨트롤 템플릿을 전체 해당 파생된 컨트롤의 시각적 표시를 정의 하 고 파생된 된 형식을 노출 하는 모든 추가 멤버 컨트롤 서식 파일의 일부로 추가 요소를 필요 하지 않은 경우에 유용한.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>If you want your element or control to deliberately not use theme styles, set the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">테마 스타일을 사용 하지 않도록 신중 하 게 컨트롤을 하려는 경우 설정의 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A&gt;</ph> 속성을 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>The following example illustrates the dependency property metadata override usage discussed in Remarks.</source>
          <target state="translated">다음 예제는 설명 부분에 나와 있는 종속성 속성 메타 데이터 재정의 사용입니다.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>This code defines a custom control class <ph id="ph1">`NumericUpDown`</ph> intended to be used from a dedicated control library assembly.</source>
          <target state="translated">이 코드는 사용자 지정 컨트롤 클래스 정의 <ph id="ph1">`NumericUpDown`</ph> 전용된 컨트롤 라이브러리 어셈블리에서 사용 하기에 적합 합니다.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>The illustrated static constructor references some private initialization function, registers a class handler (another common control subclassing scenario; see <bpt id="p1">[</bpt>Marking Routed Events as Handled, and Class Handling<ept id="p1">](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)</ept>) and finally overrides the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DefaultStyleKey%2A&gt;</ph> dependency property metadata on the <ph id="ph2">`NumericUpDown`</ph> class.</source>
          <target state="translated">정적 생성자는 그림에 표시 된 일부 개인 초기화 함수를 참조, 클래스 처리기를 등록 (또 다른 일반적인 컨트롤 서브클래싱 시나리오; 참조 <bpt id="p1">[</bpt>표시 라우트된 이벤트로 클래스를 처리 하 고,<ept id="p1">](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)</ept>) 마지막으로 재정의 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DefaultStyleKey%2A&gt;</ph> 에 종속성 속성 메타 데이터는 <ph id="ph2">`NumericUpDown`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DefaultStyleKey%2A&gt;</ph> always returns its own type as the intended key, which is the convention that the theme style system uses to look up the style for some arbitrary otherwise non-styled control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DefaultStyleKey%2A&gt;</ph> 항상 일부 임의의 스타일이 지정 되지 않은 컨트롤의 스타일을 조회할 테마 스타일 시스템을 사용 하는 규칙의 의도 한 키로 고유한 종류를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.DefaultStyleKey">
          <source>The complete sample also defines the actual control's theme style that is referenced by that key; see <bpt id="p1">[</bpt>NumericUpDown Custom Control with Theme and UI Automation Support Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=160025)</ept>.</source>
          <target state="translated">전체 샘플은 또한; 키에서 참조 하는 실제 컨트롤의 테마 스타일 정의 참조 <bpt id="p1">[</bpt>테마와 UI 자동화 지원 샘플이 있는 NumericUpDown 사용자 지정 컨트롤<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=160025)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.DefaultStyleKeyProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.DefaultStyleKey" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.DefaultStyleKey" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.EndInit">
          <source>Indicates that the initialization process for the element is complete.</source>
          <target state="translated">요소에 대한 초기화 프로세스가 완료되었음을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.EndInit">
          <source>If <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;</ph> was previously called, the base implementation will raise the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> event.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;</ph> 가 이전에 호출, 기본 구현에서 발생 된 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.EndInit">
          <source>Otherwise, if <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;</ph> was not called or it could not be determined whether <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;</ph> was called, <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> is not raised and an exception is thrown instead.</source>
          <target state="translated">그렇지 않은 경우, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;</ph> 호출 되지 않은 것일 수도 되었는지를 확인할 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;</ph> 를 호출 했지만 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> 발생 하지 않습니다 예외가 대신 및 합니다.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.EndInit">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.EndInit" /&gt;</ph> was called without <ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.BeginInit" /&gt;</ph> having previously been called on the element.</source>
          <target state="translated">요소에 대해 이전에 <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.EndInit" /&gt;</ph>를 호출하지 않고 <ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.BeginInit" /&gt;</ph>를 호출한 경우</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.EndInit">
          <source>Implement this method to provide special handling that should happen when your element is initialized during the element loading process.</source>
          <target state="translated">요소를 로드 프로세스 중에 요소가 초기화 될 때 발생 해야 하는 특수 한 처리를 제공 하려면이 메서드를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.EndInit">
          <source>Your implementation should call the base implementation, because the base (default) implementation sets some internal flags to keep track of initialization.</source>
          <target state="translated">(기본값) 기본 구현을 초기화를 추적 하기 위해 일부 내부 플래그를 설정 하기 때문에 구현에서 기본 구현을 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindName(System.String)">
          <source>The name of the requested element.</source>
          <target state="translated">요청한 요소의 이름입니다.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindName(System.String)">
          <source>Finds an element that has the provided identifier name.</source>
          <target state="translated">제공된 식별자 이름의 요소를 찾습니다.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindName(System.String)">
          <source>The requested element.</source>
          <target state="translated">요청한 요소입니다.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindName(System.String)">
          <source>This can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no matching element was found.</source>
          <target state="translated">일치하는 요소를 찾을 수 없으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindName(System.String)">
          <source>If the element has child elements, these child elements are all searched recursively for the requested named element.</source>
          <target state="translated">요소에 자식 요소가 있으면 이러한 자식 요소는 요청 된 명명 된 요소에 대 한 모든 검색 결과 재귀적으로.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindName(System.String)">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindName%2A&gt;</ph> operates within the current element's namescope.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindName%2A&gt;</ph> 현재 요소의 이름 범위 내에서 작동합니다.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindName(System.String)">
          <source>For details, see <bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>WPF XAML 이름 범위<ept id="p1">](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>The key identifier for the requested resource.</source>
          <target state="translated">요청된 리소스의 키 식별자입니다.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>Searches for a resource with the specified key, and throws an exception if the requested resource is not found.</source>
          <target state="translated">지정된 키를 사용하여 리소스를 검색하고 요청된 리소스가 없으면 예외를 throw합니다.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>The requested resource.</source>
          <target state="translated">요청된 리소스입니다.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>If no resource with the provided key was found, an exception is thrown.</source>
          <target state="translated">제공된 키를 포함하는 리소스가 없으면 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="F:System.Windows.DependencyProperty.UnsetValue" /&gt;</ph> value might also be returned in the exception case.</source>
          <target state="translated">예외가 발생하면 <ph id="ph1">&lt;see cref="F:System.Windows.DependencyProperty.UnsetValue" /&gt;</ph> 값도 반환될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>If you call this method for a key that cannot be found, an exception is thrown.</source>
          <target state="translated">이 메서드를 찾을 수 없는 키에 대 한를 호출 하면 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>If you do not want to handle exceptions that result from calling <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindResource%2A&gt;</ph>, call <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;</ph> instead.</source>
          <target state="translated">호출에서 발생 하는 예외를 처리 하기 원하는 경우 하지 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindResource%2A&gt;</ph>, 호출 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;</ph> 대신 합니다.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;</ph> returns <ph id="ph2">`null`</ph> when a requested resource cannot be found, and does not throw an exception.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;</ph> 반환 <ph id="ph2">`null`</ph> 요청 된 리소스를 찾을 수 없으면 시점과 예외를 throw 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>If the resource is not found on the calling element, the parent element in the logical tree is searched next, then the application, then themes, and finally system resources.</source>
          <target state="translated">호출 하는 요소에는 리소스를 찾을 수 없습니다, 논리적 트리에서 부모 요소 이면 검색 결과 다음 다음는 응용 프로그램을 다음 테마, 고 마지막으로 시스템 리소스입니다.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>This lookup methodology is identical to how the tree is searched if a resource were requested by a dynamic resource reference in markup.</source>
          <target state="translated">이 조회 방법은 태그에서 동적 리소스 참조 하 여 리소스를 요청 하는 경우 트리를 검색 하는 방법을 동일 합니다.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>For more information about resource lookup, see <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>.</source>
          <target state="translated">리소스 조회에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>XAML 리소스<ept id="p1">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>Typically, you immediately cast a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindResource%2A&gt;</ph> return value to the type of the property that you setting with the returned resource value.</source>
          <target state="translated">즉시 캐스팅 하면 일반적으로 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindResource%2A&gt;</ph> 반환 값 형식의 속성에는 반환 되는 리소스 값을 사용 하 여 설정 합니다.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>Resource keys are not necessarily strings.</source>
          <target state="translated">리소스 키는 반드시 문자열입니다.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>For instance, styles for controls at the theme level are deliberately keyed to the <ph id="ph1">&lt;xref:System.Type&gt;</ph> of the control, and application or page styles for controls typically use this same key convention.</source>
          <target state="translated">예를 들어, 컨트롤 테마 수준으로 지정에 대 한 스타일은 <ph id="ph1">&lt;xref:System.Type&gt;</ph> 컨트롤 및 스타일을 응용 프로그램 또는 페이지에 대 한 컨트롤 일반적으로 사용 하 여이 동일한 키 규칙입니다.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>For details, see <bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](~/docs/framework/wpf/controls/styling-and-templating.md)</ept> or <bpt id="p2">[</bpt>XAML Resources<ept id="p2">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>스타일 및 템플릿<ept id="p1">](~/docs/framework/wpf/controls/styling-and-templating.md)</ept> 또는 <bpt id="p2">[</bpt>XAML 리소스<ept id="p2">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>The following example obtains a named resource and casts it to an appropriate type to fill a property.</source>
          <target state="translated">다음 예제에서는 명명된 된 리소스를 가져오고 한 속성을 채울 적절 한 형식으로 캐스팅 합니다.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source><ph id="ph1">&lt;paramref name="resourceKey" /&gt;</ph> was not found and an event handler does not exist for the <ph id="ph2">&lt;see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resourceKey" /&gt;</ph>가 발견되었거나 <ph id="ph2">&lt;see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /&gt;</ph> 이벤트에 대한 이벤트 처리기가 존재하지 않습니다.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source><ph id="ph1">&lt;paramref name="resourceKey" /&gt;</ph> was not found and the <ph id="ph2">&lt;see cref="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled" /&gt;</ph> property is <ph id="ph3">&lt;see langword="false" /&gt;</ph> in the <ph id="ph4">&lt;see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resourceKey" /&gt;</ph>가 발견되지 않았으며 <ph id="ph2">&lt;see cref="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled" /&gt;</ph> 이벤트에서 <ph id="ph4">&lt;see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /&gt;</ph> 속성이 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.FindResource(System.Object)">
          <source><ph id="ph1">&lt;paramref name="resourceKey" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resourceKey" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>Gets or sets the direction that text and other <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> elements flow within any parent element that controls their layout.</source>
          <target state="translated">텍스트 및 기타 <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> 요소가 해당 레이아웃을 제어하는 부모 요소 내에서 흐르는 방향을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>The direction that text and other <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> elements flow within their parent element, as a value of the enumeration.</source>
          <target state="translated">텍스트 및 기타 <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> 요소가 부모 요소 내에서 흐르는 방향(열거형 값)입니다.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>The default value is <ph id="ph1">&lt;see cref="F:System.Windows.FlowDirection.LeftToRight" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Windows.FlowDirection.LeftToRight" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>The dependency property usage sets the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> on this element.</source>
          <target state="translated">종속성 속성 사용 설정 된 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> 이 요소에 있습니다.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>Because of property value inheritance, setting <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> on an element can potentially set <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> on all child elements that did not set <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> locally or though other means such as styles.</source>
          <target state="translated">속성 값 상속을 설정으로 인해 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> 요소에 설정 될 수 있습니다 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> 설정 하지 않은 모든 자식 요소 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> 로컬로 또는 다른 방법을 통해 스타일과 같은 합니다.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>This property is not automatically set as part of any application culture information, because an element might contain content that is not necessarily intended to obey the general flow direction implied by the culture information.</source>
          <target state="translated">이 속성이 설정 되지 않았습니다 자동으로 모든 응용 프로그램 문화권 정보를 사용 하 여의 일부로 요소는 반드시 culture 정보 사용 권한에 포함 된 일반적인 흐름 방향을 따릅니다 콘텐츠가 포함 될 수 있으므로.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>For more information on globalization considerations, see <bpt id="p1">[</bpt>Globalization for WPF<ept id="p1">](~/docs/framework/wpf/advanced/globalization-for-wpf.md)</ept>.</source>
          <target state="translated">전역화 고려 사항에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>WPF의 전역화<ept id="p1">](~/docs/framework/wpf/advanced/globalization-for-wpf.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>This property has a defined <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> property accessor, so it functions as a dependency property.</source>
          <target state="translated">이 속성은 정의 된 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 종속성 속성으로 작동 하므로 속성 접근자입니다.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>However, it is also registered as attached, so it can also function as an attached property.</source>
          <target state="translated">그러나도 등록 연결도 연결된 된 속성으로 할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>The attached registration is mainly so that property value inheritance is supported, but the property can also be used as a true attached property.</source>
          <target state="translated">연결 된 등록은 주로 속성 값 상속이 지원 되지만 속성이 true 이면 연결 된 속성으로 사용할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>The attached property usage is only relevant if the object you intend to set the flow direction on has a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> parent element that performs layout upon it, is itself not a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, and does not already have a more directly defined <ph id="ph3">`FlowDirection`</ph> property.</source>
          <target state="translated">연결 된 속성은 관련 개체에 있는 경우에서 흐름 방향을 설정 하려면만 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 워크, 레이아웃을 수행 하는 부모 요소 않습니다 자체는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, 아직 없으면 보다 직접 정의 하 고 <ph id="ph3">`FlowDirection`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>(Some of the flow document classes such as <ph id="ph1">&lt;xref:System.Windows.Documents.Block&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Documents.Inline&gt;</ph> define their own <ph id="ph3">`FlowDirection`</ph>, and this property can also set the flow direction.</source>
          <target state="translated">(같은 흐름의 일부 문서 클래스 <ph id="ph1">&lt;xref:System.Windows.Documents.Block&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Documents.Inline&gt;</ph> 자신의 정의 <ph id="ph3">`FlowDirection`</ph>,이 속성 흐름 방향을 설정할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>The property value is then read by the eventual content host without requiring attached property usage.)</source>
          <target state="translated">속성 값은 다음 읽기 최종 콘텐츠 호스트에서 연결된 속성의 사용을 요구 하지 않고.)</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 특성 사용</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>object<ept id="p1">*</ept> <bpt id="p2">**</bpt>FlowDirection<ept id="p2">**</ept>="<ph id="ph2">&lt;xref:System.Windows.FlowDirection&gt;</ph>"/&gt;</source>
          <target state="translated"><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>object<ept id="p1">*</ept> <bpt id="p2">**</bpt>FlowDirection<ept id="p2">**</ept>="<ph id="ph2">&lt;xref:System.Windows.FlowDirection&gt;</ph>"/&gt;</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>XAML Text Usage</source>
          <target state="translated">XAML 텍스트 사용</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>This property can also be set on classes that are not <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived classes, by the following <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> attached property usage:</source>
          <target state="translated">없는 클래스에이 속성을 설정할 수도 있습니다 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 파생 클래스가 다음 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 연결 된 속성의 사용:</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source><ph id="ph1">`&lt;`</ph> <bpt id="p1">*</bpt>object<ept id="p1">*</ept> <ph id="ph2">`FrameworkElement.`</ph><bpt id="p2">**</bpt>FlowDirection<ept id="p2">**</ept>="<ph id="ph3">&lt;xref:System.Windows.FlowDirection&gt;</ph><ph id="ph4">`"/&gt;`</ph></source>
          <target state="translated"><ph id="ph1">`&lt;`</ph> <bpt id="p1">*</bpt>object<ept id="p1">*</ept> <ph id="ph2">`FrameworkElement.`</ph><bpt id="p2">**</bpt>FlowDirection<ept id="p2">**</ept>="<ph id="ph3">&lt;xref:System.Windows.FlowDirection&gt;</ph><ph id="ph4">`"/&gt;`</ph></target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph></target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FlowDirection">
          <source>This property is both a dependency property and an attached property; see Remarks.</source>
          <target state="translated">이 속성은 종속성 속성과 연결된 된 속성입니다. 설명 부분을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.FlowDirectionProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.FlowDirection" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.FlowDirection" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>Gets or sets a property that enables customization of appearance, effects, or other style characteristics that will apply to this element when it captures keyboard focus.</source>
          <target state="translated">키보드 포커스를 캡처할 때 이 요소에 적용되는 모양, 효과 또는 기타 스타일 특성을 사용자 지정할 수 있는 속성을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>The desired style to apply on focus.</source>
          <target state="translated">포커스에 적용하려는 스타일입니다.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>The default value as declared in the dependency property is an empty static <ph id="ph1">&lt;see cref="T:System.Windows.Style" /&gt;</ph>.</source>
          <target state="translated">종속성 속성에 선언되어 있는 기본값은 빈 정적 <ph id="ph1">&lt;see cref="T:System.Windows.Style" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>However, the effective value at run time is often (but not always) a style as supplied by theme support for controls.</source>
          <target state="translated">그러나 런타임 시 유효 값은 대체로(항상 그렇지는 않음) 컨트롤에 대한 테마 지원에서 제공되는 스타일입니다.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>This property affects visual appearance but does not report <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A&gt;</ph> in metadata.</source>
          <target state="translated">이 속성 시각적 모양에 영향을 미칩니다. 하지만 보고 하지 않습니다 <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A&gt;</ph> 메타 데이터에 있습니다.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>This is because the visual appearance change is event-driven and may not apply at all times, and therefore should not generally report any visual or layout information in metadata.</source>
          <target state="translated">시각적으로 유사한 변경 이벤트 구동 하 고 모든 시간에 적용 되지 않을 수 및 따라서 보고 하지 않아야 일반적으로 메타 데이터에는 visual 또는 레이아웃 정보가 때문입니다.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>Conceptually, the visual behavior of focus applied to a control should be coherent from control to control.</source>
          <target state="translated">개념적으로 컨트롤에 적용 되는 포커스의 시각적 동작 컨트롤에 일관 된 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>The most sensible way to enforce coherence is to only change the focus visual style if you are composing an entire theme.</source>
          <target state="translated">일관성을 적용 하는 가장 적절 한 방법은 전체 테마를 작성 하는 경우에 포커스 시각적 스타일을 변경 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>Setting this property on individual control styles and not as part of a theme is not the intended usage of this property, because it may lead to a confusing user experience regarding keyboard focus.</source>
          <target state="translated">개별 컨트롤 스타일 및 테마의 일부가 아니라이 속성을 설정할 수는 없습니다.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>If you are intending control-specific behavior that is deliberately not coherent across a theme, a much better approach is to use triggers in styles for individual input state properties, such as <ph id="ph1">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph>, and to do so in a way that does not visually interfere with any existing focus visual style.</source>
          <target state="translated">테마 전체에서 일관 된 의도 한 대로 되지 않는 컨트롤 관련 동작을 하려는 경우 더 좋은 방법은를 사용 하 트리거 스타일의 개별 입력된 상태 속성 같은 <ph id="ph1">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph>, 그렇게 하지 않는 방식으로 수행할 수 있습니다 시각적으로 기존 포커스 시각적 스타일에 방해가 됩니다.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>For more information on the design intention of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FocusVisualStyle%2A&gt;</ph> and alternative focus properties, see <bpt id="p1">[</bpt>Styling for Focus in Controls, and FocusVisualStyle<ept id="p1">](~/docs/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle.md)</ept>.</source>
          <target state="translated">디자인 의도 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FocusVisualStyle%2A&gt;</ph> 및 집중 속성을 참조 하십시오. 대체 <bpt id="p1">[</bpt>컨트롤과 FocusVisualStyle에 포커스에 대 한 스타일 지정<ept id="p1">](~/docs/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 특성 사용</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML 속성 요소 사용</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source><bpt id="p1">*</bpt>resourceExtension<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>resourceExtension<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>One of the following: , or .</source>
          <target state="translated">다음 중 하나:, 또는.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>See <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>XAML 리소스<ept id="p1">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source><bpt id="p1">*</bpt>styleResourceKey<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>styleResourceKey<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>The key that identifies the style being requested.</source>
          <target state="translated">요청 되는 스타일을 식별 하는 키입니다.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>The key refers to an existing resource in a <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>.</source>
          <target state="translated">기존 리소스를이 키는 한 <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>Property element syntax is technically possible, but not recommended.</source>
          <target state="translated">속성 요소 구문은 지원 되지만 권장 하지는 않습니다.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>See <bpt id="p1">[</bpt>Inline Styles and Templates<ept id="p1">](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>인라인 스타일 및 템플릿<ept id="p1">](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>A binding reference using  or <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> is also possible, but uncommon.</source>
          <target state="translated">사용 하 여 바인딩 참조 또는 <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> 가능 하지만 일반적이 지 않은 이기도 합니다.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.FocusVisualStyle">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.FocusVisualStyleProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.FocusVisualStyle" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.FocusVisualStyle" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.ForceCursor">
          <source>Gets or sets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> should force the <ph id="ph2">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> to render the cursor as declared by the <ph id="ph3">&lt;see cref="P:System.Windows.FrameworkElement.Cursor" /&gt;</ph> property.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>가 <ph id="ph3">&lt;see cref="P:System.Windows.FrameworkElement.Cursor" /&gt;</ph> 속성에서 선언된 커서를 렌더링하도록 <ph id="ph2">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>에 명령할 것인지를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ForceCursor">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if cursor presentation while over this element is forced to use current <ph id="ph2">&lt;see cref="P:System.Windows.FrameworkElement.Cursor" /&gt;</ph> settings for the cursor (including on all child elements); otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 요소 위에 있을 때 커서에 대한 현재 <ph id="ph2">&lt;see cref="P:System.Windows.FrameworkElement.Cursor" /&gt;</ph> 설정(모든 자식 요소 포함)을 사용하여 커서가 표시되도록 하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ForceCursor">
          <source>The default value is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ForceCursor">
          <source>If you set this property to <ph id="ph1">`true`</ph> you will override the cursor preferences established by child elements.</source>
          <target state="translated">이 속성을 설정 하는 경우 <ph id="ph1">`true`</ph> 자식 요소에서 설정한 커서 기본 설정을 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ForceCursor">
          <source>Doing so in general application <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> might be confusing for the user, particularly if child elements are attempting to specify cursors.</source>
          <target state="translated">이렇게 하면 일반적 응용 프로그램 <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> 자식 요소는 커서를 지정 하려고 하는 경우에 특히 해당 사용자를 혼동 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ForceCursor">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ForceCursor%2A&gt;</ph> is more appropriate in control subclassing or compositing scenarios.</source>
          <target state="translated">설정 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ForceCursor%2A&gt;</ph> 컨트롤 서브클래싱 또는 작성 시나리오에 더 적합 합니다.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ForceCursor">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ForceCursor">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ForceCursor">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ForceCursor">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ForceCursor">
          <source>The following example forces the cursor value.</source>
          <target state="translated">다음 예에서는 커서 값을 강제로 수행합니다.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.ForceCursorProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ForceCursor" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ForceCursor" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)">
          <source>The target <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> to get the binding from.</source>
          <target state="translated">바인딩을 가져올 대상 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Windows.Data.BindingExpression" /&gt;</ph> that represents the binding on the specified property.</source>
          <target state="translated">지정된 속성에 대한 바인딩을 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Data.BindingExpression" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Data.BindingExpression" /&gt;</ph> if the target property has an active binding; otherwise, returns <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">대상 속성에 활성 바인딩이 있으면 <ph id="ph1">&lt;see cref="T:System.Windows.Data.BindingExpression" /&gt;</ph>을 반환하고, 그렇지 않으면 <ph id="ph2">&lt;see langword="null" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)">
          <source>Checking the return value for <ph id="ph1">`null`</ph> is a technique you can use to determine whether a property has an active binding.</source>
          <target state="translated">에 대 한 반환 값을 확인 <ph id="ph1">`null`</ph> 기술을 사용 하면 속성에 활성 바인딩이 있는지 여부를 확인 하는 데 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)">
          <source>This method is really just a convenience wrapper around the <ph id="ph1">&lt;xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">이 메서드는 실제로 편리한 래퍼는 <ph id="ph1">&lt;xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.GetBindingExpression%2A&gt;</ph> passes the current instance and the <ph id="ph2">`dp`</ph> parameter to <ph id="ph3">&lt;xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.GetBindingExpression%2A&gt;</ph> 현재 인스턴스 및 <ph id="ph2">`dp`</ph> 매개 변수를 <ph id="ph3">&lt;xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)">
          <source>The element to return a <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.FlowDirection" /&gt;</ph> for.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.FlowDirection" /&gt;</ph>을 반환할 요소입니다.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)">
          <source>Gets the value of the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.FlowDirection" /&gt;</ph> attached property for the specified <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>에 대한 <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.FlowDirection" /&gt;</ph> 연결된 속성의 값을 설정합니다.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)">
          <source>The requested flow direction, as a value of the enumeration.</source>
          <target state="translated">열거형 값인 요청된 흐름 방향입니다.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)">
          <source>The main purpose of this method is to support attached property syntax for the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> property, therefore allowing child elements of a provided <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> to specify flow direction for the arrangement within their parent element.</source>
          <target state="translated">에 대 한 연결 된 속성 구문을 지원 하도록이 메서드의 주요 목적은는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> 속성, 자식 요소는 제공 된 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 해당 부모 요소 내에서 정렬에 대 한 흐름 방향을 지정 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)">
          <source>To get the value on the current <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, use the direct <ph id="ph2">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> accessor <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph>.</source>
          <target state="translated">현재 값을 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>를 직접 사용 하 여 <ph id="ph2">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 접근자 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>The size of the part of the element that does visual presentation.</source>
          <target state="translated">시각적 표시를 수행하는 요소 부분의 크기입니다.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>Returns a geometry for a clipping mask.</source>
          <target state="translated">클리핑 마스크의 기하 도형을 반환합니다.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>The mask applies if the layout system attempts to arrange an element that is larger than the available display space.</source>
          <target state="translated">이 마스크는 레이아웃 시스템에서 사용 가능한 표시 공간보다 큰 요소를 정렬하려고 하면 적용됩니다.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>The clipping geometry.</source>
          <target state="translated">클리핑 기하 도형입니다.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>Margins will be subtracted from the <ph id="ph1">`layoutSlotSize`</ph> as part of layout system behavior.</source>
          <target state="translated">여백에서 차감는 <ph id="ph1">`layoutSlotSize`</ph> 레이아웃 시스템 동작의 일부로 합니다.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>A returned null reference indicates that no clipping will occur.</source>
          <target state="translated">Null 참조가 반환 되는 오려낸 없습니다 발생 하는지 나타냅니다.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>The default implementation always returns <ph id="ph1">`null`</ph> when <ph id="ph2">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> is <ph id="ph3">`false`</ph>.</source>
          <target state="translated">기본 구현에서는 항상 반환 <ph id="ph1">`null`</ph> 때 <ph id="ph2">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> 은 <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>This method overrides <ph id="ph1">&lt;xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=nameWithType&gt;</ph>를 재정의합니다.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> implementation uses <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph> in its calculations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 구현을 사용 하 여 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph> 계산에 있습니다.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>Several subclasses of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> override this method again.</source>
          <target state="translated">여러 하위 클래스 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 다시이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=nameWithType&gt;</ph>, overrides to always return <ph id="ph2">`null`</ph> because adorners are often deliberately outside the ordinary bounds.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=nameWithType&gt;</ph>를 반환을 항상 재정의 <ph id="ph2">`null`</ph> 표시기 경우가 많기 때문에 의도적으로 일반 범위를 벗어났습니다.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=nameWithType&gt;</ph> return <ph id="ph3">`null`</ph> if <ph id="ph4">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> is <ph id="ph5">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=nameWithType&gt;</ph> 반환 <ph id="ph3">`null`</ph> 경우 <ph id="ph4">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> 은 <ph id="ph5">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>The default implementation always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> when <ph id="ph2">&lt;see cref="P:System.Windows.UIElement.ClipToBounds" /&gt;</ph> is <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본 구현에서는 항상 반환 <ph id="ph1">&lt;see langword="null" /&gt;</ph> 때 <ph id="ph2">&lt;see cref="P:System.Windows.UIElement.ClipToBounds" /&gt;</ph> 은 <ph id="ph3">&lt;see langword="false" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)">
          <source>Overrides are generally expected to preserve this behavior, although there are exceptions, depending on the relationship and purpose of the derived class and its layout logic as opposed to the base class.</source>
          <target state="translated">재정의 관계 및 파생된 클래스와 달리 기본 클래스의 레이아웃 논리의 용도 따라 예외가 있지만 일반적으로이 동작을 유지 하려면 않을입니다.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)">
          <source>Name of the child to find.</source>
          <target state="translated">찾을 자식의 이름입니다.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)">
          <source>Returns the named element in the visual tree of an instantiated <ph id="ph1">&lt;see cref="T:System.Windows.Controls.ControlTemplate" /&gt;</ph>.</source>
          <target state="translated">인스턴스화된 <ph id="ph1">&lt;see cref="T:System.Windows.Controls.ControlTemplate" /&gt;</ph>의 시각적 트리에서 명명된 요소를 반환합니다.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)">
          <source>The requested element.</source>
          <target state="translated">요청한 요소입니다.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)">
          <source>May be <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no element of the requested name exists.</source>
          <target state="translated">요청된 이름이 요소가 없으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)">
          <source>Templates in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> have a self-contained namescope.</source>
          <target state="translated">서식 파일에서 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 는 자체 포함 된 네임 스페이스에 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)">
          <source>This is because templates are re-used, and any name defined in a template cannot remain unique when multiple instances of a control each instantiate its template.</source>
          <target state="translated">서식 파일에 정의 된 이름이 없는 고유 하지 않게 될 각 컨트롤의 여러 인스턴스 템플릿을 인스턴스화하면 및 템플릿이 다시 사용 되므로 때문입니다.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.GetTemplateChild%2A&gt;</ph> method to return references to objects that come from the template after it is instantiated.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.GetTemplateChild%2A&gt;</ph> 메서드가 인스턴스화된 후 서식 파일에서 제공 하는 개체에 대 한 참조를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)">
          <source>You cannot use the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType&gt;</ph> method to find items from templates because <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType&gt;</ph> acts in a more general scope, and there is no connection between the <ph id="ph3">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> class itself and the instantiated template once it is applied.</source>
          <target state="translated">사용할 수 없습니다는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType&gt;</ph> 때문에 서식 파일에서 항목을 찾을 메서드의 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType&gt;</ph> 범위 보다 일반적인 내에서 작동 하 고 간의 연결이 <ph id="ph3">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> 클래스 자체와 인스턴스화된 템플릿이 적용 되 고 나면 합니다.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType&gt;</ph> supplies the same function as this method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType&gt;</ph> 이 방법으로 동일한 기능을 제공합니다.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType&gt;</ph> is public instead of protected, and it uses correct name-scoping considerations that allow it to access the template within an element and find named items within it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType&gt;</ph> 요소 이름이 items이 고 그 안에 찾기 내의 서식 파일에 액세스할 수 있도록 허용 하는 올바른 이름-범위 고려 사항 사용 하는 public이 아닌 보호.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType&gt;</ph> when you need to get an element outside of its parent control.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType&gt;</ph> 부모 컨트롤 외부에서 요소를 가져오는 중지 해야 합니다.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetUIParentCore">
          <source>Returns an alternative logical parent for this element if there is no visual parent.</source>
          <target state="translated">시각적 부모가 없는 경우 이 요소에 대한 대체 논리 부모를 반환합니다.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetUIParentCore">
          <source>Returns something other than <ph id="ph1">&lt;see langword="null" /&gt;</ph> whenever a WPF framework-level implementation of this method has a non-visual parent connection.</source>
          <target state="translated">이 메서드의 WPF 프레임워크 수준 구현에 시각적 부모가 아닌 연결이 있을 때마다 <ph id="ph1">&lt;see langword="null" /&gt;</ph> 이외의 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetUIParentCore">
          <source>This method overrides <ph id="ph1">&lt;xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=nameWithType&gt;</ph>를 재정의합니다.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetUIParentCore">
          <source>The default <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> implementation returns the expected single visual parent, which is the same result as getting the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Parent%2A&gt;</ph> value.</source>
          <target state="translated">기본 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 구현은 가져오는와 동일한 결과 즉 예상된 단일 시각적 부모는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Parent%2A&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetUIParentCore">
          <source>Derived class implementations might return alternate parent relationships.</source>
          <target state="translated">파생된 클래스 구현은 대체 부모 관계를 반환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>The zero-based index of the requested child element in the collection.</source>
          <target state="translated">컬렉션에서 요청된 자식 요소의 인덱스(0부터 시작)입니다.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>Overrides <ph id="ph1">&lt;see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" /&gt;</ph>, and returns a child at the specified index from a collection of child elements.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" /&gt;</ph>를 재정의하고 자식 요소 컬렉션에서 지정한 인덱스에 있는 자식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>The requested child element.</source>
          <target state="translated">요청된 자식 요소입니다.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>This should not return <ph id="ph1">&lt;see langword="null" /&gt;</ph>; if the provided index is out of range, an exception is thrown.</source>
          <target state="translated">여기서는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 반환되어서는 안 됩니다. 제공된 인덱스가 범위를 벗어나면 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>In the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> implementation, the only valid index is zero.</source>
          <target state="translated">에 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 구현만 유효한 인덱스는 0입니다.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>The content model for <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.GetVisualChild%2A&gt;</ph> supports either zero or one child elements, not a collection.</source>
          <target state="translated">콘텐츠 모델에 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.GetVisualChild%2A&gt;</ph> 에서 0 개 또는 1 자식 요소 컬렉션에 없습니다.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>The following example shows how a custom adorner uses the values declared by a <ph id="ph1">&lt;xref:System.Windows.Media.VisualCollection&gt;</ph> that it maintains for its multiple visual children.</source>
          <target state="translated">다음 예제에서는 사용자 지정 표시기에서 선언 되는 값을 사용 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.Media.VisualCollection&gt;</ph> 여러 시각적 자식에 대 한 유지 관리 합니다.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>These values are reported through overrides of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.VisualChildrenCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.GetVisualChild%2A&gt;</ph>.</source>
          <target state="translated">이러한 값의 재정의 통해 보고 됩니다 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.VisualChildrenCount%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.GetVisualChild%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>This implementation is only valid for elements that do not maintain any more descriptive collection of visual child elements.</source>
          <target state="translated">이 구현은 좀 더 구체적인 시각적 자식 요소 컬렉션을 유지 하지 않는 요소에 대 한만 유효 합니다.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>Any element that does have such a collection must override this method and map the index to an equivalent index in the child element collection that is supported by that element.</source>
          <target state="translated">이러한 컬렉션에는 모든 요소는이 메서드를 재정의 하 고 인덱스를 해당 요소에서 지원 되는 자식 요소 컬렉션에서 인덱스를 매핑할 해야 합니다.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>An index in the range from zero to <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /&gt;</ph> (minus one) should return a valid element; any other index should throw an out-of-range exception.</source>
          <target state="translated">0부터 범위에서 인덱스 <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /&gt;</ph> (-1); 잘못 된 요소를 반환 해야 다른 인덱스 범위를 벗어난 예외를 throw 해야 합니다.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>An example of an element type that does support a child collection and overrides <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" /&gt;</ph> to return more than one possible child is <ph id="ph2">&lt;see cref="T:System.Windows.Controls.Panel" /&gt;</ph>.</source>
          <target state="translated">자식 컬렉션을 지원지 않습니다 및 재정의 된 요소 형식의 예로 <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" /&gt;</ph> 은 둘 이상의 가능한 자식 반환할 <ph id="ph2">&lt;see cref="T:System.Windows.Controls.Panel" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>The default implementation in <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> presumes only one visual child.</source>
          <target state="translated">기본 구현은 <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> 하나의 시각적 자식을 가정 합니다.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>Any value passed for <ph id="ph1">&lt;paramref name="index" /&gt;</ph> other than zero causes an exception to be thrown.</source>
          <target state="translated">값이 전달에 대 한 <ph id="ph1">&lt;paramref name="index" /&gt;</ph> 0 이외의 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>Several common elements, such as decorators, adorners, or elements with specialized rendering, override the <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> implementation (of the implementation from intermediate base classes).</source>
          <target state="translated">데코레이터, 표시기, 또는 특수 한 렌더링 된 요소와 같은 몇 가지 공통 요소를 재정의 <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> (중간 기본 클래스에서 구현)의 구현입니다.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)">
          <source>Some implementations still enforce one visual child whereas others allow a collection.</source>
          <target state="translated">다른 컬렉션을 허용 하는 반면 일부 구현에서는 여전히 하나의 시각적 자식을 적용 합니다.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Height">
          <source>Gets or sets the suggested height of the element.</source>
          <target state="translated">제안된 요소 높이를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>The height of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>.</source>
          <target state="translated">요소의 높이(<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>The default value is <ph id="ph1">&lt;see cref="F:System.Double.NaN" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Double.NaN" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>This value must be equal to or greater than 0.0.</source>
          <target state="translated">이 값은 0.0보다 크거나 같아야 합니다.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> is one of three writable properties on <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that specify height information.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> 에 세 개의 쓰기 가능한 속성 중 하나 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 높이 정보를 지정 하는 합니다.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>The other two are <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph>.</source>
          <target state="translated">다른 두 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>If there is a conflict between these values, the order of application for actual height determination is that first <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</ph> must be honored, then <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph>, and finally, if it is within bounds, <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>.</source>
          <target state="translated">간에 충돌 하는 경우 이들 값이 실제 높이 결정 하기 위한 응용 프로그램의 순서는 첫 번째 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</ph> 다음, 해야 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph>, 마지막으로, 범위 안에 있으면 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>If this element is a child element within some other element, then setting this property to a value is really only a suggested value.</source>
          <target state="translated">이 요소는 자식 요소가 다른 요소 내에서 이면 다음이 속성 값을 설정 실제로 제안 된 값입니다.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>The layout system as well as the particular layout logic of the parent element will use the value as a nonbinding input during the layout process.</source>
          <target state="translated">이 레이아웃 시스템 뿐만 아니라 부모 요소의 특정 레이아웃 논리 값이 사용 됩니다 바인딩되지 입력으로 레이아웃 과정입니다.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>In practical terms, a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> is almost always the child element of something else; even when you set the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> on <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>.</source>
          <target state="translated">실제로 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 는 거의 항상 다른;의 자식 요소 설정 하는 경우에는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> 에 <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>(For <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, that value is used when the underlying application model establishes the basic rendering assumptions that create the Hwnd that hosts the application.)</source>
          <target state="translated">(에 대 한 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, 응용 프로그램을 호스팅하는 기본 응용 프로그램 모델의 기본 렌더링 가정은 Hwnd를 만드는 하는 경우 값이 사용 됩니다.)</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>In addition to acceptable <ph id="ph1">&lt;xref:System.Double&gt;</ph> values, this property can also be <ph id="ph2">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">또한 허용 가능한 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값,이 속성 될 수도 있습니다 <ph id="ph2">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>This is how you specify auto sizing behavior in code.</source>
          <target state="translated">코드에서 자동 크기 조정 동작을 지정 하는 방법입니다.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> you set the value to the string "Auto" (case insensitive) to enable the auto sizing behavior.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 는 값을 설정 하면 문자열 "Auto" (대/소문자 구분)로 자동 크기 조정 동작을 사용 하도록 설정 합니다.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>Auto sizing behavior implies that the element will fill the height available to it.</source>
          <target state="translated">자동 크기 조정 동작 요소를 사용할 수 있는 높이 가득 찰 의미 합니다.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>Note however that specific controls frequently supply default values through their default theme styles that will disable the auto sizing behavior unless it is specifically re-enabled.</source>
          <target state="translated">그러나 note 특정 컨트롤을 기본 테마 스타일 자동 크기 조정 동작 구체적으로 다시 설정 된 경우가 아니라면 사용할 수 없게 됩니다을 통해 기본 값 제공 하는 경우가 많습니다.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>The return value of this property is always the same as any value that was set to it.</source>
          <target state="translated">이 속성의 반환 값은 항상에 대해 설정 된 값과 동일 합니다.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>In contrast, the value of the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</ph> may vary.</source>
          <target state="translated">반대로,의 값은 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</ph> 다를 수 있습니다.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>This can happen either statically because the layout rejected the suggested size for some reason, or momentarily.</source>
          <target state="translated">어떤 이유로 제안 된 크기를 거부 하는 레이아웃 정적으로 발생할 수 있습니다이 일시적으로 또는 합니다.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>The layout system itself works asynchronously relative to the property system's set of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> and may not have processed that particular sizing property change yet.</source>
          <target state="translated">레이아웃 시스템 자체의 속성 시스템의 집합을 기준으로 비동기적으로 작동 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> 및 해당 특정 크기 조정 속성 변경 내용을 아직 처리 되지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>The value restrictions on the <ph id="ph1">&lt;xref:System.Double&gt;</ph> value are enforced by a <ph id="ph2">&lt;xref:System.Windows.ValidateValueCallback&gt;</ph> mechanism.</source>
          <target state="translated">에 대 한 값 제한은 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값에 의해 적용 되는 <ph id="ph2">&lt;xref:System.Windows.ValidateValueCallback&gt;</ph> 메커니즘입니다.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>If you attempt to set an invalid value, a run-time exception is thrown.</source>
          <target state="translated">잘못 된 값을 설정 하려고 하면 런타임 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>In addition to the validation check, there is a nondeterministic upper value bound for <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> that is enforced by the layout system (this is a very large number, larger than <ph id="ph2">&lt;xref:System.Single.MaxValue?displayProperty=nameWithType&gt;</ph> but smaller than <ph id="ph3">&lt;xref:System.Double.MaxValue?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">유효성 검사 이외에 비결 정적 상한 값에 대 한 경계 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> 레이아웃 시스템에 의해 적용 하는 (이 보다 큰 매우 큰 숫자 <ph id="ph2">&lt;xref:System.Single.MaxValue?displayProperty=nameWithType&gt;</ph> 보다 높지만 <ph id="ph3">&lt;xref:System.Double.MaxValue?displayProperty=nameWithType&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>If you exceed this bound, the element will not render, and no exception is thrown.</source>
          <target state="translated">이 경계를 초과 하면 요소가 렌더링 되지 하 고 예외가 throw 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>Do not set <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.</source>
          <target state="translated">설정 하지 않으면 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> 가능한 시각적 표시의 최대 크기가 비결 정적 상한 값을 초과할 수 보다 훨씬 큰 값으로.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 특성 사용</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source><bpt id="p1">*</bpt>double<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>double<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>String representation of a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value equal to or greater than 0.0.</source>
          <target state="translated">문자열 표현은 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 0.0 보다 크거나 같은 값입니다.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>See Remarks for upper bound information.</source>
          <target state="translated">상한 정보에 대한 설명을 참조하세요.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>This value is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">이 값으로 해석 되는 <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph> 측정 합니다.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">문자열은 소수점이 하를 명시적으로 포함 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">예를 들어 값의 <ph id="ph1">`1`</ph> 허용 됩니다.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>A <bpt id="p1">*</bpt>double<ept id="p1">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated">A <bpt id="p1">*</bpt>double<ept id="p1">*</ept> 단위 선언 문자열 중 하나에 의해 다음 위에서 설명한 대로 값: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></source>
          <target state="translated"><ph id="ph1">`px`</ph> (기본값)은 <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source><ph id="ph1">`in`</ph> is inches; 1in==96px</source>
          <target state="translated"><ph id="ph1">`in`</ph> is inches; 1in==96px</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source><ph id="ph1">`cm`</ph> is centimeters; 1cm==(96/2.54) px</source>
          <target state="translated"><ph id="ph1">`cm`</ph> 센티미터; 1cm==(96/2.54) px</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source><ph id="ph1">`pt`</ph> is points; 1pt==(96/72) px</source>
          <target state="translated"><ph id="ph1">`pt`</ph> is points; 1pt==(96/72) px</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source><bpt id="p1">**</bpt>Auto<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>자동<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>Enables autosizing behavior.</source>
          <target state="translated">자동 크기 조정 동작을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>See Remarks.</source>
          <target state="translated">설명 부분을 참조하세요.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Height">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.HeightProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Height" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Height" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>Gets or sets the horizontal alignment characteristics applied to this element when it is composed within a parent element, such as a panel or items control.</source>
          <target state="translated">패널 또는 항목 컨트롤 같은 부모 요소에 구성되어 있을 경우 이 요소에 적용되는 가로 맞춤 특징을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>A horizontal alignment setting, as a value of the enumeration.</source>
          <target state="translated">열거형 값인 가로 맞춤 설정입니다.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.HorizontalAlignment.Stretch" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Windows.HorizontalAlignment.Stretch" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>When <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> properties are explicitly set on an element, these measurements take higher precedent during layout and will cancel the typical effects of setting <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph> to <ph id="ph4">&lt;xref:System.Windows.HorizontalAlignment.Stretch&gt;</ph>.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> 속성 요소에 명시적으로 설정 되어, 이러한 측정값을 레이아웃 하는 동안 높은 우선 되며 설정의 일반적인 효과 취소 합니다. <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph> 를 <ph id="ph4">&lt;xref:System.Windows.HorizontalAlignment.Stretch&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph> is the <ph id="ph2">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> property accessor for what is in reality a dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph> 이 <ph id="ph2">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> 이란 현실에서 종속성 속성에 대 한 속성 접근자입니다.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>This particular dependency property quite frequently has its apparent "default" value set differently in subclassed elements, particularly controls.</source>
          <target state="translated">이 특정 종속성 속성에는 상당히 자주 해당 "기본값"이 서브클래싱된 요소, 특히 컨트롤에서에서 서로 다르게 설정 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>This generally occurs in one of two ways: the dependency property is re-registered to a particular subclass, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently.</source>
          <target state="translated">일반적으로이 두 가지 방법 중 하나에서 발생 합니다: 종속성 속성은 해당 기본값을 설정 하기 위한 여러 가지 메타 데이터 사용 하면서도 특정 서브 클래스에 다시 등록 있거나 해당 종속성 속성 값을 다르게 설정 하는 기본 스타일 적용 되 고 있습니다.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>For example, the apparent "default" of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph> for a <ph id="ph2">&lt;xref:System.Windows.Controls.Label&gt;</ph> control will be <ph id="ph3">&lt;xref:System.Windows.HorizontalAlignment.Left&gt;</ph>, even though <ph id="ph4">&lt;xref:System.Windows.Controls.Label&gt;</ph> inherits <ph id="ph5">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph> direct from <ph id="ph6">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
          <target state="translated">예를 들어 명백한 "기본값"의 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph> 에 대 한는 <ph id="ph2">&lt;xref:System.Windows.Controls.Label&gt;</ph> 컨트롤 됩니다 <ph id="ph3">&lt;xref:System.Windows.HorizontalAlignment.Left&gt;</ph>경우라도, <ph id="ph4">&lt;xref:System.Windows.Controls.Label&gt;</ph> 상속 <ph id="ph5">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph> 에서 직접 <ph id="ph6">&lt;xref:System.Windows.FrameworkElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>This is because that value was reset within the default style of <ph id="ph1">&lt;xref:System.Windows.Controls.Label&gt;</ph>, within the style's control template.</source>
          <target state="translated">즉, 해당 값의 기본 스타일 내에서 다시 설정 된 <ph id="ph1">&lt;xref:System.Windows.Controls.Label&gt;</ph>, 스타일의 컨트롤 템플릿 내에서.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> does not use <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph> when composing layout, because <ph id="ph3">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> is based on absolute positioning.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> 사용 하지 않는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph> 때문에 레이아웃을 구성할 때 <ph id="ph3">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> 절대 위치에 기반 합니다.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>When inherited by <ph id="ph1">&lt;xref:System.Windows.Controls.Label&gt;</ph> or derived classes, <ph id="ph2">&lt;xref:System.Windows.Controls.Label&gt;</ph> redefines the default value of this dependency property to be <ph id="ph3">&lt;xref:System.Windows.HorizontalAlignment.Left&gt;</ph>.</source>
          <target state="translated">상속 되는 경우 <ph id="ph1">&lt;xref:System.Windows.Controls.Label&gt;</ph> 또는 파생 된 클래스, <ph id="ph2">&lt;xref:System.Windows.Controls.Label&gt;</ph> 되도록이 종속성 속성의 기본값을 재정의 <ph id="ph3">&lt;xref:System.Windows.HorizontalAlignment.Left&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.HorizontalAlignment">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.HorizontalAlignmentProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.InheritanceBehavior">
          <source>Gets or sets the scope limits for property value inheritance, resource key lookup, and RelativeSource FindAncestor lookup.</source>
          <target state="translated">속성 값 상속, 리소스 키 조회 및 RelativeSource FindAncestor 조회를 위한 범위 제한을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InheritanceBehavior">
          <source>A value of the enumeration.</source>
          <target state="translated">열거형 값입니다.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InheritanceBehavior">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.InheritanceBehavior.Default" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Windows.InheritanceBehavior.Default" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InheritanceBehavior">
          <source>Certain boundaries in the element tree set <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.InheritanceBehavior%2A&gt;</ph> to deliberately limit the scope of inheritance behavior, to a force resource lookup to check the application resources, or to prevent a RelativeSource FindAncestor lookup from querying the current element or any further.</source>
          <target state="translated">요소에 특정 경계 트리 집합 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.InheritanceBehavior%2A&gt;</ph> 의도 한 대로 응용 프로그램 리소스를 확인 하거나 쿼리 하는 현재 요소에서 RelativeSource FindAncestor 조회 않으려면 force 리소스 조회에 상속 동작의 범위를 제한 하려면 또는 더 이상.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InheritanceBehavior">
          <source>RelativeSource FindAncestor lookup occurs when a binding uses a <ph id="ph1">&lt;xref:System.Windows.Data.RelativeSource&gt;</ph> that has its <ph id="ph2">&lt;xref:System.Windows.Data.RelativeSource.Mode%2A&gt;</ph> property set to the <ph id="ph3">&lt;xref:System.Windows.Data.RelativeSourceMode.FindAncestor?displayProperty=nameWithType&gt;</ph> value.</source>
          <target state="translated">RelativeSource FindAncestor 조회 바인딩을 사용 하는 경우에 발생 한 <ph id="ph1">&lt;xref:System.Windows.Data.RelativeSource&gt;</ph> 있는 해당 <ph id="ph2">&lt;xref:System.Windows.Data.RelativeSource.Mode%2A&gt;</ph> 속성이로 설정는 <ph id="ph3">&lt;xref:System.Windows.Data.RelativeSourceMode.FindAncestor?displayProperty=nameWithType&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InheritanceBehavior">
          <source>If you want your derived class to set this property, you should do so within the static constructor or in other initialization routines.</source>
          <target state="translated">이 속성을 설정 하려면 파생된 클래스를 사용 하도록 하려는 경우 정적 생성자 또는 다른 초기화 루틴에서 그렇게 수행 해야 합니다.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.Initialized">
          <source>Occurs when this <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> is initialized.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>가 초기화될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.Initialized">
          <source>This event coincides with cases where the value of the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.IsInitialized" /&gt;</ph> property changes from <ph id="ph2">&lt;see langword="false" /&gt;</ph> (or undefined) to <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.IsInitialized" /&gt;</ph> 속성의 값이 <ph id="ph2">&lt;see langword="false" /&gt;</ph>(정의되지 않음)에서 <ph id="ph3">&lt;see langword="true" /&gt;</ph>로 변경되는 경우와 일치합니다.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Initialized">
          <source>This event will be raised whenever the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A&gt;</ph> methods are called.</source>
          <target state="translated">이 이벤트가 될 때마다 발생는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A&gt;</ph> 메서드가 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Initialized">
          <source>Calls to either method could have come from application code, or through the <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> processor behavior when a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> page is processed.</source>
          <target state="translated">두 방법 중 하나에 대 한 호출에서 응용 프로그램 코드 또는 나올 수는 <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> 프로세서 동작 때는 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 페이지를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Initialized">
          <source>Whether you choose to handle <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> depends on your requirements.</source>
          <target state="translated">처리 하도록 선택 하 든 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> 요구 사항에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Initialized">
          <source>If you do not need to read element properties, intend to reset properties, and do not need any layout information, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> might be the better event to act upon.</source>
          <target state="translated">요소 속성을 읽는 필요 하지 않는 경우 속성을 다시 설정 하려고 하 고 모든 레이아웃 정보가 필요 하지 않은 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> 더 나은 이벤트 작업을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Initialized">
          <source>If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> might be the better event to act upon.</source>
          <target state="translated">를 사용할 수 있도록이 요소의 모든 속성이 필요 하 고 레이아웃을 다시 설정할 수 있는 속성을 설정 하는 경우 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> 더 나은 이벤트 작업을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Initialized">
          <source>Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required.</source>
          <target state="translated">처리기에 필요한 새로운 레이아웃 단계는이 레이아웃 시스템에서 해석 하는 모든 속성이 다시 설정 하는 경우 재진입 주의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Initialized">
          <source>(You might need to check the <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;</ph> values on the property if you are unsure of which properties can require a new layout pass if they are changed.)</source>
          <target state="translated">(확인 해야 할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;</ph> 속성 새 레이아웃을 요구할 수의 확실 하지 않은 경우에 속성의 값 변경 된 경우에 전달 합니다.)</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Initialized">
          <source>For more information about the sequence of object events for a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, and also for several related application and element classes, see <bpt id="p1">[</bpt>Object Lifetime Events<ept id="p1">](~/docs/framework/wpf/advanced/object-lifetime-events.md)</ept>.</source>
          <target state="translated">개체에 대 한 이벤트 시퀀스에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, 또한 여러 관련 응용 프로그램 및 요소 클래스를 참조 하 고 <bpt id="p1">[</bpt>개체 수명 이벤트<ept id="p1">](~/docs/framework/wpf/advanced/object-lifetime-events.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.InputScope">
          <source>Gets or sets the context for input used by this <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>에서 사용하는 입력에 대한 컨텍스트를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InputScope">
          <source>The input scope, which modifies how input from alternative input methods is interpreted.</source>
          <target state="translated">대체 입력 메서드에서 입력이 해석되는 방법을 수정하는 입력 범위입니다.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InputScope">
          <source>The default value is <ph id="ph1">&lt;see langword="null" /&gt;</ph> (which results in a default handling of commands).</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이며, 이 값을 사용하면 명령이 기본 처리됩니다.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InputScope">
          <source>This dependency property inherits property values.</source>
          <target state="translated">속성 값이 종속성 속성을 상속 합니다.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InputScope">
          <source>If there are child elements without other values for <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.InputScope%2A&gt;</ph> established through local values or styles, then the property system will set the value to be the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.InputScope%2A&gt;</ph> value of the nearest ancestor element with this value assigned.</source>
          <target state="translated">에 대 한 다른 값이 없는 자식 요소가 있으면 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.InputScope%2A&gt;</ph> 속성 시스템이 값을 설정 하는 다음 로컬 값 또는 스타일을 통해 설정 된 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.InputScope%2A&gt;</ph> 이 값이 할당 된 가장 가까운 상위 항목 요소 값.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InputScope">
          <source>Although a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> syntax usage is listed and is syntactically allowed, setting this property in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> is not common.</source>
          <target state="translated">하지만 한 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 구문 사용 나열 되 고 구문이 허용 되는 경우이 속성을 설정할 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 이 일반적입니다.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InputScope">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InputScope">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.InputScope">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.InputScopeProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.InputScope" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.InputScope" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.IsInitialized">
          <source>Gets a value that indicates whether this element has been initialized, either during processing by a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> processor, or by explicitly having its <ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.EndInit" /&gt;</ph> method called.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 프로세서로 처리하는 중에 또는 해당 <ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.EndInit" /&gt;</ph> 메서드를 명시적으로 호출하여 이 요소를 초기화했는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsInitialized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is initialized per the aforementioned <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> processing or method calls; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">위의 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 처리 또는 메서드 호출을 통해 요소를 초기화했으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsInitialized">
          <source>This property may also be <ph id="ph1">`true`</ph> if this element has been moved within the logical tree such that it has a new parent element, and therefore becomes reloaded again.</source>
          <target state="translated">두이 일 수도 <ph id="ph1">`true`</ph> 새 부모 요소가 있으며 따라서 요소가 다시 로드 되도록이 요소의 논리적 트리 내에서 옮겨졌습니다 경우.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsInitialized">
          <source>This property is useful if you also are using <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;</ph>.</source>
          <target state="translated">이 속성은 또한 사용 하는 경우에 유용 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsInitialized">
          <source>Elements in the logical tree that is loaded by a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> processor are assured to be initialized.</source>
          <target state="translated">로드 하는 논리적 트리에서 요소는 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 프로세서 초기화를 보장 합니다.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsInitialized">
          <source>Elements not in the logical tree are initialized when <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;</ph> is called.</source>
          <target state="translated">논리 트리에 없는 요소를 초기화할 때 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;</ph> 라고 합니다.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsInitialized">
          <source>In absence of any specific handling of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;</ph>, this will happen as soon as the constructor returns the initialized result.</source>
          <target state="translated">없는 경우 모든 특정 처리 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;</ph>, 생성자 초기화 된 결과 반환 하는 즉시 발생 합니다.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.IsLoaded">
          <source>Gets a value that indicates whether this element has been loaded for presentation.</source>
          <target state="translated">표시를 위해 이 요소를 로드했는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsLoaded">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current element is attached to an element tree; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the element has never been attached to a loaded element tree.</source>
          <target state="translated">현재 요소가 요소 트리에 연결되어 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 요소가 로드된 요소 트리에 연결되지 않았으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsLoaded">
          <source>From a newly constructed <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, this property starts off <ph id="ph2">`false`</ph>, and remains <ph id="ph3">`true`</ph> after it is set to <ph id="ph4">`true`</ph>, even if the element is subsequently removed from a connected logical tree by code.</source>
          <target state="translated">새로 생성 된 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>,이 속성 설정을 시작할 <ph id="ph2">`false`</ph>, 상태를 유지 하 고 <ph id="ph3">`true`</ph> 로 설정 된 후 <ph id="ph4">`true`</ph>는 요소가 코드를 통해 연결 된 논리적 트리에서 제거 되는 경우에 합니다.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsLoaded">
          <source><ph id="ph1">`true`</ph> state is set by the general presentation logic when elements are loaded into the presentation engine.</source>
          <target state="translated"><ph id="ph1">`true`</ph> 요소 프레젠테이션 엔진에 로드 될 때 상태가 일반 프레젠테이션 논리에 의해 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsLoaded">
          <source>Typically, loaded elements are rendered, but not all <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived classes have a presentation, and other properties such as <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> can influence presentation.</source>
          <target state="translated">일반적으로 로드 된 요소는 렌더링 아니지만 일부 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 파생된 클래스에는 프레젠테이션 및과 같은 기타 속성 <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> 프레젠테이션에 영향을 줄 수 있습니다.</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsLoaded">
          <source>The following example implements two handlers: one is handling the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> event of the root element, so it is certain that the page root element is loaded because that is the significance of the event.</source>
          <target state="translated">다음 예제에서는 두 명의 처리기를 구현: 처리 하는 하나는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> 이벤트 이므로 이벤트의 의미 하기 때문에 페이지 루트 요소를 로드 되도록 특정 루트 요소입니다.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsLoaded">
          <source>The other handler is hooked to a user control, and calls <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.IsLoaded%2A&gt;</ph> to assure that the root element is loaded completely.</source>
          <target state="translated">사용자 정의 컨트롤 및 호출 다른 처리기 후크된 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.IsLoaded%2A&gt;</ph> 보증할 루트 요소에 로드 합니다.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.IsLoaded">
          <source>Both handlers call the same function (not shown) that will populate child elements with fresh data.</source>
          <target state="translated">이 두 처리기 자식 요소를 새 데이터로 채울 (표시 되지 않음) 동일한 함수를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Language">
          <source>Gets or sets localization/globalization language information that applies to an element.</source>
          <target state="translated">요소에 적용되는 지역화/세계화 언어 정보를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>The language information for this element.</source>
          <target state="translated">이 요소에 대한 언어 정보입니다.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>The default value is an <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XmlLanguage" /&gt;</ph> with its <ph id="ph2">&lt;see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /&gt;</ph> value set to the string "en-US".</source>
          <target state="translated">기본값은 해당 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XmlLanguage" /&gt;</ph> 값이 "en-US" 문자열로 설정된 <ph id="ph2">&lt;see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /&gt;</ph> 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>The string formats follow the RFC 3066 standard.</source>
          <target state="translated">문자열 형식의 RFC 3066 표준에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>For example, U.S. English is "en-US".</source>
          <target state="translated">예를 들어 미국 영어는 "EN-US"입니다.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>For more information on the values and format, see <ph id="ph1">&lt;xref:System.Windows.Markup.XmlLanguage&gt;</ph>.</source>
          <target state="translated">값 및 형식에 대 한 자세한 내용은 참조 하십시오. <ph id="ph1">&lt;xref:System.Windows.Markup.XmlLanguage&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>This dependency property inherits property values.</source>
          <target state="translated">속성 값이 종속성 속성을 상속 합니다.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>If there are child elements without other values for <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Language%2A&gt;</ph> established through local values or styles, the property system will set the value to be the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Language%2A&gt;</ph> value of the nearest ancestor element with this value assigned.</source>
          <target state="translated">에 대 한 다른 값이 없는 자식 요소가 있으면 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Language%2A&gt;</ph> 를 통해 로컬 값 또는 스타일 설정 속성 시스템은의 값으로 설정 된 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Language%2A&gt;</ph> 이 값이 할당 된 가장 가까운 상위 항목 요소 값입니다.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]</ph> defines the general meaning of the <ph id="ph2">`xml:lang`</ph> attribute.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]</ph> 일반적인 의미를 정의 고 <ph id="ph2">`xml:lang`</ph> 특성입니다.</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Language%2A&gt;</ph> essentially exposes the meaning of this attribute as a dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Language%2A&gt;</ph> 기본적으로이 특성의 의미는 종속성 속성으로 노출합니다.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Language%2A&gt;</ph> can be adjusted programmatically, and can participate in property system value inheritance in a way that parallels how the <ph id="ph2">`xml:lang`</ph> attribute can inherit to child element scope in <ph id="ph3">[!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Language%2A&gt;</ph> 프로그래밍 방식으로 조정할 수 있는 기능과 유사한 방식으로 속성 시스템 값을 상속에 참여할 수 있습니다 및 방법을 <ph id="ph2">`xml:lang`</ph> 특성의 자식 요소 범위를 상속할 수 <ph id="ph3">[!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>If you set <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Language%2A&gt;</ph>, that value becomes the <ph id="ph2">`xml:lang`</ph> and overwrites any previous value.</source>
          <target state="translated">설정 하는 경우 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Language%2A&gt;</ph>, 해당 값은 <ph id="ph2">`xml:lang`</ph> 하 고 이전 값을 덮어씁니다.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>For more information, see <bpt id="p1">[</bpt>xml:lang Handling in XAML<ept id="p1">](~/docs/framework/xaml-services/xml-lang-handling-in-xaml.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>xml: lang XAML의 처리<ept id="p1">](~/docs/framework/xaml-services/xml-lang-handling-in-xaml.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Language">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.LanguageProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Language" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Language" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>Gets or sets a graphics transformation that should apply to this element when  layout is performed.</source>
          <target state="translated">레이아웃을 수행할 때 이 요소에 적용해야 하는 그래픽 변환을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>The transform this element should use.</source>
          <target state="translated">이 요소가 사용해야 하는 변환입니다.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>The default is <ph id="ph1">&lt;see cref="P:System.Windows.Media.Transform.Identity" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="P:System.Windows.Media.Transform.Identity" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>In contrast to <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> will affect results of layout.</source>
          <target state="translated">달리 <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> 레이아웃의 결과 영향을 줍니다.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>Setting a transform provides powerful capabilities of scaling and rotating.</source>
          <target state="translated">변환을 설정 하면 크기 조정 및 회전의 강력한 기능을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>However, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> ignores <ph id="ph2">&lt;xref:System.Windows.Media.TranslateTransform&gt;</ph> operations.</source>
          <target state="translated">그러나 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> 무시 <ph id="ph2">&lt;xref:System.Windows.Media.TranslateTransform&gt;</ph> 작업 합니다.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>This is because the layout system behavior for child elements of a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> auto-corrects any offsets to the position of a scaled or rotated element into the layout and coordinate system of the parent element.</source>
          <target state="translated">때문에 이것이의 자식 요소에 대 한 레이아웃 시스템 동작은 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 자동 수정 레이아웃에 크기가 조정 되거나 회전 된 요소의 위치 및 좌표계 부모 요소에 대 한 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> can lead to poor application performance if you invoke it in a scenario that does not require a full pass by the layout system.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> 레이아웃 시스템에서 전체 과정을 필요로 하지 않는 시나리오에서 호출 하는 경우 응용 프로그램 성능이 저하 시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>When you apply a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> to the <ph id="ph2">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection of the <ph id="ph3">&lt;xref:System.Windows.Controls.Panel&gt;</ph>, it triggers a new pass by the layout system and forces all on-screen objects to be remeasured and rearranged.</source>
          <target state="translated">적용 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> 의 컬렉션은 <ph id="ph3">&lt;xref:System.Windows.Controls.Panel&gt;</ph>, 레이아웃 시스템에서 새로운 패스를 트리거합니다 및 모든 화면 트리거되고 하 고 다시 정렬 하려면 개체가 합니다.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>If you are updating the complete application <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>, this functionality might be exactly what you need.</source>
          <target state="translated">전체 응용 프로그램을 업데이트 하는 경우 <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>,이 기능은 정확히 일 수 있습니다 어떻게 해야 합니다.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>However, if you do not need a full layout pass, use the <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph> property, which does not invoke the layout system, and therefore, is typically a better choice for this scenario.</source>
          <target state="translated">그러나 전체 레이아웃 단계를 필요 하지 않은 경우 사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph> 속성 레이아웃 시스템을 호출 하지 않는 이며 따라서 일반적으로이 시나리오에 대 한 더 좋습니다.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>Example scenarios where <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> would be useful include: rotating elements such as menu components from horizontal to vertical or vice versa, scaling elements (zooming in) on focus, providing editing behavior, etc.</source>
          <target state="translated">예제 시나리오를 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> 것이 유용한 포함: 편집 동작 등을 제공 하는 포커스 (확대) 요소 크기를 조정 하는 가로 또는 그 반대로 세로로 메뉴 구성 요소 같은 요소를 회전 합니다.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>The following example shows how to apply a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> to an element.</source>
          <target state="translated">적용 하는 방법을 보여 주는 다음 예제는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> 요소에 있습니다.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>The example creates an instance of <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> and hosts it within a parent <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph>.</source>
          <target state="translated">이 예제에서는의 인스턴스를 만들고 <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> 부모 내에서 호스트 및 <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LayoutTransform">
          <source>It also uses the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> property to apply a <ph id="ph2">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph> to the <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
          <target state="translated">또한 사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> 적용할 속성을 한 <ph id="ph2">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph> 에 <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.LayoutTransformProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.LayoutTransform" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.LayoutTransform" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>Occurs when the element is laid out, rendered, and ready for interaction.</source>
          <target state="translated">요소를 배치하고 렌더링하여 상호 작용할 준비가 되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> is usually the last event raised in an element initialization sequence.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> 일반적으로 마지막 이벤트 발생 요소 초기화 시퀀스 합니다.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>It will always be raised after <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph>.</source>
          <target state="translated">후에 항상 발생 됩니다 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>Whether you choose to handle <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> depends on your requirements.</source>
          <target state="translated">처리 하도록 선택 하 든 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> 요구 사항에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>If you do not need to read element properties, intend to reset properties, and do not need any layout information, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> might be the better event to act upon.</source>
          <target state="translated">요소 속성을 읽는 필요 하지 않는 경우 속성을 다시 설정 하려고 하 고 모든 레이아웃 정보가 필요 하지 않은 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> 더 나은 이벤트 작업을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> might be the better event to act upon.</source>
          <target state="translated">를 사용할 수 있도록이 요소의 모든 속성이 필요 하 고 레이아웃을 다시 설정할 수 있는 속성을 설정 하는 경우 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> 더 나은 이벤트 작업을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required.</source>
          <target state="translated">처리기에 필요한 새로운 레이아웃 단계는이 레이아웃 시스템에서 해석 하는 모든 속성이 다시 설정 하는 경우 재진입 주의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>(You might need to check the <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;</ph> values on the property if you are unsure of which properties can require a new layout pass if they are changed.)</source>
          <target state="translated">(확인 해야 할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;</ph> 속성 새 레이아웃을 요구할 수의 확실 하지 않은 경우에 속성의 값 변경 된 경우에 전달 합니다.)</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>For more information about the sequence of object events for a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, and also for several related application and element classes, see <bpt id="p1">[</bpt>Object Lifetime Events<ept id="p1">](~/docs/framework/wpf/advanced/object-lifetime-events.md)</ept>.</source>
          <target state="translated">개체에 대 한 이벤트 시퀀스에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, 또한 여러 관련 응용 프로그램 및 요소 클래스를 참조 하 고 <bpt id="p1">[</bpt>개체 수명 이벤트<ept id="p1">](~/docs/framework/wpf/advanced/object-lifetime-events.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</source>
          <target state="translated">라우트된 이벤트를 직접 경로 따르지 않는, 에서만 발생 하는 동일한 요소 내에서 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> in a style.</source>
          <target state="translated">라우트된 이벤트에 다른 라우트된 이벤트 동작 지원 않는 직접: 액세스할 수 있는 처리기 컬렉션을 지원 하며으로 사용할 수는 <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> 스타일에서입니다.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;</ph> might both be raised on controls as a result of user-initiated system theme changes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;</ph> 시스템 사용자가 시작한 테마 변경의 결과로 컨트롤에서 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload.</source>
          <target state="translated">테마를 변경 하면 컨트롤 템플릿 및 포함 된 시각적 트리가 그러면 언로드하고 다시 로드 하기 위해 전체 컨트롤의 무효화 합니다.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>Therefore <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> cannot be assumed to occur only when a page is first loaded through navigation to the page.</source>
          <target state="translated">따라서 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> 만 페이지를 처음 로드할 때 페이지 탐색을 통해 적용 되려면 가정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Loaded">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.LoadedEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.Loaded" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.Loaded" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.LoadedEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.LoadedEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.LoadedEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.LoadedEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.LoadedEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.LogicalChildren">
          <source>Gets an enumerator for logical child elements of this element.</source>
          <target state="translated">이 요소의 논리적 자식 요소에 대한 열거자를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LogicalChildren">
          <source>An enumerator for logical child elements of this element.</source>
          <target state="translated">이 요소의 논리적 자식 요소에 대한 열거자입니다.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LogicalChildren">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LogicalChildren%2A&gt;</ph> allows you to iterate over child elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LogicalChildren%2A&gt;</ph> 자식 요소를 반복할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LogicalChildren">
          <source>This is useful for elements that may not have a defined, dedicated collection but still contain more than one child element, particularly <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> child elements.</source>
          <target state="translated">이 정의 되 고 전용 컬렉션이 수 있지만 여전히 특히 둘 이상의 자식 요소를 포함 하는 요소에 대 한 유용한 <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> 자식 요소입니다.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.LogicalChildren">
          <source>For more information on how to use <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LogicalChildren%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.AddLogicalChild%2A&gt;</ph>, see <bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](~/docs/framework/wpf/advanced/trees-in-wpf.md)</ept>.</source>
          <target state="translated">사용 하는 방법에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LogicalChildren%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.AddLogicalChild%2A&gt;</ph>, 참조 <bpt id="p1">[</bpt>In WPF<ept id="p1">](~/docs/framework/wpf/advanced/trees-in-wpf.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Margin">
          <source>Gets or sets the outer margin of an element.</source>
          <target state="translated">요소의 바깥쪽 여백을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>Provides margin values for the element.</source>
          <target state="translated">요소에 대한 여백 값을 제공합니다.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>The default value is a <ph id="ph1">&lt;see cref="T:System.Windows.Thickness" /&gt;</ph> with all properties equal to 0 (zero).</source>
          <target state="translated">기본값은 모든 속성이 0인 <ph id="ph1">&lt;see cref="T:System.Windows.Thickness" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>The margin is the space between this element and other elements that will be adjacent when layout creates the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.</source>
          <target state="translated">이 요소와 레이아웃을 만들 때 인접 하는 다른 요소 사이의 간격을 여백은 <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>Shared elements might be peer elements (such as other elements in the collection of a common parent control), or might also be this element's parent.</source>
          <target state="translated">공유 요소 피어 요소 (예: 다른 요소는 공통 부모 컨트롤의 컬렉션), 없거나이 요소의 부모 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Margin%2A&gt;</ph> is set as a <ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph> structure rather than as a number so that the margin can be set asymmetrically.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Margin%2A&gt;</ph> 으로 설정 됩니다는 <ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph> 구조 아닌 숫자로 여백을 비대칭적으로 설정할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Thickness&gt;</ph> structure itself supports string type conversion so that you can specify an asymmetric <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Margin%2A&gt;</ph> in <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> attribute syntax also.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Thickness&gt;</ph> 구조 자체 비대칭 지정할 수 있는 문자열 형식 변환을 지원 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Margin%2A&gt;</ph> 에 <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 특성 구문도 합니다.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>A non-zero margin applies space outside the element layout's <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</ph>.</source>
          <target state="translated">요소 레이아웃의 바깥쪽에 공간을 적용 하는 0이 아닌 여백 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>Margins are additive for sibling elements in a layout; for example, two adjacent elements both with a margin of 30 set on the adjoining edge would have 60 units of space between them.</source>
          <target state="translated">여백은 레이아웃; 형제 요소에 대 한 추가 예를 들어 인접 가장자리 30의 여백 모두 설정 하는 인접 요소 두 개 사이 공백 60 개의 것입니다.</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>Elements that have margins set will not typically constrain the size of the specified <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Margin%2A&gt;</ph> if the allotted rectangle space is not large enough for the margin plus the element content area.</source>
          <target state="translated">여백이 설정 되어 있는 요소는 지정 된 크기를 일반적으로 제한 하지 않는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Margin%2A&gt;</ph> 경우 할당 된 사각형 공간이 여백 및 요소 콘텐츠 영역에 대 한 만큼 크지 않습니다.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>The element content area will be constrained instead when layout is calculated.</source>
          <target state="translated">대신 레이아웃을 계산할 때 요소 콘텐츠 영역에 제한이 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>The only case where margins would be constrained also is if the content is already constrained all the way to zero.</source>
          <target state="translated">여백을 제한할 수는 유일한 경우는 또한 하는 경우이 콘텐츠가 이미 0까지 제약 조건이 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 특성 사용</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML 속성 요소 사용</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source><bpt id="p1">*</bpt>left, top, right, bottom<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>left, top, right, bottom<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>Number values between 0 and <ph id="ph1">&lt;xref:System.Double.PositiveInfinity&gt;</ph> that specify the four possible dimension properties of a <ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph> structure.</source>
          <target state="translated">0 사이의 숫자 값 및 <ph id="ph1">&lt;xref:System.Double.PositiveInfinity&gt;</ph> 의 4 가지 가능한 차원 속성을 지정 하는 <ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph> 구조입니다.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>The attribute usage will also accept abbreviated values that apply in the order provided, symmetrically and logically.</source>
          <target state="translated">특성 사용에 수락할 대칭적 및 논리적으로 제공 된 순서에 적용 되는 약어 값도 합니다.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>For instance, <ph id="ph1">`Margin="20"`</ph> will be interpreted to mean a <ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph> with all properties set to 20.</source>
          <target state="translated">예를 들어, <ph id="ph1">`Margin="20"`</ph> 의미를 해석할 수는 <ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph> 20으로 설정 하는 모든 속성을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source><ph id="ph1">`Margin="20,50"`</ph> will be interpreted to mean a <ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph> with <ph id="ph3">&lt;xref:System.Windows.Thickness.Left%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Thickness.Right%2A&gt;</ph> set to 20, and <ph id="ph5">&lt;xref:System.Windows.Thickness.Top%2A&gt;</ph> and <ph id="ph6">&lt;xref:System.Windows.Thickness.Bottom%2A&gt;</ph> set to 50.</source>
          <target state="translated"><ph id="ph1">`Margin="20,50"`</ph> 으로 해석 됩니다는 <ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph> 와 <ph id="ph3">&lt;xref:System.Windows.Thickness.Left%2A&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Windows.Thickness.Right%2A&gt;</ph> 를 20으로 설정 하 고 <ph id="ph5">&lt;xref:System.Windows.Thickness.Top%2A&gt;</ph> 및 <ph id="ph6">&lt;xref:System.Windows.Thickness.Bottom%2A&gt;</ph> 50으로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>The default unit for a <ph id="ph1">&lt;xref:System.Windows.Thickness&gt;</ph> measure is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph>.</source>
          <target state="translated">기본 단위는 <ph id="ph1">&lt;xref:System.Windows.Thickness&gt;</ph> 측정값은 <ph id="ph2">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>You can also specify other units by appending the unit type strings <ph id="ph1">`cm`</ph>, <ph id="ph2">`in`</ph>, or <ph id="ph3">`pt`</ph> to any measure.</source>
          <target state="translated">단위 형식 문자열을 추가 하 여 다른 단위를 지정할 수도 <ph id="ph1">`cm`</ph>, <ph id="ph2">`in`</ph>, 또는 <ph id="ph3">`pt`</ph> 모든 측정값을 합니다.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>Number values provided as <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> attributes need not specify decimal points (0 is acceptable, does not have to be provided as 0.0).</source>
          <target state="translated">숫자 값으로 제공 된 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 특성 소수점이 하를 지정 하지 않아도 (0이 허용 되는, 0.0으로 제공 될 필요는 없습니다.).</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>For more information on <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> usage, see <ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph>.</source>
          <target state="translated">대 한 자세한 내용은 <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> 사용량, 참조 <ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source><bpt id="p1">*</bpt>thicknessReference<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>thicknessReference<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>An object reference to an existing <ph id="ph1">&lt;xref:System.Windows.Thickness&gt;</ph>.</source>
          <target state="translated">개체 참조를 기존 <ph id="ph1">&lt;xref:System.Windows.Thickness&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>This might be a <ph id="ph1">`}`</ph>, a , or <ph id="ph2">`}`</ph> reference.</source>
          <target state="translated">이렇게 할 수는 <ph id="ph1">`}`</ph>a, 또는 <ph id="ph2">`}`</ph> 참조 합니다.</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>For more information on <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> usage, see <ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph>.</source>
          <target state="translated">대 한 자세한 내용은 <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> 사용량, 참조 <ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Margin">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.MarginProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Margin" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Margin" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>Gets or sets the maximum height constraint of the element.</source>
          <target state="translated">요소의 최대 높이 제약 조건을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>The maximum height of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>.</source>
          <target state="translated">요소의 최대 높이(<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>The default value is <ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>This value can be any value equal to or greater than 0.0.</source>
          <target state="translated">이 값은 0.0보다 크거나 같은 임의의 값일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source><ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph> is also valid.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph>도 사용 가능합니다.</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>This is one of three properties on <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that specify height information.</source>
          <target state="translated">이 세 가지 속성 중 하나에 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 높이 정보를 지정 하는 합니다.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>The other two are <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>.</source>
          <target state="translated">다른 두 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>If there is a conflict between these values, the order of application for actual height determination is first <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</ph> must be honored, then <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph>, and finally if each of these are within bounds, <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>.</source>
          <target state="translated">이러한 값 간에 충돌이 발생 하는 경우 실제 높이 결정 하기 위한 응용 프로그램의 순서는 첫 번째 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</ph> 다음, 해야 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph>, 마지막으로 이러한 각 범위 내에 있는 경우 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>The value restrictions on the <ph id="ph1">&lt;xref:System.Double&gt;</ph> value are enforced by a <ph id="ph2">&lt;xref:System.Windows.ValidateValueCallback&gt;</ph> mechanism.</source>
          <target state="translated">에 대 한 값 제한은 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값에 의해 적용 되는 <ph id="ph2">&lt;xref:System.Windows.ValidateValueCallback&gt;</ph> 메커니즘입니다.</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>If you attempt to set an invalid value a run-time exception is thrown.</source>
          <target state="translated">잘못 된 값을 설정 하려고 하면 런타임 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 특성 사용</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source><bpt id="p1">*</bpt>double<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>double<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>String representation of a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value equal to or greater than 0.0.</source>
          <target state="translated">문자열 표현은 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 0.0 보다 크거나 같은 값입니다.</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>This is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">이 값으로 해석 되는 <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph> 측정 합니다.</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">문자열은 소수점이 하를 명시적으로 포함 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">예를 들어 값의 <ph id="ph1">`1`</ph> 허용 됩니다.</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>The same <ph id="ph1">&lt;xref:System.Double&gt;</ph> range restrictions as mentioned in the Property Value section apply, except that you must use <bpt id="p1">[</bpt>x:Static Markup Extension<ept id="p1">](~/docs/framework/xaml-services/x-static-markup-extension.md)</ept> if you need to explicitly set the value to be <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph>.</source>
          <target state="translated">동일한 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 속성 값 섹션에 설명 된 대로 제한 된 범위 적용 <bpt id="p1">[</bpt>X:static 태그 확장<ept id="p1">](~/docs/framework/xaml-services/x-static-markup-extension.md)</ept> 값을 명시적으로 설정 해야 하는 경우 <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>A <bpt id="p1">*</bpt>double<ept id="p1">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated">A <bpt id="p1">*</bpt>double<ept id="p1">*</ept> 단위 선언 문자열 중 하나에 의해 다음 위에서 설명한 대로 값: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></source>
          <target state="translated"><ph id="ph1">`px`</ph> (기본값)은 <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source><ph id="ph1">`in`</ph> is inches; 1in==96px</source>
          <target state="translated"><ph id="ph1">`in`</ph> is inches; 1in==96px</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source><ph id="ph1">`cm`</ph> is centimeters; 1cm==(96/2.54) px</source>
          <target state="translated"><ph id="ph1">`cm`</ph> 센티미터; 1cm==(96/2.54) px</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source><ph id="ph1">`pt`</ph> is points; 1pt==(96/72) px</source>
          <target state="translated"><ph id="ph1">`pt`</ph> is points; 1pt==(96/72) px</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxHeight">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.MaxHeightProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.MaxHeight" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.MaxHeight" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>Gets or sets the maximum width constraint of the element.</source>
          <target state="translated">요소의 최대 너비 제약 조건을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>The maximum width of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>.</source>
          <target state="translated">요소의 최대 너비(<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>The default value is <ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>This value can be any value equal to or greater than 0.0.</source>
          <target state="translated">이 값은 0.0보다 크거나 같은 임의의 값일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source><ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph> is also valid.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph>도 사용 가능합니다.</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>This is one of three properties on <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that specify width information.</source>
          <target state="translated">이 세 가지 속성 중 하나에 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 너비 정보를 지정 하는 합니다.</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>The other two are <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>.</source>
          <target state="translated">다른 두 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>If there is a conflict between these values, the order of application for actual width determination is first <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</ph> must be honored, then <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>, and finally if each of these are within bounds, <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>.</source>
          <target state="translated">이러한 값 간에 충돌이 발생 하는 경우 실제 너비 결정 하기 위한 응용 프로그램의 순서는 첫 번째 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</ph> 다음, 해야 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>, 마지막으로 이러한 각 범위 내에 있는 경우 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>The value restrictions on the <ph id="ph1">&lt;xref:System.Double&gt;</ph> value are enforced by a <ph id="ph2">&lt;xref:System.Windows.ValidateValueCallback&gt;</ph> mechanism.</source>
          <target state="translated">에 대 한 값 제한은 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값에 의해 적용 되는 <ph id="ph2">&lt;xref:System.Windows.ValidateValueCallback&gt;</ph> 메커니즘입니다.</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>If you attempt to set an invalid value, a run-time exception is thrown.</source>
          <target state="translated">잘못 된 값을 설정 하려고 하면 런타임 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 특성 사용</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source><bpt id="p1">*</bpt>double<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>double<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>String representation of a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value equal to or greater than 0.0.</source>
          <target state="translated">문자열 표현은 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 0.0 보다 크거나 같은 값입니다.</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>This is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">이 값으로 해석 되는 <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph> 측정 합니다.</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">문자열은 소수점이 하를 명시적으로 포함 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">예를 들어 값의 <ph id="ph1">`1`</ph> 허용 됩니다.</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>The same <ph id="ph1">&lt;xref:System.Double&gt;</ph> range restrictions as mentioned in the Property Value section apply, except that you must use <bpt id="p1">[</bpt>x:Static Markup Extension<ept id="p1">](~/docs/framework/xaml-services/x-static-markup-extension.md)</ept> to set the value to be <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph>.</source>
          <target state="translated">동일한 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 속성 값 섹션에 설명 된 대로 제한 된 범위 적용 <bpt id="p1">[</bpt>X:static 태그 확장<ept id="p1">](~/docs/framework/xaml-services/x-static-markup-extension.md)</ept> 값으로 설정 하려면 <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>A <bpt id="p1">*</bpt>double<ept id="p1">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated">A <bpt id="p1">*</bpt>double<ept id="p1">*</ept> 단위 선언 문자열 중 하나에 의해 다음 위에서 설명한 대로 값: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></source>
          <target state="translated"><ph id="ph1">`px`</ph> (기본값)은 <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source><ph id="ph1">`in`</ph> is inches; 1in==96px</source>
          <target state="translated"><ph id="ph1">`in`</ph> is inches; 1in==96px</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source><ph id="ph1">`cm`</ph> is centimeters; 1cm==(96/2.54) px</source>
          <target state="translated"><ph id="ph1">`cm`</ph> 센티미터; 1cm==(96/2.54) px</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source><ph id="ph1">`pt`</ph> is points; 1pt==(96/72) px</source>
          <target state="translated"><ph id="ph1">`pt`</ph> is points; 1pt==(96/72) px</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MaxWidth">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.MaxWidthProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.MaxWidth" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.MaxWidth" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)">
          <source>The available size that the parent element can give to the child elements.</source>
          <target state="translated">부모 요소가 자식 요소에 제공할 수 있는 사용 가능한 크기입니다.</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)">
          <source>Implements basic measure-pass layout system behavior for <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>에 대한 기본 측정 처리 단계 레이아웃 시스템 동작을 구현합니다.</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)">
          <source>The desired size of this element in layout.</source>
          <target state="translated">레이아웃에서 이 요소에 필요한 크기입니다.</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)">
          <source>This method overrides <ph id="ph1">&lt;xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType&gt;</ph> to connect the  WPF core-level and WPF framework-level layout measure implementations.</source>
          <target state="translated">이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType&gt;</ph> WPF 핵심 수준 및 WPF 프레임 워크 수준 레이아웃 측정 구현을에 연결 합니다.</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> implementation seals the method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 구현에서는 메서드가 봉인 합니다.</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)">
          <source>To adjust the measure pass layout behavior of any element that builds on the WPF framework-level, override <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph> instead.</source>
          <target state="translated">WPF 프레임 워크 수준에 작성 되는 요소의 측정 단계 레이아웃 동작을 조정 하려면 재정의 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph> 대신 합니다.</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)">
          <source>To adjust the measure pass layout behavior of an element that deliberately does not build on the WPF framework-level or use <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, override <ph id="ph2">&lt;xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">조정 하려면 측정 처리 단계에서 의도적으로 또는 하지 않는 프레임 워크 수준 WPF에서 빌드된를 사용 하는 요소 중 레이아웃 동작 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, 재정의 <ph id="ph2">&lt;xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>The available size that this element can give to child elements.</source>
          <target state="translated">이 요소가 자식 요소에 제공할 수 있는 사용 가능한 크기입니다.</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>Infinity can be specified as a value to indicate that the element will size to whatever content is available.</source>
          <target state="translated">값으로 무한대를 지정하면 사용할 수 있는 콘텐츠에 따라 요소 크기가 지정됩니다.</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>-derived class.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 자식 요소에 필요한 레이아웃의 크기를 측정하고 <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> 파생 클래스의 크기를 결정합니다.</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>The size that this element determines it needs during layout, based on its calculations of child element sizes.</source>
          <target state="translated">이 요소에서 자식 요소 크기 계산에 따라 레이아웃 중에 필요하다고 결정하는 크기입니다.</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph> to implement custom layout sizing behavior for your element as it participates in the <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> layout system.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph> 에 참여 하는 대로 프로그램 요소에 대 한 사용자 지정 레이아웃 크기 조정 동작을 구현 하는 <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 레이아웃 시스템입니다.</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>Your implementation should do the following:</source>
          <target state="translated">구현 된 다음 수행 해야 합니다.</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>Iterate your element's particular collection of children that are part of layout, call <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> on each child element.</source>
          <target state="translated">요소의 특정 레이아웃, 호출의 일부인 자식 컬렉션을 반복 <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> 각 자식 요소에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>Immediately get <ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> on the child (this is set as a property after <ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> is called).</source>
          <target state="translated">즉시 <ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> 자식 (후 속성으로 설정 되어이 <ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> 라고).</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>Compute the net desired size of the parent based upon the measurement of the child elements.</source>
          <target state="translated">자식 요소의 측정에 따라 부모 net 원하는 크기를 계산 합니다.</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>The return value of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph> should be the element's own desired size, which then becomes the measure input for the parent element of the current element.</source>
          <target state="translated">반환 값 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph> 현재 요소의 부모 요소에 대 한 입력 측정 되는 요소 자체의 필요한 크기 여야 합니다.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>This same process continues through the layout system until the root element of the page is reached.</source>
          <target state="translated">페이지의 루트 요소에 도달할 때까지 동일한 프로세스에이 레이아웃 시스템을 통해 계속 합니다.</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>During this process, child elements might return a larger <ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> size than the initial <ph id="ph2">`availableSize`</ph> to indicate that the child element wants more space.</source>
          <target state="translated">이 과정에서 자식 요소를 반환할 수 있습니다 더 큰 <ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> 초기 보다 크기가 <ph id="ph2">`availableSize`</ph> 를 나타내는 자식 요소에 공간이 더 필요 합니다.</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>This might be handled in your own implementation by introducing a scrollable region, by resizing the parent control, by establishing some manner of stacked order, or any number of solutions for measuring or arranging content.</source>
          <target state="translated">이 측정 또는 콘텐츠를 정렬에 대 한 솔루션을 개수에 관계 없이 또는 누적 주문의 특정 방식으로 설정 하 여 부모 컨트롤 크기 조정 하 여 스크롤 가능한 영역을 도입 하 여 사용자 고유의 구현에서 처리 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>Elements should call <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> on each child during this process, otherwise the child elements will not be correctly sized or arranged.</source>
          <target state="translated">요소를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> 이 프로세스 동안 각 자식에 그렇지 않은 경우 자식 요소 되거나 되지 것입니다 수 올바르게 크기의 정렬 합니다.</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>The following non-compiling code shows this implementation pattern.</source>
          <target state="translated">다음 비 컴파일 코드는이 구현 패턴을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source><bpt id="p1">&lt;c&gt;</bpt>VisualChildren<ept id="p1">&lt;/c&gt;</ept> represents an enumerable collection property of children that your own element should define.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>원하는<ept id="p1">&lt;/c&gt;</ept> 고유한 요소를 정의 해야 하는 자식 항목의 열거 가능한 컬렉션 속성을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source>The property can be named anything.</source>
          <target state="translated">속성 원하는 이름을 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
          <source><bpt id="p1">&lt;c&gt;</bpt>VisualChildren<ept id="p1">&lt;/c&gt;</ept> is a placeholder name for purposes of this example, <bpt id="p2">&lt;c&gt;</bpt>VisualChildren<ept id="p2">&lt;/c&gt;</ept> is not an <ph id="ph1">[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]</ph> as provided by <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> or a part of a naming pattern..</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>원하는<ept id="p1">&lt;/c&gt;</ept> 이 예제에 대 한 자리 표시자 이름이 <bpt id="p2">&lt;c&gt;</bpt>원하는<ept id="p2">&lt;/c&gt;</ept> 않습니다는 <ph id="ph1">[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]</ph> 제공한 <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 또는 이름 지정 패턴의 일부가...</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>Gets or sets the minimum height constraint of the element.</source>
          <target state="translated">요소의 최소 높이 제약 조건을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>The minimum height of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>.</source>
          <target state="translated">요소의 최소 높이(<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>The default value is 0.0.</source>
          <target state="translated">기본값은 0.0입니다.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>This value can be any value equal to or greater than 0.0.</source>
          <target state="translated">이 값은 0.0보다 크거나 같은 임의의 값일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>However, <ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph> is NOT valid, nor is <ph id="ph2">&lt;see cref="F:System.Double.NaN" /&gt;</ph>.</source>
          <target state="translated">그러나 <ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph>와 <ph id="ph2">&lt;see cref="F:System.Double.NaN" /&gt;</ph>은 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>This is one of three properties on <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that specify height information.</source>
          <target state="translated">이 세 가지 속성 중 하나에 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 높이 정보를 지정 하는 합니다.</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>The other two are <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph>.</source>
          <target state="translated">다른 두 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>If there is a conflict between these values, the order of application for actual height determination is first <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</ph> must be honored, then <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph>, and finally if each of these are within bounds, <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>.</source>
          <target state="translated">이러한 값 간에 충돌이 발생 하는 경우 실제 높이 결정 하기 위한 응용 프로그램의 순서는 첫 번째 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</ph> 다음, 해야 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph>, 마지막으로 이러한 각 범위 내에 있는 경우 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>The value restrictions on the <ph id="ph1">&lt;xref:System.Double&gt;</ph> value are enforced by a <ph id="ph2">&lt;xref:System.Windows.ValidateValueCallback&gt;</ph> mechanism.</source>
          <target state="translated">에 대 한 값 제한은 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값에 의해 적용 되는 <ph id="ph2">&lt;xref:System.Windows.ValidateValueCallback&gt;</ph> 메커니즘입니다.</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>If you attempt to set an invalid value, a run-time exception is thrown.</source>
          <target state="translated">잘못 된 값을 설정 하려고 하면 런타임 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 특성 사용</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source><bpt id="p1">*</bpt>double<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>double<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>String representation of a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value equal to or greater than 0.0.</source>
          <target state="translated">문자열 표현은 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 0.0 보다 크거나 같은 값입니다.</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>This is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">이 값으로 해석 되는 <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph> 측정 합니다.</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">문자열은 소수점이 하를 명시적으로 포함 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">예를 들어 값의 <ph id="ph1">`1`</ph> 허용 됩니다.</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>The same <ph id="ph1">&lt;xref:System.Double&gt;</ph> range restrictions as mentioned in the Property Value section apply.</source>
          <target state="translated">동일한 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 속성 값 섹션에서 설명한 것 처럼 범위 제한 사항이 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>A <bpt id="p1">*</bpt>double<ept id="p1">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated">A <bpt id="p1">*</bpt>double<ept id="p1">*</ept> 단위 선언 문자열 중 하나에 의해 다음 위에서 설명한 대로 값: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></source>
          <target state="translated"><ph id="ph1">`px`</ph> (기본값)은 <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source><ph id="ph1">`in`</ph> is inches; 1in==96px</source>
          <target state="translated"><ph id="ph1">`in`</ph> is inches; 1in==96px</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source><ph id="ph1">`cm`</ph> is centimeters; 1cm==(96/2.54) px</source>
          <target state="translated"><ph id="ph1">`cm`</ph> 센티미터; 1cm==(96/2.54) px</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source><ph id="ph1">`pt`</ph> is points; 1pt==(96/72) px</source>
          <target state="translated"><ph id="ph1">`pt`</ph> is points; 1pt==(96/72) px</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinHeight">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.MinHeightProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.MinHeight" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.MinHeight" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>Gets or sets the minimum width constraint of the element.</source>
          <target state="translated">요소의 최소 너비 제약 조건을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>The minimum width of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>.</source>
          <target state="translated">요소의 최소 너비(<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>The default value is 0.0.</source>
          <target state="translated">기본값은 0.0입니다.</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>This value can be any value equal to or greater than 0.0.</source>
          <target state="translated">이 값은 0.0보다 크거나 같은 임의의 값일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>However, <ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph> is not valid, nor is <ph id="ph2">&lt;see cref="F:System.Double.NaN" /&gt;</ph>.</source>
          <target state="translated">그러나 <ph id="ph1">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph>와 <ph id="ph2">&lt;see cref="F:System.Double.NaN" /&gt;</ph>은 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>This is one of three properties on <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that specify width information.</source>
          <target state="translated">이 세 가지 속성 중 하나에 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 너비 정보를 지정 하는 합니다.</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>The other two are <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>.</source>
          <target state="translated">다른 두 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>If there is a conflict between these values, the order of application for actual width determination is first <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</ph> must be honored, then <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>, and finally if each of these are within bounds, <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>.</source>
          <target state="translated">이러한 값 간에 충돌이 발생 하는 경우 실제 너비 결정 하기 위한 응용 프로그램의 순서는 첫 번째 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</ph> 다음, 해야 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>, 마지막으로 이러한 각 범위 내에 있는 경우 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>The value restrictions on the <ph id="ph1">&lt;xref:System.Double&gt;</ph> value are enforced by a <ph id="ph2">&lt;xref:System.Windows.ValidateValueCallback&gt;</ph> mechanism.</source>
          <target state="translated">에 대 한 값 제한은 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값에 의해 적용 되는 <ph id="ph2">&lt;xref:System.Windows.ValidateValueCallback&gt;</ph> 메커니즘입니다.</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>If you attempt to set an invalid value, a run-time exception is thrown.</source>
          <target state="translated">잘못 된 값을 설정 하려고 하면 런타임 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 특성 사용</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source><bpt id="p1">*</bpt>double<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>double<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>String representation of a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value equal to or greater than 0.0.</source>
          <target state="translated">문자열 표현은 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 0.0 보다 크거나 같은 값입니다.</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>This is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">이 값으로 해석 되는 <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph> 측정 합니다.</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">문자열은 소수점이 하를 명시적으로 포함 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">예를 들어 값의 <ph id="ph1">`1`</ph> 허용 됩니다.</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>The same <ph id="ph1">&lt;xref:System.Double&gt;</ph> range restrictions as mentioned in the Property Value section apply.</source>
          <target state="translated">동일한 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 속성 값 섹션에서 설명한 것 처럼 범위 제한 사항이 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>A <bpt id="p1">*</bpt>double<ept id="p1">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated">A <bpt id="p1">*</bpt>double<ept id="p1">*</ept> 단위 선언 문자열 중 하나에 의해 다음 위에서 설명한 대로 값: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></source>
          <target state="translated"><ph id="ph1">`px`</ph> (기본값)은 <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source><ph id="ph1">`in`</ph> is inches; 1in==96px</source>
          <target state="translated"><ph id="ph1">`in`</ph> is inches; 1in==96px</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source><ph id="ph1">`cm`</ph> is centimeters; 1cm==(96/2.54) px</source>
          <target state="translated"><ph id="ph1">`cm`</ph> 센티미터; 1cm==(96/2.54) px</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source><ph id="ph1">`pt`</ph> is points; 1pt==(96/72) px</source>
          <target state="translated"><ph id="ph1">`pt`</ph> is points; 1pt==(96/72) px</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.MinWidth">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.MinWidthProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.MinWidth" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.MinWidth" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>The direction that focus is to be moved, as a value of the enumeration.</source>
          <target state="translated">포커스를 이동할 방향(열거형의 값)입니다.</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>Moves the keyboard focus away from this element and to another element in a provided traversal direction.</source>
          <target state="translated">키보드 포커스를 이 요소 반대쪽에 있는 다른 요소를 향해 제공된 이동 방향으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>Returns <ph id="ph1">&lt;see langword="true" /&gt;</ph> if focus is moved successfully; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the target element in direction as specified does not exist or could not be keyboard focused.</source>
          <target state="translated">포커스가 이동되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>를 반환하고, 지정된 방향에 대상 요소가 없거나 대상 요소에 키보드 포커스를 설정할 수 없으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>This implementation overrides <ph id="ph1">&lt;xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=nameWithType&gt;</ph> and seals the method.</source>
          <target state="translated">이 구현을 재정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=nameWithType&gt;</ph> 메서드를 봉인 합니다.</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>The following example implements a handler that handles several possible button inputs.</source>
          <target state="translated">다음 예제에서는 여러 가능한 단추 입력을 처리 하는 처리기를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>Each button represents a possible <ph id="ph1">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph>.</source>
          <target state="translated">각 단추는 가능한 나타냅니다 <ph id="ph1">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>The handler tracks the element with current keyboard focus, and calls <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MoveFocus%2A&gt;</ph> on that element, by specifying the appropriate <ph id="ph2">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph> as initialization for the <ph id="ph3">&lt;xref:System.Windows.Input.TraversalRequest&gt;</ph> type parameter provided.</source>
          <target state="translated">호출 하 고 현재 키보드 포커스가 있는 요소를 추적 하는 처리기 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MoveFocus%2A&gt;</ph> 적절 한을 지정 하 여 해당 요소에 대해 <ph id="ph2">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph> 에 대 한 초기화로는 <ph id="ph3">&lt;xref:System.Windows.Input.TraversalRequest&gt;</ph> 제공 된 매개 변수를 입력 합니다.</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Name">
          <source>Gets or sets the identifying name of the element.</source>
          <target state="translated">요소를 식별하는 이름을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Name">
          <source>The name provides a reference so that code-behind, such as event handler code, can refer to a markup element after it is constructed during processing by a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> processor.</source>
          <target state="translated">이 이름은 이벤트 처리기 코드 등의 코드 숨김 항목이 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 프로세스가 수행하는 처리 중에 생성된 후에 태그 요소를 참조할 수 있도록 참조를 제공합니다.</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>The name of the element.</source>
          <target state="translated">요소의 이름을 나타내며</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>The default is an empty string.</source>
          <target state="translated">기본값은 빈 문자열입니다.</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>The most common usage of this property is to specify a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> element name as an attribute in markup.</source>
          <target state="translated">지정 하는 것이 속성의 가장 일반적인 용도 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 태그에서 특성으로 요소 이름입니다.</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>This property essentially provides a WPF framework-level convenience property to set the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](~/docs/framework/xaml-services/x-name-directive.md)</ept>.</source>
          <target state="translated">이 속성에는 기본적으로 설정 하는 WPF 프레임 워크 수준 편의 속성은 제공 된 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> <bpt id="p1">[</bpt>X:name 지시문<ept id="p1">](~/docs/framework/xaml-services/x-name-directive.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Names must be unique within a namescope.</source>
          <target state="translated">이름은 이름 범위 내에서 고유 해야 합니다.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>For more information, see <bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>WPF XAML 이름 범위<ept id="p1">](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Getting a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> if you are creating elements in code is not common.</source>
          <target state="translated">가져오기는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> 에서 요소를 만드는 경우 코드는 일반적인 없습니다.</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>If you have the appropriate reference in code already, you can just call methods and properties on the element reference and will not generally need the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>.</source>
          <target state="translated">코드에 적절 한 참조가 이미 있는 경우 방금 메서드를 호출할 수 있습니다 및 요소에서 속성 참조는 일반적으로 필요 하지는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>An exception to this is if the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> string has some overloaded meaning, for instance if it is useful to display that name in <ph id="ph2">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>.</source>
          <target state="translated">이 예외가 발생 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> 문자열에 오버 로드 된 의미가, 예를 들어 경우에서 이름을 표시 하는 것이 유용 <ph id="ph2">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Setting a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> from code-behind if the original <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> was set from markup is also not recommended, and changing the property after loading the <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> will not change the original object reference.</source>
          <target state="translated">설정는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> 코드 숨김 파일에서 하는 경우 원래 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> 태그에서 설정한은 또한 권장 되지 않으며, 로딩 후 속성을 변경는 <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 원래 개체 참조를 변경 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>The object references are created only when the underlying namescopes are explicitly created during parsing.</source>
          <target state="translated">개체 참조는 구문 분석 중에 기본 이름 범위를 명시적으로 만든 경우에 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>You must specifically call <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RegisterName%2A&gt;</ph> to make an effective change to the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> property of an already loaded element.</source>
          <target state="translated">명시적으로 호출 해야 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RegisterName%2A&gt;</ph> 확인에 대 한 효과적인 변경 하는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> 이미 로드 된 요소의 속성입니다.</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>One notable case where setting <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> from code is important is when registering names for elements that storyboards will run against, so that they can be referenced at run time.</source>
          <target state="translated">해야 하는 대표적인에서는 설정 경우 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> 코드에서 런타임 시 참조할 수 있도록 storyboard 요소를 실행에 대 한 이름을 등록할 때입니다.</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Before you can register a name, might also need to instantiate and assign a <ph id="ph1">&lt;xref:System.Windows.NameScope&gt;</ph> instance.</source>
          <target state="translated">이름을 등록할 수 있습니다, 전에 인스턴스화하고 할당 해야 할 수도 <ph id="ph1">&lt;xref:System.Windows.NameScope&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>See the Example section, or <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>.</source>
          <target state="translated">예 섹션을 참조 하거나 <bpt id="p1">[</bpt>적기<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> from code has limited applications, but getting an element by <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> is more common.</source>
          <target state="translated">설정 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> 코드에서 제한적으로 응용 프로그램, 하지만 여 요소를 가져오기 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> 이 더 일반적입니다.</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>One particular scenario is if your application supports a navigation model where pages reload into the application, and the run time code is not necessarily code-behind defined for that page.</source>
          <target state="translated">하나의 특정 한 시나리오는 응용 프로그램은 여기서에 응용 프로그램 페이지가 다시 로드 하 고 런타임 코드는 반드시 해당 페이지에 대해 정의 된 코드 숨김 하지 탐색 모델을 지원 하는 경우입니다.</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>The utility method <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindName%2A&gt;</ph>, which is available from any <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, can find any element by <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> in the logical tree for that element, searching the tree recursively as necessary.</source>
          <target state="translated">유틸리티 메서드 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindName%2A&gt;</ph>에서 사용 하지 않는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, 별로 모든 요소를 찾을 수 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> 해당 요소의 논리적 트리에서 필요에 따라 재귀적으로 트리를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Or you can use the <ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph> static method of <ph id="ph2">&lt;xref:System.Windows.LogicalTreeHelper&gt;</ph>, which also takes a <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> string as an argument.</source>
          <target state="translated">또는 사용할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph> 의 정적 메서드 <ph id="ph2">&lt;xref:System.Windows.LogicalTreeHelper&gt;</ph>, 또한를 사용 하는 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> 인수로 문자열입니다.</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Typically used root elements (<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> for example) implement the interface <ph id="ph3">&lt;xref:System.Windows.Markup.INameScope&gt;</ph>.</source>
          <target state="translated">일반적으로 사용 되는 루트 요소 (<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> 예를 들어) 인터페이스를 구현 <ph id="ph3">&lt;xref:System.Windows.Markup.INameScope&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Implementations of this interface are expected to enforce that names be unambiguous within their scope.</source>
          <target state="translated">이 인터페이스의 구현 적용 이름이 해당 범위 내에서 모호한 것으로 예상 됩니다.</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>The root elements that define this interface also define the namescope behavior boundaries for all the related <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph>.</source>
          <target state="translated">또한이 인터페이스를 정의 하는 루트 요소에는 모든의 이름 범위 동작 경계를 정의 하면 관련 <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> property also serves as an identifier for other processes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> 속성 다른 프로세스에 대 한 식별자 역할도 합니다.</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>For instance, the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> automation model will use <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> as the AutomationId for clients and providers.</source>
          <target state="translated">예를 들어,는 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 자동화 모델에서 사용할 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> 클라이언트 및 공급자에 대 한 AutomationId로 합니다.</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>The string values used for <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> have some restrictions, as imposed by the underlying <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](~/docs/framework/xaml-services/x-name-directive.md)</ept> defined by the <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> specification.</source>
          <target state="translated">에 사용 되는 문자열 값 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> 내부에서 부여 된 몇 가지 제한이 <bpt id="p1">[</bpt>X:name 지시문<ept id="p1">](~/docs/framework/xaml-services/x-name-directive.md)</ept> 정의한는 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 사양입니다.</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Most notably, a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> must start with a letter or the underscore character (_), and must contain only letters, digits, or underscores.</source>
          <target state="translated">가장 주목할 만한는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> 는 문자 또는 밑줄 문자 (_)로 시작 해야 하며 문자, 숫자 또는 밑줄만 포함 해야 합니다.</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>For more information, see <bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>WPF XAML 이름 범위<ept id="p1">](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> is one of the very few dependency properties that cannot be animated (<ph id="ph2">&lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt;</ph> is <ph id="ph3">`true`</ph> in metadata), because the name itself is vital for targeting an animation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> 애니메이션을 적용할 수 있는 종속성 속성이 거의 중 하나입니다 (<ph id="ph2">&lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt;</ph> 은 <ph id="ph3">`true`</ph> 메타 데이터에) 이름 자체는 애니메이션을 대상으로 하는 것에 대 한 중요 한 이기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Data binding a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> is technically possible, but is an extremely uncommon scenario because a data-bound <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> cannot serve the main intended purpose of the property: to provide an identifier connection point for code-behind.</source>
          <target state="translated">데이터 바인딩은 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> 기술적으로 가능 하기 때문에 매우 드문 경우 이지만 데이터 바인딩된 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> 속성의 주요 용도 제공할 수 없습니다: 코드 숨김에 대 한 식별자 연결 지점을 제공 하기.</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>The following example sets the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> property in code, and then registers the name into the newly created <ph id="ph2">&lt;xref:System.Windows.NameScope&gt;</ph> by calling <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.RegisterName%2A&gt;</ph>.</source>
          <target state="translated">다음 예에서는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> 코드에서 속성에서 이름을 새로 만든 범위로 다음 등록 하 고 <ph id="ph2">&lt;xref:System.Windows.NameScope&gt;</ph> 호출 하 여 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.RegisterName%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Name">
          <source>The technique illustrated here is a requirement for animating with storyboards, because storyboards require targeting by the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>, and cannot be targeted by object reference.</source>
          <target state="translated">여기에서 설명 하는 방법에는 스토리 보드 필요 하 여 대상으로 하기 때문에 스토리 보드를 사용한 애니메이션에 대 한 요구 사항은 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>, 및 개체 참조에 의해 대상으로 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.NameProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Name" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Name" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source>When overridden in a derived class, is invoked whenever application code or internal processes call <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.ApplyTemplate" /&gt;</ph>.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 이 메서드는 응용 프로그램 코드나 내부 프로세스에서 <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.ApplyTemplate" /&gt;</ph>을 호출할 때마다 호출됩니다.</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source>Templates are the section of an element's completed visual tree that comes from the Template property of a <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> that is applied for the element.</source>
          <target state="translated">서식 파일은 섹션 요소 완료 된 시각적 트리의 템플릿 속성에서 제공 되는 <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> 요소에 대해 적용 되는 합니다.</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source>For more information, see <bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](~/docs/framework/wpf/controls/styling-and-templating.md)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>스타일 지정 및 템플릿<ept id="p1">](~/docs/framework/wpf/controls/styling-and-templating.md)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source>Derived classes of <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> can use this method as a notification for a variety of possible scenarios:</source>
          <target state="translated">파생 클래스의 <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> 가능한 시나리오는 다양 한 알림으로이 메서드를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source>You can call your own implementation of code that builds the remainder of an element visual tree.</source>
          <target state="translated">나머지 요소 시각적 트리 부분을 구성 하는 코드의 사용자 지정 구현을 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source>You can run code that relies on the visual tree from templates having been applied, such as obtaining references to named elements that came from a template.</source>
          <target state="translated">서식 파일에서 생성 되는 명명 된 요소에 대 한 참조를 가져오는 등 적용 된 템플릿의 시각적 트리를 사용 하는 코드를 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source>You can introduce services that only make sense to exist after the visual tree from templates is complete.</source>
          <target state="translated">템플릿에서 시각적 트리 완료 된 후에 구성 하는 서비스를 도입할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source>You can set states and properties of elements within the template that are dependent on other factors.</source>
          <target state="translated">상태 및 기타 요인에 의존 하는 템플릿 내에서 요소 속성을 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source>For instance, property values might only be discoverable by knowing the parent element, or when a specific derived class uses a common template.</source>
          <target state="translated">예를 들어, 속성 값이 부모 요소를 확인 하 여만 검색할 수 있습니다 또는 클래스에 공통 된 템플릿을 사용 하 여 특정 파생 된 경우.</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source>Implementers should always call the base implementation before their own implementation.</source>
          <target state="translated">구현자 구현에서는 자체 구현 항상 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> itself has no default implementation, but intervening classes might.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> 자체 기본값이 없는 구현 하지만 중간 클래스 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnApplyTemplate">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Controls.Control" /&gt;</ph> offers a similar override, <ph id="ph2">&lt;see cref="M:System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Controls.Control" /&gt;</ph> 재정의 유사한 제공 <ph id="ph2">&lt;see cref="M:System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
          <source>Provides data about the event.</source>
          <target state="translated">이벤트에 대한 데이터를 제공합니다.</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
          <source>Invoked whenever an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /&gt;</ph> routed event reaches this class in its route.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /&gt;</ph> 라우트된 이벤트가 해당 경로에서 이 클래스에 도달할 때마다 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
          <source>You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</source>
          <target state="translated">상속의 중간 클래스가이 메서드를 구현 하는 경우에 기본 구현을 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
          <source>The purpose of this method is somewhat similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 다소 비슷합니다 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 방법: 인스턴스 처리기 대신 클래스 처리기를 사용 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 이벤트 인수는 소스를 구현 해야 합니다 하므로 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 했을 수 있으므로 계정에는 속성 (및 다시 대부분의 경우에서 이벤트를 발생 시키면 안).</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
          <source>Subclasses of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> could choose to call private class handler methods when the event is received along the route.</source>
          <target state="translated">서브 클래스 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
          <source>One potential scenario is to take the arguments of the event and deliberately mark the event as handled.</source>
          <target state="translated">하나의 잠재적 시나리오는 이벤트의 인수를 사용 하 고 신중 하 게 처리 된 것으로 이벤트를 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
          <source>Invoked whenever an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /&gt;</ph> routed event reaches this class in its route.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /&gt;</ph> 라우트된 이벤트가 해당 경로에서 이 클래스에 도달할 때마다 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
          <source>You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</source>
          <target state="translated">상속의 중간 클래스가이 메서드를 구현 하는 경우에 기본 구현을 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
          <source>The purpose of this method is somewhat similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 다소 비슷합니다 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 방법: 인스턴스 처리기 대신 클래스 처리기를 사용 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 이벤트 인수는 소스를 구현 해야 합니다 하므로 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 했을 수 있으므로 계정에는 속성 (및 다시 대부분의 경우에서 이벤트를 발생 시키면 안).</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
          <source>Subclasses of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> could choose to call private class handler methods when the event is received along the route.</source>
          <target state="translated">서브 클래스 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
          <source>One potential scenario is to take the arguments of the event and deliberately mark the event as handled.</source>
          <target state="translated">하나의 잠재적 시나리오는 이벤트의 인수를 사용 하 고 신중 하 게 처리 된 것으로 이벤트를 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Invoked whenever an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotFocus" /&gt;</ph> event reaches this element in its route.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotFocus" /&gt;</ph> 이벤트가 해당 경로에서 이 요소에 도달할 때마다 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Unlike some other On* methods exposed by the base elements, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnGotFocus%2A&gt;</ph> does have a default implementation.</source>
          <target state="translated">에 다른 달리 * 기본 요소에 의해 노출 되는 메서드 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnGotFocus%2A&gt;</ph> 기본 구현에는 합니다.</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Specifically, it has an implementation that overrides the null implementation in the next level of base element down, <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotFocus%2A&gt;</ph>.</source>
          <target state="translated">구체적으로,이 다운 기본 요소의 다음 수준에서 null의 구현을 재정의 하는 구현이 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotFocus%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>When invoked, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnGotFocus%2A&gt;</ph> sets appropriate focus behavior on this element in cases where the event originated from the current element due to keyboard focus.</source>
          <target state="translated">호출 되 면 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnGotFocus%2A&gt;</ph> 이벤트가 키보드 포커스로 인해 현재 요소에서 시작 하는 경우에이 요소에 적절 한 포커스 동작을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnGotFocus%2A&gt;</ph> handler does not mark the event arguments as handled, even when focus is set to the current element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnGotFocus%2A&gt;</ph> 처리기 포커스 현재 요소에 설정 된 경우에를 처리 하는 이벤트 인수를 표시 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>If the event's source was another element in the tree (not the current element), the handler does nothing.</source>
          <target state="translated">이벤트의 소스는 현재 요소가 아닌 트리의 다른 요소를 한 경우 처리기는 아무 작업도 수행 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>You can override this method in order to change the default focus behavior on your element, but be aware that changing focus behavior in this way might be better accomplished by not allowing the element to be focusable at all (see <ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph>).</source>
          <target state="translated">이러한 방식으로 포커스 동작을 변경 수 쉽게 수행할 수는 요소 전혀 허용 하지 않도록 수 있지만 요소에 대 한 기본 포커스 동작을 변경 하기 위해이 메서드를 재정의할 수 있습니다 (참조 <ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>If you intend to mark the event handled in the arguments, you should be aware of consequences on event handling in other parent elements in the element tree.</source>
          <target state="translated">인수에서 처리 하는 이벤트를 표시 하려는 경우에 이벤트 처리 요소 트리에 있는 다른 부모 요소에 대 한 영향 알고 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Because this handler acts on an event with a bubbling routing, setting the focus to the current <ph id="ph1">&lt;paramref name="sender" /&gt;</ph> per the event arguments may not be appropriate.</source>
          <target state="translated">이 처리기는 버블링 라우팅을 사용 하 여 이벤트에서 역할을 하므로 현재 포커스를 설정 <ph id="ph1">&lt;paramref name="sender" /&gt;</ph> 이벤트 당 인수 하지 적합할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Focus might need to go to either a composite child element or to a parent element, depending on the compositing of certain controls.</source>
          <target state="translated">포커스 또는 부모 요소에 따라 특정 컨트롤의 합성 복합 자식 요소에 이동 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Therefore marking a focus event as handled is only recommended if the entirety of the visual tree that the event is routing through is part of compositing of a control that you authored.</source>
          <target state="translated">따라서 처리 포커스 이벤트를 표시 전체는 이벤트가 라우트되는 시각적 트리를 작성 하는 컨트롤의 합성의 일부인 경우만 권장 됩니다.</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.Initialized" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.Initialized" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)">
          <source>This method is invoked whenever <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.IsInitialized" /&gt;</ph> is set to <ph id="ph2">&lt;see langword="true" /&gt;</ph> internally.</source>
          <target state="translated">이 메서드는 내부적으로 <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.IsInitialized" /&gt;</ph>가 <ph id="ph2">&lt;see langword="true" /&gt;</ph>로 설정될 때마다 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)">
          <source>This particular On* method is not a class handler hook.</source>
          <target state="translated">이 on * 메서드가 클래스 처리기 후크 아닙니다.</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)">
          <source>Nor does it exactly follow the established <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> On* method convention that the matching event could be suppressed by overriding this method and not calling the base implementation.</source>
          <target state="translated">따르지도 않습니다 정확 하 게 설정 된 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 에 * 메서드 규칙이이 메서드를 재정의 하는 기본 구현을 호출 하지 일치 하는 이벤트를 표시 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)">
          <source>Note that the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.IsInitialized%2A&gt;</ph> property is read-only, so you cannot set <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.IsInitialized%2A&gt;</ph> to force initialization behavior.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.IsInitialized%2A&gt;</ph> 속성은 읽기 전용으로 설정할 수 없습니다. 이므로 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.IsInitialized%2A&gt;</ph> 초기화 동작을 강제로 합니다.</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)">
          <source>Setting the initialization state is intended to be done only by the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> framework.</source>
          <target state="translated">초기화 상태 설정은 에서만 수행할 수는 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 프레임 워크입니다.</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)">
          <source>The default implementation of this virtual method raises the event as described above.</source>
          <target state="translated">이 가상 메서드를 기본 구현하면 위에서 설명한 것처럼 이벤트가 발생합니다.</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)">
          <source>Overrides should call the base implementation to preserve this behavior.</source>
          <target state="translated">이 동작을 유지하려면 재정의 과정에서 기본 구현을 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)">
          <source>If you fail to call the base implementation, not only will you not raise the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.Initialized" /&gt;</ph> event as is generally expected of a <ph id="ph2">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> derived class, but you will also suppress two important style and theme style initialization operations that are implemented by this base implementation.</source>
          <target state="translated">기본 구현을 호출 하지 않으면 뿐만 아니라 발생 하지 않을 <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.Initialized" /&gt;</ph> 이벤트의 일반적으로 필요한 것으로 <ph id="ph2">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> 클래스를 파생 하지만 두 가지 중요 한 스타일 및 테마 스타일 초기화 작업을도 비활성화 됩니다 이 기본 구현에 의해 구현 됩니다.</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The event data that describes the property that changed, as well as old and new values.</source>
          <target state="translated">기존 값과 새 값 그리고 변경된 속성을 설명하는 이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked whenever the effective value of any dependency property on this <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> has been updated.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>에서 종속성 속성의 유효 값이 업데이트될 때마다 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The specific dependency property that changed is reported in the arguments parameter.</source>
          <target state="translated">변경된 특정 종속성 속성이 인수 매개 변수에서 보고됩니다.</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Overrides <ph id="ph1">&lt;see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" /&gt;</ph>를 재정의합니다.</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method is not intended to generally detect property changes or invalidations.</source>
          <target state="translated">일반적으로 속성 변경 내용 또는 무효화를 검색 하려면이 메서드를 사용 하는 것이 없습니다.</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>It is instead intended for modifications of the general invalidation pattern if certain information is known about wide classifications of properties.</source>
          <target state="translated">대신 것은 일반적인 무효화 패턴의 수정에 대 한 속성의 광범위 한 분류에 대 한 특정 정보가 알려져 있는 경우.</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method is potentially invoked many times during the life of an object.</source>
          <target state="translated">이 메서드는 개체의 수명 동안 여러 번 호출 될 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you can achieve better performance if you override the metadata of specific properties and then attach <ph id="ph1">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> functions for individual properties.</source>
          <target state="translated">따라서 특정 속성의 메타 데이터를 무시 하 고 다음 연결 성능을 향상 시킬 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> 개별 속성에 대 한 함수입니다.</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>However, you would use this method if a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</source>
          <target state="translated">그러나, 사용이 메서드는 경우는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 많은 수의 값을 상호 연관 된 종속성 속성을 포함 하는 렌더링 동작 다시 실행 해야 다양 한 관련 속성 무효화의 경우와 같은 논리를 포함 하는 경우 또는 합니다.</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Note that there is an identically named <ph id="ph1">`OnPropertyChanged`</ph> method with a different signature (the parameter type is <ph id="ph2">&lt;xref:System.ComponentModel.PropertyChangedEventArgs&gt;</ph>) that can appear on a number of classes.</source>
          <target state="translated">같은 이름의 <ph id="ph1">`OnPropertyChanged`</ph> 를 다른 서명으로 메서드 (매개 변수 형식이 <ph id="ph2">&lt;xref:System.ComponentModel.PropertyChangedEventArgs&gt;</ph>)는 다양 한 클래스에 나타날 수 있는 합니다.</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>That <ph id="ph1">`OnPropertyChanged`</ph> is used for data object notifications, and is part of the contract for <ph id="ph2">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`OnPropertyChanged`</ph> 데이터 개체 알림에 사용 되 고에 대 한 계약의 일부인 <ph id="ph2">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Always call the base implementation, as the first operation in your implementation.</source>
          <target state="translated">항상 구현에서 첫 번째 작업으로 기본 구현을 호출 합니다.</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Failure to do this will significantly disable the entire <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> property system, which causes incorrect values to be reported.</source>
          <target state="translated">이렇게 하지 않으면 전체 없게 되므로 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 속성 시스템에 잘못 된 값을 보고 합니다.</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The specific <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> implementation is also responsible for maintaining proper state for a variety of properties that affect the visible user interface.</source>
          <target state="translated">특정 <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> 또한 구현은 다양 한 표시 되는 사용자 인터페이스에 영향을 주는 속성에 대 한 적절 한 상태를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>These include invalidating the visual tree based on changes to style at appropriate times.</source>
          <target state="translated">여기에 여기에 변경 내용을 기반으로 하는 시각적 트리를 무효화 합니다.</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>Details of the old and new size involved in the change.</source>
          <target state="translated">변경과 관련한 이전 크기와 새 크기의 세부 정보입니다.</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.SizeChanged" /&gt;</ph> event, using the specified information as part of the eventual event data.</source>
          <target state="translated">최종적인 이벤트 데이터의 일부로 지정된 정보를 사용하여 <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.SizeChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>This method overrides <ph id="ph1">&lt;xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt;</ph>를 재정의합니다.</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>If you call this method you will reset the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph> property, the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</ph> property, or both, depending on what is specified as changed in the supplied arguments, and will you always raise the event.</source>
          <target state="translated">다시 설정 되며이 메서드를 호출 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph> 속성을는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</ph> 제공된 된 인수에서 속성 또는 두로 지정 된 내용에 따라 변경 되 고 됩니다 하면 항상 이벤트를 발생 시킵니다.</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>Do not override this method for typical layout scenarios.</source>
          <target state="translated">에 대 한 특정 레이아웃 시나리오에서는이 메서드를 재정의 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>The layout system operates in a deliberately asynchronous way to assure that all possible layout arrange and measure cases are accounted for.</source>
          <target state="translated">이 레이아웃 시스템은 가능한 모든 레이아웃 정렬 및에 대 한 측정 사례를 고려 하는 비동기적 방법을 작동 합니다.</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>The layout system override methods <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /&gt;</ph> are usually sufficient for any required layout customization.</source>
          <target state="translated">메서드를 재정의 하는 레이아웃 시스템 <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /&gt;</ph> 모든 필요한 레이아웃 사용자 지정에 대 한 일반적으로 충분 합니다.</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /&gt;</ph> is exposed as a virtual.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /&gt;</ph> 가상으로 노출 됩니다.</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>You can override <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /&gt;</ph> to correct for exceptional cases where a run-time behavioral change related to input events combined with control recomposition in response might give inaccurate layout information.</source>
          <target state="translated">재정의할 수 <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /&gt;</ph> 재 컴퍼지션에 대 한 응답에서을 런타임에 동작 변화 입력 제어와 결합 하는 이벤트와 관련 된 예외적인 경우 해결 레이아웃 정보가 부정확 해질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>You may still override this method in derived classes (it is protected but not sealed).</source>
          <target state="translated">파생된 클래스 (보호 이지만 선택 되지 않았습니다)에서이 메서드를 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>Always call the base implementation to preserve the behavior mentioned above, unless you have very specific reasons for disabling default WPF framework-level rendering behavior.</source>
          <target state="translated">항상 기본 WPF 프레임 워크 수준 렌더링 동작을 사용 하지 않도록 설정 하는 매우 구체적인 이유가 없는 한 위에서 언급 한 동작을 유지 하는 기본 구현을 호출 합니다.</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>Failing to raise the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.SizeChanged" /&gt;</ph> event will cause non-standard layout behavior if using the standard WPF framework-level layout system implementation.</source>
          <target state="translated">실패를 발생 시키는 <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.SizeChanged" /&gt;</ph> 이벤트 하면 표준 WPF 프레임 워크 수준 레이아웃 시스템 구현을 사용 하는 경우 레이아웃을 사용할 수 없는 동작이 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)">
          <source>The old style.</source>
          <target state="translated">이전 스타일입니다.</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)">
          <source>The new style.</source>
          <target state="translated">새 스타일입니다.</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)">
          <source>Invoked when the style in use on this element changes, which will invalidate the layout.</source>
          <target state="translated">이 요소에 사용하는 스타일이 변경되어 레이아웃이 무효화되면 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)">
          <source>This method has a default implementation that sets an internal flag that notes the style changed condition.</source>
          <target state="translated">이 메서드는 스타일 변경 상태를 기록 하는 내부 플래그를 설정 하는 기본 구현입니다.</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)">
          <source>You should not typically have to override this method.</source>
          <target state="translated">일반적으로이 메서드를 재정의할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)">
          <source>Any change to a style that involves a measure or arrange change would already trigger another render cycle, assuming a typical implementation of <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /&gt;</ph><ph id="ph2"> / </ph><ph id="ph3">&lt;see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /&gt;</ph>, or the defaults.</source>
          <target state="translated">측정값을 관련 된 스타일을 변경 또는 변경을 구현 하는 일반적인 것으로 가정 하는 또 다른 렌더링 주기를 트리거하지 이미 정렬 <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /&gt;</ph> <ph id="ph2"> / </ph> <ph id="ph3">&lt;see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /&gt;</ph>, 또는 기본값입니다.</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)">
          <source>Overrides of <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" /&gt;</ph> might be appropriate if your <ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /&gt;</ph><ph id="ph3"> / </ph><ph id="ph4">&lt;see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /&gt;</ph> implementations were deliberately optimizing or supporting partial updates, but still wanted to apply changes to styles more directly.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" /&gt;</ph> 적합할 수 있습니다 하는 경우 프로그램 <ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /&gt;</ph> <ph id="ph3"> / </ph> <ph id="ph4">&lt;see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /&gt;</ph> 구현 된 최적화 하거나 보다 직접적 스타일에 변경 내용을 적용 하 려 하지만 부분 업데이트를 지원 합니다.</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)">
          <source>(The partial updates would be an attempt to avoid multiple incremental calls to <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /&gt;</ph> on any child elements).</source>
          <target state="translated">(부분 업데이트를 여러 번 증분 호출 피하기 위한 것 <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /&gt;</ph> 모든 자식 요소에 대해).</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)">
          <source>Provides data about the event.</source>
          <target state="translated">이벤트에 대한 데이터를 제공합니다.</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)">
          <source>Invoked whenever an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /&gt;</ph> routed event reaches this class in its route.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /&gt;</ph> 라우트된 이벤트가 해당 경로에서 이 클래스에 도달할 때마다 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)">
          <source>You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</source>
          <target state="translated">상속의 중간 클래스가이 메서드를 구현 하는 경우에 기본 구현을 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)">
          <source>The purpose of this method is somewhat similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 다소 비슷합니다 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 방법: 인스턴스 처리기 대신 클래스 처리기를 사용 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 이벤트 인수는 소스를 구현 해야 합니다 하므로 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 했을 수 있으므로 계정에는 속성 (및 다시 대부분의 경우에서 이벤트를 발생 시키면 안).</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)">
          <source>Subclasses of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> could choose to call private class handler methods when the event is received along the route.</source>
          <target state="translated">서브 클래스 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)">
          <source>One potential scenario is to take the arguments of the event and deliberately mark the event as handled.</source>
          <target state="translated">하나의 잠재적 시나리오는 이벤트의 인수를 사용 하 고 신중 하 게 처리 된 것으로 이벤트를 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)">
          <source>Provides data about the event.</source>
          <target state="translated">이벤트에 대한 데이터를 제공합니다.</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)">
          <source>Invoked whenever the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /&gt;</ph> routed event reaches this class in its route.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /&gt;</ph> 라우트된 이벤트가 해당 경로에서 이 클래스에 도달할 때마다 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)">
          <source>You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</source>
          <target state="translated">상속의 중간 클래스가이 메서드를 구현 하는 경우에 기본 구현을 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)">
          <source>The purpose of this method is somewhat similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 다소 비슷합니다 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 방법: 인스턴스 처리기 대신 클래스 처리기를 사용 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 이벤트 인수는 소스를 구현 해야 합니다 하므로 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 했을 수 있으므로 계정에는 속성 (및 다시 대부분의 경우에서 이벤트를 발생 시키면 안).</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)">
          <source>Subclasses of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> could choose to call private class handler methods when the event is received along the route.</source>
          <target state="translated">서브 클래스 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)">
          <source>One potential scenario is to take the arguments of the event and deliberately mark the event as handled to shorten the route.</source>
          <target state="translated">이벤트의 인수를 사용 하 여 의도적으로 사용 이벤트를 경로 단축할 수 있습니다는 한 가지 잠재적인 시나리오입니다.</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>The old parent element.</source>
          <target state="translated">이전 부모 요소입니다.</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>May be <ph id="ph1">&lt;see langword="null" /&gt;</ph> to indicate that the element did not have a visual parent previously.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph>인 경우 이전에 해당 요소에 시각적 부모가 없었던 것입니다.</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Invoked when the parent of this element in the visual tree is changed.</source>
          <target state="translated">시각적 트리에서 이 요소의 부모가 변경될 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Overrides <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" /&gt;</ph>를 재정의합니다.</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>The visual tree is potentially different from the logical tree because it omits elements that do not render visually, such as collections, and expands some elements on the basis of their theme and style compositing.</source>
          <target state="translated">시각적 트리 컬렉션 같은 시각적으로 렌더링 되지 않는 요소를 생략 하기 때문에 잠재적으로 다른 논리적 트리에서 고 해당 테마 및 스타일 합치기를 기반으로 일부 요소를 확장 합니다.</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>For more information, see <bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](~/docs/framework/wpf/advanced/trees-in-wpf.md)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>WPF의 트리<ept id="p1">](~/docs/framework/wpf/advanced/trees-in-wpf.md)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>The default implementation of this virtual method queries for the new parent, raises various initialization events, and sets internal flags about initialization state of the <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> as appropriate.</source>
          <target state="translated">새 부모에 대 한 쿼리, 다양 한 초기화 이벤트를 발생 시키는 및의 초기화 상태에 대 한 내부 플래그를 설정 합니다.이 가상 메서드의 기본 구현에서 <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> 적절 하 게 합니다.</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Finally, it calls the successive base implementations as declared by <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>, which in turn calls its base in <ph id="ph2">&lt;see cref="T:System.Windows.Media.Visual" /&gt;</ph>.</source>
          <target state="translated">마지막으로 연속적인으로 선언 된 기본 구현을 호출 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>를 호출 하는 기본 <ph id="ph2">&lt;see cref="T:System.Windows.Media.Visual" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Always call the base implementation to preserve this behavior, otherwise the element tree behavior for this element when declared as a child of another element may not be as expected.</source>
          <target state="translated">항상이 동작을 유지 하는 기본 구현을 호출, 그렇지 않으면 다른 요소의 자식으로 선언 된 경우이 요소에 대 한 요소 트리 동작 예상 대로 합니다.</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>A few existing <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> classes override this method, for example: <ph id="ph2">&lt;see cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Windows.Controls.ListBoxItem.OnVisualParentChanged(System.Windows.DependencyObject)" /&gt;</ph>.</source>
          <target state="translated">몇 가지 기존 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 클래스 예를 들어이 메서드를 재정의 합니다: <ph id="ph2">&lt;see cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Windows.Controls.ListBoxItem.OnVisualParentChanged(System.Windows.DependencyObject)" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>The most common scenario is to enforce that the new parent must be a particular type.</source>
          <target state="translated">가장 일반적인 시나리오는 하는지는 제한이 새 부모 특정 형식입니다.</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>This might involve throwing an exception if the new parent failed some manner of type test.</source>
          <target state="translated">그러면 새 부모 형식 테스트를 통과 하지 못하면 예외를 throw 만들어질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>A specialized version of this scenario exists in implementations for list items and menu items, which do not make any sense outside a parent visual that owns an appropriate collection to store them in.</source>
          <target state="translated">이 시나리오의 특수 버전은 목록 항목 및 메뉴 항목에 사용할 수 없는 외부 부모 visual에 저장 하는 적절 한 컬렉션을 소유한에 대 한 구현을에 존재 합니다.</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Note that these cases do not necessarily raise exceptions, because there might be designer scenarios that rely on reparenting elements that are momentarily without their "regular" parents.</source>
          <target state="translated">Note 구현은 "일반" 부모 없이 일시적으로 사용 되는 디자이너 시나리오가 있을 수 있으므로 이러한 경우 반드시 예외를 발생 하 고 있지 않습니다.</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>This method is also overridden in certain elements that are typically the root element, such as  <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated">일반적으로 루트 요소와 같은 특정 요소에서이 메서드를 재정의 <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Another case is elements that are the apparent root element in markup but which autogenerate a greater infrastructure in a compiled logical tree (such as <ph id="ph1">&lt;see cref="T:System.Windows.Controls.Page" /&gt;</ph>).</source>
          <target state="translated">경우에도 요소 태그 있는데에서는 루트 요소를 보다 큰 인프라 컴파일된 논리 트리를 자동 생성 (같은 <ph id="ph1">&lt;see cref="T:System.Windows.Controls.Page" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Windows.Controls.Page" /&gt;</ph> implementations deliberately seal the method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Windows.Controls.Page" /&gt;</ph> 구현에서는 메서드가 봉인 합니다.</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source>Gets or sets a value that indicates whether this element incorporates style properties from theme styles.</source>
          <target state="translated">이 요소가 테마 스타일의 스타일 속성을 포함할지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element does not use theme style properties; all style-originating properties come from local application styles, and theme style properties do not apply.</source>
          <target state="translated">이 요소가 테마 스타일 속성을 사용하지 않으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다. 이 경우 스타일에서 생성되는 모든 속성은 로컬 응용 프로그램 스타일에서 가져오며, 테마 스타일 속성은 적용되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> if application styles apply first, and then theme styles apply for properties that were not specifically set in application styles.</source>
          <target state="translated">응용 프로그램 스타일이 먼저 적용된 다음 응용 프로그램 스타일에 구체적으로 설정되어 있지 않은 속성에 대해 테마 스타일이 적용되면 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source>The most common usage of this property is an indirect usage within the setter of a style that is supplying a themed style.</source>
          <target state="translated">이 속성의 가장 일반적인 사용법은 테마 스타일을 제공 하는 스타일의 setter 내에서 간접적으로 사용 합니다.</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source>If you set <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A&gt;</ph> to <ph id="ph2">`true`</ph> on a control, you will be suppressing the default control template supplied by the theme styles.</source>
          <target state="translated">설정한 경우 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A&gt;</ph> 를 <ph id="ph2">`true`</ph> 컨트롤에 표시 되지 것입니다 테마 스타일에서 제공 하는 기본 컨트롤 템플릿을 합니다.</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source>That control template typically includes the content presenter and other composited elements that provide basic <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> functionality and visualization for the control.</source>
          <target state="translated">컨트롤 템플릿에 일반적으로 콘텐츠 발표자 및 기본 제공 하는 다른 복합 요소 포함 <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> 기능 및 컨트롤에 대 한 시각화입니다.</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source>If you want the control to continue to support the same features as the default theme styles, you must supply an alternate style with a control template that replicates the same structure.</source>
          <target state="translated">계속 기본 테마 스타일과 같은 기능을 지원 하려면 제어 하려는 경우 동일한 구조를 복제 하는 컨트롤 템플릿 사용 하 여 대체 스타일을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source>For more information, see <bpt id="p1">[</bpt>Control Authoring Overview<ept id="p1">](~/docs/framework/wpf/controls/control-authoring-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>컨트롤 제작 개요<ept id="p1">](~/docs/framework/wpf/controls/control-authoring-overview.md)</ept>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.OverridesDefaultStyle">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.OverridesDefaultStyleProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Parent">
          <source>Gets the logical parent  element of this element.</source>
          <target state="translated">이 요소의 논리적 부모 요소를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>This element's logical parent.</source>
          <target state="translated">이 요소의 논리적 부모입니다.</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Parent%2A&gt;</ph> may be <ph id="ph2">`null`</ph> in cases where an element was instantiated, but is not attached to any logical tree that eventually connects to the page level root element, or the application object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Parent%2A&gt;</ph> 되었을 <ph id="ph2">`null`</ph> 요소 인스턴스화 하지만 결국 페이지 수준 루트 요소 또는 응용 프로그램 개체에 연결 하는 모든 논리적 트리에 연결 되지 않은 경우에 합니다.</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>Note that the logical parent of an element can potentially change depending on your application's functionality, and keeping the value of this property will not reflect that change.</source>
          <target state="translated">Note 요소의 논리적 부모 응용 프로그램의 기능에 따라 변경 될 수 있습니다 및이 속성의 값을 유지 해도 해당 변경 내용을 반영 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>You typically should get the value immediately before you need it.</source>
          <target state="translated">일반적으로 필요한 직전 값을 가져올 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>See <bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](~/docs/framework/wpf/advanced/trees-in-wpf.md)</ept> for more information about logical tree  traversal, and the scenarios where using  <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Parent%2A&gt;</ph> as a technique of parent element discovery is appropriate.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>In WPF<ept id="p1">](~/docs/framework/wpf/advanced/trees-in-wpf.md)</ept> 시나리오 및 논리적 트리 이동 방법에 대 한 자세한 내용은 사용 하 여 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Parent%2A&gt;</ph> 검색은 해당 부모 요소의 기법으로 합니다.</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>The property engine will potentially recalculate all property values of an element when it is reparented, because some properties inherit values through the logical tree.</source>
          <target state="translated">속성 엔진에서는 다시 계산할 수 요소의 모든 속성 값, 부모가 때 일부 속성 논리 트리를 통해 값을 상속 하기 때문에 합니다.</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> that applies for bindings can also change when elements are reparented.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> 적용 되는 바인딩 요소는 부모가 때 변경도 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>Changing an element's parent is typically only done through manipulation of collections, by using dedicated add or remove methods, or through setting content properties of elements.</source>
          <target state="translated">요소의 부모는 일반적으로을 통해 변경할 컬렉션 조작, 전용을 사용 하 여 추가 또는 제거 메서드, 또는 요소의 콘텐츠 속성을 설정 하는 과정입니다.</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>The most typical scenario for using the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Parent%2A&gt;</ph> property is to obtain a reference and then get various <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> property values from the parent.</source>
          <target state="translated">사용 하는 가장 일반적인 시나리오는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Parent%2A&gt;</ph> 속성은 다양 한를 가져온 후 한 참조를 가져올를 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 부모 개체에서 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>For templates, the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Parent%2A&gt;</ph> of the template eventually will be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">서식 파일에 대 한는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Parent%2A&gt;</ph> 템플릿의 됩니다 <ph id="ph2">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>To get past this point and extend into the logical tree where the template is actually applied, use <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;</ph>.</source>
          <target state="translated">이 지점을 벗어나 템플릿을 실제로 적용 되는 논리 트리로 확장을 사용 하 여 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>Note that this property does not report visual tree parents in cases where these vary from the logical tree parents.</source>
          <target state="translated">이 속성은 논리적 트리 부모에서 다른 경우에는 시각적 트리 부모 항목을 보고 하지 note 합니다.</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>Visual tree parents are not typically important for general application cases but may be the desired parent elements for certain visual level cases.</source>
          <target state="translated">시각적 트리 부모 일반 응용 프로그램의 경우에 일반적으로 중요 하지 않지만 특정 시각적 수준의 경우에 대 한 원하는 상위 요소가 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Media.VisualTreeHelper&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Media.VisualTreeHelper&gt;</ph>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>The following example shows code that checks for an element's parent, and then uses property values from the parent to set properties on the child element to match.</source>
          <target state="translated">다음 예제에서는 요소의 부모에 대 한 확인 하 고 다음 부모 개체에서 속성 값을 사용 하 여 일치 하는 자식 요소에 속성을 설정 하는 코드를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Parent">
          <source>In this case these are properties that affect the rendering size.</source>
          <target state="translated">이 경우 이들은 렌더링 크기에 영향을 주는 속성입니다.</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)">
          <source>The child element reporting the change.</source>
          <target state="translated">변경을 보고하는 자식 요소입니다.</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)">
          <source>Supports incremental layout implementations in specialized subclasses of <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>의 특수 서브클래스에서 증분 레이아웃 구현을 지원합니다.</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" /&gt;</ph> is invoked when a child element has invalidated a property that is marked in metadata as affecting the parent's measure or arrange passes during layout.</source>
          <target state="translated">레이아웃 중 자식 요소에서 부모의 측정 또는 정렬 전달에 영향을 미치는 것으로 표시된 메타데이터의 속성을 무효화한 경우 <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" /&gt;</ph>가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)">
          <source>If this element has a child element on which some property was invalidated and the property was marked as <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A&gt;</ph> in property metadata during registration, this method is invoked.</source>
          <target state="translated">이 요소에는 자식 요소에 무효화 된 일부 속성 및 속성으로 표시 된 <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A&gt;</ph> 등록 하는 동안 속성 메타 데이터에이 메서드가 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)">
          <source>The method invocation notifies the parent element which particular child element must be re-measured if this element supports partial (incremental) update of layout.</source>
          <target state="translated">메서드 호출에이 요소 레이아웃의 부분 (증분) 업데이트를 지 원하는 경우 특정 자식 요소에 다시 측정 해야 하는 부모 요소를 알립니다.</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)">
          <source>By default, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> does not support incremental layout, and in the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> class this method has no default implementation.</source>
          <target state="translated">기본적으로 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 증분 레이아웃을 지원 하지 않습니다 및는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 클래스이 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)">
          <source>The scenario where overriding this method would be necessary is not common, because it requires you to modify the default layout system behavior.</source>
          <target state="translated">기본 레이아웃 시스템 동작을 수정 해야 하기 때문에이 메서드를 재정의할 수 없는 필요한 시나리오 일반적이 지 않습니다.</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)">
          <source>An example implementation scenario might be if a class had type limitations for possible child elements that are significantly more restrictive than the WPF framework-level layout system.</source>
          <target state="translated">WPF 프레임 워크 수준 레이아웃 시스템 보다 더 제한적인 가능한 자식 요소에 대 한 형식 제한을 클래스의 경우에 이러한 구현 방식을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)">
          <source>Because of the nature of these custom elements, property changes could be deliberately deferred when you implement some custom layout behavior.</source>
          <target state="translated">이러한 사용자 지정 요소 이기 때문에 속성 변경 내용은 연기 될 수 의도적으로 일부 사용자 지정 레이아웃 동작을 구현 하는 경우.</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)">
          <source>For instance, measure/arrange method overrides, which try to optimize the child element render pass, could be deferred for certain types of changes that would ordinarily result in another layout pass.</source>
          <target state="translated">예를 들어, 특정 유형의 다른 레이아웃 과정에서 일반적으로 발생 하는 변경 내용에 대 한 자식 요소를 최적화 하려고 하는 렌더링 패스, 측정값/정렬 메서드 재정의 지연 시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>The direction for which a prospective focus change should be determined.</source>
          <target state="translated">예상 포커스 변경을 결정할 방향입니다.</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>Determines the next element that would receive focus relative to this element for a provided focus movement direction, but does not actually move the focus.</source>
          <target state="translated">제공된 포커스 이동 방향에 대해 이 요소를 기준으로 포커스를 받을 다음 요소를 결정하며 실제로 포커스를 이동하지는 않습니다.</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>The next element that focus would move to if focus were actually traversed.</source>
          <target state="translated">포커스를 실제로 이동하면 포커스가 이동할 다음 요소입니다.</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>May return <ph id="ph1">&lt;see langword="null" /&gt;</ph> if focus cannot be moved relative to this element for the provided direction.</source>
          <target state="translated">제공된 방향에 대해 이 요소를 기준으로 포커스를 이동할 수 없는 경우 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 반환될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MoveFocus%2A&gt;</ph> is the related method that actually does move focus.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MoveFocus%2A&gt;</ph> 실제로 포커스를 이동 하는 관련된 방법.</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>The following example implements a handler that handles several possible button inputs, each button representing a possible <ph id="ph1">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 여러 가능한 단추 입력 가능한 나타내는 각 단추를 처리 하는 처리기를 구현 <ph id="ph1">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>The handler tracks the element with current keyboard focus, and calls <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.PredictFocus%2A&gt;</ph> on that element, and specifies the appropriate <ph id="ph2">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph> as initialization for the <ph id="ph3">&lt;xref:System.Windows.Input.TraversalRequest&gt;</ph> type parameter provided.</source>
          <target state="translated">호출 하 고 현재 키보드 포커스가 있는 요소를 추적 하는 처리기 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.PredictFocus%2A&gt;</ph> 해당 요소에 적절 한을 지정 하 고 <ph id="ph2">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph> 에 대 한 초기화로는 <ph id="ph3">&lt;xref:System.Windows.Input.TraversalRequest&gt;</ph> 제공 된 매개 변수를 입력 합니다.</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>Instead of moving to that element as <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MoveFocus%2A&gt;</ph> would do, the handler changes the physical dimensions of the predicted focus destination for visualization purposes.</source>
          <target state="translated">해당 요소로 이동 하는 대신 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MoveFocus%2A&gt;</ph> 못하는, 처리기 시각화를 위해 예측된 포커스 대상의 실제 크기를 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>Specified one of the following directions in the <ph id="ph1">&lt;see cref="T:System.Windows.Input.TraversalRequest" /&gt;</ph>: <ph id="ph2">&lt;see cref="F:System.Windows.Input.FocusNavigationDirection.Next" /&gt;</ph>, <ph id="ph3">&lt;see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" /&gt;</ph>, <ph id="ph4">&lt;see cref="F:System.Windows.Input.FocusNavigationDirection.First" /&gt;</ph>, <ph id="ph5">&lt;see cref="F:System.Windows.Input.FocusNavigationDirection.Last" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.TraversalRequest" /&gt;</ph>에서 <ph id="ph2">&lt;see cref="F:System.Windows.Input.FocusNavigationDirection.Next" /&gt;</ph>, <ph id="ph3">&lt;see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" /&gt;</ph>, <ph id="ph4">&lt;see cref="F:System.Windows.Input.FocusNavigationDirection.First" /&gt;</ph>, <ph id="ph5">&lt;see cref="F:System.Windows.Input.FocusNavigationDirection.Last" /&gt;</ph> 중 한 방향을 지정합니다.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>These directions are not legal for <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /&gt;</ph> (but they are legal for <ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" /&gt;</ph>).</source>
          <target state="translated">이러한 방향은 <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /&gt;</ph>에 사용할 수 없지만 <ph id="ph2">&lt;see cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" /&gt;</ph>에는 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)">
          <source>Name to use for the specified name-object mapping.</source>
          <target state="translated">지정된 이름-개체 매핑에 사용할 이름입니다.</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)">
          <source>Object for the mapping.</source>
          <target state="translated">매핑을 위한 개체입니다.</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)">
          <source>Provides an accessor that simplifies access to the <ph id="ph1">&lt;see cref="T:System.Windows.NameScope" /&gt;</ph> registration method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.NameScope" /&gt;</ph> 등록 메서드에 대한 액세스를 간소화하는 접근자를 제공합니다.</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)">
          <source>This method is a convenience method for calling <ph id="ph1">&lt;xref:System.Windows.NameScope.RegisterName%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 호출에 대 한 편리한 메서드입니다 <ph id="ph1">&lt;xref:System.Windows.NameScope.RegisterName%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)">
          <source>The implementation will check successive parent elements until it finds the applicable <ph id="ph1">&lt;xref:System.Windows.NameScope&gt;</ph> implementation, which is found by finding an element that implements <ph id="ph2">&lt;xref:System.Windows.Markup.INameScope&gt;</ph>.</source>
          <target state="translated">적용 가능한 될 때까지 구현 연속 된 부모 요소를 확인 합니다 <ph id="ph1">&lt;xref:System.Windows.NameScope&gt;</ph> 구현 하는 요소를 검색 하 여 액세스할 수 있는 구현 <ph id="ph2">&lt;xref:System.Windows.Markup.INameScope&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)">
          <source>For more information about namescopes, see <bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)</ept>.</source>
          <target state="translated">네임 스페이스에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>WPF XAML 이름 범위<ept id="p1">](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RegisterName%2A&gt;</ph> is necessary in order to correctly hook up animation storyboards for applications when created in code.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RegisterName%2A&gt;</ph> 올바르게 코드에서 만들어진 경우 응용 프로그램에 대 한 애니메이션 스토리 보드를 연결 하기 위해 필요 합니다.</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)">
          <source>This is because one of the key storyboard properties, <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;</ph>, uses a run-time name lookup instead of being able to take a reference to a target element.</source>
          <target state="translated">속성을 스토리 보드 키 중 하나 때문에 이것이 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;</ph>, 대상 요소에 대 한 참조 하는 대신 런타임 이름 조회를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)">
          <source>This is true even if that element is accessible by reference from the code.</source>
          <target state="translated">해당 요소는 코드에서 참조 하 여 액세스할 수 있는 경우에 마찬가지입니다.</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)">
          <source>For more information on why you need to register names for storyboard targets, see <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>.</source>
          <target state="translated">스토리 보드 대상에 대 한 이름을 등록 해야 이유에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>적기<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)">
          <source>The element to remove.</source>
          <target state="translated">제거할 요소입니다.</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)">
          <source>Removes the provided object from this element's logical tree.</source>
          <target state="translated">이 요소의 논리적 트리에서 제공된 개체를 제거합니다.</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> updates the affected logical tree parent pointers to keep in sync with this deletion.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>는 이 삭제 작업과 동기화하기 위해 해당 작업의 영향을 받는 논리 트리의 부모 포인터를 업데이트합니다.</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)">
          <source>Use this method for the implementation of collections on objects that represent logical children of an element.</source>
          <target state="translated">논리 자식 요소를 나타내는 개체에는 컬렉션의 구현에이 메서드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)">
          <source>This might be done in property getters or setters, class handlers of <ph id="ph1">`Changed`</ph> events, constructors, or within the collection types themselves.</source>
          <target state="translated">속성 getter 또는 setter의 클래스 처리기에서 수행할 수 있습니다이 <ph id="ph1">`Changed`</ph> 이벤트, 생성자 또는 형식 자체는 컬렉션 내에서.</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)">
          <source>For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the provided base control class' content models are appropriate.</source>
          <target state="translated">컨트롤 작성자에 대 한이 수준에서 논리 트리를 조작 하지 않는 것이 좋을 제공 된 기본 컨트롤 클래스의 정적 콘텐츠 모델 중 적절 한 합니다.</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)">
          <source>Consider subclassing at the level of <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Controls.HeaderedItemsControl&gt;</ph>.</source>
          <target state="translated">수준에서 서브클래싱 고려 <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Windows.Controls.HeaderedItemsControl&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)">
          <source>These classes provide a content model with particular enforcement of logical children through dedicated <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph>, as well as support for other features typically desirable in a <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> control such as styling through templates.</source>
          <target state="translated">이러한 클래스는 특정 방식으로 전용 통해 논리 자식 적용을 사용 하 여 콘텐츠 모델 제공 <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph>에서 일반적으로 사용 가능한 다른 기능에 대 한 지원 및는 <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 스타일 템플릿을 통해 같은 제어 합니다.</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)">
          <source>The following example implements a <ph id="ph1">`Child`</ph> property on a custom <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that does its own visual layer implementation.</source>
          <target state="translated">다음 예제에서는 구현 된 <ph id="ph1">`Child`</ph> 사용자 지정 속성 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 자체 시각적 계층 구현을 수행 하는 합니다.</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)">
          <source>The property's setter is designed so that if the value changes, the old value is removed from the logical tree, as well as a class-specific visual collection.</source>
          <target state="translated">속성의 setter는 이전 값으로 논리적 트리에서 클래스별 시각적 컬렉션에서 제거 값이 변경 되도록 설계 되었습니다.</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)">
          <source>The values are cached, and then the new value is added to both the standard WPF framework level logical tree and the custom visual collection.</source>
          <target state="translated">캐시 되 고 새 값 표준 WPF 프레임 워크 수준 논리적 트리에서 사용자 지정 시각적 컬렉션에 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.RequestBringIntoView">
          <source>Occurs when <ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" /&gt;</ph> is called on this element.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" /&gt;</ph>가 이 요소에 대해 호출될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.RequestBringIntoView">
          <source>This event indicates to a parent <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> (or derived class) that the element that raises the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> event should be made visible within the scrollable region.</source>
          <target state="translated">이 이벤트는 부모에 알립니다 <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> (또는 파생 클래스) 발생 하는 요소는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> 스크롤 가능한 영역 내에서 표시 이벤트를 설정할 수 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.RequestBringIntoView">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> will then mark the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> event as handled, by using class handling of the event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> 표시는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> 이벤트를 이벤트의 클래스 처리를 사용 하 여 처리 합니다.</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.RequestBringIntoView">
          <source>In general <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> event data should not be marked handled by any class that does control a scrolling region, or by any instance handler, because doing so would interfere with the intended goal of the element that called <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;</ph>.</source>
          <target state="translated">일반적 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</ph> 데이터 표시 하지 말아야 처리는 스크롤 영역을 제어 하는 클래스에 의해 모든 이벤트 인스턴스 처리기를 호출 하는 요소의 원하는 목표 방해 하 게 이렇게 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.RequestBringIntoView">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.RequestBringIntoView">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.RequestBringIntoView">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.RequestBringIntoView">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.RequestBringIntoView">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.RequestBringIntoViewEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Resources">
          <source>Gets or sets the locally-defined resource dictionary.</source>
          <target state="translated">로컬로 정의된 리소스 사전을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>The current locally-defined dictionary of resources, where each resource can be accessed by key.</source>
          <target state="translated">현재 로컬로 정의된 리소스의 사전입니다. 각 리소스에는 키로 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>Resource dictionaries that can be defined completely or partially in <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> are typically created as a property element, and are typically on the root element for any individual page or for the application.</source>
          <target state="translated">완전히 또는 부분적으로 정의할 수 있는 리소스 사전 <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> 개별 페이지 또는 응용 프로그램에 대 한 루트 요소에는 일반적으로 및 속성 요소로 일반적으로 만들어집니다.</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>Placing the resource dictionary at this level makes it easier to find from individual child elements in the page (or from any page, in the application case).</source>
          <target state="translated">이 수준에서 리소스 사전을 배치 쉽게 페이지의 개별 자식 요소 (또는 응용 프로그램의 경우에는 페이지)를 찾을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>In most application scenarios, we recommend that styles be defined as object elements within a resource dictionary, or be defined as external resources so that the entire style resource can be self-contained (this approach helps separate designer responsibilities from developer responsibilities by separating the physical files that need to be edited).</source>
          <target state="translated">대부분의 응용 프로그램 시나리오의 리소스 사전에서 개체 요소로 스타일을 정의 하는 것 권장 전체 스타일 리소스 자체 포함 될 수 있도록 외부 리소스로 정의 된 또는 (이 방법은 별도 디자이너를 사용 하면. 책임을 편집 해야 하는 물리적 파일을 구분 하 여 개발자 책임).</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>Note that this property returns only the resource dictionary declared directly within that element.</source>
          <target state="translated">이 속성에서 반환 하는 리소스 사전에만 해당 요소 내부에서 직접 선언 참고 합니다.</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>This is different than the actual resource lookup process, where a child element can access any of the resources defined in each parent element, searching recursively upwards.</source>
          <target state="translated">이 자식 요소를 위쪽으로 재귀적으로 검색 되는 각 부모 요소에 정의 된 리소스에 액세스할 수 있는 실제 리소스 조회 프로세스와 다릅니다.</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>Resources can also be referenced by code from within the collection, but be aware that resources created in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> will definitely not be accessible until after <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> is raised by the element that declares the dictionary.</source>
          <target state="translated">리소스에서 리소스를 만들 수 있지만 컬렉션 내에서 코드에 의해 참조 될 수도 있습니다 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 를 확실 하 게 액세스할 수 없는까지 후 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> 사전을 선언 하는 요소에 의해 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>In fact, resources are parsed asynchronously and not even the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> event is an assurance that you can reference a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> defined resource.</source>
          <target state="translated">비동기적으로 및 not 리소스 구문 분석 하는 사실, 심지어는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> 이벤트는 참조할 수 있는 보증은 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 리소스를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>For this reason you should generally only access <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> defined resources as part of run-time code, or through other <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> techniques such as styles or resource extension references for attribute values.</source>
          <target state="translated">따라서 일반적으로 액세스 해야 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 또는 다른를 통해 런타임 코드의 일부로 정의 된 리소스 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 스타일이 나 특성 값에 대 한 리소스 확장 참조 하는 기법입니다.</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>When you access resources through code, it is essentially equivalent to a  reference made from <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">기본적으로 해당에서 만든 참조 하는 코드를 통해 리소스에 액세스할 때 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>The underlying <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> supports the methods required to add, remove or query resources from within the collection by using code.</source>
          <target state="translated">내부 <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> 추가, 제거 또는 코드를 사용 하 여 컬렉션 내에서 리소스를 쿼리 하는 데 필요한 메서드를 지원 합니다.</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Resources%2A&gt;</ph> property is settable to support the scenario of completely replacing the resources collection of an element to be a new or different <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Resources%2A&gt;</ph> 속성은 완전히 리소스 컬렉션을 새로운 또는 다른 요소를 교체 하는 시나리오를 지원 하기 위해 설정할 수 <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>Notice that the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> syntax shown does not include an element for the <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>.</source>
          <target state="translated">에 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 표시 된 구문에 대 한 요소를 포함 하지 않습니다는 <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>This is an example of implicit collection syntax; a tag representing the collection element can be omitted.</source>
          <target state="translated">이것이; 암시적 컬렉션 구문의 예 컬렉션 요소를 나타내는 태그를 생략할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>The elements that are added as items to the collection are specified instead.</source>
          <target state="translated">컬렉션에 항목으로 추가 하는 요소 대신 지정 됩니다.</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>For more information about implicit collections and <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, see <bpt id="p1">[</bpt>XAML Syntax In Detail<ept id="p1">](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)</ept>.</source>
          <target state="translated">암시적 컬렉션에 대 한 자세한 내용은 및 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, 참조 <bpt id="p1">[</bpt>XAML 구문에서 세부<ept id="p1">](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>One case where a <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> is still specified explicitly as an element is if you are introducing a merged dictionary, in which case there are typically no child elements for that <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>.</source>
          <target state="translated">한 가지 경우 여기서는 <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> 병합된 된 사전을 도입 하는 경우에서 많은 경우 일반적으로 해당 자식 요소가 없는 요소 이므로 명시적으로 지정 되어 <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>For details, see <bpt id="p1">[</bpt>Merged Resource Dictionaries<ept id="p1">](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>자세한<ept id="p1">](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML 속성 요소 사용</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source><bpt id="p1">*</bpt>oneOrMoreResourceElements<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>oneOrMoreResourceElements<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>One or more object elements, each of which defines a resource.</source>
          <target state="translated">하나 이상의 개체 요소를 각각 정의 하는 리소스입니다.</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Resources">
          <source>Each resource property element within each <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> must have a unique value for the <bpt id="p1">[</bpt>x:Key Directive<ept id="p1">](~/docs/framework/xaml-services/x-key-directive.md)</ept>, which serves as the unique key when values are retrieved from the <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>.</source>
          <target state="translated">각 내에서 각 리소스 속성 요소 <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> 에 대 한 고유 값이 있어야는 <bpt id="p1">[</bpt>X:key 지시문<ept id="p1">](~/docs/framework/xaml-services/x-key-directive.md)</ept>에서 값을 검색할 때 고유 키로 제공 되는 <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" uid="T:System.Windows.FrameworkElement">
          <source>Attaches a binding to this element for the specified dependency property.</source>
          <target state="translated">지정된 종속성 속성에 대해 이 요소에 바인딩을 연결합니다.</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)">
          <source>Identifies the destination property where the binding should be established.</source>
          <target state="translated">바인딩을 설정할 대상 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)">
          <source>The source property name or the path to the property used for the binding.</source>
          <target state="translated">바인딩에 사용할 소스 속성 이름 또는 속성의 경로입니다.</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)">
          <source>Attaches a binding to this element, based on the provided source property name as a path qualification to the data source.</source>
          <target state="translated">데이터 소스에 대한 경로 정규화로 제공된 소스 속성 이름을 기반으로 이 요소에 바인딩을 연결합니다.</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)">
          <source>Records the conditions of the binding.</source>
          <target state="translated">바인딩 상태를 기록합니다.</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)">
          <source>This return value can be useful for error checking.</source>
          <target state="translated">이 반환 값은 오류 검사에 유용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)">
          <source>This method is a convenience method for calling <ph id="ph1">&lt;xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType&gt;</ph>, which passes the current instance as the <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph>, and creates a new <ph id="ph3">&lt;xref:System.Windows.Data.Binding&gt;</ph> based on the provided <ph id="ph4">`path`</ph> parameter.</source>
          <target state="translated">이 메서드는 호출에 대 한 편리한 메서드입니다 <ph id="ph1">&lt;xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType&gt;</ph>는 현재 인스턴스를 전달 하는 <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph>, 새 및 <ph id="ph3">&lt;xref:System.Windows.Data.Binding&gt;</ph> 제공 된 기준 <ph id="ph4">`path`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)">
          <source>This signature is more convenient if you are establishing a simple default binding.</source>
          <target state="translated">이 서명은 단순한 기본 바인딩을 설정 하는 경우 더 편리 합니다.</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)">
          <source>If you need to specify any binding properties to non-default conditions, or want to use a <ph id="ph1">&lt;xref:System.Windows.Data.MultiBinding&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Data.PriorityBinding&gt;</ph>,you should use the <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29&gt;</ph> signature.</source>
          <target state="translated">기본이 아닌 조건에 대 한 바인딩 속성을 지정 하거나 사용 하려는 해야 할 경우는 <ph id="ph1">&lt;xref:System.Windows.Data.MultiBinding&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Data.PriorityBinding&gt;</ph>, 사용할지는 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29&gt;</ph> 서명 합니다.</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)">
          <source>The following example sets a binding using a specific path.</source>
          <target state="translated">다음 예제에서는 특정 경로 사용 하 여 바인딩을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)">
          <source>Identifies the property where the binding should be established.</source>
          <target state="translated">바인딩을 설정해야 하는 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)">
          <source>Represents the specifics of the data binding.</source>
          <target state="translated">데이터 바인딩의 고유 정보를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)">
          <source>Attaches a binding to this element, based on the provided binding object.</source>
          <target state="translated">제공된 바인딩 개체를 기반으로 하여 이 요소에 바인딩을 연결합니다.</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)">
          <source>Records the conditions of the binding.</source>
          <target state="translated">바인딩 상태를 기록합니다.</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)">
          <source>This return value can be useful for error checking.</source>
          <target state="translated">이 반환 값은 오류 검사에 유용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)">
          <source>This method is a convenience method for calling <ph id="ph1">&lt;xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType&gt;</ph>, which passes the current instance as the <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph>.</source>
          <target state="translated">이 메서드는 호출에 대 한 편리한 메서드입니다 <ph id="ph1">&lt;xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType&gt;</ph>는 현재 인스턴스를 전달 하는 <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)">
          <source>The element that specifies a flow direction.</source>
          <target state="translated">흐름 방향을 지정하는 요소입니다.</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)">
          <source>A value of the enumeration, specifying the direction.</source>
          <target state="translated">방향을 지정하는 열거형 값입니다.</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)">
          <source>Sets the value of the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.FlowDirection" /&gt;</ph> attached property for the provided element.</source>
          <target state="translated">제공된 요소에 대한 <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.FlowDirection" /&gt;</ph> 연결된 속성의 값을 설정합니다.</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)">
          <source>This method supports attached property syntax for the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> property, therefore allowing child elements of a provided <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> to specify flow direction for the arrangement within their parent element.</source>
          <target state="translated">이 메서드는 지원에 대 한 연결 된 속성 구문이 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> 속성, 자식 요소는 제공 된 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 해당 부모 요소 내에서 정렬에 대 한 흐름 방향을 지정 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)">
          <source>To set the value on the current <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, use the direct <ph id="ph2">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> accessor <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph>.</source>
          <target state="translated">현재 값을 설정 하려면 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>를 직접 사용 하 여 <ph id="ph2">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 접근자 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)">
          <source>The property to which the resource is bound.</source>
          <target state="translated">리소스가 바인딩될 속성입니다.</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)">
          <source>The name of the resource.</source>
          <target state="translated">리소스의 이름입니다.</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)">
          <source>Searches for a resource with the specified name and sets up a resource reference to it for the specified property.</source>
          <target state="translated">지정된 이름으로 리소스를 검색하고 지정된 속성에 대해 해당 리소스에 리소스 참조를 설정합니다.</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)">
          <source>A resource reference is similar to the use of a <bpt id="p1">[</bpt>DynamicResource Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)</ept> in markup.</source>
          <target state="translated">리소스 참조는를 사용 하는 <bpt id="p1">[</bpt>DynamicResource 태그 확장<ept id="p1">](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)</ept> 태그에 있습니다.</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)">
          <source>The resource reference creates an internal expression that supplies the value of the specified property on a run-time deferred basis.</source>
          <target state="translated">리소스 참조는 런타임에 지연 기준 지정된 된 속성의 값을 제공 하는 내부 식을 작성 합니다.</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)">
          <source>The expression will be re-evaluated whenever the resource dictionary indicates a changed value through internal events, or whenever the current element is reparented (a parent change would change the dictionary lookup path).</source>
          <target state="translated">내부 이벤트를 통해 변경 된 값을 표시 하는 리소스 사전 때마다 또는 현재 요소에 부모가 될 때마다 식이 다시 계산 됩니다 (부모 변경 변경 사전 조회 경로).</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ShouldSerializeResources">
          <source>Returns whether serialization processes should serialize the contents of the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Resources" /&gt;</ph> property.</source>
          <target state="translated">serialization 프로세스에서 <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Resources" /&gt;</ph> 속성의 콘텐츠를 serialize해야 하는지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ShouldSerializeResources">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="P:System.Windows.FrameworkElement.Resources" /&gt;</ph> property value should be serialized; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="P:System.Windows.FrameworkElement.Resources" /&gt;</ph> 속성 값을 serialize해야 하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ShouldSerializeResources">
          <source>This will return <ph id="ph1">`true`</ph> as long as there is at least one keyed resource in the local <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Resources%2A&gt;</ph>.</source>
          <target state="translated">이 반환 됩니다 <ph id="ph1">`true`</ph> 로컬 중인 키가 지정 된 리소스를 하나 이상으로 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Resources%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ShouldSerializeStyle">
          <source>Returns whether serialization processes should serialize the contents of the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Style" /&gt;</ph> property.</source>
          <target state="translated">serialization 프로세스에서 <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Style" /&gt;</ph> 속성의 콘텐츠를 serialize해야 하는지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ShouldSerializeStyle">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="P:System.Windows.FrameworkElement.Style" /&gt;</ph> property value should be serialized; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="P:System.Windows.FrameworkElement.Style" /&gt;</ph> 속성 값을 serialize해야 하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ShouldSerializeStyle">
          <source>This will return <ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph> is locally set.</source>
          <target state="translated">이 반환 됩니다 <ph id="ph1">`true`</ph> 경우는 <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph> 로컬로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ShouldSerializeTriggers">
          <source>Returns whether serialization processes should serialize the contents of the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Triggers" /&gt;</ph> property.</source>
          <target state="translated">serialization 프로세스에서 <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Triggers" /&gt;</ph> 속성의 콘텐츠를 serialize해야 하는지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.ShouldSerializeTriggers">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="P:System.Windows.FrameworkElement.Triggers" /&gt;</ph> property value should be serialized; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="P:System.Windows.FrameworkElement.Triggers" /&gt;</ph> 속성 값을 serialize해야 하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.ShouldSerializeTriggers">
          <source>This method returns <ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Triggers%2A&gt;</ph> property is locally set.</source>
          <target state="translated">이 메서드가 반환 <ph id="ph1">`true`</ph> 경우는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Triggers%2A&gt;</ph> 속성이 로컬에서 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.SizeChanged">
          <source>Occurs when either the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ActualHeight" /&gt;</ph> or the <ph id="ph2">&lt;see cref="P:System.Windows.FrameworkElement.ActualWidth" /&gt;</ph> properties change value on this element.</source>
          <target state="translated">이 요소의 <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ActualHeight" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="P:System.Windows.FrameworkElement.ActualWidth" /&gt;</ph> 속성 값을 변경할 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SizeChanged">
          <source>Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</source>
          <target state="translated">라우트된 이벤트를 직접 경로 따르지 않는, 에서만 발생 하는 동일한 요소 내에서 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SizeChanged">
          <source>Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> in a style.</source>
          <target state="translated">라우트된 이벤트에 다른 라우트된 이벤트 동작 지원 않는 직접: 액세스할 수 있는 처리기 컬렉션을 지원 하며으로 사용할 수는 <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> 스타일에서입니다.</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SizeChanged">
          <source>The layout system reads properties within the <ph id="ph1">&lt;xref:System.Windows.SizeChangedEventArgs&gt;</ph> argument class of this event, to  determine whether the reported size changes should be considered significant.</source>
          <target state="translated">이 레이아웃 시스템 내에서 속성을 읽고는 <ph id="ph1">&lt;xref:System.Windows.SizeChangedEventArgs&gt;</ph> 고려할지 여부를 보고 된 크기를 변경 하는 중요 한을 확인 하려면이 이벤트의 인수 클래스입니다.</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SizeChanged">
          <source>This allows the layout system or your control-specific layout implementations to avoid forcing a layout change due to visually imperceptible differences between old and new height or width values.</source>
          <target state="translated">이 레이아웃 시스템 또는 이전 구문과 새 높이 또는 너비 값 사이의 않는 시각적으로 차이로 인해 레이아웃 변경을 적용 하지 않도록 사용자 컨트롤별 레이아웃 구현을 허용 합니다.</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SizeChanged">
          <source>The imperceptible differences might be due to rounding or same-result calculations of a floating-point data types.</source>
          <target state="translated">차이로 부동 소수점 데이터 형식 반올림 하거나 동일한 결과 계산 때문일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SizeChanged">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SizeChanged">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SizeChanged">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SizeChanged">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SizeChanged">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.SizeChangedEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.SizeChanged" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.SizeChanged" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.SizeChangedEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.SizeChangedEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.SizeChangedEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.SizeChangedEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.SizeChangedEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.SourceUpdated">
          <source>Occurs when the source value changes for any existing property binding on this element.</source>
          <target state="translated">이 요소의 기존 속성 바인딩에 대해 소스 값이 변경될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SourceUpdated">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.SourceUpdated&gt;</ph> event that is raised by any <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> associated with this element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Data.Binding.SourceUpdated&gt;</ph> 의해 발생 하는 이벤트 <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> 이 요소와 연결 합니다.</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.SourceUpdated">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 특성 사용</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Style">
          <source>Gets or sets the style used by this element when it is rendered.</source>
          <target state="translated">렌더링될 때 이 요소에서 사용할 스타일을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>The applied, nondefault style for the element, if present.</source>
          <target state="translated">있는 경우 요소에 대해 적용된 기본값이 아닌 스타일입니다.</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>Otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">그렇지 않으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>The default for a default-constructed <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">기본 생성된 <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>의 기본값은 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>For controls, the current style is often provided by a default style from control theming, or from styles generally applied to controls of that type by resources at page or application level (an implicit style).</source>
          <target state="translated">컨트롤에 대 한 현재 스타일은 보통 제어 테마 설정의 기본 스타일 제공 또는 스타일에서 리소스 페이지 또는 응용 프로그램 수준 (암시적 스타일)에 의해 일반적으로 컨트롤 형식에 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>This property does not set or return default (theme) styles, but it does return either an implicit style or an explicit style that is acting on the element.</source>
          <target state="translated">이 속성은 설정 하거나 반환 하지 기본 (테마) 스타일 않지만 요소에 사용 되는 명시적 스타일 또는 암시적 스타일 반환 합니다.</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>In the case of implicit or explicit styles, it does not matter whether the style is specified as a resource or defined locally.</source>
          <target state="translated">암시적 또는 명시적 스타일의 경우 스타일은 지정 된 이름이 든 리소스로 로컬 정의 중요지 않습니다.</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>Setting the styles has some restrictions.</source>
          <target state="translated">스타일 정의는 몇 가지 제한 사항이 있습니다.</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>You can reset the entire <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property to a new <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph> at any time, which will force a layout recomposition.</source>
          <target state="translated">전체를 다시 설정할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> 속성을 새 <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph> 언제 든 지는 됩니다 언제 합니다.</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>However, as soon as that style is placed in use by a loaded element, the <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> should be considered sealed.</source>
          <target state="translated">그러나 가능한 한 즉시 해당 스타일 로드 된 요소에서 사용 하 게 되는 <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> 고려해 야 봉인 합니다.</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>Attempting to make a change to any individual property of an in-use style (such as anything within the collection of <ph id="ph1">&lt;xref:System.Windows.Style.Setters%2A&gt;</ph>) causes an exception to be thrown.</source>
          <target state="translated">사용 중인 스타일의 개별 속성을 변경 하려고 (컬렉션 내에서 아무 것도 같은 <ph id="ph1">&lt;xref:System.Windows.Style.Setters%2A&gt;</ph>) 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>A style that is defined in markup is considered to be in use as soon as it is loaded from a resource dictionary (for resources), or the page it is contained within is loaded (for inline styles).</source>
          <target state="translated">태그에 정의 된 스타일 (리소스)에 대 한 리소스 사전에서 로드 하거나 내에 포함 된 페이지가 (인라인 스타일)에 대 한 로드 사용 중인 것으로 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> is a dependency property with special precedence.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> 특별 한 우선 순위가 종속성 속성이입니다.</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>The locally set style generally operates at the highest precedence in the property system.</source>
          <target state="translated">로컬로 설정 된 스타일은 일반적으로 가장 높은 우선 순위에서 속성 시스템 작동 합니다.</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> is null at this point, during loading the property system checks for implicit styles in local or application resources that specify that type.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> 속성 시스템은 해당 유형을 지정 하는 로컬 또는 응용 프로그램 리소스에서 암시적 스타일을 확인 하는 로드 하는 동안이 시점에서 null입니다.</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>If the style is still null after this step, then the acting style for presentation purposes generally comes from the default (theme) style, but the default style is not returned in the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property value.</source>
          <target state="translated">이 단계를 스타일은 여전히 null 후 실행 되며 스타일 프레젠테이션을 위해를 기본 (테마) 스타일에서 일반적으로 제공 되지만 기본 스타일에 반환 되지 않습니다 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>See <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept> or <bpt id="p2">[</bpt>Styling and Templating<ept id="p2">](~/docs/framework/wpf/controls/styling-and-templating.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>종속성 속성 값 우선 순위<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept> 또는 <bpt id="p2">[</bpt>스타일 및 템플릿<ept id="p2">](~/docs/framework/wpf/controls/styling-and-templating.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 특성 사용</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML 속성 요소 사용</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source><bpt id="p1">*</bpt>resourceExtension<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>resourceExtension<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>One of the following: , or .</source>
          <target state="translated">다음 중 하나:, 또는.</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>See <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>XAML 리소스<ept id="p1">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source><bpt id="p1">*</bpt>styleResourceKey<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>styleResourceKey<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>The key that identifies the style being requested.</source>
          <target state="translated">요청 되는 스타일을 식별 하는 키입니다.</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>The key refers to an existing resource in a <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>.</source>
          <target state="translated">기존 리소스를이 키는 한 <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>Property element syntax is technically possible, but not recommended for most style scenarios.</source>
          <target state="translated">속성 요소 구문을 조치가 지지만 대부분 스타일 시나리오에 대 한 권장 하지는 않습니다.</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>See <bpt id="p1">[</bpt>Inline Styles and Templates<ept id="p1">](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>인라인 스타일 및 템플릿<ept id="p1">](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>A binding reference using  or <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> is also possible, but uncommon.</source>
          <target state="translated">사용 하 여 바인딩 참조 또는 <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> 가능 하지만 일반적이 지 않은 이기도 합니다.</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Style">
          <source>The following example defines a style in a resource dictionary.</source>
          <target state="translated">다음 예제에서는 리소스 사전에 스타일을 정의합니다.</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.StyleProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Style" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Style" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)">
          <source>The name of the requested ambient property.</source>
          <target state="translated">요청된 앰비언트 속성의 이름입니다.</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)">
          <source>For a description of this member, see the <ph id="ph1">&lt;see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /&gt;</ph> method.</source>
          <target state="translated">이 멤버에 대한 설명을 보려면 <ph id="ph1">&lt;see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /&gt;</ph> 메서드를 참조하세요.</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="propertyName" /&gt;</ph> is available; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="propertyName" /&gt;</ph>을 사용할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Markup.IQueryAmbient&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Windows.Markup.IQueryAmbient&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Tag">
          <source>Gets or sets an arbitrary object value that can be used to store custom information about this element.</source>
          <target state="translated">이 요소에 대한 사용자 지정 정보를 저장하는 데 사용할 수 있는 임의의 개체 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Tag">
          <source>The intended value.</source>
          <target state="translated">원하는 값입니다.</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Tag">
          <source>This property has no default value.</source>
          <target state="translated">이 속성에는 기본값이 없습니다.</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Tag">
          <source>This property is analogous to Tag properties in other <ph id="ph1">[!INCLUDE[TLA#tla_ms](~/includes/tlasharptla-ms-md.md)]</ph> programming models, such as <ph id="ph2">[!INCLUDE[TLA#tla_vba](~/includes/tlasharptla-vba-md.md)]</ph> or <ph id="ph3">[!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)]</ph>.</source>
          <target state="translated">이 속성은 다른 태그 속성과 유사 <ph id="ph1">[!INCLUDE[TLA#tla_ms](~/includes/tlasharptla-ms-md.md)]</ph> 프로그래밍 모델을 같은 <ph id="ph2">[!INCLUDE[TLA#tla_vba](~/includes/tlasharptla-vba-md.md)]</ph> 또는 <ph id="ph3">[!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Tag">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Tag%2A&gt;</ph> is intended to provide a pre-existing property location where you can store some basic custom information about any <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> without requiring you to subclass an element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Tag%2A&gt;</ph> 에 대 한 몇 가지 기본 사용자 지정 정보를 저장할 수 있는 기존 속성 위치를 제공 하기 위한 용도가 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 를 만들지 않고 하위 클래스는 요소입니다.</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Tag">
          <source>Because this property takes an object, you would need to use the property element usage in order to set the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Tag%2A&gt;</ph> property in <ph id="ph2">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> to anything other than an object with a known and built-in type converter, such as a string.</source>
          <target state="translated">속성 요소 사용을 설정 하는 데 사용 해야를 하기 때문에이 속성 개체는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Tag%2A&gt;</ph> 속성에 <ph id="ph2">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> , 문자열 등의 알려진된 기본 제공 형식 변환기를 가진 개체가 아닌 다른 값으로.</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Tag">
          <source>Objects used in this manner are typically not within the standard <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> namespaces and therefore may require namespace mapping to the external namespace in order to be introduced as <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> elements.</source>
          <target state="translated">이런이 방식으로 사용 되는 개체가 아닌 일반적으로 표준 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 네임 스페이스 따라서으로 외부 네임 스페이스에 대 한 네임 스페이스 매핑을 필요할 수 있습니다 및 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Tag">
          <source>For details, see <bpt id="p1">[</bpt>XAML Namespaces and Namespace Mapping for WPF XAML<ept id="p1">](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)</ept> and <bpt id="p2">[</bpt>XAML and Custom Classes for WPF<ept id="p2">](~/docs/framework/wpf/advanced/xaml-and-custom-classes-for-wpf.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>XAML 네임 스페이스 및 WPF XAML에 대 한 매핑 Namespace<ept id="p1">](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)</ept> 및 <bpt id="p2">[</bpt>XAML을 WPF에 대 한 사용자 지정 클래스<ept id="p2">](~/docs/framework/wpf/advanced/xaml-and-custom-classes-for-wpf.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Tag">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Tag">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Tag">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Tag">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.TagProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Tag" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Tag" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.TargetUpdated">
          <source>Occurs when the target value changes for any property binding on this element.</source>
          <target state="translated">이 요소의 속성 바인딩에 대한 대상 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.TargetUpdated">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.TargetUpdated&gt;</ph> event that is raised by any <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> associated with this element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Data.Binding.TargetUpdated&gt;</ph> 의해 발생 하는 이벤트 <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> 이 요소와 연결 합니다.</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.TargetUpdated">
          <source>This usually means that the binding in question is a two-way binding, and that the bound  dependency property affirms that the previous property value is now invalid according to any validation or caching scheme that the property or the data source support.</source>
          <target state="translated">이 일반적으로 해당 바인딩이 양방향 바인딩에 바인딩된 종속성 속성은 하는 이전 속성 값이 이제 모든 유효성 검사 또는 캐싱 체계를 지 원하는 속성 또는 데이터 원본에 유효 의미 합니다.</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.TargetUpdated">
          <source>Use the event data of the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TargetUpdated&gt;</ph> event to determine the specific property that is reporting the target value update.</source>
          <target state="translated">이벤트 데이터를 사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TargetUpdated&gt;</ph> 대상 값 업데이트를 보고 하는 특정 속성을 결정 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.TargetUpdated">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 특성 사용</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source>Gets a reference to the template parent of this element.</source>
          <target state="translated">이 요소의 템플릿 부모에 대한 참조를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source>This property is not relevant if the element was not created through a template.</source>
          <target state="translated">요소가 템플릿을 통해 만들어지지 않은 경우에는 이 속성이 관련이 없습니다.</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source>The element whose <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkTemplate" /&gt;</ph><ph id="ph2">&lt;see cref="P:System.Windows.FrameworkTemplate.VisualTree" /&gt;</ph> caused this element to be created.</source>
          <target state="translated">요소를 <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkTemplate" /&gt;</ph> <ph id="ph2">&lt;see cref="P:System.Windows.FrameworkTemplate.VisualTree" /&gt;</ph> 이 요소를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source>This value is frequently <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 값은 대개 <ph id="ph1">&lt;see langword="null" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;</ph> is frequently <ph id="ph2">`null`</ph> for objects that are created in your application markup or code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;</ph> 자주 <ph id="ph2">`null`</ph> 응용 프로그램 태그 또는 코드에서 만든 개체에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source>This is because you create those objects directly, not via a template.</source>
          <target state="translated">템플릿을 통해 직접 해당 개체를 만들기 때문입니다.</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source>Object references obtained by walking the logical tree from the root, or by typical name references, do not come from a template.</source>
          <target state="translated">루트, 논리적 트리를 탐색 하 여 가져온 개체 참조 또는 일반 이름으로 참조를 서식 파일에서 제공 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source>Cases where <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;</ph> might not be <ph id="ph2">`null`</ph> include operations such as hit-testing, event handling for certain low-level input events, walking the visual tree with <ph id="ph3">&lt;xref:System.Windows.Media.VisualTreeHelper&gt;</ph>, or working with enumerators, which might return elements that came from templates.</source>
          <target state="translated">인 사례 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;</ph> 되지 않을 수 있습니다 <ph id="ph2">`null`</ph> 작업 등의 시각적 트리를 탐색 낮은 수준의 특정 입력된 이벤트에 대 한 이벤트 처리 적중 테스트, <ph id="ph3">&lt;xref:System.Windows.Media.VisualTreeHelper&gt;</ph>, 열거자, 작업을 반환할 수 있는 생성 되는 요소 또는 템플릿에서 합니다.</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source>Another case is if you specifically call <ph id="ph1">&lt;xref:System.Windows.FrameworkTemplate.FindName%2A&gt;</ph> against an existing <ph id="ph2">&lt;xref:System.Windows.FrameworkTemplate&gt;</ph> and are work with the returned object.</source>
          <target state="translated">경우에도 명시적으로 호출 하는 경우 <ph id="ph1">&lt;xref:System.Windows.FrameworkTemplate.FindName%2A&gt;</ph> 기존에 대해 <ph id="ph2">&lt;xref:System.Windows.FrameworkTemplate&gt;</ph> 하며 반환 된 개체를 사용 하는 합니다.</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source>Templates are actually shared objects, where the contents of the template are created only once.</source>
          <target state="translated">템플릿은 실제로 공유 개체를 서식 파일의 내용을 한 번만 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source>Therefore, if you obtain an object reference to an element that came from a template, you may find that the apparent logical tree does not reach to the page root.</source>
          <target state="translated">따라서 서식 파일에서 생성 된 요소에 대 한 개체 참조를 가져오는 경우 명백한 논리적 트리 루트 페이지에 도달 하지 않도록 알 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.TemplatedParent">
          <source>In order to connect such a template reference to the page's logical tree, you should get the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;</ph> value and continue to navigate that element tree as desired.</source>
          <target state="translated">이러한 서식 파일 참조 페이지의 논리 트리를을 연결 하기 위해 얻어야는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;</ph> 값과 계속를 원하는 대로 해당 요소 트리를 탐색 합니다.</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>Gets or sets the tool-tip object that is displayed for this element in the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>에서 이 요소에 대해 표시되는 도구 설명 개체를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>The tooltip object.</source>
          <target state="translated">도구 설명 개체입니다.</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>If the value of this property is of type <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph>, then that value is the tool-tip that will be used in the <ph id="ph2">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>.</source>
          <target state="translated">이 속성의 값 형식인 경우 <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph>, 해당 값은에 사용 되는 도구 설명의 <ph id="ph2">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>If the value is of any other type, then that value will be used as the <bpt id="p1">*</bpt>content<ept id="p1">*</ept> for a <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph> provided (constructed) by the system.</source>
          <target state="translated">값이 다른 형식의 경우 해당 값으로 사용 됩니다는 <bpt id="p1">*</bpt>콘텐츠<ept id="p1">*</ept> 에 대 한는 <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph> 제공 (생성 된) 시스템에서 합니다.</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTipService&gt;</ph>.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTipService&gt;</ph>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>The service class provides attached properties that can be used to further customize a <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph>.</source>
          <target state="translated">추가로 사용자 지정 하는 데 사용할 수 있는 연결 된 속성을 제공 하는 서비스 클래스는 <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 특성 사용</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML 속성 요소 사용</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source><bpt id="p1">*</bpt>toolTipContent<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>toolTipContent<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>A string that becomes the display text for the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph>.</source>
          <target state="translated">에 대 한 표시 텍스트 되는 문자열은 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source><bpt id="p1">*</bpt>toolTipObjectContent<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>toolTipObjectContent<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>Some object, provided in object element form, that should be used as the content for the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> .</source>
          <target state="translated">에 대 한 내용으로 사용 해야 하는 개체 요소 형태에 제공 된 일부 개체는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 합니다.</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>Typically this would be a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or some other element that creates layout compositing for the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph>, eventually containing text content within the compositing.</source>
          <target state="translated">됩니다는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 또는 다른 요소에 대 한 레이아웃 합성을 만드는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph>를 포함 하는 텍스트 콘텐츠입니다.</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>In this usage, the <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph> element is created implicitly from the parsed <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, and the <bpt id="p1">*</bpt>toolTipObjectContent<ept id="p1">*</ept> content is set as its <ph id="ph3">&lt;xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">이 사용법에서는 <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph> 요소가 만들어집니다 구문 분석 된에서 암시적으로 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, 및 <bpt id="p1">*</bpt>toolTipObjectContent<ept id="p1">*</ept> 내용이 설정으로 해당 <ph id="ph3">&lt;xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source><ph id="ph1">&lt;</ph><ph id="ph2">`ToolTip`</ph> .../&gt;</source>
          <target state="translated"><ph id="ph1">&lt;</ph><ph id="ph2">`ToolTip`</ph> .../&gt;</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.ToolTip">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph> in code and then sets the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph> property on a <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.StatusBar&gt;</ph> control.</source>
          <target state="translated">다음 예제에서는 한 <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph> 코드 및 설정에는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph> 속성에는 <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.StatusBar&gt;</ph> 제어 합니다.</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.ToolTipClosing">
          <source>Occurs just before any tooltip on the element is closed.</source>
          <target state="translated">요소의 도구 설명을 닫기 직전에 발생합니다.</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipClosing">
          <source>Marking the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTipClosing&gt;</ph> event as handled does not cancel closing the tooltip.</source>
          <target state="translated">표시 된 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTipClosing&gt;</ph> 도구 설명 닫기이 취소 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipClosing">
          <source>Once the tooltip is displayed, closing the tooltip is done only in response to user interaction with the UI.</source>
          <target state="translated">도구 설명이 표시 되 면 도구 설명 닫기 사용자 UI와 상호 작용에 대 한 응답에만 작업 수행 됩니다.</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipClosing">
          <source>This event cannot be an <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> in a style.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> 스타일에서입니다.</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipClosing">
          <source>This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.</source>
          <target state="translated">이 이벤트의 식별자 필드에는 다시 서비스 수준 이벤트에 대 한 추가/제거 이벤트 메서드를 노출 하지 않는 서비스의 구현을 사용 하기 때문입니다.</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipClosing">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipClosing">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipClosing">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipClosing">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipClosing">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipClosing">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnToolTipClosing%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnToolTipClosing%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.ToolTipClosingEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ToolTipClosingEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ToolTipClosingEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ToolTipClosingEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ToolTipClosingEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ToolTipClosingEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>Occurs when any tooltip on the element is opened.</source>
          <target state="translated">요소의 도구 설명이 열리면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>To prevent a tooltip from appearing in the UI, your handler for <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTipOpening&gt;</ph> can mark the <ph id="ph2">&lt;xref:System.Windows.Controls.ToolTipEventArgs&gt;</ph> event data handled.</source>
          <target state="translated">도구 설명 처리기에 대 한 UI에 표시 하지 않으려면 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTipOpening&gt;</ph> 표시할 수는 <ph id="ph2">&lt;xref:System.Windows.Controls.ToolTipEventArgs&gt;</ph> 이벤트 데이터를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>Otherwise, the tooltip is displayed, using the value of the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph> property as the tooltip content.</source>
          <target state="translated">그렇지 않으면, 도구 설명 표시 됩니다, 값을 사용 하 여 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph> 도구 설명 콘텐츠로 속성입니다.</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>Another possible scenario is that you could write a handler that resets the value of the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph> property for the element that is the event source, just before the tooltip is displayed.</source>
          <target state="translated">다른 가능한 시나리오는의 값을 기본값으로 다시 설정 하는 처리기를 작성할 수는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph> 도구 설명이 표시 되는 바로 전에 이벤트 원본에 있는 요소에 대 한 속성.</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTipOpening&gt;</ph> will not be raised if the value of <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph> is <ph id="ph3">`null`</ph> or otherwise unset.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTipOpening&gt;</ph> 경우 발생 하지 것입니다의 값 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph> 은 <ph id="ph3">`null`</ph> 또는 그렇지 않은 경우 해제 합니다.</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>Do not deliberately set <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph> to <ph id="ph2">`null`</ph> while a tooltip is open or opening; this will not have the effect of closing the tooltip, and will instead create an undesirable visual artifact in the UI.</source>
          <target state="translated">의도적으로 설정 하지 않으면 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</ph> 를 <ph id="ph2">`null`</ph> 도구 설명이 현재 열려 있거나 열기;이 도구 설명, 닫히고 없으며 UI에는 원하지 않는 시각적 요소가 만들어집니다 대신 동안 합니다.</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTipOpening&gt;</ph> event cannot be an <ph id="ph2">&lt;xref:System.Windows.EventTrigger&gt;</ph> in a style.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ToolTipOpening&gt;</ph> 이벤트 일 수 없습니다는 <ph id="ph2">&lt;xref:System.Windows.EventTrigger&gt;</ph> 스타일에서입니다.</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.</source>
          <target state="translated">이 이벤트의 식별자 필드에는 다시 서비스 수준 이벤트에 대 한 추가/제거 이벤트 메서드를 노출 하지 않는 서비스의 구현을 사용 하기 때문입니다.</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.ToolTipOpening">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnToolTipClosing%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnToolTipClosing%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.ToolTipOpeningEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ToolTipOpeningEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ToolTipOpeningEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ToolTipOpeningEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ToolTipOpeningEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.ToolTipOpeningEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.ToolTipProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ToolTip" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.ToolTip" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>Gets the collection of triggers established directly on this element, or in child elements.</source>
          <target state="translated">이 요소에 직접 설정되거나 자식 요소에 설정된 트리거의 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>A strongly typed collection of <ph id="ph1">&lt;see cref="T:System.Windows.Trigger" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Trigger" /&gt;</ph> 개체의 강력한 형식의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>This property can only be set in <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> through the collection syntax shown, or by accessing the collection object and using its various methods such as Add.</source>
          <target state="translated">이 속성 설정할 수 있습니다 <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> 또는 컬렉션 개체에 액세스 하 고 추가 등의 다양 한 메서드를 사용 하 여 표시 된 컬렉션 구문을 통해 합니다.</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>The property to access the collection object itself is read-only, the collection itself is read-write.</source>
          <target state="translated">컬렉션 개체 자체를 액세스 하는 속성은 읽기 전용, 컬렉션 자체는 읽기 / 쓰기입니다.</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>The property only exists on root elements; attempting to find it or set it elsewhere will cause an exception to be thrown.</source>
          <target state="translated">속성이 루트 요소에만 있습니다. 찾거나 다른 곳에서 설정 하려고 하면 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>This property does not enable you to examine triggers that exist as part of styles in use on this element.</source>
          <target state="translated">이 속성에서는 없습니다이 요소에 사용 중인 스타일의 일부로 존재 하는 트리거를 검사할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>It only reports the collection of triggers that are literally added to the collection, either in markup or code.</source>
          <target state="translated">태그 또는 코드에서 컬렉션에 추가 된 트리거의 컬렉션만 보고 합니다.</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>Elements do not typically have such elements existing by default (through a template for instance); it is more common for triggers that come from control compositing to be established in styles instead.</source>
          <target state="translated">요소 기본적으로 기존 등의 요소에 일반적으로 없습니다 (템플릿을 통해 예를 들어); 것이 더 일반적 컨트롤 대신 스타일에 설정 하는 합성에서 제공 하는 트리거에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>In terms of behavior (and trying to establish which effect came from which element's declared <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Triggers%2A&gt;</ph> collection), both the triggering condition and the trigger effect might be on this element, or might be on its child elements in the logical tree.</source>
          <target state="translated">동작 면에서 (선언 된 요소에서 생성 되는 효과 설정 하려는 시도 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Triggers%2A&gt;</ph> 컬렉션), 트리거 조건 및 트리거 효과 모두이 요소에 있을 수 있습니다 또는 논리적 트리에서 자식 요소에 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>Note that if you use lifetime events such as <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> to get this collection, the child element's triggers might not yet be fully loaded, and the collection will be smaller than it would truly be at run time.</source>
          <target state="translated">와 같은 수명 이벤트를 사용 하는 경우 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> 이 컬렉션을 가져오려면 자식 요소의 트리거 아직 완전히 로드와 되지 컬렉션은 런타임 시 실제로 것 보다 더 작은 수는 있습니다.</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>Note that the collection of triggers established on an element only supports <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph>, not property triggers (<ph id="ph2">&lt;xref:System.Windows.Trigger&gt;</ph>).</source>
          <target state="translated">요소에 설정 된 트리거의 컬렉션만 지원 합니다. 이때 <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph>, 하지 속성 트리거 (<ph id="ph2">&lt;xref:System.Windows.Trigger&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>If you require property triggers, you must place these within a style or template and then assign that style or template to the element either directly through the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property, or indirectly through an implicit style reference.</source>
          <target state="translated">속성 트리거를 필요로 하는 경우 스타일이 나 템플릿 내에서이 배치 하 고 다음 할당 해야 스타일이 나 템플릿을 요소에 하거나 통해 직접는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> 속성 또는 암시적 스타일 참조를 통해 간접적으로 합니다.</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML 속성 요소 사용</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source><bpt id="p1">*</bpt>oneOrMoreTriggers<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>oneOrMoreTriggers<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>One or more defined <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> elements.</source>
          <target state="translated">하나 이상의 정의 된 <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>Each such trigger is expected to contain valid storyboard actions and references.</source>
          <target state="translated">이러한 각 트리거에서 올바른 스토리 보드의 작업 및 참조를 포함 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>Note that this collection can only be established on the root element of a page.</source>
          <target state="translated">참고가이 컬렉션 페이지의 루트 요소에만 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Triggers">
          <source>For more information, see <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>스토리보드 개요<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.TryFindResource(System.Object)">
          <source>The key identifier of the resource to be found.</source>
          <target state="translated">찾을 리소스의 키 식별자입니다.</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.TryFindResource(System.Object)">
          <source>Searches for a resource with the specified key, and returns that resource if found.</source>
          <target state="translated">지정된 키를 사용하여 리소스를 검색하고 해당 리소스를 반환합니다(있는 경우).</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.TryFindResource(System.Object)">
          <source>The found resource, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no resource with the provided <ph id="ph2">&lt;paramref name="key" /&gt;</ph> is found.</source>
          <target state="translated">찾은 리소스이거나, 제공된 <ph id="ph2">&lt;paramref name="key" /&gt;</ph>에 리소스가 없으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.TryFindResource(System.Object)">
          <source>If the resource is not found on the calling element, the parent resource tree is searched upward through the logical tree, in the same way that the tree would be searched if a resource were requested by key at run time.</source>
          <target state="translated">호출 하는 요소에는 리소스를 찾을 수 없습니다, 논리 트리를 통해 부모 리소스 트리를 위쪽으로 검색, 트리 것 동일한 방식으로 검색 결과 리소스 된 요청 하는 경우 키에 의해 런타임 시.</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.TryFindResource(System.Object)">
          <source>The method returns <ph id="ph1">`null`</ph> only if no resource of that key existed anywhere in the resource tree, per the existing conditions of the tree at the time that <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;</ph> is called.</source>
          <target state="translated">메서드가 반환 <ph id="ph1">`null`</ph> 리소스가 해당 키의 위치 리소스 트리 당 시 트리의 기존 조건에에서도 존재 하는 경우에 있는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;</ph> 라고 합니다.</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.TryFindResource(System.Object)">
          <source>Typically you would immediately cast the return value to the type of the property that you were attempting to set with the returned resource value.</source>
          <target state="translated">일반적으로 반환 값을 반환 되는 리소스 값으로 설정 하 려 했던 하는 속성의 형식 캐스팅 즉시 것입니다.</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.TryFindResource(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindResource%2A&gt;</ph> method has similar behavior, except that it throws an exception if no resource with the provided key was returned.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindResource%2A&gt;</ph> 메서드가 비슷한 동작을 제외 하 고 제공 된 키에 리소스가 반환 된 경우 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.TryFindResource(System.Object)">
          <source>The following example is implemented as a button handler, where the button being clicked sets its background to a resource-defined brush obtained by calling <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;</ph> on itself.</source>
          <target state="translated">다음 예제에서는 설정 하면 클릭 한 단추 배경 브러시 리소스 정의를 구할 수 있는 호출 하 여는 단추 처리기로 구현 됩니다 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;</ph> 자체에 있습니다.</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.TryFindResource(System.Object)">
          <source>This walks the element tree and finds the resource (the resource itself is defined in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and is not shown).</source>
          <target state="translated">요소 트리 내이 고 리소스를 찾습니다 (리소스 자체에 정의 된 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 표시 되지 않습니다).</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>Occurs when the element is removed from within an element tree of loaded elements.</source>
          <target state="translated">로드된 요소의 요소 트리에서 요소를 제거할 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</source>
          <target state="translated">라우트된 이벤트를 직접 경로 따르지 않는, 에서만 발생 하는 동일한 요소 내에서 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> in a style.</source>
          <target state="translated">라우트된 이벤트에 다른 라우트된 이벤트 동작 지원 않는 직접: 액세스할 수 있는 처리기 컬렉션을 지원 하며으로 사용할 수는 <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> 스타일에서입니다.</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;</ph> might both be raised on controls as a result of user-initiated system theme changes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;</ph> 시스템 사용자가 시작한 테마 변경의 결과로 컨트롤에서 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload.</source>
          <target state="translated">테마를 변경 하면 컨트롤 템플릿 및 포함 된 시각적 트리가 그러면 언로드하고 다시 로드 하기 위해 전체 컨트롤의 무효화 합니다.</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>Therefore <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;</ph> cannot be assumed to occur only on navigation away from the page.</source>
          <target state="translated">따라서 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;</ph> 페이지 탐색에 대해서만 발생 하도록 가정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>Note that the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;</ph> event is not raised after an application begins shutting down.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;</ph> 응용 프로그램 종료를 시작한 후에 이벤트가 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>Application shutdown occurs when the condition defined by the <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> property occurs.</source>
          <target state="translated">응용 프로그램 종료 조건에 정의 된 경우에 수행 된 <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> 속성이 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>If you place cleanup code within a handler for the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;</ph> event, such as for a <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> or a <ph id="ph3">&lt;xref:System.Windows.Controls.UserControl&gt;</ph>, it may not be called as expected.</source>
          <target state="translated">에 대 한 처리기 내에서 정리 코드를 배치 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;</ph> 이벤트에 대 한 <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Controls.UserControl&gt;</ph>, 예상 대로 하지 호출 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.FrameworkElement.Unloaded">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.UnloadedEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.Unloaded" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.Unloaded" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.UnloadedEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.UnloadedEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.UnloadedEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.UnloadedEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.FrameworkElement.UnloadedEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.UnregisterName(System.String)">
          <source>Name of the name-object pair to remove from the current scope.</source>
          <target state="translated">현재 범위에서 제거할 이름-개체 쌍의 이름입니다.</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.UnregisterName(System.String)">
          <source>Simplifies access to the <ph id="ph1">&lt;see cref="T:System.Windows.NameScope" /&gt;</ph> de-registration method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.NameScope" /&gt;</ph> 등록 취소 메서드에 대한 액세스를 간소화합니다.</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.FrameworkElement.UnregisterName(System.String)">
          <source>You only need to un-register names if you intend to re-register another element with that same name.</source>
          <target state="translated">하기만 하면 등록을 취소할 이름에 동일한 이름 갖는 다른 요소의 하려는 경우.</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve" uid="M:System.Windows.FrameworkElement.UpdateDefaultStyle">
          <source>Reapplies the default style to the current <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>.</source>
          <target state="translated">기본 스타일을 현재 <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>에 다시 적용합니다.</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>Gets or sets a value that indicates whether layout rounding should be applied to this element's size and position during layout.</source>
          <target state="translated">레이아웃 중에 이 요소의 크기와 위치에 레이아웃 반올림을 적용해야 하는지를 표시하는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if layout rounding is applied; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">레이아웃 반올림이 적용되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.UseLayoutRounding%2A&gt;</ph> property for an element is <ph id="ph2">`true`</ph>, all non-integral pixel values that are calculated during the <ph id="ph3">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> passes are rounded to whole pixel values.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.UseLayoutRounding%2A&gt;</ph> 요소에 대 한 속성은 <ph id="ph2">`true`</ph>, 중에 계산 되는 모든 정수 계열이 아닌 픽셀 값은 <ph id="ph3">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> 전달 정수 픽셀 값으로 반올림 됩니다.</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>This property is inherited by child elements.</source>
          <target state="translated">이 속성은 자식 요소에 의해 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>You should set <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.UseLayoutRounding%2A&gt;</ph> to <ph id="ph2">`true`</ph> on the root element.</source>
          <target state="translated">설정 해야 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.UseLayoutRounding%2A&gt;</ph> 를 <ph id="ph2">`true`</ph> 루트 요소에 있습니다.</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>The layout system adds child coordinates to the parent coordinates; therefore, if the parent coordinates are not on a pixel boundary, the child coordinates are also not on a pixel boundary.</source>
          <target state="translated">부모 좌표로; 자식 좌표를 추가 하는 레이아웃 시스템 따라서 부모 좌표는 픽셀 경계에 없는 경우 자식 좌표가 픽셀 경계에 있습니다.</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>If <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.UseLayoutRounding%2A&gt;</ph> cannot be set at the root, set <ph id="ph2">&lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt;</ph> on the child to obtain the effect that you want.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.UseLayoutRounding%2A&gt;</ph> 설정, 루트에서 설정할 수 없습니다 <ph id="ph2">&lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt;</ph> 자식 원하는 효과 가져올 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>Drawing objects on pixel boundaries eliminates the semi-transparent edges that are produced by anti-aliasing, when an edge falls in the middle of a device pixel.</source>
          <target state="translated">픽셀 경계에 개체를 그리기는 지 장치 픽셀 중간 포함 때 앤티 앨리어싱에 의해 생성 되는 반투명 가장자리 제거 합니다.</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>The following illustration shows the output of a single pixel-width line that falls in the middle of a device pixel.</source>
          <target state="translated">다음 그림을 장치 픽셀의 중간에 단일 픽셀 너비 줄의 출력을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>The line on the left does not use layout rounding and is anti-aliased.</source>
          <target state="translated">왼쪽에 줄 레이아웃 반올림을 사용 하지 않는 되며 앤티 앨리어싱 있습니다.</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>The line on the right uses layout rounding.</source>
          <target state="translated">오른쪽에 있는 줄 레이아웃 반올림을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source><bpt id="p1">![</bpt>Anti&amp;#45;aliased line compared to single pixel line.<ept id="p1">]</ept><bpt id="p2">(~/add/media/pixelsnaplinecompare.PNG "</bpt>Anti-aliased line compared to single pixel line.<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>앤티&amp;#45;단일 픽셀 선에 비교한 앨리어싱된 선입니다. <ept id="p1">]</ept> <bpt id="p2">(~/add/media/pixelsnaplinecompare.PNG "</bpt>단일 픽셀 선에 비교한 앤티 앨리어싱된 선입니다.<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>When you use layout rounding and <ph id="ph1">&lt;xref:System.Windows.GridUnitType.Star&gt;</ph> sizing, the layout system creates small variations in the column or row measurements to avoid subpixel rendering.</source>
          <target state="translated">레이아웃 반올림을 사용 하는 경우 및 <ph id="ph1">&lt;xref:System.Windows.GridUnitType.Star&gt;</ph> 크기 조정, 레이아웃 시스템 약간 변동에에서 만듭니다 하위 픽셀 렌더링 하지 않으려면 열 또는 행 측정 합니다.</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>For example, if a grid has a total width of 100 with 3 columns each of size <ph id="ph1">&lt;xref:System.Windows.GridUnitType.Star&gt;</ph>, instead of creating three columns that have an equal width of 33.3, the layout system creates 2 columns that have a width of 33 and one that has a width of 34.</source>
          <target state="translated">예를 들어 눈금 크기의 3 열이 있는 100의 전체 너비 <ph id="ph1">&lt;xref:System.Windows.GridUnitType.Star&gt;</ph>, 3 개의 열을 만드는 대신 33.3의 같은 너비를 가진, 레이아웃 시스템은 33 모델과 34의 너비의 너비는 2 개의 열을 만듭니다.</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>In .NET 4.6 changes were made to layout rounding to reduce instances of clipping in controls with borders.</source>
          <target state="translated">.NET 4.6에서 테두리가 있는 컨트롤에 클리핑 인스턴스를 줄이기 위해 레이아웃 반올림을 변경 되었습니다.</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>By default, this feature is enabled if your Target Framework is .NET Framework 4.6 or higher.</source>
          <target state="translated">기본적으로 대상 프레임 워크는.NET Framework 4.6 이상이 경우이 기능이 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>Applications that target earlier versions of the framework can opt in into the new behavior by adding the following setting to an app.config file: <ph id="ph1">`&lt;runtime&gt;&lt;AppContextSwitchOverrides value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/&gt;&lt;/runtime&gt;`</ph> The setting only takes effect when the application is running on the .NET Framework 4.6.</source>
          <target state="translated">이전 버전의 framework 대상으로 하는 응용 프로그램 app.config 파일에 다음 설정을 추가 하 여 새 동작을에 선택할 수: <ph id="ph1">`&lt;runtime&gt;&lt;AppContextSwitchOverrides value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/&gt;&lt;/runtime&gt;`</ph> 응용 프로그램은.NET Framework 4.6에서 실행 되는 하면 설정이 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>The following example demonstrates the effect that the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.UseLayoutRounding%2A&gt;</ph> property has on a single pixel-width line.</source>
          <target state="translated">다음 예제는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.UseLayoutRounding%2A&gt;</ph> 속성에 단일 픽셀 너비 줄에 합니다.</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>The line on the left does not use layout rounding and the line on the right uses layout rounding.</source>
          <target state="translated">왼쪽에 줄 레이아웃 반올림을 사용 하지 않는 하 고 오른쪽에 있는 줄 레이아웃 반올림을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.UseLayoutRounding">
          <source>If you slowly resize the window, you can see the difference that layout rounding makes.</source>
          <target state="translated">창 크기를 느리게 조정 하는 경우 해당 레이아웃 반올림이 적용 차이 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.UseLayoutRoundingProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.UseLayoutRounding" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.UseLayoutRounding" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>Gets or sets the vertical alignment characteristics applied to this element when it is composed within a parent element such as a panel or items control.</source>
          <target state="translated">패널 또는 항목 컨트롤 같은 부모 요소에 구성되어 있을 경우 이 요소에 적용되는 세로 맞춤 특징을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>A vertical alignment setting.</source>
          <target state="translated">세로 맞춤 설정입니다.</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.VerticalAlignment.Stretch" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Windows.VerticalAlignment.Stretch" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>When <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> properties are explicitly set on an element, these measurements take layout precedent and cancel the regular effects of setting this property to <ph id="ph3">&lt;xref:System.Windows.VerticalAlignment.Stretch&gt;</ph>.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> 속성 요소에 명시적으로 설정 되어, 이러한 값 이전의 레이아웃을 선택 하 고이 속성을 설정 하 여 일반적인 효과 취소 <ph id="ph3">&lt;xref:System.Windows.VerticalAlignment.Stretch&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.VerticalAlignment%2A&gt;</ph> is the <ph id="ph2">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> property accessor for what is in reality a dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.VerticalAlignment%2A&gt;</ph> 이 <ph id="ph2">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> 이란 현실에서 종속성 속성에 대 한 속성 접근자입니다.</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>This particular dependency property quite frequently has its apparent "default" value set differently in derived element classes, particularly controls.</source>
          <target state="translated">이 특정 종속성 속성에는 해당 "기본값이"이 파생 된 요소 클래스, 특히 컨트롤에서에서 서로 다르게 설정 많습니다.</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>This generally occurs in one of two ways: the dependency property is re-registered to a particular  derived class, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently.</source>
          <target state="translated">일반적으로이 두 가지 방법 중 하나에서 발생 합니다: 종속성 속성은 해당 기본값을 설정 하기 위한 여러 가지 메타 데이터 사용 하면서도 특정 파생된 클래스에 다시 등록 있거나 해당 종속성 속성 값을 다르게 설정 하는 기본 스타일 적용 되 고 있습니다.</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>For example, the apparent "default" of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.VerticalAlignment%2A&gt;</ph> for a <ph id="ph2">&lt;xref:System.Windows.Controls.ComboBoxItem&gt;</ph> control will be <ph id="ph3">&lt;xref:System.Windows.VerticalAlignment.Center&gt;</ph>, even though <ph id="ph4">&lt;xref:System.Windows.Controls.ComboBoxItem&gt;</ph> inherits <ph id="ph5">&lt;xref:System.Windows.FrameworkElement.VerticalAlignment%2A&gt;</ph> direct from <ph id="ph6">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
          <target state="translated">예를 들어 명백한 "기본값"의 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.VerticalAlignment%2A&gt;</ph> 에 대 한는 <ph id="ph2">&lt;xref:System.Windows.Controls.ComboBoxItem&gt;</ph> 컨트롤 됩니다 <ph id="ph3">&lt;xref:System.Windows.VerticalAlignment.Center&gt;</ph>경우라도, <ph id="ph4">&lt;xref:System.Windows.Controls.ComboBoxItem&gt;</ph> 상속 <ph id="ph5">&lt;xref:System.Windows.FrameworkElement.VerticalAlignment%2A&gt;</ph> 에서 직접 <ph id="ph6">&lt;xref:System.Windows.FrameworkElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>This is because that value was reset within the default style of <ph id="ph1">&lt;xref:System.Windows.Controls.ComboBoxItem&gt;</ph>, within the style's control template.</source>
          <target state="translated">즉, 해당 값의 기본 스타일 내에서 다시 설정 된 <ph id="ph1">&lt;xref:System.Windows.Controls.ComboBoxItem&gt;</ph>, 스타일의 컨트롤 템플릿 내에서.</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> does not use <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.VerticalAlignment%2A&gt;</ph> when composing layout, because <ph id="ph3">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> is based on absolute positioning.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> 사용 하지 않는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.VerticalAlignment%2A&gt;</ph> 때문에 레이아웃을 구성할 때 <ph id="ph3">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> 절대 위치에 기반 합니다.</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>When inherited by <ph id="ph1">&lt;xref:System.Windows.Controls.ComboBoxItem&gt;</ph> or any derived classes, <ph id="ph2">&lt;xref:System.Windows.Controls.ComboBoxItem&gt;</ph> redefines the default value of this property to be <ph id="ph3">&lt;xref:System.Windows.VerticalAlignment.Center&gt;</ph>.</source>
          <target state="translated">상속 되는 경우 <ph id="ph1">&lt;xref:System.Windows.Controls.ComboBoxItem&gt;</ph> 파생 클래스 또는 <ph id="ph2">&lt;xref:System.Windows.Controls.ComboBoxItem&gt;</ph> 되려면이 속성의 기본값을 재정의 <ph id="ph3">&lt;xref:System.Windows.VerticalAlignment.Center&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VerticalAlignment">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.VerticalAlignmentProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.VisualChildrenCount">
          <source>Gets the number of visual child elements within this element.</source>
          <target state="translated">이 요소 내 시각적 자식 요소의 수를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VisualChildrenCount">
          <source>The number of visual child elements for this element.</source>
          <target state="translated">이 요소에 대한 시각적 자식 요소의 수입니다.</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VisualChildrenCount">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> implementation of <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.VisualChildrenCount%2A&gt;</ph> always returns either zero or one.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 구현의 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.VisualChildrenCount%2A&gt;</ph> 항상 0 이나 1을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VisualChildrenCount">
          <source>Classes that maintain a visual child collection that might exceed one must override both this property and <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.GetVisualChild%2A&gt;</ph>.</source>
          <target state="translated">하나 초과 하는 시각적 자식 컬렉션을 유지 관리 하는 클래스는 모두이 속성을 재정의 해야 하 고 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.GetVisualChild%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VisualChildrenCount">
          <source>This property is generally used to determine the upper bounds of the current child collection for purposes of implementing the layout overrides (<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>).</source>
          <target state="translated">이 속성은 레이아웃 재정의 구현 하기 위해 현재 자식 컬렉션의 상한값을 확인 하려면 일반적으로 사용 됩니다 (<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VisualChildrenCount">
          <source>The following example shows how a custom adorner uses the values declared by a <ph id="ph1">&lt;xref:System.Windows.Media.VisualCollection&gt;</ph> that it maintains for its multiple visual children and reports these values through overrides of <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.VisualChildrenCount%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.GetVisualChild%2A&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 사용자 지정 표시기에서 선언 되는 값을 사용 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.Media.VisualCollection&gt;</ph> 의 재정의 통해 여러 시각적 자식에 대 한 유지 관리 하 고 이러한 보고 값 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.VisualChildrenCount%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.GetVisualChild%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VisualChildrenCount">
          <source>If your class supports more than one visual child in a child element collection, override this property to return the count of elements in that collection.</source>
          <target state="translated">클래스를 지 원하는 경우 둘 이상의 시각적 자식 자식 요소 컬렉션에서 해당 컬렉션의 요소 수를 반환 하도록이 속성을 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VisualChildrenCount">
          <source>You must do this even if the collection object itself returns a count.</source>
          <target state="translated">컬렉션 개체 자체는 개수를 반환 하는 경우에이 작업을 수행 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.VisualChildrenCount">
          <source>Element layout logic at the WPF framework level presumes that all elements will return a valid count through their <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /&gt;</ph> property.</source>
          <target state="translated">요소 레이아웃 논리 WPF 프레임 워크 수준에서 모든 요소를 통해 올바른 개수가 반환 한다는 것을 가정 자신의 <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" uid="P:System.Windows.FrameworkElement.Width">
          <source>Gets or sets the width of the element.</source>
          <target state="translated">요소의 너비를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>The width of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>.</source>
          <target state="translated">요소의 너비(<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>The default value is <ph id="ph1">&lt;see cref="F:System.Double.NaN" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Double.NaN" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>This value must be equal to or greater than 0.0.</source>
          <target state="translated">이 값은 0.0보다 크거나 같아야 합니다.</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>See Remarks for upper bound information.</source>
          <target state="translated">상한 정보에 대한 설명을 참조하세요.</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>This is one of three properties on <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that specify width information.</source>
          <target state="translated">이 세 가지 속성 중 하나에 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 너비 정보를 지정 하는 합니다.</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>The other two are <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>.</source>
          <target state="translated">다른 두 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>If there is a conflict between these values, the order of application for actual width determination is first <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</ph> must be honored, then <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>, and finally if each of these are within bounds, <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>.</source>
          <target state="translated">이러한 값 간에 충돌이 발생 하는 경우 실제 너비 결정 하기 위한 응용 프로그램의 순서는 첫 번째 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</ph> 다음, 해야 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>, 마지막으로 이러한 각 범위 내에 있는 경우 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>The return value of this property is always the same as any value that was set to it.</source>
          <target state="translated">이 속성의 반환 값은 항상에 대해 설정 된 값과 동일 합니다.</target>       </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>In contrast, the value of the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph> may vary.</source>
          <target state="translated">반대로,의 값은 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph> 다를 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>The layout may have rejected the suggested size for some reason.</source>
          <target state="translated">레이아웃은 몇 가지 이유로 제안된 크기를 거부 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>Also, the layout system itself works asynchronously relative to the property system set of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> and may not have processed that particular sizing property change yet.</source>
          <target state="translated">자체 레이아웃 시스템 비동기적으로 동작 하의 시스템 속성 집합을 기준으로 또한 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> 및 해당 특정 크기 조정 속성 변경 내용을 아직 처리 되지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>In addition to acceptable <ph id="ph1">&lt;xref:System.Double&gt;</ph> values, this property can also be <ph id="ph2">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">또한 허용 가능한 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값,이 속성 될 수도 있습니다 <ph id="ph2">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>This is how you specify auto sizing behavior.</source>
          <target state="translated">자동 크기 조정 동작을 지정 하는 방법입니다.</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> you set the value to the string "Auto" (case insensitive) to enable the auto sizing behavior.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 는 값을 설정 하면 문자열 "Auto" (대/소문자 구분)로 자동 크기 조정 동작을 사용 하도록 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>Auto sizing behavior implies that the element will fill the width available to it.</source>
          <target state="translated">자동 크기 조정 동작 요소를 사용할 수 있는 너비 가득 찰 의미 합니다.</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>Note however that specific controls frequently supply default values in their default styles that will disable the auto sizing behavior unless it is specifically re-enabled.</source>
          <target state="translated">그러나 note 특정 컨트롤을 구체적으로 다시 설정 된 경우가 아니라면 크기 조정 동작은 자동 수 없게 하는 기본 스타일에서 기본값 제공 하는 경우가 많습니다.</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>In addition to the validation check, there is a nondeterministic upper value bound for <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> that is enforced by the layout system (this is a very large number, larger than <ph id="ph2">&lt;xref:System.Single.MaxValue?displayProperty=nameWithType&gt;</ph> but smaller than <ph id="ph3">&lt;xref:System.Double.MaxValue?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">유효성 검사 이외에 비결 정적 상한 값에 대 한 경계 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> 레이아웃 시스템에 의해 적용 하는 (이 보다 큰 매우 큰 숫자 <ph id="ph2">&lt;xref:System.Single.MaxValue?displayProperty=nameWithType&gt;</ph> 보다 높지만 <ph id="ph3">&lt;xref:System.Double.MaxValue?displayProperty=nameWithType&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>If you exceed this bound, the element will not render, and no exception is thrown.</source>
          <target state="translated">이 경계를 초과 하면 요소가 렌더링 되지 하 고 예외가 throw 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>Do not set <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.</source>
          <target state="translated">설정 하지 않으면 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> 가능한 시각적 표시의 최대 크기가 비결 정적 상한 값을 초과할 수 보다 훨씬 큰 값으로.</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 특성 사용</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source><bpt id="p1">*</bpt>double<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>double<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>String representation of a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value equal to or greater than 0.0.</source>
          <target state="translated">문자열 표현은 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 0.0 보다 크거나 같은 값입니다.</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>See Remarks for upper bound information.</source>
          <target state="translated">상한 정보에 대한 설명을 참조하세요.</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>This value is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">이 값으로 해석 되는 <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph> 측정 합니다.</target>       </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">문자열은 소수점이 하를 명시적으로 포함 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">예를 들어 값의 <ph id="ph1">`1`</ph> 허용 됩니다.</target>       </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>A <bpt id="p1">*</bpt>double<ept id="p1">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated">A <bpt id="p1">*</bpt>double<ept id="p1">*</ept> 단위 선언 문자열 중 하나에 의해 다음 위에서 설명한 대로 값: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></source>
          <target state="translated"><ph id="ph1">`px`</ph> (기본값)은 <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source><ph id="ph1">`in`</ph> is inches; 1in==96px</source>
          <target state="translated"><ph id="ph1">`in`</ph> is inches; 1in==96px</target>       </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source><ph id="ph1">`cm`</ph> is centimeters; 1cm==(96/2.54) px</source>
          <target state="translated"><ph id="ph1">`cm`</ph> 센티미터; 1cm==(96/2.54) px</target>       </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source><ph id="ph1">`pt`</ph> is points; 1pt==(96/72) px</source>
          <target state="translated"><ph id="ph1">`pt`</ph> is points; 1pt==(96/72) px</target>       </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>Enables autosizing behavior.</source>
          <target state="translated">자동 크기 조정 동작을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>See Remarks.</source>
          <target state="translated">설명 부분을 참조하세요.</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.FrameworkElement.Width">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" uid="F:System.Windows.FrameworkElement.WidthProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Width" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.FrameworkElement.Width" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>