<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="LogicalTreeHelper.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f2fd27ad4c537a177069b372af2f1a949e102361.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f2fd27ad4c537a177069b372af2f1a949e102361</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.LogicalTreeHelper">
          <source>Provides static helper methods for querying objects in the logical tree.</source>
          <target state="translated">논리적 트리에서 개체를 쿼리하기 위한 정적 도우미 메서드를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.LogicalTreeHelper">
          <source>The <ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper&gt;</ph> class provides methods that you can use to return child collections of objects, or specific objects from within subnodes of the logical tree.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper&gt;</ph> 하위 노드가 논리 트리 내에서 특정 개체 또는 개체의 자식 컬렉션을 반환 하는 데 사용할 수 있는 메서드를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.LogicalTreeHelper">
          <source>However, most of the object tree operations that you typically perform are also exposed by similar methods or properties on <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>.</source>
          <target state="translated">그러나 대부분의 일반적으로 수행 하는 개체 트리 작업 또한에 의해 노출 되 유사한 메서드나 속성에 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.LogicalTreeHelper">
          <source>For example, try the following:</source>
          <target state="translated">예를 들어 다음과 같이 하세요.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.LogicalTreeHelper">
          <source>Instead of calling the static <ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper.GetChildren%2A&gt;</ph> method, which returns an enumerator for the logical child objects, use the dedicated collection exposed in the content model for that object.</source>
          <target state="translated">정적을 호출 하는 대신 <ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper.GetChildren%2A&gt;</ph> 논리 자식에 대 한 열거자 개체를 반환 하는 메서드를 해당 개체에 대 한 콘텐츠 모델에는 표시 전용된 컬렉션을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.LogicalTreeHelper">
          <source>Nearly all objects that support a content model expose some property that contains the collection of child objects, and provides collection interface support directly on that collection.</source>
          <target state="translated">콘텐츠 모델을 지 원하는 거의 모든 개체는 자식 개체의 컬렉션을 포함 하 고 해당 컬렉션에서 컬렉션 인터페이스를 직접 지원 제공 하는 일부 속성을 노출 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.LogicalTreeHelper">
          <source>Instead of calling the static <ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph> method to obtain a child object by specifying its name, call the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType&gt;</ph> method on specific objects.</source>
          <target state="translated">정적을 호출 하는 대신 <ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph> 메서드 호출의 이름을 지정 하 여 자식 개체를 가져오려면는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType&gt;</ph> 특정 개체에 메서드.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.LogicalTreeHelper">
          <source><ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper&gt;</ph> is most useful for analysis scenarios where you are traveling up or down the logical tree recursively through multiple levels, and want to use a consistent approach for examining the various parent or child objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper&gt;</ph> 여러 수준에서 재귀적으로 논리 트리를 위아래로 이동 하 고 다양 한 부모 또는 자식 개체를 검사 하기 위한 일관 된 접근 방식을 사용 하려면 분석 시나리오에 가장 유용 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.LogicalTreeHelper">
          <source>In this case, you might be accessing a mixture of content models, and using the more content-model specific APIs would be too complex.</source>
          <target state="translated">이 경우 있습니다, 정적 콘텐츠 모델의 혼합을에 액세스할 수 있는 하 고 더 많은 콘텐츠 모델을 사용 하 여 특정 Api는 너무 복잡 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)">
          <source>The UI element to bring into view.</source>
          <target state="translated">뷰로 가져올 UI 요소입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)">
          <source>Attempts to bring the requested UI element into view and raises the <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /&gt;</ph> event on the target in order to report the results.</source>
          <target state="translated">요청된 UI 요소를 뷰로 가져오고 대상에서 <ph id="ph1">&lt;see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /&gt;</ph> 이벤트를 발생시켜 결과를 보고합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)">
          <source>It is typically more convenient to call the instance methods <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=nameWithType&gt;</ph> rather than this static utility method.</source>
          <target state="translated">인스턴스 메서드를 호출 하는 편리한 일반적으로 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=nameWithType&gt;</ph> 이 정적 유틸리티 메서드가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)">
          <source>The behavior of the instance methods is equivalent to the behavior of the static method.</source>
          <target state="translated">인스턴스 메서드의 동작은 정적 메서드의 동작 하는 것과 같습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)">
          <source>Even if the <ph id="ph1">`current`</ph> UI element provided was a <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>, the resulting event is still the same <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType&gt;</ph> event, with the originating <ph id="ph4">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> identifiable by checking the event data of the event.</source>
          <target state="translated">경우에는 <ph id="ph1">`current`</ph> 제공 되는 UI 요소를는 <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>, 결과 이벤트는 여전히 동일 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType&gt;</ph> 이벤트 발생 하 <ph id="ph4">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> 이벤트의 이벤트 데이터를 확인 하 여 식별할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>The object to start searching from.</source>
          <target state="translated">검색을 시작할 개체입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>This object must be either a <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> or a <ph id="ph2">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph>.</source>
          <target state="translated">이 개체는 <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph>여야 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>The name of the object to find.</source>
          <target state="translated">찾을 개체의 이름입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>Attempts to find and return an object that has the specified name.</source>
          <target state="translated">지정된 이름을 갖는 개체를 찾아 반환합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>The search starts from the specified object and continues into subnodes of the logical tree.</source>
          <target state="translated">지정된 개체에서 시작하여 논리적 트리의 하위 노드로 계속 검색합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>The object with the matching name, if one is found; returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no matching name was found in the logical tree.</source>
          <target state="translated">이름이 일치하는 개체가 있으면 이 개체이고, 논리적 트리에서 일치하는 이름이 없으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>The methods <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType&gt;</ph> are superficially similar to <ph id="ph3">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph>, but operate by different logic:</source>
          <target state="translated">메서드 <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType&gt;</ph> 외견상으로 유사 <ph id="ph3">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph>, 다른 논리도 작동 하지만:</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>The search direction for <ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph> is toward child objects (down the tree); the search direction for the <ph id="ph2">`FindName`</ph> methods is towards parent objects (up the tree).</source>
          <target state="translated">에 대 한 검색 방향을 <ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph> 으로 (아래쪽; 트리) 자식 개체에 대 한 검색 방향을 <ph id="ph2">`FindName`</ph> 메서드 (트리)를 부모 개체입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>The <ph id="ph1">`FindName`</ph> methods are governed by the concept of a XAML namescope.</source>
          <target state="translated"><ph id="ph1">`FindName`</ph> 메서드는 XAML 네임 스페이스의 개념에 의해 제어 됩니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>Using <ph id="ph1">`FindName`</ph> you are guaranteed that only one object of that name exists, because XAML namescopes enforce uniqueness.</source>
          <target state="translated">사용 하 여 <ph id="ph1">`FindName`</ph> 하나만 보장이 고유성을 적용 하는 XAML 이름 범위 이기 때문에 해당 이름의 개체가 존재 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>In contrast, <ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph> ignores XAML namescope and might cross XAML namescope boundaries during the search.</source>
          <target state="translated">반면, <ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph> 검색 하는 동안 XAML 이름 범위 및 XAML 이름 범위 경계를 넘을 수 있습니다를 무시 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>As such, there is no guarantee of uniqueness of the <ph id="ph1">`elementName`</ph> name once boundaries are crossed.</source>
          <target state="translated">따라서 보장이 없습니다의 고유성는 <ph id="ph1">`elementName`</ph> 경계에 도달한 후 이름을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)">
          <source>For more information about XAML namescopes, see <bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)</ept>.</source>
          <target state="translated">XAML 이름 범위에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>WPF XAML 이름 범위<ept id="p1">](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="T:System.Windows.LogicalTreeHelper">
          <source>Returns the collection of immediate child objects of the specified object by processing the logical tree.</source>
          <target state="translated">논리적 트리를 처리하여, 지정된 개체의 직계 자식 개체 컬렉션을 반환합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)">
          <source>The object from which to start processing the logical tree.</source>
          <target state="translated">논리적 트리의 처리를 시작하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)">
          <source>This is expected to be either a <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph>여야 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)">
          <source>Returns the collection of immediate child objects of the specified object, by processing the logical tree.</source>
          <target state="translated">논리적 트리를 처리하여 지정된 개체의 직계 자식 개체 컬렉션을 반환합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)">
          <source>The enumerable collection of immediate child objects from the logical tree of the specified object.</source>
          <target state="translated">지정된 개체의 논리적 트리에서 열거 가능한 직계 자식 개체 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)">
          <source>Use this signature and helper method primarily when you are unsure whether <ph id="ph1">`current`</ph> is a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> and are also unsure whether that object's class supports its own content model collection.</source>
          <target state="translated">확실 하지 않은 경우에 주로이 서명 및 도우미 메서드를 사용 하 여 여부 <ph id="ph1">`current`</ph> 는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> 확실 하지 않으면도 해당 개체의 클래스 자체의 정적 콘텐츠 모델이 컬렉션을 지원 하는지 여부입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)">
          <source>If you can determine the type of the object you are querying, check the specific content property that you know exists on that type.</source>
          <target state="translated">쿼리 중인 개체의 형식을 결정할 수 있습니다 하는 경우 해당 형식에 있는 사용자가 알고 있는 특정 콘텐츠 속성을 확인 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)">
          <source>For example, if you know that the object you are querying is an <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl.Items%2A&gt;</ph> property to get a strongly typed collection, which has collection interface support and is probably more useful than an enumerator.</source>
          <target state="translated">쿼리 하려는 개체를 알고 있는 경우는 예를 들어는 <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph>, 확인 된 <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl.Items%2A&gt;</ph> 속성은 컬렉션 인터페이스를 지원 하며 보다는 열거자 유용할 수 있는 강력한 형식의 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)">
          <source>The object from which to start processing the logical tree.</source>
          <target state="translated">논리적 트리의 처리를 시작하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)">
          <source>Returns the collection of immediate child objects of the specified <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph> by processing the logical tree.</source>
          <target state="translated">논리적 트리를 처리하여, 지정된 <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph>의 직계 자식 개체 컬렉션을 반환합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)">
          <source>The enumerable collection of immediate child objects starting from <ph id="ph1">&lt;paramref name="current" /&gt;</ph> in the logical tree.</source>
          <target state="translated">논리적 트리의 <ph id="ph1">&lt;paramref name="current" /&gt;</ph>에서 시작하는 열거 가능한 직계 자식 개체의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)">
          <source>The object from which to start processing the logical tree.</source>
          <target state="translated">논리적 트리의 처리를 시작하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)">
          <source>Returns the collection of immediate child objects of the specified <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> by processing the logical tree.</source>
          <target state="translated">논리적 트리를 처리하여, 지정된 <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph>의 직계 자식 개체 컬렉션을 반환합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)">
          <source>The enumerable collection of immediate child objects starting from <ph id="ph1">&lt;paramref name="current" /&gt;</ph> in the logical tree.</source>
          <target state="translated">논리적 트리의 <ph id="ph1">&lt;paramref name="current" /&gt;</ph>에서 시작하는 열거 가능한 직계 자식 개체의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)">
          <source>The object to find the parent object for.</source>
          <target state="translated">부모 개체를 찾을 개체입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)">
          <source>This is expected to be either a <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> or a <ph id="ph2">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph>여야 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)">
          <source>Returns the parent object of the specified object by processing the logical tree.</source>
          <target state="translated">논리적 트리를 처리하여, 지정된 개체의 부모 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)">
          <source>The requested parent object.</source>
          <target state="translated">요청된 부모 개체입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)">
          <source>This method is merely a wrapper that gets the appropriate type version (<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>) of the <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=nameWithType&gt;</ph> property; so unless you are unable to determine the <ph id="ph5">`current`</ph> type, you might want to check the respective instance properties instead.</source>
          <target state="translated">이 메서드는 적절 한 형식 버전을 가져옵니다 되는 래퍼를 단순히 (<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>)의 <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph4">&lt;xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=nameWithType&gt;</ph> 속성; 하도록 확인할 수 없는 경우가 아니면는 <ph id="ph5">`current`</ph> 형식 하려는 경우도 해당 확인 인스턴스 속성 대신 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>