<Type Name="LogicalTreeHelper" FullName="System.Windows.LogicalTreeHelper">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="62b7945787d0b94dce6ae67c8577e1d895687cda" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36458582" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class LogicalTreeHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LogicalTreeHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.LogicalTreeHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class LogicalTreeHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogicalTreeHelper abstract sealed" />
  <TypeSignature Language="F#" Value="type LogicalTreeHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="b79fa-101">논리적 트리에서 개체를 쿼리하기 위한 정적 도우미 메서드를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b79fa-101">Provides static helper methods for querying objects in the logical tree.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b79fa-102"><xref:System.Windows.LogicalTreeHelper> 하위 노드가 논리 트리 내에서 특정 개체 또는 개체의 자식 컬렉션을 반환 하는 데 사용할 수 있는 메서드를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="b79fa-102">The <xref:System.Windows.LogicalTreeHelper> class provides methods that you can use to return child collections of objects, or specific objects from within subnodes of the logical tree.</span></span> <span data-ttu-id="b79fa-103">그러나 대부분의 일반적으로 수행 하는 개체 트리 작업 또한에 의해 노출 되 유사한 메서드나 속성에 <xref:System.Windows.FrameworkElement> 또는 <xref:System.Windows.FrameworkContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="b79fa-103">However, most of the object tree operations that you typically perform are also exposed by similar methods or properties on <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>.</span></span> <span data-ttu-id="b79fa-104">예를 들어 다음과 같이 하세요.</span><span class="sxs-lookup"><span data-stu-id="b79fa-104">For example, try the following:</span></span>  
  
-   <span data-ttu-id="b79fa-105">정적을 호출 하는 대신 <xref:System.Windows.LogicalTreeHelper.GetChildren%2A> 논리 자식에 대 한 열거자 개체를 반환 하는 메서드를 해당 개체에 대 한 콘텐츠 모델에는 표시 전용된 컬렉션을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="b79fa-105">Instead of calling the static <xref:System.Windows.LogicalTreeHelper.GetChildren%2A> method, which returns an enumerator for the logical child objects, use the dedicated collection exposed in the content model for that object.</span></span> <span data-ttu-id="b79fa-106">콘텐츠 모델을 지 원하는 거의 모든 개체는 자식 개체의 컬렉션을 포함 하 고 해당 컬렉션에서 컬렉션 인터페이스를 직접 지원 제공 하는 일부 속성을 노출 합니다.</span><span class="sxs-lookup"><span data-stu-id="b79fa-106">Nearly all objects that support a content model expose some property that contains the collection of child objects, and provides collection interface support directly on that collection.</span></span>  
  
-   <span data-ttu-id="b79fa-107">정적을 호출 하는 대신 <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> 메서드 호출의 이름을 지정 하 여 자식 개체를 가져오려면는 <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> 또는 <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> 특정 개체에 메서드.</span><span class="sxs-lookup"><span data-stu-id="b79fa-107">Instead of calling the static <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> method to obtain a child object by specifying its name, call the <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> or <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> method on specific objects.</span></span>  
  
 <span data-ttu-id="b79fa-108"><xref:System.Windows.LogicalTreeHelper> 여러 수준에서 재귀적으로 논리 트리를 위아래로 이동 하 고 다양 한 부모 또는 자식 개체를 검사 하기 위한 일관 된 접근 방식을 사용 하려면 분석 시나리오에 가장 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="b79fa-108"><xref:System.Windows.LogicalTreeHelper> is most useful for analysis scenarios where you are traveling up or down the logical tree recursively through multiple levels, and want to use a consistent approach for examining the various parent or child objects.</span></span> <span data-ttu-id="b79fa-109">이 경우 있습니다, 정적 콘텐츠 모델의 혼합을에 액세스할 수 있는 하 고 더 많은 콘텐츠 모델을 사용 하 여 특정 Api는 너무 복잡 합니다.</span><span class="sxs-lookup"><span data-stu-id="b79fa-109">In this case, you might be accessing a mixture of content models, and using the more content-model specific APIs would be too complex.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public static void BringIntoView (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BringIntoView(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BringIntoView (current As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BringIntoView(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member BringIntoView : System.Windows.DependencyObject -&gt; unit" Usage="System.Windows.LogicalTreeHelper.BringIntoView current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">
          <span data-ttu-id="b79fa-110">뷰로 가져올 UI 요소입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79fa-110">The UI element to bring into view.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b79fa-111">요청된 UI 요소를 뷰로 가져오고 대상에서 <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> 이벤트를 발생시켜 결과를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79fa-111">Attempts to bring the requested UI element into view and raises the <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> event on the target in order to report the results.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b79fa-112">인스턴스 메서드를 호출 하는 편리한 일반적으로 <xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=nameWithType> 또는 <xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=nameWithType> 이 정적 유틸리티 메서드가 아니라 합니다.</span><span class="sxs-lookup"><span data-stu-id="b79fa-112">It is typically more convenient to call the instance methods <xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=nameWithType> or <xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=nameWithType> rather than this static utility method.</span></span> <span data-ttu-id="b79fa-113">인스턴스 메서드의 동작은 정적 메서드의 동작 하는 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="b79fa-113">The behavior of the instance methods is equivalent to the behavior of the static method.</span></span>  
  
 <span data-ttu-id="b79fa-114">경우에는 `current` 제공 되는 UI 요소를는 <xref:System.Windows.FrameworkContentElement>, 결과 이벤트는 여전히 동일 <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType> 이벤트 발생 하 <xref:System.Windows.FrameworkContentElement> 이벤트의 이벤트 데이터를 확인 하 여 식별할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b79fa-114">Even if the `current` UI element provided was a <xref:System.Windows.FrameworkContentElement>, the resulting event is still the same <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType> event, with the originating <xref:System.Windows.FrameworkContentElement> identifiable by checking the event data of the event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      </Docs>
    </Member>
    <Member MemberName="FindLogicalNode">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject FindLogicalNode (System.Windows.DependencyObject logicalTreeNode, string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject FindLogicalNode(class System.Windows.DependencyObject logicalTreeNode, string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindLogicalNode (logicalTreeNode As DependencyObject, elementName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ FindLogicalNode(System::Windows::DependencyObject ^ logicalTreeNode, System::String ^ elementName);" />
      <MemberSignature Language="F#" Value="static member FindLogicalNode : System.Windows.DependencyObject * string -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.FindLogicalNode (logicalTreeNode, elementName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalTreeNode" Type="System.Windows.DependencyObject" />
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logicalTreeNode">
          <span data-ttu-id="b79fa-115">검색을 시작할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79fa-115">The object to start searching from.</span>
          </span>
          <span data-ttu-id="b79fa-116">이 개체는 <see cref="T:System.Windows.FrameworkElement" /> 또는 <see cref="T:System.Windows.FrameworkContentElement" />여야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79fa-116">This object must be either a <see cref="T:System.Windows.FrameworkElement" /> or a <see cref="T:System.Windows.FrameworkContentElement" />.</span>
          </span>
        </param>
        <param name="elementName">
          <span data-ttu-id="b79fa-117">찾을 개체의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79fa-117">The name of the object to find.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b79fa-118">지정된 이름을 갖는 개체를 찾아 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79fa-118">Attempts to find and return an object that has the specified name.</span>
          </span>
          <span data-ttu-id="b79fa-119">지정된 개체에서 시작하여 논리적 트리의 하위 노드로 계속 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79fa-119">The search starts from the specified object and continues into subnodes of the logical tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b79fa-120">이름이 일치하는 개체가 있으면 이 개체이고, 논리적 트리에서 일치하는 이름이 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79fa-120">The object with the matching name, if one is found; returns <see langword="null" /> if no matching name was found in the logical tree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b79fa-121">메서드 <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> 및 <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> 외견상으로 유사 <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>, 다른 논리도 작동 하지만:</span><span class="sxs-lookup"><span data-stu-id="b79fa-121">The methods <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> and <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> are superficially similar to <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>, but operate by different logic:</span></span>  
  
-   <span data-ttu-id="b79fa-122">에 대 한 검색 방향을 <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> 으로 (아래쪽; 트리) 자식 개체에 대 한 검색 방향을 `FindName` 메서드 (트리)를 부모 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b79fa-122">The search direction for <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> is toward child objects (down the tree); the search direction for the `FindName` methods is towards parent objects (up the tree).</span></span>  
  
-   <span data-ttu-id="b79fa-123">`FindName` 메서드는 XAML 네임 스페이스의 개념에 의해 제어 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b79fa-123">The `FindName` methods are governed by the concept of a XAML namescope.</span></span> <span data-ttu-id="b79fa-124">사용 하 여 `FindName` 하나만 보장이 고유성을 적용 하는 XAML 이름 범위 이기 때문에 해당 이름의 개체가 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="b79fa-124">Using `FindName` you are guaranteed that only one object of that name exists, because XAML namescopes enforce uniqueness.</span></span> <span data-ttu-id="b79fa-125">반면, <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> 검색 하는 동안 XAML 이름 범위 및 XAML 이름 범위 경계를 넘을 수 있습니다를 무시 합니다.</span><span class="sxs-lookup"><span data-stu-id="b79fa-125">In contrast, <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> ignores XAML namescope and might cross XAML namescope boundaries during the search.</span></span> <span data-ttu-id="b79fa-126">따라서 보장이 없습니다의 고유성는 `elementName` 경계에 도달한 후 이름을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="b79fa-126">As such, there is no guarantee of uniqueness of the `elementName` name once boundaries are crossed.</span></span> <span data-ttu-id="b79fa-127">XAML 이름 범위에 대 한 자세한 내용은 참조 [WPF XAML 이름 범위](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b79fa-127">For more information about XAML namescopes, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChildren">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b79fa-128">논리적 트리를 처리하여, 지정된 개체의 직계 자식 개체 컬렉션을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79fa-128">Returns the collection of immediate child objects of the specified object by processing the logical tree.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As DependencyObject) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.DependencyObject -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">
          <span data-ttu-id="b79fa-129">논리적 트리의 처리를 시작하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79fa-129">The object from which to start processing the logical tree.</span>
          </span>
          <span data-ttu-id="b79fa-130">
            <see cref="T:System.Windows.FrameworkElement" /> 또는 <see cref="T:System.Windows.FrameworkContentElement" />여야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79fa-130">This is expected to be either a <see cref="T:System.Windows.FrameworkElement" /> or <see cref="T:System.Windows.FrameworkContentElement" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b79fa-131">논리적 트리를 처리하여 지정된 개체의 직계 자식 개체 컬렉션을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79fa-131">Returns the collection of immediate child objects of the specified object, by processing the logical tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b79fa-132">지정된 개체의 논리적 트리에서 열거 가능한 직계 자식 개체 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79fa-132">The enumerable collection of immediate child objects from the logical tree of the specified object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b79fa-133">확실 하지 않은 경우에 주로이 서명 및 도우미 메서드를 사용 하 여 여부 `current` 는 <xref:System.Windows.FrameworkElement> 또는 <xref:System.Windows.FrameworkContentElement> 확실 하지 않으면도 해당 개체의 클래스 자체의 정적 콘텐츠 모델이 컬렉션을 지원 하는지 여부입니다.</span><span class="sxs-lookup"><span data-stu-id="b79fa-133">Use this signature and helper method primarily when you are unsure whether `current` is a <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement> and are also unsure whether that object's class supports its own content model collection.</span></span> <span data-ttu-id="b79fa-134">쿼리 중인 개체의 형식을 결정할 수 있습니다 하는 경우 해당 형식에 있는 사용자가 알고 있는 특정 콘텐츠 속성을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="b79fa-134">If you can determine the type of the object you are querying, check the specific content property that you know exists on that type.</span></span> <span data-ttu-id="b79fa-135">쿼리 하려는 개체를 알고 있는 경우는 예를 들어는 <xref:System.Windows.Controls.ItemsControl>, 확인 된 <xref:System.Windows.Controls.ItemsControl.Items%2A> 속성은 컬렉션 인터페이스를 지원 하며 보다는 열거자 유용할 수 있는 강력한 형식의 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="b79fa-135">For example, if you know that the object you are querying is an <xref:System.Windows.Controls.ItemsControl>, check the <xref:System.Windows.Controls.ItemsControl.Items%2A> property to get a strongly typed collection, which has collection interface support and is probably more useful than an enumerator.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkContentElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkContentElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkContentElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkContentElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkContentElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="current">
          <span data-ttu-id="b79fa-136">논리적 트리의 처리를 시작하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79fa-136">The object from which to start processing the logical tree.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b79fa-137">논리적 트리를 처리하여, 지정된 <see cref="T:System.Windows.FrameworkContentElement" />의 직계 자식 개체 컬렉션을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79fa-137">Returns the collection of immediate child objects of the specified <see cref="T:System.Windows.FrameworkContentElement" /> by processing the logical tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b79fa-138">논리적 트리의 <paramref name="current" />에서 시작하는 열거 가능한 직계 자식 개체의 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79fa-138">The enumerable collection of immediate child objects starting from <paramref name="current" /> in the logical tree.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="current">
          <span data-ttu-id="b79fa-139">논리적 트리의 처리를 시작하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79fa-139">The object from which to start processing the logical tree.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b79fa-140">논리적 트리를 처리하여, 지정된 <see cref="T:System.Windows.FrameworkElement" />의 직계 자식 개체 컬렉션을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79fa-140">Returns the collection of immediate child objects of the specified <see cref="T:System.Windows.FrameworkElement" /> by processing the logical tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b79fa-141">논리적 트리의 <paramref name="current" />에서 시작하는 열거 가능한 직계 자식 개체의 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79fa-141">The enumerable collection of immediate child objects starting from <paramref name="current" /> in the logical tree.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject GetParent (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject GetParent(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetParent (current As DependencyObject) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ GetParent(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetParent : System.Windows.DependencyObject -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.GetParent current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">
          <span data-ttu-id="b79fa-142">부모 개체를 찾을 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79fa-142">The object to find the parent object for.</span>
          </span>
          <span data-ttu-id="b79fa-143">
            <see cref="T:System.Windows.FrameworkElement" /> 또는 <see cref="T:System.Windows.FrameworkContentElement" />여야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79fa-143">This is expected to be either a <see cref="T:System.Windows.FrameworkElement" /> or a <see cref="T:System.Windows.FrameworkContentElement" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b79fa-144">논리적 트리를 처리하여, 지정된 개체의 부모 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79fa-144">Returns the parent object of the specified object by processing the logical tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b79fa-145">요청된 부모 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b79fa-145">The requested parent object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b79fa-146">이 메서드는 적절 한 형식 버전을 가져옵니다 되는 래퍼를 단순히 (<xref:System.Windows.FrameworkElement> 또는 <xref:System.Windows.FrameworkContentElement>)의 <xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=nameWithType> 또는 <xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=nameWithType> 속성; 하도록 확인할 수 없는 경우가 아니면는 `current` 형식 하려는 경우도 해당 확인 인스턴스 속성 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="b79fa-146">This method is merely a wrapper that gets the appropriate type version (<xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>) of the <xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=nameWithType> or <xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=nameWithType> property; so unless you are unable to determine the `current` type, you might want to check the respective instance properties instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>