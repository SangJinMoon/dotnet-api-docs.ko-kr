<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PropertyPath.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58557652b4b165aa49213450463eba1ffb0a2f7de.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8557652b4b165aa49213450463eba1ffb0a2f7de</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.PropertyPath">
          <source>Implements a data structure for describing a property as a path below another property, or below an owning type.</source>
          <target state="translated">속성을 다른 속성 아래 또는 소유 형식 아래의 경로로 설명하기 위한 데이터 구조를 구현합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.PropertyPath">
          <source>Property paths are used in data binding to objects, and in storyboards and timelines for animations.</source>
          <target state="translated">속성 경로는 개체에 대한 데이터 바인딩 및 애니메이션에 대한 스토리보드 및 타임라인에서 사용됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source>This class contains a string <ph id="ph1">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph>, and list of dependency properties that are the <ph id="ph2">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph> into the string <ph id="ph3">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph>.</source>
          <target state="translated">이 클래스는 문자열을 포함 <ph id="ph1">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph>, 종속성 속성의 목록과 <ph id="ph2">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph> 문자열로 <ph id="ph3">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source><ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> supports two modes of behavior:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> 동작의 두 가지 모드를 지원합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source><bpt id="p1">**</bpt>Source mode<ept id="p1">**</ept> describes a path to a property that is used as a source for some other operation.</source>
          <target state="translated"><bpt id="p1">**</bpt>소스 모드<ept id="p1">**</ept> 다른 작업에 대 한 원본으로 사용 되는 속성에 대 한 경로 설명 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source>This mode is used by the <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> class to support data binding.</source>
          <target state="translated">이 모드에서 사용 되는 <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> 데이터 바인딩을 지 원하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source><bpt id="p1">**</bpt>Target mode<ept id="p1">**</ept> describes a path to a property that will be set as a target property.</source>
          <target state="translated"><bpt id="p1">**</bpt>대상 모드<ept id="p1">**</ept> 대상 속성으로 설정할 수 있는 속성에 대 한 경로 설명 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source>This mode is used by animation in support of storyboard and timeline setters.</source>
          <target state="translated">이 모드는 스토리 보드 및 타임 라인 setter 지원 하기 위해 애니메이션에 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source>For instance, <ph id="ph1">`Background.Opacity`</ph> is a two-step path.</source>
          <target state="translated">예를 들어, <ph id="ph1">`Background.Opacity`</ph> 2 단계 경로입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source>This path implies: first, find the <ph id="ph1">`Background`</ph> property of an object, get the value object that the <ph id="ph2">`Background`</ph> property is set to, and then get the value of the <ph id="ph3">`Opacity`</ph> property on that object.</source>
          <target state="translated">이 경로 의미: 먼저 찾을 <ph id="ph1">`Background`</ph> 개체의 속성 값 개체를 가져오는 <ph id="ph2">`Background`</ph> 속성로 설정 되 고 다음 값을 가져올는 <ph id="ph3">`Opacity`</ph> 해당 개체의 속성을 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 특성 사용</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source><bpt id="p1">*</bpt>propertyPath<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>propertyPath<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source>A string that is evaluated to be either a simple or complex property path.</source>
          <target state="translated">단순 또는 복합 속성 경로 이거나으로 평가 되는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.PropertyPath">
          <source>The syntax for setting a <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> is versatile but complex, and is described in the separate topic <bpt id="p1">[</bpt>PropertyPath XAML Syntax<ept id="p1">](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)</ept>.</source>
          <target state="translated">설정에 대 한 구문은 <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> 에 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 다양 한 건 복잡 하 고 별도 항목에 설명 된 <bpt id="p1">[</bpt>PropertyPath XAML 구문<ept id="p1">](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:System.Windows.PropertyPath">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.PropertyPath" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.PropertyPath" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>A property path that either describes a path to a <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> property, or a single dependency property.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 속성 또는 단일 종속성 속성에 대한 경로를 설명하는 속성 경로입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.PropertyPath" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.PropertyPath" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>This constructor has two completely different usages depending on whether it is being used for a source-mode property path for a binding, or for a target-mode single-step property path for a storyboard target.</source>
          <target state="translated">이 생성자에는 바인딩에 대 한 또는 스토리 보드 대상에 대 한 대상 모드 단일 단계 속성 경로 대 한 소스 모드 속성 경로 사용 여부에 따라 완전히 다른 두 개의 사용 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>If using this <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> in source mode for a binding, <ph id="ph2">`parameter`</ph> is a string representing a property name, or can be a string that describes a "step-through" path to the property in the <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> object model of the object that is being used as the source for a binding.</source>
          <target state="translated">이 사용 하는 경우 <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> 된 바인딩, 소스 모드에서 <ph id="ph2">`parameter`</ph> 속성 이름을 나타내는 문자열 또는 속성에 "단계별" 경로 설명 하는 문자열 수는 <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 원본으로 사용 중인 개체의 개체 모델 바인딩합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>For a binding property path, the character that identifies a "step" is a dot (.).</source>
          <target state="translated">바인딩 속성 경로 "단계"를 식별 하는 문자는 점 (.).</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>Indexer references (including multiple indexers, and type differentiation) are also supported.</source>
          <target state="translated">인덱서 참조 (여러 인덱서 및 형식 구분 포함)도 지원 됩니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>For more details on the syntax of the string as specifically used by the <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> object, see <ph id="ph2">&lt;xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">구체적으로 사용 되는 문자열의 구문은 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> 개체, 참조 <ph id="ph2">&lt;xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>A property used as a binding source need not be a dependency property.</source>
          <target state="translated">바인딩 소스로 사용 되는 속성에는 종속성 속성 않아도 됩니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>If the binding updates two-way, the property referenced must be read-write.</source>
          <target state="translated">바인딩이 양방향으로 업데이트 하는 경우 참조 된 속성이 읽기 / 쓰기 여야 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>Also note that the binding target does have to be a dependency property.</source>
          <target state="translated">바인딩 대상 종속성 속성으로 않았는지 참고도 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>For details, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 바인딩 개요<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>If using this <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> in target mode for a single-step path for a storyboard target, <ph id="ph2">`parameter`</ph> is generally provided as type <ph id="ph3">&lt;xref:System.Windows.DependencyProperty&gt;</ph>.</source>
          <target state="translated">이 사용 하는 경우 <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> 스토리 보드 대상에 대 한 단계씩 경로 대 한 대상 모드에 <ph id="ph2">`parameter`</ph> 형식으로 제공 일반적으로 <ph id="ph3">&lt;xref:System.Windows.DependencyProperty&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>You can also specify a string that is the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Name%2A&gt;</ph>.</source>
          <target state="translated">문자열을 지정할 수도 있습니다는 <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Name%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>Either of these evaluate to the same result, because it is stored internally as a string.</source>
          <target state="translated">둘 중 하나를 string으로 내부적으로 저장 되므로 동일한 결과를 평가 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>A provided <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph> is converted to a string through <ph id="ph2">&lt;xref:System.Windows.Markup.DependencyPropertyConverter&gt;</ph>.</source>
          <target state="translated">제공 된 <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph> 통해 문자열로 변환 <ph id="ph2">&lt;xref:System.Windows.Markup.DependencyPropertyConverter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Markup.DependencyPropertyConverter&gt;</ph> supports a qualified naming format for dependency properties, so you can specify a <bpt id="p1">*</bpt>typeName<ept id="p1">*</ept>.<bpt id="p2">*</bpt>propertyName<ept id="p2">*</ept> qualified dependency property name string to the <ph id="ph2">&lt;xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType&gt;</ph> constructor in code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.DependencyPropertyConverter&gt;</ph> 지정할 수 있도록 정규화 된 이름 형식 종속성 속성에 대 한 지원는 <bpt id="p1">*</bpt>typeName<ept id="p1">*</ept>.<bpt id="p2">*</bpt> propertyName<ept id="p2">*</ept> 정규화 된 종속성 속성 이름 문자열에는 <ph id="ph2">&lt;xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType&gt;</ph> 코드에서 생성자입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>The qualified path to the dependency property identifier is a different concept than a complex path.</source>
          <target state="translated">종속성 속성 식별자의 정규화 된 경로 복잡 한 경로 다른 개념입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.Object)">
          <source>A complex-path <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> should instead be created with the <ph id="ph2">&lt;xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">복합 경로 <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> 와 대신 만들 수는 <ph id="ph2">&lt;xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])">
          <source>A string that specifies the <ph id="ph1">&lt;see cref="P:System.Windows.PropertyPath.Path" /&gt;</ph>, in a tokenized format.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.PropertyPath.Path" /&gt;</ph>를 토큰화된 형식으로 지정하는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])">
          <source>An array of objects that sets the <ph id="ph1">&lt;see cref="P:System.Windows.PropertyPath.PathParameters" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.PropertyPath.PathParameters" /&gt;</ph>를 설정하는 개체 배열입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.PropertyPath" /&gt;</ph> class, with the provided pathing token string and parameters.</source>
          <target state="translated">제공된 경로 지정 토큰 문자열 및 매개 변수를 사용하여 <ph id="ph1">&lt;see cref="T:System.Windows.PropertyPath" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다. </target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])">
          <source>This signature is generally only used for target-mode <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> usages with complex paths.</source>
          <target state="translated">일반적으로이 서명을 대상 모드에만 사용 <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> 복잡 한 경로를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])">
          <source>This constructor supports <ph id="ph1">`params`</ph> for the <ph id="ph2">`pathParameters`</ph> constructor argument.</source>
          <target state="translated">이 생성자 <ph id="ph1">`params`</ph> 에 대 한는 <ph id="ph2">`pathParameters`</ph> 생성자 인수입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])">
          <source>Therefore you can specify the contents of <ph id="ph1">`pathParameters`</ph> as a series of comma-separated constructor arguments that populate the array, rather than needing to dimension an array and then populate it with the <ph id="ph2">`pathParameters`</ph> items.</source>
          <target state="translated">따라서의 내용을 지정할 수 있습니다 <ph id="ph1">`pathParameters`</ph> 일련의 쉼표로 구분 된 생성자 인수를 채우는 배열 차원 하며 다음을 채울 필요 하지 않고 배열에는 <ph id="ph2">`pathParameters`</ph> 항목입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])">
          <source>Each item you specify must be one of the following types: <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, <ph id="ph3">&lt;xref:System.ComponentModel.PropertyDescriptor&gt;</ph>.</source>
          <target state="translated">각 항목을 지정한 다음 유형 중 하나 여야 합니다: <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, <ph id="ph3">&lt;xref:System.ComponentModel.PropertyDescriptor&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])">
          <source>For more information on the requirements of the parameters, see <ph id="ph1">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>.</source>
          <target state="translated">매개 변수 요구 사항에 대 한 자세한 내용은 참조 하십시오. <ph id="ph1">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="P:System.Windows.PropertyPath.Path">
          <source>Gets or sets the string that describes the path.</source>
          <target state="translated">경로를 설명하는 문자열을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>The string that describes the path.</source>
          <target state="translated">경로를 설명하는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>The string contained in this property has three completely different meanings depending on whether a <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> is being used for a source-mode property path for a binding, for a target-mode single-step property path for a storyboard target, or for a complex path for a storyboard target.</source>
          <target state="translated">이 속성에 포함 된 문자열 인지 여부에 따라 3 개의 완전히 다른 의미를 가집니다는 <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> 또는 복잡 한 스토리 보드 대상에 대 한 대상 모드 단일 단계 속성 경로 대 한 바인딩에 대 한 소스 모드 속성 경로에 사용 되 고 스토리 보드 대상에 대 한 경로입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>If using this <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> in source mode for a binding, <ph id="ph2">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph> is a string representing a property name, or can be a string that describes a "step-through" path to the property in the <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> object model of the object that is being used as the source for a binding.</source>
          <target state="translated">이 사용 하는 경우 <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> 된 바인딩, 소스 모드에서 <ph id="ph2">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph> 속성 이름을 나타내는 문자열 또는 속성에 "단계별" 경로 설명 하는 문자열 수는 <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 원본으로 사용 중인 개체의 개체 모델 바인딩합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>For a binding property path, the character that identifies a "step" is a dot (.).</source>
          <target state="translated">바인딩 속성 경로 "단계"를 식별 하는 문자는 점 (.).</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>Indexer references (including multiple indexers, and type differentiation) are also supported.</source>
          <target state="translated">인덱서 참조 (여러 인덱서 및 형식 구분 포함)도 지원 됩니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>For more details on the syntax of the string as specifically used by the <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> object, see <ph id="ph2">&lt;xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">구체적으로 사용 되는 문자열의 구문은 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> 개체, 참조 <ph id="ph2">&lt;xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>A property used as a binding source need not be a dependency property.</source>
          <target state="translated">바인딩 소스로 사용 되는 속성에는 종속성 속성 않아도 됩니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>If the binding updates two-way, the property source must be read-write.</source>
          <target state="translated">바인딩이 양방향으로 업데이트 하는 경우 속성 소스 읽기 / 쓰기 여야 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>Also note that the binding target does have to be a dependency property.</source>
          <target state="translated">바인딩 대상 종속성 속성으로 않았는지 참고도 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>For details, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 바인딩 개요<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>If using this <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> in target mode for a single-step path for a storyboard target, <ph id="ph2">&lt;xref:System.Windows.PropertyPath&gt;</ph> is a string that is a <bpt id="p1">*</bpt>typeName<ept id="p1">*</ept>.<bpt id="p2">*</bpt>propertyName<ept id="p2">*</ept> qualified dependency property name string.</source>
          <target state="translated">이 사용 하는 경우 <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> 스토리 보드 대상에 대 한 단계씩 경로 대 한 대상 모드에 <ph id="ph2">&lt;xref:System.Windows.PropertyPath&gt;</ph> 문자열 해당는 <bpt id="p1">*</bpt>typeName<ept id="p1">*</ept>.<bpt id="p2">*</bpt> propertyName<ept id="p2">*</ept> 정규화 된 종속성 속성 이름 문자열입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>If using this <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> for a complex path for a storyboard target, <ph id="ph2">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph> is a tokenized string format that describes the relationships of the various objects given in the <ph id="ph3">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>.</source>
          <target state="translated">이 사용 하는 경우 <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> 스토리 보드 대상에 대 한 복잡 한 경로 대 한 <ph id="ph2">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph> 는 토큰화 된 문자열 형식에 지정 된 다양 한 개체의 관계를 설명 하는 <ph id="ph3">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>Each item in the array is specified in this format by the array index for the item enclosed in parentheses.</source>
          <target state="translated">배열의 각 항목은 괄호로 묶인 항목에 대 한 배열 인덱스에서이 형식으로 지정 됩니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>For example, to specify the first item in the array, the string token is <ph id="ph1">`(0)`</ph>.</source>
          <target state="translated">예를 들어 배열의 첫 번째 항목을 지정 하는 문자열 토큰은 <ph id="ph1">`(0)`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>Relationships between items ("steps" in the path) are specified by a dot (.).</source>
          <target state="translated">항목 (경로에 "단계") 간의 관계는 점 (.)으로 지정 됩니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>The property forward of the dot is the first step in the path, the property after is the second step, and so on (you can specify steps beyond two).</source>
          <target state="translated">점 앞으로 속성은 첫 번째 단계는 경로 뒤의 속성은 두 번째 단계 및 (두를 지정할 수)에 있습니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>The last step in the chain always represents the property being animated.</source>
          <target state="translated">체인에서 마지막 단계는 항상 되는 속성을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>Items within collection properties are accessed with an indexer syntax, with the index within square brackets ([ and ]).</source>
          <target state="translated">컬렉션 속성 내에서 대괄호의 내부 인덱스와는 인덱서 구문을 사용 하 여 액세스 하는 ([및]).</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>The indexer is additive to the token representing the property.</source>
          <target state="translated">인덱서가 속성을 나타내는 토큰에 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>For example, the following is a two-step path, with the token combination in the first step specifying the second item from within the collection of that property: <ph id="ph1">`(0)[1].(1)`</ph> .</source>
          <target state="translated">예를 들어 다음은 해당 속성의 컬렉션 내에서 두 번째 항목을 지정 하는 첫 번째 단계에서 토큰 조합 사용 하는 2 단계 경로: <ph id="ph1">`(0)[1].(1)`</ph> 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>You cannot use an indexer on the last property in the chain; you cannot animate the actual collection position, you must animate a property on that object.</source>
          <target state="translated">체인에서 마지막 속성에는 인덱서를 사용할 수 없습니다. 실제 수집 위치에 애니메이션을 적용할 수 없습니다, 그리고 해당 개체의 속성에 애니메이션을 적용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>The path string for a <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> is typically established through the constructors: the <ph id="ph2">&lt;xref:System.Windows.PropertyPath.%23ctor%28System.Object%29&gt;</ph> signature for bindings or single-step storyboard targets, the <ph id="ph3">&lt;xref:System.Windows.PropertyPath.%23ctor%28System.String%2CSystem.Object%5B%5D%29&gt;</ph> signature for multi-step storyboard targets.</source>
          <target state="translated">경로 문자열에 대 한는 <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> 은 일반적으로 생성자를 통해 설정:는 <ph id="ph2">&lt;xref:System.Windows.PropertyPath.%23ctor%28System.Object%29&gt;</ph> 바인딩 또는 단일 단계 storyboard 대상에 대 한 서명은 <ph id="ph3">&lt;xref:System.Windows.PropertyPath.%23ctor%28System.String%2CSystem.Object%5B%5D%29&gt;</ph> multi-step storyboard 대상에 대 한 서명입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source><bpt id="p1">**</bpt>XAML:<ept id="p1">**</ept> When you use a <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> to describe a property reference in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, as an attribute value, the string that you specify is first handled by a type converter (<ph id="ph3">&lt;xref:System.Windows.PropertyPathConverter&gt;</ph>).</source>
          <target state="translated"><bpt id="p1">**</bpt>XAML:<ept id="p1">**</ept> 사용 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> 속성 참조를 설명 하기 위해 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>특성 값을 지정 하는 문자열은 형식 변환기에서 먼저 처리 된 것으로, (<ph id="ph3">&lt;xref:System.Windows.PropertyPathConverter&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>This type converter then processes the string and based on its syntax will call one of the <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> constructor signatures.</source>
          <target state="translated">이 형식 변환기에서 다음 문자열을 처리 하 고에 따라 캐스트 연산자 구문 중 하나를 호출 됩니다는 <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> 생성자 서명을 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>This indirection through the type converter handling an attribute value is generally how you use <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, rather than declaring a <ph id="ph3">&lt;xref:System.Windows.PropertyPath&gt;</ph> object element and then applying specific values to attributes such as <ph id="ph4">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>.</source>
          <target state="translated">특성 값을 처리 하는 형식 변환기를 통해이 간접 참조는 일반적으로 사용 하는 방법을 <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> 에 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>를 선언 하는 대신 한 <ph id="ph3">&lt;xref:System.Windows.PropertyPath&gt;</ph> 개체 요소를 같은 특성을 특정 값을 다음 적용 <ph id="ph4">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph> 및 <ph id="ph5">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>For more information, see <bpt id="p1">[</bpt>PropertyPath XAML Syntax<ept id="p1">](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>PropertyPath XAML 구문<ept id="p1">](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>XAML Text Usage</source>
          <target state="translated">XAML 텍스트 사용</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>Members of the <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> type are not typically set in a direct <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> syntax.</source>
          <target state="translated">멤버는 <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> 형식을 직접에서 일반적으로 설정 되지 않은 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 구문입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.Path">
          <source>See Remarks.</source>
          <target state="translated">설명 부분을 참조하세요.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>Gets the list of parameters to use when the path refers to indexed parameters.</source>
          <target state="translated">경로가 인덱싱된 매개 변수를 참조할 때 사용할 매개 변수 목록을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>The parameter list.</source>
          <target state="translated">매개 변수 목록입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>The properties for a <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> are typically established through the constructors.</source>
          <target state="translated">에 대 한 속성을 <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> 일반적으로 생성자를 통해 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>For setting <ph id="ph1">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>, the <ph id="ph2">&lt;xref:System.Windows.PropertyPath.%23ctor%2A&gt;</ph> constructor is particularly convenient because the <ph id="ph3">`pathParameters`</ph> constructor argument is designated as <ph id="ph4">`params`</ph>, meaning that you do not need to create or dimension an array for construction.</source>
          <target state="translated">설정에 대 한 <ph id="ph1">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.PropertyPath.%23ctor%2A&gt;</ph> 생성자 사용 하는 것이 편리한 때문에 <ph id="ph3">`pathParameters`</ph> 생성자 인수로 지정 된 <ph id="ph4">`params`</ph>, 즉를 만들거나 생성에 대 한 배열을 차원 필요 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>You simply specify each member of the array as an additional parameter.</source>
          <target state="translated">배열의 각 멤버를 추가 매개 변수로 지정 하면 됩니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>If the final property that is the target is a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> type, that value will be cloned.</source>
          <target state="translated">최종 속성 대상이 되는 경우는 <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> 입력 값은 복제 됩니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>For details, see <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>적기<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>The actual evaluation of the property chain is performed by the storyboard animation mechanisms.</source>
          <target state="translated">속성 체인의 실제 평가 스토리 보드 애니메이션 메커니즘에 의해 수행 됩니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>At the <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> level, no validation is performed to make sure that the steps of the path connect at all.</source>
          <target state="translated">에 <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> 수준에서 유효성을 검사 하지 경로 단계가 전혀 연결 되도록 수행 됩니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>For instance, you can construct a property path that has <ph id="ph1">&lt;xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType&gt;</ph> as the first step, and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=nameWithType&gt;</ph> as the second step.</source>
          <target state="translated">예를 들어, 속성 경로 생성할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType&gt;</ph> 첫 번째 단계로, 및 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=nameWithType&gt;</ph> 두 번째 단계입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>But such a property path would fail if actually applied as a target, because the Brush type that fills <ph id="ph1">&lt;xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType&gt;</ph> does not have a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">이러한 속성 경로 오류가 실제로 적용 한 대상으로 하는 경우 브러시 입력 해당 채우기 <ph id="ph1">&lt;xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType&gt;</ph> 없는 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>Invalid property paths fail silently.</source>
          <target state="translated">잘못 된 속성 경로 자동으로 실패 합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>For more information, see <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>스토리보드 개요<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source><bpt id="p1">**</bpt>XAML:<ept id="p1">**</ept> When you use a <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> to describe a property reference in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, as an attribute value, the string that you specify is first handled by a type converter (<ph id="ph3">&lt;xref:System.Windows.PropertyPathConverter&gt;</ph>).</source>
          <target state="translated"><bpt id="p1">**</bpt>XAML:<ept id="p1">**</ept> 사용 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> 속성 참조를 설명 하기 위해 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>특성 값을 지정 하는 문자열은 형식 변환기에서 먼저 처리 된 것으로, (<ph id="ph3">&lt;xref:System.Windows.PropertyPathConverter&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>This type converter then processes the string and based on its syntax will call one of the <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> constructor signatures.</source>
          <target state="translated">이 형식 변환기에서 다음 문자열을 처리 하 고에 따라 캐스트 연산자 구문 중 하나를 호출 됩니다는 <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> 생성자 서명을 합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>This indirection through the type converter handling an attribute value is generally how you use <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, rather than declaring a <ph id="ph3">&lt;xref:System.Windows.PropertyPath&gt;</ph> object element and then applying specific values to attributes such as <ph id="ph4">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>.</source>
          <target state="translated">특성 값을 처리 하는 형식 변환기를 통해이 간접 참조는 일반적으로 사용 하는 방법을 <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> 에 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>를 선언 하는 대신 한 <ph id="ph3">&lt;xref:System.Windows.PropertyPath&gt;</ph> 개체 요소를 같은 특성을 특정 값을 다음 적용 <ph id="ph4">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph> 및 <ph id="ph5">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>For more information, see <bpt id="p1">[</bpt>PropertyPath XAML Syntax<ept id="p1">](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>PropertyPath XAML 구문<ept id="p1">](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>XAML Text Usage</source>
          <target state="translated">XAML 텍스트 사용</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>Members of the <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> type are not typically set in a direct <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> syntax.</source>
          <target state="translated">멤버는 <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> 형식을 직접에서 일반적으로 설정 되지 않은 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 구문입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.PropertyPath.PathParameters">
          <source>See Remarks.</source>
          <target state="translated">설명 부분을 참조하세요.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>