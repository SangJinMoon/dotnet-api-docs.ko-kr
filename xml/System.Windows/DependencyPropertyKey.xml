<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9a12e407bc5345e416145c390f8fcd6f8262c445" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="9cfaf-101">읽기 전용 종속성 속성에 대해 제한적인 쓰기 권한을 제공하기 위한 종속성 속성 식별자를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9cfaf-101">Provides a dependency property identifier for limited write access to a read-only dependency property.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cfaf-102"><xref:System.Windows.DependencyPropertyKey> 인스턴스 메서드를 사용 하는 종속성 속성 등록 호출의 반환 값으로 가져온 <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> 또는 <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-102"><xref:System.Windows.DependencyPropertyKey> instances are obtained as the return value of a dependency property registration call using the methods <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> or <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span></span>  
  
 <span data-ttu-id="9cfaf-103">종속성 속성을 등록 하는 형식을 사용할 수는 <xref:System.Windows.DependencyPropertyKey> 호출에서 <xref:System.Windows.DependencyObject.SetValue%2A> 및 <xref:System.Windows.DependencyObject.ClearValue%2A> 클래스 논리의 일부로 속성의 값을 조정 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-103">The types that register a dependency property can use the <xref:System.Windows.DependencyPropertyKey> in calls to <xref:System.Windows.DependencyObject.SetValue%2A> and <xref:System.Windows.DependencyObject.ClearValue%2A> that adjust the property's value as part of class logic.</span></span> <span data-ttu-id="9cfaf-104">키의 액세스 수준에서 허용 하는 경우 관련된 클래스 צ ְ ײ 키와 종속성 속성도 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-104">If permitted by the access level of the key, related classes can use the key and the dependency property also.</span></span> <span data-ttu-id="9cfaf-105">예를 들어, 키 internal로 선언할 수 있습니다 및 기타 형식을 동일한 어셈블리 내에서 해당 종속성 속성을 설정할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-105">For instance, you can declare the key as internal, and other types within the same assembly can also set that dependency property.</span></span>  
  
 <span data-ttu-id="9cfaf-106"><xref:System.Windows.DependencyPropertyKey> 반환 된 읽기 전용 종속성 속성 등록 만들지 않아야 public 속성을 설정할 수 있는 읽기 전용 종속성 속성으로 등록 지점 따라서 하는데 하면 키가 노출 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-106">The <xref:System.Windows.DependencyPropertyKey> returned by read-only dependency property registration should not be made public, because exposing the key makes the property settable, thus defeating the point of registering it as a read-only dependency property.</span></span> <span data-ttu-id="9cfaf-107">또한 키가 노출 간에 불일치가 발생 사용할 수 있는 종속성 속성이 동작 및 해당 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 는 잘못 된 클래스 디자인 속성 래퍼 구현이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-107">Also, exposing the key causes a mismatch between the available dependency property behaviors and its [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property wrapper implementations, which is bad class design.</span></span>  
  
 <span data-ttu-id="9cfaf-108">키 자체를 노출 하는 대신 노출 해야는 <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> 값은 <xref:System.Windows.DependencyPropertyKey> 로 `public static readonly` <xref:System.Windows.DependencyProperty> 클래스에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-108">Instead of exposing the key itself, you should instead expose the <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> value of the <xref:System.Windows.DependencyPropertyKey> as a `public static readonly`<xref:System.Windows.DependencyProperty> on your class.</span></span> <span data-ttu-id="9cfaf-109">그러면 유효한 종속성 속성 식별자 속성 시스템 작업 로컬 설정 값을 열거 하는 등 특정 반환할 속성이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-109">This enables the property to return a valid dependency property identifier for certain property system operations such as enumerating locally set values.</span></span> <span data-ttu-id="9cfaf-110">그러나 가져온 따라서 식별자가 없습니다의 전체 기능을 <xref:System.Windows.DependencyProperty> 많은 속성 시스템 작업에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-110">However, the identifier thus obtained does not have the full capabilities of a <xref:System.Windows.DependencyProperty> for many property system operations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cfaf-111">다음 예에서는 읽기 전용 종속성 속성을 등록 하 고 다른 클래스 멤버에 대 한 두 가지 용도로 키를 사용: get "래퍼"를 구현 하 고 계산을 기준으로 값을 설정 하는 보호 된 확인 작업에 대 한 식별자 다른 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-111">The following example registers a read-only dependency property, and also uses the key for two purposes in other class members: implementing the get "wrapper", and as the identifier for a protected determination operation that sets the value based on calculations of other property values.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9cfaf-112">이 특수 읽기 전용 종속성 속성 식별자와 연결된 종속성 속성 식별자를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9cfaf-112">Gets the dependency property identifier associated with this specialized read-only dependency property identifier.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9cfaf-113">관련 종속성 속성 식별자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9cfaf-113">The relevant dependency property identifier.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cfaf-114"><xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> 값이 참여 공통 속성 시스템 작업을 사용 하 여 일부 동일한 인터페이스는 사용 된 것과 읽기 / 쓰기 종속성 속성에 대 한 읽기 전용 속성의 식별자를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-114">The <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> value enables a read-only property's identifier to participate in common property system operations using some of the same interfaces as used for read-write dependency properties.</span></span>  
  
 <span data-ttu-id="9cfaf-115">읽기 전용 종속성 속성의 get 속성 접근자를 구현 하기 위해 만들고이 노출 한 <xref:System.Windows.DependencyProperty> 클래스에 대 한 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-115">In order to implement the get property accessor for a read-only dependency property, you should create and expose a <xref:System.Windows.DependencyProperty> identifier on your class.</span></span> <span data-ttu-id="9cfaf-116">이 두 가지 용도로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-116">This serves two purposes:</span></span>  
  
-   <span data-ttu-id="9cfaf-117">클래스 요구 사항에서 <xref:System.Windows.DependencyProperty> 속성 래퍼에 대 한 get 접근자를 구현 하는 데 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-117">Your own class needs the <xref:System.Windows.DependencyProperty> identifier in order to implement the get accessor for the property wrapper.</span></span> <span data-ttu-id="9cfaf-118">사용 된 <xref:System.Windows.DependencyProperty> 에 대 한 매개 변수로 <xref:System.Windows.DependencyObject.GetValue%2A> get 접근자를 구현 하는 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-118">You use the <xref:System.Windows.DependencyProperty> as a parameter for the <xref:System.Windows.DependencyObject.GetValue%2A> call that implements the get accessor.</span></span>  
  
-   <span data-ttu-id="9cfaf-119"><xref:System.Windows.DependencyProperty> 메타 데이터를 사용 하는 다른 메서드는 표준 양식에서 액세스할 수 있도록 식별자 속성 시스템에 종속성 속성을 노출 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-119"><xref:System.Windows.DependencyProperty> identifiers expose your dependency property to the property system such that other methods that rely on metadata can access it in a standard form.</span></span> <span data-ttu-id="9cfaf-120">예를 들어, 호출한 경우 <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> 일부에 <xref:System.Windows.DependencyObject> 로컬에서 설정한 속성 (값 및 식별자)의 열거형 식별자를 가져옵니다는 읽기 전용 종속성 속성에 대해 반환 되 여 <xref:System.Windows.DependencyProperty> 대신 값.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-120">For instance, if you called <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> on some <xref:System.Windows.DependencyObject> and obtained an enumeration of locally set properties (values and identifiers) the identifier returned for a read-only dependency property would be your <xref:System.Windows.DependencyProperty> value rather than the key.</span></span> <span data-ttu-id="9cfaf-121">노출 되지 않은 한 <xref:System.Windows.DependencyProperty> 식별자 어떤 방식으로든에서 읽기 전용 종속성 속성의 보안을 증가 하지 않습니다, 이기 후속 파생 된 클래스, 클래스 인스턴스 모두에 대해 잘못 된 구문이 속성과 관련 된 작업 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-121">Not exposing a <xref:System.Windows.DependencyProperty> identifier does not increase the security of your read-only dependency property in any way, it just makes operations that involve your property more awkward both for subsequent derived classes and class instances.</span></span>  
  
 <span data-ttu-id="9cfaf-122">노출 하는 <xref:System.Windows.DependencyProperty> 호출 클래스에 대 한 식별자를 <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> 키에서 직접 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-122">To expose the  <xref:System.Windows.DependencyProperty> identifier on your class, you call <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> directly on your key.</span></span> <span data-ttu-id="9cfaf-123">이 값을 사용 하 여 만들려는 `public static readonly` <xref:System.Windows.DependencyProperty> 하는 클래스에 대 한 식별자는 <xref:System.Windows.DependencyPropertyKey>합니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-123">Use this value to create a `public static readonly`<xref:System.Windows.DependencyProperty> identifier on the class, which parallels the <xref:System.Windows.DependencyPropertyKey>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cfaf-124">다음 예제에서는 <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> 노출 하는 <xref:System.Windows.DependencyProperty> 식별자 (`AquariumGraphicProperty`)에 대 한는 `AquariumGraphic` 클래스에 대 한 읽기 전용 종속성 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-124">The following example calls <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> to expose the <xref:System.Windows.DependencyProperty> identifier (`AquariumGraphicProperty`) for the `AquariumGraphic` read-only dependency property on a class.</span></span> <span data-ttu-id="9cfaf-125">또한이 예제에서는 <xref:System.Windows.DependencyPropertyKey> (으로 내부 멤버)를 만들고에 대 한 get 접근자 `AquariumGraphic`합니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-125">The example also shows the <xref:System.Windows.DependencyPropertyKey> creation (as an internal member) and the get accessor for `AquariumGraphic`.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="9cfaf-126">이 종속성 속성에 대해 지정되어 있으며 메타데이터를 재정의해야 하는 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9cfaf-126">The type on which this dependency property exists and metadata should be overridden.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="9cfaf-127">이 형식에 대해 제공되는 메타데이터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9cfaf-127">Metadata supplied for this type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9cfaf-128">이 종속성 속성 식별자가 나타내는 읽기 전용 종속성 속성의 메타데이터를 재정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9cfaf-128">Overrides the metadata of a read-only dependency property that is represented by this dependency property identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cfaf-129">읽기 전용 종속성 속성의 메타 데이터 재정의 메타 데이터에서 읽기 / 쓰기 종속성 속성을 재정의 하는 것과 비슷한 이유로 수행 하며 키 수준에서 액세스 제한 때문에 메타 데이터에 지정 된 동작 (의 집합 동작을 변경할 수 있습니다. 기본값, 예를 들어)입니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-129">Overriding metadata on a read-only dependency property is done for similar reasons as overriding metadata on a read-write dependency property, and is restricted to access at the key level because behaviors specified in the metadata can change the set behavior (the default value, for instance).</span></span>  
  
 <span data-ttu-id="9cfaf-130">읽기 / 쓰기 종속성 속성이 있는 읽기 전용 종속성 속성의 메타 데이터 재정의만 수행 되어야 속성 시스템에서 사용 중인 배치 하기 전에 처럼 (이 것과 같습니다 시간으로 등록 하는 개체의 특정 인스턴스가 해당는 속성은 인스턴스화할).</span><span class="sxs-lookup"><span data-stu-id="9cfaf-130">As with read-write dependency properties, overriding metadata on a read-only dependency property should only be done prior to that property being placed in use by the property system (this equates to the time that specific instances of objects that register the property are instantiated).</span></span> <span data-ttu-id="9cfaf-131">에 대 한 호출이 <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> 로 자신을 제공 하는 형식의 정적 생성자 내에서 수행할 수만 `forType` 이 메서드 또는 해당 클래스에 대 한 동등한 초기화 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-131">Calls to <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or equivalent initialization for that class.</span></span>  
  
 <span data-ttu-id="9cfaf-132">이 메서드를 효과적으로 전달 된 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> 전달 하는 메서드는 <xref:System.Windows.DependencyPropertyKey> 인스턴스 키 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-132">This method effectively forwards to the <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method, passing the <xref:System.Windows.DependencyPropertyKey> instance as the key parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cfaf-133">다음 예제는 클래스를 상속 하는 기존 읽기 전용 종속성 속성에 대 한 메타 데이터를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-133">The following example overrides metadata for an existing read-only dependency property that a class inherits.</span></span> <span data-ttu-id="9cfaf-134">이 경우 시나리오 목표 기본 속성 메타 데이터에 없는 강제 값 콜백을 추가 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9cfaf-134">In this case, the scenario goal was to add a coerce value callback that the base property metadata did not have.</span></span> <span data-ttu-id="9cfaf-135">적절 한 메타 데이터 재정의 일반적으로 다른 이유 중 하나로 위한에 메타 데이터를 재정의할 수 있습니다 (기본값 변경, 추가 <xref:System.Windows.FrameworkPropertyMetadataOptions> 값 등.)</span><span class="sxs-lookup"><span data-stu-id="9cfaf-135">You could also override metadata for any of the other reasons that overriding metadata is typically appropriate (changing default value, adding <xref:System.Windows.FrameworkPropertyMetadataOptions> values, etc.)</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9cfaf-136">읽기-쓰기 종속성 속성의 메타데이터를 재정의한 경우. 이 시그니처를 사용하여 이 작업을 수행할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9cfaf-136">Attempted metadata override on a read-write dependency property (cannot be done using this signature).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9cfaf-137">제공된 형식에 있는 속성에 메타데이터가 이미 설정된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9cfaf-137">Metadata was already established for the property as it exists on the provided type.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>