<Type Name="DataTemplate" FullName="System.Windows.DataTemplate">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cffbeb8fcc8f02b552d5ae620f2af8c77273c146" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30678657" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataTemplate : System.Windows.FrameworkTemplate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTemplate extends System.Windows.FrameworkTemplate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DataTemplate" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTemplate&#xA;Inherits FrameworkTemplate" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTemplate : System::Windows::FrameworkTemplate" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.FrameworkTemplate</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.DictionaryKeyProperty("DataTemplateKey")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>데이터 개체의 표시 구조에 대해 설명합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하면 한 <xref:System.Windows.DataTemplate> 데이터 개체의 시각화를 지정할 수 있습니다. <xref:System.Windows.DataTemplate> 개체는 바인딩하는 경우에 특히 유용 프로그램 <xref:System.Windows.Controls.ItemsControl> 와 같은 한 <xref:System.Windows.Controls.ListBox> 전체 컬렉션에 있습니다. 특정 한 지침이 없으면는 <xref:System.Windows.Controls.ListBox> 컬렉션에 개체의 문자열 표현을 표시 합니다. 이 경우 사용할 수 있습니다는 <xref:System.Windows.DataTemplate> 데이터 개체의 모양을 정의할 수 있습니다. 내용을 프로그램 <xref:System.Windows.DataTemplate> 데이터 개체의 표시 구조가 됩니다.  
  
 심도 있는 논의 알려면 [데이터 템플릿 개요](~/docs/framework/wpf/data/data-templating-overview.md)합니다.  
  
   
  
## Examples  
 만드는 방법을 보여 주는 다음 예제는 <xref:System.Windows.DataTemplate> 인라인 합니다. <xref:System.Windows.DataTemplate> 각 데이터 항목 3으로 표시 되도록 지정 <xref:System.Windows.Controls.TextBlock> 내의 요소는 <xref:System.Windows.Controls.StackPanel>합니다. 이 예제에서는 데이터 개체는 라는 클래스 `Task`합니다. 각 <xref:System.Windows.Controls.TextBlock> 이 템플릿의의 속성에 바인딩되는 `Task` 클래스입니다.  
  
 [!code-xaml[DataTemplatingIntro_snip#Inline](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#inline)]  
  
 정의 하는 경우가 더 일반적는 <xref:System.Windows.DataTemplate> 다음 예제와 같이 개체를 다시 사용할 수 있도록 리소스 섹션에 있습니다.  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#AsResource](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#asresource)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 이제 다음 예제와 같이 `myTaskTemplate`을 리소스로 사용할 수 있습니다.  
  
 [!code-xaml[DataTemplatingIntro_snip#MyTaskTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#mytasktemplate)]  
  
 전체 샘플을 보려면 [Introduction to Data Templating Sample](http://go.microsoft.com/fwlink/?LinkID=160009)(데이터 템플릿 샘플 소개)을 참조하세요.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Data.Binding" />
    <altmember cref="T:System.Windows.Controls.DataTemplateSelector" />
    <altmember cref="T:System.Windows.HierarchicalDataTemplate" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.DataTemplate" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTemplate.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplate();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.DataTemplate" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplate (object dataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object dataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTemplate.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dataType As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplate(System::Object ^ dataType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataType" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dataType">템플릿이 개체 데이터에 사용되는 경우 이것은 데이터 개체의 형식 이름입니다.</param>
        <summary>지정된 <see cref="T:System.Windows.DataTemplate" /> 속성을 사용하여 <see cref="P:System.Windows.DataTemplate.DataType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 클래스의 형식 이름으로 참조를 사용 하 여는 [X:type 태그 확장](~/docs/framework/xaml-services/x-type-markup-extension.md)합니다. 에 대 한 템플릿이 사용 되는 경우 [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] 데이터,이 데이터의 태그 이름을 나타내는 문자열입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataTemplateKey">
      <MemberSignature Language="C#" Value="public object DataTemplateKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataTemplateKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTemplate.DataTemplateKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataTemplateKey As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataTemplateKey { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.DataTemplate" />의 기본 키를 가져옵니다.</summary>
        <value>
          <see cref="T:System.Windows.DataTemplate" />의 기본 키입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정 하지 않은 경우는 [X:key 지시문](~/docs/framework/xaml-services/x-key-directive.md) 에 <xref:System.Windows.DataTemplate> 에 <xref:System.Windows.ResourceDictionary>, <xref:System.Windows.DataTemplate.DataTemplateKey%2A> 키로 사용 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public object DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTemplate.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataType { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Windows.DataTemplate" />이 사용되는 형식을 가져오거나 설정합니다.</summary>
        <value>기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 매우 비슷합니다는 <xref:System.Windows.Style.TargetType%2A> 의 속성은 <xref:System.Windows.Style> 클래스입니다. 지정 하지 않고 데이터 형식으로이 속성을 설정 하는 경우는 `x:Key`, <xref:System.Windows.DataTemplate> 해당 유형의 데이터 개체에 자동으로 적용 됩니다. 그렇게 하면 사용자에 게 유의 `x:Key` 는 암시적으로 설정 합니다. 따라서이 할당 하는 경우 <xref:System.Windows.DataTemplate> 는 `x:Key` 값을 암시적으로 재정의 하는 `x:Key` 및 <xref:System.Windows.DataTemplate> 자동으로 적용 합니다.  
  
 또한 바인딩하는 경우 유의 <xref:System.Windows.Controls.ContentControl> 의 컬렉션에 `Task` 개체는 <xref:System.Windows.Controls.ContentControl> 사용 하지 않습니다는 <xref:System.Windows.DataTemplate> 자동으로 합니다. 때문에 대 한 바인딩은 <xref:System.Windows.Controls.ContentControl> 는 전체 컬렉션 또는 개별 개체에 바인딩할 인지 구분 하기 위해 더 많은 정보가 필요 합니다. 경우에 <xref:System.Windows.Controls.ContentControl> 의 선택 영역 추적는 <xref:System.Windows.Controls.ItemsControl> 설정할 수 있습니다 형식은 <xref:System.Windows.Data.Binding.Path%2A> 속성의는 <xref:System.Windows.Controls.ContentControl> 에 바인딩 "`/`" 현재 항목에 관심이 나타내기 위해 합니다. 예를 들어 참조 [하는 방법: 컬렉션 및 표시 선택에 따라 정보에 바인딩](~/docs/framework/wpf/data/how-to-bind-to-a-collection-and-display-information-based-on-selection.md)합니다. 지정 하면 그렇지 않은 경우는 <xref:System.Windows.DataTemplate> 명시적으로 설정 하 여는 <xref:System.Windows.Controls.ContentControl.ContentTemplate%2A> 속성입니다.  
  
 <xref:System.Windows.DataTemplate.DataType%2A> 속성은 경우에 특히 유용는 <xref:System.Windows.Data.CompositeCollection> 여러 유형의 데이터 개체입니다.  
  
 이 속성의 기본 네임 스페이스에 없는 XML 요소를 대상으로 하는 경우 요소 이름에 네임 스페이스 또는 네임 스페이스 지정자 앞에 야 합니다. XML에 대 한 LINQ를 통해 노출 하는 XML에 대 한 네임 스페이스는 중괄호 앞에 중괄호 이스케이프 시퀀스에 표시 됩니다.  
  
```xaml  
<DataTemplate DataType="{}{http://myNamespace}Details">  
```  
  
 XPath를 통해 노출 하는 XML에 대 한 요소 이름 앞에는 인스턴스에 의해 설정 된 네임 스페이스 지정자 <xref:System.Windows.Data.XmlNamespaceMapping>:  
  
```xaml  
<DataTemplate DataType="mn:Details">  
```  
  
<a name="xamlAttributeUsage_DataType"></a>   
## <a name="xaml-attribute-usage"></a>XAML 특성 사용  
  
```  
<object DataType="typeName"/>  
```  
  
<a name="xamlValues_DataType"></a>   
## <a name="xaml-values"></a>XAML 값  
 *typeName*  
 서식 파일을 데이터 개체에 대 한 경우이 속성 데이터 개체의 형식 이름 (문자열)으로 포함 합니다. 클래스의 형식 이름으로 참조를 사용 하 여는 [X:type 태그 확장](~/docs/framework/xaml-services/x-type-markup-extension.md)합니다. 에 대 한 템플릿이 사용 되는 경우 [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] 데이터를이 속성에는 XML 요소 이름을 포함 합니다. XML 요소에 대 한 기본이 아닌 네임 스페이스를 지정 하는 방법에 대 한 자세한 내용은 설명서 설명 부분을 참조 하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTemplate.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("VisualTree")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("Template")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>하나 이상의 조건에 따라 속성 값을 적용하거나 작업을 수행하는 트리거의 컬렉션을 가져옵니다.</summary>
        <value>트리거 개체의 컬렉션입니다. 기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 데이터 템플릿 내에 트리거를 만드는 경우 트리거 setter 데이터 서식 파일의 범위 내에 있는 속성을 설정 해야 합니다. 그렇지 않으면 데이터를 포함 하는 형식을 대상으로 하는 스타일을 사용 하 여 트리거 더 적합할 수 있습니다. 예를 들어, 바인딩하는 경우는 <xref:System.Windows.Controls.ListBox> 컨트롤 컨테이너는 <xref:System.Windows.Controls.ListBoxItem> 개체입니다. 범위에 포함 되지 않는 속성을 설정 하려면 트리거를 사용 하는 경우는 <xref:System.Windows.DataTemplate>, 더 적합할 수 있습니다는 <xref:System.Windows.Controls.ListBoxItem> 스타일 및 스타일 내에서 트리거를 만듭니다. 자세한 내용은 참조는 DataTemplate에 포함 되? 에 [데이터 템플릿 개요](~/docs/framework/wpf/data/data-templating-overview.md)합니다.  
  
> [!NOTE]
>  이 속성 설정할 수 있습니다 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 표시, 컬렉션 구문을 사용 하거나 컬렉션 개체에 액세스 하 고 추가 등의 다양 한 메서드를 사용 하 여 합니다. 컬렉션 개체 자체를 액세스 하는 속성은 읽기 전용, 컬렉션 자체는 읽기 / 쓰기입니다.  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a>XAML 속성 요소 사용  
  
```  
<object>  
  <object.Triggers>  
    OneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a>XAML 값  
 *OneOrMoreTriggers*  
 0 개 이상의 <xref:System.Windows.TriggerBase> 개체입니다.  
  
   
  
## Examples  
 다음 <xref:System.Windows.DataTemplate> 를 사용 하는 <xref:System.Windows.DataTemplate.Triggers%2A> 속성입니다.  
  
 [!code-xaml[DataBindingLab#AuctionItemDataTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/DataBindingLabApp.xaml#auctionitemdatatemplate)]  
  
 전체 샘플을 참조 하십시오. [데이터 바인딩 데모](http://go.microsoft.com/fwlink/?LinkID=163703)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DataTrigger" />
        <altmember cref="T:System.Windows.MultiDataTrigger" />
      </Docs>
    </Member>
    <Member MemberName="ValidateTemplatedParent">
      <MemberSignature Language="C#" Value="protected override void ValidateTemplatedParent (System.Windows.FrameworkElement templatedParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ValidateTemplatedParent(class System.Windows.FrameworkElement templatedParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ValidateTemplatedParent (templatedParent As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ValidateTemplatedParent(System::Windows::FrameworkElement ^ templatedParent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templatedParent" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="templatedParent">이 템플릿이 적용되는 요소입니다.</param>
        <summary>규칙 집합에 대해 템플릿 부모를 확인합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 메서드는 다음 규칙을 사용합니다.  
  
-   `templatedParent` null이 아닌 <xref:System.Windows.FrameworkElement>합니다.  
  
-   <xref:System.Windows.DataTemplate> 에 적용 해야만 미러링을 <xref:System.Windows.Controls.ContentPresenter>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>