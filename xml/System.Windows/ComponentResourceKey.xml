<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ComponentResourceKey.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac54ab025443f3717a6f64e96df27f296ecc9101058.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4ab025443f3717a6f64e96df27f296ecc9101058</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.ComponentResourceKey">
          <source>Defines or references resource keys based on class names in external assemblies, as well as an additional identifier.</source>
          <target state="translated">외부 어셈블리의 클래스 이름 또는 추가 식별자를 기준으로 리소스 키를 정의하거나 참조합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> information, see <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</source>
          <target state="translated">에 대 한 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 정보 참조 <bpt id="p1">[</bpt>ComponentResourceKey 태그 확장<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>This class implements an object type that is useful for creating keys that are based on types in assemblies plus an identifier.</source>
          <target state="translated">이 클래스는 어셈블리와 식별자의 형식을 기반으로 하는 키를 만드는 데 유용 하는 개체 형식을 구현 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>Because you define or reference the type, you do not need to request a specific <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>, and more than one set of resources can exist in the assembly, each differentiated by the type of their <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>.</source>
          <target state="translated">특정 요청 필요를 정의 하거나 형식을 참조 하므로 하지 <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>, 형식에 따라 각 차별화 된 어셈블리에 리소스 집합이 여러 개 존재할 수 및 해당 <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>There are two ways to define a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>.</source>
          <target state="translated">두 가지 방법으로 정의 하는 <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>If you want an easily accessible key, you can define a static property on your control class code that returns a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>, constructed with a <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> that exists in the external resource assembly, and a <ph id="ph3">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>.</source>
          <target state="translated">쉽게 액세스할 수 있는 키를 사용 하도록 하려는 경우를 반환 하는 컨트롤 클래스 코드에는 정적 속성을 정의할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>를 통해 생성 된는 <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> 는 외부 리소스 어셈블리에 존재 하 고 <ph id="ph3">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>The key can be used for defining alternate default styles for controls in an assembly, by swapping the original external resource assembly for a custom one.</source>
          <target state="translated">사용자 지정에 대 한 원래 외부 리소스 어셈블리를 교체 하 여 어셈블리에서 컨트롤에 대해 대체 기본 스타일을 정의 하기 위한 키를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>You can also define a named resource part within a larger control style or template to expose a customization entry point.</source>
          <target state="translated">더 큰 컨트롤 스타일 또는 사용자 지정 진입점을 노출 하는 템플릿 내에서 명명 된 리소스 파트를 정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>This is particularly useful if you are defining a theme resource dictionary for your control.</source>
          <target state="translated">컨트롤에 대 한 리소스 사전은 테마를 정의 하는 경우 특히 유용 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>You can also use the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept> in verbose syntax directly to create a loose instance of the key.</source>
          <target state="translated">사용할 수도 있습니다는 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> <bpt id="p1">[</bpt>ComponentResourceKey 태그 확장<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept> 자세한 구문 직접 키의 느슨한 인스턴스를 만들려고 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>This is useful if you want to declare private resources from other assemblies that are less discoverable to customize.</source>
          <target state="translated">사용자 지정 하는 검색 성능이 떨어지는 다른 어셈블리에서 전용 리소스를 선언 하려면 경우에 유용 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.Windows.ComponentResourceKey">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor">
          <source>The default constructor is not generally used, because a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> value and <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> value are required for proper initialization.</source>
          <target state="translated">기본 생성자는 일반적으로 사용 하지 때문에 <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> 값 및 <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> 값은 적절 한 초기화 필요 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor">
          <source>The default constructor exists primarily to support <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept> XAML usage in named parameter form.</source>
          <target state="translated">기본 생성자가 지원 하기 위해 주로 <bpt id="p1">[</bpt>ComponentResourceKey 태그 확장<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept> 명명 된 매개 변수 폼에서 XAML 사용 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>The type that defines the resource key.</source>
          <target state="translated">리소스 키를 정의하는 형식입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>A unique identifier to differentiate this <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> from others associated with the <bpt id="p1">&lt;c&gt;</bpt>typeInTargetAssembly<ept id="p1">&lt;/c&gt;</ept> type.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>typeInTargetAssembly<ept id="p1">&lt;/c&gt;</ept> 형식과 연관된 다른 키와 이 <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>를 구분하기 위한 고유 식별자입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>Initializes a new instance of a <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> , specifying the <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> that defines the key, and an object to use as an additional resource identifier.</source>
          <target state="translated">키를 정의하는 <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>과 추가 리소스 식별자로 사용할 개체를 지정하여 <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph>의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>This constructor exist for two scenarios, with the first scenario being the most important:</source>
          <target state="translated">이 생성자는 가장 중요 한 첫 번째 시나리오와 두 가지 시나리오에 대 한 존재 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>Supports creating a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> that is then exposed as a public static field on a custom control class.</source>
          <target state="translated">에서는 만들 수는 <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> 사용자 지정 컨트롤 클래스에 공용 정적 필드로 노출 되는 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>This simplifies a control's access to its own defined resources in the template through <ph id="ph1">`{x:Static}`</ph> usages for template property values.</source>
          <target state="translated">이 통해 서식 파일에 정의 된 리소스에 대 한 컨트롤의 액세스를 통해 간소화 <ph id="ph1">`{x:Static}`</ph> 템플릿 속성 값에 대 한 사용 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>Supports <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept> XAML usage in positional parameter form, which is one technique available for third parties that reference a component resource.</source>
          <target state="translated">지원 <bpt id="p1">[</bpt>ComponentResourceKey 태그 확장<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept> 중 한 가지 방법은 구성 요소 리소스를 참조 하는 제 3 자에 사용할 수 있는 위치 매개 변수 형식에서 XAML 사용 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> that is then exposed as a static key of a control class to provide a style customization entry point.</source>
          <target state="translated">다음 예제에서는 한 <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> 스타일 사용자 지정 진입점을 제공 하는 컨트롤 클래스의 정적 키로 노출 되는 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="P:System.Windows.ComponentResourceKey.Assembly">
          <source>Gets the assembly object that indicates which assembly's dictionary to look in for the value associated with this key.</source>
          <target state="translated">이 키와 연관된 값을 찾을 어셈블리의 사전을 나타내는 어셈블리 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.Assembly">
          <source>The retrieved assembly, as a reflection class.</source>
          <target state="translated">리플렉션 클래스로 검색된 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.Equals(System.Object)">
          <source>Object to compare with the current <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>와 비교할 개체입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.Equals(System.Object)">
          <source>Determines whether the provided object is equal to the current <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>.</source>
          <target state="translated">제공된 개체가 현재 <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>와 같은지 확인합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the objects are equal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">개체가 동일하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.Equals(System.Object)">
          <source>Two keys are equal if they both have the same values for all their immediate settable properties (<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph>).</source>
          <target state="translated">두 키가 같은지 모두 즉각적인 모든 설정 가능한 속성에 대 한 동일한 값이 있는 경우 (<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.GetHashCode">
          <source>Returns a hash code for this <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>의 해시 코드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.GetHashCode">
          <source>A signed 32-bit integer value.</source>
          <target state="translated">부호 있는 32비트 정수 값입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>Gets or sets a unique identifier to differentiate this key from others associated with this type.</source>
          <target state="translated">이 형식과 연관된 다른 키와 이 키를 구분하기 위한 고유 식별자를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>A unique identifier.</source>
          <target state="translated">고유 식별자입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>Typically this is a string.</source>
          <target state="translated">일반적으로 문자열입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> information, see <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</source>
          <target state="translated">에 대 한 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 정보 참조 <bpt id="p1">[</bpt>ComponentResourceKey 태그 확장<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>Typically, the string used for a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> value conforms to the <bpt id="p1">[</bpt>XamlName Grammar<ept id="p1">](~/docs/framework/xaml-services/xamlname-grammar.md)</ept>.</source>
          <target state="translated">사용 되는 문자열에 일반적으로 <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> 값 준수 하는 <bpt id="p1">[</bpt>XamlName 문법<ept id="p1">](~/docs/framework/xaml-services/xamlname-grammar.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> to differentiate this key from others associated with this type.</source>
          <target state="translated">사용 하는 방법을 보여 주는 다음 예제는 <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> 이 형식과 연결 된 다른 사용자와이 키를 구별할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.ToString">
          <source>Gets the string representation of a <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>에 대한 문자열 표현을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.ToString">
          <source>The string representation.</source>
          <target state="translated">문자열 표현입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that defines the resource key.</source>
          <target state="translated">리소스 키를 정의하는 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>The type that defines the resource key.</source>
          <target state="translated">리소스 키를 정의하는 형식입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> information, see <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</source>
          <target state="translated">에 대 한 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 정보 참조 <bpt id="p1">[</bpt>ComponentResourceKey 태그 확장<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> element is used by custom components to define keys for resources that are accessed from external assemblies, based on targeting an assembly that contains the type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> 요소 형식을 포함 하는 어셈블리를 대상 지정을 기반으로 외부 어셈블리에서 액세스할 수 있는 리소스에 대 한 키를 정의 하려면 사용자 지정 구성 요소에 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>Custom components often define new types which must be in the assembly where the resource is located.</source>
          <target state="translated">사용자 지정 구성 요소는 종종 리소스가 있는 어셈블리에 있어야 하는 새 형식을 정의 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>Generally these types have no other implementation, the types only exist in order to satisfy the lookup requirements of a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>.</source>
          <target state="translated">일반적으로 이러한 형식은 다른 구현이 없는 여백이, 형식을 조회 요구 사항을 충족 하기 위해서만 존재는 <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>The following example shows how to define a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> including <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> using the <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</source>
          <target state="translated">다음 예제에서는 정의 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> 포함 하 여 <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> 를 사용 하는 <bpt id="p1">[</bpt>ComponentResourceKey 태그 확장<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>This resource can then be placed in an external assembly and accessed by a key usage that requests the resource using an analogous <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> in the request.</source>
          <target state="translated">이 리소스 다음 외부 어셈블리에 배치 하 고 액세스할 수는 비슷한를 사용 하 여 리소스를 요청 하는 키 사용 하 여 <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> 요청에서 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>