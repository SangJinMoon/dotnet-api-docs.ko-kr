<Type Name="FrameworkContentElement" FullName="System.Windows.FrameworkContentElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b6371f460f8b6c0d055ff1e6a06d2b95b363c7c1" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39942050" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FrameworkContentElement : System.Windows.ContentElement, System.ComponentModel.ISupportInitialize, System.Windows.IFrameworkInputElement, System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FrameworkContentElement extends System.Windows.ContentElement implements class System.ComponentModel.ISupportInitialize, class System.Windows.IFrameworkInputElement, class System.Windows.IInputElement, class System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkContentElement" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkContentElement&#xA;Inherits ContentElement&#xA;Implements IFrameworkInputElement, IQueryAmbient, ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkContentElement : System::Windows::ContentElement, System::ComponentModel::ISupportInitialize, System::Windows::IFrameworkInputElement, System::Windows::Markup::IQueryAmbient" />
  <TypeSignature Language="F#" Value="type FrameworkContentElement = class&#xA;    inherit ContentElement&#xA;    interface IFrameworkInputElement&#xA;    interface IInputElement&#xA;    interface ISupportInitialize&#xA;    interface IQueryAmbient" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.ContentElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.IFrameworkInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IQueryAmbient</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Windows.Markup.UsableDuringInitialization(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Windows.Markup.XmlLangProperty("Language")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Windows.StyleTypedProperty(Property="FocusVisualStyle", StyleTargetType=typeof(System.Windows.Controls.Control))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="f706a-101">
        <see cref="T:System.Windows.FrameworkContentElement" />는 <see cref="T:System.Windows.ContentElement" /> 기본 클래스의 WPF 프레임워크 수준 구현 및 확장입니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f706a-101">
          <see cref="T:System.Windows.FrameworkContentElement" /> is the WPF framework-level implementation and expansion of the <see cref="T:System.Windows.ContentElement" /> base class.</span>
      </span>
      <span data-ttu-id="f706a-102">
        <see cref="T:System.Windows.FrameworkContentElement" />는 데이터 바인딩, 스타일 지원 및 논리적 트리 도우미 API를 위한 데이터 컨텍스트, 스토리보드 및 추가 입력 API(도구 설명 및 상황에 맞는 메뉴 포함)에 대한 지원을 추가합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f706a-102">
          <see cref="T:System.Windows.FrameworkContentElement" /> adds support for additional input APIs (including tooltips and context menus), storyboards, data context for data binding, styles support, and logical tree helper APIs.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-103"><xref:System.Windows.FrameworkContentElement> 고유한 렌더링 동작을 아직 정의 하지 않습니다. 실제 인스턴스화 <xref:System.Windows.FrameworkContentElement> 코드나 마크업에서 클래스 인스턴스 수는 있지만에 아무 것도 표시 된 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 응용 프로그램 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-103"><xref:System.Windows.FrameworkContentElement> does not yet define its own rendering behavior; instantiating an actual <xref:System.Windows.FrameworkContentElement> class instance in code or markup is possible but displays nothing in a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] application [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span> <span data-ttu-id="f706a-104">사용 하는 클래스에서 렌더링 논리를 제공 되어야 합니다 <xref:System.Windows.FrameworkContentElement> 자식 요소 또는 해당 콘텐츠 모델의 일부로 <xref:System.Windows.FrameworkContentElement> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-104">Rendering logic must be provided by classes that take <xref:System.Windows.FrameworkContentElement> child elements as part of their content model, or in <xref:System.Windows.FrameworkContentElement> derived classes.</span></span>  
  
 <span data-ttu-id="f706a-105"><xref:System.Windows.FrameworkContentElement> 대부분의 동일한 의도적 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] 으로 <xref:System.Windows.FrameworkElement>입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-105"><xref:System.Windows.FrameworkContentElement> deliberately parallels many of the same [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] as <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="f706a-106">특정 참고 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] 에서 찾을 <xref:System.Windows.FrameworkElement> 것을 <xref:System.Windows.FrameworkContentElement> 해당.</span><span class="sxs-lookup"><span data-stu-id="f706a-106">Note that certain [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] found on <xref:System.Windows.FrameworkElement> will not have a <xref:System.Windows.FrameworkContentElement> equivalent.</span></span> <span data-ttu-id="f706a-107">몇 가지는 <xref:System.Windows.FrameworkElement> [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] 기 하 도형 표현 또는 레이아웃 등의 기능에 대 한 적합 하지 않은 것을 <xref:System.Windows.FrameworkContentElement>입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-107">Several of the <xref:System.Windows.FrameworkElement> [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] are for functionality such as geometry representation or layout, which are not relevant for a <xref:System.Windows.FrameworkContentElement>.</span></span>  
  
 <span data-ttu-id="f706a-108">대부분의 기존 <xref:System.Windows.FrameworkContentElement> 파생된 클래스를 찾을 수는 <xref:System.Windows.Documents> 네임 스페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-108">The majority of existing <xref:System.Windows.FrameworkContentElement> derived classes will be found in the <xref:System.Windows.Documents> namespace.</span></span> <span data-ttu-id="f706a-109">파생된 클래스는 대부분 흐름 문서 모델에 대 한 요소를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-109">Many of these derived classes implement elements for the flow document model.</span></span> <span data-ttu-id="f706a-110">와 같은 특정 파생된 클래스 <xref:System.Windows.Documents.Hyperlink> 일부 제어와 비슷한 기능을 갖지만에서 파생 된 <xref:System.Windows.FrameworkContentElement> 컨트롤과 비슷한 요소를 유동 문서 모델에 참가할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-110">Certain derived classes such as <xref:System.Windows.Documents.Hyperlink> have some control-like functionality, but are derived from <xref:System.Windows.FrameworkContentElement> such that the control-like elements can still participate in the flow document model.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.FrameworkElement" />
    <altmember cref="T:System.Windows.ContentElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkContentElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkContentElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f706a-111">
            <see cref="T:System.Windows.FrameworkContentElement" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-111">Initializes a new instance of the <see cref="T:System.Windows.FrameworkContentElement" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void AddLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AddLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.AddLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AddLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void AddLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.AddLogicalChild : obj -&gt; unit" Usage="frameworkContentElement.AddLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child">
          <span data-ttu-id="f706a-112">추가될 자식 요소입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-112">The child element to be added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-113">이 요소의 자식으로 제공된 요소를 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-113">Adds the provided element as a child of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-114">이 메서드는 다른 프로세스에 의해 논리적 트리 반복 중일 때 한 번에 호출 되는 경우 예외를 throw 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-114">This method can throw an exception if called at a time when the logical tree is being iterated by another process.</span></span>  
  
 <span data-ttu-id="f706a-115">대부분 <xref:System.Windows.FrameworkContentElement> 포함 담당 하는 전용된 컬렉션을 노출 하는 파생된 클래스 (예를 들어 <xref:System.Windows.Documents.Span.Inlines%2A> 에 <xref:System.Windows.Documents.Span> 클래스 <xref:System.Windows.Documents.Section.Blocks%2A> 에 <xref:System.Windows.Documents.Section> 클래스).</span><span class="sxs-lookup"><span data-stu-id="f706a-115">Most <xref:System.Windows.FrameworkContentElement> derived classes expose dedicated collections that are responsible for containment (for example, <xref:System.Windows.Documents.Span.Inlines%2A> on the <xref:System.Windows.Documents.Span> class; <xref:System.Windows.Documents.Section.Blocks%2A> on the <xref:System.Windows.Documents.Section> class).</span></span> <span data-ttu-id="f706a-116">일반적으로 이러한 클래스에서 파생 하는 경우 논리적 트리를 직접 조작할 필요가 방지할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-116">You can typically avoid any need to manipulate the logical tree directly if you derive from these classes instead.</span></span> <span data-ttu-id="f706a-117">콘텐츠 요소에 대 한 논리적 트리를 사용 하 여 작업은 특수 한 파서 또는 특수화 된 필요할 수 있는 고급 시나리오 <xref:System.Windows.FrameworkElement> 의 부모 요소로 렌더링 (콘텐츠 호스트) 역할을 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-117">Working with the logical tree for content elements is an advanced scenario that may require a specialized parser or a specialized <xref:System.Windows.FrameworkElement> that acts as the parent rendering element (content host).</span></span>  
  
 <span data-ttu-id="f706a-118">사용 하는 방법에 대 한 자세한 <xref:System.Windows.FrameworkContentElement.LogicalChildren%2A> 하 고 <xref:System.Windows.FrameworkContentElement.AddLogicalChild%2A>를 참조 하세요 [WPF의 트리](~/docs/framework/wpf/advanced/trees-in-wpf.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-118">For more information about how to use <xref:System.Windows.FrameworkContentElement.LogicalChildren%2A> and <xref:System.Windows.FrameworkContentElement.AddLogicalChild%2A>, see [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
        <altmember cref="P:System.Windows.FrameworkContentElement.LogicalChildren" />
        <altmember cref="T:System.Windows.LogicalTreeHelper" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public virtual void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="frameworkContentElement.BeginInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f706a-119">요소를 초기화하기 전에 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-119">Called before an element is initialized.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="f706a-120">
            <para>요소는 요소를 로드 프로세스 중 초기화 되기 전에 발생 되어야 하는 특수 한 처리를 제공 하려면이 메서드를 재정의 합니다.  구현 (기본값) 기본 구현을 초기화를 추적 하기 위해 일부 내부 플래그를 설정 하기 때문에 기본 구현을 호출 해야 합니다.  기본 구현 하는 경우 예외가 throw 됩니다 <see cref="M:System.Windows.FrameworkContentElement.BeginInit" /> 에 도달 하기 전에 동일한 요소에 한 번 이상 이라고 <see cref="M:System.Windows.FrameworkContentElement.EndInit" />합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-120">
              <para>Override this method to provide special handling that should occur before your element is initialized during the element loading process.  Your implementation should call the base implementation, because the base (default) implementation sets some internal flags to keep track of initialization.  The base implementation will throw an exception if <see cref="M:System.Windows.FrameworkContentElement.BeginInit" /> is called more than one time on the same element prior to reaching <see cref="M:System.Windows.FrameworkContentElement.EndInit" />.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginStoryboard">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-121">제공된 Storyboard에 포함된 작업 시퀀스를 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-121">Begins the sequence of actions that are contained in the provided storyboard.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard -&gt; unit" Usage="frameworkContentElement.BeginStoryboard storyboard" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
      </Parameters>
      <Docs>
        <param name="storyboard">
          <span data-ttu-id="f706a-122">시작할 Storyboard입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-122">The storyboard to begin.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-123">제공된 Storyboard에 포함된 작업 시퀀스를 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-123">Begins the sequence of actions that are contained in the provided storyboard.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-124">사용 하지 않는 서명에 대 한 합니다 `isControllable`, 매개 변수를 해당 매개 변수를 지정 하는 경우 또는 `false`, 연결 된 애니메이션 타임 라인 시계 "Fill" 기간에 도달 하는 즉시 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-124">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks associated with the animation are removed as soon as it reaches the "Fill" period.</span></span> <span data-ttu-id="f706a-125">따라서 애니메이션 번 실행 한 후 다시 시작할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-125">Therefore the animation cannot be restarted after being run once.</span></span> <span data-ttu-id="f706a-126">Note는 애니메이션 제어 수도 있어야 스토리 보드 이름이 나 코드에서 인스턴스로 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-126">Note that controlling an animation also requires that the storyboard be named or accessible as an instance in code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="frameworkContentElement.BeginStoryboard (storyboard, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="storyboard">
          <span data-ttu-id="f706a-127">시작할 Storyboard입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-127">The storyboard to begin.</span>
          </span>
        </param>
        <param name="handoffBehavior">
          <span data-ttu-id="f706a-128">Storyboard에 설명되어 있는 속성에 이미 애니메이션이 적용되어 있는 경우에 사용할 동작을 설명하는 열거형의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-128">A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-129">속성에 이미 애니메이션이 적용되어 있는 경우 수행할 작업에 대해 지정된 옵션을 사용하여 제공된 Storyboard에 포함된 작업 시퀀스를 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-129">Begins the sequence of actions that are contained in the provided storyboard, with options specified for what should occur if the property is already animated.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-130">사용 하지 않는 서명에 대 한 합니다 `isControllable`, 매개 변수를 해당 매개 변수를 지정 하는 경우 또는 `false`, 연결 된 애니메이션 타임 라인 시계 "Fill" 기간에 도달 하는 즉시 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-130">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks associated with the animation are removed as soon as it reaches the "Fill" period.</span></span> <span data-ttu-id="f706a-131">따라서 애니메이션 번 실행 한 후 다시 시작할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-131">Therefore the animation cannot be restarted after being run once.</span></span> <span data-ttu-id="f706a-132">Note는 애니메이션 제어 수도 있어야 스토리 보드 이름이 나 코드에서 인스턴스로 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-132">Note that controlling an animation also requires that the storyboard be named or accessible as an instance in code.</span></span>  
  
## <a name="using-the-compose-handoffbehavior"></a><span data-ttu-id="f706a-133">사용 하 여 Compose HandoffBehavior</span><span class="sxs-lookup"><span data-stu-id="f706a-133">Using the Compose HandoffBehavior</span></span>  
 <span data-ttu-id="f706a-134">적용 하는 경우는 <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, 또는 <xref:System.Windows.Media.Animation.AnimationClock> 사용 하 여 속성에는 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>모든 <xref:System.Windows.Media.Animation.Clock> 개체 속성과 연관 된 이전에 시스템 리소스를 소비 계속; 타이밍 시스템에서 시계를 자동으로 제거 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-134">When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property by using the <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.</span></span>  
  
 <span data-ttu-id="f706a-135">사용 하 여 많은 수의 clock 적용 하는 경우 성능 문제를 방지 하려면 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>를 완성 한 후 애니메이션된 속성에서 구성 중인 클록을 제거 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-135">To avoid performance issues when you apply a large number of clocks by using <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, you should remove composing clocks from the animated property after they complete.</span></span> <span data-ttu-id="f706a-136">클록을 제거 하는 방법은 여러 가지가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-136">There are several ways to remove a clock:</span></span>  
  
-   <span data-ttu-id="f706a-137">속성에서 모든 클록을 제거 하려면 사용 합니다 <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> 또는 <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> 애니메이션된 개체의 메서드.</span><span class="sxs-lookup"><span data-stu-id="f706a-137">To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object.</span></span> <span data-ttu-id="f706a-138">첫 번째 매개 변수로 애니메이션 효과가 적용 되는 속성을 지정 하 고 `null` 두 번째입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-138">Specify the property being animated as the first parameter, and `null` as the second.</span></span> <span data-ttu-id="f706a-139">이 속성에서 모든 애니메이션 클록을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-139">This removes all animation clocks from the property.</span></span>  
  
-   <span data-ttu-id="f706a-140">특정 제거할 <xref:System.Windows.Media.Animation.AnimationClock> 클록 목록에서 사용 하 여는 <xref:System.Windows.Media.Animation.Clock.Controller%2A> 의 속성을 <xref:System.Windows.Media.Animation.AnimationClock> 검색할를 <xref:System.Windows.Media.Animation.ClockController>, 호출를 <xref:System.Windows.Media.Animation.ClockController.Remove%2A> 메서드의 <xref:System.Windows.Media.Animation.ClockController>합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-140">To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>.</span></span> <span data-ttu-id="f706a-141">이 일반적으로 수행 된 <xref:System.Windows.Media.Animation.Clock.Completed> 클록에 대 한 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-141">This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock.</span></span> <span data-ttu-id="f706a-142">루트 클록만 하 여 제어 될 수는 <xref:System.Windows.Media.Animation.ClockController>; <xref:System.Windows.Media.Animation.Clock.Controller%2A> 자식 클록의 속성을 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-142">Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`.</span></span> <span data-ttu-id="f706a-143">또한는 <xref:System.Windows.Media.Animation.Clock.Completed> 클록의 유효 기간 무제한 인 경우 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-143">Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not raised if the effective duration of the clock is forever.</span></span>  <span data-ttu-id="f706a-144">이 경우 사용자 호출 시기를 결정 해야 <xref:System.Windows.Media.Animation.ClockController.Remove%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-144">In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span></span>  
  
 <span data-ttu-id="f706a-145">이것은 주로 수명이 긴 개체에 대한 애니메이션에서 문제가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-145">This is primarily an issue for animations on objects that have a long lifetime.</span></span>  <span data-ttu-id="f706a-146">개체는 가비지 수집 되 면 해당 클록도 연결이 끊어집니다 및 가비지 수집 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-146">When an object is garbage collected, its clocks are also disconnected and garbage collected.</span></span>  
  
 <span data-ttu-id="f706a-147">클록 개체에 대 한 자세한 내용은 참조 하세요. [애니메이션 및 타이밍 시스템 개요](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-147">For more information about clock objects, see [Animation and Timing System Overview](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior * bool -&gt; unit" Usage="frameworkContentElement.BeginStoryboard (storyboard, handoffBehavior, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="storyboard">
          <span data-ttu-id="f706a-148">시작할 Storyboard입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-148">The storyboard to begin.</span>
          </span>
        </param>
        <param name="handoffBehavior">
          <span data-ttu-id="f706a-149">스토리보드에 설명되어 있는 속성에 이미 애니메이션이 적용되어 있는 경우에 사용할 동작을 설명하는 열거형의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-149">A value of the enumeration that describes behavior to use if a  property described in the storyboard is already animated.</span>
          </span>
        </param>
        <param name="isControllable">
          <span data-ttu-id="f706a-150">애니메이션을 시작한 후 제어(일시 중지)할 수 있는지 여부를 선언합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-150">Declares whether the animation is controllable (can be paused) after it is started.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-151">애니메이션이 시작된 후 제어하기 위한 지정된 상태를 사용하여 제공된 Storyboard에 포함된 작업 시퀀스를 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-151">Begins the sequence of actions that are contained in the provided storyboard, with specified state for control of the animation after it is started.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-152">사용 하지 않는 서명에 대 한 합니다 `isControllable`, 매개 변수를 해당 매개 변수를 지정 하는 경우 또는 `false`, 연결 된 애니메이션 타임 라인 시계 "Fill" 기간에 도달 하는 즉시 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-152">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks associated with the animation are removed as soon as it reaches the "Fill" period.</span></span> <span data-ttu-id="f706a-153">따라서 애니메이션 번 실행 한 후 다시 시작할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-153">Therefore the animation cannot be restarted after being run once.</span></span> <span data-ttu-id="f706a-154">Note는 애니메이션 제어 수도 있어야 스토리 보드 이름이 나 코드에서 인스턴스로 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-154">Note that controlling an animation also requires that the storyboard be named or accessible as an instance in code.</span></span>  
  
## <a name="using-the-compose-handoffbehavior"></a><span data-ttu-id="f706a-155">사용 하 여 Compose HandoffBehavior</span><span class="sxs-lookup"><span data-stu-id="f706a-155">Using the Compose HandoffBehavior</span></span>  
 <span data-ttu-id="f706a-156">적용 하는 경우는 <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, 또는 <xref:System.Windows.Media.Animation.AnimationClock> 사용 하 여 속성에는 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>모든 <xref:System.Windows.Media.Animation.Clock> 개체 속성과 연관 된 이전에 시스템 리소스를 소비 계속; 타이밍 시스템에서 자동으로 이러한 클록을 제거 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-156">When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property by using the <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove these clocks automatically.</span></span>  
  
 <span data-ttu-id="f706a-157">사용 하 여 많은 수의 clock 적용 하는 경우 성능 문제를 방지 하려면 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>를 완성 한 후 애니메이션된 속성에서 구성 중인 클록을 제거 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-157">To avoid performance issues when you apply a large number of clocks by using <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, you should remove composing clocks from the animated property after they complete.</span></span> <span data-ttu-id="f706a-158">클록을 제거 하는 방법은 여러 가지가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-158">There are several ways to remove a clock:</span></span>  
  
-   <span data-ttu-id="f706a-159">속성에서 모든 클록을 제거 하려면 사용 합니다 <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> 또는 <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> 애니메이션된 개체의 메서드.</span><span class="sxs-lookup"><span data-stu-id="f706a-159">To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object.</span></span> <span data-ttu-id="f706a-160">첫 번째 매개 변수로 애니메이션 효과가 적용 되는 속성을 지정 하 고 `null` 두 번째입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-160">Specify the property being animated as the first parameter, and `null` as the second.</span></span> <span data-ttu-id="f706a-161">이 속성에서 모든 애니메이션 클록을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-161">This removes all animation clocks from the property.</span></span>  
  
-   <span data-ttu-id="f706a-162">특정 제거할 <xref:System.Windows.Media.Animation.AnimationClock> 클록 목록에서 사용 하 여는 <xref:System.Windows.Media.Animation.Clock.Controller%2A> 의 속성을 <xref:System.Windows.Media.Animation.AnimationClock> 검색할를 <xref:System.Windows.Media.Animation.ClockController>, 호출를 <xref:System.Windows.Media.Animation.ClockController.Remove%2A> 메서드의 <xref:System.Windows.Media.Animation.ClockController>합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-162">To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>.</span></span> <span data-ttu-id="f706a-163">이 일반적으로 수행 된 <xref:System.Windows.Media.Animation.Clock.Completed> 클록에 대 한 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-163">This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock.</span></span> <span data-ttu-id="f706a-164">루트 클록만 하 여 제어 될 수는 <xref:System.Windows.Media.Animation.ClockController>; <xref:System.Windows.Media.Animation.Clock.Controller%2A> 자식 클록의 속성을 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-164">Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`.</span></span> <span data-ttu-id="f706a-165">또한는 <xref:System.Windows.Media.Animation.Clock.Completed> 클록의 유효 기간 무제한 인 경우 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-165">Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not raised if the effective duration of the clock is forever.</span></span>  <span data-ttu-id="f706a-166">이 경우 사용자 호출 시기를 결정 해야 <xref:System.Windows.Media.Animation.ClockController.Remove%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-166">In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span></span>  
  
 <span data-ttu-id="f706a-167">이것은 주로 수명이 긴 개체에 대한 애니메이션에서 문제가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-167">This is primarily an issue for animations on objects that have a long lifetime.</span></span>  <span data-ttu-id="f706a-168">개체는 가비지 수집 되 면 해당 클록도 연결이 끊어집니다 및 가비지 수집 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-168">When an object is garbage collected, its clocks are also disconnected and garbage collected.</span></span>  
  
 <span data-ttu-id="f706a-169">클록 개체에 대 한 자세한 내용은 참조 하세요. [애니메이션 및 타이밍 시스템 개요](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-169">For more information about clock objects, see [Animation and Timing System Overview](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroup">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingGroup BindingGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingGroup BindingGroup" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.BindingGroup" />
      <MemberSignature Language="VB.NET" Value="Public Property BindingGroup As BindingGroup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingGroup ^ BindingGroup { System::Windows::Data::BindingGroup ^ get(); void set(System::Windows::Data::BindingGroup ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BindingGroup : System.Windows.Data.BindingGroup with get, set" Usage="System.Windows.FrameworkContentElement.BindingGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-170">요소에 사용되는 <see cref="T:System.Windows.Data.BindingGroup" />을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-170">Gets or sets the <see cref="T:System.Windows.Data.BindingGroup" /> that is used for the element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f706a-171">요소에 사용되는 <see cref="T:System.Windows.Data.BindingGroup" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-171">The <see cref="T:System.Windows.Data.BindingGroup" /> that is used for the element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-172"><xref:System.Windows.Data.BindingGroup> 개체의 여러 속성의 값 유효성 검사에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-172">A <xref:System.Windows.Data.BindingGroup> can be used to validate the values of multiple properties of an object.</span></span> <span data-ttu-id="f706a-173">예를 들어 응용 프로그램 주소를 입력 하 라는 메시지를 다음 형식의 개체를 채웁니다 `Address`, 속성이 있는 `Street`, `City`, `ZipCode`, 및 `Country`, 값을 사용 하는 사용자 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-173">For example, suppose that an application prompts the user to enter an address and then populates an object of type `Address`, which has the properties `Street`, `City`, `ZipCode`, and `Country`, with the values that the user provided.</span></span> <span data-ttu-id="f706a-174">응용 프로그램에 4 개를 포함 하는 패널 <xref:System.Windows.Controls.TextBox> 개체의 속성 중 하나에 바인딩되는 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-174">The application has a panel that contains four <xref:System.Windows.Controls.TextBox> controls, each of which is bound to one of the object’s properties.</span></span> <span data-ttu-id="f706a-175">사용할 수는 <xref:System.Windows.Controls.ValidationRule> 에 <xref:System.Windows.Data.BindingGroup> 유효성을 검사 하는 `Address` 개체.</span><span class="sxs-lookup"><span data-stu-id="f706a-175">You can use a <xref:System.Windows.Controls.ValidationRule> in a <xref:System.Windows.Data.BindingGroup> to validate the `Address` object.</span></span> <span data-ttu-id="f706a-176">예를 들어를 <xref:System.Windows.Controls.ValidationRule> 우편 주소의 국가 대 한 유효한 지 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-176">For example, the <xref:System.Windows.Controls.ValidationRule> can ensure that the zip code is valid for the country of the address.</span></span>  
  
 <span data-ttu-id="f706a-177">자식 요소에서 상속 된 <xref:System.Windows.Data.BindingGroup> 다른 상속 가능한 속성에서와 마찬가지로 해당 부모 요소에서.</span><span class="sxs-lookup"><span data-stu-id="f706a-177">Child elements inherit the <xref:System.Windows.Data.BindingGroup> from their parent elements, just as with any other inheritable property.</span></span>  
  
<a name="dependencyPropertyInfo_BindingGroup"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="f706a-178">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="f706a-178">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="f706a-179">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="f706a-179">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.BindingGroupProperty>|  
|<span data-ttu-id="f706a-180">메타 데이터 속성이 **true**</span><span class="sxs-lookup"><span data-stu-id="f706a-180">Metadata properties set to **true**</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroupProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BindingGroupProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BindingGroupProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.BindingGroupProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BindingGroupProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BindingGroupProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BindingGroupProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.BindingGroupProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-181">
            <see cref="P:System.Windows.FrameworkContentElement.BindingGroup" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-181">Identifies the <see cref="P:System.Windows.FrameworkContentElement.BindingGroup" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.BringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView();" />
      <MemberSignature Language="F#" Value="member this.BringIntoView : unit -&gt; unit" Usage="frameworkContentElement.BringIntoView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f706a-182">이 요소를 포함된 스크롤 가능한 영역 내에서 뷰에 표시하려고 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-182">Attempts to bring this element into view, within any scrollable regions it is contained within.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-183">이 메서드를 호출 하면 호출 됩니다 <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> 요소가 포함 된 부모 스크롤 가능한 영역에서 (부모 수 있을 것을 <xref:System.Windows.FrameworkElement>아니라는 <xref:System.Windows.FrameworkContentElement>).</span><span class="sxs-lookup"><span data-stu-id="f706a-183">By calling this method, you effectively will call <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> on any parent scrollable area that contains the element (the parent may very well be a <xref:System.Windows.FrameworkElement>, not a <xref:System.Windows.FrameworkContentElement>).</span></span> <span data-ttu-id="f706a-184">이 요소는 스크롤 가능한 영역에 포함 되지 않은, 경우 이벤트가 계속 발생 하지만 효과가 있을 것입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-184">If this element is not contained in a scrollable area, the event is still raised, but there will be no effect.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ContextMenu ContextMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ContextMenu ContextMenu" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.ContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextMenu As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ContextMenu ^ ContextMenu { System::Windows::Controls::ContextMenu ^ get(); void set(System::Windows::Controls::ContextMenu ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextMenu : System.Windows.Controls.ContextMenu with get, set" Usage="System.Windows.FrameworkContentElement.ContextMenu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-185">이 요소 내에서 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]를 통해 상황에 맞는 메뉴를 요청할 때마다 표시되는 상황에 맞는 메뉴 요소를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-185">Gets or sets the context menu element that should appear whenever the context menu is requested via [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] from within this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f706a-186">이 요소가 사용하는 상황에 맞는 메뉴입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-186">The context menu that this element uses.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_ContextMenu"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="f706a-187">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="f706a-187">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="f706a-188">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="f706a-188">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.ContextMenuProperty>|  
|<span data-ttu-id="f706a-189">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="f706a-189">Metadata properties set to `true`</span></span>|<span data-ttu-id="f706a-190">없음</span><span class="sxs-lookup"><span data-stu-id="f706a-190">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f706a-191">다음 예제에서는 위치를 <xref:System.Windows.Controls.ContextMenu> 에 <xref:System.Windows.Documents.Paragraph>합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-191">The following example places a <xref:System.Windows.Controls.ContextMenu> on a <xref:System.Windows.Documents.Paragraph>.</span></span>  
  
 [!code-xaml[ContentElementsSmorgasbord#ContextMenu](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#contextmenu)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
        <altmember cref="T:System.Windows.Controls.ContextMenuService" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.ContextMenuClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuClosing As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuClosing;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-192">요소의 상황에 맞는 메뉴를 닫기 직전에 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-192">Occurs just before any context menu on the element is closed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-193">닫히지 않도록 하려면 상황에 맞는 메뉴는 이벤트 처리기로 표시 해야 처리.</span><span class="sxs-lookup"><span data-stu-id="f706a-193">To suppress closing context menus, handlers of the event should mark it as handled.</span></span>  
  
 <span data-ttu-id="f706a-194">이 이벤트를 사용 하는 <xref:System.Windows.EventTrigger> 스타일에서 기본 서비스 이벤트 식별자를 참조 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-194">To use this event as an <xref:System.Windows.EventTrigger> in a style, you must reference the underlying service event identifier:</span></span>  
  
 [!code-xaml[CorePseudocode#FEContextMenuClosing](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuclosing)]  
  
 <span data-ttu-id="f706a-195">(이 사용 되므로 필요한에서 이벤트를 구현 <xref:System.Windows.FrameworkContentElement> 는 노출 기본 서비스 이벤트를 올바르게 매핑되지를 <xref:System.Windows.FrameworkContentElement.ContextMenuClosing> 트리거에 사용에 대 한 식별자)입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-195">(This usage is required because the event implementation on <xref:System.Windows.FrameworkContentElement> that exposes the underlying service event does not correctly map the <xref:System.Windows.FrameworkContentElement.ContextMenuClosing> identifier for use in triggers).</span></span>  
  
<a name="routedEventInfo_ContextMenuClosing"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="f706a-196">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="f706a-196">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="f706a-197">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="f706a-197">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.ContextMenuClosingEvent>|  
|<span data-ttu-id="f706a-198">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="f706a-198">Routing strategy</span></span>|<span data-ttu-id="f706a-199">버블링</span><span class="sxs-lookup"><span data-stu-id="f706a-199">Bubbling</span></span>|  
|<span data-ttu-id="f706a-200">대리자</span><span class="sxs-lookup"><span data-stu-id="f706a-200">Delegate</span></span>|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
   
  
## Examples  
 <span data-ttu-id="f706a-201">다음 예제에서는 명명 된 영역 위에 커서를 변경 하는 처리기 구현 `DisplayArea` (표시 되지 않음).</span><span class="sxs-lookup"><span data-stu-id="f706a-201">The following example implements a handler that changes the cursor over a named region `DisplayArea` (not shown).</span></span> <span data-ttu-id="f706a-202">주석에서 힌트를 <xref:System.Windows.UIElement> 사용량 사실이 샘플은 동일 하지만 경우 `DisplayArea` 된를 <xref:System.Windows.FrameworkContentElement>.</span><span class="sxs-lookup"><span data-stu-id="f706a-202">The comment hints at a <xref:System.Windows.UIElement> usage, but in fact this sample would be identical if `DisplayArea` were a <xref:System.Windows.FrameworkContentElement>.</span></span>  
  
 [!code-csharp[cursors#ChangeCursorsSample](~/samples/snippets/csharp/VS_Snippets_Wpf/cursors/CSharp/Window1.xaml.cs#changecursorssample)]
 [!code-vb[cursors#ChangeCursorsSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/cursors/VisualBasic/Window1.xaml.vb#changecursorssample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenuService" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.ContextMenuClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkContentElement.ContextMenuClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-203">
            <see cref="E:System.Windows.FrameworkContentElement.ContextMenuClosing" /> [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md)를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-203">Identifies the <see cref="E:System.Windows.FrameworkContentElement.ContextMenuClosing" /> [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-204">이벤트 식별자 개체는 라우트된 이벤트가 등록 될 때 만들어집니다 (참조 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) 클래스 처리기를 추가 하려면 사용할 수 있습니다 (참조 <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span><span class="sxs-lookup"><span data-stu-id="f706a-204">Event identifier objects are created when routed events are registered (see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) and can then be used to add class handlers (see <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span></span> <span data-ttu-id="f706a-205">식별자 개체는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-205">Identifier objects contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.ContextMenuOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuOpening As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuOpening;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-206">요소의 상황에 맞는 메뉴를 열 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-206">Occurs when any context menu on the element is opened.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-207">상황에 맞는 메뉴를 열고 수동으로, 처리 된 것으로 이벤트 처리기 관련 이벤트를 표시 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-207">To manually open context menus, handlers of the events should mark the relevant event as handled.</span></span> <span data-ttu-id="f706a-208">이 고, 그렇지의 기존 값을 <xref:System.Windows.FrameworkContentElement.ContextMenu%2A> 속성이 자동으로 상황에 맞는 메뉴를 열려면 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-208">Otherwise, the existing value of the <xref:System.Windows.FrameworkContentElement.ContextMenu%2A> property will be used to automatically open a context menu.</span></span> <span data-ttu-id="f706a-209">이벤트를 처리 된 기본 작업을 효과적으로 취소 하 고 수 값을 다시 설정할 수는 <xref:System.Windows.FrameworkContentElement.ContextMenu%2A> 속성 연 다음 새 <xref:System.Windows.Controls.ContextMenu>합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-209">Marking the event handled will effectively cancel the default action, and could be an opportunity to reset the value of the <xref:System.Windows.FrameworkContentElement.ContextMenu%2A> property and then open the new <xref:System.Windows.Controls.ContextMenu>.</span></span> <span data-ttu-id="f706a-210">그러나 고려해 야 타이밍 문제가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-210">However, there is a timing issue you should be aware of.</span></span> <span data-ttu-id="f706a-211">통해 상황에 맞는 메뉴를 완전히 바꾸기 위해는 <xref:System.Windows.FrameworkContentElement.ContextMenuOpening> 처리기 초기 상황에 맞는 메뉴 아니어야 null 이거나 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-211">In order to completely replace the context menu through a <xref:System.Windows.FrameworkContentElement.ContextMenuOpening> handler, the initial context menu must not be null / empty.</span></span> <span data-ttu-id="f706a-212">또는 이벤트를 처리 하 여 수동으로 새 상황에 맞는 메뉴를 엽니다 해야 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-212">Alternatively, you might need to handle the event and then manually open a new context menu.</span></span> <span data-ttu-id="f706a-213">자세한 내용은 참조 하세요 [방법: ContextMenuOpening 이벤트 처리](~/docs/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-213">For details, see [How to: Handle the ContextMenuOpening Event](~/docs/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event.md).</span></span>  
  
 <span data-ttu-id="f706a-214">이 이벤트를 사용 하는 <xref:System.Windows.EventTrigger> 스타일에서 기본 서비스 이벤트 식별자를 참조 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-214">To use this event as an <xref:System.Windows.EventTrigger> in a style, you must reference the underlying service event identifier:</span></span>  
  
 [!code-xaml[CorePseudocode#FEContextMenuOpening](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuopening)]  
  
 <span data-ttu-id="f706a-215">(이 사용 되므로 필요한에서 이벤트를 구현 <xref:System.Windows.FrameworkContentElement> 는 노출 기본 서비스 이벤트를 올바르게 매핑되지를 <xref:System.Windows.FrameworkContentElement.ContextMenuOpening> 트리거에 사용에 대 한 식별자)입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-215">(This usage is required because the event implementation on <xref:System.Windows.FrameworkContentElement> that exposes the underlying service event does not correctly map the <xref:System.Windows.FrameworkContentElement.ContextMenuOpening> identifier for use in triggers).</span></span>  
  
<a name="routedEventInfo_ContextMenuOpening"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="f706a-216">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="f706a-216">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="f706a-217">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="f706a-217">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.ContextMenuOpeningEvent>|  
|<span data-ttu-id="f706a-218">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="f706a-218">Routing strategy</span></span>|<span data-ttu-id="f706a-219">버블링</span><span class="sxs-lookup"><span data-stu-id="f706a-219">Bubbling</span></span>|  
|<span data-ttu-id="f706a-220">대리자</span><span class="sxs-lookup"><span data-stu-id="f706a-220">Delegate</span></span>|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenuService" />
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.ContextMenuOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkContentElement.ContextMenuOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-221">
            <see cref="E:System.Windows.FrameworkContentElement.ContextMenuOpening" /> [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md)를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-221">Identifies the <see cref="E:System.Windows.FrameworkContentElement.ContextMenuOpening" /> [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-222">이벤트 식별자 개체는 라우트된 이벤트가 등록 될 때 만들어집니다 (참조 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) 클래스 처리기를 추가 하려면 사용할 수 있습니다 (참조 <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span><span class="sxs-lookup"><span data-stu-id="f706a-222">Event identifier objects are created when routed events are registered (see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) and can then be used to add class handlers (see <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span></span> <span data-ttu-id="f706a-223">식별자 개체는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-223">Identifier objects contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContextMenuProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContextMenuProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.ContextMenuProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ContextMenuProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.ContextMenuProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-224">
            <see cref="P:System.Windows.FrameworkContentElement.ContextMenu" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-224">Identifies the <see cref="P:System.Windows.FrameworkContentElement.ContextMenu" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Cursor Cursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Cursor Cursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.Cursor" />
      <MemberSignature Language="VB.NET" Value="Public Property Cursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Cursor ^ Cursor { System::Windows::Input::Cursor ^ get(); void set(System::Windows::Input::Cursor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Cursor : System.Windows.Input.Cursor with get, set" Usage="System.Windows.FrameworkContentElement.Cursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-225">마우스 포인터가 이 요소 위에 있을 때 표시되는 커서를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-225">Gets or sets the cursor that displays when the mouse pointer is over this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f706a-226">표시할 커서입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-226">The cursor to display.</span>
          </span>
          <span data-ttu-id="f706a-227">기본값은 이 종속성 속성마다 <see langword="null" />로 정의됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-227">The default value is defined as <see langword="null" /> per this dependency property.</span>
          </span>
          <span data-ttu-id="f706a-228">그러나 런타임 시 실제 기본값은 다양한 요소에서 비롯됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-228">However, the practical default at run time will come from a variety of factors.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-229">이 속성을 설정할 때 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]의 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 프로세서에 대 한 형식 변환에 의존 합니다 <xref:System.Windows.Input.Cursor> 문자열을 평가 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-229">When setting this property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor relies on type conversion for the <xref:System.Windows.Input.Cursor> class to evaluate the string.</span></span> <span data-ttu-id="f706a-230">제공된 된 문자열을 평가할지를 <xref:System.Windows.Input.CursorType> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-230">The provided string should evaluate to a <xref:System.Windows.Input.CursorType> value.</span></span> <span data-ttu-id="f706a-231">자세한 내용은 <xref:System.Windows.Input.Cursor>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="f706a-231">See <xref:System.Windows.Input.Cursor> for details.</span></span>  
  
 <span data-ttu-id="f706a-232">이 속성으로 설정 된 커서는 마우스 포인터가이 요소 위에 있을 때 표시 되지 것입니다 하는지 여부의 값에 따라 달라 집니다 이기도 합니다 <xref:System.Windows.FrameworkContentElement.ForceCursor%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-232">Whether the cursor as established by this property will or will not display when the mouse pointer is over this element is also dependent on the value of the <xref:System.Windows.FrameworkContentElement.ForceCursor%2A> property.</span></span> <span data-ttu-id="f706a-233">또한는 활성 끌기, 마우스 캡처, 컨트롤 및 등과 내의 텍스트 편집 모드와 같은 이벤트 관련 고려 사항을이 속성에 지정 된 값 보다 높은 우선 순위를 사용 하 여 커서를 적용도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-233">Also, event-related considerations such as an active drag, mouse capture, text editing modes within controls, and so on, will also affect the cursor with higher priority than the value you specify in this property.</span></span>  
  
 <span data-ttu-id="f706a-234">로 설정, 최종 기본적으로이 속성을 설정 하는 동작으로 되돌리려면 `null` 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-234">To revert the behavior of setting this property to the eventual default, set it to `null` again.</span></span>  
  
 <span data-ttu-id="f706a-235">`null` 기본값인은 실제 커서 값 결정 여기 지연 되 고이 다른 곳에서 가져와야 하는 의미입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-235">The `null` default really means that determination of the practical cursor value is deferred here and should be obtained from elsewhere.</span></span> <span data-ttu-id="f706a-236">통해 모든 원본의 기본 커서를 프로그래밍 방식으로 값 없이 표시 되는 경우는 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 응용 프로그램 화살표를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-236">If presented with no programmatic values from any source, the default cursor over a [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] application will be an arrow.</span></span>  
  
 <span data-ttu-id="f706a-237">위에 마우스를 움직일 때마다를 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 발생을 <xref:System.Windows.ContentElement.QueryCursor> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-237">Each movement of the mouse over a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] application raises a <xref:System.Windows.ContentElement.QueryCursor> event.</span></span> <span data-ttu-id="f706a-238">이 이벤트는 버블링, 및 경로 따라 모든 요소는 이벤트를 처리 하 고이 이벤트의 인수를 통해 커서의 값을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-238">The event bubbles, and any element along the route has the opportunity to handle the event and to set the value of the cursor via the arguments of this event.</span></span> <span data-ttu-id="f706a-239">이런 경우, 이벤트 처리 하 고 인수에 변경 된 값 보다 우선 값을 <xref:System.Windows.FrameworkContentElement.Cursor%2A> 모든 수준에서 속성 하지 않는 한 <xref:System.Windows.FrameworkContentElement.ForceCursor%2A> 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-239">If that happens, the fact that the event is handled and has a changed value in the arguments takes precedence over the value of the <xref:System.Windows.FrameworkContentElement.Cursor%2A> property at any level, unless <xref:System.Windows.FrameworkContentElement.ForceCursor%2A> is set.</span></span>  
  
 <span data-ttu-id="f706a-240">사용자 지정 커서를 만들지, 일반적으로 설정한 경우이 속성의 정적 속성 값에는 <xref:System.Windows.Input.Cursors> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-240">If not creating a custom cursor, typically you set this property to a static property value of the <xref:System.Windows.Input.Cursors> class.</span></span>  
  
 <span data-ttu-id="f706a-241">설정 된 <xref:System.Windows.Input.Cursor> 사용자 지정 값으로 설정 되지 않은 부분 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-241">Setting the <xref:System.Windows.Input.Cursor> to a custom value is not enabled in partial trust.</span></span> <span data-ttu-id="f706a-242">사용자 지정 커서에 대 한 자세한 내용은 참조 하세요. [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-242">For more information on custom cursors, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_Cursor"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="f706a-243">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="f706a-243">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="f706a-244">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="f706a-244">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.CursorProperty>|  
|<span data-ttu-id="f706a-245">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="f706a-245">Metadata properties set to `true`</span></span>|<span data-ttu-id="f706a-246">없음</span><span class="sxs-lookup"><span data-stu-id="f706a-246">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f706a-247">다음 예제에서는 사용자 지정 값으로 커서를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-247">The following example sets the cursor to a custom value.</span></span>  
  
 [!code-csharp[cursors#ChangeCursorsSample](~/samples/snippets/csharp/VS_Snippets_Wpf/cursors/CSharp/Window1.xaml.cs#changecursorssample)]
 [!code-vb[cursors#ChangeCursorsSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/cursors/VisualBasic/Window1.xaml.vb#changecursorssample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.QueryCursor" />
        <altmember cref="P:System.Windows.FrameworkContentElement.ForceCursor" />
        <altmember cref="P:System.Windows.Input.Mouse.OverrideCursor" />
      </Docs>
    </Member>
    <Member MemberName="CursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.CursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.CursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-248">
            <see cref="P:System.Windows.FrameworkContentElement.Cursor" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-248">Identifies the <see cref="P:System.Windows.FrameworkContentElement.Cursor" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContext">
      <MemberSignature Language="C#" Value="public object DataContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.DataContext" />
      <MemberSignature Language="VB.NET" Value="Public Property DataContext As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataContext { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataContext : obj with get, set" Usage="System.Windows.FrameworkContentElement.DataContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-249">데이터 바인딩에 참여할 때 요소에 대한 데이터 컨텍스트를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-249">Gets or sets the data context for an element when it participates in data binding.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f706a-250">데이터 컨텍스트로 사용할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-250">The object to use as data context.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-251">*데이터 컨텍스트* 는 요소가 바인딩 뿐만 아니라 경로 같은 바인딩의 다른 특성에 사용 되는 바인딩 소스에 대 한 부모 요소 로부터 정보를 상속할 수 있도록 하는 개념입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-251">*Data context* is a concept that allows elements to inherit information from their parent elements about the binding source that is used for binding, as well as other characteristics of the binding such as the path.</span></span>  
  
 <span data-ttu-id="f706a-252">데이터 컨텍스트를 직접 설정할 수 있습니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 바인딩 해당 개체의 속성을 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-252">Data context can be set directly to a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] object, with the bindings evaluating to properties of that object.</span></span> <span data-ttu-id="f706a-253">데이터 컨텍스트 설정할 수 있습니다 또는 한 <xref:System.Windows.Data.DataSourceProvider> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-253">Alternatively, you can set the data context to a <xref:System.Windows.Data.DataSourceProvider> object.</span></span>  
  
 <span data-ttu-id="f706a-254">속성 값이 종속성 속성을 상속 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-254">This dependency property inherits property values.</span></span> <span data-ttu-id="f706a-255">자식 요소에 대 한 다른 값이 없는 경우 <xref:System.Windows.FrameworkContentElement.DataContext%2A> 를 통해 로컬 값 또는 스타일 설정 속성 시스템은 값을 설정할 수는 <xref:System.Windows.FrameworkContentElement.DataContext%2A> 이 값이 할당 된 가장 가까운 부모 요소의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-255">If there are child elements with no other value for <xref:System.Windows.FrameworkContentElement.DataContext%2A> established through local values or styles, the property system will set the value to be the <xref:System.Windows.FrameworkContentElement.DataContext%2A> value of the nearest parent element with this value assigned.</span></span>  
  
 <span data-ttu-id="f706a-256">다음 속성 중 하나를 사용할 수는 또는 <xref:System.Windows.Data.Binding> 바인딩 소스를 명시적으로 지정 하는 클래스: <xref:System.Windows.Data.Binding.ElementName%2A>를 <xref:System.Windows.Data.Binding.Source%2A>, 또는 <xref:System.Windows.Data.Binding.RelativeSource%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-256">Alternatively, you can use one of the following properties of the <xref:System.Windows.Data.Binding> class to specify the binding source explicitly: <xref:System.Windows.Data.Binding.ElementName%2A>, <xref:System.Windows.Data.Binding.Source%2A>, or <xref:System.Windows.Data.Binding.RelativeSource%2A>.</span></span> <span data-ttu-id="f706a-257">자세한 내용은 [방법: 바인딩 소스 지정](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-257">For more information, see [How to: Specify the Binding Source](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md).</span></span>  
  
 <span data-ttu-id="f706a-258">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], <xref:System.Windows.FrameworkContentElement.DataContext%2A> 으로 설정 되어 가장 일반적으로 <xref:System.Windows.Data.Binding> 선언 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-258">In [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], <xref:System.Windows.FrameworkContentElement.DataContext%2A> is most commonly set to as a <xref:System.Windows.Data.Binding> declaration.</span></span> <span data-ttu-id="f706a-259">속성 요소 구문이 나 특성 구문을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-259">You can use either property element syntax or attribute syntax.</span></span> <span data-ttu-id="f706a-260">특성 구문 예제에서는이 페이지에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-260">Attribute syntax is shown in the example on this page.</span></span> <span data-ttu-id="f706a-261">설정할 수도 있습니다 <xref:System.Windows.FrameworkContentElement.DataContext%2A> 코드에서입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-261">You can also set <xref:System.Windows.FrameworkContentElement.DataContext%2A> in code.</span></span>  
  
<a name="xamlPropertyElementUsage_DataContext"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="f706a-262">XAML 속성 요소 사용</span><span class="sxs-lookup"><span data-stu-id="f706a-262">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.DataContext>  
    <dataContextObject />  
  </object.DataContext>  
</object>  
```  
  
<a name="xamlAttributeUsage_DataContext"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="f706a-263">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="f706a-263">XAML Attribute Usage</span></span>  
  
```  
<object DataContext="bindingUsage"/>  
- or -  
<object DataContext="{resourceExtension contextResourceKey}"/>  
```  
  
<a name="xamlValues_DataContext"></a>   
## <a name="xaml-values"></a><span data-ttu-id="f706a-264">XAML 값</span><span class="sxs-lookup"><span data-stu-id="f706a-264">XAML Values</span></span>  
 <span data-ttu-id="f706a-265">*dataContextObject*</span><span class="sxs-lookup"><span data-stu-id="f706a-265">*dataContextObject*</span></span>  
 <span data-ttu-id="f706a-266">부모 요소 내에서 모든 바인딩에 대 한 데이터 컨텍스트로 사용 되는 직접 포함 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-266">A directly embedded object that serves as data context for any bindings within the parent element.</span></span> <span data-ttu-id="f706a-267">이 개체는 일반적으로 <xref:System.Windows.Data.Binding> 또는 다른 <xref:System.Windows.Data.BindingBase> 하위 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-267">Typically, this object is a <xref:System.Windows.Data.Binding> or another <xref:System.Windows.Data.BindingBase> subclass.</span></span> <span data-ttu-id="f706a-268">또는 모든 원시 데이터 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 개체 유형을 위해 나중에 정의 된 실제 바인딩은 바인딩 여기에 배치할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-268">Alternatively, raw data of any [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] object type intended for binding may be placed here, with the actual bindings defined later.</span></span>  
  
 <span data-ttu-id="f706a-269">*bindingUsage*</span><span class="sxs-lookup"><span data-stu-id="f706a-269">*bindingUsage*</span></span>  
 <span data-ttu-id="f706a-270">적절 한 데이터 컨텍스트를으로 계산 되는 바인딩 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-270">A binding usage that evaluates to an appropriate data context.</span></span> <span data-ttu-id="f706a-271">자세한 내용은 [Binding 태그 확장](~/docs/framework/wpf/advanced/binding-markup-extension.md)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="f706a-271">For details, see [Binding Markup Extension](~/docs/framework/wpf/advanced/binding-markup-extension.md).</span></span>  
  
 <span data-ttu-id="f706a-272">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="f706a-272">*resourceExtension*</span></span>  
 <span data-ttu-id="f706a-273">다음 중 하나: `StaticResource`, 또는 `DynamicResource`합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-273">One of the following: `StaticResource`, or `DynamicResource`.</span></span> <span data-ttu-id="f706a-274">리소스에서 사용 되는 개체로 정의 하는 원시 데이터를 참조할 때 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-274">This usage is used when referring to raw data defined as an object in resources.</span></span> <span data-ttu-id="f706a-275">참조 [XAML 리소스](~/docs/framework/wpf/advanced/xaml-resources.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-275">See [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="f706a-276">*contextResourceKey*</span><span class="sxs-lookup"><span data-stu-id="f706a-276">*contextResourceKey*</span></span>  
 <span data-ttu-id="f706a-277">내에서 요청 된 개체에 대 한 키 식별자는 <xref:System.Windows.ResourceDictionary>합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-277">The key identifier for the object being requested from within a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
<a name="dependencyPropertyInfo_DataContext"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="f706a-278">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="f706a-278">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="f706a-279">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="f706a-279">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.DataContextProperty>|  
|<span data-ttu-id="f706a-280">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="f706a-280">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="f706a-281">다음 예제에서 바인딩을 설정 합니다.는 <xref:System.Windows.Documents.Paragraph> 요소를 해당 개체로 설정 하 여 새 사용자 지정 데이터 개체를 만들어 <xref:System.Windows.FrameworkContentElement.DataContext%2A>, 및 그 속성에 바인딩 경로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-281">The following example sets a binding on a <xref:System.Windows.Documents.Paragraph> element, by creating a new custom data object, establishing that object as <xref:System.Windows.FrameworkContentElement.DataContext%2A>, and setting the binding path to a property within it.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#DataContext](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#datacontext)]
 [!code-vb[ContentElementsSmorgasbord#DataContext](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#datacontext)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler DataContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler DataContextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.DataContextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataContextChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ DataContextChanged;" />
      <MemberSignature Language="F#" Value="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-282">이 요소의 데이터 컨텍스트가 변경될 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-282">Occurs when this element's data context changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-283">데이터 컨텍스트 및 데이터 바인딩에 설명은 참조 하세요. [데이터 바인딩 개요](~/docs/framework/wpf/data/data-binding-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-283">For an explanation of data contexts and data binding, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f706a-284">요소의 경우 <xref:System.Windows.FrameworkContentElement.DataContext%2A> 이 요소에 모든 데이터 바인딩된 속성 변경 내용을 잠재적으로 영향을 받는 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-284">When an element's <xref:System.Windows.FrameworkContentElement.DataContext%2A> changes, all data-bound properties on this element are potentially affected.</span></span> <span data-ttu-id="f706a-285">이 데이터 컨텍스트를 상속 하는 현재 요소의 하위 요소가 있는 모든 요소 및 현재 요소 자체에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-285">This applies to any elements that are descendant elements of the current element, which inherit the data context, and also the current element itself.</span></span> <span data-ttu-id="f706a-286">이러한 모든 바인딩을 다시 새 해석 <xref:System.Windows.FrameworkContentElement.DataContext%2A> 바인딩에서 새 값을 반영 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-286">All such bindings re-interpret the new <xref:System.Windows.FrameworkContentElement.DataContext%2A> to reflect the new value in bindings.</span></span> <span data-ttu-id="f706a-287">이러한 변경의 발생을 기준으로 순서 대로 수행 보장이 <xref:System.Windows.FrameworkContentElement.DataContextChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-287">There is no guarantee made about the order of these changes relative to the raising of the <xref:System.Windows.FrameworkContentElement.DataContextChanged> event.</span></span>  <span data-ttu-id="f706a-288">변경 내용을 조합 또는 이벤트 후 이벤트 전에 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-288">The changes can occur before the event, after the event, or in any mixture.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContextProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty DataContextProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty DataContextProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.DataContextProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DataContextProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ DataContextProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DataContextProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.DataContextProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-289">
            <see cref="P:System.Windows.FrameworkContentElement.DataContext" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-289">Identifies the <see cref="P:System.Windows.FrameworkContentElement.DataContext" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKey">
      <MemberSignature Language="C#" Value="protected internal object DefaultStyleKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultStyleKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.DefaultStyleKey" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property DefaultStyleKey As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Object ^ DefaultStyleKey { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultStyleKey : obj with get, set" Usage="System.Windows.FrameworkContentElement.DefaultStyleKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-290">테마에서 이 컨트롤에 대해 스타일 템플릿을 찾는 데 사용할 키를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-290">Gets or sets the key to use to find the style template for this control in themes.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f706a-291">스타일 키입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-291">The style key.</span>
          </span>
          <span data-ttu-id="f706a-292">테마 스타일 조회의 일부로 올바르게 사용하려면 이 값은 스타일을 지정할 요소의 <see cref="T:System.Type" />이어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-292">To work correctly as part of theme style lookup, this value is expected to be the <see cref="T:System.Type" /> of the element being styled.</span>
          </span>
          <span data-ttu-id="f706a-293">
            <see langword="null" /> 특정 사례에 대해 허용 된 값이입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-293">
              <see langword="null" /> is an accepted value for a certain case.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-294">이 속성은 일반적으로 직접 setter 통해 설정 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-294">This property is typically not set through any of its direct setters.</span></span> <span data-ttu-id="f706a-295">대신 새 하위 클래스를 만들 때마다이 종속성 속성의 형식별 메타 데이터를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-295">Instead, you override the type-specific metadata of this dependency property every time you create a new subclass.</span></span> <span data-ttu-id="f706a-296">때 있습니다 서브 클래스를 호출 합니다 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> 에 대해 메서드를 <xref:System.Windows.FrameworkContentElement.DefaultStyleKeyProperty> 컨트롤 하위 클래스의 정적 생성자 내에서 식별자.</span><span class="sxs-lookup"><span data-stu-id="f706a-296">When you subclass, call the <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method against the <xref:System.Windows.FrameworkContentElement.DefaultStyleKeyProperty> identifier, within the static constructor of the control subclass.</span></span>  
  
 <span data-ttu-id="f706a-297">예를 들어, 인라인 클래스와 같은 <xref:System.Windows.Documents.Bold> 재정의 초과 거의 구현이 실제로 <xref:System.Windows.FrameworkContentElement.DefaultStyleKey%2A> 메타 데이터에 해당 정적 생성자를 여러 인스턴스 생성자를 노출 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-297">For instance, an inline class such as <xref:System.Windows.Documents.Bold> actually has very little implementation beyond overriding the <xref:System.Windows.FrameworkContentElement.DefaultStyleKey%2A> metadata in its static constructor, and exposing several instance constructors.</span></span> <span data-ttu-id="f706a-298">요소 둘러싸인 사실을 <xref:System.Windows.Documents.Bold> 향상 태그를 <xref:System.Windows.Documents.TextElement.FontWeight%2A> 속성을 <xref:System.Windows.FontWeights.Bold%2A> 의 기본값을 설정 하 여 참조 된 테마 스타일 내에서 구현 되 <xref:System.Windows.FrameworkContentElement.DefaultStyleKey%2A> 에 `typeof(Bold)`입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-298">The fact that elements surrounded by the <xref:System.Windows.Documents.Bold> tag gain a <xref:System.Windows.Documents.TextElement.FontWeight%2A> property of <xref:System.Windows.FontWeights.Bold%2A> is implemented within the theme style that was referenced by setting the default value of <xref:System.Windows.FrameworkContentElement.DefaultStyleKey%2A> to `typeof(Bold)`.</span></span>  
  
 <span data-ttu-id="f706a-299">테마 스타일을 사용 하지 않도록 의도적으로 컨트롤을 설정 합니다 <xref:System.Windows.FrameworkContentElement.OverridesDefaultStyle%2A> 속성을 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-299">If you want your element or control to deliberately not use theme styles, set the <xref:System.Windows.FrameworkContentElement.OverridesDefaultStyle%2A> property to `true`.</span></span>  
  
<a name="dependencyPropertyInfo_DefaultStyleKey"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="f706a-300">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="f706a-300">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="f706a-301">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="f706a-301">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.DefaultStyleKeyProperty>|  
|<span data-ttu-id="f706a-302">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="f706a-302">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKeyProperty">
      <MemberSignature Language="C#" Value="protected internal static readonly System.Windows.DependencyProperty DefaultStyleKeyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly static initonly class System.Windows.DependencyProperty DefaultStyleKeyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.DefaultStyleKeyProperty" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared ReadOnly DefaultStyleKeyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="protected public: static initonly System::Windows::DependencyProperty ^ DefaultStyleKeyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultStyleKeyProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.DefaultStyleKeyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-303">
            <see cref="P:System.Windows.FrameworkContentElement.DefaultStyleKey" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-303">Identifies the <see cref="P:System.Windows.FrameworkContentElement.DefaultStyleKey" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public virtual void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="frameworkContentElement.EndInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f706a-304">요소를 초기화한 후에 바로 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-304">Called immediately after an element is initialized.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-305">요소를 로드 프로세스 동안 요소를 초기화 하는 경우 발생 되어야 하는 특수 한 처리를 제공 하려면이 메서드를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-305">Implement this method to provide special handling that should occur when your element is initialized during the element loading process.</span></span>  
  
 <span data-ttu-id="f706a-306">구현 (기본값) 기본 구현을 초기화를 추적 하기 위해 일부 내부 플래그를 설정 하기 때문에 기본 구현을 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-306">Your implementation should call the base implementation, because the base (default) implementation sets some internal flags to keep track of initialization.</span></span>  
  
 <span data-ttu-id="f706a-307">하는 경우 <xref:System.Windows.FrameworkContentElement.BeginInit%2A> 이전에 호출 기본 구현 시킵니다는 <xref:System.Windows.FrameworkContentElement.Initialized> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-307">If <xref:System.Windows.FrameworkContentElement.BeginInit%2A> was previously called, the base implementation will raise the <xref:System.Windows.FrameworkContentElement.Initialized> event.</span></span> <span data-ttu-id="f706a-308">그렇지 않은 경우, <xref:System.Windows.FrameworkContentElement.BeginInit%2A> 를 호출 하지 않았습니다 것일 수도 되었는지를 확인할 <xref:System.Windows.FrameworkContentElement.BeginInit%2A> 가 호출 되는 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-308">Otherwise, if <xref:System.Windows.FrameworkContentElement.BeginInit%2A> was not called or it could not be determined whether <xref:System.Windows.FrameworkContentElement.BeginInit%2A> was called, the event is not raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.FindName : string -&gt; obj" Usage="frameworkContentElement.FindName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="f706a-309">검색할 요소의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-309">Name of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-310">제공된 식별자 이름의 요소를 찾습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-310">Finds an element that has the provided identifier name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f706a-311">요청한 요소입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-311">The requested element.</span>
          </span>
          <span data-ttu-id="f706a-312">일치하는 요소를 찾을 수 없으면 <see langword="null" />일 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-312">May be <see langword="null" /> if no matching element was found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-313">이 요소에 자식 요소가 있으면 이러한 자식 요소는 요청 된 명명 된 요소에 대 한 모든 검색된을 재귀적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-313">If this element has child elements, these child elements are all searched recursively for the requested named element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f706a-314">참조 된 내에서 이름으로 검색 되는 요소에서 속성을 설정 하는 다음 예제에서는 <xref:System.Windows.Documents.FlowDocument> 페이지에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-314">The following example sets a property on an element found by name within a referenced <xref:System.Windows.Documents.FlowDocument> on a page.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#FindName](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#findname)]
 [!code-vb[ContentElementsSmorgasbord#FindName](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#findname)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindResource">
      <MemberSignature Language="C#" Value="public object FindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.FindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.FindResource : obj -&gt; obj" Usage="frameworkContentElement.FindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey">
          <span data-ttu-id="f706a-315">찾을 리소스의 키 식별자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-315">Key identifier of the resource to be found.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-316">지정된 키를 사용하여 리소스를 검색하고, 요청된 리소스가 없으면 예외를 발생시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-316">Searches for a resource with the specified key, and will throw an exception if the requested resource is not found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f706a-317">찾은 리소스이거나, 일치하는 리소스가 없는 경우 <see langword="null" />입니다. <see langword="null" />인 경우 예외가 throw될 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-317">The found resource, or <see langword="null" /> if no matching resource was found (but will also throw an exception if <see langword="null" />).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="f706a-318">찾을 수 없는 키에 대 한이 메서드를 호출 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-318">If you call this method for a key that cannot be found, an exception is thrown.</span></span> <span data-ttu-id="f706a-319">이 경우는 예외를 처리 하지 않으려면 대신 호출 해야 <xref:System.Windows.FrameworkContentElement.TryFindResource%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-319">If you do not want to handle exceptions for this case, you should instead call <xref:System.Windows.FrameworkContentElement.TryFindResource%2A>.</span></span> <span data-ttu-id="f706a-320"><xref:System.Windows.FrameworkContentElement.TryFindResource%2A> 반환 `null` 리소스가 발견 되 면 시간과 예외를 throw 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-320"><xref:System.Windows.FrameworkContentElement.TryFindResource%2A> returns `null` when no resource is found, and does not throw an exception.</span></span>  
  
 <span data-ttu-id="f706a-321">리소스를 호출 하는 요소에 없는 논리적 트리를 사용 하 여 부모 트리를 검색 하는 경우 런타임에 키로 요청 된 리소스 검색된 경우 트리는 동일한 방식에서입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-321">If the resource is not found on the calling element, the parent tree is searched using the logical tree, in the same way that the tree would be searched if a resource were requested by key at run-time.</span></span>  
  
 <span data-ttu-id="f706a-322">일반적으로 즉시 캐스팅 반환 되는 리소스 값으로 설정 하 려 했던는 속성의 형식으로 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-322">Typically you would immediately cast the return value to the type of the property that you were attempting to set with the returned resource value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f706a-323">다음 예제에서는 태그에 정의 된 대로 리소스를 찾습니다 및 라우트된 이벤트에 대 한 응답에 있는 요소의 특정 속성에 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-323">The following example finds a resource as defined in markup and applies it to a certain property of an element in response to a routed event.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#FindResource](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#findresource)]
 [!code-vb[ContentElementsSmorgasbord#FindResource](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#findresource)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.ResourceReferenceKeyNotFoundException">
          <span data-ttu-id="f706a-324">요청된 리소스 키가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-324">The requested resource key was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f706a-325">
            <paramref name="resourceKey" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-325">
              <paramref name="resourceKey" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style FocusVisualStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style FocusVisualStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.FocusVisualStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property FocusVisualStyle As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ FocusVisualStyle { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FocusVisualStyle : System.Windows.Style with get, set" Usage="System.Windows.FrameworkContentElement.FocusVisualStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-326">키보드 포커스를 캡처할 때 이 요소에 적용되는 모양, 효과 또는 기타 스타일 특성을 사용자 지정할 수 있는 개체를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-326">Gets or sets an object that enables customization of appearance, effects, or other style characteristics that will apply to this element when it captures keyboard focus.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f706a-327">포커스에 적용하려는 스타일입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-327">The desired style to apply on focus.</span>
          </span>
          <span data-ttu-id="f706a-328">종속성 속성에 선언되어 있는 기본값은 빈 정적 <see cref="T:System.Windows.Style" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-328">The default value as declared in the dependency property is an empty static <see cref="T:System.Windows.Style" />.</span>
          </span>
          <span data-ttu-id="f706a-329">그러나 런타임 시 유효 값은 대체로(항상 그렇지는 않음) 컨트롤에 대한 테마 지원에서 제공되는 스타일입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-329">However, the effective value at run time is often (but not always) a style as supplied by theme support for controls.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-330">이 속성을 설정할 때 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]스타일은 거의 항상 요소로 인라인 아닌 리소스 정의으로 참조 리소스는 일반적으로 <xref:System.Windows.StaticResourceExtension>합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-330">When setting this property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], styles are almost always defined as a resource, rather than inline as an element, and that resource is usually referenced as a <xref:System.Windows.StaticResourceExtension>.</span></span>  
  
 <span data-ttu-id="f706a-331">이 속성 시각적 모양에 영향을 줍니다 하지만 보고 하지 않습니다 있도록 메타 데이터에는 참고 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-331">Note that this property affects visual appearance but does not report so in metadata.</span></span> <span data-ttu-id="f706a-332">시각적 모양 변경 이벤트 구동 모든 시간에 적용 되지 않을 수 고 따라서은 일반적으로 보고 메타 데이터의 시각적 개체 또는 레이아웃 정보가 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-332">This is because the visual appearance change is event-driven and may not apply at all times, and thus should not generally report any visual or layout information in metadata.</span></span>  
  
 <span data-ttu-id="f706a-333">개념상 컨트롤에 적용 되는 포커스의 시각적 동작 요소를 일관 된 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-333">Conceptually, the visual behavior of focus applied to a control should be coherent from element to element.</span></span> <span data-ttu-id="f706a-334">일관성을 적용 하는 가장 적절 한 방법은 전체 테마를 작성 하는 경우에 포커스 비주얼 스타일을 변경 하는 경우</span><span class="sxs-lookup"><span data-stu-id="f706a-334">The most sensible way to enforce coherence is to only change the focus visual style if you are composing an entire theme.</span></span> <span data-ttu-id="f706a-335">테마의 일부가 아니라 개별 스타일에서이 속성을 설정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-335">Setting this property on individual styles and not as part of a theme is not the intended usage of this property, because it may lead to a confusing user experience regarding keyboard focus.</span></span> <span data-ttu-id="f706a-336">요소 관련 동작을 의도적으로 일관 된 테마를 하려는 경우 더 좋은 방법은 사용 하는 것 트리거 스타일의 개별 입력된 상태 속성에 대 한 같은 <xref:System.Windows.UIElement.IsFocused%2A> 또는 <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>, 하지 않는 방식으로 작업을 수행 하 고 모든 기존 포커스 비주얼 스타일을 사용 하 여 시각적 방해 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-336">If you are intending element-specific behavior that is deliberately not coherent across a theme, a much better approach is to use triggers in styles for individual input state properties, such as <xref:System.Windows.UIElement.IsFocused%2A> or <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>, and to do so in a way that does not visually interfere with any existing focus visual style.</span></span> <span data-ttu-id="f706a-337">디자인 의도 대 한 자세한 내용은 <xref:System.Windows.FrameworkContentElement.FocusVisualStyle%2A> 및 대체 내용은 속성을 집중 [컨트롤 및 FocusVisualStyle의 포커스 스타일 지정](~/docs/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-337">For more information on the design intention of <xref:System.Windows.FrameworkContentElement.FocusVisualStyle%2A> and alternative focus properties, see [Styling for Focus in Controls, and FocusVisualStyle](~/docs/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle.md).</span></span>  
  
<a name="xamlAttributeUsage_FocusVisualStyle"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="f706a-338">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="f706a-338">XAML Attribute Usage</span></span>  
  
```  
<object FocusVisualStyle="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_FocusVisualStyle"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="f706a-339">XAML 속성 요소 사용</span><span class="sxs-lookup"><span data-stu-id="f706a-339">XAML Property Element Usage</span></span>  
  
<a name="xamlValues_FocusVisualStyle"></a>   
## <a name="xaml-values"></a><span data-ttu-id="f706a-340">XAML 값</span><span class="sxs-lookup"><span data-stu-id="f706a-340">XAML Values</span></span>  
 <span data-ttu-id="f706a-341">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="f706a-341">*resourceExtension*</span></span>  
 <span data-ttu-id="f706a-342">다음 중 하나:, 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-342">One of the following: , or .</span></span> <span data-ttu-id="f706a-343">참조 [XAML 리소스](~/docs/framework/wpf/advanced/xaml-resources.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-343">See [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="f706a-344">*styleResourceKey*</span><span class="sxs-lookup"><span data-stu-id="f706a-344">*styleResourceKey*</span></span>  
 <span data-ttu-id="f706a-345">요청 되는 스타일을 식별 하는 키입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-345">The key that identifies the style being requested.</span></span> <span data-ttu-id="f706a-346">키의 기존 리소스에 참조를 <xref:System.Windows.ResourceDictionary>입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-346">The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f706a-347">속성 요소 구문은 기술적으로 가능 하지만 권장 하지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-347">Property element syntax is technically possible, but not recommended.</span></span> <span data-ttu-id="f706a-348">참조 [인라인 스타일 및 템플릿](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-348">See [Inline Styles and Templates](~/docs/framework/wpf/advanced/inline-styles-and-templates.md).</span></span>  <span data-ttu-id="f706a-349">사용 하 여 바인딩 참조 또는 <xref:System.Windows.Data.Binding> 가능 하지만 일반적이 지 않은 이기도 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-349">A binding reference using  or <xref:System.Windows.Data.Binding> is also possible, but uncommon.</span></span>  
  
<a name="dependencyPropertyInfo_FocusVisualStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="f706a-350">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="f706a-350">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="f706a-351">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="f706a-351">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.FocusVisualStyleProperty>|  
|<span data-ttu-id="f706a-352">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="f706a-352">Metadata properties set to `true`</span></span>|<span data-ttu-id="f706a-353">없음</span><span class="sxs-lookup"><span data-stu-id="f706a-353">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusVisualStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusVisualStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.FocusVisualStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusVisualStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusVisualStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusVisualStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.FocusVisualStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-354">
            <see cref="P:System.Windows.FrameworkContentElement.FocusVisualStyle" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-354">Identifies the <see cref="P:System.Windows.FrameworkContentElement.FocusVisualStyle" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceCursor">
      <MemberSignature Language="C#" Value="public bool ForceCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ForceCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.ForceCursor" />
      <MemberSignature Language="VB.NET" Value="Public Property ForceCursor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ForceCursor { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ForceCursor : bool with get, set" Usage="System.Windows.FrameworkContentElement.ForceCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-355">이 <see cref="T:System.Windows.FrameworkContentElement" />가 이 인스턴스의 <see cref="P:System.Windows.FrameworkContentElement.Cursor" /> 속성에서 선언된 커서를 렌더링하도록 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]에 명령할 것인지를 나타내는 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-355">Gets or sets a value indicating whether this <see cref="T:System.Windows.FrameworkContentElement" /> should force the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] to render the cursor as declared by this instance's <see cref="P:System.Windows.FrameworkContentElement.Cursor" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f706a-356">이 요소 위에 있을 때 커서에 대한 이 인스턴스의 설정(모든 자식 요소 포함)을 사용하여 커서가 표시되도록 하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-356">
              <see langword="true" /> to force cursor presentation while over this element to use this instance's setting for the cursor (including on all child elements); otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f706a-357">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-357">The default value is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-358">이 속성을 설정 `true` 자식 요소에서 설정한 커서 기본 설정이 재정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-358">Setting this property to `true` will override the cursor preferences established by child elements.</span></span> <span data-ttu-id="f706a-359">이렇게 하면 응용 프로그램에서 일반적 이므로 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 자식 요소는 커서를 지정 하려는 경우에 특히 사용자에 대해 혼동 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-359">Doing so in general application [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] might be confusing for the user, particularly if child elements are attempting to specify cursors.</span></span> <span data-ttu-id="f706a-360">설정 <xref:System.Windows.FrameworkElement.ForceCursor%2A> 컨트롤 서브클래싱 또는 합성 시나리오에 더 적합 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-360">Setting <xref:System.Windows.FrameworkElement.ForceCursor%2A> is more appropriate in control subclassing or compositing scenarios.</span></span>  
  
<a name="dependencyPropertyInfo_ForceCursor"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="f706a-361">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="f706a-361">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="f706a-362">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="f706a-362">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.ForceCursorProperty>|  
|<span data-ttu-id="f706a-363">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="f706a-363">Metadata properties set to `true`</span></span>|<span data-ttu-id="f706a-364">없음</span><span class="sxs-lookup"><span data-stu-id="f706a-364">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f706a-365">다음 예제에서는 요소 위에 있는 동안 커서를 강제로 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-365">The following example forces the cursor while over the element.</span></span>  
  
 [!code-xaml[ForceCursor#ForceCursor](~/samples/snippets/csharp/VS_Snippets_Wpf/ForceCursor/CS/default.xaml#forcecursor)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceCursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ForceCursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ForceCursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.ForceCursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ForceCursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ForceCursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ForceCursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.ForceCursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-366">
            <see cref="P:System.Windows.FrameworkContentElement.ForceCursor" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-366">Identifies the <see cref="P:System.Windows.FrameworkContentElement.ForceCursor" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpression">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression GetBindingExpression (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression GetBindingExpression(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.GetBindingExpression(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBindingExpression (dp As DependencyProperty) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ GetBindingExpression(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetBindingExpression : System.Windows.DependencyProperty -&gt; System.Windows.Data.BindingExpression" Usage="frameworkContentElement.GetBindingExpression dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="f706a-367">바인딩을 가져올 대상 <see cref="T:System.Windows.DependencyProperty" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-367">The target <see cref="T:System.Windows.DependencyProperty" /> from which to get the binding.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-368">지정된 속성의 바인딩에 대한 <see cref="T:System.Windows.Data.BindingExpression" />을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-368">Gets the <see cref="T:System.Windows.Data.BindingExpression" /> for the specified property's binding.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f706a-369">대상이 데이터 바인딩되어 있으면 <see cref="T:System.Windows.Data.BindingExpression" />을 반환하고, 그렇지 않으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-369">Returns a <see cref="T:System.Windows.Data.BindingExpression" /> if the target is data bound; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f706a-370">다음 예제에서는 속성을 쿼리하여 바인딩을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-370">The following example retrieves a binding by querying a property.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#GetBindingExpression](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#getbindingexpression)]
 [!code-vb[ContentElementsSmorgasbord#GetBindingExpression](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#getbindingexpression)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal override System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="frameworkContentElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f706a-371">시각적 부모가 없는 경우 이 요소에 대한 대체 논리 부모를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-371">Returns an alternative logical parent for this element if there is no visual parent.</span>
          </span>
          <span data-ttu-id="f706a-372">이 경우 <see cref="T:System.Windows.FrameworkContentElement" /> 부모는 항상 <see cref="P:System.Windows.FrameworkContentElement.Parent" /> 속성과 동일한 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-372">In this case, a <see cref="T:System.Windows.FrameworkContentElement" /> parent is always the same value as the <see cref="P:System.Windows.FrameworkContentElement.Parent" /> property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f706a-373">이 메서드의 WPF 프레임워크 수준 구현에 시각적 부모가 아닌 연결이 있을 때마다 <see langword="null" /> 이외의 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-373">Returns something other than <see langword="null" /> whenever a WPF framework-level implementation of this method has a non-visual parent connection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-374">기본 구현은 예상된 단일 시각적 부모를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-374">The default implementation returns the expected single visual parent.</span></span> <span data-ttu-id="f706a-375">사용자 지정 구현을 대체 부모 관계를 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-375">Custom implementations might return alternate parent relationships.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Initialized;" />
      <MemberSignature Language="F#" Value="member this.Initialized : EventHandler " Usage="member this.Initialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-376">이 <see cref="T:System.Windows.FrameworkContentElement" />가 초기화될 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-376">Occurs when this <see cref="T:System.Windows.FrameworkContentElement" /> is initialized.</span>
          </span>
          <span data-ttu-id="f706a-377">이는 <see cref="P:System.Windows.FrameworkContentElement.IsInitialized" /> 속성의 값이 <see langword="false" />(정의되지 않음)에서 <see langword="true" />로 변경되는 경우와 일치합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-377">This coincides with cases where the value of the <see cref="P:System.Windows.FrameworkContentElement.IsInitialized" /> property changes from <see langword="false" /> (or undefined) to <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-378">이 이벤트 됩니다 될 때마다 발생 합니다 <xref:System.Windows.FrameworkContentElement.EndInit%2A> 또는 <xref:System.Windows.FrameworkContentElement.OnInitialized%2A> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-378">This event will be raised whenever the <xref:System.Windows.FrameworkContentElement.EndInit%2A> or <xref:System.Windows.FrameworkContentElement.OnInitialized%2A> methods are called.</span></span> <span data-ttu-id="f706a-379">이러한 메서드 호출 수 있는 의도적으로 코드를 사용 하거나는 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 프로세스를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-379">Calls to these methods could have been made by deliberate code, or by the [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] loading process.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputScope">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputScope InputScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputScope InputScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.InputScope" />
      <MemberSignature Language="VB.NET" Value="Public Property InputScope As InputScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputScope ^ InputScope { System::Windows::Input::InputScope ^ get(); void set(System::Windows::Input::InputScope ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InputScope : System.Windows.Input.InputScope with get, set" Usage="System.Windows.FrameworkContentElement.InputScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-380">이 <see cref="T:System.Windows.FrameworkContentElement" />에서 사용하는 입력에 대한 컨텍스트를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-380">Gets or sets the context for input used by this <see cref="T:System.Windows.FrameworkContentElement" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f706a-381">대체 입력 메서드에서 입력이 해석되는 방법을 수정하는 입력 범위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-381">The input scope, which modifies how input from alternative input methods is interpreted.</span>
          </span>
          <span data-ttu-id="f706a-382">기본값은 <see langword="null" />이며, 이 값을 사용하면 명령이 기본 처리됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-382">The default value is <see langword="null" /> (which results in a default handling of commands).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-383">속성 값이 종속성 속성을 상속 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-383">This dependency property inherits property values.</span></span> <span data-ttu-id="f706a-384">자식 요소에 대 한 다른 값이 없는 경우 <xref:System.Windows.FrameworkElement.InputScope%2A> 를 통해 로컬 값 또는 스타일 설정 속성 시스템은 값을 설정할 수는 <xref:System.Windows.FrameworkElement.InputScope%2A> 이 값이 할당 된 가장 가까운 부모 요소의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-384">If there are child elements with no other value for <xref:System.Windows.FrameworkElement.InputScope%2A> established through local values or styles, the property system will set the value to be the <xref:System.Windows.FrameworkElement.InputScope%2A> value of the nearest parent element with this value assigned.</span></span>  
  
 <span data-ttu-id="f706a-385">하지만 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 구문 사용은 나열 되 고 구문적으로,이 속성 설정 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 흔하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-385">Although a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax usage is listed and is syntactically allowed, setting this property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is not common.</span></span>  
  
<a name="dependencyPropertyInfo_InputScope"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="f706a-386">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="f706a-386">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="f706a-387">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="f706a-387">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.InputScopeProperty>|  
|<span data-ttu-id="f706a-388">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="f706a-388">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputScopeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty InputScopeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty InputScopeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.InputScopeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InputScopeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ InputScopeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable InputScopeProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.InputScopeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-389">
            <see cref="P:System.Windows.FrameworkContentElement.InputScope" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-389">Identifies the <see cref="P:System.Windows.FrameworkContentElement.InputScope" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitialized : bool" Usage="System.Windows.FrameworkContentElement.IsInitialized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-390">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]로 로드하거나 해당 <see cref="M:System.Windows.FrameworkContentElement.EndInit" /> 메서드를 명시적으로 호출하여 이 요소를 초기화했는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-390">Gets a value indicating whether this element has been initialized, either by being loaded as [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], or by explicitly having its <see cref="M:System.Windows.FrameworkContentElement.EndInit" /> method called.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f706a-391">위의 로드 또는 메서드 호출을 통해 요소를 초기화했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-391">
              <see langword="true" /> if the element is initialized per the aforementioned loading or method calls; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-392">이 속성 수도 `true` 경우이 요소에 옮겨졌습니다 요소 트리 내에서 새 부모 요소에 있고 따라서 요소가 다시 로드 되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-392">This property may also be `true` if this element has been moved within the element tree such that it has a new parent element, and therefore becomes reloaded again.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkContentElement.BeginInit" />
      </Docs>
    </Member>
    <Member MemberName="IsLoaded">
      <MemberSignature Language="C#" Value="public bool IsLoaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoaded" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.IsLoaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoaded { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLoaded : bool" Usage="System.Windows.FrameworkContentElement.IsLoaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-393">표시를 위해 이 요소를 로드했는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-393">Gets a value indicating whether this element has been loaded for presentation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f706a-394">현재 요소가 요소 트리에 연결되어 있으며 렌더링되었으면 <see langword="true" />이고, 요소가 로드된 요소 트리에 연결되지 않았으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-394">
              <see langword="true" /> if the current element is attached to an element tree and has been rendered; <see langword="false" /> if the element has never been attached to a loaded element tree.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-395">새로 생성 된 인스턴스에서이 속성 설정을 시작할 `false`를 그대로 유지 됩니다 `true` 로 설정 되 면 `true`이후에 코드에서 제거 하는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-395">From a newly constructed instance, this property starts off `false`, and remains `true` once it is set to `true`, even if subsequently removed by  code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f706a-396">다음 예제 코드를 사용 하 여 <xref:System.Windows.FrameworkContentElement.IsLoaded%2A> 함수를 보증할 수 조건 검사 `displayData` (표시 되지 않음)는 유효한 요소를 로드 페이지의 요청 시 처리기의 일부로 작동할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-396">The following example code uses <xref:System.Windows.FrameworkContentElement.IsLoaded%2A> as a conditional check to assure that a function `displayData` (not shown) will have valid elements loaded on the page to work against, as part of an on-demand handler.</span></span> <span data-ttu-id="f706a-397">동일한 논리에 대 한 이벤트 처리기로 실행 되는 <xref:System.Windows.FrameworkContentElement.Loaded>합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-397">That same logic is run as an event handler for <xref:System.Windows.FrameworkContentElement.Loaded>.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#IsLoaded](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#isloaded)]
 [!code-vb[ContentElementsSmorgasbord#IsLoaded](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#isloaded)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkContentElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.XmlLanguage Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.XmlLanguage Language" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::XmlLanguage ^ Language { System::Windows::Markup::XmlLanguage ^ get(); void set(System::Windows::Markup::XmlLanguage ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Language : System.Windows.Markup.XmlLanguage with get, set" Usage="System.Windows.FrameworkContentElement.Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-398">개별 요소에 적용되는 지역화/전역화 언어 정보를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-398">Gets or sets localization/globalization language information that applies to an individual element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f706a-399">이 요소에 대한 문화권 정보입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-399">The culture information for this element.</span>
          </span>
          <span data-ttu-id="f706a-400">기본값은 해당 <see cref="T:System.Windows.Markup.XmlLanguage" /> 값이 "en-US" 문자열로 설정된 <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-400">The default value is an <see cref="T:System.Windows.Markup.XmlLanguage" /> instance with its <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> value set to the string "en-US".</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-401">RFC 3066 표준을 수행 하는 문자열 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-401">The string formats follow the RFC 3066 standard.</span></span> <span data-ttu-id="f706a-402">예를 들어, 미국 영어는 "EN-US"입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-402">For example, U.S. English is "en-US".</span></span> <span data-ttu-id="f706a-403">참조 <xref:System.Windows.Markup.XmlLanguage> 값 및 형식에 대 한 자세한 내용은 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-403">See <xref:System.Windows.Markup.XmlLanguage> for more information on the values and format.</span></span>  
  
 <span data-ttu-id="f706a-404">속성 값이 종속성 속성을 상속 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-404">This dependency property inherits property values.</span></span> <span data-ttu-id="f706a-405">자식 요소에 대 한 다른 값이 없는 경우 <xref:System.Windows.FrameworkElement.Language%2A> 를 통해 로컬 값 또는 스타일 설정 속성 시스템은 값을 설정할 수는 <xref:System.Windows.FrameworkElement.Language%2A> 이 값이 할당 된 가장 가까운 부모 요소의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-405">If there are child elements with no other value for <xref:System.Windows.FrameworkElement.Language%2A> established through local values or styles, the property system will set the value to be the <xref:System.Windows.FrameworkElement.Language%2A> value of the nearest parent element with this value assigned.</span></span>  
  
<a name="dependencyPropertyInfo_CultureInfo"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="f706a-406">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="f706a-406">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="f706a-407">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="f706a-407">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.LanguageProperty>|  
|<span data-ttu-id="f706a-408">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="f706a-408">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LanguageProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LanguageProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LanguageProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.LanguageProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LanguageProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LanguageProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LanguageProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.LanguageProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-409">
            <see cref="P:System.Windows.FrameworkContentElement.Language" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-409">Identifies the <see cref="P:System.Windows.FrameworkContentElement.Language" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Loaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Loaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Loaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Loaded;" />
      <MemberSignature Language="F#" Value="member this.Loaded : System.Windows.RoutedEventHandler " Usage="member this.Loaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-410">요소를 배치하고 렌더링하여 상호 작용할 준비가 되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-410">Occurs when the element is laid out, rendered, and ready for interaction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-411">직접 라우트된 이벤트에 대 한 경로 따르지, 발생 하는 동일한 요소 내 에서만 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-411">Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</span></span> <span data-ttu-id="f706a-412">라우트된 이벤트는 라우트된 이벤트 동작은 다른 지원지 않습니다 직접: 액세스할 수 있는 처리기 컬렉션을 지원 하며으로 사용할 수는 <xref:System.Windows.EventTrigger> 스타일에서입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-412">Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.</span></span>  
  
<a name="routedEventInfo_Loaded"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="f706a-413">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="f706a-413">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="f706a-414">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="f706a-414">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.LoadedEvent>|  
|<span data-ttu-id="f706a-415">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="f706a-415">Routing strategy</span></span>|<span data-ttu-id="f706a-416">직접</span><span class="sxs-lookup"><span data-stu-id="f706a-416">Direct</span></span>|  
|<span data-ttu-id="f706a-417">대리자</span><span class="sxs-lookup"><span data-stu-id="f706a-417">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LoadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LoadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.LoadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LoadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LoadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LoadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkContentElement.LoadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-418">
            <see cref="E:System.Windows.FrameworkContentElement.Loaded" /> [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md)를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-418">Identifies the <see cref="E:System.Windows.FrameworkContentElement.Loaded" /> [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-419">이벤트 식별자 개체는 라우트된 이벤트가 등록 될 때 만들어집니다 (참조 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) 클래스 처리기를 추가 하려면 사용할 수 있습니다 (참조 <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span><span class="sxs-lookup"><span data-stu-id="f706a-419">Event identifier objects are created when routed events are registered (see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) and can then be used to add class handlers (see <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span></span> <span data-ttu-id="f706a-420">식별자 개체는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-420">Identifier objects contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal virtual System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LogicalChildren : System.Collections.IEnumerator" Usage="System.Windows.FrameworkContentElement.LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-421">이 요소의 논리적 자식 요소에 대한 열거자를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-421">Gets an enumerator for the logical child elements of this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f706a-422">이 요소의 논리적 자식 요소에 대한 열거자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-422">An enumerator for logical child elements of this element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-423">사용 하는 방법에 대 한 자세한 내용은 <xref:System.Windows.FrameworkContentElement.LogicalChildren%2A> 하 고 <xref:System.Windows.FrameworkContentElement.AddLogicalChild%2A>를 참조 하세요 [WPF의 트리](~/docs/framework/wpf/advanced/trees-in-wpf.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-423">For more information on how to use <xref:System.Windows.FrameworkContentElement.LogicalChildren%2A> and <xref:System.Windows.FrameworkContentElement.AddLogicalChild%2A>, see [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public override sealed bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="frameworkContentElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">
          <span data-ttu-id="f706a-424">포커스를 이동할 방향(열거형의 값)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-424">The direction that focus is to be moved, as a value of the enumeration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-425">키보드 포커스를 이 요소에서 다른 요소로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-425">Moves the keyboard focus from this element to another element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f706a-426">포커스가 이동되었으면 <see langword="true" /> 를 반환하고, 지정된 방향에 대상 요소가 없으면 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-426">Returns <see langword="true" /> if focus is moved successfully; <see langword="false" /> if the target element in direction as specified does not exist.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.FrameworkContentElement.Name" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IFrameworkInputElement.Name</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-427">요소를 식별하는 이름을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-427">Gets or sets the identifying name of the element.</span>
          </span>
          <span data-ttu-id="f706a-428">이 이름은 이벤트 처리기 코드 등의 프로그래밍 방식 코드 숨김 항목이 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 구문 분석 중에 생성된 요소를 참조할 수 있도록 인스턴스 참조를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-428">The name provides an instance reference so that programmatic code-behind, such as event handler code, can refer to an element once it is constructed during parsing of [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f706a-429">요소의 이름을 나타내며</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-429">The name of the element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-430">이 속성의 가장 일반적인 사용법은 지정 하는 경우는 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 태그의 요소 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-430">The most common usage of this property is when specifying a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] element name in markup.</span></span>  
  
 <span data-ttu-id="f706a-431">이 속성은 기본적으로 설정 하는 WPF 프레임 워크 수준 편의 속성을 제공 합니다 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] [X:name 지시문](~/docs/framework/xaml-services/x-name-directive.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-431">This property essentially provides a WPF framework-level convenience property to set the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] [x:Name Directive](~/docs/framework/xaml-services/x-name-directive.md).</span></span>  
  
 <span data-ttu-id="f706a-432">가져오기는 <xref:System.Windows.FrameworkContentElement.Name%2A> 코드에서 일반적이 지 이므로 코드에 적절 한 참조가 이미 있는 경우 메서드를 호출 하기만 하면 요소에서 속성 참조 및 수행 해야 일반적으로 <xref:System.Windows.FrameworkContentElement.Name%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-432">Getting a <xref:System.Windows.FrameworkContentElement.Name%2A> from code is not common, because if you have the appropriate reference in code already, you can just call methods and properties on the element reference and do not generally need the <xref:System.Windows.FrameworkContentElement.Name%2A>.</span></span> <span data-ttu-id="f706a-433">예외는 문자열에 있는 경우 일부 오버 로드 된 즉, 예를 들어에서 해당 이름을 표시 하는 데 유용 하다 면 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-433">An exception is if the string has some overloaded meaning, for instance if it is useful to display that name in [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span> <span data-ttu-id="f706a-434">설정 된 <xref:System.Windows.FrameworkContentElement.Name%2A> 코드에서 경우 원래 <xref:System.Windows.FrameworkContentElement.Name%2A> 된 태그에서 설정도 권장 되지 않습니다 및 속성을 변경 해도 개체 참조가 변경 되지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-434">Setting a <xref:System.Windows.FrameworkContentElement.Name%2A> from code if the original <xref:System.Windows.FrameworkContentElement.Name%2A> was set from markup is also not recommended, and changing the property will not change the object reference.</span></span> <span data-ttu-id="f706a-435">기본 이름 범위를 명시적으로 하는 동안 만든 경우에 이러한 개체 참조가 만들어집니다 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-435">Such object references are created only when the underlying namescopes are explicitly created during [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] loading.</span></span>  
  
 <span data-ttu-id="f706a-436">명시적으로 호출 해야 합니다 <xref:System.Windows.FrameworkContentElement.RegisterName%2A> 에 대 한 효과적인 변경 되도록는 <xref:System.Windows.FrameworkContentElement.Name%2A> 이미 로드 된 요소의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-436">You must specifically call <xref:System.Windows.FrameworkContentElement.RegisterName%2A> to make an effective change on the <xref:System.Windows.FrameworkContentElement.Name%2A> property of an already loaded element.</span></span>  
  
 <span data-ttu-id="f706a-437">하나 주목할 만한에서는 설정 경우 <xref:System.Windows.FrameworkContentElement.Name%2A> 코드에서 명명 요소는 스토리 보드를 실행할입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-437">One notable case where setting <xref:System.Windows.FrameworkContentElement.Name%2A> from  code is important is for naming elements that storyboards will run against.</span></span> <span data-ttu-id="f706a-438">이름을 등록할 수 있습니다, 전에를 인스턴스화할 때 할당 해야 할 수는 <xref:System.Windows.NameScope> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="f706a-438">Before you can register a name, might also need to instantiate and assign a <xref:System.Windows.NameScope> instance.</span></span> <span data-ttu-id="f706a-439">예제 섹션을 참조 하거나 [스토리 보드 개요](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-439">See the Example section, or [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).</span></span>  
  
 <span data-ttu-id="f706a-440">설정 <xref:System.Windows.FrameworkContentElement.Name%2A> 에서 코드를 응용 프로그램을 제한적 이지만 요소 이름별 조회 보다 일반적 위치 페이지 응용 프로그램에 로드 하 고 런타임에 코드를 반드시 않습니다의 코드 숨김 탐색 모델을 사용 중인 경우에 특히 해당 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-440">Setting <xref:System.Windows.FrameworkContentElement.Name%2A> from code has limited applications, but looking up an element by name is more common, particularly if you are employing a navigation model where pages reload into the application and the run-time code is not necessarily the code-behind of that respective page.</span></span> <span data-ttu-id="f706a-441">유틸리티 메서드 <xref:System.Windows.FrameworkContentElement.FindName%2A>에서 사용할 수 있는 <xref:System.Windows.FrameworkContentElement>, 모든 요소를 찾을 수 있습니다 <xref:System.Windows.FrameworkContentElement.Name%2A> 논리 트리를 재귀적으로 해당 요소에서.</span><span class="sxs-lookup"><span data-stu-id="f706a-441">The utility method <xref:System.Windows.FrameworkContentElement.FindName%2A>, which is available from any <xref:System.Windows.FrameworkContentElement>, can find any element by <xref:System.Windows.FrameworkContentElement.Name%2A> in that element's logical tree recursively.</span></span> <span data-ttu-id="f706a-442">사용할 수 있습니다는 <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> 의 정적 메서드 <xref:System.Windows.LogicalTreeHelper>도 적용 되는 <xref:System.Windows.FrameworkContentElement.Name%2A> 인수로 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-442">Or you can use the <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> static method of <xref:System.Windows.LogicalTreeHelper>, which also takes the <xref:System.Windows.FrameworkContentElement.Name%2A> string as an argument.</span></span>  
  
 <span data-ttu-id="f706a-443">일반적으로 사용 되는 루트 요소 (<xref:System.Windows.Window>하십시오 <xref:System.Windows.Controls.Page> 예를 들어) 인터페이스를 구현 <xref:System.Windows.Markup.INameScope>합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-443">Commonly used root elements (<xref:System.Windows.Window>, <xref:System.Windows.Controls.Page> for example) implement the interface <xref:System.Windows.Markup.INameScope>.</span></span> <span data-ttu-id="f706a-444">이 인터페이스의 구현은 이름이 해당 범위 내에서 명확 해야 하는 적용 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-444">Implementations of this interface are expected to enforce that names be unambiguous within their scope.</span></span>  
  
<a name="dependencyPropertyInfo_Name"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="f706a-445">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="f706a-445">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="f706a-446">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="f706a-446">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.NameProperty>|  
|<span data-ttu-id="f706a-447">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="f706a-447">Metadata properties set to `true`</span></span>|<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="NameProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty NameProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty NameProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.NameProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NameProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ NameProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable NameProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.NameProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-448">
            <see cref="P:System.Windows.FrameworkContentElement.Name" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-448">Identifies the <see cref="P:System.Windows.FrameworkContentElement.Name" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuClosing (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuClosing(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuClosing (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuClosing(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkContentElement.OnContextMenuClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="f706a-449">이벤트에 대한 데이터를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-449">Provides data about the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-450">
            <see cref="E:System.Windows.FrameworkContentElement.ContextMenuClosing" /> 라우트된 이벤트가 해당 경로에서 이 클래스에 도달할 때마다 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-450">Invoked whenever the <see cref="E:System.Windows.FrameworkContentElement.ContextMenuClosing" /> routed event reaches this class in its route.</span>
          </span>
          <span data-ttu-id="f706a-451">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-451">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-452">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-452">This method has no default implementation.</span></span> <span data-ttu-id="f706a-453">이 메서드를 구현 하는 중간 클래스에서 상속 하는 경우에 기본 구현을 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-453">You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="f706a-454">이 메서드는 다소 비슷합니다 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드: 파생 된 클래스는 인스턴스 처리기 대신 클래스 처리기를 사용 하 여 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-454">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="f706a-455">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-455">In this case the matching event is a routed event.</span></span> <span data-ttu-id="f706a-456">처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 했을 수 있으므로 On \* 메서드는 구현 패턴은 라우트된 이벤트에 대 한 다른 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-456">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="f706a-457">따라서 구현을 고려해 야 할 이벤트 인수의 소스 속성을 갖습니다 (및 대부분의 경우에서에서는 이벤트가 다시 발생 하지 않아야).</span><span class="sxs-lookup"><span data-stu-id="f706a-457">Therefore, your implementation will have to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="f706a-458">서브 클래스 <xref:System.Windows.FrameworkContentElement> 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-458">Subclasses of <xref:System.Windows.FrameworkContentElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="f706a-459">하나의 잠재적인 시나리오는 이벤트의 인수를 사용 하 고 경로 줄이기 위해 처리 된 것으로 의도적으로 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-459">One potential scenario is to take the arguments of the event and deliberately mark the event as handled to shorten the route.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuOpening (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuOpening(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuOpening (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuOpening(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkContentElement.OnContextMenuOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="f706a-460">이벤트에 대한 이벤트 데이터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-460">Event data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-461">
            <see cref="E:System.Windows.FrameworkContentElement.ContextMenuOpening" /> 라우트된 이벤트가 해당 경로에서 이 클래스에 도달할 때마다 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-461">Invoked whenever the <see cref="E:System.Windows.FrameworkContentElement.ContextMenuOpening" /> routed event reaches this class in its route.</span>
          </span>
          <span data-ttu-id="f706a-462">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-462">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-463">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-463">This method has no default implementation.</span></span> <span data-ttu-id="f706a-464">이 메서드를 구현 하는 중간 클래스에서 상속 하는 경우에 여전히 base ()를 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-464">You should still call base() in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="f706a-465">이 메서드는 다소 비슷합니다 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드: 파생 된 클래스는 인스턴스 처리기 대신 클래스 처리기를 사용 하 여 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-465">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="f706a-466">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-466">In this case the matching event is a routed event.</span></span> <span data-ttu-id="f706a-467">이벤트 인수를 원본 되려면 구현 해야 하므로 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 했을 수 있으므로 On \* 메서드는 구현 패턴은 라우트된 이벤트에 대 한 다른 계정에는 속성 (및 대부분의 경우에서에서는 이벤트가 다시 발생 하지 않아야).</span><span class="sxs-lookup"><span data-stu-id="f706a-467">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will have to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="f706a-468">서브 클래스 <xref:System.Windows.FrameworkContentElement> 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-468">Subclasses of <xref:System.Windows.FrameworkContentElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="f706a-469">하나의 잠재적인 시나리오는 이벤트의 인수를 사용 하 고 경로 줄이기 위해 처리 된 것으로 의도적으로 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-469">One potential scenario is to take the arguments of the event and deliberately mark the event as handled to shorten the route.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="frameworkContentElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="f706a-470">이벤트에 대한 이벤트 데이터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-470">Event data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-471">
            <see cref="E:System.Windows.ContentElement.GotFocus" /> 이벤트에 대한 클래스 처리기입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-471">Class handler for the <see cref="E:System.Windows.ContentElement.GotFocus" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-472">이 클래스 처리기는이 요소에서 이벤트가 시작 된 경우이 요소에 적절 한 포커스 동작을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-472">This class handler sets appropriate focus behavior on this element if the event originated from this element.</span></span> <span data-ttu-id="f706a-473">이벤트의 원본에 트리의 다른 요소 되었으면 처리기 일은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-473">If the event's source was another element in the tree, the handler does nothing.</span></span>  
  
 <span data-ttu-id="f706a-474">이러한 기본 요소에 포커스 동작을 변경 하려면이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-474">Override this method in order to change these default focusing behavior on your element.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInitialized">
      <MemberSignature Language="C#" Value="protected virtual void OnInitialized (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitialized(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnInitialized(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInitialized (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInitialized(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInitialized : EventArgs -&gt; unit&#xA;override this.OnInitialized : EventArgs -&gt; unit" Usage="frameworkContentElement.OnInitialized e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="f706a-475">이벤트에 대한 이벤트 데이터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-475">Event data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-476">
            <see cref="E:System.Windows.FrameworkContentElement.Initialized" /> 이벤트를 발생시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-476">Raises the <see cref="E:System.Windows.FrameworkContentElement.Initialized" /> event.</span>
          </span>
          <span data-ttu-id="f706a-477">이 메서드는 <see cref="P:System.Windows.FrameworkContentElement.IsInitialized" />가 <see langword="true" />로 설정될 때마다 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-477">This method is invoked whenever <see cref="P:System.Windows.FrameworkContentElement.IsInitialized" /> is set to <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-478">이 가상 메서드의 기본 구현은이 항목의 앞부분에 설명 된 대로 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-478">The default implementation of this virtual method raises the event as described earlier in this topic.</span></span> <span data-ttu-id="f706a-479">재정의이 동작을 유지 하려면 base ()를 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-479">Overrides should call base() to preserve this behavior.</span></span>  
  
 <span data-ttu-id="f706a-480"><xref:System.Windows.FrameworkContentElement.IsInitialized%2A> 속성은 읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-480">Note that the <xref:System.Windows.FrameworkContentElement.IsInitialized%2A> property is read-only.</span></span> <span data-ttu-id="f706a-481">따라서 이렇게 초기화 동작을 강제 적용 되도록 설정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-481">Therefore, you cannot set it to force initialization behavior that way.</span></span> <span data-ttu-id="f706a-482">초기화 설정은 에서만 수행 해야 하는 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 프레임 워크입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-482">Initialization setting is intended to be done only by the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected override void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="frameworkContentElement.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="f706a-483">기존 값 및 새 값을 포함하여 변경된 속성을 설명하는 이벤트 데이터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-483">The event data that describes the property that changed, including the old and new values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-484">이 <see cref="T:System.Windows.FrameworkContentElement" />에서 종속성 속성의 유효 값이 업데이트될 때마다 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-484">Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkContentElement" /> has been updated.</span>
          </span>
          <span data-ttu-id="f706a-485">변경된 특정 종속성 속성이 인수 매개 변수에서 보고됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-485">The specific dependency property that changed is reported in the arguments parameter.</span>
          </span>
          <span data-ttu-id="f706a-486">
            <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />를 재정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-486">Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-487">일반적으로 속성 변경 내용 또는 무효화를 검색 하려면이 메서드를 사용 하는 것이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-487">This method is not intended to generally detect property changes or invalidations.</span></span> <span data-ttu-id="f706a-488">대신 것은 일반적인 무효화 패턴의 수정에 대 한 속성의 광범위 한 분류에 대 한 특정 정보가 알려져 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="f706a-488">It is instead intended for modifications of the general invalidation pattern if certain information is known about wide classifications of properties.</span></span>  
  
 <span data-ttu-id="f706a-489">이 메서드 개체의 수명 동안 여러 번 호출 될 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-489">This method is potentially invoked many times during the life of an object.</span></span> <span data-ttu-id="f706a-490">따라서 특정 속성의 메타 데이터를 무시 하 고 다음 연결 성능을 높일 수 있습니다 <xref:System.Windows.CoerceValueCallback> 또는 <xref:System.Windows.PropertyChangedCallback> 개별 속성에 대 한 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-490">Therefore, you can achieve better performance if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties.</span></span> <span data-ttu-id="f706a-491">하지만 경우이 메서드를 사용 하는를 <xref:System.Windows.FrameworkContentElement> 많은 값을 상호 연관 된 종속성 속성을 포함 하는 렌더링 동작을 다시 실행 해야 다양 한 관련 속성 무효화의 경우와 같은 논리를 포함 하는 경우 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-491">However, you would use this method if a <xref:System.Windows.FrameworkContentElement> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</span></span>  
  
 <span data-ttu-id="f706a-492">점이 동일 하 게 명명 된 `OnPropertyChanged` 다른 시그니처가 있는 메서드 (매개 변수 형식은 <xref:System.ComponentModel.PropertyChangedEventArgs>)는 다양 한 클래스에 나타날 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-492">Note that there is an identically named `OnPropertyChanged` method with a different signature (the parameter type is <xref:System.ComponentModel.PropertyChangedEventArgs>) that can appear on a number of classes.</span></span> <span data-ttu-id="f706a-493">있는지 `OnPropertyChanged` 데이터 개체 알림에 사용 되 고 계약의 일부인 <xref:System.ComponentModel.INotifyPropertyChanged>합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-493">That `OnPropertyChanged` is used for data object notifications, and is part of the contract for <xref:System.ComponentModel.INotifyPropertyChanged>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="f706a-494">
            <para>구현에서 첫 번째 작업으로 기본 구현에서는 항상 호출 합니다. 이렇게 하지 않으면 전체 없게 되므로 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 속성 시스템에 잘못 된 값을 보고 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-494">
              <para>Always call the base implementation, as the first operation in your implementation. Failure to do this will significantly disable the entire [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system, which causes incorrect values to be reported.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStyleChanged (System.Windows.Style oldStyle, System.Windows.Style newStyle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStyleChanged(class System.Windows.Style oldStyle, class System.Windows.Style newStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStyleChanged (oldStyle As Style, newStyle As Style)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStyleChanged(System::Windows::Style ^ oldStyle, System::Windows::Style ^ newStyle);" />
      <MemberSignature Language="F#" Value="abstract member OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit&#xA;override this.OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit" Usage="frameworkContentElement.OnStyleChanged (oldStyle, newStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldStyle" Type="System.Windows.Style" />
        <Parameter Name="newStyle" Type="System.Windows.Style" />
      </Parameters>
      <Docs>
        <param name="oldStyle">
          <span data-ttu-id="f706a-495">이전 스타일입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-495">The old style.</span>
          </span>
        </param>
        <param name="newStyle">
          <span data-ttu-id="f706a-496">새 스타일입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-496">The new style.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-497">이 요소에서 사용 중인 스타일이 변경될 때 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-497">Invoked when the style that is in use on this element changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-498">이 메서드는 조건을 변경 하는 스타일을 나타내는 내부 플래그를 설정 하는 기본 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-498">This method has a default implementation that sets an internal flag noting the style changed condition.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="f706a-499">
            <para>항상 기본 구현을 호출, 그렇지 않으면 스타일을 적용할 수 없습니다. 파생된 클래스에는 특수 한 스타일 선택기 또는 스타일 값을 캐시 하는 경우이 메서드를 재정의 하는 것에 대 한 시나리오 포함 될 수 있습니다. 테마 변경은 잠재적으로이 메서드를 호출 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-499">
              <para>Always call the base implementation, otherwise styles cannot be applied. Scenarios for overriding this method might include if your derived class has a specialized style selector, or caches style values. Theme changes will potentially invoke this method.</para>
            </span>
          </span>
        </block>
        <altmember cref="P:System.Windows.FrameworkContentElement.Style" />
      </Docs>
    </Member>
    <Member MemberName="OnToolTipClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipClosing (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipClosing(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipClosing (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipClosing(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkContentElement.OnToolTipClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="f706a-500">이벤트에 대한 데이터를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-500">Provides data about the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-501">
            <see cref="E:System.Windows.FrameworkContentElement.ToolTipClosing" /> 라우트된 이벤트가 해당 경로에서 이 클래스에 도달할 때마다 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-501">Invoked whenever the <see cref="E:System.Windows.FrameworkContentElement.ToolTipClosing" /> routed event reaches this class in its route.</span>
          </span>
          <span data-ttu-id="f706a-502">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-502">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-503">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-503">This method has no default implementation.</span></span> <span data-ttu-id="f706a-504">이 메서드를 구현 하는 중간 클래스에서 상속 하는 경우에 여전히 base ()를 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-504">You should still call base() in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="f706a-505">이 메서드는 다소 비슷합니다 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드: 파생 된 클래스는 인스턴스 처리기 대신 클래스 처리기를 사용 하 여 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-505">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="f706a-506">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-506">In this case the matching event is a routed event.</span></span> <span data-ttu-id="f706a-507">이벤트 인수를 원본 되려면 구현 해야 하므로 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 했을 수 있으므로 On \* 메서드는 구현 패턴은 라우트된 이벤트에 대 한 다른 계정에는 속성 (및 대부분의 경우에서에서는 이벤트가 다시 발생 하지 않아야).</span><span class="sxs-lookup"><span data-stu-id="f706a-507">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will have to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="f706a-508">서브 클래스 <xref:System.Windows.FrameworkContentElement> 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-508">Subclasses of <xref:System.Windows.FrameworkContentElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="f706a-509">하나의 잠재적인 시나리오는 이벤트의 인수를 사용 하 고 경로 줄이기 위해 처리 된 것으로 의도적으로 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-509">One potential scenario is to take the arguments of the event and deliberately mark the event as handled to shorten the route.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipOpening (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipOpening(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipOpening (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipOpening(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkContentElement.OnToolTipOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="f706a-510">이벤트에 대한 데이터를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-510">Provides data about the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-511">
            <see cref="E:System.Windows.FrameworkContentElement.ToolTipOpening" /> 라우트된 이벤트가 해당 경로에서 이 클래스에 도달할 때마다 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-511">Invoked whenever the <see cref="E:System.Windows.FrameworkContentElement.ToolTipOpening" /> routed event reaches this class in its route.</span>
          </span>
          <span data-ttu-id="f706a-512">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-512">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-513">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-513">This method has no default implementation.</span></span> <span data-ttu-id="f706a-514">이 메서드를 구현 하는 중간 클래스에서 상속 하는 경우에 여전히 base ()를 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-514">You should still call base() in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="f706a-515">이 메서드는 다소 비슷합니다 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드: 파생 된 클래스는 인스턴스 처리기 대신 클래스 처리기를 사용 하 여 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-515">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="f706a-516">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-516">In this case the matching event is a routed event.</span></span> <span data-ttu-id="f706a-517">이벤트 인수를 원본 되려면 구현 해야 하므로 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 했을 수 있으므로 On \* 메서드는 구현 패턴은 라우트된 이벤트에 대 한 다른 계정에는 속성 (및 대부분의 경우에서에서는 이벤트가 다시 발생 하지 않아야).</span><span class="sxs-lookup"><span data-stu-id="f706a-517">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="f706a-518">서브 클래스 <xref:System.Windows.FrameworkContentElement> 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-518">Subclasses of <xref:System.Windows.FrameworkContentElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="f706a-519">하나의 잠재적인 시나리오는 이벤트의 인수를 사용 하 고 경로 줄이기 위해 처리 된 것으로 의도적으로 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-519">One potential scenario is to take the arguments of the event and deliberately mark the event as handled to shorten the route.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyle">
      <MemberSignature Language="C#" Value="public bool OverridesDefaultStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesDefaultStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.OverridesDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesDefaultStyle As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesDefaultStyle { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OverridesDefaultStyle : bool with get, set" Usage="System.Windows.FrameworkContentElement.OverridesDefaultStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-520">이 요소가 테마 스타일에서 스타일 속성을 통합하는지 여부를 나타내는 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-520">Gets or sets a value indicating whether this element incorporates style properties from theme styles.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f706a-521">이 요소가 테마 스타일 속성을 사용하지 않으면 <see langword="true" />입니다. 이 경우 스타일에서 생성되는 모든 속성은 로컬 응용 프로그램 스타일에서 가져오며, 테마 스타일 속성은 적용되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-521">
              <see langword="true" /> if this element does not use theme style properties; all style-originating properties come from local application styles, and theme style properties do not apply.</span>
          </span>
          <span data-ttu-id="f706a-522">응용 프로그램 스타일이 먼저 적용된 다음 응용 프로그램 스타일에 구체적으로 설정되어 있지 않은 속성에 대해 테마 스타일이 적용되면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-522">
              <see langword="false" /> if application styles apply first, and then theme styles apply for properties that were not specifically set in application styles.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-523">이 속성의 가장 일반적인 사용법은 테마가 지정 된 스타일을 제공 하는 스타일의 setter 내에서 간접적으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-523">The most common usage of this property is an indirect usage within the setter of a style that is supplying a themed style.</span></span>  
  
<a name="dependencyPropertyInfo_OverridesDefaultStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="f706a-524">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="f706a-524">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="f706a-525">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="f706a-525">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.OverridesDefaultStyleProperty>|  
|<span data-ttu-id="f706a-526">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="f706a-526">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkContentElement.DefaultStyleKey" />
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OverridesDefaultStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OverridesDefaultStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.OverridesDefaultStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OverridesDefaultStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OverridesDefaultStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OverridesDefaultStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.OverridesDefaultStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-527">
            <see cref="P:System.Windows.FrameworkContentElement.OverridesDefaultStyle" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-527">Identifies the <see cref="P:System.Windows.FrameworkContentElement.OverridesDefaultStyle" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ Parent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkContentElement.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-528">논리적 트리에서 이 요소의 부모를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-528">Gets the parent in the logical tree for this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f706a-529">이 요소의 논리적 부모입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-529">The logical parent for this element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-530">요소의 논리적 부모 응용 프로그램 기능에 따라 변경 될 수 있습니다 하 고이 속성의 값을 유지 하면 해당 변경 내용이 반영 되지 note 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-530">Note that the logical parent of an element can potentially change depending on your application functionality, and keeping the value of this property will not reflect that change.</span></span> <span data-ttu-id="f706a-531">필요한 직전에 일반적으로 값을 가져옵니다 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-531">You typically should get the value immediately before you need it.</span></span>  
  
 <span data-ttu-id="f706a-532">참조 [WPF의 트리](~/docs/framework/wpf/advanced/trees-in-wpf.md) 요소 검색에이 방식을 사용 하는 것이 적절 한 시나리오 및 논리 트리 순회에 대 한 자세한 내용은 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-532">See [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md) for more information about traversing logical trees, and the scenarios where taking this approach towards element discovery is appropriate.</span></span>  
  
 <span data-ttu-id="f706a-533">속성 시스템에서는 다시 계산할 수 요소의 모든 속성 값, 부모가 때 일부 속성 논리 트리를 통해 값을 상속 하기 때문에 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-533">The property system will potentially recalculate all property values of an element when it is reparented, because some properties inherit values through the logical tree.</span></span> <span data-ttu-id="f706a-534"><xref:System.Windows.FrameworkContentElement.DataContext%2A> 적용 되는 바인딩 요소는 부모를 재지정할 경우 변경할 수도 있습니다에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-534">The <xref:System.Windows.FrameworkContentElement.DataContext%2A> that applies for bindings can also change when elements are reparented.</span></span>  
  
 <span data-ttu-id="f706a-535">요소의 부모는 일반적으로을 통해 변경할 컬렉션 조작, 전용을 사용 하 여 추가 또는 제거 메서드 또는 요소의 콘텐츠 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-535">Changing an element's parent is typically only done through manipulation of collections, by using dedicated add or remove methods, or through setting content properties of elements.</span></span>  
  
 <span data-ttu-id="f706a-536">사용에 대 한 가장 일반적인 시나리오는 <xref:System.Windows.FrameworkContentElement.Parent%2A> 참조를 가져온 다음 가져온 후 다양 한 속성이 <xref:System.Windows.FrameworkContentElement> 부모 개체에서 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-536">The most typical scenario for using the <xref:System.Windows.FrameworkContentElement.Parent%2A> property is to obtain a reference and then get various <xref:System.Windows.FrameworkContentElement> property values from the parent.</span></span> <span data-ttu-id="f706a-537">템플릿에 대해서는 <xref:System.Windows.FrameworkContentElement.Parent%2A> 템플릿의 결국 됩니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-537">For templates, the <xref:System.Windows.FrameworkContentElement.Parent%2A> of the template eventually will be `null`.</span></span> <span data-ttu-id="f706a-538">이 지점을 벗어나 템플릿을 실제로 적용 되는 논리 트리로 확장을 사용 하 여 <xref:System.Windows.FrameworkContentElement.TemplatedParent%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-538">To get past this point and extend into the logical tree where the template is actually applied, use <xref:System.Windows.FrameworkContentElement.TemplatedParent%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f706a-539">다음 예제에서는 확인 여부를 합니다 <xref:System.Windows.FrameworkContentElement.Parent%2A> 의 <xref:System.Windows.Documents.TextPointer> 특정 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-539">The following example checks to see whether the <xref:System.Windows.FrameworkContentElement.Parent%2A> of a <xref:System.Windows.Documents.TextPointer> is of a particular type.</span></span>  
  
 [!code-csharp[TextPointer_snippets#FCEParent](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#fceparent)]
 [!code-vb[TextPointer_snippets#FCEParent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#fceparent)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkContentElement.TemplatedParent" />
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public override sealed System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="frameworkContentElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">
          <span data-ttu-id="f706a-540">예상 포커스 변경을 결정할 방향입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-540">The direction for which a prospective focus change should be determined.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-541">제공된 포커스 이동 방향에 대해 이 요소를 기준으로 포커스를 받을 다음 요소를 결정하며 실제로 포커스를 이동하지는 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-541">Determines the next element that would receive focus relative to this element for a provided focus movement direction, but does not actually move the focus.</span>
          </span>
          <span data-ttu-id="f706a-542">이 메서드는 봉인되어 있으며 재정의할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-542">This method is sealed and cannot be overridden.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f706a-543">포커스를 실제로 이동하면 포커스가 이동할 다음 요소입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-543">The next element that focus would move to if focus were actually traversed.</span>
          </span>
          <span data-ttu-id="f706a-544">제공된 방향에 대해 이 요소를 기준으로 포커스를 이동할 수 없는 경우 <see langword="null" />이 반환될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-544">May return <see langword="null" /> if focus cannot be moved relative to this element for the provided direction.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-545"><xref:System.Windows.FrameworkContentElement.MoveFocus%2A> 실제로 포커스를 이동 하는 관련된 방법이입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-545"><xref:System.Windows.FrameworkContentElement.MoveFocus%2A> is the related method that actually does move focus.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="f706a-546">
            <see cref="T:System.Windows.Input.TraversalRequest" />에서 <see cref="F:System.Windows.Input.FocusNavigationDirection.Next" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.First" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Last" /> 중 한 방향을 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-546">Specified one of the following directions in the <see cref="T:System.Windows.Input.TraversalRequest" />: <see cref="F:System.Windows.Input.FocusNavigationDirection.Next" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.First" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Last" />.</span>
          </span>
          <span data-ttu-id="f706a-547">이러한 방향은 <see cref="M:System.Windows.FrameworkContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />에 사용할 수 없지만 <see cref="M:System.Windows.FrameworkContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />에는 사용할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-547">These directions are not legal for <see cref="M:System.Windows.FrameworkContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> (but they are legal for <see cref="M:System.Windows.FrameworkContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />).</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="member this.RegisterName : string * obj -&gt; unit" Usage="frameworkContentElement.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="f706a-548">지정된 이름-개체 매핑에 사용할 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-548">Name to use for the specified name-object mapping.</span>
          </span>
        </param>
        <param name="scopedElement">
          <span data-ttu-id="f706a-549">매핑을 위한 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-549">Object for the mapping.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-550">
            <see cref="T:System.Windows.NameScope" /> 등록 메서드에 대한 액세스를 간소화하는 접근자를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-550">Provides an accessor that simplifies access to the <see cref="T:System.Windows.NameScope" /> registration method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-551">이 메서드는 호출에 대 한 편의 메서드 <xref:System.Windows.NameScope.RegisterName%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-551">This method is a convenience method for calling <xref:System.Windows.NameScope.RegisterName%2A>.</span></span> <span data-ttu-id="f706a-552">구현은 해당 발견할 때까지 부모 요소로 라우트됩니다 확인 됩니다 <xref:System.Windows.NameScope> 를 구현 하는 요소를 검색 하 여 액세스할 수 있는 구현 <xref:System.Windows.Markup.INameScope>합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-552">The implementation will check successive parent elements until it finds the applicable <xref:System.Windows.NameScope> implementation, which is found by finding an element that implements <xref:System.Windows.Markup.INameScope>.</span></span> <span data-ttu-id="f706a-553">이름 범위에 대 한 자세한 내용은 참조 하세요. [WPF XAML 이름 범위](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-553">For more information about namescopes, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).</span></span>  
  
 <span data-ttu-id="f706a-554">호출 <xref:System.Windows.FrameworkContentElement.RegisterName%2A> 코드에서 만들 때 응용 프로그램에 대 한 애니메이션 스토리 보드를 올바르게 연결 하기 위해 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-554">Calling <xref:System.Windows.FrameworkContentElement.RegisterName%2A> is necessary in order to correctly hook up animation storyboards for applications when created in code.</span></span> <span data-ttu-id="f706a-555">Storyboard 속성 키 중 하나 이므로 <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>, 런타임 이름 조회를 사용 하 여 대상 요소에 대 한 참조를 수행할 수 있게 되는 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-555">This is because one of the key storyboard properties, <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>, uses a run-time name lookup instead of being able to take a reference to a target element.</span></span> <span data-ttu-id="f706a-556">해당 요소는 코드에서 참조 하 여 액세스할 수 있는 경우에 마찬가지입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-556">This is true even if that element is accessible by reference from the code.</span></span> <span data-ttu-id="f706a-557">스토리 보드 대상에 대 한 이름을 등록 해야 하는 이유는 무엇에 대 한 자세한 내용은 참조 하세요. [스토리 보드 개요](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-557">For more information on why you need to register names for storyboard targets, see [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).</span></span> <span data-ttu-id="f706a-558">콘텐츠 요소에 대 한 애니메이션은 애니메이션 컨트롤에 대해 보다는 덜 일반적인 합니다 [스토리 보드 개요](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md) 제어 시나리오에 중점적으로 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-558">Animations for content elements are less common than animations on controls, the [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md) concentrates on control scenarios.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkContentElement.UnregisterName(System.String)" />
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="RemoveLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void RemoveLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RemoveLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.RemoveLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RemoveLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RemoveLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.RemoveLogicalChild : obj -&gt; unit" Usage="frameworkContentElement.RemoveLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child">
          <span data-ttu-id="f706a-559">제거할 요소입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-559">The element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-560">지정된 요소를 이 요소의 논리적 트리에서 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-560">Removes the specified element from the logical tree for this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-561">이 [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] 자식 컬렉션에 대 한 지원을 추가 하는 경우 시나리오의 경우 파생 된 클래스에 대 한 주로 관련 된 내용을 다룹니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-561">This [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] is mainly relevant for class deriving scenarios, when adding support for child collections.</span></span>  
  
 <span data-ttu-id="f706a-562">대부분 <xref:System.Windows.FrameworkContentElement> 포함 담당 하는 전용된 컬렉션을 노출 하는 파생된 클래스 (예를 들어 <xref:System.Windows.Documents.Span.Inlines%2A> 에 <xref:System.Windows.Documents.Span> 클래스 <xref:System.Windows.Documents.Section.Blocks%2A> 에 <xref:System.Windows.Documents.Section> 클래스).</span><span class="sxs-lookup"><span data-stu-id="f706a-562">Most <xref:System.Windows.FrameworkContentElement> derived classes expose dedicated collections that are responsible for containment (for example, <xref:System.Windows.Documents.Span.Inlines%2A> on the <xref:System.Windows.Documents.Span> class; <xref:System.Windows.Documents.Section.Blocks%2A> on the <xref:System.Windows.Documents.Section> class).</span></span> <span data-ttu-id="f706a-563">일반적으로 이러한 클래스에서 파생 되는 논리적 트리를 직접 조작할 필요가 방지할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-563">Deriving from such classes typically can avoid any need to manipulate the logical tree directly.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.LogicalTreeHelper" />
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Windows.ResourceDictionary Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ResourceDictionary Resources" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.Resources" />
      <MemberSignature Language="VB.NET" Value="Public Property Resources As ResourceDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResourceDictionary ^ Resources { System::Windows::ResourceDictionary ^ get(); void set(System::Windows::ResourceDictionary ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Resources : System.Windows.ResourceDictionary with get, set" Usage="System.Windows.FrameworkContentElement.Resources" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ResourceDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-564">현재 로컬로 정의된 리소스 사전을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-564">Gets or sets the current locally-defined resource dictionary.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f706a-565">현재 로컬로 정의된 리소스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-565">The current locally-defined resources.</span>
          </span>
          <span data-ttu-id="f706a-566">이 사전은 리소스 사전으로, 키를 사용하여 사전 내의 리소스에 액세스합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-566">This is a dictionary of resources, where resources within the dictionary are accessed by key.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-567">완전히 또는 부분적으로 정의할 수 있는 리소스가 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 속성 요소로 일반적으로 생성 되 고 개별 페이지 또는 응용 프로그램의 루트 요소에는 일반적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-567">Resource dictionaries that can be defined completely or partially in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] are typically created as a property element, and are typically on the root element for any individual page or for the application.</span></span> <span data-ttu-id="f706a-568">이 수준에서 리소스 사전 배치 쉽게 페이지의 개별 자식 요소 (또는 응용 프로그램의 경우에는 페이지)를 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-568">Placing the resource dictionary at this level makes it easier to find from individual child elements in the page (or from any page, in the application case).</span></span> <span data-ttu-id="f706a-569">대부분의 응용 프로그램 시나리오에서 스타일 리소스 사전 내의 개체 요소로 정의 되어 권장 또는 전체 스타일 리소스는 자체 포함 될 수 있도록 외부 리소스로 정의 됩니다 (이 통해 별도 디자이너 책임을 편집 해야 하는 물리적 파일을 구분 하 여 개발자의 책임).</span><span class="sxs-lookup"><span data-stu-id="f706a-569">In most application scenarios, we recommend that styles be defined as object elements within a resource dictionary, or be defined as external resources so that the entire style resource can be self-contained (this approach helps separate designer responsibilities from developer responsibilities by separating the physical files that need to be edited).</span></span>  
  
 <span data-ttu-id="f706a-570">이 속성 요소 내에서 직접 선언 된 리소스 사전만 반환 하는 참고 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-570">Note that this property returns only the resource dictionary declared directly within that element.</span></span> <span data-ttu-id="f706a-571">이 자식 요소를 위쪽으로 재귀적으로 검색 각 부모 요소에 정의 된 리소스를 액세스할 수 있는 실제 리소스 조회 프로세스와 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-571">This is different than the actual resource lookup process, where a child element can access any of the resources defined in each parent element, searching recursively upwards.</span></span>  
  
 <span data-ttu-id="f706a-572">리소스의 리소스 만들어졌는지 수 있지만 컬렉션 내에서 코드에 의해 참조 될 수도 있습니다 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 확실 하 게 액세스할 수 없게 됩니다까지 후 <xref:System.Windows.FrameworkContentElement.Loaded> 사전을 선언 하는 요소에 의해 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-572">Resources can also be referenced by code from within the collection, but be aware that resources created in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] will definitely not be accessible until after <xref:System.Windows.FrameworkContentElement.Loaded> is raised by the element that declares the dictionary.</span></span> <span data-ttu-id="f706a-573">리소스의 비동기적으로 구문 분석 되 고 있지도 실제로 <xref:System.Windows.FrameworkContentElement.Loaded> 이벤트는 참조할 수 있는 보증을 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 리소스를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-573">In fact, resources are parsed asynchronously, and not even the <xref:System.Windows.FrameworkContentElement.Loaded> event is an assurance that you can reference a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] defined resource.</span></span> <span data-ttu-id="f706a-574">따라서 일반적으로 액세스 해야 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 정의의 일부로 런타임 코드 또는 다른 리소스 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 스타일 또는 특성 값에 대 한 리소스 확장 참조와 같은 기술입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-574">For this reason you should generally only access [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] defined resources as part of run-time code, or through other [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] techniques such as styles or resource extension references for attribute values.</span></span> <span data-ttu-id="f706a-575">코드를 통해 리소스에 액세스 하는 경우 기본적으로 한 것과 동일에서 수행 하는 참조 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-575">When you access resources through code, it is essentially equivalent to a  reference made from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 <span data-ttu-id="f706a-576">기본 <xref:System.Windows.ResourceDictionary> 추가, 제거 또는 코드를 사용 하 여 컬렉션 내에서 리소스를 쿼리 하는 데 필요한 메서드를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-576">The underlying <xref:System.Windows.ResourceDictionary> supports the methods required to add, remove, or query resources from within the collection by using code.</span></span> <span data-ttu-id="f706a-577">합니다 <xref:System.Windows.FrameworkContentElement.Resources%2A> 속성을 완전히 새로운 또는 다른 요소의 리소스 컬렉션을 교체 하는 시나리오를 지원 하기 위해 설정할 수 <xref:System.Windows.ResourceDictionary>입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-577">The <xref:System.Windows.FrameworkContentElement.Resources%2A> property is settable to support the scenario of completely replacing the resources collection of an element to be a new or different <xref:System.Windows.ResourceDictionary>.</span></span>  
  
 <span data-ttu-id="f706a-578">에 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 표시 된 구문에 대 한 요소가 포함 되지 않습니다는 <xref:System.Windows.ResourceDictionary>합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-578">Notice that the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax shown does not include an element for the <xref:System.Windows.ResourceDictionary>.</span></span> <span data-ttu-id="f706a-579">이 한 예로 암시적 컬렉션 구문을 사용 합니다. 컬렉션 요소를 나타내는 태그를 생략할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-579">This is an example of implicit collection syntax; a tag representing the collection element can be omitted.</span></span> <span data-ttu-id="f706a-580">항목 컬렉션에 추가 된 요소 대신 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-580">The elements that are added as items to the collection are specified instead.</span></span> <span data-ttu-id="f706a-581">암시적 컬렉션에 대 한 자세한 내용은 및 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]를 참조 하세요 [XAML 구문 정보](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-581">For more information about implicit collections and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], see [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).</span></span> <span data-ttu-id="f706a-582">한 가지 경우 위치는 <xref:System.Windows.ResourceDictionary> 병합된 된 사전을 도입 하는 경우에서 많은 경우 일반적으로는 자식 요소가 없는 요소는 명시적으로 지정 되어 <xref:System.Windows.ResourceDictionary>입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-582">One case where a <xref:System.Windows.ResourceDictionary> is still specified explicitly as an element is if you are introducing a merged dictionary, in which case there are typically no child elements for that <xref:System.Windows.ResourceDictionary>.</span></span> <span data-ttu-id="f706a-583">자세한 내용은 참조 하세요 [리소스 사전을 병합](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md)입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-583">For details, see [Merged Resource Dictionaries](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md).</span></span>  
  
<a name="xamlPropertyElementUsage_Resources"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="f706a-584">XAML 속성 요소 사용</span><span class="sxs-lookup"><span data-stu-id="f706a-584">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Resources>  
    oneOrMoreResourceElements  
  </object.Resources>  
</object>  
```  
  
<a name="xamlValues_Resources"></a>   
## <a name="xaml-values"></a><span data-ttu-id="f706a-585">XAML 값</span><span class="sxs-lookup"><span data-stu-id="f706a-585">XAML Values</span></span>  
 <span data-ttu-id="f706a-586">*oneOrMoreResourceElements*</span><span class="sxs-lookup"><span data-stu-id="f706a-586">*oneOrMoreResourceElements*</span></span>  
 <span data-ttu-id="f706a-587">하나 이상의 개체 요소를 각각 정의 하는 리소스입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-587">One or more object elements, each of which defines a resource.</span></span> <span data-ttu-id="f706a-588">각 리소스 속성 요소에서 각 <xref:System.Windows.ResourceDictionary> 에 대 한 고유한 값을 가져야 합니다는 [X:key 지시문](~/docs/framework/xaml-services/x-key-directive.md)에서 값을 검색할 때 고유 키로 사용 되는 <xref:System.Windows.ResourceDictionary>합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-588">Each resource property element within each <xref:System.Windows.ResourceDictionary> must have a unique value for the [x:Key Directive](~/docs/framework/xaml-services/x-key-directive.md), which serves as the unique key when values are retrieved from the <xref:System.Windows.ResourceDictionary>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f706a-589">다음 예제에서는 설정 된 <xref:System.Windows.FrameworkContentElement.Resources%2A> 컬렉션에는 <xref:System.Windows.Documents.FlowDocument> 루트 요소.</span><span class="sxs-lookup"><span data-stu-id="f706a-589">The following example establishes a <xref:System.Windows.FrameworkContentElement.Resources%2A> collection on a <xref:System.Windows.Documents.FlowDocument> root element.</span></span> <span data-ttu-id="f706a-590"><xref:System.Windows.Documents.FlowDocument> 일반적인 선택은 소수의 하나 이므로 <xref:System.Windows.FrameworkContentElement> 이해 되는 루트 요소 및 리소스 클래스는 페이지 루트 또는 응용 프로그램과 같이 이러한 더 높은 수준에서 일반적으로 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-590"><xref:System.Windows.Documents.FlowDocument> is a typical choice because it is one of the few <xref:System.Windows.FrameworkContentElement> classes that make sense as a root element, and resources are generally stored at the page root or at even higher levels such as in the application.</span></span>  
  
 [!code-xaml[ContentElementsSmorgasbord#FCEResources](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page2.xaml#fceresources)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Application.Resources" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBinding">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-591">지정된 종속성 속성에 대해 이 요소에 바인딩을 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-591">Attaches a binding to this element for the specified dependency property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression SetBinding (System.Windows.DependencyProperty dp, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression SetBinding(class System.Windows.DependencyProperty dp, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.SetBinding(System.Windows.DependencyProperty,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, path As String) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * string -&gt; System.Windows.Data.BindingExpression" Usage="frameworkContentElement.SetBinding (dp, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="f706a-592">바인딩된 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-592">Identifies the bound property.</span>
          </span>
        </param>
        <param name="path">
          <span data-ttu-id="f706a-593">바인딩에 사용할 소스 속성 이름 또는 속성의 경로입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-593">The source property name or the path to the property used for the binding.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-594">데이터 소스에 대한 경로 정규화로 제공된 소스 속성 이름을 기반으로 이 요소에 바인딩을 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-594">Attaches a binding to this element, based on the provided source property name as a path qualification to the data source.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f706a-595">바인딩 상태를 기록합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-595">Records the conditions of the binding.</span>
          </span>
          <span data-ttu-id="f706a-596">이 반환 값은 오류 검사에 유용할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-596">This return value can be useful for error checking.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-597">이 메서드는 호출에 대 한 편의 메서드 <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>는 현재 인스턴스를 전달 하는 합니다 <xref:System.Windows.DependencyObject>, 새 만들고 <xref:System.Windows.Data.Binding> 제공 된 기준 `path` 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="f706a-597">This method is a convenience method for calling <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, which passes the current instance as the <xref:System.Windows.DependencyObject>, and creates a new <xref:System.Windows.Data.Binding> based on the provided `path` parameter.</span></span> <span data-ttu-id="f706a-598">이 서명은 간단한 기본 바인딩을 설정 하는 경우에 편리 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-598">This signature is more convenient if you are establishing a simple default binding.</span></span> <span data-ttu-id="f706a-599">기본이 아닌 조건에 대 한 바인딩 속성을 지정 하거나 사용 하는 경우는 <xref:System.Windows.Data.MultiBinding> 또는 <xref:System.Windows.Data.PriorityBinding>를 사용 해야는 <xref:System.Windows.FrameworkContentElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29> 서명 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-599">If you need to specify any binding properties to non-default conditions, or want to use a <xref:System.Windows.Data.MultiBinding> or <xref:System.Windows.Data.PriorityBinding>,you should use the <xref:System.Windows.FrameworkContentElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29> signature.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f706a-600">다음 예제에서 바인딩을 설정 합니다.는 <xref:System.Windows.Documents.Paragraph> 요소를 해당 개체로 설정 하 여 새 사용자 지정 데이터 개체를 만들어 <xref:System.Windows.FrameworkContentElement.DataContext%2A>, 및 그 속성에 바인딩 경로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-600">The following example sets a binding on a <xref:System.Windows.Documents.Paragraph> element, by creating a new custom data object, establishing that object as <xref:System.Windows.FrameworkContentElement.DataContext%2A>, and setting the binding path to a property within it.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#DataContext](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#datacontext)]
 [!code-vb[ContentElementsSmorgasbord#DataContext](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#datacontext)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpressionBase SetBinding (System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpressionBase SetBinding(class System.Windows.DependencyProperty dp, class System.Windows.Data.BindingBase binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, binding As BindingBase) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpressionBase ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::Windows::Data::BindingBase ^ binding);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * System.Windows.Data.BindingBase -&gt; System.Windows.Data.BindingExpressionBase" Usage="frameworkContentElement.SetBinding (dp, binding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="binding" Type="System.Windows.Data.BindingBase" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="f706a-601">바인딩된 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-601">Identifies the bound property.</span>
          </span>
        </param>
        <param name="binding">
          <span data-ttu-id="f706a-602">데이터 바인딩을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-602">Represents a data binding.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-603">제공된 바인딩 개체를 기반으로 하여 이 요소에 바인딩을 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-603">Attaches a binding to this element, based on the provided binding object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f706a-604">바인딩 상태를 기록합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-604">Records the conditions of the binding.</span>
          </span>
          <span data-ttu-id="f706a-605">이 반환 값은 오류 검사에 유용할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-605">This return value can be useful for error checking.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-606">이 메서드는 호출에 대 한 편의 메서드 <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>는 현재 인스턴스를 전달 하는 <xref:System.Windows.DependencyObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-606">This method is a convenience method for calling <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, which passes the current instance as the <xref:System.Windows.DependencyObject>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f706a-607">다음 예제에서 바인딩을 설정 합니다.는 <xref:System.Windows.Documents.Paragraph> 새 요소를 <xref:System.Windows.Data.Binding> 하 고 새로 빌드된 원본 설정 `DateTime` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-607">The following example sets a binding on a <xref:System.Windows.Documents.Paragraph> element, by creating a new <xref:System.Windows.Data.Binding> and setting the source to a newly built `DateTime` object.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#SetBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#setbinding)]
 [!code-vb[ContentElementsSmorgasbord#SetBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#setbinding)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetResourceReference">
      <MemberSignature Language="C#" Value="public void SetResourceReference (System.Windows.DependencyProperty dp, object name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResourceReference(class System.Windows.DependencyProperty dp, object name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetResourceReference (dp As DependencyProperty, name As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetResourceReference(System::Windows::DependencyProperty ^ dp, System::Object ^ name);" />
      <MemberSignature Language="F#" Value="member this.SetResourceReference : System.Windows.DependencyProperty * obj -&gt; unit" Usage="frameworkContentElement.SetResourceReference (dp, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="name" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="f706a-608">리소스가 바인딩될 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-608">The property to which the resource is bound.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="f706a-609">리소스의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-609">The name of the resource.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-610">지정된 이름으로 리소스를 검색하고 지정된 속성에 대해 해당 리소스에 리소스 참조를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-610">Searches for a resource with the specified name and sets up a resource reference to it for the specified property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-611">리소스 참조를 사용 하 여 비슷합니다는 [DynamicResource 태그 확장](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) 태그에서입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-611">A resource reference is similar to the use of a [DynamicResource Markup Extension](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) in markup.</span></span> <span data-ttu-id="f706a-612">리소스 참조를 런타임에 지연 기준으로 지정된 된 속성의 값을 제공 하는 내부 식을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-612">The resource reference creates an internal expression that supplies the value of the specified property on a run-time deferred basis.</span></span> <span data-ttu-id="f706a-613">리소스 사전 내부 이벤트를 통해 변경 된 값을 나타냅니다 때마다 또는 현재 요소의 부모를 재지정할 때마다 식을 다시 계산 됩니다 (부모 변경 사전 조회 경로 변경 됩니다).</span><span class="sxs-lookup"><span data-stu-id="f706a-613">The expression will be re-evaluated whenever the resource dictionary indicates a changed value through internal events, or whenever the current element is reparented (a parent change would change the dictionary lookup path).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkContentElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.Application.Resources" />
        <altmember cref="P:System.Windows.FrameworkElement.Resources" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeResources">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.ShouldSerializeResources" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeResources () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeResources();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeResources : unit -&gt; bool" Usage="frameworkContentElement.ShouldSerializeResources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f706a-614">serialization 프로세스에서 이 클래스의 인스턴스에 있는 <see cref="P:System.Windows.FrameworkContentElement.Resources" /> 속성의 콘텐츠를 serialize해야 하는지 여부를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-614">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkContentElement.Resources" /> property on instances of this class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f706a-615">
            <see cref="P:System.Windows.FrameworkContentElement.Resources" /> 속성 값을 serialize해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-615">
              <see langword="true" /> if the <see cref="P:System.Windows.FrameworkContentElement.Resources" /> property value should be serialized; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-616">돌아갑니다 `true` 으로 로컬에 키가 지정 된 리소스 중 적어도 하나가 <xref:System.Windows.FrameworkContentElement.Resources%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-616">This will return `true` so long as there is at least one keyed resource in the local <xref:System.Windows.FrameworkContentElement.Resources%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeStyle">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.ShouldSerializeStyle" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeStyle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeStyle();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeStyle : unit -&gt; bool" Usage="frameworkContentElement.ShouldSerializeStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f706a-617">serialization 프로세스에서 이 클래스의 인스턴스에 있는 <see cref="P:System.Windows.FrameworkContentElement.Style" /> 속성의 콘텐츠를 serialize해야 하는지 여부를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-617">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkContentElement.Style" /> property on instances of this class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f706a-618">
            <see cref="P:System.Windows.FrameworkContentElement.Style" /> 속성 값을 serialize해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-618">
              <see langword="true" /> if the <see cref="P:System.Windows.FrameworkContentElement.Style" /> property value should be serialized; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-619">돌아갑니다 `true` 경우는 <xref:System.Windows.Style> 로컬로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-619">This will return `true` if the <xref:System.Windows.Style> is locally set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.SourceUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SourceUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ SourceUpdated;" />
      <MemberSignature Language="F#" Value="member this.SourceUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.SourceUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-620">이 요소에서 바인딩에 관여되는 연결된 데이터 소스가 변경될 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-620">Occurs when any associated data source participating in a binding on this element changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-621">이 이벤트 화면을 <xref:System.Windows.Data.Binding.SourceUpdated> 이벤트에 의해 발생 하는 <xref:System.Windows.Data.Binding> 이 요소와 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-621">This event surfaces the <xref:System.Windows.Data.Binding.SourceUpdated> event that is raised by any <xref:System.Windows.Data.Binding> associated with this element.</span></span>  
  
<a name="xamlAttributeUsage_SourceUpdated"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="f706a-622">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="f706a-622">XAML Attribute Usage</span></span>  
  
```  
<object SourceUpdated="EventHandler"/>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Windows.Style Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style Style" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ Style { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Style : System.Windows.Style with get, set" Usage="System.Windows.FrameworkContentElement.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-623">이 요소에서 사용할 스타일을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-623">Gets or sets the style to be used by this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f706a-624">있는 경우 요소에 대해 적용된 기본값이 아닌 스타일입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-624">The applied, nondefault style for the element, if present.</span>
          </span>
          <span data-ttu-id="f706a-625">그렇지 않으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-625">Otherwise, <see langword="null" />.</span>
          </span>
          <span data-ttu-id="f706a-626">기본 생성된 <see cref="T:System.Windows.FrameworkContentElement" />의 기본값은 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-626">The default for a default-constructed <see cref="T:System.Windows.FrameworkContentElement" /> is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-627">현재 스타일 리소스가 페이지나 응용 프로그램 수준 (암시적 스타일)에서 해당 형식의 개체에 일반적으로 적용 되는 스타일 또는 테마에서 기본 스타일에 의해 자주 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-627">The current style is often provided by a default style from theming, or from styles generally applied to objects of that type by resources at page or application level (an implicit style).</span></span> <span data-ttu-id="f706a-628">이 속성은 설정 하거나 반환 하지 기본 (테마) 스타일 않지만 암시적 스타일 또는 명시적 스타일을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-628">This property does not set or return default (theme) styles, but it does return the implicit style or an explicit style.</span></span> <span data-ttu-id="f706a-629">암시적 또는 명시적 스타일의 경우 중요 하지 않습니다 스타일 리소스로 액세스 되는지 아니면 로컬로 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-629">In the case of implicit or explicit styles, it does not matter whether the style is accessed as a resource or defined locally.</span></span>  
  
 <span data-ttu-id="f706a-630">스타일 정의는 몇 가지 제한 사항이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-630">Setting the styles has some restrictions.</span></span> <span data-ttu-id="f706a-631">전체를 다시 설정할 수 있습니다 <xref:System.Windows.FrameworkContentElement.Style%2A> 속성을 새 <xref:System.Windows.Style> 언제 든 지는 이렇게 하면 레이아웃이 다시 강제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-631">You can reset the entire <xref:System.Windows.FrameworkContentElement.Style%2A> property to a new <xref:System.Windows.Style> at any time, which will force a layout recomposition.</span></span> <span data-ttu-id="f706a-632">그러나 가능한 한 즉시 로드 된 요소에 의해 해당 스타일 사용 하 게 되는 <xref:System.Windows.Style> 고려해 야 봉인 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-632">However, as soon as that style is placed in use by a loaded element, the <xref:System.Windows.Style> should be considered sealed.</span></span> <span data-ttu-id="f706a-633">사용 중인 스타일의 개별 속성을 변경 하는 동안 (컬렉션 내에서 아무 것도 같은 <xref:System.Windows.Style.Setters%2A>) 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-633">Attempting to make a change to any individual property of an in-use style (such as anything within the collection of <xref:System.Windows.Style.Setters%2A>) causes an exception to be thrown.</span></span> <span data-ttu-id="f706a-634">태그에 정의 된 스타일 (리소스)에 대 한 리소스 사전에서 로드 된 또는 인라인 스타일) (에 포함 된 페이지가 로드 되는 즉시 사용 중인 것으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-634">A style that is defined in markup is considered to be in use as soon as it is loaded from a resource dictionary (for resources), or the page it is contained within is loaded (for inline styles).</span></span>  
  
 <span data-ttu-id="f706a-635"><xref:System.Windows.FrameworkContentElement.Style%2A> 특별 한 우선 순위를 사용 하 여 종속성 속성이입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-635"><xref:System.Windows.FrameworkContentElement.Style%2A> is a dependency property with special precedence.</span></span> <span data-ttu-id="f706a-636">로컬에서 설정 스타일은 일반적으로 가장 높은 우선 순위로 속성 시스템으로 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-636">The locally set style generally operates at the highest precedence in the property system.</span></span> <span data-ttu-id="f706a-637">경우는 <xref:System.Windows.FrameworkContentElement.Style%2A> 이 시점에서 해당 형식을 지정 하는 다시 사용할 수 있는 리소스로 정의 된 암시적 스타일에 대 한 속성 시스템을 확인 하는 로드 하는 동안 null입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-637">If the <xref:System.Windows.FrameworkContentElement.Style%2A> is null at this point, during loading the property system checks for implicit styles as defined resources that specify that type.</span></span> <span data-ttu-id="f706a-638">이 단계를 수행 하면 스타일은 여전히 null 이라면 기본 (테마) 스타일에서 스타일을 가져옵니다 이지만 기본 스타일에 반환 되지 않습니다는 <xref:System.Windows.FrameworkContentElement.Style%2A> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-638">If the style is still null after this step, then the style comes from the default (theme) style, but the default style is not returned in the <xref:System.Windows.FrameworkContentElement.Style%2A> property value.</span></span> <span data-ttu-id="f706a-639">참조 [종속성 속성 값 우선 순위](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-639">See [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
<a name="xamlAttributeUsage_Style"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="f706a-640">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="f706a-640">XAML Attribute Usage</span></span>  
  
```  
<object Style="{resourceExtension StyleResourceKey}"/>  
```  
  
<a name="xamlValues_Style"></a>   
## <a name="xaml-values"></a><span data-ttu-id="f706a-641">XAML 값</span><span class="sxs-lookup"><span data-stu-id="f706a-641">XAML Values</span></span>  
 <span data-ttu-id="f706a-642">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="f706a-642">*resourceExtension*</span></span>  
 <span data-ttu-id="f706a-643">다음 중 하나:, 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-643">One of the following: , or .</span></span> <span data-ttu-id="f706a-644">참조 [XAML 리소스](~/docs/framework/wpf/advanced/xaml-resources.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-644">See [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="f706a-645">*styleResourceKey*</span><span class="sxs-lookup"><span data-stu-id="f706a-645">*styleResourceKey*</span></span>  
 <span data-ttu-id="f706a-646">요청 되는 스타일을 식별 하는 키입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-646">The key that identifies the style being requested.</span></span> <span data-ttu-id="f706a-647">키의 기존 리소스에 참조를 <xref:System.Windows.ResourceDictionary>입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-647">The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f706a-648">속성 요소 구문은 기술적으로 가능 하지만 권장 하지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-648">Property element syntax is technically possible, but not recommended.</span></span> <span data-ttu-id="f706a-649">참조 [인라인 스타일 및 템플릿](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-649">See [Inline Styles and Templates](~/docs/framework/wpf/advanced/inline-styles-and-templates.md).</span></span>  <span data-ttu-id="f706a-650">사용 하 여 바인딩 참조 또는 <xref:System.Windows.Data.Binding> 가능 하지만 일반적이 지 않은 이기도 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-650">A binding reference using  or <xref:System.Windows.Data.Binding> is also possible, but uncommon.</span></span>  
  
<a name="dependencyPropertyInfo_Style"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="f706a-651">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="f706a-651">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="f706a-652">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="f706a-652">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.StyleProperty>|  
|<span data-ttu-id="f706a-653">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="f706a-653">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="f706a-654">다음 예제에서는 설정를 <xref:System.Windows.FrameworkContentElement.Resources%2A> 컬렉션에는 <xref:System.Windows.Documents.FlowDocument> 루트 요소에 대 한 특정 스타일으로 리소스로 참조 하 고는 <xref:System.Windows.Documents.Paragraph>합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-654">The following example establishes a <xref:System.Windows.FrameworkContentElement.Resources%2A> collection on a <xref:System.Windows.Documents.FlowDocument> root element and then references it as a resource as a specific style for a <xref:System.Windows.Documents.Paragraph>.</span></span>  
  
 [!code-xaml[ContentElementsSmorgasbord#FCEResources](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page2.xaml#fceresources)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty StyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty StyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.StyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ StyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable StyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.StyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-655">
            <see cref="P:System.Windows.FrameworkContentElement.Style" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-655">Identifies the <see cref="P:System.Windows.FrameworkContentElement.Style" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsAmbientPropertyAvailable (propertyName As String) As Boolean Implements IQueryAmbient.IsAmbientPropertyAvailable" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System::String ^ propertyName) = System::Windows::Markup::IQueryAmbient::IsAmbientPropertyAvailable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">
          <span data-ttu-id="f706a-656">요청된 앰비언트 속성의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-656">The name of the requested ambient property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-657">이 멤버에 대한 설명을 보려면 <see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /> 메서드를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-657">For a description of this member, see the <see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f706a-658">
            <paramref name="propertyName" />을 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-658">
              <see langword="true" /> if <paramref name="propertyName" /> is available; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-659">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="f706a-659">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="f706a-660"><xref:System.Windows.FrameworkContentElement> 인스턴스가 <xref:System.Windows.Markup.IQueryAmbient> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-660">It can be used only when the <xref:System.Windows.FrameworkContentElement> instance is cast to an <xref:System.Windows.Markup.IQueryAmbient> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.FrameworkContentElement.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-661">이 요소에 대한 사용자 지정 정보를 저장하는 데 사용할 수 있는 임의의 개체 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-661">Gets or sets an arbitrary object value that can be used to store custom information about this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f706a-662">원하는 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-662">The intended value.</span>
          </span>
          <span data-ttu-id="f706a-663">이 속성에는 기본값이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-663">This property has no default value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-664">이 속성은 다른 Microsoft 프로그래밍 모델에서 응용 프로그램 또는 Windows Forms에 대 한 Visual Basic과 같은 태그 속성과 비슷합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-664">This property is analogous to Tag properties in other Microsoft programming models, such as Visual Basic for Applications or Windows Forms.</span></span> <span data-ttu-id="f706a-665">기존 응용 프로그램 개발자는 서브 클래스를 시작 하지 않고 모든 요소에 대 한 일부 기본 사용자 지정 정보를 저장할 위치를 제공 하는 것이 것입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-665">It is intended to provide a pre-existing place to store some basic custom information about any element without forcing application developers to subclass.</span></span>  
  
<a name="xamlValues_Tag"></a>   
## <a name="xaml-values"></a><span data-ttu-id="f706a-666">XAML 값</span><span class="sxs-lookup"><span data-stu-id="f706a-666">XAML Values</span></span>  
 <span data-ttu-id="f706a-667">속성 요소 사용 설정 하기 위해 사용 해야 하는 개체를 사용 하는이 속성을 하기 때문에 <xref:System.Windows.FrameworkContentElement.Tag%2A> , 문자열 등의 알려진된 기본 제공 형식 변환기를 사용 하 여 개체 이외의 값으로 XAML의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-667">Because this property takes an object, you need to use the property element usage in order to set the <xref:System.Windows.FrameworkContentElement.Tag%2A> property in XAML to anything other than an object with a known and built-in type converter, such as a string.</span></span> <span data-ttu-id="f706a-668">이러한 방식으로 사용 되는 개체 일반적으로 표준 WPF 네임 스페이스에 포함 되지 않은 하 고 따라서 XAML 요소로 소개 하기 위해 외부 네임 스페이스에 네임 스페이스 매핑을 필요할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-668">Objects used in this way are typically not within the standard WPF namespaces and therefore may require namespace mapping to the external namespace in order to be introduced as XAML elements.</span></span>  
  
<a name="dependencyPropertyInfo_Tag"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="f706a-669">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="f706a-669">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="f706a-670">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="f706a-670">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.TagProperty>|  
|<span data-ttu-id="f706a-671">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="f706a-671">Metadata properties set to `true`</span></span>|<span data-ttu-id="f706a-672">없음</span><span class="sxs-lookup"><span data-stu-id="f706a-672">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkContentElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="TagProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TagProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TagProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.TagProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TagProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TagProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TagProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.TagProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-673">
            <see cref="P:System.Windows.FrameworkContentElement.Tag" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-673">Identifies the <see cref="P:System.Windows.FrameworkContentElement.Tag" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.TargetUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TargetUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ TargetUpdated;" />
      <MemberSignature Language="F#" Value="member this.TargetUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.TargetUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-674">이 요소의 바인딩에 참여하는 연결된 대상 속성이 변경되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-674">Occurs when any associated target property participating in a binding on this element changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-675">이 이벤트 화면을 <xref:System.Windows.Data.Binding.TargetUpdated> 이벤트에 의해 발생 하는 <xref:System.Windows.Data.Binding> 이 요소와 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-675">This event surfaces the <xref:System.Windows.Data.Binding.TargetUpdated> event that is raised by any <xref:System.Windows.Data.Binding> associated with this element.</span></span> <span data-ttu-id="f706a-676">이 일반적으로 해당 바인딩이 양방향 바인딩으로 바인딩된 종속성 속성은 유효성 검사 또는 속성을 지 원하는 캐싱 구성표 마다 이전 속성 값의 무효화 함을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-676">This usually means that the binding in question is a two-way binding, and that the bound  dependency property affirms an invalidation of the previous property value per any validation or caching scheme that the property supports.</span></span>  
  
 <span data-ttu-id="f706a-677">이 이벤트의 이벤트 인수를 어떤 바인딩된 속성이 변경 된 것을 알려줍니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-677">The event arguments of this event will inform you which bound property was changed.</span></span>  
  
<a name="xamlAttributeUsage_TargetUpdated"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="f706a-678">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="f706a-678">XAML Attribute Usage</span></span>  
  
```  
<object TargetUpdated="EventHandler"/>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TemplatedParent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject TemplatedParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject TemplatedParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.TemplatedParent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemplatedParent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ TemplatedParent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TemplatedParent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkContentElement.TemplatedParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-679">이 요소의 템플릿 부모에 대한 참조를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-679">Gets a reference to the template parent of this element.</span>
          </span>
          <span data-ttu-id="f706a-680">요소가 템플릿을 통해 만들어지지 않은 경우에는 이 속성이 관련이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-680">This property is not relevant if the element was not created through a template.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f706a-681">요소입니다 <see cref="T:System.Windows.FrameworkTemplate" /><see cref="P:System.Windows.FrameworkTemplate.VisualTree" /> 이 요소를 만들 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-681">The element whose <see cref="T:System.Windows.FrameworkTemplate" /><see cref="P:System.Windows.FrameworkTemplate.VisualTree" /> caused this element to be created.</span>
          </span>
          <span data-ttu-id="f706a-682">이 값은 대개 <see langword="null" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-682">This value is frequently <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-683">템플릿은 실제로 공유 개체를 서식 파일의 내용을 한 번만 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-683">Templates are actually shared objects, where the contents of the template are created only once.</span></span> <span data-ttu-id="f706a-684">따라서 템플릿에서 생성 된 요소에 대 한 개체 참조를 가져온 경우 명확한 논리 트리의 페이지 루트까지 도달 하지 않습니다를 알 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-684">Therefore, if you obtain an object reference to an element that came from a template, you may find that the apparent logical tree does not reach to the page root.</span></span> <span data-ttu-id="f706a-685">이러한 템플릿 참조 페이지의 논리 트리에 연결 하려면 가져와야는 <xref:System.Windows.FrameworkContentElement.TemplatedParent%2A> 값 및 계속를 원하는 대로 해당 요소 트리를 탐색 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-685">In order to connect such a template reference to the page's logical tree, you should get the <xref:System.Windows.FrameworkContentElement.TemplatedParent%2A> value and continue to navigate that element tree as desired.</span></span>  
  
 <span data-ttu-id="f706a-686"><xref:System.Windows.FrameworkContentElement.TemplatedParent%2A> 자주 `null` 공통 개체에 대 한 만들어지지 않았기 때문에 일반적인 수단을 통해 응용 프로그램에서 페이지 푸시된 개체 참조를 얻은 경우 해당 요소 아마도 된 템플릿에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-686"><xref:System.Windows.FrameworkContentElement.TemplatedParent%2A> will frequently be `null` for common objects, because if you have obtained an object reference from out of a page in your application through typical means, that element probably was not created from a template.</span></span> <span data-ttu-id="f706a-687">인 사례 <xref:System.Windows.FrameworkContentElement.TemplatedParent%2A> 아닐 `null` 이벤트 적중 테스트, 특정 하위 수준 입력 이벤트를 처리 하거나 템플릿에서 생성 되는 요소를 반환 있을 수 있는 열거자를 사용 하 여 작업 등의 작업에 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-687">Cases where <xref:System.Windows.FrameworkContentElement.TemplatedParent%2A> might not be `null` would include operations such as hit-testing, event handling for certain low-level input events, or working with enumerators, which may have returned elements that came from templates.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public object ToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ToolTip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.ToolTip" />
      <MemberSignature Language="VB.NET" Value="Public Property ToolTip As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ToolTip { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ToolTip : obj with get, set" Usage="System.Windows.FrameworkContentElement.ToolTip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-688">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]에서 이 요소에 대해 표시되는 도구 설명 개체를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-688">Gets or sets the tool-tip object that is displayed for this element in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f706a-689">도구 설명 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-689">The tooltip object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-690">이 속성의 값 형식인 경우 <xref:System.Windows.Controls.ToolTip>에서 사용할 도구 설명 됩니다는 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-690">If the value of this property is of type <xref:System.Windows.Controls.ToolTip>, then that is the tool-tip that will be used in the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span>  <span data-ttu-id="f706a-691">다른 형식의 값이 있으면 해당 값으로 사용할 합니다 *콘텐츠* 에 대 한는 <xref:System.Windows.Controls.ToolTip> 제공 (생성 된) 시스템에서.</span><span class="sxs-lookup"><span data-stu-id="f706a-691">If the value is of any other type, then that value will be used as the *content* for a <xref:System.Windows.Controls.ToolTip> provided (constructed) by the system.</span></span> <span data-ttu-id="f706a-692">자세한 내용은 <xref:System.Windows.Controls.ToolTipService>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="f706a-692">For more information see <xref:System.Windows.Controls.ToolTipService>.</span></span> <span data-ttu-id="f706a-693">서비스 클래스는 추가로 도구 설명을 사용자 지정할 수 있는 연결 된 속성을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-693">The service class provides attached properties that can be used to further customize a tool-tip.</span></span>  
  
<a name="xamlAttributeUsage_ToolTip"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="f706a-694">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="f706a-694">XAML Attribute Usage</span></span>  
  
```  
<object ToolTip="toolTipContent"/>  
```  
  
<a name="xamlPropertyElementUsage_ToolTip"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="f706a-695">XAML 속성 요소 사용</span><span class="sxs-lookup"><span data-stu-id="f706a-695">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.ToolTip>  
    <ToolTip .../>  
  </object.ToolTip>  
</object>  
- or -  
<object>  
  <object.ToolTip>  
    toolTipObjectContent  
  </object.ToolTip>  
</object>  
```  
  
<a name="xamlValues_ToolTip"></a>   
## <a name="xaml-values"></a><span data-ttu-id="f706a-696">XAML 값</span><span class="sxs-lookup"><span data-stu-id="f706a-696">XAML Values</span></span>  
 <span data-ttu-id="f706a-697">*toolTipContent*</span><span class="sxs-lookup"><span data-stu-id="f706a-697">*toolTipContent*</span></span>  
 <span data-ttu-id="f706a-698">에 대 한 표시 텍스트를가 하는 문자열을 <xref:System.Windows.FrameworkContentElement.ToolTip%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-698">A string that becomes the display text for the <xref:System.Windows.FrameworkContentElement.ToolTip%2A>.</span></span>  
  
 <span data-ttu-id="f706a-699">*toolTipObjectContent*</span><span class="sxs-lookup"><span data-stu-id="f706a-699">*toolTipObjectContent*</span></span>  
 <span data-ttu-id="f706a-700">에 대 한 내용으로 사용 해야 하는 개체 요소 형식에 제공 된 일부 개체는 <xref:System.Windows.FrameworkContentElement> 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-700">Some object, provided in object element form, that should be used as the content for the <xref:System.Windows.FrameworkContentElement> .</span></span> <span data-ttu-id="f706a-701">일반적을 <xref:System.Windows.FrameworkElement> 또는 다른 요소에 대 한 레이아웃 합성을 만드는 <xref:System.Windows.FrameworkContentElement.ToolTip%2A>, 최종적으로 합치기 내에 텍스트 콘텐츠를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-701">Typically this would be a <xref:System.Windows.FrameworkElement> or some other element that creates layout compositing for the <xref:System.Windows.FrameworkContentElement.ToolTip%2A>, eventually containing text content within the compositing.</span></span> <span data-ttu-id="f706a-702">이 사용법에서 합니다 <xref:System.Windows.Controls.ToolTip> 요소가 만들어집니다 구문 분석 된에서 암시적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], 및 *toolTipObjectContent* 내용으로 설정 되어 해당 <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType> 속성.</span><span class="sxs-lookup"><span data-stu-id="f706a-702">In this usage, the <xref:System.Windows.Controls.ToolTip> element is created implicitly from the parsed [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], and the *toolTipObjectContent* content is set as its <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="f706a-703"><`ToolTip` .../></span><span class="sxs-lookup"><span data-stu-id="f706a-703"><`ToolTip` .../></span></span>  
 <span data-ttu-id="f706a-704"><xref:System.Windows.Controls.ToolTip>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="f706a-704">See <xref:System.Windows.Controls.ToolTip>.</span></span>  
  
<a name="dependencyPropertyInfo_ToolTip"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="f706a-705">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="f706a-705">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="f706a-706">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="f706a-706">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.ToolTipProperty>|  
|<span data-ttu-id="f706a-707">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="f706a-707">Metadata properties set to `true`</span></span>|<span data-ttu-id="f706a-708">없음</span><span class="sxs-lookup"><span data-stu-id="f706a-708">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f706a-709">값을 설정 하는 다음 예제는 <xref:System.Windows.FrameworkElement.ToolTip%2A> 속성 문자열을 직접.</span><span class="sxs-lookup"><span data-stu-id="f706a-709">The following example sets the value of the <xref:System.Windows.FrameworkElement.ToolTip%2A> property directly to a string.</span></span>  
  
 [!code-csharp[TableSnippets2#_Table_RowGroups_ManipRows](~/samples/snippets/csharp/VS_Snippets_Wpf/TableSnippets2/CSharp/Window1.xaml.cs#_table_rowgroups_maniprows)]
 [!code-vb[TableSnippets2#_Table_RowGroups_ManipRows](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TableSnippets2/visualbasic/window1.xaml.vb#_table_rowgroups_maniprows)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.ToolTipClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipClosing As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipClosing;" />
      <MemberSignature Language="F#" Value="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-710">요소의 도구 설명을 닫기 직전에 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-710">Occurs just before any tooltip on the element is closed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-711">도구 설명 닫기 사용 하지 않으려면 이벤트의 처리기로 표시 해야 처리.</span><span class="sxs-lookup"><span data-stu-id="f706a-711">To suppress closing the tooltip, handlers of the event should mark it as handled.</span></span>  
  
 <span data-ttu-id="f706a-712">이 이벤트는 <xref:System.Windows.EventTrigger> 스타일에서입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-712">This event cannot be an <xref:System.Windows.EventTrigger> in a style.</span></span> <span data-ttu-id="f706a-713">이 이벤트의 식별자 필드 다시 사용 하 여 이벤트에 대 한 추가/제거 메서드를 노출 하지 않는 서비스에서 구현 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-713">This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove methods on the event.</span></span>  
  
<a name="routedEventInfo_ToolTipClosing"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="f706a-714">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="f706a-714">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="f706a-715">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="f706a-715">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.ToolTipClosingEvent>|  
|<span data-ttu-id="f706a-716">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="f706a-716">Routing strategy</span></span>|<span data-ttu-id="f706a-717">직접</span><span class="sxs-lookup"><span data-stu-id="f706a-717">Direct</span></span>|  
|<span data-ttu-id="f706a-718">대리자</span><span class="sxs-lookup"><span data-stu-id="f706a-718">Delegate</span></span>|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.ToolTipClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkContentElement.ToolTipClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-719">
            <see cref="E:System.Windows.FrameworkContentElement.ToolTipClosing" /> [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md)를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-719">Identifies the <see cref="E:System.Windows.FrameworkContentElement.ToolTipClosing" /> [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-720">이벤트 식별자 개체는 라우트된 이벤트가 등록 될 때 만들어집니다 (참조 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) 클래스 처리기를 추가 하려면 사용할 수 있습니다 (참조 <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span><span class="sxs-lookup"><span data-stu-id="f706a-720">Event identifier objects are created when routed events are registered (see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) and can then be used to add class handlers (see <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span></span> <span data-ttu-id="f706a-721">식별자 개체는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-721">Identifier objects contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.ToolTipOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipOpening As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipOpening;" />
      <MemberSignature Language="F#" Value="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-722">요소의 도구 설명이 열리면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-722">Occurs when any tooltip on the element is opened.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-723">도구 설명을 수동으로 열려면, 처리 된 것으로 이벤트 처리기 관련 이벤트를 표시 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-723">To manually open tooltips, handlers of the events should mark the relevant event as handled.</span></span> <span data-ttu-id="f706a-724">이 고, 그렇지의 값을 <xref:System.Windows.FrameworkContentElement.ToolTip%2A> 속성이 자동으로 상황에 맞는 메뉴를 열려면 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-724">Otherwise, the value of the <xref:System.Windows.FrameworkContentElement.ToolTip%2A> property will be used to automatically open a context menu.</span></span> <span data-ttu-id="f706a-725">이벤트를 처리 된 기본 작업을 효과적으로 취소 하 고 수 값을 다시 설정할 수는 <xref:System.Windows.FrameworkContentElement.ToolTip%2A> 속성 연 다음 새 <xref:System.Windows.Controls.ContextMenu>합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-725">Marking the event handled will effectively cancel the default action, and could be an opportunity to reset the value of the <xref:System.Windows.FrameworkContentElement.ToolTip%2A> property and then open the new <xref:System.Windows.Controls.ContextMenu>.</span></span> <span data-ttu-id="f706a-726">확인 하는 경우이 이벤트가 발생 하지 것입니다 <xref:System.Windows.FrameworkContentElement.ToolTip%2A> 가 null 참조 또는 기타 수단을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-726">Note that this event will not be raised if <xref:System.Windows.FrameworkContentElement.ToolTip%2A> is a null reference or otherwise unset.</span></span>  
  
 <span data-ttu-id="f706a-727">이 이벤트는 <xref:System.Windows.EventTrigger> 스타일에서입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-727">This event cannot be an <xref:System.Windows.EventTrigger> in a style.</span></span> <span data-ttu-id="f706a-728">이 이벤트의 식별자 필드 다시 사용 하 여 이벤트에 대 한 추가/제거 메서드를 노출 하지 않는 서비스에서 구현 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-728">This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove methods on the event.</span></span>  
  
<a name="routedEventInfo_ToolTipOpening"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="f706a-729">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="f706a-729">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="f706a-730">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="f706a-730">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.ToolTipOpeningEvent>|  
|<span data-ttu-id="f706a-731">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="f706a-731">Routing strategy</span></span>|<span data-ttu-id="f706a-732">직접</span><span class="sxs-lookup"><span data-stu-id="f706a-732">Direct</span></span>|  
|<span data-ttu-id="f706a-733">대리자</span><span class="sxs-lookup"><span data-stu-id="f706a-733">Delegate</span></span>|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.ToolTipOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkContentElement.ToolTipOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-734">
            <see cref="E:System.Windows.FrameworkContentElement.ToolTipOpening" /> [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md)를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-734">Identifies the <see cref="E:System.Windows.FrameworkContentElement.ToolTipOpening" /> [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-735">이벤트 식별자 개체는 라우트된 이벤트가 등록 될 때 만들어집니다 (참조 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) 클래스 처리기를 추가 하려면 사용할 수 있습니다 (참조 <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span><span class="sxs-lookup"><span data-stu-id="f706a-735">Event identifier objects are created when routed events are registered (see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) and can then be used to add class handlers (see <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span></span> <span data-ttu-id="f706a-736">식별자 개체는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-736">Identifier objects contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ToolTipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ToolTipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.ToolTipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ToolTipProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.ToolTipProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-737">
            <see cref="P:System.Windows.FrameworkContentElement.ToolTip" /> 종속성 속성을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-737">Identifies the <see cref="P:System.Windows.FrameworkContentElement.ToolTip" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFindResource">
      <MemberSignature Language="C#" Value="public object TryFindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object TryFindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.TryFindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ TryFindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.TryFindResource : obj -&gt; obj" Usage="frameworkContentElement.TryFindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey">
          <span data-ttu-id="f706a-738">찾을 리소스의 키 식별자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-738">Key identifier of the resource to be found.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-739">지정된 키를 사용하여 리소스를 검색하고 해당 리소스를 반환합니다(있는 경우).</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-739">Searches for a resource with the specified key, and returns that resource if found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f706a-740">찾은 리소스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-740">The found resource.</span>
          </span>
          <span data-ttu-id="f706a-741">리소스가 없으면 <see langword="null" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-741">If no resource was found, <see langword="null" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-742">리소스를 호출 하는 요소에 없는 경우 부모 트리를 검색 하는 논리적 트리를 사용 하 여 트리는 동일한 방식에서 런타임에 키로 동적 리소스 참조를 요청 하는 경우를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-742">If the resource is not found on the calling element, the parent tree is searched using the logical tree, in the same way that the tree would be searched if a dynamic resource reference were requested by key at run-time.</span></span>  
  
 <span data-ttu-id="f706a-743">일반적으로 즉시 캐스팅 반환 되는 리소스 값으로 설정 하 려 했던는 속성의 형식으로 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-743">Typically you would immediately cast the return value to the type of the property that you were attempting to set with the returned resource value.</span></span>  
  
 <span data-ttu-id="f706a-744"><xref:System.Windows.FrameworkContentElement.FindResource%2A> 메서드가 비슷한 동작을 제외 하 고 제공 된 키를 사용 하 여 리소스를 찾지 못하는 경우 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-744">The <xref:System.Windows.FrameworkContentElement.FindResource%2A> method has similar behavior, except that it will throw an exception in the case of not finding a resource with the provided key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f706a-745">다음 예제에서는 태그에 정의 된 대로 리소스를 찾습니다 및 라우트된 이벤트에 대 한 응답에 있는 요소의 특정 속성에 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-745">The following example finds a resource as defined in markup and applies it to a certain property of an element in response to a routed event.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#TryFindResource](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#tryfindresource)]
 [!code-vb[ContentElementsSmorgasbord#TryFindResource](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#tryfindresource)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkContentElement.FindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Unloaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Unloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Unloaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.Unloaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unloaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Unloaded;" />
      <MemberSignature Language="F#" Value="member this.Unloaded : System.Windows.RoutedEventHandler " Usage="member this.Unloaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-746">로드된 요소의 요소 트리에서 요소를 제거할 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-746">Occurs when the element is removed from an element tree of loaded elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-747">직접 라우트된 이벤트에 대 한 경로 따르지, 발생 하는 동일한 요소 내 에서만 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-747">Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</span></span> <span data-ttu-id="f706a-748">라우트된 이벤트는 라우트된 이벤트 동작은 다른 지원지 않습니다 직접: 액세스할 수 있는 처리기 컬렉션을 지원 하며으로 사용할 수는 <xref:System.Windows.EventTrigger> 스타일에서입니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-748">Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.</span></span>  
  
<a name="routedEventInfo_Unloaded"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="f706a-749">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="f706a-749">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="f706a-750">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="f706a-750">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.UnloadedEvent>|  
|<span data-ttu-id="f706a-751">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="f706a-751">Routing strategy</span></span>|<span data-ttu-id="f706a-752">직접</span><span class="sxs-lookup"><span data-stu-id="f706a-752">Direct</span></span>|  
|<span data-ttu-id="f706a-753">대리자</span><span class="sxs-lookup"><span data-stu-id="f706a-753">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnloadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent UnloadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent UnloadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.UnloadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnloadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ UnloadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnloadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkContentElement.UnloadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f706a-754">
            <see cref="E:System.Windows.FrameworkContentElement.Unloaded" /> [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md)를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-754">Identifies the <see cref="E:System.Windows.FrameworkContentElement.Unloaded" /> [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-755">이벤트 식별자 개체는 라우트된 이벤트가 등록 될 때 만들어집니다 (참조 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) 클래스 처리기를 추가 하려면 사용할 수 있습니다 (참조 <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span><span class="sxs-lookup"><span data-stu-id="f706a-755">Event identifier objects are created when routed events are registered (see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) and can then be used to add class handlers (see <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span></span> <span data-ttu-id="f706a-756">식별자 개체는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="f706a-756">Identifier objects contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.UnregisterName : string -&gt; unit" Usage="frameworkContentElement.UnregisterName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="f706a-757">현재 범위에서 제거할 이름-개체 쌍의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-757">Name of the name-object pair to remove from the current scope.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f706a-758">
            <see cref="T:System.Windows.NameScope" /> 등록 취소 메서드에 대한 액세스를 간소화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-758">Simplifies access to the <see cref="T:System.Windows.NameScope" /> de-registration method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f706a-759">만 하면 등록을 취소할 이름을 다시 동일한 이름 가진 다른 요소를 등록 하려는 경우.</span><span class="sxs-lookup"><span data-stu-id="f706a-759">You only need to un-register names if you intend to re-register another element with that same name.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkContentElement.RegisterName(System.String,System.Object)" />
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UpdateDefaultStyle">
      <MemberSignature Language="C#" Value="public void UpdateDefaultStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateDefaultStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.UpdateDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateDefaultStyle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateDefaultStyle();" />
      <MemberSignature Language="F#" Value="member this.UpdateDefaultStyle : unit -&gt; unit" Usage="frameworkContentElement.UpdateDefaultStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f706a-760">기본 스타일을 현재 <see cref="T:System.Windows.FrameworkContentElement" />에 다시 적용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f706a-760">Reapplies the default style to the current <see cref="T:System.Windows.FrameworkContentElement" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>