<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DependencyPropertyChangedEventArgs.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5840f1b77f0e3528c43e12653ee199d6199ef1109.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">840f1b77f0e3528c43e12653ee199d6199ef1109</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>Provides data for various property changed events.</source>
          <target state="translated">다양한 속성 변경 이벤트에 대한 데이터를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>Typically these events report effective value changes in the value of a read-only dependency property.</source>
          <target state="translated">일반적으로 이러한 이벤트는 읽기 전용 종속성 속성 값에서 유효한 값이 변경된 내용을 보고합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>Another usage is as part of a <ph id="ph1">&lt;see cref="T:System.Windows.PropertyChangedCallback" /&gt;</ph> implementation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.PropertyChangedCallback" /&gt;</ph> 구현의 일부로도 사용됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>The events that use the <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> class for event data, and the <ph id="ph2">&lt;xref:System.Windows.DependencyPropertyChangedEventHandler&gt;</ph> method implementations for handlers, generally follow the naming pattern <ph id="ph3">`Is*Changed`</ph>, and are generally implemented as <ph id="ph4">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> events without <ph id="ph5">&lt;xref:System.Windows.RoutedEvent&gt;</ph> backing (they are not routed events).</source>
          <target state="translated">사용 하는 이벤트는 <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> 이벤트 데이터에 대 한 클래스 및 <ph id="ph2">&lt;xref:System.Windows.DependencyPropertyChangedEventHandler&gt;</ph> 메서드 구현에서는 처리기는 일반적으로 명명 패턴을 따를 <ph id="ph3">`Is*Changed`</ph>, 일반적으로 구현 됩니다 <ph id="ph4">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 없이 <ph id="ph5">&lt;xref:System.Windows.RoutedEvent&gt;</ph> 백업 (않습니다 라우트된 이벤트).</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>Some class handling methods that "handle" otherwise unexposed events that report a state change through a property change, such as <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.OnIsPressedChanged%2A?displayProperty=nameWithType&gt;</ph>, also use the <ph id="ph2">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> class for event data.</source>
          <target state="translated">일부 클래스 메서드 "를 처리 하는" 그렇지 않으면 처리와 같은 속성 변경을 통해 상태 변경을 보고 하는 이벤트 공개 되지 않았을 <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.OnIsPressedChanged%2A?displayProperty=nameWithType&gt;</ph>, 또한 사용 하 여는 <ph id="ph2">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> 이벤트 데이터에 대 한 클래스입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>The scenario for <ph id="ph1">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> is to use the arguments to report old and new values that come from the property system evaluation of the property.</source>
          <target state="translated">에 대 한 시나리오 <ph id="ph1">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> 속성의 속성 시스템 계산에서 제공 하는 보고서 이전 및 새 값에 대 한 인수를 사용 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>A callback that processes old and new values might choose special handling depending on these values, such as choosing to not respond to value changes that are deemed insignificant.</source>
          <target state="translated">이전 및 새 값을 처리 하는 콜백은 중요 하지 않은 값 변경에 응답 하지 않도록 선택 하는 등의 이러한 값에 따라 특수 한 처리를 선택할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> class in the context of a <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> for a particular property of a custom class that also defines events.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> 클래스의 컨텍스트에서 <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> 도 이벤트를 정의 하는 사용자 지정 클래스의 특정 속성에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>The callback takes the results of old and new values from the property system as communicated by <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph>, and repackages these into a different events arguments class <ph id="ph2">&lt;xref:System.Windows.RoutedPropertyChangedEventArgs%601&gt;</ph>.</source>
          <target state="translated">콜백 하며 이전 결과 속성 시스템에서 새 값으로 전달 되 <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph>, 이러한 다양 한 이벤트 인수 클래스도 가져오며 <ph id="ph2">&lt;xref:System.Windows.RoutedPropertyChangedEventArgs%601&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>The new arguments are then used as the data for a "ValueChanged" event defined by and raised by the custom class.</source>
          <target state="translated">새 인수 다음에 의해 정의 되며 사용자 지정 클래스에 의해 발생 "재정의" 이벤트에 대 한 데이터와 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
          <source>The identifier for the dependency property that changed.</source>
          <target state="translated">변경된 종속성 속성의 식별자입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
          <source>The value of the property before the change reported by the relevant event or state change.</source>
          <target state="translated">관련 이벤트에서 보고한 변경 또는 상태 변경 이전의 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
          <source>The value of the property after the change reported by the relevant event or state change.</source>
          <target state="translated">관련 이벤트에서 보고한 변경 또는 상태 변경 이후의 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
          <source>Implementers of custom events that report dependency property changes should use this constructor for populating the event data with the specifics of the change when the event is raised.</source>
          <target state="translated">종속성 속성 변경 내용을 보고 하는 사용자 지정 이벤트의 구현자는 이벤트가 발생할 때 변경의 특성을 사용 하 여 이벤트 데이터를 채우기 위한이 생성자를 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:System.Windows.DependencyPropertyChangedEventArgs">
          <source>Returns whether the provided object is equivalent to the current <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>.</source>
          <target state="translated">제공된 개체가 현재 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>에 해당하는지 여부를 반환합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
          <source>The object to compare to the current <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>과 비교할 개체입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
          <source>Determines whether the provided object is equivalent to the current <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>.</source>
          <target state="translated">제공된 개체가 현재 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>에 해당하는지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the provided object is equivalent to the current <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">제공된 개체가 현재 <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>와 같으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
          <source>This implementation relies on value equivalence of all properties, including internal properties.</source>
          <target state="translated">이 구현은 내부 속성을 포함 하는 모든 속성의 값 동등성에 의존 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> to compare to the current <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph></source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>와 비교할 <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Determines whether the provided <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> is equivalent to the current <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>.</source>
          <target state="translated">제공된 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>가 현재 <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>에 해당하는지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the provided <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> is equivalent to the current <ph id="ph3">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">제공된 <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>가 현재 <ph id="ph3">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>와 같으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This implementation relies on value equivalence of all properties, including internal properties.</source>
          <target state="translated">이 구현은 내부 속성을 포함 하는 모든 속성의 값 동등성에 의존 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode">
          <source>Gets a hash code  for this <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>의 해시 코드를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode">
          <source>A signed 32-bit integer hash code.</source>
          <target state="translated">부호 있는 32비트 정수 해시 코드입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
          <source>Gets the value of the property after the change.</source>
          <target state="translated">변경 후의 속성 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
          <source>The property value after the change.</source>
          <target state="translated">변경 후의 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
          <source>The type of the value provided should always be castable to the type of the dependency property being reported.</source>
          <target state="translated">항상 제공 된 값의 형식을 보고 되는 종속성 속성의 형식으로 캐스팅할 수 있는 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> class in the context of a <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> for a particular property of a custom class that also defines events.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> 클래스의 컨텍스트에서 <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> 도 이벤트를 정의 하는 사용자 지정 클래스의 특정 속성에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
          <source>The callback takes the results of old and new values from the property system as communicated by <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph>, and repackages these into a different events arguments class <ph id="ph2">&lt;xref:System.Windows.RoutedPropertyChangedEventArgs%601&gt;</ph>.</source>
          <target state="translated">콜백 하며 이전 결과 속성 시스템에서 새 값으로 전달 되 <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph>, 이러한 다양 한 이벤트 인수 클래스도 가져오며 <ph id="ph2">&lt;xref:System.Windows.RoutedPropertyChangedEventArgs%601&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
          <source>The new arguments are then used as the data for a "ValueChanged" event defined by and raised by the custom class.</source>
          <target state="translated">새 인수 다음에 의해 정의 되며 사용자 지정 클래스에 의해 발생 "재정의" 이벤트에 대 한 데이터와 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
          <source>Gets the value of the property before the change.</source>
          <target state="translated">변경 전의 속성 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
          <source>The property value before the change.</source>
          <target state="translated">변경 전의 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
          <source>The type of the value provided should always be castable to the type of the dependency property being reported.</source>
          <target state="translated">항상 제공 된 값의 형식을 보고 되는 종속성 속성의 형식으로 캐스팅할 수 있는 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> class in the context of a <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> for a particular property of a custom class that also defines events.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph> 클래스의 컨텍스트에서 <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> 도 이벤트를 정의 하는 사용자 지정 클래스의 특정 속성에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
          <source>The callback takes the results of old and new values from the property system as communicated by <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph>, and repackages these into a different events arguments class <ph id="ph2">&lt;xref:System.Windows.RoutedPropertyChangedEventArgs%601&gt;</ph>.</source>
          <target state="translated">콜백 하며 이전 결과 속성 시스템에서 새 값으로 전달 되 <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs&gt;</ph>, 이러한 다양 한 이벤트 인수 클래스도 가져오며 <ph id="ph2">&lt;xref:System.Windows.RoutedPropertyChangedEventArgs%601&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
          <source>The new arguments are then used as the data for a "ValueChanged" event defined by and raised by the custom class.</source>
          <target state="translated">새 인수 다음에 의해 정의 되며 사용자 지정 클래스에 의해 발생 "재정의" 이벤트에 대 한 데이터와 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The first <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> to compare.</source>
          <target state="translated">비교할 첫 번째 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The second <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> to compare.</source>
          <target state="translated">비교할 두 번째 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> objects have the same value.</source>
          <target state="translated">지정된 두 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> 개체의 값이 같은지를 확인합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> instances are equivalent; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">두 <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> 인스턴스가 동일하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The implementation uses the same logic as <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A&gt;</ph>.</source>
          <target state="translated">구현에서와 같은 논리 사용 <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The first <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> to compare.</source>
          <target state="translated">비교할 첫 번째 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The second <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> to compare.</source>
          <target state="translated">비교할 두 번째 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> objects are different.</source>
          <target state="translated">지정된 두 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> 개체가 다른지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> instances are different; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">두 <ph id="ph2">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> 인스턴스가 다르면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The implementation returns the negation of the same logic as <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A&gt;</ph>.</source>
          <target state="translated">구현에서는와 같은 논리 부정을 반환 <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
          <source>Gets the identifier for the dependency property where the value change occurred.</source>
          <target state="translated">값이 변경된 종속성 속성의 식별자를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
          <source>The identifier field of the dependency property where the value change occurred.</source>
          <target state="translated">값이 변경된 종속성 속성의 식별자 필드입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
          <source>This property is relevant if used within a common <ph id="ph1">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> that is registered for several properties, and it is necessary to disambiguate which property change invoked the callback.</source>
          <target state="translated">이 속성은 공통 내에서 사용 하는 경우 관련 <ph id="ph1">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> 여러 속성에 대해 등록 된 및 속성이 변경 되는 콜백을 호출한 명확 하 게 해야 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs.Property%2A&gt;</ph> is not typically relevant for raising events, because there is usually a 1:1 correspondence between properties and events that report the property change.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyPropertyChangedEventArgs.Property%2A&gt;</ph> 있기 때문에 일반적으로 1:1 대응 속성 및 이벤트 보고 하는 속성 변경을 일반적으로 이벤트를 발생 시킬와 관련이 없습니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
          <source>The event that was raised is itself the indication of which property changed.</source>
          <target state="translated">발생 한 이벤트 속성을 변경 하는 표시 됩니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>