<Type Name="ContentElement" FullName="System.Windows.ContentElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3ead77d5c5a1444bb78a389f6dd17f78c4fdbd08" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
    <Meta Name="ms.locfileid" Value="32038491" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ContentElement : System.Windows.DependencyObject, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ContentElement extends System.Windows.DependencyObject implements class System.Windows.IInputElement, class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.ContentElement" />
  <TypeSignature Language="VB.NET" Value="Public Class ContentElement&#xA;Inherits DependencyObject&#xA;Implements IAnimatable, IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContentElement : System::Windows::DependencyObject, System::Windows::IInputElement, System::Windows::Media::Animation::IAnimatable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>콘텐츠 요소에 대한 WPF 핵심 수준 기본 클래스를 제공합니다. 콘텐츠 요소는 직관적인 태그 지향 레이아웃 모델 및 단순한 개체 모델을 사용하는 흐름 스타일 프레젠테이션을 위한 것입니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement> 다음과 같은 일반적인 콘텐츠 특성을 정의합니다.  
  
-   입력: 모든 <xref:System.Windows.ContentElement> 파생된 클래스에서 키보드, 마우스, 끌어서 놓기 작업, 스타일러스의 컨트롤 및 액셀러레이터 기본 입력된 캡처에 대 한 지원을 제공 합니다.  
  
-   포커스: 모든 <xref:System.Windows.ContentElement> 파생된 클래스는 잠재적으로 포커스를 받을 수 있습니다. 그러나 (에 대 한 기본 포커스 상태는 <xref:System.Windows.ContentElement> 기본 클래스는 `false`합니다. 확인 하는 방법에 대 한 자세한 내용은 <xref:System.Windows.ContentElement> 포커스를 받을 수, 참조 <xref:System.Windows.ContentElement.Focusable%2A>.) 또한이 클래스는 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 관련된 요소 간에 포커스를 통과 하는 데 사용할 수 있습니다.  
  
-   이벤트: <xref:System.Windows.ContentElement> 이벤트 포함와 관련 된 입력도 및 집중도; 상태에서 변경에 대 한 이벤트도 포함 합니다. 대부분의 경우에서는 <xref:System.Windows.ContentElement> 이벤트는 라우트된 이벤트입니다. 경우에 따라 라우트된 이벤트에는 별도 동일한 상태 또는 조건에 대 한 응답 이벤트로 발생 하는 터널링 및 버블링 라우팅 전략입니다. 또한 <xref:System.Windows.ContentElement> 정의 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] 추가 하거나 이벤트에 처리기를 제거할 수 수 raise 라우팅되는지 이벤트 및입니다.  
  
 <xref:System.Windows.ContentElement> 많은 공통 공유 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] 와 <xref:System.Windows.UIElement>합니다. 이러한 공용 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] 공유 클래스 상속의 제공 되지 않습니다. 공용 이름, 비슷한 동작을 및의 내부 구현 유사한 공유 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] 각 클래스에 있습니다. 유사성 ¿¡´ <xref:System.Windows.ContentElement> 및 <xref:System.Windows.UIElement> 태그 개체 모델 동작을 갖는 요소를 기반으로 되는 각 클래스는 있습니다.  
  
 특히, <xref:System.Windows.UIElement> 에서 상속 <xref:System.Windows.Media.Visual>, 하위 그래픽 렌더링에 대 한 지원을 제공 하는 <xref:System.Windows.ContentElement> 합성 된 창 내에서 사각형 영역으로 반면 <xref:System.Windows.ContentElement> 렌더링을 지연 되도록 자세한 개념 흐름 및 줄 바꿈, 같은 문서 시나리오에 공통 된 보다 쉽게 지원 됩니다. 이 두 클래스도 공용 인터페이스를 구현 관련 <xref:System.Windows.IInputElement> 및 <xref:System.Windows.Media.Animation.IAnimatable>합니다.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <see cref="T:System.Windows.ContentElement" /> 클래스는 전체 콘텐츠 요소는 흐름 스타일 프레젠테이션에 대 한의 모든 측면을 아직 정의 하지 않습니다. <see cref="T:System.Windows.FrameworkContentElement" /> 클래스는 즉시 파생된 클래스의 <see cref="T:System.Windows.ContentElement" />합니다. <see cref="T:System.Windows.FrameworkContentElement" /> 전체 렌더링을 지 원하는 추가 멤버 집합이 포함 되어는 <see cref="T:System.Windows.FrameworkContentElement" /> 콘텐츠 호스트 및 WPF 프레임 워크 수준 레이아웃 시스템을 사용 하 여 내에서.</para>
    </block>
    <altmember cref="T:System.Windows.UIElement" />
    <altmember cref="T:System.Windows.FrameworkContentElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContentElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContentElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.ContentElement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 라우트된 이벤트에 대해 라우트된 이벤트 처리기를 추가하여 해당 처리기를 현재 요소의 처리기 컬렉션에 추가합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">처리할 라우트된 이벤트의 식별자입니다.</param>
        <param name="handler">처리기 구현에 대한 참조입니다.</param>
        <summary>지정된 라우트된 이벤트에 대해 라우트된 이벤트 처리기를 추가하여 해당 처리기를 현재 요소의 처리기 컬렉션에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 예외가 발생 하지 않고 동일한 이벤트에 대 한 동일한 처리기를 여러 번 추가할 수 있습니다. 그러나 처리기는 실제로 이벤트를 처리 하는 여러 번 호출 됩니다. 따라서이 동작은 처리기 구현에 대해 계산 해야 하는 의도 하지 않은 있습니다 어떻게 하는 것이 좋습니다.  
  
 "추가" 접근자에 대 한 구현을 제공 하기 위해 일반적으로이 방법을 사용 하면는 [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] 사용자 지정 된 라우트된 이벤트의 이벤트 액세스 패턴입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent">처리할 라우트된 이벤트의 식별자입니다.</param>
        <param name="handler">처리기 구현에 대한 참조입니다.</param>
        <param name="handledEventsToo">
          라우트된 이벤트가 해당 이벤트 데이터에서 처리된 것으로 표시된 경우에도 처리기를 호출하도록 등록하려면 <see langword="true" />이고, 라우트된 이벤트가 이미 처리된 것으로 표시된 경우 처리기를 호출하지 않는 기본 조건으로 등록하려면 <see langword="false" />입니다.  
  
 기본값은 <see langword="false" />입니다.  
  
 라우트된 이벤트를 다시 처리하도록 자주 요청하지 마세요.</param>
        <summary>지정된 라우트된 이벤트에 대해 라우트된 이벤트 처리기를 추가하여 해당 처리기를 현재 요소의 처리기 컬렉션에 추가합니다. 이벤트 경로를 따라 다른 요소에서 처리된 것으로 이미 표시된 라우트된 이벤트에 대해 제공된 처리기를 호출하기 위해 <paramref name="handledEventsToo" />를 <see langword="true" />로 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 효율적으로 낮은 수준의 입력된 이벤트를 처리 하는 것은 복잡 한 작업입니다. 특정 이벤트를 처리 하는 것으로 표시 되 고 다른 보다 직관적인 이벤트에 의해 대체 됩니다 있는 동작을 구현 하는 많은 컨트롤입니다. 일반적으로 컨트롤은 처리 되므로 이렇게 하는 것에 대 한 디자인을 하는 경우 플랫폼 입력된 이벤트를 표시만 합니다. 특정 시나리오에서 이러한 디자인 의도 하지 못할 입력된 이벤트의 특정 처리에 필요한 사항입니다. 등록 하 이러한 시나리오는 사용 하 여 처리기 `handledEventsToo` 으로 `true` 적합 합니다. 하지만 수행 해야이 정기적으로. 처리 하는 경우에 모든 이벤트에 대 한 응답으로 처리기를 호출 하지 처리 논리가 응용 프로그램 이벤트 복잡 하 게 됩니다. 처리기 논리는 많은 경우 성능이 저하를 발생할 수 있습니다. 여기서 특정 컨트롤이 응용 프로그램 논리를 처리 하려면 이벤트를 처리 하는 개발 프로세스 중 이미 검색 한 경우 이미 처리 된 이벤트에 대 한 처리기를 연결의 사용을 예약 해야 합니다.  
  
 클래스를 특정 이벤트 제어 조합의 처리를 방지 하기 위한 또 다른 방법은 해당 이벤트의 대체 미리 보기를 사용 하는 것입니다. 예를 들어 경우 <xref:System.Windows.ContentElement.MouseLeftButtonDown> 처리 됨으로 표시 클래스 처리에 의해 수 있습니다에 대 한 처리기를 추가 하려면 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> 대신 합니다.  
  
 예외가 발생 하지 않고 동일한 이벤트에 대 한 동일한 처리기를 여러 번 추가할 수 있습니다. 그러나 처리기는 실제로 이벤트를 처리 하는 여러 번 호출 됩니다. 따라서이 동작은 처리기 구현에 대해 계산 해야 하는 의도 하지 않은 있습니다 어떻게 하는 것이 좋습니다.  
  
 "추가" 접근자에 대 한 구현을 제공 하기 위해 일반적으로이 방법을 사용 하면는 [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] 사용자 지정 된 라우트된 이벤트의 이벤트 액세스 패턴입니다.  
  
   
  
## Examples  
 다음 예제에서는 구현에서 호출 된 처리기는 <xref:System.Windows.FrameworkElement.Initialized> 페이지에서 사용 하 여 페이지에서 명명 된 요소 중 하나에 정의 된 처리기를 연결 하는 이벤트 `handledEventsToo` `true`합니다. 경로 따라 다른 요소는 경로에서 처리 요소에 도달 하기 전에 처리 되므로 공유 이벤트 데이터를 표시 하는 경우에이 처리기를 호출 합니다.  
  
 [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]
 [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route">처리기가 추가되는 이벤트 경로입니다.</param>
        <param name="e">처리기를 추가하는 데 사용되는 이벤트 데이터입니다. 이 메서드는 인수의 <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> 속성을 사용하여 처리기를 만듭니다.</param>
        <summary>현재 <see cref="T:System.Windows.EventRoute" /> 이벤트 처리기 컬렉션에 대해 지정된 <see cref="T:System.Windows.ContentElement" />에 처리기를 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 콘텐츠 호스트 요소에 대 한이 메서드를 사용 하 여 (구현 여부에 관계 없이 <xref:System.Windows.IContentHost>) 호스트에는 콘텐츠 호스트 자식 요소에 대 한 처리기를 추가 하려면 <xref:System.Windows.EventRoute>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소를 끌어서 놓기 작업의 대상으로 사용할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          이 요소를 끌어서 놓기 작업의 대상으로 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 끌어서 놓기 작업이 기본적으로 활성화 되지 않으며 설정 하 여 의도적으로 사용할 수 있어야 합니다 <xref:System.Windows.ContentElement.AllowDrop%2A> 를 `true`합니다. 이 기본 설정을 제외 끌어서 놓기 동작 구현 특정은 전적으로 및에서 정의 되지 않은 <xref:System.Windows.ContentElement> 또는 기타 요소 기본 클래스입니다. 예를 들어 특정 컨트롤을 <xref:System.Windows.Controls.RichTextBox>, 아니지만 기본 동작을 않은 <xref:System.Windows.ContentElement> 파생된 클래스는 이러한 동작이 있는 경우. 끌어서 놓기에 대 한 자세한 내용은 참조 하십시오. [놓기](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)합니다.  
  
 <xref:System.Windows.FrameworkContentElement> 구현에서이 종속성 속성에 대 한 메타 데이터를 재정의합니다. 특히, <xref:System.Windows.FrameworkContentElement> 이 속성에서는 속성 값 상속 지정 (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> 은 `true` 메타 데이터에). 이 컨텍스트에서 속성 값을 상속 하는 경우에 대 한 다른 값이 없는 자식 요소가 <xref:System.Windows.ContentElement.AllowDrop%2A> 로컬 값 또는 스타일을이 값이 할당 된 (다시, 스타일, 기본적으로 가장 가까운 부모 요소의 값을 통해 할당 값 또는 로컬 값), 해당 부모 요소의 값은 속성 시스템에서 모든 할당 되지 않은 자식 요소에 할당 합니다. 즉, 루트 요소에서 삭제 작업을 허용 하 고 다음 모든 값을 전파 여부를 지정할 수 있습니다 <xref:System.Windows.FrameworkContentElement> 자식 요소를 할당 하지 않은 특히 값 `false`합니다.  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.AllowDropProperty>|  
|로 메타 데이터 속성 설정 `true`|없음|  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Windows.ContentElement.AllowDrop%2A> 에서 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]합니다.  
  
 [!code-xaml[ContentElementsSmorgasbord#AllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#allowdrop)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.ContentElement.AllowDrop" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>이 요소의 지정된 종속성 속성에 애니메이션을 적용합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp">애니메이션 효과를 줄 속성의 식별자입니다.</param>
        <param name="clock">애니메이션을 제어하고 선언하는 애니메이션 클록입니다.</param>
        <summary>이 요소의 지정된 종속성 속성에 애니메이션을 적용합니다. 모든 기존 애니메이션이 중지되고 새 애니메이션으로 대체됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 애니메이션에서 속성을 제거 하려면 해당 속성에 대 한 식별자를 지정 `dp` 지정 `clock` 으로 `null`합니다. 애니메이션 제거한 속성 기준 값으로 설정 됩니다. 그러나 원래 연결된 애니메이션 클록 중지 되지 않습니다. 모든 애니메이션 클록 해당에 할당 된 계속 실행 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">애니메이션 효과를 주는 속성입니다.</param>
        <param name="clock">애니메이션을 제어하고 선언하는 애니메이션 클록입니다.</param>
        <param name="handoffBehavior">열거형 값입니다. 기본값은 <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />이며 이는 모든 기존 애니메이션을 중지하고 새 애니메이션으로 대체합니다.</param>
        <summary>속성에 이미 실행되는 애니메이션이 있는 경우 어떤 일이 발생할지를 지정하는 기능과 함께 이 요소의 지정된 종속성 속성에 애니메이션을 적용합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 애니메이션에서 속성을 제거 하려면 해당 속성에 대 한 식별자를 지정 `dp` 지정 `clock` 으로 `null`합니다. 애니메이션 제거한 속성 기준 값으로 설정 됩니다. 그러나 원래 연결된 애니메이션 클록 중지 되지 않습니다. 모든 애니메이션 클록 해당에 할당 된 계속 실행 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>하나 이상의 터치가 이 요소에 캡처되는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          하나 이상의 터치가 이 요소에 캡처되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.ContentElement.AreAnyTouchesCaptured" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>하나 이상의 터치가 이 요소나 시각적 트리의 임의 자식 요소에 캡처되는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          하나 이상의 터치가 이 요소나 시각적 트리의 임의 자식 요소에 캡처되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소 위에서 하나 이상의 터치를 눌렀는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          이 요소 위에서 하나 이상의 터치를 눌렀으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소나 시각적 트리의 임의 자식 요소 위에서 하나 이상의 터치를 눌렀는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          이 요소나 시각적 트리의 임의 자식 요소 위에서 하나 이상의 터치를 눌렀으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.ContentElement.AreAnyTouchesOver" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>이 요소에서 지정된 애니메이션 속성에 대한 애니메이션을 시작합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp">종속성 속성 식별자로 지정된, 애니메이션을 지정할 속성입니다.</param>
        <param name="animation">시작할 애니메이션의 Timeline입니다.</param>
        <summary>이 요소에서 지정된 애니메이션 속성에 대한 애니메이션을 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 속성에 애니메이션을 여부를 확인 하는 경우 note 애니메이션 시작 되 고 간주할 애니메이션이 적용 되지 않은 시작 지점 벗어난 첫 번째 프레임이 렌더링 되 면에 애니메이션 합니다.  
  
 경우는 <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> 에 대 한 `animation` 은 `null`, 그런 다음 현재 애니메이션이 모두 제거 되 고 속성의 현재 값이 유지 됩니다.  
  
 경우 전체 `animation` 값은 `null`, 모든 애니메이션이 속성에서 제거 되 고 속성 값 기준 값으로 돌아갑니다. 그러나 원래 연결된 애니메이션 타임 라인 중지 되지 않습니다. 해당 일정에 할당 된 다른 애니메이션 계속 실행 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">종속성 속성 식별자로 지정된, 애니메이션을 지정할 속성입니다.</param>
        <param name="animation">적용할 애니메이션의 Timeline입니다.</param>
        <param name="handoffBehavior">새 애니메이션이 이미 속성 값에 영향을 주고 있는 현재(실행 중인) 애니메이션과 상호 작용하는 방법을 지정하는 열거형 값입니다.</param>
        <summary>속성에 이미 실행 중인 애니메이션이 있는 경우 수행할 동작을 지정하는 옵션을 사용하여 이 요소의 지정된 애니메이션 속성에 대해 특정 애니메이션을 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 속성에 애니메이션을 여부를 확인 하는 경우 note 애니메이션 시작 되 고 간주할 애니메이션이 적용 되지 않은 시작 지점 벗어난 첫 번째 프레임이 렌더링 되 면에 애니메이션 합니다.  
  
 경우는 <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> 에 대 한 `animation` 은 `null`, 그런 다음 현재 애니메이션이 모두 제거 되 고 속성의 현재 값이 유지 됩니다.  
  
 경우 전체 `animation` 값은 `null`, 모든 애니메이션이 속성에서 제거 되 고 속성 값 기준 값으로 돌아갑니다. 그러나 원래 연결된 애니메이션 타임 라인 중지 되지 않습니다. 해당 일정에 할당 된 다른 애니메이션 계속 실행 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 요소가 마우스를 캡처하게 합니다.</summary>
        <returns>
          마우스가 캡처되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 캡처할 수 요소를 사용할 수 있어야 합니다. 확인 여부 <xref:System.Windows.ContentElement.IsEnabled%2A> 은 `true` 호출 하기 전에 <xref:System.Windows.ContentElement.CaptureMouse%2A>합니다.  
  
 호출 하는 경우 <xref:System.Windows.ContentElement.CaptureMouse%2A> 반환 `true`, 다음 <xref:System.Windows.ContentElement.IsMouseCaptured%2A> 이기도 `true`합니다.  
  
 호출 하는 경우 <xref:System.Windows.ContentElement.CaptureMouse%2A> 반환 `true`, 하면 <xref:System.Windows.ContentElement.GotMouseCapture> 및 <xref:System.Windows.ContentElement.IsMouseCapturedChanged> 이벤트가 발생와 <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> 데이터 요소와 보고 하는 이벤트에 여기서는 <xref:System.Windows.ContentElement.CaptureMouse%2A> 메서드를 호출 합니다. 캡처를 강제 적용 하는 경우에 기존 캡처 충돌할 수 있습니다-특히 마우스 끌어서 놓기와 관련 된 캡처를 사용 합니다.  
  
 모든 요소에서 마우스 캡처를 지우려면 호출 <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> 와 `element` 매개 변수로 제공 `null`합니다.  
  
   
  
## Examples  
 다음 예제에서는 마우스를 캡처하거나 되는 요소에 의해 이미 캡처되어 있는지 여부에 따라 캡처를 해제 합니다. 이 예에서는 캐스팅을 예상 캡처 대상 요소를 유의 <xref:System.Windows.IInputElement> 인터페이스를 호출 하 고는 <xref:System.Windows.IInputElement.CaptureMouse%2A?displayProperty=nameWithType> 메서드. 캐스팅 <xref:System.Windows.IInputElement> 은 캡처 하려는 요소 마우스 인지 확실 하지 않은 경우에 유용 하는 기술은 <xref:System.Windows.UIElement> 또는 <xref:System.Windows.ContentElement>합니다. 인터페이스 캐스트 및 인터페이스 메서드 호출 후 적합 한 형식 특정 CaptureMouse 구현 내부적으로 캐스팅을 시험적 <xref:System.Windows.UIElement> 또는 <xref:System.Windows.ContentElement>합니다. 이 캐스팅 기술은 다른 멤버에 대 한는 <xref:System.Windows.IInputElement> 정의 예를 들어 많은 입력 관련 이벤트 및 다른 입력 관련 방법.  
  
 [!code-csharp[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#ismousecaptured)]
 [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 요소가 스타일러스를 캡처하게 합니다.</summary>
        <returns>
          스타일러스가 캡처되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 구현은 항상 기본 기본 스타일러스 장치에 따라 반환 `true`합니다. 그러나, 입력된 시스템에 대 한 장치 구현을 제공 하는 입력된 장치를 확장 하는 경우 다른 결과 반환할 수 있는 대체 스타일러스 장치 구현으로 시스템을 만들 수는 있습니다.  
  
 스타일러스를 캡처한 요소 스타일러스가 해당 경계 밖에 있는 경우에 스타일러스 입력을 받습니다. 스타일러스가 일반적으로 끌어서 놓기 작업 중에 캡처됩니다.  
  
 이 메서드를 호출는 내부 정적 <xref:System.Windows.Input.Stylus> 메서드 <xref:System.Windows.Input.Stylus.Capture%2A>합니다. 기본 캡처 동작이 활성 스타일러스 장치 구현에 의해 구현 됩니다.  
  
 캡처할 수 요소를 사용할 수 있어야 합니다. 확인 여부 <xref:System.Windows.ContentElement.IsEnabled%2A> 은 `true` 호출 하기 전에 반환 <xref:System.Windows.ContentElement.CaptureStylus%2A>합니다.  
  
 호출 하는 경우 <xref:System.Windows.ContentElement.CaptureStylus%2A> 반환 `true`, <xref:System.Windows.ContentElement.IsStylusCaptured%2A> 이기도 `true`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">캡처할 장치입니다.</param>
        <summary>이 요소에 터치를 캡처하도록 강제합니다.</summary>
        <returns>
          지정된 터치가 이 요소에 캡처되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.CaptureTouch%2A> 반환 `false` 경우는 <xref:System.Windows.Input.TouchDevice> 현재 다른 요소에 캡처됩니다.  
  
 경우 <xref:System.Windows.ContentElement.CaptureTouch%2A> 반환 `true`, 그런 다음 <xref:System.Windows.ContentElement.GotTouchCapture> 이벤트가 발생 합니다.  
  
 이 요소에서 단일 터치의 캡처를 해제 하려면 사용는 <xref:System.Windows.ContentElement.ReleaseTouchCapture%2A> 메서드 터치 장치 릴리스를 지정 합니다. 이 요소에서 모든 터치를 해제 하기 위해 사용 하 여는 <xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="touchDevice" />가 <see langword="null" />인 경우</exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소와 연결된 <see cref="T:System.Windows.Input.CommandBinding" /> 개체의 컬렉션을 가져옵니다.</summary>
        <value>모든 <see cref="T:System.Windows.Input.CommandBinding" /> 개체의 컬렉션입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Input.CommandBinding> 이 요소에 대 한 특정 명령의 명령 처리를 사용 하 고 명령, 해당 이벤트 및이 요소에 의해 연결 된 처리기 사이의 링크를 선언 합니다.  
  
 또 다른 일반적인 방법은 채우는 데는 <xref:System.Windows.ContentElement.CommandBindings%2A> 를 사용 하는 컬렉션 <xref:System.Windows.Input.CommandManager> 메서드 프로그래밍 방식으로 합니다.  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a>XAML 속성 요소 사용  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a>XAML 값  
 *oneOrMoreCommandBindings*  
 하나 이상의 <xref:System.Windows.Input.CommandBinding> 요소입니다. 이러한 각 있어야는 <xref:System.Windows.Input.CommandBinding.Command%2A> 특성이 알려진된 명령으로 설정 하 고 특성에 대 한 설정에서 <xref:System.Windows.Input.CommandBinding.CanExecute> 및 <xref:System.Windows.Input.CommandBinding.Executed> 처리기를 구현 합니다. 자세한 내용은 <xref:System.Windows.Input.CommandBinding>을 참조하세요.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>입력 시스템에서 이 요소를 끌기 대상으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.DragEnter?displayProperty=nameWithType> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.DragEnter> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.DragEnterEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.DragEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewDragEnter>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnDragEnter%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.DragEnter" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>입력 시스템에서 이 요소를 끌기 원본으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.DragLeave?displayProperty=nameWithType> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.DragLeave> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.DragLeaveEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.DragEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.DragDrop.PreviewDragLeave>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnDragLeave%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
        <altmember cref="E:System.Windows.ContentElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.DragLeave" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>입력 시스템에서 이 요소를 잠재적인 놓기 대상으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트는 끌기 요소 범위에서 시작 하는 경우에 발생 합니다. 끌기 범위 외부에서 시작, 내부 이동 후도이 이벤트가 발생 하는 경우와 <xref:System.Windows.ContentElement.DragEnter> 및 관련 미리 보기 이벤트입니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.DragOver?displayProperty=nameWithType> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.DragOver> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.DragOverEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.DragEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.DragDrop.PreviewDragOver>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnDragOver%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
        <altmember cref="E:System.Windows.ContentElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.DragOver" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>입력 시스템에서 이 요소를 놓기 대상으로 사용하는 기본 놓기 이벤트를 보고하면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.Drop?displayProperty=nameWithType> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.Drop> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.DropEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.DragEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewDrop>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnDrop%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.Drop" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 요소에 포커스를 설정하려고 시도합니다.</summary>
        <returns>
          이 요소에 키보드 포커스를 설정할 수 있으면 <see langword="true" />이고, 이 메서드를 호출해도 포커스를 강제 설정하지 못한 경우에는 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 포커스를 <xref:System.Windows.ContentElement.Focusable%2A> 및 <xref:System.Windows.ContentElement.IsEnabled%2A> 모두 `true`합니다. 거의 모든 <xref:System.Windows.ContentElement> 파생된 클래스가 없는 <xref:System.Windows.ContentElement.Focusable%2A> 기본적으로 합니다.  
  
 요소가 이면 특정 트리 내에서 포커스를 받을 수 하 고 사용 가능한 이벤트 처리 하는 경우에 포커스를 허용 하지 않음으로써 미리 보기 포커스 이벤트에 응답할 수 있습니다 (예: 합성 컨트롤) 하므로이 메서드는 반환 `false`합니다.  
  
 포커스 일반적 두 개의 별개의 개념에 의해 관리: 키보드 포커스와 논리 포커스를 항상 동일 하지 않은입니다. 이 메서드는 논리적 포커스를 설정합니다. 키보드 포커스를 특별히; 설정에 프로그래밍 방식으로 이란 키보드 포커스는 사용자 입력에 따라 결정 됩니다. 자세한 내용은 참조 [포커스 개요](~/docs/framework/wpf/advanced/focus-overview.md) 및 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
 호출 하는 경우 <xref:System.Windows.ContentElement.Focus%2A> 반환 `true`, <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> 및 <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> 도 `true`합니다.  
  
 관련된 속성이 없는 경우 `true`호출 하는 경우, <xref:System.Windows.ContentElement.Focus%2A>, 다음과 같은 순서로 발생 하는 다음 이벤트 중 하나 이상이: <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>, <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> (소스는 새 포커스 대상), <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>, <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.ContentElement.LostKeyboardFocus>, <xref:System.Windows.ContentElement.GotKeyboardFocus> (소스 대상인 새 포커스).  
  
   
  
## Examples  
 다음 예제에서는 지정 된 문서에서 단락 라는 발견 하는 페이지가 로드 이벤트 처리기 및 포커스를 설정 합니다. 단락 기본적으로 하지 않습니다. 이 특정 단락에 적용 되는 스타일 스타일을 사용 하는 (표시 되지 않음) <xref:System.Windows.Setter> 포커스를 받을 수 있도록 합니다.  
  
 [!code-csharp[ContentElementsSmorgasbord#Focus](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#focus)]
 [!code-vb[ContentElementsSmorgasbord#Focus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#focus)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소가 포커스를 받을 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          요소가 포커스를 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 포커스가 있는 요소는 키보드 입력을 받습니다.  
  
 파생된 클래스는 기본적으로 포커스를 받을 수 있도록 특정 파생된 클래스에서이 종속성 속성에 대 한 메타 데이터를 재정의할 수 있습니다.  
  
 상속 되는 경우 <xref:System.Windows.Documents.Hyperlink> 또는 해당 파생된 클래스 <xref:System.Windows.Documents.Hyperlink> 이 종속성 속성에 대 한 메타 데이터를 재정의 하 고이 속성의 기본값을 재정의 `true`합니다.  
  
<a name="dependencyPropertyInfo_Focusable"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.FocusableProperty>|  
|로 메타 데이터 속성 설정 `true`|없음|  
  
   
  
## Examples  
 스타일을 만드는 다음 예제는 <xref:System.Windows.Documents.Paragraph> 기본적으로 포커스를 받을 수 및 포커스를 받을 때 시각적 동작을 제공 합니다.  
  
 [!code-xaml[ContentElementsSmorgasbord#Focusable](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#focusable)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 시키는 경우 <see cref="T:System.Windows.ContentElement" />, 프로그램 요소를 기본적으로는 되지 않아 포커스를 사용할지 고려해 야 합니다. 프로그램 요소를 원하는 경우 파생된 클래스 정적 생성자에서이 속성에 대 한 메타 데이터를 다음과 같이 재정의:  
  
 [!code-csharp[CorePseudocode#UIElementShortOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementshortoverride)]
 [!code-vb[CorePseudocode#UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)]  
  
 여기서 <paramref name="myElement" /> 에 메타 데이터 값을 재정의 하는 형식의 클래스 이름입니다.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.ContentElement.Focusable" /> 속성 값이 변경되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트, 라우트된 이벤트가 아니라 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.ContentElement.Focusable" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">확인할 종속성 속성입니다.</param>
        <summary>실행하거나 중지된 애니메이션의 가능한 애니메이션 값을 모두 무시하고 이 요소에 대해 지정된 속성의 기본 속성 값을 반환합니다.</summary>
        <returns>지정된 종속성 속성에 연결된 애니메이션이 없는 경우와 동일한 속성 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 속성에 연결 된 애니메이션이 없는 경우 하면 <xref:System.Windows.ContentElement.GetAnimationBaseValue%2A> 반환 값은 항상 동일는 <xref:System.Windows.DependencyObject.GetValue%2A> 값을 반환 합니다. 애니메이션이 연결 인 경우 모든 가능한 애니메이션 시작 부분을 포함 하 여 값을 파생 하는 다음 및 중지 값 무시 되 고 속성 값이 가능한 다른 모든 입력에 따라 결정 됩니다. 자세한 내용은 [종속성 속성 값 우선 순위](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)를 참조하세요.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>파생 클래스에서 재정의되는 경우 시각적 부모가 없으면 이 요소에 대해 다른 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 부모를 반환합니다.</summary>
        <returns>파생 클래스 구현에 보고할 다른 부모 연결이 있는 경우의 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드의 기본 가상 구현 반환 `null`합니다. <xref:System.Windows.FrameworkContentElement> 실제 구현을 제공합니다.  
  
 대체 부모가 있는 요소를 만들어 경우 대체 부모 구조체 이벤트 라우트 되도록 표준 부모 시각적 트리를 라우팅의 표준 패턴에서와 차이가 하는 방식에서, 이벤트 라우팅에 사용 되는 중이거나에서 아래쪽의 라우팅 전략을 미리 봅니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>입력 시스템에서 이 요소를 포함하는 기본 끌어서 놓기 이벤트를 보고하면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.GiveFeedback> 이벤트를 사용 하면 끌어서 놓기 작업 중 사용자의 시각적 피드백을 제공 하기 위해 마우스 포인터의 모양을 수정 하려면 끌기 이벤트의 소스입니다. 시각적 피드백 끌어서 놓기 작업이 진행 되는 것입니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.GiveFeedback> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.GiveFeedback> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.GiveFeedbackEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewGiveFeedback>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnGiveFeedback%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.GiveFeedback" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소가 논리 포커스를 가져오면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 메서드 호출을 사용 하 여 포커스를 강제로 했지만 이전 키보드 포커스가 다른 범위에 있는 경우 논리적 포커스와 키보드 포커스가 다릅니다. 이 시나리오에서는 키보드 포커스가 유지 되 고 요소에는 <xref:System.Windows.ContentElement.Focus%2A> 메서드는 여전히 논리적 포커스를 가져옵니다.  
  
 이 이벤트의 보다 정확 하 게 설명은 발생할 때의 값은 <xref:System.Windows.ContentElement.IsFocused%2A> 경로에 있는 요소의 속성에서 변경 되 `false` 를 `true`합니다.  
  
 이 이벤트는 버블링 라우팅을 사용 하므로 포커스를 받는 요소 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다. 확인은 <xref:System.Windows.RoutedEventArgs.Source%2A> 에 포커스가 있는 실제 요소를 확인 하기 위해 이벤트 데이터입니다.  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.GotFocusEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.RoutedEventHandler>|  
  
-   해당 터널링 이벤트가 없습니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnGotFocus%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.GotFocus" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소에 키보드 포커스가 있으면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> 요소;에 대 한 포커스 상태를 유지 하는 속성에서 상태 변경을 추적 하는 유사한 이벤트 <xref:System.Windows.ContentElement.GotKeyboardFocus> 이벤트는 대부분의 동일한 상황에서 발생 합니다.  
  
 이 이벤트는 버블링 라우팅을 사용 하므로 포커스가 있는 요소는 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다. 확인의 <xref:System.Windows.RoutedEventArgs.Source%2A> 이벤트 데이터에 포커스가 있는 실제 요소를 확인 합니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.GotKeyboardFocus> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.GotKeyboardFocus> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.GotKeyboardFocusEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.GotKeyboardFocus" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소가 마우스를 캡처하면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 마우스를 캡처한 요소 마우스 포인터가 해당 경계 밖에 있는 경우에 마우스 입력을 받습니다. 마우스는 일반적으로 끌어서 놓기 작업 중에 캡처됩니다 및 끌어서 놓기 작업의 삭제 동작이 발생할 때까지 캡처된 상태로 유지 됩니다.  
  
 이 이벤트는 버블링 라우팅을 사용 하기 때문에 캡처를 가진 요소를 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다. 확인 된 <xref:System.Windows.RoutedEventArgs.Source%2A> 마우스 있는 실제 요소를 결정 하는 데이터의 캡처 이벤트입니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.GotMouseCapture> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.GotMouseCapture> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.GotMouseCaptureEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   정의 된 해당 터널링 이벤트가 없습니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnGotMouseCapture%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.GotMouseCapture" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소가 스타일러스를 캡처하면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 스타일러스를 캡처한 요소 포인터가 해당 경계 밖에 있는 경우에 스타일러스 입력을 받습니다. 스타일러스가 끌어서 놓기 작업의 삭제 동작이 발생할 때까지 캡처를 저장 하 고는 일반적으로 끌어서 놓기 작업 중에 캡처됩니다.  
  
 이 이벤트는 버블링 라우팅을 사용 하기 때문에 캡처를 가진 요소를 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다. 확인은 <xref:System.Windows.RoutedEventArgs.Source%2A> 이벤트 데이터 캡처를 가진 실제 요소를 확인 합니다.  
  
 이 이벤트는이 클래스에 대 한 연결 된 이벤트에 대 한 별칭을 만들어 있도록 <xref:System.Windows.ContentElement.GotStylusCapture> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.GotStylusCapture> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.GotStylusCaptureEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   정의 된 해당 터널링 이벤트가 없습니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnGotStylusCapture%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.GotStylusCapture" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소에 터치가 캡처될 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.GotTouchCaptureEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.|  
  
-   재정의 <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.GotTouchCapture" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소에 애니메이션이 적용된 속성이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          이 요소의 속성에 애니메이션이 연결되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 반환 `true` 영구 (unclocked, 항상 실행 중) 애니메이션이 또는 특정 시간 표시 막대의 애니메이션 중 하나입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소와 연결된 입력 바인딩 컬렉션을 가져옵니다.</summary>
        <value>입력 바인딩 컬렉션입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 입력된 바인딩 입력 장치에 있는 명령의 바인딩을 지원 합니다. 예를 들어 <xref:System.Windows.Input.MouseBinding> 입력 마우스 장치와 관련 된 속성을 포함 하는 바인딩을 구현 합니다.  
  
 입력된 바인딩 컬렉션에는 형식과 관련 된 입력된 바인딩을 모두 및 인스턴스에서 선언도 포함 됩니다.  
  
 관련된 속성인 <xref:System.Windows.ContentElement.CommandBindings%2A>, 명령 바인딩의 컬렉션을 유지 합니다. 이러한 바인딩은 입력된 바인딩 한다는 점에서 다릅니다 명령 처리에 대 한 알려진된 명령 및 관련 클래스 처리기에 연결 된 작업의 다음 수준 아래로 나타냅니다.  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a>XAML 속성 요소 사용  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a>XAML 값  
 *oneOrMoreInputBindings*  
 하나 이상의 <xref:System.Windows.Input.InputBinding> 요소 (일반적으로 <xref:System.Windows.Input.KeyBinding> 또는 <xref:System.Windows.Input.MouseBinding> 파생 클래스). 사용할 수는 이러한 각는 <xref:System.Windows.Input.InputBinding.Command%2A> 및 <xref:System.Windows.Input.InputBinding.Gesture%2A> 특성이 설정 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소를 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]에서 사용할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          요소를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.IsEnabledProperty>|  
|로 메타 데이터 속성 설정 `true`|없음|  
  
   
  
## Examples  
 다음 예제에서는 다른 시각적 동작을 제공 하는 속성 setter를 포함 하는 스타일 때는 <xref:System.Windows.Documents.Hyperlink> 로 설정 된 <xref:System.Windows.ContentElement.IsEnabled%2A> `false`합니다.  
  
 [!code-xaml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#isenabledismouseover)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소의 <see cref="P:System.Windows.ContentElement.IsEnabled" /> 속성 값이 변경되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트, 라우트된 이벤트가 아니라 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>파생 클래스에서 <see cref="P:System.Windows.ContentElement.IsEnabled" />의 반환 값이 되는 값을 가져옵니다.</summary>
        <value>
          요소를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>이 속성의 기본 구현 값을 캐시 하 고도이 요소의 부모 요소를 사용할 수 있는지 여부를 계산 합니다. (부모를 사용 하지 않는 경우 자식 요소가 없습니다 사용 하도록 유용한 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].) 이 구현을 재정의 확인 하려는 경우이 동작을 유지 하는 기본 구현을 호출 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.ContentElement.IsEnabled" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소에 논리 포커스가 있는지 여부를 결정하는 값을 가져옵니다.</summary>
        <value>
          이 요소에 논리적 포커스가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 응용 프로그램에 여러 포커스 부서와 같은 응용 프로그램의 나머지 부분에서는 메뉴 내용 사이의 논리적 포커스와 키보드 포커스가 달라질 수 있습니다. 이 시나리오에서는 응용 프로그램 UI의 한 요소에 키보드 포커스만 될 수 있습니다, 그리고 다른 포커스 사업부의 특정 요소 논리적 포커스 수 계속 유지 하는 반면 합니다. 논리 포커스에 대 한 자세한 내용은 참조 하십시오. [입력 개요](~/docs/framework/wpf/advanced/input-overview.md) 및 [포커스 개요](~/docs/framework/wpf/advanced/focus-overview.md)합니다.  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.IsFocusedProperty>|  
|로 메타 데이터 속성 설정 `true`|없음|  
  
   
  
## Examples  
 스타일을 만드는 다음 예제는 <xref:System.Windows.Documents.Paragraph> 기본적으로 포커스를 받을 수 및 포커스를 받을 때 시각적 동작을 제공 합니다.  
  
 [!code-xaml[ContentElementsSmorgasbord#Focusable](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#focusable)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.ContentElement.IsFocused" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>[!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)] 등의 입력 메서드 시스템에서 이 요소에 대한 입력을 처리할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          입력 메서드가 활성 상태이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본 연결 된 속성의 기본값은 <see langword="true" />이지만이 값은 런타임에 입력된 방법의 상태를 받습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 연결 된 속성에서 반환 되는 값을 반환 <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> 현재 활성화 된 입력된 방법 (키보드, 음성 변환, 및 기타 입력된 장치)에 대 한 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소에 키보드 포커스가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          이 요소에 키보드 포커스가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.IsKeyboardFocusedProperty>|  
|로 메타 데이터 속성 설정 `true`|없음|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotFocus" />
        <altmember cref="E:System.Windows.ContentElement.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소의 <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /> 속성 값이 변경되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트, 라우트된 이벤트가 아니라 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>키보드 포커스가 요소 내에 있는지 아니면 자식 요소에 있는지를 나타내는 값을 가져옵니다.</summary>
        <value>
          키보드 포커스가 요소 또는 자식 요소에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성의 값을 변경 하는 일반적으로 발생는 <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> 이벤트의 경우 파생된 클래스 재정의 하지 않았다면 <xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A> 이벤트를 표시 하지 않으려면입니다.  
  
 이 속성은 직접 설정 하지는 않지만 호출 하 여 요소에 포커스를 설정할 수 <xref:System.Windows.ContentElement.Focus%2A>, 하거나 여는 <xref:System.Windows.ContentElement.MoveFocus%2A> 요청 합니다. 이 속성 값이 변경 될 수 있습니다 이러한 메서드 호출 중 하나입니다.  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.IsKeyboardFocusWithinProperty>|  
|로 메타 데이터 속성 설정 `true`|없음|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소의 <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /> 속성 값이 변경되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트, 라우트된 이벤트가 아니라 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.ContentElement.IsKeyboardFocusWithin" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스가 이 요소에 의해 캡처되었는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          요소에 마우스가 캡처되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 마우스 캡처 상태는 in-process 끌어서 놓기 작업 관련이 있습니다.  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.IsMouseCapturedProperty>|  
|로 메타 데이터 속성 설정 `true`|없음|  
  
   
  
## Examples  
 다음 예제에서는 켜거나 마우스 캡처 상태는 요소에서 이미 캡처되어 있는지 여부에 따라 합니다.  
  
 [!code-csharp[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#ismousecaptured)]
 [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
        <altmember cref="E:System.Windows.ContentElement.GotMouseCapture" />
        <altmember cref="E:System.Windows.ContentElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소의 <see cref="P:System.Windows.ContentElement.IsMouseCaptured" /> 속성 값이 변경되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트, 라우트된 이벤트가 아니라 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.ContentElement.IsMouseCaptured" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 캡처가 이 요소 또는 해당 요소 트리의 자식 요소에 의해 보류되는지 여부를 결정하는 값을 가져옵니다.</summary>
        <value>
          이 요소 또는 포함된 요소에 마우스 캡처가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.IsMouseCaptureWithinProperty>|  
|로 메타 데이터 속성 설정 `true`|없음|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소의 <see cref="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" /> 값이 변경되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트, 라우트된 이벤트가 아니라 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 포인터의 위치가 요소 합치기를 고려한 적중 횟수 테스트 결과와 일치하는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          <see langword="true" /> 마우스 포인터가 적중 횟수 테스트와 동일한 요소 결과 위에 있으면 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 와 달리 <xref:System.Windows.ContentElement.IsMouseOver%2A>,이 속성은만 `true` 마우스 포인터가 literal 요소 위에 있으면-적중 횟수 테스트의 경우와 합니다. 마우스 포인터가 자식 요소 위에 있으면 특히 요소의 하위 수준 템플릿 및 합성 포함 된 요소를 통해이 속성은 됩니다 `false`합니다. 컨트롤은 복합 방법을 모를 경우 (예를 들어이 속성 사용 하면 사용자 지정 컨트롤 서식 파일에서 정의 하는 컨트롤에 대 한),이 속성에서 예기치 않은 결과 반환할 수 있습니다. 컨트롤 제작 하지 않는 대부분의 시나리오에 대 한 사용 <xref:System.Windows.ContentElement.IsMouseOver%2A> 대신 합니다.  
  
 이 요소에 마우스가 캡처되는지 경우 및이 속성은 `true` 캡처 시이 속성은 반환할 계속 `true` 때까지 마우스 캡처가 손실 되 고 해당 영역 위에 포인터가 않습니다.  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.IsMouseDirectlyOverProperty>|  
|로 메타 데이터 속성 설정 `true`|없음|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소의 <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /> 속성 값이 변경되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트, 라우트된 이벤트가 아니라 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 포인터가 시각적 자식 요소 또는 해당 컨트롤 합성을 포함하여 이 요소 위에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          마우스 포인터가 요소 또는 자식 요소 위에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 유사한 "IsMouseOverChanged" 이벤트가 존재 하지 않더라도 여러 비슷한 이벤트 수행 합니다. 사용할 수는 예를 들어 <xref:System.Windows.ContentElement.MouseEnter>, <xref:System.Windows.ContentElement.MouseMove>, 및 <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged>합니다.  
  
 이 속성은이 요소에서 마우스를 캡처할 경우 `true` 마우스 캡처가 손실 되 고 마우스 포인터가 요소 범위를 벗어날 때까지 합니다.  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.IsMouseOverProperty>|  
|로 메타 데이터 속성 설정 `true`|없음|  
  
   
  
## Examples  
 다음 예제에서는 다른 시각적 동작을 제공 하는 속성 setter를 포함 하는 스타일 때는 <xref:System.Windows.Documents.Hyperlink> 보고서 <xref:System.Windows.ContentElement.IsMouseOver%2A> `true`합니다.  
  
 [!code-xaml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#isenabledismouseover)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.ContentElement.IsMouseOver" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소에 스타일러스가 캡처되는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          요소에 스타일러스가 캡처되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.IsStylusCapturedProperty>|  
|로 메타 데이터 속성 설정 `true`|없음|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureStylus" />
        <altmember cref="E:System.Windows.ContentElement.GotStylusCapture" />
        <altmember cref="E:System.Windows.ContentElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소의 <see cref="P:System.Windows.ContentElement.IsStylusCaptured" /> 속성 값이 변경되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트, 라우트된 이벤트가 아니라 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.ContentElement.IsStylusCaptured" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>자식 요소 및 컨트롤 합성을 포함하여 스타일러스 캡처를 이 요소에서 보관하는지를 결정하는 값을 가져옵니다.</summary>
        <value>
          스타일러스 캡처가 이 요소 내에 보관되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.IsStylusCaptureWithinProperty>|  
|로 메타 데이터 속성 설정 `true`|없음|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소의 <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /> 속성 값이 변경되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트, 라우트된 이벤트가 아니라 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>스타일러스의 위치가 요소 합치기를 고려한 적중 횟수 테스트 결과와 일치하는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          스타일러스가 적중 테스트와 같은 요소 위에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 와 달리 <xref:System.Windows.ContentElement.IsStylusOver%2A>,이 속성은만 `true` 스타일러스가 요소 위에 있는 경우. 스타일러스가 요소의 하위 수준 합성 요소 또는 자식 요소 위에 있는 경우이 속성은 됩니다 `false`합니다.  
  
 컨트롤은 복합 방법을 모를 경우 (예를 들어이 속성 사용 하면 사용자 지정 컨트롤 서식 파일에서 정의 하는 컨트롤에 대 한),이 속성에서 예기치 않은 결과 반환할 수 있습니다. 컨트롤 제작 하지 않는 대부분의 시나리오에 대 한 사용 <xref:System.Windows.ContentElement.IsStylusOver%2A> 대신 합니다.  
  
 이 속성은이 요소에 스타일러스 캡처가 경우 `true` 캡처 시이 속성은 `true` 스타일러스 캡처를 손실 하 고는 스타일러스가 범위 위로 때까지 합니다.  
  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.IsStylusDirectlyOverProperty>|  
|로 메타 데이터 속성 설정 `true`|없음|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소의 <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /> 속성 값이 변경되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트, 라우트된 이벤트가 아니라 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>스타일러스가 시각적 자식 요소를 포함하여 이 요소 위에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          스타일러스가 요소 또는 자식 요소 위에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은이 요소에 스타일러스 캡처가, `true` 스타일러스 캡처를 손실 하 고 포인터의 범위를 벗어났습니다.  
  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.IsStylusOverProperty>|  
|로 메타 데이터 속성 설정 `true`|없음|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.ContentElement.IsStylusOver" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소에 포커스가 있는 동안 키를 누르면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 키 처리 명령 및 텍스트 컴퍼지션 등 다른 플랫폼의 기능으로 작용합니다. <xref:System.Windows.ContentElement.KeyDown> 이벤트는 하위 수준의 텍스트 입력된 이벤트를 특정 컨트롤에 예상 대로 동작 하지 않을 수 있습니다. 일부 컨트롤은 컨트롤 합성 클래스 처리에 더 높은 수준의 버전의 텍스트를 제공 하는 입력 처리 및 관련 이벤트 또는 때문입니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.KeyDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.KeyDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.KeyDownEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewKeyDown>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnKeyDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.KeyDown" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소에 포커스가 있는 동안 키를 놓을 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.KeyUp> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.KeyUp> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.KeyUpEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewKeyUp>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnKeyUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.KeyUp" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소가 논리 포커스를 손실하면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 메서드 호출을 사용하여 의도적으로 포커스를 다른 위치로 이동했지만 이전 키보드 포커스가 다른 범위에 존재하는 경우 논리적 포커스와 키보드 포커스가 달라집니다. 이 시나리오, 키보드 포커스 위치를 유지, 및 요소에 있는 한 <xref:System.Windows.ContentElement.Focus%2A> 메서드는 여전히 논리적 포커스를 가져옵니다.  
  
 이 이벤트의 보다 정확 하 게 설명은 발생할 때의 값은 <xref:System.Windows.ContentElement.IsFocused%2A> 에서 경로에 있는 요소의 속성 변경 `true` 를 `false`합니다.  
  
 이 이벤트는 버블링 라우팅을 사용 하므로 포커스를 손실 하는 요소는 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다. 확인은 <xref:System.Windows.RoutedEventArgs.Source%2A> 에 포커스가 있는 실제 요소를 확인 하기 위해 이벤트 데이터입니다.  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.LostFocusEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.RoutedEventHandler>|  
  
-   해당 터널링 이벤트가 없습니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnLostFocus%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.LostFocus" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소에 더 이상 키보드 포커스가 없으면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트는 버블링 라우팅을 사용 하므로 포커스를 잃은 요소 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다. 확인은 <xref:System.Windows.RoutedEventArgs.Source%2A> 에 포커스를 잃은 실제 요소를 확인 하기 위해 이벤트 데이터입니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.LostKeyboardFocus> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.LostKeyboardFocus> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.LostKeyboardFocusEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.LostKeyboardFocus" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소가 마우스 캡처를 손실하면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 마우스를 캡처한 요소 포인터가 해당 경계 밖에 있는 경우에 마우스 입력을 받습니다. 마우스는 끌어서 놓기 작업 중에 일반적으로 캡처됩니다.  
  
 이 이벤트는 버블링 라우팅을 사용 하므로 캡처를 손실 하는 요소는 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다. 확인 된 <xref:System.Windows.RoutedEventArgs.Source%2A> 이벤트 데이터 캡처를 손실 하는 실제 요소를 확인 합니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.LostMouseCapture> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.LostMouseCapture> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.LostMouseCaptureEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   정의 된 해당 터널링 이벤트가 없습니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnLostMouseCapture%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.LostMouseCapture" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소가 스타일러스 캡처를 손실하면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 스타일러스를 캡처한 요소 포인터가 해당 경계 밖에 있는 경우에 스타일러스 입력을 받습니다. 스타일러스가 일반적으로 끌어서 놓기 작업 중에 캡처됩니다.  
  
 이 이벤트는 버블링 라우팅을 사용 하므로 포커스를 손실 하는 요소는 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다. 확인은 <xref:System.Windows.RoutedEventArgs.Source%2A> 에 포커스를 잃은 실제 요소를 확인 하기 위해 이벤트 데이터입니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.LostStylusCapture> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.LostStylusCapture> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.LostStylusCaptureEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   정의 된 해당 터널링 이벤트가 없습니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnLostStylusCapture%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.LostStylusCapture" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소에서 터치 캡처가 손실될 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.LostTouchCaptureEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.|  
  
-   재정의 <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.LostTouchCapture" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>포인터가 이 요소 위에 있는 동안 마우스 단추를 누르면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.MouseDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.MouseDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 <xref:System.Windows.ContentElement.MouseDown> 종종 발생과 함께 <xref:System.Windows.ContentElement.MouseLeftButtonDown> 또는 <xref:System.Windows.ContentElement.MouseRightButtonDown>, 두 개의 표준 마우스 단추 중 하나를 누르는 것에 해당 하는 합니다. <xref:System.Windows.ContentElement.MouseLeftButtonDown> 및 <xref:System.Windows.ContentElement.MouseRightButtonDown> 라우트된 이벤트를는 있지만 직접 라우트된 이벤트를 서로 하며 적절 한 단추 특정 이벤트가 발생할 때는 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 경로 되지 합니다. 에 대 한 설명 부분 참조 <xref:System.Windows.ContentElement.MouseLeftButtonDown> 또는 <xref:System.Windows.ContentElement.MouseRightButtonDown>합니다.  
  
> [!IMPORTANT]
>  몇 가지 <xref:System.Windows.ContentElement> 제어와 같은 동작을 예를 들어 있는 클래스의 파생 <xref:System.Windows.Documents.Hyperlink>, 마우스 단추 이벤트를 처리 하는 기본적인 클래스 포함 되어 있습니다. 이벤트는 마우스 왼쪽된 단추에는 클래스는 컨트롤의 처리를 할 가능성이 가장 높은 이벤트입니다. 기본 클래스 종종 처리 표시 <xref:System.Windows.Input.Mouse> 클래스 이벤트를 처리 합니다. 이벤트 처리 됨으로 표시 되 면 해당 요소에 연결 된 다른 인스턴스 처리기 일반적으로 발생 하지 않습니다. 버블링 방향의 UI 트리의 루트에서 요소에 연결 되어 있는 다른 모든 클래스 또는 인스턴스 처리기도 하지 일반적으로 발생 합니다.  
  
 앞의 중요에 설명 된 문제를 해결 하 고 계속 받을 수 <xref:System.Windows.ContentElement.MouseDown> 클래스 이러한 솔루션 중 하나를 사용 하 여 처리 하는 파생된 클래스의 마우스 왼쪽된 단추에 대 한 이벤트:  
  
-   연결에 대 한 처리기는 <xref:System.Windows.ContentElement.PreviewMouseDown> 이벤트를 컨트롤에 의해 처리 된 것으로 표시 되어 있지 않습니다. 미리 보기 이벤트 이기 때문에 경로 루트에서 시작을 여 컨트롤로 터널링 방식을 살펴봅니다.  
  
-   컨트롤에 대 한 처리기를 호출 하 여 절차에 따라 등록 <xref:System.Windows.ContentElement.AddHandler%2A> 처리기 라우트된 이벤트 데이터에서 처리 하는 것으로 이미 표시 된 경우에 이벤트를 수신할 수 있도록 서명 옵션을 선택 합니다.  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.MouseDownEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewMouseDown>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnMouseDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.MouseDown" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 포인터가 이 요소의 영역 안으로 들어가면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.MouseEnter> 이 [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 직접 이벤트 처리 라우팅 전략을 사용 하 여 합니다. 경로; 직접 라우트된 이벤트를 발생 하지 않습니다. 대신,에서 처리 됩니다는 동일한 요소 이벤트가 발생 합니다. 그러나 라우트된 이벤트 동작 스타일의 이벤트 트리거 등의 다른 측면을 활성화 합니다.  
  
 하지만 <xref:System.Windows.ContentElement.MouseEnter> 트랙 마우스 포인터이 이벤트를 더이 요소의 영역 안으로 들어가면 직접적으로 보고 하는 <xref:System.Windows.ContentElement.IsMouseOver%2A> 에서 속성 값이 변경 `false` 를 `true` 이 요소에 합니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.MouseEnter> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.MouseEnter> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.MouseEnterEvent>|  
|라우팅 전략|직접|  
|대리자|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   재정의 <xref:System.Windows.ContentElement.OnMouseEnter%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.MouseEnter" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 포인터가 이 요소의 영역을 벗어나면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.MouseLeave> 이 [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 직접 이벤트 처리 라우팅 전략을 사용 하 여 합니다. 경로; 직접 라우트된 이벤트를 발생 하지 않습니다. 대신,에서 처리 됩니다는 동일한 요소 이벤트가 발생 합니다. 그러나 라우트된 이벤트 동작 스타일의 이벤트 트리거 등의 다른 측면을 활성화 합니다.  
  
 하지만 <xref:System.Windows.ContentElement.MouseLeave> 트랙 마우스를 벗어날 때이 이벤트는 요소를 더 직접적으로 보고 하는 <xref:System.Windows.ContentElement.IsMouseOver%2A> 에서 속성 값이 변경 `true` 를 `false` 이 요소에 합니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.MouseLeave> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.MouseLeave> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.MouseLeaveEvent>|  
|라우팅 전략|직접|  
|대리자|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   재정의 <xref:System.Windows.ContentElement.OnMouseLeave%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.MouseLeave" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 포인터가 이 요소 위에 있는 동안 마우스 왼쪽 단추를 누르면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하지만이 [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 요소 트리를 통해 버블링 경로 따르는 것 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 실제로 <xref:System.Windows.ContentElement>합니다.  
  
 이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.  
  
 이 이벤트의 인수는 기본의 인수를 노출 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이벤트입니다. 해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <xref:System.Windows.ContentElement.AddHandler%2A>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.  
  
 이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <xref:System.Windows.ContentElement>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <xref:System.Windows.Input.Mouse> 클래스). 마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다. 비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.ContentElement>합니다.  
  
> [!IMPORTANT]
>  몇 가지 <xref:System.Windows.ContentElement> 제어와 같은 동작을 예를 들어 있는 클래스의 파생 <xref:System.Windows.Documents.Hyperlink>, 마우스 단추 이벤트를 처리 하는 기본적인 클래스 포함 되어 있습니다. 이벤트는 마우스 왼쪽된 단추에는 클래스는 컨트롤의 처리를 할 가능성이 가장 높은 이벤트입니다. 기본 클래스 종종 처리 표시 <xref:System.Windows.Input.Mouse> 클래스 이벤트를 처리 합니다. 이벤트 처리 됨으로 표시 되 면 해당 요소에 연결 된 다른 인스턴스 처리기 일반적으로 발생 하지 않습니다. 버블링 방향의 UI 트리의 루트에서 요소에 연결 되어 있는 다른 모든 클래스 또는 인스턴스 처리기도 하지 일반적으로 발생 합니다.  
  
 앞의 중요에 설명 된 문제를 해결 하 고 계속 받을 수 <xref:System.Windows.ContentElement.MouseLeftButtonDown> 클래스 이러한 솔루션 중 하나를 사용 하 여 처리 하는 파생된 클래스의 마우스 왼쪽된 단추에 대 한 이벤트:  
  
-   연결에 대 한 처리기는 <xref:System.Windows.ContentElement.PreviewMouseDown> 이벤트를 컨트롤에 의해 처리 된 것으로 표시 되어 있지 않습니다. 미리 보기 이벤트 이기 때문에 경로 루트에서 시작을 여 컨트롤로 터널링 방식을 살펴봅니다.  
  
-   컨트롤에 대 한 처리기를 호출 하 여 절차에 따라 등록 <xref:System.Windows.ContentElement.AddHandler%2A> 처리기 라우트된 이벤트 데이터에서 처리 하는 것으로 이미 표시 된 경우에 이벤트를 수신할 수 있도록 서명 옵션을 선택 합니다.  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.MouseLeftButtonDownEvent>|  
|라우팅 전략|직접|  
|대리자|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   재정의 <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 포인터가 이 요소 위에 있는 동안 마우스 왼쪽 단추를 놓으면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하지만이 [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 요소 트리를 통해 버블링 경로 따르는 것 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 실제로 <xref:System.Windows.ContentElement>합니다.  
  
 이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.  
  
 이 이벤트의 인수는 기본의 인수를 노출 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 이벤트입니다. 해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <xref:System.Windows.ContentElement.AddHandler%2A>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.  
  
 이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <xref:System.Windows.ContentElement>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <xref:System.Windows.Input.Mouse> 클래스). 마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다. 비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.ContentElement>합니다.  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.MouseLeftButtonUpEvent>|  
|라우팅 전략|직접|  
|대리자|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   재정의 <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소 위에 있는 동안 마우스 포인터를 움직이면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.MouseMove> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.MouseMove> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.MouseMoveEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewMouseMove>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnMouseMove%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.MouseMove" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 포인터가 이 요소 위에 있는 동안 마우스 오른쪽 단추를 누르면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하지만이 [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 요소 트리를 통해 버블링 경로 따르는 것 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 실제로 <xref:System.Windows.ContentElement>합니다.  
  
 이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.  
  
 이 이벤트의 인수는 기본의 인수를 노출 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이벤트입니다. 해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <xref:System.Windows.ContentElement.AddHandler%2A>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.  
  
 이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <xref:System.Windows.ContentElement>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <xref:System.Windows.Input.Mouse> 클래스). 마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다. 비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.ContentElement>합니다.  
  
 마우스 오른쪽 단추로 마우스 이벤트는 자주 응용 프로그램 시나리오에서 기본 처리를 가집니다. 예를 들어,를 마우스 오른쪽 단추로 상황에 맞는 메뉴를 표시할 수 있습니다. 참조 [ContextMenu 개요](~/docs/framework/wpf/controls/contextmenu-overview.md)합니다.  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.MouseRightButtonDownEvent>|  
|라우팅 전략|직접|  
|대리자|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   재정의 <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 포인터가 이 요소 위에 있는 동안 마우스 오른쪽 단추를 놓으면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하지만이 [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 요소 트리를 통해 버블링 경로 따르는 것 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 실제로 <xref:System.Windows.ContentElement>합니다.  
  
 이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.  
  
 이 이벤트의 인수는 기본의 인수를 노출 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 이벤트입니다. 해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <xref:System.Windows.ContentElement.AddHandler%2A>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.  
  
 이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <xref:System.Windows.ContentElement>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <xref:System.Windows.Input.Mouse> 클래스). 마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다. 비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.ContentElement>합니다.  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.MouseRightButtonUpEvent>|  
|라우팅 전략|직접|  
|대리자|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   재정의 <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소 위에서 마우스 단추를 놓으면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.MouseUp> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.MouseUp> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 <xref:System.Windows.ContentElement.MouseUp> 종종 발생과 함께 <xref:System.Windows.ContentElement.MouseLeftButtonUp> 또는 <xref:System.Windows.ContentElement.MouseRightButtonUp>, 두 개의 표준 마우스 단추의 릴리스의에 해당 하는 합니다. <xref:System.Windows.ContentElement.MouseLeftButtonUp> 및 <xref:System.Windows.ContentElement.MouseRightButtonUp> 라우트된 이벤트를는 있지만 직접 라우트된 이벤트를 서로 하며 적절 한 단추 특정 이벤트가 발생할 때는 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 경로 되지 합니다. 에 대 한 설명 부분 참조 <xref:System.Windows.ContentElement.MouseLeftButtonUp> 또는 <xref:System.Windows.ContentElement.MouseRightButtonUp>합니다.  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.MouseUpEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewMouseUp>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnMouseUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.MouseUp" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 포인터가 이 요소 위에 있는 동안 사용자가 마우스 휠을 굴리면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 포커스 또는 마우스 캡처 우선 마우스 포인터입니다. 따라서 수신 되 면는 <xref:System.Windows.ContentElement.MouseWheel> 시점 요소에서 이벤트를 다른 요소에 마우스 포인터 수 실제로 있습니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.MouseWheel> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.MouseWheel> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.MouseWheelEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewMouseWheel>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnMouseWheel%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.MouseWheel" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">기존 탭 순서에서 이동할 모드 또는 시각적으로 이동할 방향을 나타내는 속성이 포함된 이동 요청입니다.</param>
        <summary>이 요소에서 다른 요소로 포커스를 이동하려고 시도합니다. 포커스를 이동하는 방향은 지시 방향에 의해 지정됩니다. 이 방향은 이 요소의 표시 부모 조직 내에서 해석됩니다.</summary>
        <returns>
          요청된 이동이 수행되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드의 반환 값을 확인 하 고 있는지 확인 합니다. 반환 값이 `false` 방향으로 컨트롤의 구성에서 정의 된 탭 정지를 실행 하 고 이동 요청에서 줄 바꿈이 요청 하는 경우 반환 될 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 인프라에 대해 클래스 관련 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 구현을 반환합니다.</summary>
        <returns>형식별 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 구현입니다.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>이 메서드의 구현은 특정 생성자를 호출 하는 일반적으로 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 구현 하 고 반환 값으로 반환 합니다.  
  
 모든 <see cref="T:System.Windows.ContentElement" /> 파생된 클래스가 자신의 특정 제공 하기 위해이 메서드를 구현 해야 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 구현에는 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 인프라입니다. 이 패턴을 구현에 대 한 자세한 내용은 참조 하십시오. <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.DragDrop.DragEnter" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.DragDrop.DragLeave" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.DragDrop.DragOver" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.DragDrop.DragEnter" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.GiveFeedbackEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.DragDrop.GiveFeedback" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터가 들어 있는 <see cref="T:System.Windows.RoutedEventArgs" />입니다. 이 이벤트 데이터에는 <see cref="E:System.Windows.ContentElement.GotFocus" /> 이벤트의 식별자가 포함되어야 합니다.</param>
        <summary>지정된 이벤트 데이터를 사용하여 <see cref="E:System.Windows.ContentElement.GotFocus" /> 라우트된 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 가상가 이벤트를 발생 시키는 기본 구현입니다.  
  
 에 대 한 * 메서드 구현 이벤트를 발생 시키기 위한 것 이며이 같은 메서드 구현을 이벤트를 발생 시키는 경우는 <xref:System.Windows.ContentElement.IsFocused%2A> 속성 값이 변경 합니다. <xref:System.Windows.ContentElement.OnGotFocus%2A> 구현은 일부 다른 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 에 * 구현과 해당 이벤트에 대 한 클래스 처리를 추가 하는 편리한 방법을 제공 합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>포커스 이벤트를 발생 시 키 지를 의도적으로 필요가 없는 경우 구현 하는 기본 구현을 호출 해야 합니다. 그렇지 않은 경우는 <see cref="E:System.Windows.ContentElement.GotFocus" /> 이 요소에 포커스를 설정 하는 일반적인 사용자 작업 중에 이벤트가 발생 하지 않습니다. 프로그램 요소 의도가 없으면 상태로 설정에서 요소를 방지할 수 있습니다 <see cref="P:System.Windows.ContentElement.Focusable" /> 를 <see langword="false" />합니다. 기본적는 <see cref="P:System.Windows.ContentElement.Focusable" /> 포커스 설정 따라서 않습니다 <see cref="P:System.Windows.ContentElement.Focusable" /> 의도적으로 필요 하지 않을 수도 있습니다.</para>
        </block>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
        <altmember cref="E:System.Windows.ContentElement.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</param>
        <summary>이 요소에 터치가 캡처될 때 발생하는 <see cref="E:System.Windows.ContentElement.GotTouchCapture" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> 메서드에 기본 구현이 없습니다. 재정의 <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.ContentElement.GotTouchCapture> 이벤트입니다. 기본 클래스를 호출 해야 <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> 기본 클래스가 메서드 이벤트를 받도록 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" /> 이벤트가 이 요소에서 발생할 때 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 가상 메서드는 발생 하는 경우의 값은 <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> 종속성 속성이 변경 합니다. 가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다. 그런 다음 <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다. 에 <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> 이벤트 라우트된 이벤트가 아닙니다. 따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.  
  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다. 호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</param>
        <summary>이 요소에 의해 <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /> 이벤트가 발생하기 직전에 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 가상 메서드는 발생 하는 때의 값은 <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> 종속성 속성의 값이 변경 합니다. 가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다. 그런 다음 <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다. 에 <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> 이벤트 라우트된 이벤트가 아닙니다. 따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.  
  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다. 호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.ContentElement.IsMouseCapturedChanged" /> 이벤트가 이 요소에서 발생할 때 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 가상 메서드는 발생 하는 때의 값은 <xref:System.Windows.ContentElement.IsMouseCaptured%2A> 종속성 속성의 값이 변경 합니다. 가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다. 그런 다음 <xref:System.Windows.ContentElement.IsMouseCapturedChanged> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다. 에 <xref:System.Windows.ContentElement.IsMouseCapturedChanged> 이벤트 라우트된 이벤트가 아닙니다. 따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.  
  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다. 호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /> 이벤트가 이 요소에서 발생할 때 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>이 가상 메서드는 발생 하는 때의 값은 <see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /> 종속성 속성의 값이 변경 합니다. 가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다. 그런 다음 <see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다. 이 이벤트는 라우트된 이벤트의; 없습니다 따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.  
  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다. 호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" /> 이벤트가 이 요소에서 발생할 때 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 가상 메서드는 발생 하는 때의 값은 <xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A> 종속성 속성의 값이 변경 합니다. 가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다. 그런 다음 <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다. 에 <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> 이벤트 라우트된 이벤트가 아닙니다. 따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.  
  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다. 호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.ContentElement.IsStylusCapturedChanged" /> 이벤트가 이 요소에서 발생할 때 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 가상 메서드는 발생 하는 때의 값은 <xref:System.Windows.ContentElement.IsStylusCaptured%2A> 종속성 속성의 값이 변경 합니다. 가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다. 그런 다음 <xref:System.Windows.ContentElement.IsStylusCapturedChanged> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다. 이벤트 라우트된 이벤트 아닌지 확인 합니다. 따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.  
  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다. 호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" /> 이벤트가 이 요소에서 발생할 때 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 가상 메서드는 발생 하는 때의 값은 <xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A> 종속성 속성의 값이 변경 합니다. 가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다. 그런 다음 <xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다. 이벤트 라우트된 이벤트 아닌지 확인 합니다. 따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.  
  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다. 호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" /> 이벤트가 이 요소에서 발생할 때 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 가상 메서드는 발생 하는 때의 값은 <xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A> 종속성 속성의 값이 변경 합니다. 가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다. 그런 다음 <xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다. 이벤트 라우트된 이벤트 아닌지 확인 합니다. 따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.  
  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다. 호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.KeyEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 키 입력은 입력된 전용된 관리자에서 처리 됩니다. 예를 들어, 입력 및 명령 바인딩과 키 입력을 사용 하는 다른 프로그래밍 기능은 일반 키 입력으로 노출 되기 전에 키 입력을 처리할 수 있습니다. 이러한 입력 처리 한 다음 시스템 기능에는 이벤트가 표시 <xref:System.Windows.ContentElement.OnKeyDown%2A> 가 호출 되지 않습니다.  
  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.KeyEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 키 입력은 입력된 전용된 관리자에서 처리 됩니다. 예를 들어, 입력 및 명령 바인딩과 키 입력을 사용 하는 다른 프로그래밍 기능은 일반 키 입력으로 노출 되기 전에 키 입력을 처리할 수 있습니다. 이러한 입력 처리 한 다음 시스템 기능에는 이벤트가 표시 <xref:System.Windows.ContentElement.OnKeyUp%2A> 가 호출 되지 않습니다.  
  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터가 들어 있는 <see cref="T:System.Windows.RoutedEventArgs" />입니다. 이 이벤트 데이터에는 <see cref="E:System.Windows.ContentElement.LostFocus" /> 이벤트의 식별자가 포함되어야 합니다.</param>
        <summary>지정된 이벤트 데이터를 사용하여 <see cref="E:System.Windows.ContentElement.LostFocus" /> 라우트된 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 가상가 이벤트를 발생 시키는 기본 구현입니다.  
  
 에 대 한 * 메서드 구현 이벤트를 발생 시키기 위한 것 이며이 같은 메서드 구현을 이벤트를 발생 시키는 경우는 <xref:System.Windows.ContentElement.IsFocused%2A> 속성 값이 변경 합니다. 이 구현은 일부 다른 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 에 * 구현과 해당 이벤트에 대 한 클래스 처리를 추가 하는 편리한 방법을 제공 합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>포커스 이벤트를 발생 시 키 지를 의도적으로 필요가 없는 경우 구현 하는 기본 구현을 호출 해야 합니다. 그렇지 않은 경우는 <see cref="E:System.Windows.ContentElement.LostFocus" /> 이 요소에 포커스를 설정 하는 일반적인 사용자 작업 중에 이벤트가 발생 하지 않습니다. 프로그램 요소 의도가 없으면 상태로 설정에서 요소를 방지할 수 있습니다 <see cref="P:System.Windows.ContentElement.Focusable" /> 를 <see langword="false" />합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터가 들어 있는 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터가 들어 있는 <see cref="T:System.Windows.Input.MouseEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터가 들어 있는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</param>
        <summary>이 요소에서 터치 캡처가 손실될 때 발생하는 <see cref="E:System.Windows.ContentElement.LostTouchCapture" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> 메서드에 기본 구현이 없습니다. 재정의 <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.ContentElement.LostTouchCapture> 이벤트입니다. 기본 클래스를 호출 해야 <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> 기본 클래스가 메서드 이벤트를 받도록 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다. 이 이벤트 데이터는 누른 상태 및 처리된 상태의 마우스 단추에 대한 세부 사항을 보고합니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Mouse.MouseDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 마우스 단추 작업 입력된 전용된 관리자에서 처리 됩니다. 명령 바인딩과 및 입력과 같은 마우스 단추 작업을 사용 하는 다른 프로그래밍 기능은 일반 마우스 단추 동작으로 노출 되기 전에 작업에 대 한 처리기를 호출할 수 있습니다. 이러한 시스템 기능 표시 입력은 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이벤트를 처리 <xref:System.Windows.ContentElement.OnMouseDown%2A> 가 호출 되지 않습니다.  
  
 이 클래스 처리기를 사용 하 여 처리 된 것으로 이벤트를 표시 하는 경우 사용자에 영향을 주는 다음과 같은 이벤트: <xref:System.Windows.ContentElement.MouseLeftButtonDown> 및 <xref:System.Windows.ContentElement.MouseRightButtonDown>합니다. 이들이 이벤트는 받는 요소에서 발생할 수 있습니다 때 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 수신 합니다.  
  
 이 이벤트를 처리 하는 클래스에서 처리 된 것으로 표시 하는 경우 하위 이벤트는 여전히 발생 됩니다. 그러나 이벤트 데이터에서의 처리 상태를 전달합니다. 명시적으로 사용 하지 않는 한 인스턴스 처리기 하위 이벤트에 대 한 클래스 처리에서의 이벤트를 처리 하는 경우 호출 되지 않습니다 <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 와 `handledEventsToo` `true` 처리기를 연결 하기 위해 합니다. 클래스 처리기도가 호출 되지 않으면 해당 클래스 처리기에 등록 된는 <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 서명을 `handledEventsToo` `true`합니다. 처리 하 여 <xref:System.Windows.ContentElement.OnMouseDown%2A>을 처리 클래스 처리에 가능한 모든 마우스 단추 누르기 작업이 있습니다. 이 동작은 원치 않을 수 있습니다. 따라서이 가상 메서드를 사용 하 여 이벤트를 처리 하는 경우 주의 해야 합니다.  
  
 각 단추 특정 직접 이벤트에는 가상 *; 메서드 여부 이러한 단추 특정 클래스 처리기를 재정의 더 적합할 수 있습니다 하는 것이 좋습니다.  
  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseEventArgs" />입니다.</param>
        <summary>이 요소에 의해 처리되지 않은 <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> 연결된 이벤트가 발생할 때 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다. 호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트는 직접 라우팅 전략으로 라우트된 이벤트를 합니다. 이벤트 처리로 표시 하는 것은 일반적인 인스턴스 처리기를 방지 하는 데 유용 (지정 하지 않는 `handledEventsToo`) 호출 되지 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseEventArgs" />입니다.</param>
        <summary>이 요소에 의해 처리되지 않은 <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> 연결된 이벤트가 발생할 때 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다. 호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트는 직접 라우팅 전략으로 라우트된 이벤트를 합니다. 이벤트 처리로 표시 하는 것은 일반적인 인스턴스 처리기를 방지 하는 데 유용 (지정 하지 않는 `handledEventsToo`) 호출 되지 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다. 이벤트 데이터는 마우스 왼쪽 단추를 놓았음을 보고합니다.</param>
        <summary>이 요소에 의해 처리되지 않은 <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /> 라우트된 이벤트가 발생할 때 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.MouseLeftButtonDown> 이벤트가 버블링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이 이벤트는, 및 각 <xref:System.Windows.ContentElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시킵니다. <xref:System.Windows.ContentElement.MouseLeftButtonDown>합니다. 사용 하기는 <xref:System.Windows.ContentElement.MouseLeftButtonDown> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다. 그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 `handledEventsToo`) 호출 되지 합니다.  
  
 일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.ContentElement> 수신 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 여 적절 한 로컬 이벤트로 변환 합니다. 이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다. 파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>합니다. 마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.ContentElement> 재정의 하 여 <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>합니다.  
  
 또는 이벤트는 특정 마우스 상태에 대 한 처리를 변경 하려면이 메서드를 재정의할 수 있습니다. 기본 구현을 호출 것인지 여부는 각 시나리오에 따라 달라 집니다. 기본 호출 하지 못하면 해당 마우스 이벤트 호출 하지 못하면 하는 상위 클래스에 대 한 기본 입력된 처리를 비활성화 <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>합니다. 하지만 파생 될 수 예를 들어 <xref:System.Windows.Controls.Button> 재정의 <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> 프로그램 파생된 클래스에서 기본 구현을 호출 하지 않고이 재정의 해제 합니다.는 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 이벤트입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다. 이벤트 데이터는 마우스 왼쪽 단추를 놓았음을 보고합니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.MouseLeftButtonUp> 이벤트가 버블링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 이 이벤트는, 및 각 <xref:System.Windows.ContentElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시킵니다. <xref:System.Windows.ContentElement.MouseLeftButtonUp>합니다. 사용 하기는 <xref:System.Windows.ContentElement.MouseLeftButtonUp> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다. 그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 `handledEventsToo`) 호출 되지 합니다.  
  
 일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.ContentElement> 수신 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 여 적절 한 로컬 이벤트로 변환 합니다. 이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다. 파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>합니다. 마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.ContentElement> 재정의 하 여 <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Mouse.MouseMove" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다. 이벤트 데이터는 마우스 오른쪽 단추를 놓았음을 보고합니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.MouseRightButtonDown> 이벤트가 버블링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이 이벤트는, 및 각 <xref:System.Windows.ContentElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시킵니다. <xref:System.Windows.ContentElement.MouseRightButtonDown>합니다. 사용 하기는 <xref:System.Windows.ContentElement.MouseRightButtonDown> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다. 그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 `handledEventsToo`) 호출 되지 합니다.  
  
 일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.ContentElement> 수신 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 여 적절 한 로컬 이벤트로 변환 합니다. 이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다. 파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>합니다. 마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.ContentElement> 재정의 하 여 <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>합니다.  
  
 또는 이벤트는 특정 마우스 상태에 대 한 처리를 변경 하려면이 메서드를 재정의할 수 있습니다. 기본 구현을 호출 것인지 여부는 각 시나리오에 따라 달라 집니다. 기본 호출 하지 못하면 해당 마우스 이벤트 호출 하지 못하면 하는 상위 클래스에 대 한 기본 입력된 처리를 비활성화 <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>합니다. 하지만 파생 될 수 예를 들어 <xref:System.Windows.Controls.Control> 재정의 <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> 기본 호출 하지 않고 파생된 클래스에서이 재정의 사용할 구성 요소인 컨트롤에 대해 상황에 맞는 메뉴 서비스의는 <xref:System.Windows.Controls.Control> 기본 동작입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다. 이벤트 데이터는 마우스 오른쪽 단추를 놓았음을 보고합니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.MouseRightButtonUp> 이벤트가 버블링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 이 이벤트는, 및 각 <xref:System.Windows.ContentElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시킵니다. <xref:System.Windows.ContentElement.MouseRightButtonUp>합니다. 사용 하기는 <xref:System.Windows.ContentElement.MouseRightButtonUp> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다. 그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 `handledEventsToo`) 호출 되지 합니다.  
  
 일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.ContentElement> 수신 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 여 적절 한 로컬 이벤트로 변환 합니다. 이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다. 파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>합니다. 마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.ContentElement> 재정의 하 여 <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다. 이벤트 데이터는 마우스 단추를 놓았음을 보고합니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Mouse.MouseUp" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 마우스 단추 작업 입력된 전용된 관리자에서 처리 됩니다. 명령 바인딩과 및 입력과 같은 마우스 단추 작업을 사용 하는 다른 프로그래밍 기능은 일반 마우스 단추 동작으로 노출 되기 전에 작업에 대 한 처리기를 호출할 수 있습니다. 이러한 시스템 기능 표시 입력은 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 이벤트를 처리 <xref:System.Windows.ContentElement.OnMouseUp%2A> 가 호출 되지 않습니다.  
  
 이 클래스 처리기를 사용 하 여 처리 된 것으로 이벤트를 표시 하는 경우 사용자에 영향을 주는 다음과 같은 이벤트: <xref:System.Windows.ContentElement.MouseLeftButtonUp> 및 <xref:System.Windows.ContentElement.MouseRightButtonUp>합니다. 이들이 이벤트는 받는 요소에서 발생할 수 있습니다 때 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 수신 합니다.  
  
 이 이벤트를 처리 하는 클래스에서 처리 된 것으로 표시 하는 경우 하위 이벤트는 여전히 발생 됩니다. 그러나 이벤트 데이터에서의 처리 상태를 전달합니다. 명시적으로 사용 하지 않는 한 인스턴스 처리기 하위 이벤트에 대 한 클래스 처리에서의 이벤트를 처리 하는 경우 호출 되지 않습니다 <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 와 `handledEventsToo` `true` 처리기를 연결 하기 위해 합니다. 클래스 처리기도가 호출 되지 않으면 해당 클래스 처리기에 등록 된는 <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 서명을 `handledEventsToo` `true`합니다. 처리 하 여 <xref:System.Windows.ContentElement.OnMouseUp%2A>을 처리 클래스 처리에 가능한 모든 마우스 단추 동작을 합니다. 이 동작은 원치 않을 수 있습니다. 따라서이 가상 메서드를 사용 하 여 이벤트를 처리 하는 경우 주의 해야 합니다.  
  
 각 단추 특정 직접 이벤트에는 가상 *; 메서드 여부 이러한 단추 특정 클래스 처리기를 재정의 더 적합할 수 있습니다 하는 것이 좋습니다.  
  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseWheelEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다. 다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다. 다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다. 다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.DragDrop.PreviewDrop" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다. 다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.GiveFeedbackEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다. 다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다. 다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.KeyEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다. 다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.KeyEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다. 다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다. 다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다. 이벤트 데이터는 하나 이상의 마우스 단추를 놓았음을 보고합니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> 연결된 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 마우스 단추 작업 입력된 전용된 관리자에서 처리 됩니다. 명령 바인딩과 및 입력과 같은 마우스 단추 작업을 사용 하는 다른 프로그래밍 기능은 일반 마우스 단추 동작으로 노출 되기 전에 작업에 대 한 처리기를 호출할 수 있습니다. 이러한 시스템 기능 표시 입력은 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 이벤트를 처리 <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> 가 호출 되지 않습니다.  
  
 이 클래스 처리기를 사용 하 여 처리 된 것으로 이벤트를 표시 하는 경우 사용자에 영향을 주는 다음과 같은 이벤트: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> 및 <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>합니다. 이들이 이벤트는 받는 요소에서 발생할 수 있습니다 때 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 수신 합니다.  
  
 이 이벤트를 처리 하는 클래스에서 처리 된 것으로 표시 하는 경우 하위 이벤트는 여전히 발생 됩니다. 그러나 이벤트 데이터에서의 처리 상태를 전달합니다. 명시적으로 사용 하지 않는 한 인스턴스 처리기 하위 이벤트에 대 한 클래스 처리에서의 이벤트를 처리 하는 경우 호출 되지 않습니다 <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 와 `handledEventsToo` `true` 처리기를 연결 하기 위해 합니다. 클래스 처리기도가 호출 되지 않으면 해당 클래스 처리기에 등록 된는 <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 서명을 `handledEventsToo` `true`합니다. 처리 하 여 <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A>을 처리 클래스 처리에 가능한 모든 마우스 단추 누르기 작업이 있습니다. 이 동작은 원치 않을 수 있습니다. 따라서이 가상 메서드를 사용 하 여 이벤트를 처리 하는 경우 주의 해야 합니다.  
  
 각 단추 특정 직접 이벤트에는 가상 *; 메서드 여부 이러한 단추 특정 클래스 처리기를 재정의 더 적합할 수 있습니다 하는 것이 좋습니다.  
  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다. 다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다. 이벤트 데이터는 마우스 왼쪽 단추를 놓았음을 보고합니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> 이벤트 터널링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 이 이벤트는 라우팅, 터널 및 각 <xref:System.Windows.ContentElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>합니다. 사용 하기는 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다. 그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 `handledEventsToo`) 호출 되지 합니다.  
  
 일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.ContentElement> 수신 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 여 적절 한 로컬 이벤트로 변환 합니다. 이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다. 파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>합니다. 마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.ContentElement> 재정의 하 여 <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>합니다.  
  
 또는 이벤트는 특정 마우스 상태에 대 한 처리를 변경 하려면이 메서드를 재정의할 수 있습니다. 기본 구현을 호출 것인지 여부는 각 시나리오에 따라 달라 집니다. 기본 호출 하지 못하면 해당 마우스 이벤트 호출 하지 못하면 하는 상위 클래스에 대 한 기본 입력된 처리를 비활성화 <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>합니다. 하지만 파생 될 수 예를 들어 <xref:System.Windows.Controls.Button> 재정의 <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> 프로그램 파생된 클래스에서 기본 구현을 호출 하지 않고이 재정의 해제 합니다.는 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 이벤트입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다. 이벤트 데이터는 마우스 왼쪽 단추를 놓았음을 보고합니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> 이벤트 터널링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 이 이벤트는 라우팅, 터널 및 각 <xref:System.Windows.ContentElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>합니다. 사용 하기는 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다. 그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 `handledEventsToo`) 호출 되지 합니다.  
  
 일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.ContentElement> 수신 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 여 적절 한 로컬 이벤트로 변환 합니다. 이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다. 파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>합니다. 마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.ContentElement> 재정의 하 여 <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다. 다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다. 이벤트 데이터는 마우스 오른쪽 단추를 놓았음을 보고합니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> 이벤트 터널링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 이 이벤트는 라우팅, 터널 및 각 <xref:System.Windows.ContentElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <xref:System.Windows.ContentElement.MouseRightButtonDown>합니다. 사용 하기는 <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다. 그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 `handledEventsToo`) 호출 되지 합니다.  
  
 일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.ContentElement> 수신 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 여 적절 한 로컬 이벤트로 변환 합니다. 이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다. 파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>합니다. 마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.ContentElement> 재정의 하 여 <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>합니다.  
  
 또는 이벤트는 특정 마우스 상태에 대 한 처리를 변경 하려면이 메서드를 재정의할 수 있습니다. 기본 구현을 호출 것인지 여부는 각 시나리오에 따라 달라 집니다. 기본 호출 하지 못하면 해당 마우스 이벤트 호출 하지 못하면 하는 상위 클래스에 대 한 기본 입력된 처리를 비활성화 <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>합니다. 하지만 파생 될 수 예를 들어 <xref:System.Windows.Controls.Control> 재정의 <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> 기본 호출 하지 않고 파생된 클래스에서이 재정의 사용할 구성 요소인 컨트롤에 대해 상황에 맞는 메뉴 서비스의는 <xref:System.Windows.Controls.Control> 기본 동작입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다. 이벤트 데이터는 마우스 오른쪽 단추를 놓았음을 보고합니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> 이벤트 터널링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 이 이벤트는 라우팅, 터널 및 각 <xref:System.Windows.ContentElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>합니다. 사용 하기는 <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다. 그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 `handledEventsToo`) 호출 되지 합니다.  
  
 일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.ContentElement> 수신 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 여 적절 한 로컬 이벤트로 변환 합니다. 이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다. 파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>합니다. 마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.ContentElement> 재정의 하 여 <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다. 이벤트 데이터는 하나 이상의 마우스 단추를 놓았음을 보고합니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 마우스 단추 작업 입력된 전용된 관리자에서 처리 됩니다. 명령 바인딩과 및 입력과 같은 마우스 단추 작업을 사용 하는 다른 프로그래밍 기능은 일반 마우스 단추 동작으로 노출 되기 전에 작업에 대 한 처리기를 호출할 수 있습니다. 이러한 시스템 기능 표시 입력은 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 이벤트를 처리 <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> 가 호출 되지 않습니다.  
  
 이 클래스 처리기를 사용 하 여 처리 된 것으로 이벤트를 표시 하는 경우 사용자에 영향을 주는 다음과 같은 이벤트: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> 및 <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>합니다. 이들이 이벤트는 받는 요소에서 발생할 수 있습니다 때 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 수신 합니다.  
  
 이 이벤트를 처리 하는 클래스에서 처리 된 것으로 표시 하는 경우 하위 이벤트는 여전히 발생 됩니다. 그러나 이벤트 데이터에서의 처리 상태를 전달합니다. 명시적으로 사용 하지 않는 한 인스턴스 처리기 하위 이벤트에 대 한 클래스 처리에서의 이벤트를 처리 하는 경우 호출 되지 않습니다 <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 와 `handledEventsToo` `true` 처리기를 연결 하기 위해 합니다. 클래스 처리기도가 호출 되지 않으면 해당 클래스 처리기에 등록 된는 <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 서명을 `handledEventsToo` `true`합니다. 처리 하 여 <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A>을 처리 클래스 처리에 가능한 모든 마우스 단추 동작을 합니다. 이 동작은 원치 않을 수 있습니다. 따라서이 가상 메서드를 사용 하 여 이벤트를 처리 하는 경우 주의 해야 합니다.  
  
 각 단추 특정 직접 이벤트에는 가상 *; 메서드 여부 이러한 단추 특정 클래스 처리기를 재정의 더 적합할 수 있습니다 하는 것이 좋습니다.  
  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseWheelEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다. 다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.QueryContinueDragEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다. 다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다. 다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다. 다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusDownEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다. 다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다. 다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다. 다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다. 다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다. 다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다. 다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다. 다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TextCompositionEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다. 다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.ContentElement.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</param>
        <summary>터치가 이 요소를 누를 때 발생하는 <see cref="E:System.Windows.ContentElement.PreviewTouchDown" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> 메서드에 기본 구현이 없습니다. 재정의 <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.ContentElement.PreviewTouchDown> 이벤트입니다. 기본 클래스를 호출 해야 <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> 기본 클래스가 메서드 이벤트를 받도록 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</param>
        <summary>이 요소 내부에 있는 동안 터치가 이동할 때 발생하는 <see cref="E:System.Windows.ContentElement.PreviewTouchMove" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> 메서드에 기본 구현이 없습니다. 재정의 <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.ContentElement.PreviewTouchMove> 이벤트입니다. 기본 클래스를 호출 해야 <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> 기본 클래스가 메서드 이벤트를 받도록 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</param>
        <summary>이 요소 내에서 터치를 해제할 때 발생하는 <see cref="E:System.Windows.ContentElement.PreviewTouchUp" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> 메서드에 기본 구현이 없습니다. 재정의 <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.ContentElement.PreviewTouchUp> 이벤트입니다. 기본 클래스를 호출 해야 <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> 기본 클래스가 메서드 이벤트를 받도록 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected internal virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.QueryContinueDragEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected internal virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.QueryCursorEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusDownEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</param>
        <summary>이 요소에 의해 처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> 연결된 이벤트가 발생할 때 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다. 호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.  
  
 이 메서드는 비슷합니다 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. 이벤트 처리로 표시 하는 것은 일반적인 인스턴스 처리기를 방지 하는 데 유용 (지정 하지 않는 `handledEventsToo`) 호출 되지 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</param>
        <summary>이 요소에 의해 처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> 연결된 이벤트가 발생할 때 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다. 호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.  
  
 이 메서드는 비슷합니다 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. 이벤트 처리로 표시 하는 것은 일반적인 인스턴스 처리기를 방지 하는 데 유용 (지정 하지 않는 `handledEventsToo`) 호출 되지 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusMove" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusUp" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TextCompositionEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.  
  
 이 메서드는 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트 라우트된 이벤트가입니다. On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다. 따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다. 대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.  
  
 이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <xref:System.Windows.EventManager.RegisterClassHandler%2A>, 파생 클래스의 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</param>
        <summary>터치가 이 요소 내부를 누를 때 발생하는 <see cref="E:System.Windows.ContentElement.TouchDown" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.OnTouchDown%2A> 메서드에 기본 구현이 없습니다. 재정의 <xref:System.Windows.ContentElement.OnTouchDown%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.ContentElement.TouchDown> 이벤트입니다. 기본 클래스를 호출 해야 <xref:System.Windows.ContentElement.OnTouchDown%2A> 기본 클래스가 메서드 이벤트를 받도록 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</param>
        <summary>터치가 이 요소의 경계 외부에서 내부로 이동할 때 발생하는 <see cref="E:System.Windows.ContentElement.TouchEnter" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.OnTouchEnter%2A> 메서드에 기본 구현이 없습니다. 재정의 <xref:System.Windows.ContentElement.OnTouchEnter%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.ContentElement.TouchEnter> 이벤트입니다. 기본 클래스를 호출 해야 <xref:System.Windows.ContentElement.OnTouchEnter%2A> 기본 클래스가 메서드 이벤트를 받도록 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</param>
        <summary>터치가 이 요소의 경계 내부에서 외부로 이동할 때 발생하는 <see cref="E:System.Windows.ContentElement.TouchLeave" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.OnTouchLeave%2A> 메서드에 기본 구현이 없습니다. 재정의 <xref:System.Windows.ContentElement.OnTouchLeave%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.ContentElement.TouchLeave> 이벤트입니다. 기본 클래스를 호출 해야 <xref:System.Windows.ContentElement.OnTouchLeave%2A> 기본 클래스가 메서드 이벤트를 받도록 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</param>
        <summary>이 요소 내부에 있는 동안 터치가 이동할 때 발생하는 <see cref="E:System.Windows.ContentElement.TouchMove" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.OnTouchMove%2A> 메서드에 기본 구현이 없습니다. 재정의 <xref:System.Windows.ContentElement.OnTouchMove%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.ContentElement.TouchMove> 이벤트입니다. 기본 클래스를 호출 해야 <xref:System.Windows.ContentElement.OnTouchMove%2A> 기본 클래스가 메서드 이벤트를 받도록 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</param>
        <summary>이 요소 내에서 터치를 해제할 때 발생하는 <see cref="E:System.Windows.ContentElement.TouchUp" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.OnTouchUp%2A> 메서드에 기본 구현이 없습니다. 재정의 <xref:System.Windows.ContentElement.OnTouchUp%2A> 처리 하려면 파생된 클래스에는 <xref:System.Windows.ContentElement.TouchUp> 이벤트입니다. 기본 클래스를 호출 해야 <xref:System.Windows.ContentElement.OnTouchUp%2A> 기본 클래스가 메서드 이벤트를 받도록 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">요청된 포커스 이동 방향입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 지정된 포커스 이동 방향에 대해 포커스를 받는 요소를 반환하며 실제로 해당 요소로 포커스를 이동하지는 않습니다.</summary>
        <returns>
          <see cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />가 실제로 호출된 경우에 포커스를 받는 요소입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 클래스에이 메서드의 기본 구현 완전 하지 않으며 항상 반환 `null`합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>입력 시스템에서 이 요소를 끌기 대상으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewDragEnter> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewDragEnter> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewDragEnterEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.DragEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.DragEnter>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewDragEnter%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewDragEnter" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>입력 시스템에서 이 요소를 끌기 원본으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewDragLeave> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewDragLeave> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewDragLeaveEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.DragEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.DragLeave>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewDragLeave%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewDragLeave" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>입력 시스템에서 이 요소를 잠재적인 놓기 대상으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewDragOver> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewDragOver> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewDragOverEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.DragEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.DragOver>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewDragOver%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewDragOver" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>입력 시스템에서 이 요소를 놓기 대상으로 사용하는 기본 놓기 이벤트를 보고하면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewDrop> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewDrop> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewDropEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.DragEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.Drop>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewDrop%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewDrop" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>끌어서 놓기 작업이 시작되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.PreviewGiveFeedback> 이벤트를 사용 하면 끌어서 놓기 작업 중 사용자의 시각적 피드백을 제공 하기 위해 마우스 포인터의 모양을 수정 하려면 끌기 이벤트의 소스입니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewGiveFeedback> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewGiveFeedback> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewGiveFeedbackEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.GiveFeedback>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewGiveFeedback" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소에 키보드 포커스가 있으면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트는 라우팅 터널링을 사용 하므로 포커스가 있는 요소는 이벤트 처리기가 실제로 연결 된 요소가 아닌 자식 요소 수 있습니다. 확인의 <xref:System.Windows.RoutedEventArgs.Source%2A> 이벤트 데이터에 포커스가 있는 실제 요소를 확인 합니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.GotKeyboardFocus>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소에 키보드 포커스가 있는 동안 키를 누르면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 키 처리 명령 및 텍스트 컴퍼지션 등 다른 플랫폼의 기능으로 작용합니다. <xref:System.Windows.ContentElement.KeyDown> 이벤트는 하위 수준의 텍스트 입력된 이벤트를 특정 컨트롤에 예상 대로 동작 하지 않을 수 있습니다. 일부 컨트롤은 컨트롤 합성 클래스 처리에 더 높은 수준의 버전의 텍스트를 제공 하는 입력 처리 및 관련 이벤트 또는 때문입니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewKeyDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewKeyDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewKeyDownEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.KeyDown>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewKeyDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewKeyDown" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소에 키보드 포커스가 있는 동안 키를 놓으면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 키 처리 명령 및 텍스트 컴퍼지션 등 다른 플랫폼의 기능으로 작용합니다. <xref:System.Windows.ContentElement.KeyUp> 이벤트는 하위 수준의 텍스트 입력된 이벤트를 특정 컨트롤에 예상 대로 동작 하지 않을 수 있습니다. 일부 컨트롤은 컨트롤 합성 클래스 처리에 더 높은 수준의 버전의 텍스트를 제공 하는 입력 처리 및 관련 이벤트 또는 때문입니다. 자세한 내용은 개별 컨트롤에 대 한 설명서를 확인 합니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewKeyUp> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewKeyUp> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewKeyUpEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.KeyUp>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewKeyUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewKeyUp" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소에 더 이상 키보드 포커스가 없으면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트는 라우팅 터널링을 사용 하므로 포커스를 잃은 요소의 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다. 확인은 <xref:System.Windows.RoutedEventArgs.Source%2A> 에 포커스를 잃은 실제 요소를 확인 하기 위해 이벤트 데이터입니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.LostKeyboardFocus>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>포인터가 이 요소 위에 있는 동안 마우스 단추를 누르면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewMouseDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewMouseDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 <xref:System.Windows.ContentElement.PreviewMouseDown> 종종 발생과 함께 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> 또는 <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>, 두 개의 표준 마우스 단추 중 하나를 누르는 것에 해당 하는 합니다. <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> 및 <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> 라우트된 이벤트를는 있지만 직접 라우트된 이벤트를 서로 하며 적절 한 단추 특정 이벤트가 발생할 때는 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 경로 되지 합니다. 에 대 한 설명 부분 참조 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> 또는 <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>합니다.  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewMouseDownEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.MouseDown>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewMouseDown" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 포인터가 이 요소 위에 있는 동안 마우스 왼쪽 단추를 누르면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하지만이 [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 요소 트리를 통해 터널링 경로 따르는 것 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 실제로 <xref:System.Windows.ContentElement>합니다.  
  
 이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.  
  
 이 이벤트의 인수는 기본의 인수를 노출 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 이벤트입니다. 해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <xref:System.Windows.ContentElement.AddHandler%2A>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.  
  
 이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <xref:System.Windows.ContentElement>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <xref:System.Windows.Input.Mouse> 클래스). 마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다. 비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.ContentElement>합니다.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent>|  
|라우팅 전략|직접|  
|대리자|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 포인터가 이 요소 위에 있는 동안 마우스 왼쪽 단추를 놓으면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하지만이 [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 요소 트리를 통해 터널링 경로 따르는 것 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 실제로 <xref:System.Windows.ContentElement>합니다.  
  
 이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.  
  
 이 이벤트의 인수는 기본의 인수를 노출 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 이벤트입니다. 해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <xref:System.Windows.ContentElement.AddHandler%2A>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.  
  
 이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <xref:System.Windows.ContentElement>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <xref:System.Windows.Input.Mouse> 클래스). 마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다. 비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.ContentElement>합니다.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent>|  
|라우팅 전략|직접|  
|대리자|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 포인터가 이 요소 위에 있는 동안 마우스 포인터를 움직이면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 마우스 포인터가 요소의 경계에 처음 실행 하면이 이벤트가 발생 둘 다도 마우스 포인터가 이동할 때 요소 범위 내에서 그대로 하 고 있습니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewMouseMove> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewMouseMove> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewMouseMoveEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.MouseMove>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewMouseMove%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewMouseMove" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 포인터가 이 요소 위에 있는 동안 마우스 오른쪽 단추를 누르면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하지만이 [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 요소 트리를 통해 터널링 경로 따르는 것 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 실제로 <xref:System.Windows.ContentElement>합니다.  
  
 이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.  
  
 이 이벤트의 인수는 기본의 인수를 노출 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 이벤트입니다. 해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <xref:System.Windows.ContentElement.AddHandler%2A>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.  
  
 이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <xref:System.Windows.ContentElement>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <xref:System.Windows.Input.Mouse> 클래스). 마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다. 비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.ContentElement>합니다.  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent>|  
|라우팅 전략|직접|  
|대리자|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 포인터가 이 요소 위에 있는 동안 마우스 오른쪽 단추를 놓으면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하지만이 [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 요소 트리를 통해 터널링 경로 따르는 것 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 실제로 <xref:System.Windows.ContentElement>합니다.  
  
 이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.  
  
 이 이벤트의 인수는 기본의 인수를 노출 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 이벤트입니다. 해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <xref:System.Windows.ContentElement.AddHandler%2A>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.  
  
 이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <xref:System.Windows.ContentElement>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <xref:System.Windows.Input.Mouse> 클래스). 마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다. 비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.ContentElement>합니다.  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent>|  
|라우팅 전략|직접|  
|대리자|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 포인터가 이 요소 위에 있는 동안 마우스 단추를 놓으면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewMouseUp> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewMouseUp> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 <xref:System.Windows.ContentElement.PreviewMouseUp> 종종 발생과 함께 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> 또는 <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>, 두 개의 표준 마우스 단추 중 하나를 누르는 것에 해당 하는 합니다. <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> 및 <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> 라우트된 이벤트를는 있지만 직접 라우트된 이벤트를 서로 하며 적절 한 단추 특정 이벤트가 발생할 때는 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 경로 되지 합니다. 에 대 한 설명 부분 참조 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> 또는 <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>합니다.  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewMouseUpEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.MouseUp>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewMouseUp" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 포인터가 이 요소 위에 있는 동안 사용자가 마우스 휠을 굴리면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 포커스 또는 마우스 캡처 우선 마우스 포인터입니다. 따라서 시점 요소에서이 이벤트를 수신 되 면 마우스 포인터가 실제로 다른 요소 수 있습니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewMouseMove> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewMouseMove> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewMouseWheelEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.MouseWheel>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewMouseWheel" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>끌어서 놓기 작업 중 키보드 또는 마우스 단추 상태가 변경되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> 이벤트를 사용 하면 끌기 소스가 끌어서 놓기 작업을 취소 해야 하는지 여부를 선언 하도록 합니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewQueryContinueDragEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.QueryContinueDrag>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>포인터가 이 요소 위에 있는 동안 스타일러스 단추를 누르면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewStylusButtonDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewStylusButtonDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewStylusButtonDownEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.StylusButtonDown>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>포인터가 이 요소 위에 있는 동안 스타일러스 단추를 놓으면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewStylusButtonUp> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewStylusButtonUp> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewStylusButtonUpEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.StylusButtonUp>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소 위에 있는 동안 스타일러스가 디지타이저를 건드리면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewStylusDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewStylusDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewStylusDownEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.StylusDown>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewStylusDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewStylusDown" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>스타일러스가 디지타이저를 실제로 건드리지 않고 요소 위로 움직이면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewStylusInAirMove> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewStylusInAirMove> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewStylusInAirMoveEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.StylusInAirMove>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소 위에 있는 동안 스타일러스가 디지타이저를 검색할 만큼 가까이 있으면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewStylusInRange> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewStylusInRange> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewStylusInRangeEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.StylusInRange>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewStylusInRange" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소 위에 있는 동안 스타일러스를 움직이면 발생합니다. 이 이벤트를 발생시키려면 디지타이저에서 검색하는 동안 스타일러스를 움직여야 하며, 그렇지 않으면 <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" />가 대신 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewStylusMove> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewStylusMove> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewStylusMoveEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.StylusMove>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewStylusMove%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewStylusMove" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>스타일러스가 디지타이저에서 멀리 떨어져 있어 검색할 수 없으면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.StylusOutOfRange>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자가 여러 스타일러스 제스처 중 하나를 수행하면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 스타일러스 제스처에 대 한 정보를 참조 하십시오. <xref:System.Windows.Input.SystemGesture>합니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewStylusSystemGestureEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.StylusSystemGesture>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>스타일러스가 이 요소 위에 있는 동안 사용자가 디지타이저에서 스타일러스를 올리면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewStylusDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewStylusDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewStylusUpEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.StylusUp>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewStylusUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewStylusUp" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소가 장치와 별개의 방식으로 텍스트를 가져오면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.PreviewTextInput> 이벤트를 사용 하면 구성 요소 또는 응용 프로그램을 장치에 관계 없이 텍스트 입력에 대 한 수신 대기 합니다. 키보드는 주요 수단입니다 <xref:System.Windows.ContentElement.PreviewTextInput>; 음성, 필기 및 기타 입력된 장치를 생성할 수도 있지만 <xref:System.Windows.ContentElement.PreviewTextInput>합니다.  
  
 키 조합으로 인해-기본 키보드 또는 입력된 방법 편집기를 통해-여러 주요 이벤트 하나만 텍스트 입력된 이벤트를 발생 시킬 수 있습니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.PreviewTextInput> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.PreviewTextInput> 이벤트 원본에 연결 된 <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewTextInputEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.TextInput>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewTextInput%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewTextInput" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>손가락이 이 요소 위에 있는 동안 화면을 터치하면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로는 <xref:System.Windows.ContentElement.PreviewTouchDown> 및 <xref:System.Windows.ContentElement.TouchDown> 손가락 화면을 터치 하 고 이동 될 때까지 이벤트가 발생 하지 않습니다. 손가락 화면에서 이동 하지 않고 수행 하는 키를 눌러를 누른 채로의 동작을 보유 한 <xref:System.Windows.Input.Stylus>합니다. 키를 누른 동작을 마우스 오른쪽 단추로 클릭 하는 것과 같습니다.  
  
 발생 하는 <xref:System.Windows.ContentElement.PreviewTouchDown> 및 <xref:System.Windows.ContentElement.TouchDown> 손가락으로 화면을 터치 하는 즉시 발생 하도록 이벤트를 설정할는 <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> 연결 된 속성을 `false` 이 요소에 대 한 합니다.  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewTouchDownEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.TouchDown>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewTouchDown" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>손가락이 이 요소 위에 있는 동안 화면에서 손가락을 움직이면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewTouchMoveEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.TouchMove>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewTouchMove" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>손가락이 이 요소 위에 있는 동안 화면에서 손가락을 떼면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.PreviewTouchUpEvent>|  
|라우팅 전략|터널링|  
|대리자|<xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.|  
  
-   해당 버블링 이벤트가 <xref:System.Windows.ContentElement.TouchUp>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.PreviewTouchUp" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>끌어서 놓기 작업 중 키보드 또는 마우스 단추 상태가 변경되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.QueryContinueDrag> 이벤트를 사용 하면 끌기 소스가 끌어서 놓기 작업을 취소 해야 할지를 결정 하도록 합니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.QueryContinueDrag> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.QueryContinueDrag> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.QueryContinueDragEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewQueryContinueDrag>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnQueryContinueDrag%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.QueryContinueDrag" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>커서를 표시하도록 요청하면 발생합니다. 이 이벤트는 마우스 포인터를 새 위치로 이동할 때마다 요소에서 발생합니다. 즉, 새로운 위치에 따라 커서 개체가 변경되어야 할 수 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.QueryCursor> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.QueryCursor> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 이 이벤트 이름으로 참조 하는 커서가 반드시 않습니다 텍스트 커서 (삽입점 라고도 함). 대신,이 컨텍스트에서 커서 가능한 여러 입력 관련 장치 또는 Windows 프로그래밍에 대 한 개념 화면의 그래픽 표시를 선언 하는 개체입니다. 해당 개체도 표시 됩니다는 <xref:System.Windows.Input.Cursor> wpf에서 클래스입니다. WPF 입력된 시스템에서 마우스 포인터의 화면 위치를 나타낼 때이 커서를 변경할 수 있습니다. 미리 정의 된 값을 사용할 수 있습니다는 <xref:System.Windows.Input.Cursors> 열거형 또는 있습니다 이미지 파일로 사용자 지정 커서를 선언할 수 있습니다.  
  
 에 대 한 수신 대기 하는 <xref:System.Windows.ContentElement.QueryCursor> 이벤트는 커서 관리를 위한 효율적인 기술 되지 않습니다. 각 요소는 자체 커서 동작을 정의 해야 대신 <xref:System.Windows.FrameworkContentElement.Cursor%2A> 및 <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>합니다. 만 사용 해야 <xref:System.Windows.ContentElement.QueryCursor> WPF 프레임 워크 수준 기본 요소를 사용 하지 않는 경우 또는에 특별 한 경우 여기서 커서 동작을 요소 마다 별로 정의지 않습니다 요구를 충족 하지 합니다. 커서 동작에 대 한 응답에서 구현에 대 한 자세한 내용은 <xref:System.Windows.ContentElement.QueryCursor>, 참조 <xref:System.Windows.Input.QueryCursorEventHandler>합니다.  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.QueryCursorEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   정의 된 해당 터널링 이벤트가 없습니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnQueryCursor%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.QueryCursor" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하며 발생시킬 이벤트를 식별하는 <see cref="T:System.Windows.RoutedEventArgs" />입니다.</param>
        <summary>특정 라우트된 이벤트를 발생시킵니다. 발생시킬 <see cref="T:System.Windows.RoutedEvent" />는 해당 이벤트 데이터의 <see cref="T:System.Windows.RoutedEventArgs" /> 속성으로 제공되는 <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> 인스턴스 내에서 식별됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하지만 `e` 매개 변수의 모든 라우트된 이벤트 데이터에 대 한 일반적인 기본 형식으로 지정 됩니다; 이벤트 데이터 때문에 발생 하는 이벤트에 사용할 수 있는 가장 구체적인 이벤트 데이터 형식으로 제공 되어야 <xref:System.Windows.RoutedEventArgs> 파생된 클래스에 포함 된 특정 이벤트 발생 하는 경우를 위해 사용 되는 특정 실제 데이터 속성입니다.  
  
 <xref:System.Windows.RoutedEventArgs> 이벤트에 대 한 상태 속성만 않습니다. 라우트된 발생할 이벤트를 식별 합니다. 이 이벤트를 발생 시키는 패턴 및 라우트된 이벤트 데이터에서 다를 둘 다 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 및 데이터 클래스는 이벤트에 관련 된 속성을 포함 합니다.  
  
   
  
## Examples  
 이벤트 데이터 만들고 데이터에 이벤트 식별자를 추가한 다음 이벤트 데이터 인스턴스를 사용 하 여 사용자 지정 된 라우트된 이벤트를 발생 하는 다음 예제입니다.  
  
 [!code-csharp[ContentElementsSmorgasbord#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#raiseevent)]
 [!code-vb[ContentElementsSmorgasbord#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 요소에서 캡처된 터치 장치를 모두 해제합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 요소가 마우스를 캡처한 경우 캡처를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 요소는 캡처를 유지 하지 않은 경우이 메서드를 호출 효과가 없습니다. 값을 확인 하는 것이 좋습니다. <xref:System.Windows.ContentElement.IsMouseCaptured%2A> 이 메서드를 호출 하기 전에.  
  
   
  
## Examples  
 다음 처리기 캡처하거나 마우스 단추 상태에 따라 마우스 캡처를 해제 합니다. 마우스 포인터를 움직이는 보다 다른 용도로 캡처된 마우스 동작을 사용 하는 방법을 보여 주는 예제는는 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]합니다.  
  
 [!code-csharp[ContentElementsSmorgasbord#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[ContentElementsSmorgasbord#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 요소가 스타일러스 장치를 캡처한 경우 캡처를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 요소는 캡처를 유지 하지 않은 경우이 메서드를 호출 효과가 없습니다. 값을 확인 하는 것이 좋습니다. <xref:System.Windows.ContentElement.IsStylusCaptured%2A> 이 메서드를 호출 하기 전에.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">해제할 장치입니다.</param>
        <summary>이 요소에서 지정된 터치 장치를 해제하려고 합니다.</summary>
        <returns>
          터치 장치가 해제되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="touchDevice" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">처리기가 연결된 라우트된 이벤트의 식별자입니다.</param>
        <param name="handler">이 요소의 이벤트 처리기 컬렉션에서 제거할 특정 처리기 구현입니다.</param>
        <summary>지정된 라우트된 이벤트 처리기를 이 요소에서 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 사용 하는 가장 일반적인 시나리오 [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] 구현 하는 경우이 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 연결 된 사용자 지정 처리기에 대 한 "제거" 논리를 구현 하는 경우에 특히 라우트된 이벤트를 "래퍼" 이벤트는 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 수준입니다. 이 다음에 나오는 예제 주의 섹션에서는이 시나리오를 설명 합니다.  
  
 다음과 같은 메서드 호출에 대 한 입력된 매개 변수와 일치 하는 조건으로 등록 된 처리기가 경우에이 메서드를 호출 하면 효과가 없습니다.  
  
 둘 이상의 처리기 처리기 저장소를 제거한 경우에 첫 번째 처리기는 조건과 일치 하는 연결 되어 있습니다. 이 동작은 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 의 동작에서 `-=` 연산자입니다.  
  
 모두 `routedEvent` 나 `handler` 수 `null`합니다. 와 값 중 하나를 제공 하려고 `null` 하면 예외가 발생 합니다.  
  
 이 메서드는 무시는 `handledEventsToo` 와 첫 번째 처리기가 제공 되는 매개 변수 정보를 추가 <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 서명을 이미 처리 된 이벤트를 처리할 수 있습니다. 두 형식의 처리기 제거 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>serialization 프로세스에서 이 클래스의 인스턴스에 있는 <see cref="P:System.Windows.ContentElement.CommandBindings" /> 속성의 콘텐츠를 serialize해야 하는지 여부를 나타내는 값을 반환합니다.</summary>
        <returns>
          <see cref="P:System.Windows.ContentElement.CommandBindings" /> 속성 값을 serialize해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 반환 됩니다 `true` 경우 <xref:System.Windows.ContentElement.CommandBindings%2A> 로컬로 설정 합니다.  
  
 이 `ShouldSerialize` 메서드가 때문에 제공 되는 <xref:System.Windows.UIElement.CommandBindings%2A> 속성 간단한 기본 값이 없는 합니다. 이 메서드는 속성이 기본값에서 변경 되었는지 여부를 나타냅니다. 디자이너를 개발 하거나 포함 하는 사용자 고유의 컨트롤 개발 하는 경우 일반적으로이 메서드를 호출는 <xref:System.Windows.UIElement>합니다.  
  
 자세한 내용은 참조 [ShouldSerialize 및 다시 설정 하는 메서드를 사용 하 여 기본 값 정의](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>serialization 프로세스에서 이 클래스의 인스턴스에 있는 <see cref="P:System.Windows.ContentElement.InputBindings" /> 속성의 콘텐츠를 serialize해야 하는지 여부를 나타내는 값을 반환합니다.</summary>
        <returns>
          <see cref="P:System.Windows.ContentElement.InputBindings" /> 속성 값을 serialize해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 반환 됩니다 `true` 경우 <xref:System.Windows.ContentElement.InputBindings%2A> 로컬로 설정 합니다.  
  
 이 `ShouldSerialize` 메서드가 때문에 제공 되는 <xref:System.Windows.UIElement.InputBindings%2A> 속성 간단한 기본 값이 없는 합니다. 이 메서드는 속성이 기본값에서 변경 되었는지 여부를 나타냅니다. 디자이너를 개발 하거나 포함 하는 사용자 고유의 컨트롤 개발 하는 경우 일반적으로이 메서드를 호출는 <xref:System.Windows.UIElement>합니다.  
  
 자세한 내용은 참조 [ShouldSerialize 및 다시 설정 하는 메서드를 사용 하 여 기본 값 정의](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>포인터가 이 요소 위에 있는 동안 스타일러스 단추를 누르면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.StylusButtonDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.StylusButtonDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.StylusButtonDownEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewStylusButtonDown>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnStylusButtonDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.StylusButtonDown" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>포인터가 이 요소 위에 있는 동안 스타일러스 단추를 놓으면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.StylusButtonUp> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.StylusButtonUp> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.StylusButtonUpEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewStylusButtonUp>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnStylusButtonUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.StylusButtonUp" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>스타일러스가 이 요소 위에 있는 동안 스타일러스가 디지타이저를 건드리면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.StylusDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.StylusDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.StylusDownEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewStylusDown>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnStylusDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.StylusDown" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>스타일러스가 이 요소의 영역 안으로 들어가면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.StylusEnter> 이 [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 직접 이벤트 처리 라우팅 전략을 사용 하 여 합니다. 경로; 직접 라우트된 이벤트를 발생 하지 않습니다. 대신,에서 처리 됩니다는 동일한 요소 이벤트가 발생 합니다. 그러나 라우트된 이벤트 동작 스타일의 이벤트 트리거 등의 다른 측면을 활성화 합니다.  
  
 하지만 <xref:System.Windows.ContentElement.StylusEnter> 트랙 스타일러스이 이벤트를 더이 요소의 영역 안으로 들어가면 직접적으로 보고 하는 <xref:System.Windows.ContentElement.IsStylusOver%2A> 에서 속성 값이 변경 `false` 를 `true` 이 요소에 합니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.StylusEnter> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.StylusEnter> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.StylusEnterEvent>|  
|라우팅 전략|직접|  
|대리자|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   재정의 <xref:System.Windows.ContentElement.OnStylusEnter%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.StylusEnter" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>스타일러스가 디지타이저를 실제로 건드리지 않고 요소 위로 움직이면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.StylusInAirMove> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.StylusInAirMove> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.StylusInAirMoveEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewStylusInAirMove>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnStylusInAirMove%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.StylusInAirMove" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소 위에 있는 동안 스타일러스가 디지타이저를 검색할 만큼 가까이 있으면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.StylusInRange> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.StylusInRange> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.StylusInRangeEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewStylusInRange>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnStylusInRange%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.StylusInRange" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>스타일러스가 요소의 영역을 벗어나면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.StylusLeave> 이 [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 직접 이벤트 처리 라우팅 전략을 사용 하 여 합니다. 경로; 직접 라우트된 이벤트를 발생 하지 않습니다. 대신,에서 처리 됩니다는 동일한 요소 이벤트가 발생 합니다. 그러나 라우트된 이벤트 동작 스타일의 이벤트 트리거 등의 다른 측면을 활성화 합니다.  
  
 하지만 <xref:System.Windows.ContentElement.StylusLeave> 트랙 위에 있는 범위를 벗어날 때이 이벤트는 요소 중 더 직접적으로 보고 하는 <xref:System.Windows.ContentElement.IsStylusOver%2A> 에서 속성 값이 변경 `true` 를 `false` 이 요소에 합니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.StylusLeave> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.StylusLeave> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.StylusLeaveEvent>|  
|라우팅 전략|직접|  
|대리자|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   재정의 <xref:System.Windows.ContentElement.OnStylusLeave%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.StylusLeave" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>스타일러스가 이 요소 위로 움직일 때 발생합니다. 이 이벤트가 발생하려면 스타일러스가 디지타이저 위에서 움직여야 합니다. 그렇지 않으면 이 이벤트 대신 <see cref="E:System.Windows.ContentElement.StylusInAirMove" />가 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.StylusMove> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.StylusMove> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.StylusMoveEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewStylusMove>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnStylusMove%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.StylusMove" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소 위에 있는 동안 스타일러스가 디지타이저에서 멀리 떨어져 있어 검색할 수 없으면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.StylusOutOfRange> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.StylusOutOfRange> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.StylusOutOfRangeEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewStylusOutOfRange>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnStylusOutOfRange%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.StylusOutOfRange" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자가 여러 스타일러스 제스처 중 하나를 수행하면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 스타일러스 제스처에 대 한 자세한 내용은 참조 하십시오. <xref:System.Windows.Input.SystemGesture>합니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.StylusSystemGesture> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.StylusSystemGesture> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.StylusSystemGestureEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewStylusSystemGesture>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnStylusSystemGesture%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.StylusSystemGesture" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>스타일러스가 이 요소 위에 있는 동안 사용자가 디지타이저에서 스타일러스를 올리면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.StylusUp> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.StylusUp> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
 터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다. 자세한 내용은 참조 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.StylusUpEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewStylusUp>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnStylusUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.StylusUp" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소가 장치와 별개의 방식으로 텍스트를 가져오면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  합성 컨트롤의 내부 구현에 의해 처리 된 것으로이 이벤트가 이미 표시 될 수 있습니다. 아래의 설명을 참조 하십시오.  
  
 <xref:System.Windows.ContentElement.TextInput> 이벤트 합성 컨트롤의 내부 구현에 의해 처리 된 것으로 이미 표시 될 수 있습니다. 예를 들어 한 <xref:System.Windows.Controls.TextBox> 는 합성 컨트롤 위치는 <xref:System.Windows.ContentElement.TextInput> 이벤트는 이미 처리;의 합성 내에서 표시 됩니다. 컨트롤은 컨트롤의 입력을 해당 컨트롤에 특별 한 의미가 있는 것으로 화살표 키 같은 일부 형식을 해석 하기 때문에이 작업을 수행 합니다. 사용 하는 경우 <xref:System.Windows.ContentElement.PreviewTextInput> 텍스트 입력에 대 한 처리기를 연결 하는 이벤트로 더 나은 결과 나타날 수 있습니다. 이 방법은 대부분의 경우 컨트롤 컴퍼지션 이미 표시가이 이벤트를 처리 하 고 처리기 이벤트 경로 따라가 이벤트를 수신 하지 못하도록 하는 위치를 우회 합니다.  
  
 <xref:System.Windows.ContentElement.TextInput> 이벤트를 사용 하면 구성 요소 또는 응용 프로그램을 장치에 관계 없이 텍스트 입력에 대 한 수신 대기 합니다. 키보드는 주요 수단입니다 <xref:System.Windows.ContentElement.TextInput>, 음성, 필기 및 기타 입력된 장치를 발생 시킬 수 있지만 <xref:System.Windows.ContentElement.TextInput>합니다.  
  
 키 조합으로 인해-기본 키보드 또는 입력된 방법 편집기를 통해-여러 주요 이벤트 하나만 텍스트 입력된 이벤트를 발생 시킬 수 있습니다.  
  
 이 이벤트에 대 한 별칭을 만들어는 <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> 연결 된이 클래스에 대 한 이벤트 있도록 <xref:System.Windows.ContentElement.TextInput> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 의 상속 됩니다. 에 연결 된 이벤트 처리기는 <xref:System.Windows.ContentElement.TextInput> 이벤트 원본에 연결 된 <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.TextInputEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewTextInput>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnTextInput%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.TextInput" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하십시오. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>손가락이 이 요소 위에 있는 동안 화면을 터치하면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로는 <xref:System.Windows.ContentElement.PreviewTouchDown> 및 <xref:System.Windows.ContentElement.TouchDown> 손가락 화면을 터치 하 고 이동 될 때까지 이벤트가 발생 하지 않습니다. 손가락 화면에서 이동 하지 않고 수행 하는 키를 눌러를 누른 채로의 동작을 보유 한 <xref:System.Windows.Input.Stylus>합니다. 키를 누른 동작을 마우스 오른쪽 단추로 클릭 하는 것과 같습니다.  
  
 발생 하는 <xref:System.Windows.ContentElement.PreviewTouchDown> 및 <xref:System.Windows.ContentElement.TouchDown> 손가락으로 화면을 터치 하는 즉시 발생 하도록 이벤트를 설정할는 <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> 연결 된 속성을 `false` 이 요소에 대 한 합니다.  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.TouchDownEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewTouchDown>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnTouchDown%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.TouchDown" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>터치가 이 요소의 경계 외부에서 내부로 이동할 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트는 항상 발생이 UI 요소에 터치 장치 캡처되는지 여부입니다.  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.TouchEnterEvent>|  
|라우팅 전략|직접|  
|대리자|<xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.|  
  
-   재정의 <xref:System.Windows.ContentElement.OnTouchEnter%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.TouchEnter" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소에 캡처된 터치 장치를 모두 가져옵니다.</summary>
        <value>이 요소에 캡처된 <see cref="T:System.Windows.Input.TouchDevice" /> 개체의 열거형입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소나 시각적 트리의 임의 자식 요소에 캡처된 터치 장치를 모두 가져옵니다.</summary>
        <value>이 요소나 시각적 트리의 임의 자식 요소에 캡처된 <see cref="T:System.Windows.Input.TouchDevice" /> 개체의 열거형입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소 위에 있는 터치 장치를 모두 가져옵니다.</summary>
        <value>이 요소 위에 있는 <see cref="T:System.Windows.Input.TouchDevice" /> 개체의 열거형입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소나 시각적 트리의 임의 자식 요소 위에 있는 터치 장치를 모두 가져옵니다.</summary>
        <value>이 요소나 시각적 트리의 임의 자식 요소 위에 있는 <see cref="T:System.Windows.Input.TouchDevice" /> 개체의 열거형입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>터치가 이 요소의 경계 내부에서 외부로 이동할 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.TouchLeaveEvent>|  
|라우팅 전략|직접|  
|대리자|<xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.|  
  
-   재정의 <xref:System.Windows.ContentElement.OnTouchLeave%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.TouchLeave" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>손가락이 이 요소 위에 있는 동안 화면에서 손가락을 움직이면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.TouchMoveEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewTouchMove>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnTouchMove%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.TouchMove" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>손가락이 이 요소 위에 있는 동안 화면에서 손가락을 떼면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.ContentElement.TouchUpEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.|  
  
-   해당 터널링 이벤트는 <xref:System.Windows.ContentElement.PreviewTouchUp>합니다.  
  
-   재정의 <xref:System.Windows.ContentElement.OnTouchUp%2A> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.ContentElement.TouchUp" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>