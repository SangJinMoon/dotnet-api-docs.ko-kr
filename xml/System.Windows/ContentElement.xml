<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ContentElement.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53cec39524c57162a57591073e35fafea313c0d5d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3cec39524c57162a57591073e35fafea313c0d5d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.ContentElement">
          <source>Provides a WPF core-level base class for content elements.</source>
          <target state="translated">콘텐츠 요소에 대한 WPF 핵심 수준 기본 클래스를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.ContentElement">
          <source>Content elements are designed for flow-style presentation, using an intuitive markup-oriented layout model and a deliberately simple object model.</source>
          <target state="translated">콘텐츠 요소는 직관적인 태그 지향 레이아웃 모델 및 단순한 개체 모델을 사용하는 흐름 스타일 프레젠테이션을 위한 것입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> defines the following common content characteristics:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 다음과 같은 일반적인 콘텐츠 특성을 정의합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>Input: All <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes provide support for basic input capture from keyboard, mouse, drag-and-drop operations, stylus controls, and accelerators.</source>
          <target state="translated">입력: 모든 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 파생된 클래스에서 키보드, 마우스, 끌어서 놓기 작업, 스타일러스의 컨트롤 및 액셀러레이터 기본 입력된 캡처에 대 한 지원을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>Focus: All <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes are potentially focusable.</source>
          <target state="translated">포커스: 모든 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 파생된 클래스는 잠재적으로 포커스를 받을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>(However, the default focusable state for the <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> base class is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">그러나 (에 대 한 기본 포커스 상태는 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 기본 클래스는 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>For details on how to make a <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> focusable, see <ph id="ph2">&lt;xref:System.Windows.ContentElement.Focusable%2A&gt;</ph>.) In addition, this class contains <ph id="ph3">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> that you can use for traversing the focus across related elements.</source>
          <target state="translated">확인 하는 방법에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 포커스를 받을 수, 참조 <ph id="ph2">&lt;xref:System.Windows.ContentElement.Focusable%2A&gt;</ph>.) 또한이 클래스는 <ph id="ph3">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> 관련된 요소 간에 포커스를 통과 하는 데 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>Events: <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> includes events that are related to input and focus; it also includes events for changes in state.</source>
          <target state="translated">이벤트: <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 포함와 관련 된 입력도 및 집중도; 상태에서 변경에 대 한 이벤트도 포함 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>In many cases, the <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> events are routed events.</source>
          <target state="translated">대부분의 경우에서는 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트는 라우트된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>In some cases, routed events have both tunneling and bubbling routing strategies, raised as separate events in response to the same state or condition.</source>
          <target state="translated">경우에 따라 라우트된 이벤트에는 별도 동일한 상태 또는 조건에 대 한 응답 이벤트로 발생 하는 터널링 및 버블링 라우팅 전략입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>Also, <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> defines <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> that can raise routed events and that can add or remove handlers to events.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 정의 <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> 추가 하거나 이벤트에 처리기를 제거할 수 수 raise 라우팅되는지 이벤트 및입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> shares many common <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> with <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 많은 공통 공유 <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> 와 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>These common <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> do not come from a shared class inheritance.</source>
          <target state="translated">이러한 공용 <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> 공유 클래스 상속의 제공 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>But they do share common naming, similar behavior, and similar internal implementation of <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> in each class.</source>
          <target state="translated">공용 이름, 비슷한 동작을 및의 내부 구현 유사한 공유 <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> 각 클래스에 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>The similarity is because <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> are each classes that are an element base, although each has different intentions for its markup object model behavior.</source>
          <target state="translated">유사성 ¿¡´ <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 태그 개체 모델 동작을 갖는 요소를 기반으로 되는 각 클래스는 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>In particular, <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> descends from <ph id="ph2">&lt;xref:System.Windows.Media.Visual&gt;</ph>, which provides the lower-level graphics support for rendering a <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> to a rectangular region within a composited window, whereas <ph id="ph4">&lt;xref:System.Windows.ContentElement&gt;</ph> defers rendering so that concepts more common to document scenarios, such as flow and wrapping, are more easily supported.</source>
          <target state="translated">특히, <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 에서 상속 <ph id="ph2">&lt;xref:System.Windows.Media.Visual&gt;</ph>, 하위 그래픽 렌더링에 대 한 지원을 제공 하는 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 합성 된 창 내에서 사각형 영역으로 반면 <ph id="ph4">&lt;xref:System.Windows.ContentElement&gt;</ph> 렌더링을 지연 되도록 자세한 개념 흐름 및 줄 바꿈, 같은 문서 시나리오에 공통 된 보다 쉽게 지원 됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>These two related classes also implement the common interfaces <ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.Animation.IAnimatable&gt;</ph>.</source>
          <target state="translated">이 두 클래스도 공용 인터페이스를 구현 관련 <ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Media.Animation.IAnimatable&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> class does not yet define all aspects of a complete content element for flow-style presentation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> 클래스는 전체 콘텐츠 요소는 흐름 스타일 프레젠테이션에 대 한의 모든 측면을 아직 정의 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph> is an immediately derived class of <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph> 클래스는 즉시 파생된 클래스의 <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ContentElement">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph> includes a more complete set of additional members that support rendering a <ph id="ph2">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph> within a content host and using the WPF framework-level layout system.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph> 전체 렌더링을 지 원하는 추가 멤버 집합이 포함 되어는 <ph id="ph2">&lt;see cref="T:System.Windows.FrameworkContentElement" /&gt;</ph> 콘텐츠 호스트 및 WPF 프레임 워크 수준 레이아웃 시스템을 사용 하 여 내에서.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="T:System.Windows.ContentElement">
          <source>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</source>
          <target state="translated">지정된 라우트된 이벤트에 대해 라우트된 이벤트 처리기를 추가하여 해당 처리기를 현재 요소의 처리기 컬렉션에 추가합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>An identifier for the routed event to be handled.</source>
          <target state="translated">처리할 라우트된 이벤트의 식별자입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>A reference to the handler implementation.</source>
          <target state="translated">처리기 구현에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</source>
          <target state="translated">지정된 라우트된 이벤트에 대해 라우트된 이벤트 처리기를 추가하여 해당 처리기를 현재 요소의 처리기 컬렉션에 추가합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>You can add the same handler for the same event multiple times without raising an exception.</source>
          <target state="translated">예외가 발생 하지 않고 동일한 이벤트에 대 한 동일한 처리기를 여러 번 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>However, the handler is actually invoked multiple times when the event is handled.</source>
          <target state="translated">그러나 처리기는 실제로 이벤트를 처리 하는 여러 번 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</source>
          <target state="translated">따라서이 동작은 처리기 구현에 대해 계산 해야 하는 의도 하지 않은 있습니다 어떻게 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>You typically use this method to provide the implementation of the "add" accessor for the <ph id="ph1">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> event access pattern of a custom routed event.</source>
          <target state="translated">"추가" 접근자에 대 한 구현을 제공 하기 위해 일반적으로이 방법을 사용 하면는 <ph id="ph1">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> 사용자 지정 된 라우트된 이벤트의 이벤트 액세스 패턴입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>An identifier for the.routed event to be handled.</source>
          <target state="translated">처리할 라우트된 이벤트의 식별자입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>A reference to the handler implementation.</source>
          <target state="translated">처리기 구현에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to register the handler such that it is invoked even when the routed event is marked handled in its event data; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.</source>
          <target state="translated">라우트된 이벤트가 해당 이벤트 데이터에서 처리된 것으로 표시된 경우에도 처리기를 호출하도록 등록하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 라우트된 이벤트가 이미 처리된 것으로 표시된 경우 처리기를 호출하지 않는 기본 조건으로 등록하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Do not routinely ask to rehandle a routed event.</source>
          <target state="translated">라우트된 이벤트를 다시 처리하도록 자주 요청하지 마세요.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</source>
          <target state="translated">지정된 라우트된 이벤트에 대해 라우트된 이벤트 처리기를 추가하여 해당 처리기를 현재 요소의 처리기 컬렉션에 추가합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Specify <ph id="ph1">&lt;paramref name="handledEventsToo" /&gt;</ph> as <ph id="ph2">&lt;see langword="true" /&gt;</ph> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.</source>
          <target state="translated">이벤트 경로를 따라 다른 요소에서 처리된 것으로 이미 표시된 라우트된 이벤트에 대해 제공된 처리기를 호출하기 위해 <ph id="ph1">&lt;paramref name="handledEventsToo" /&gt;</ph>를 <ph id="ph2">&lt;see langword="true" /&gt;</ph>로 지정합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Processing low-level input events in a practical way is a complex task.</source>
          <target state="translated">효율적으로 낮은 수준의 입력된 이벤트를 처리 하는 것은 복잡 한 작업입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event.</source>
          <target state="translated">특정 이벤트를 처리 하는 것으로 표시 되 고 다른 보다 직관적인 이벤트에 의해 대체 됩니다 있는 동작을 구현 하는 많은 컨트롤입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Generally, a control will only mark a platform input event as handled if there is some design intention for doing so.</source>
          <target state="translated">일반적으로 컨트롤은 처리 되므로 이렇게 하는 것에 대 한 디자인을 하는 경우 플랫폼 입력된 이벤트를 표시만 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>In certain scenarios, those design intentions might not be what your particular handling of the input event requires.</source>
          <target state="translated">특정 시나리오에서 이러한 디자인 의도 하지 못할 입력된 이벤트의 특정 처리에 필요한 사항입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>It is for these scenarios that registering handlers with <ph id="ph1">`handledEventsToo`</ph> as <ph id="ph2">`true`</ph> is appropriate.</source>
          <target state="translated">등록 하 이러한 시나리오는 사용 하 여 처리기 <ph id="ph1">`handledEventsToo`</ph> 으로 <ph id="ph2">`true`</ph> 적합 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>But you should not do this routinely.</source>
          <target state="translated">하지만 수행 해야이 정기적으로.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Invoking handlers in response to all events even if handled will complicate your own application event processing logic.</source>
          <target state="translated">처리 하는 경우에 모든 이벤트에 대 한 응답으로 처리기를 호출 하지 처리 논리가 응용 프로그램 이벤트 복잡 하 게 됩니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>You may see a decrease in performance if the handler logic is substantial.</source>
          <target state="translated">처리기 논리는 많은 경우 성능이 저하를 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.</source>
          <target state="translated">여기서 특정 컨트롤이 응용 프로그램 논리를 처리 하려면 이벤트를 처리 하는 개발 프로세스 중 이미 검색 한 경우 이미 처리 된 이벤트에 대 한 처리기를 연결의 사용을 예약 해야 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative.</source>
          <target state="translated">클래스를 특정 이벤트 제어 조합의 처리를 방지 하기 위한 또 다른 방법은 해당 이벤트의 대체 미리 보기를 사용 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>For example, if <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> is marked handled by class handling, you might be able to add handlers for <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> instead.</source>
          <target state="translated">예를 들어 경우 <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> 처리 됨으로 표시 클래스 처리에 의해 수 있습니다에 대 한 처리기를 추가 하려면 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> 대신 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>You can add the same handler for the same event multiple times without raising an exception.</source>
          <target state="translated">예외가 발생 하지 않고 동일한 이벤트에 대 한 동일한 처리기를 여러 번 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>However, the handler is actually invoked multiple times when the event is handled.</source>
          <target state="translated">그러나 처리기는 실제로 이벤트를 처리 하는 여러 번 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</source>
          <target state="translated">따라서이 동작은 처리기 구현에 대해 계산 해야 하는 의도 하지 않은 있습니다 어떻게 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>You typically use this method to provide the implementation of the "add" accessor for the <ph id="ph1">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> event access pattern of a custom routed event.</source>
          <target state="translated">"추가" 접근자에 대 한 구현을 제공 하기 위해 일반적으로이 방법을 사용 하면는 <ph id="ph1">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> 사용자 지정 된 라우트된 이벤트의 이벤트 액세스 패턴입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>The following example implements a handler invoked on the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> event on a page that attaches a defined handler to one of the named elements on the page using <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
          <target state="translated">다음 예제에서는 구현에서 호출 된 처리기는 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> 페이지에서 사용 하 여 페이지에서 명명 된 요소 중 하나에 정의 된 처리기를 연결 하는 이벤트 <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>This handler would be invoked even if another element along the route marked the shared event data as handled before reaching the handling element in the route.</source>
          <target state="translated">경로 따라 다른 요소는 경로에서 처리 요소에 도달 하기 전에 처리 되므로 공유 이벤트 데이터를 표시 하는 경우에이 처리기를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>The event route that handlers are added to.</source>
          <target state="translated">처리기가 추가되는 이벤트 경로입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>The event data that is used to add the handlers.</source>
          <target state="translated">처리기를 추가하는 데 사용되는 이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>This method uses the <ph id="ph1">&lt;see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /&gt;</ph> property of the arguments to create the handlers.</source>
          <target state="translated">이 메서드는 인수의 <ph id="ph1">&lt;see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /&gt;</ph> 속성을 사용하여 처리기를 만듭니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>Adds handlers to the specified <ph id="ph1">&lt;see cref="T:System.Windows.EventRoute" /&gt;</ph> for the current <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> event handler collection.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Windows.EventRoute" /&gt;</ph> 이벤트 처리기 컬렉션에 대해 지정된 <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>에 처리기를 추가합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>Use this method for content host elements (regardless whether they implement <ph id="ph1">&lt;xref:System.Windows.IContentHost&gt;</ph>) in order to add handlers for the content host child elements to the host <ph id="ph2">&lt;xref:System.Windows.EventRoute&gt;</ph>.</source>
          <target state="translated">콘텐츠 호스트 요소에 대 한이 메서드를 사용 하 여 (구현 여부에 관계 없이 <ph id="ph1">&lt;xref:System.Windows.IContentHost&gt;</ph>) 호스트에는 콘텐츠 호스트 자식 요소에 대 한 처리기를 추가 하려면 <ph id="ph2">&lt;xref:System.Windows.EventRoute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>Gets or sets a value that indicates whether this element can be used as the target of a drag-and-drop operation.</source>
          <target state="translated">이 요소를 끌어서 놓기 작업의 대상으로 사용할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element can be used as the target of a drag-and-drop operation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 요소를 끌어서 놓기 작업의 대상으로 사용할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>The default value is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <ph id="ph1">&lt;xref:System.Windows.ContentElement.AllowDrop%2A&gt;</ph> to  <ph id="ph2">`true`</ph>.</source>
          <target state="translated">끌어서 놓기 작업이 기본적으로 활성화 되지 않으며 설정 하 여 의도적으로 사용할 수 있어야 합니다 <ph id="ph1">&lt;xref:System.Windows.ContentElement.AllowDrop%2A&gt;</ph> 를 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> or any other base element class.</source>
          <target state="translated">이 기본 설정을 제외 끌어서 놓기 동작 구현 특정은 전적으로 및에서 정의 되지 않은 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 또는 기타 요소 기본 클래스입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>Certain controls, for example, <ph id="ph1">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph>, do have a default behavior, but no <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes have such a behavior.</source>
          <target state="translated">예를 들어 특정 컨트롤을 <ph id="ph1">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph>, 아니지만 기본 동작을 않은 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 파생된 클래스는 이러한 동작이 있는 경우.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>For more information on drag and drop, see <bpt id="p1">[</bpt>Drag and Drop Overview<ept id="p1">](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)</ept>.</source>
          <target state="translated">끌어서 놓기에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>놓기<ept id="p1">](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> overrides the metadata for this dependency property in its implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> 구현에서이 종속성 속성에 대 한 메타 데이터를 재정의합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>Specifically, <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> designates that this property allows property value inheritance (<ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph> is <ph id="ph3">`true`</ph> in metadata).</source>
          <target state="translated">특히, <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> 이 속성에서는 속성 값 상속 지정 (<ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph> 은 <ph id="ph3">`true`</ph> 메타 데이터에).</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>Property value inheritance in this context means that if there are child elements with no other value for <ph id="ph1">&lt;xref:System.Windows.ContentElement.AllowDrop%2A&gt;</ph> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from that parent element is assigned to all unassigned child elements by the property system.</source>
          <target state="translated">이 컨텍스트에서 속성 값을 상속 하는 경우에 대 한 다른 값이 없는 자식 요소가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.AllowDrop%2A&gt;</ph> 로컬 값 또는 스타일을이 값이 할당 된 (다시, 스타일, 기본적으로 가장 가까운 부모 요소의 값을 통해 할당 값 또는 로컬 값), 해당 부모 요소의 값은 속성 시스템에서 모든 할당 되지 않은 자식 요소에 할당 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>This means that you can specify whether to allow drop operations at the root element and then propagate the value to all <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> child elements that have not specifically assigned it a value of <ph id="ph2">`false`</ph>.</source>
          <target state="translated">즉, 루트 요소에서 삭제 작업을 허용 하 고 다음 모든 값을 전파 여부를 지정할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> 자식 요소를 할당 하지 않은 특히 값 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AllowDrop">
          <source>The following example sets <ph id="ph1">&lt;xref:System.Windows.ContentElement.AllowDrop%2A&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.AllowDrop%2A&gt;</ph> 에서 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.AllowDropProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.AllowDrop" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.AllowDrop" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="T:System.Windows.ContentElement">
          <source>Applies an animation to a specified dependency property on this element.</source>
          <target state="translated">이 요소의 지정된 종속성 속성에 애니메이션을 적용합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>The identifier for the property to animate.</source>
          <target state="translated">애니메이션 효과를 줄 속성의 식별자입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>The animation clock that controls and declares the animation.</source>
          <target state="translated">애니메이션을 제어하고 선언하는 애니메이션 클록입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>Applies an animation to a specified dependency property on this element.</source>
          <target state="translated">이 요소의 지정된 종속성 속성에 애니메이션을 적용합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>Any existing animations are stopped and replaced with the new animation.</source>
          <target state="translated">모든 기존 애니메이션이 중지되고 새 애니메이션으로 대체됩니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>To remove an animation from a property, specify the identifier for that property as <ph id="ph1">`dp`</ph> and specify <ph id="ph2">`clock`</ph> as <ph id="ph3">`null`</ph>.</source>
          <target state="translated">애니메이션에서 속성을 제거 하려면 해당 속성에 대 한 식별자를 지정 <ph id="ph1">`dp`</ph> 지정 <ph id="ph2">`clock`</ph> 으로 <ph id="ph3">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>This removes the animation and the animated property is set to its base value.</source>
          <target state="translated">애니메이션 제거한 속성 기준 값으로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>However, the originally associated animation clock is not stopped.</source>
          <target state="translated">그러나 원래 연결된 애니메이션 클록 중지 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>Any other animations assigned to that clock will continue to run.</source>
          <target state="translated">모든 애니메이션 클록 해당에 할당 된 계속 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The property to animate.</source>
          <target state="translated">애니메이션 효과를 주는 속성입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The animation clock that controls and declares the animation.</source>
          <target state="translated">애니메이션을 제어하고 선언하는 애니메이션 클록입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>A value of the enumeration.</source>
          <target state="translated">열거형 값입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /&gt;</ph>, which will stop any existing animation and replace with the new one.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /&gt;</ph>이며 이는 모든 기존 애니메이션을 중지하고 새 애니메이션으로 대체합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.</source>
          <target state="translated">속성에 이미 실행되는 애니메이션이 있는 경우 어떤 일이 발생할지를 지정하는 기능과 함께 이 요소의 지정된 종속성 속성에 애니메이션을 적용합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>To remove an animation from a property, specify the identifier for that property as <ph id="ph1">`dp`</ph> and specify <ph id="ph2">`clock`</ph> as <ph id="ph3">`null`</ph>.</source>
          <target state="translated">애니메이션에서 속성을 제거 하려면 해당 속성에 대 한 식별자를 지정 <ph id="ph1">`dp`</ph> 지정 <ph id="ph2">`clock`</ph> 으로 <ph id="ph3">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>This removes the animation and the animated property is set to its base value.</source>
          <target state="translated">애니메이션 제거한 속성 기준 값으로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>However, the originally associated animation clock is not stopped.</source>
          <target state="translated">그러나 원래 연결된 애니메이션 클록 중지 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Any other animations assigned to that clock will continue to run.</source>
          <target state="translated">모든 애니메이션 클록 해당에 할당 된 계속 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.AreAnyTouchesCaptured">
          <source>Gets a value that indicates whether at least one touch is captured to this element.</source>
          <target state="translated">하나 이상의 터치가 이 요소에 캡처되는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AreAnyTouchesCaptured">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if at least one touch is captured to this element; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">하나 이상의 터치가 이 요소에 캡처되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.AreAnyTouchesCapturedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.AreAnyTouchesCaptured" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.AreAnyTouchesCaptured" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin">
          <source>Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</source>
          <target state="translated">하나 이상의 터치가 이 요소나 시각적 트리의 임의 자식 요소에 캡처되는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if at least one touch is captured to this element or any child elements in its visual tree; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">하나 이상의 터치가 이 요소나 시각적 트리의 임의 자식 요소에 캡처되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver">
          <source>Gets a value that indicates whether at least one touch is pressed over this element.</source>
          <target state="translated">이 요소 위에서 하나 이상의 터치를 눌렀는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if at least one touch is pressed over this element; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 요소 위에서 하나 이상의 터치를 눌렀으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.AreAnyTouchesOver">
          <source>Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.</source>
          <target state="translated">이 요소나 시각적 트리의 임의 자식 요소 위에서 하나 이상의 터치를 눌렀는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.AreAnyTouchesOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 요소나 시각적 트리의 임의 자식 요소 위에서 하나 이상의 터치를 눌렀으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.AreAnyTouchesOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.AreAnyTouchesOver" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.AreAnyTouchesOver" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="T:System.Windows.ContentElement">
          <source>Starts an animation for a specified animated property on this element.</source>
          <target state="translated">이 요소에서 지정된 애니메이션 속성에 대한 애니메이션을 시작합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>The property to animate, which is specified as a dependency property identifier.</source>
          <target state="translated">종속성 속성 식별자로 지정된, 애니메이션을 지정할 속성입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>The timeline of the animation to start.</source>
          <target state="translated">시작할 애니메이션의 Timeline입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>Starts an animation for a specified animated property on this element.</source>
          <target state="translated">이 요소에서 지정된 애니메이션 속성에 대한 애니메이션을 시작합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</source>
          <target state="translated">속성에 애니메이션을 여부를 확인 하는 경우 note 애니메이션 시작 되 고 간주할 애니메이션이 적용 되지 않은 시작 지점 벗어난 첫 번째 프레임이 렌더링 되 면에 애니메이션 합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> for <ph id="ph2">`animation`</ph> is <ph id="ph3">`null`</ph>, then any current animations are removed and the current value of the property is held.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> 에 대 한 <ph id="ph2">`animation`</ph> 은 <ph id="ph3">`null`</ph>, 그런 다음 현재 애니메이션이 모두 제거 되 고 속성의 현재 값이 유지 됩니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>If the entire <ph id="ph1">`animation`</ph> value is <ph id="ph2">`null`</ph>, all animations are removed from the property and the property value reverts to its base value.</source>
          <target state="translated">경우 전체 <ph id="ph1">`animation`</ph> 값은 <ph id="ph2">`null`</ph>, 모든 애니메이션이 속성에서 제거 되 고 속성 값 기준 값으로 돌아갑니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>However, the originally associated animation timeline is not stopped.</source>
          <target state="translated">그러나 원래 연결된 애니메이션 타임 라인 중지 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>Any other animations assigned to that timeline will continue to run.</source>
          <target state="translated">해당 일정에 할당 된 다른 애니메이션 계속 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The property to animate, which is specified as the dependency property identifier.</source>
          <target state="translated">종속성 속성 식별자로 지정된, 애니메이션을 지정할 속성입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The timeline of the animation to be applied.</source>
          <target state="translated">적용할 애니메이션의 Timeline입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.</source>
          <target state="translated">새 애니메이션이 이미 속성 값에 영향을 주고 있는 현재(실행 중인) 애니메이션과 상호 작용하는 방법을 지정하는 열거형 값입니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.</source>
          <target state="translated">속성에 이미 실행 중인 애니메이션이 있는 경우 수행할 동작을 지정하는 옵션을 사용하여 이 요소의 지정된 애니메이션 속성에 대해 특정 애니메이션을 시작합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</source>
          <target state="translated">속성에 애니메이션을 여부를 확인 하는 경우 note 애니메이션 시작 되 고 간주할 애니메이션이 적용 되지 않은 시작 지점 벗어난 첫 번째 프레임이 렌더링 되 면에 애니메이션 합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> for <ph id="ph2">`animation`</ph> is <ph id="ph3">`null`</ph>, then any current animations are removed and the current value of the property is held.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> 에 대 한 <ph id="ph2">`animation`</ph> 은 <ph id="ph3">`null`</ph>, 그런 다음 현재 애니메이션이 모두 제거 되 고 속성의 현재 값이 유지 됩니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>If the entire <ph id="ph1">`animation`</ph> value is <ph id="ph2">`null`</ph>, all animations are removed from the property and the property value reverts to its base value.</source>
          <target state="translated">경우 전체 <ph id="ph1">`animation`</ph> 값은 <ph id="ph2">`null`</ph>, 모든 애니메이션이 속성에서 제거 되 고 속성 값 기준 값으로 돌아갑니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>However, the originally associated animation timeline is not stopped.</source>
          <target state="translated">그러나 원래 연결된 애니메이션 타임 라인 중지 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Any other animations assigned to that timeline will continue to run.</source>
          <target state="translated">해당 일정에 할당 된 다른 애니메이션 계속 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>Attempts to force capture of the mouse to this element.</source>
          <target state="translated">이 요소가 마우스를 캡처하게 합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the mouse is successfully captured; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">마우스가 캡처되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>To be captured, an element must be enabled.</source>
          <target state="translated">캡처할 수 요소를 사용할 수 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>Check whether <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;</ph> is <ph id="ph2">`true`</ph> before you call <ph id="ph3">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph>.</source>
          <target state="translated">확인 여부 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;</ph> 은 <ph id="ph2">`true`</ph> 호출 하기 전에 <ph id="ph3">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>If calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, then <ph id="ph3">&lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;</ph> is also <ph id="ph4">`true`</ph>.</source>
          <target state="translated">호출 하는 경우 <ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph> 반환 <ph id="ph2">`true`</ph>, 다음 <ph id="ph3">&lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;</ph> 이기도 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>If calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, then the <ph id="ph3">&lt;xref:System.Windows.ContentElement.GotMouseCapture&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt;</ph> events are raised, with <ph id="ph5">&lt;xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType&gt;</ph> in the event data reported as the element where the <ph id="ph6">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph> method is called.</source>
          <target state="translated">호출 하는 경우 <ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph> 반환 <ph id="ph2">`true`</ph>, 하면 <ph id="ph3">&lt;xref:System.Windows.ContentElement.GotMouseCapture&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt;</ph> 이벤트가 발생와 <ph id="ph5">&lt;xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType&gt;</ph> 데이터 요소와 보고 하는 이벤트에 여기서는 <ph id="ph6">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph> 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>If you force capture, you might interfere with existing captures—especially with captures that relate to drag-and-drop with the mouse.</source>
          <target state="translated">캡처를 강제 적용 하는 경우에 기존 캡처 충돌할 수 있습니다-특히 마우스 끌어서 놓기와 관련 된 캡처를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>To clear mouse capture from all elements, call <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType&gt;</ph> with the <ph id="ph2">`element`</ph> parameter provided as <ph id="ph3">`null`</ph>.</source>
          <target state="translated">모든 요소에서 마우스 캡처를 지우려면 호출 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType&gt;</ph> 와 <ph id="ph2">`element`</ph> 매개 변수로 제공 <ph id="ph3">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>The following example captures the mouse or releases capture, based on whether the mouse is already captured by the element.</source>
          <target state="translated">다음 예제에서는 마우스를 캡처하거나 되는 요소에 의해 이미 캡처되어 있는지 여부에 따라 캡처를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>Note that this example casts the prospective capture target element to the <ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> interface, and is thus initially calling the <ph id="ph2">&lt;xref:System.Windows.IInputElement.CaptureMouse%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">이 예에서는 캐스팅을 예상 캡처 대상 요소를 유의 <ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> 인터페이스를 호출 하 고는 <ph id="ph2">&lt;xref:System.Windows.IInputElement.CaptureMouse%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>Casting to <ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> is a technique that is useful if you are unsure whether the element you want to have capture the mouse is a <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> or a <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">캐스팅 <ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> 은 캡처 하려는 요소 마우스 인지 확실 하지 않은 경우에 유용 하는 기술은 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>The interface cast and the interface method call then calls the appropriate type-specific CaptureMouse implementation internally without requiring a trial cast to either <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">인터페이스 캐스트 및 인터페이스 메서드 호출 후 적합 한 형식 특정 CaptureMouse 구현 내부적으로 캐스팅을 시험적 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureMouse">
          <source>This same casting technique works for other members that <ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> defines, for instance many of the input-related events, and other input-related methods.</source>
          <target state="translated">이 캐스팅 기술은 다른 멤버에 대 한는 <ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> 정의 예를 들어 많은 입력 관련 이벤트 및 다른 입력 관련 방법.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.CaptureStylus">
          <source>Attempts to force capture of the stylus to this element.</source>
          <target state="translated">이 요소가 스타일러스를 캡처하게 합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.CaptureStylus">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stylus is successfully captured; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">스타일러스가 캡처되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureStylus">
          <source>The default implementation based on the underlying default stylus device always returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">기본 구현은 항상 기본 기본 스타일러스 장치에 따라 반환 <ph id="ph1">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureStylus">
          <source>However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.</source>
          <target state="translated">그러나, 입력된 시스템에 대 한 장치 구현을 제공 하는 입력된 장치를 확장 하는 경우 다른 결과 반환할 수 있는 대체 스타일러스 장치 구현으로 시스템을 만들 수는 있습니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureStylus">
          <source>When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds.</source>
          <target state="translated">스타일러스를 캡처한 요소 스타일러스가 해당 경계 밖에 있는 경우에 스타일러스 입력을 받습니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureStylus">
          <source>The stylus is typically captured only during drag-and-drop operations.</source>
          <target state="translated">스타일러스가 일반적으로 끌어서 놓기 작업 중에 캡처됩니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureStylus">
          <source>Calling this method calls an underlying static <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph> method <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.Capture%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출는 내부 정적 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph> 메서드 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.Capture%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureStylus">
          <source>The actual capture behavior is implemented by the active stylus device implementation.</source>
          <target state="translated">기본 캡처 동작이 활성 스타일러스 장치 구현에 의해 구현 됩니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureStylus">
          <source>To be captured, an element must be enabled.</source>
          <target state="translated">캡처할 수 요소를 사용할 수 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureStylus">
          <source>Check whether <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;</ph> is <ph id="ph2">`true`</ph> return before you call <ph id="ph3">&lt;xref:System.Windows.ContentElement.CaptureStylus%2A&gt;</ph>.</source>
          <target state="translated">확인 여부 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;</ph> 은 <ph id="ph2">`true`</ph> 호출 하기 전에 반환 <ph id="ph3">&lt;xref:System.Windows.ContentElement.CaptureStylus%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureStylus">
          <source>If calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureStylus%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;</ph> is also <ph id="ph4">`true`</ph>.</source>
          <target state="translated">호출 하는 경우 <ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureStylus%2A&gt;</ph> 반환 <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;</ph> 이기도 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source>The device to capture.</source>
          <target state="translated">캡처할 장치입니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source>Attempts to force capture of a touch to this element.</source>
          <target state="translated">이 요소에 터치를 캡처하도록 강제합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified touch is captured to this element; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">지정된 터치가 이 요소에 캡처되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureTouch%2A&gt;</ph> will return <ph id="ph2">`false`</ph> if the <ph id="ph3">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> is currently captured to another element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureTouch%2A&gt;</ph> 반환 <ph id="ph2">`false`</ph> 경우는 <ph id="ph3">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> 현재 다른 요소에 캡처됩니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source>If <ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureTouch%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, then the <ph id="ph3">&lt;xref:System.Windows.ContentElement.GotTouchCapture&gt;</ph> event is raised.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureTouch%2A&gt;</ph> 반환 <ph id="ph2">`true`</ph>, 그런 다음 <ph id="ph3">&lt;xref:System.Windows.ContentElement.GotTouchCapture&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source>To release capture of a single touch from this element, use the <ph id="ph1">&lt;xref:System.Windows.ContentElement.ReleaseTouchCapture%2A&gt;</ph> method and specify the touch device to release.</source>
          <target state="translated">이 요소에서 단일 터치의 캡처를 해제 하려면 사용는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.ReleaseTouchCapture%2A&gt;</ph> 메서드 터치 장치 릴리스를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source>To release all touches from this element, use the <ph id="ph1">&lt;xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A&gt;</ph> method.</source>
          <target state="translated">이 요소에서 모든 터치를 해제 하기 위해 사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source><ph id="ph1">&lt;paramref name="touchDevice" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="touchDevice" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.CommandBindings">
          <source>Gets a collection of <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> objects that are associated with this element.</source>
          <target state="translated">이 요소와 연결된 <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> 개체의 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.CommandBindings">
          <source>The collection of all <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> objects.</source>
          <target state="translated">모든 <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> 개체의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.CommandBindings">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> enables command handling of a specific command for this element and declares the linkage between a command, its events, and the handlers that are attached by this element.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> 이 요소에 대 한 특정 명령의 명령 처리를 사용 하 고 명령, 해당 이벤트 및이 요소에 의해 연결 된 처리기 사이의 링크를 선언 합니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.CommandBindings">
          <source>Another typical way to populate the <ph id="ph1">&lt;xref:System.Windows.ContentElement.CommandBindings%2A&gt;</ph> collection is to use <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> methods programmatically.</source>
          <target state="translated">또 다른 일반적인 방법은 채우는 데는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.CommandBindings%2A&gt;</ph> 를 사용 하는 컬렉션 <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> 메서드 프로그래밍 방식으로 합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.CommandBindings">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML 속성 요소 사용</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.CommandBindings">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.CommandBindings">
          <source><bpt id="p1">*</bpt>oneOrMoreCommandBindings<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>oneOrMoreCommandBindings<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.CommandBindings">
          <source>One or more <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> elements.</source>
          <target state="translated">하나 이상의 <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.CommandBindings">
          <source>Each of these should have a <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding.Command%2A&gt;</ph> attribute set to a known command, and attributes set for the <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> handler implementations.</source>
          <target state="translated">이러한 각 있어야는 <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding.Command%2A&gt;</ph> 특성이 알려진된 명령으로 설정 하 고 특성에 대 한 설정에서 <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> 처리기를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.CommandBindings">
          <source>For more information see <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.DragEnter">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag target.</source>
          <target state="translated">입력 시스템에서 이 요소를 끌기 대상으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragEnter">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.DragEnter?displayProperty=nameWithType&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.DragEnter?displayProperty=nameWithType&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragEnter">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragEnter&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragEnter&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragEnter">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragEnter">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragEnter">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragEnter">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragEnter">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragEnter">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDragEnter&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDragEnter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragEnter">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnDragEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnDragEnter%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.DragEnterEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.DragEnter" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.DragEnter" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragEnterEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragEnterEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragEnterEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragEnterEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragEnterEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.DragLeave">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag origin.</source>
          <target state="translated">입력 시스템에서 이 요소를 끌기 원본으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragLeave">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.DragLeave?displayProperty=nameWithType&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.DragLeave?displayProperty=nameWithType&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragLeave">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragLeave&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragLeave&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragLeave">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragLeave">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragLeave">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragLeave">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragLeave">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragLeave">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragLeave&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragLeave&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragLeave">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnDragLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnDragLeave%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.DragLeaveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.DragLeave" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.DragLeave" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragLeaveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragLeaveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragLeaveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragLeaveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragLeaveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.DragOver">
          <source>Occurs when the input system reports an underlying drag event with this element as the potential drop target.</source>
          <target state="translated">입력 시스템에서 이 요소를 잠재적인 놓기 대상으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragOver">
          <source>This event occurs even if the drag originates in the element bounds.</source>
          <target state="translated">이 이벤트는 끌기 요소 범위에서 시작 하는 경우에 발생 합니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragOver">
          <source>If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragEnter&gt;</ph> and related preview events.</source>
          <target state="translated">끌기 범위 외부에서 시작, 내부 이동 후도이 이벤트가 발생 하는 경우와 <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragEnter&gt;</ph> 및 관련 미리 보기 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragOver">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.DragOver?displayProperty=nameWithType&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.DragOver?displayProperty=nameWithType&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragOver">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragOver&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragOver&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragOver">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragOver">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragOver">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragOver">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragOver">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragOver">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragOver&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragOver&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.DragOver">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnDragOver%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnDragOver%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.DragOverEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.DragOver" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.DragOver" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragOverEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragOverEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragOverEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragOverEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DragOverEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.Drop">
          <source>Occurs when the input system reports an underlying drop event with this element as the drop target.</source>
          <target state="translated">입력 시스템에서 이 요소를 놓기 대상으로 사용하는 기본 놓기 이벤트를 보고하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.Drop">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.Drop?displayProperty=nameWithType&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.Drop?displayProperty=nameWithType&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.Drop">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.Drop&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.Drop&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.Drop">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.Drop">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.Drop">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.Drop">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.Drop">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.Drop">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDrop&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDrop&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.Drop">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnDrop%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnDrop%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.DropEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.Drop" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.Drop" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DropEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DropEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DropEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DropEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.DropEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.Focus">
          <source>Attempts to set focus to this element.</source>
          <target state="translated">이 요소에 포커스를 설정하려고 시도합니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.Focus">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if keyboard focus could be set to this element; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if this method call did not force focus.</source>
          <target state="translated">이 요소에 키보드 포커스를 설정할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 이 메서드를 호출해도 포커스를 강제 설정하지 못한 경우에는 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.Focus">
          <source>To be focusable, <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focusable%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;</ph> must both be <ph id="ph3">`true`</ph>.</source>
          <target state="translated">포커스를 <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focusable%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;</ph> 모두 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.Focus">
          <source>Note that nearly all <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes are not <ph id="ph2">&lt;xref:System.Windows.ContentElement.Focusable%2A&gt;</ph> by default.</source>
          <target state="translated">거의 모든 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 파생된 클래스가 없는 <ph id="ph2">&lt;xref:System.Windows.ContentElement.Focusable%2A&gt;</ph> 기본적으로 합니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.Focus">
          <source>Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">요소가 이면 특정 트리 내에서 포커스를 받을 수 하 고 사용 가능한 이벤트 처리 하는 경우에 포커스를 허용 하지 않음으로써 미리 보기 포커스 이벤트에 응답할 수 있습니다 (예: 합성 컨트롤) 하므로이 메서드는 반환 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.Focus">
          <source>Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical.</source>
          <target state="translated">포커스 일반적 두 개의 별개의 개념에 의해 관리: 키보드 포커스와 논리 포커스를 항상 동일 하지 않은입니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.Focus">
          <source>This method sets the logical focus.</source>
          <target state="translated">이 메서드는 논리적 포커스를 설정합니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.Focus">
          <source>There is no programmatic means to set keyboard focus specifically; keyboard focus is determined by user input.</source>
          <target state="translated">키보드 포커스를 특별히; 설정에 프로그래밍 방식으로 이란 키보드 포커스는 사용자 입력에 따라 결정 됩니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.Focus">
          <source>For more information, see <bpt id="p1">[</bpt>Focus Overview<ept id="p1">](~/docs/framework/wpf/advanced/focus-overview.md)</ept> and <bpt id="p2">[</bpt>Input Overview<ept id="p2">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>포커스 개요<ept id="p1">](~/docs/framework/wpf/advanced/focus-overview.md)</ept> 및 <bpt id="p2">[</bpt>입력 개요<ept id="p2">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.Focus">
          <source>If calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Windows.ContentElement.IsKeyboardFocused%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A&gt;</ph> are also <ph id="ph5">`true`</ph>.</source>
          <target state="translated">호출 하는 경우 <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph> 반환 <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Windows.ContentElement.IsKeyboardFocused%2A&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A&gt;</ph> 도 <ph id="ph5">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.Focus">
          <source>If the related properties are not already <ph id="ph1">`true`</ph>, when you call <ph id="ph2">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph>, one or more of the following events are raised in the following order: <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph> (source is the new focus target), <ph id="ph5">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> (source is the new focus target).</source>
          <target state="translated">관련된 속성이 없는 경우 <ph id="ph1">`true`</ph>호출 하는 경우, <ph id="ph2">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph>, 다음과 같은 순서로 발생 하는 다음 이벤트 중 하나 이상이: <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph> (소스는 새 포커스 대상), <ph id="ph5">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> (소스 대상인 새 포커스).</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.Focus">
          <source>The following example is a page-loaded event handler that finds a specified named paragraph in the document and sets focus to it.</source>
          <target state="translated">다음 예제에서는 지정 된 문서에서 단락 라는 발견 하는 페이지가 로드 이벤트 처리기 및 포커스를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.Focus">
          <source>Paragraphs are not focusable by default; this particular paragraph had a style applied (not shown) that used a style <ph id="ph1">&lt;xref:System.Windows.Setter&gt;</ph> to make it focusable.</source>
          <target state="translated">단락 기본적으로 하지 않습니다. 이 특정 단락에 적용 되는 스타일 스타일을 사용 하는 (표시 되지 않음) <ph id="ph1">&lt;xref:System.Windows.Setter&gt;</ph> 포커스를 받을 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.Focusable">
          <source>Gets or sets a value that indicates whether the element can receive focus.</source>
          <target state="translated">요소가 포커스를 받을 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is focusable; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">요소가 포커스를 받을 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>Only the focused element receives keyboard input.</source>
          <target state="translated">포커스가 있는 요소는 키보드 입력을 받습니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>Certain derived classes might override metadata for this dependency property such that the derived class is focusable by default.</source>
          <target state="translated">파생된 클래스는 기본적으로 포커스를 받을 수 있도록 특정 파생된 클래스에서이 종속성 속성에 대 한 메타 데이터를 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>When inherited by <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> or its derived classes, <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> overrides the metadata for this dependency property and redefines the default value of this property to be <ph id="ph3">`true`</ph>.</source>
          <target state="translated">상속 되는 경우 <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> 또는 해당 파생된 클래스 <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> 이 종속성 속성에 대 한 메타 데이터를 재정의 하 고이 속성의 기본값을 재정의 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>The following example creates a style that makes a <ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> focusable by default and gives it a visual behavior when it receives focus.</source>
          <target state="translated">스타일을 만드는 다음 예제는 <ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> 기본적으로 포커스를 받을 수 및 포커스를 받을 때 시각적 동작을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>When you derive from <ph id="ph1">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>, consider whether you want your element to be focusable, because by default it will not be focusable.</source>
          <target state="translated">파생 시키는 경우 <ph id="ph1">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>, 프로그램 요소를 기본적으로는 되지 않아 포커스를 사용할지 고려해 야 합니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>If you want your element to be focusable, override the metadata for this property in your derived class static constructor as follows:</source>
          <target state="translated">프로그램 요소를 원하는 경우 파생된 클래스 정적 생성자에서이 속성에 대 한 메타 데이터를 다음과 같이 재정의:</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.Focusable">
          <source>where <ph id="ph1">&lt;paramref name="myElement" /&gt;</ph> is the class name of the type that you are overriding the metadata value on.</source>
          <target state="translated">여기서 <ph id="ph1">&lt;paramref name="myElement" /&gt;</ph> 에 메타 데이터 값을 재정의 하는 형식의 클래스 이름입니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.FocusableChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph> property changes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.FocusableChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">이 멤버는 한 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트, 라우트된 이벤트가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.FocusableProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>The.dependency property to check.</source>
          <target state="translated">확인할 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.</source>
          <target state="translated">실행하거나 중지된 애니메이션의 가능한 애니메이션 값을 모두 무시하고 이 요소에 대해 지정된 속성의 기본 속성 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>The property value as if no animations are attached to the specified dependency property.</source>
          <target state="translated">지정된 종속성 속성에 연결된 애니메이션이 없는 경우와 동일한 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>If no animations are attached to the property, then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.GetAnimationBaseValue%2A&gt;</ph> return value is always identical to the <ph id="ph2">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph> return value.</source>
          <target state="translated">속성에 연결 된 애니메이션이 없는 경우 하면 <ph id="ph1">&lt;xref:System.Windows.ContentElement.GetAnimationBaseValue%2A&gt;</ph> 반환 값은 항상 동일는 <ph id="ph2">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph> 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs.</source>
          <target state="translated">애니메이션이 연결 인 경우 모든 가능한 애니메이션 시작 부분을 포함 하 여 값을 파생 하는 다음 및 중지 값 무시 되 고 속성 값이 가능한 다른 모든 입력에 따라 결정 됩니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>종속성 속성 값 우선 순위<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.GetUIParentCore">
          <source>When overridden in a derived class, returns an alternative <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> parent for this element if no visual parent exists.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 시각적 부모가 없으면 이 요소에 대해 다른 <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> 부모를 반환합니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.GetUIParentCore">
          <source>An object, if implementation of a derived class has an alternate parent connection to report.</source>
          <target state="translated">파생 클래스 구현에 보고할 다른 부모 연결이 있는 경우의 개체입니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.GetUIParentCore">
          <source>The default virtual implementation of this method returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">이 메서드의 기본 가상 구현 반환 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.GetUIParentCore">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> provides a practical implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> 실제 구현을 제공합니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.GetUIParentCore">
          <source>Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.</source>
          <target state="translated">대체 부모가 있는 요소를 만들어 경우 대체 부모 구조체 이벤트 라우트 되도록 표준 부모 시각적 트리를 라우팅의 표준 패턴에서와 차이가 하는 방식에서, 이벤트 라우팅에 사용 되는 중이거나에서 아래쪽의 라우팅 전략을 미리 봅니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>Occurs when the input system reports an underlying drag-and-drop event that involves this element.</source>
          <target state="translated">입력 시스템에서 이 요소를 포함하는 기본 끌어서 놓기 이벤트를 보고하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph> 이벤트를 사용 하면 끌어서 놓기 작업 중 사용자의 시각적 피드백을 제공 하기 위해 마우스 포인터의 모양을 수정 하려면 끌기 이벤트의 소스입니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>The visual feedback reinforces that a drag-and-drop operation is in process.</source>
          <target state="translated">시각적 피드백 끌어서 놓기 작업이 진행 되는 것입니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GiveFeedback">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGiveFeedback%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGiveFeedback%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.GiveFeedbackEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GiveFeedback" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GiveFeedback" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GiveFeedbackEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GiveFeedbackEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GiveFeedbackEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GiveFeedbackEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GiveFeedbackEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.GotFocus">
          <source>Occurs when this element gets logical focus.</source>
          <target state="translated">이 요소가 논리 포커스를 가져오면 발생합니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope.</source>
          <target state="translated">메서드 호출을 사용 하 여 포커스를 강제로 했지만 이전 키보드 포커스가 다른 범위에 있는 경우 논리적 포커스와 키보드 포커스가 다릅니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>In this scenario, keyboard focus remains where it is and the element where a <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph> method is called still gets logical focus.</source>
          <target state="translated">이 시나리오에서는 키보드 포커스가 유지 되 고 요소에는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph> 메서드는 여전히 논리적 포커스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>A more precise interpretation of this event is that it is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> property of an element in the route is changed from <ph id="ph2">`false`</ph> to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">이 이벤트의 보다 정확 하 게 설명은 발생할 때의 값은 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> 경로에 있는 요소의 속성에서 변경 되 <ph id="ph2">`false`</ph> 를 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">이 이벤트는 버블링 라우팅을 사용 하므로 포커스를 받는 요소 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that gained focus.</source>
          <target state="translated">확인은 <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> 에 포커스가 있는 실제 요소를 확인 하기 위해 이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>There is no corresponding tunneling event.</source>
          <target state="translated">해당 터널링 이벤트가 없습니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotFocus%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.GotFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotFocus" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotFocus" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>Occurs when the keyboard is focused on this element.</source>
          <target state="translated">이 요소에 키보드 포커스가 있으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <ph id="ph2">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> event is raised in many of the same circumstances.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph> 요소;에 대 한 포커스 상태를 유지 하는 속성에서 상태 변경을 추적 하는 유사한 이벤트 <ph id="ph2">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> 이벤트는 대부분의 동일한 상황에서 발생 합니다.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">이 이벤트는 버블링 라우팅을 사용 하므로 포커스가 있는 요소는 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has focus.</source>
          <target state="translated">확인의 <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> 이벤트 데이터에 포커스가 있는 실제 요소를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotKeyboardFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.GotKeyboardFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotKeyboardFocus" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotKeyboardFocus" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotKeyboardFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotKeyboardFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotKeyboardFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotKeyboardFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotKeyboardFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>Occurs when this element captures the mouse.</source>
          <target state="translated">이 요소가 마우스를 캡처하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds.</source>
          <target state="translated">마우스를 캡처한 요소 마우스 포인터가 해당 경계 밖에 있는 경우에 마우스 입력을 받습니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.</source>
          <target state="translated">마우스는 일반적으로 끌어서 놓기 작업 중에 캡처됩니다 및 끌어서 놓기 작업의 삭제 동작이 발생할 때까지 캡처된 상태로 유지 됩니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">이 이벤트는 버블링 라우팅을 사용 하기 때문에 캡처를 가진 요소를 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has mouse capture.</source>
          <target state="translated">확인 된 <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> 마우스 있는 실제 요소를 결정 하는 데이터의 캡처 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType&gt;</ph> attached event for  this class so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.GotMouseCapture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.GotMouseCapture&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotMouseCapture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotMouseCapture&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>There is no defined corresponding tunneling event.</source>
          <target state="translated">정의 된 해당 터널링 이벤트가 없습니다.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotMouseCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotMouseCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotMouseCapture%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.GotMouseCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotMouseCapture" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotMouseCapture" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotMouseCaptureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotMouseCaptureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotMouseCaptureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotMouseCaptureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotMouseCaptureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>Occurs when this element captures the stylus.</source>
          <target state="translated">이 요소가 스타일러스를 캡처하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</source>
          <target state="translated">스타일러스를 캡처한 요소 포인터가 해당 경계 밖에 있는 경우에 스타일러스 입력을 받습니다.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.</source>
          <target state="translated">스타일러스가 끌어서 놓기 작업의 삭제 동작이 발생할 때까지 캡처를 저장 하 고는 일반적으로 끌어서 놓기 작업 중에 캡처됩니다.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">이 이벤트는 버블링 라우팅을 사용 하기 때문에 캡처를 가진 요소를 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has capture.</source>
          <target state="translated">확인은 <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> 이벤트 데이터 캡처를 가진 실제 요소를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>This event creates an alias for the  attached event for this class so that <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotStylusCapture&gt;</ph> is part of the class members list when <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트는이 클래스에 대 한 연결 된 이벤트에 대 한 별칭을 만들어 있도록 <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotStylusCapture&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotStylusCapture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotStylusCapture&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>There is no defined corresponding tunneling event.</source>
          <target state="translated">정의 된 해당 터널링 이벤트가 없습니다.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotStylusCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotStylusCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotStylusCapture%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.GotStylusCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotStylusCapture" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotStylusCapture" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotStylusCaptureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotStylusCaptureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotStylusCaptureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotStylusCaptureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.GotStylusCaptureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.GotTouchCapture">
          <source>Occurs when a touch is captured to this element.</source>
          <target state="translated">이 요소에 터치가 캡처될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotTouchCapture">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotTouchCapture">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotTouchCapture">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotTouchCapture">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotTouchCapture">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotTouchCapture">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.GotTouchCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.GotTouchCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotTouchCapture" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotTouchCapture" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.HasAnimatedProperties">
          <source>Gets a value that indicates whether this element has any animated properties.</source>
          <target state="translated">이 요소에 애니메이션이 적용된 속성이 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.HasAnimatedProperties">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element has animations attached to any of its properties; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 요소의 속성에 애니메이션이 연결되어 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.HasAnimatedProperties">
          <source>This property returns <ph id="ph1">`true`</ph> either for persistent (unclocked, always-running) animations or for animations that have a specific timeline.</source>
          <target state="translated">이 속성은 반환 <ph id="ph1">`true`</ph> 영구 (unclocked, 항상 실행 중) 애니메이션이 또는 특정 시간 표시 막대의 애니메이션 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.InputBindings">
          <source>Gets the collection of input bindings that are associated with this element.</source>
          <target state="translated">이 요소와 연결된 입력 바인딩 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.InputBindings">
          <source>The collection of input bindings.</source>
          <target state="translated">입력 바인딩 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.InputBindings">
          <source>Input bindings support the binding of commands to input devices.</source>
          <target state="translated">입력된 바인딩 입력 장치에 있는 명령의 바인딩을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.InputBindings">
          <source>For example, <ph id="ph1">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> implements input bindings that include properties that are specific to mouse devices.</source>
          <target state="translated">예를 들어 <ph id="ph1">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> 입력 마우스 장치와 관련 된 속성을 포함 하는 바인딩을 구현 합니다.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.InputBindings">
          <source>The collection of input bindings includes both input bindings that pertain to the type and also input bindings that are declared on the instance.</source>
          <target state="translated">입력된 바인딩 컬렉션에는 형식과 관련 된 입력된 바인딩을 모두 및 인스턴스에서 선언도 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.InputBindings">
          <source>A related property, <ph id="ph1">&lt;xref:System.Windows.ContentElement.CommandBindings%2A&gt;</ph>, maintains a collection of command bindings.</source>
          <target state="translated">관련된 속성인 <ph id="ph1">&lt;xref:System.Windows.ContentElement.CommandBindings%2A&gt;</ph>, 명령 바인딩의 컬렉션을 유지 합니다.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.InputBindings">
          <source>These bindings differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands and class-specific handlers for them.</source>
          <target state="translated">이러한 바인딩은 입력된 바인딩 한다는 점에서 다릅니다 명령 처리에 대 한 알려진된 명령 및 관련 클래스 처리기에 연결 된 작업의 다음 수준 아래로 나타냅니다.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.InputBindings">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML 속성 요소 사용</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.InputBindings">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.InputBindings">
          <source><bpt id="p1">*</bpt>oneOrMoreInputBindings<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>oneOrMoreInputBindings<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.InputBindings">
          <source>One or more <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> elements (typically the <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> derived classes).</source>
          <target state="translated">하나 이상의 <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> 요소 (일반적으로 <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> 파생 클래스).</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.InputBindings">
          <source>Each of these is expected to have a <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;</ph> attribute set.</source>
          <target state="translated">사용할 수는 이러한 각는 <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;</ph> 특성이 설정 합니다.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsEnabled">
          <source>Gets or sets a value that indicates whether this element is enabled in the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.</source>
          <target state="translated">이 요소를 <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>에서 사용할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsEnabled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is enabled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">요소를 사용할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsEnabled">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsEnabled">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsEnabled">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsEnabled">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsEnabled">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsEnabled">
          <source>The following example creates a style that includes a property setter that gives an alternate visual behavior when a <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;</ph> <ph id="ph3">`false`</ph>.</source>
          <target state="translated">다음 예제에서는 다른 시각적 동작을 제공 하는 속성 setter를 포함 하는 스타일 때는 <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> 로 설정 된 <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;</ph> <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.IsEnabledChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsEnabled" /&gt;</ph> property on this element changes.</source>
          <target state="translated">이 요소의 <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsEnabled" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.IsEnabledChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">이 멤버는 한 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트, 라우트된 이벤트가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsEnabledCore">
          <source>Gets a value that becomes the return value of <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsEnabled" /&gt;</ph> in derived classes.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsEnabled" /&gt;</ph>의 반환 값이 되는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsEnabledCore">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is enabled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">요소를 사용할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsEnabledCore">
          <source>The default implementation of this property caches the value and also calculates whether the parent element of this element is enabled.</source>
          <target state="translated">이 속성의 기본 구현 값을 캐시 하 고도이 요소의 부모 요소를 사용할 수 있는지 여부를 계산 합니다.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsEnabledCore">
          <source>(If the parent is not enabled, the child element cannot be effectively enabled in practical <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.) If you choose to override this implementation, make certain that you call the base implementation to preserve this behavior.</source>
          <target state="translated">(부모를 사용 하지 않는 경우 자식 요소가 없습니다 사용 하도록 유용한 <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.) 이 구현을 재정의 확인 하려는 경우이 동작을 유지 하는 기본 구현을 호출 합니다.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsEnabledProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsEnabled" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsEnabled" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsFocused">
          <source>Gets a value that determines whether this element has logical focus.</source>
          <target state="translated">이 요소에 논리 포커스가 있는지 여부를 결정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsFocused">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element has logical focus; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 요소에 논리적 포커스가 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsFocused">
          <source>Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application.</source>
          <target state="translated">응용 프로그램에 여러 포커스 부서와 같은 응용 프로그램의 나머지 부분에서는 메뉴 내용 사이의 논리적 포커스와 키보드 포커스가 달라질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsFocused">
          <source>In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus.</source>
          <target state="translated">이 시나리오에서는 응용 프로그램 UI의 한 요소에 키보드 포커스만 될 수 있습니다, 그리고 다른 포커스 사업부의 특정 요소 논리적 포커스 수 계속 유지 하는 반면 합니다.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsFocused">
          <source>For more information on logical focus, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept> and <bpt id="p2">[</bpt>Focus Overview<ept id="p2">](~/docs/framework/wpf/advanced/focus-overview.md)</ept>.</source>
          <target state="translated">논리 포커스에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept> 및 <bpt id="p2">[</bpt>포커스 개요<ept id="p2">](~/docs/framework/wpf/advanced/focus-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsFocused">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsFocused">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsFocused">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsFocused">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsFocused">
          <source>The following example creates a style that makes a <ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> focusable by default and gives it a visual behavior when it receives focus.</source>
          <target state="translated">스타일을 만드는 다음 예제는 <ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> 기본적으로 포커스를 받을 수 및 포커스를 받을 때 시각적 동작을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsFocusedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsFocused" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsFocused" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsInputMethodEnabled">
          <source>Gets a value that indicates whether an input method system, such as an <ph id="ph1">[!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)]</ph>, is enabled for processing the input to this element.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)]</ph> 등의 입력 메서드 시스템에서 이 요소에 대한 입력을 처리할 수 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsInputMethodEnabled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if an input method is active; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">입력 메서드가 활성 상태이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsInputMethodEnabled">
          <source>The default value of the underlying attached property is <ph id="ph1">&lt;see langword="true" /&gt;</ph>; however, this value is influenced by the state of input methods at runtime.</source>
          <target state="translated">기본 연결 된 속성의 기본값은 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이지만이 값은 런타임에 입력된 방법의 상태를 받습니다.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsInputMethodEnabled">
          <source>This property returns the value that is returned by the attached property <ph id="ph1">&lt;xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType&gt;</ph> for the currently enabled input methods (keyboard, speech, and other input devices).</source>
          <target state="translated">이 속성은 연결 된 속성에서 반환 되는 값을 반환 <ph id="ph1">&lt;xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType&gt;</ph> 현재 활성화 된 입력된 방법 (키보드, 음성 변환, 및 기타 입력된 장치)에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsKeyboardFocused">
          <source>Gets a value that indicates whether this element has keyboard focus.</source>
          <target state="translated">이 요소에 키보드 포커스가 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocused">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element has keyboard focus; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 요소에 키보드 포커스가 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocused">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocused">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocused">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocused">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocused">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.IsKeyboardFocusedChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /&gt;</ph> property changes on this element.</source>
          <target state="translated">이 요소의 <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.IsKeyboardFocusedChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">이 멤버는 한 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트, 라우트된 이벤트가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsKeyboardFocusedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsKeyboardFocusWithin">
          <source>Gets a value that indicates whether keyboard focus is anywhere within the element or child elements.</source>
          <target state="translated">키보드 포커스가 요소 내에 있는지 아니면 자식 요소에 있는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocusWithin">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if keyboard focus is on the element or its child elements; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">키보드 포커스가 요소 또는 자식 요소에 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocusWithin">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocusWithin">
          <source>Changes to the value of this property typically raise the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph> event, unless a derived class has overridden <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A&gt;</ph> to suppress the event.</source>
          <target state="translated">이 속성의 값을 변경 하는 일반적으로 발생는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph> 이벤트의 경우 파생된 클래스 재정의 하지 않았다면 <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A&gt;</ph> 이벤트를 표시 하지 않으려면입니다.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocusWithin">
          <source>You do not set this property directly, but you can set the focus to the element by calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph>, or by making a <ph id="ph2">&lt;xref:System.Windows.ContentElement.MoveFocus%2A&gt;</ph> request.</source>
          <target state="translated">이 속성은 직접 설정 하지는 않지만 호출 하 여 요소에 포커스를 설정할 수 <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph>, 하거나 여는 <ph id="ph2">&lt;xref:System.Windows.ContentElement.MoveFocus%2A&gt;</ph> 요청 합니다.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocusWithin">
          <source>Either of these method calls might change this property value.</source>
          <target state="translated">이 속성 값이 변경 될 수 있습니다 이러한 메서드 호출 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocusWithin">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocusWithin">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocusWithin">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsKeyboardFocusWithin">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /&gt;</ph> property changes on this element.</source>
          <target state="translated">이 요소의 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">이 멤버는 한 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트, 라우트된 이벤트가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsKeyboardFocusWithinProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsKeyboardFocusWithin" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsKeyboardFocusWithin" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsMouseCaptured">
          <source>Gets a value that indicates whether the mouse is captured by this element.</source>
          <target state="translated">마우스가 이 요소에 의해 캡처되었는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptured">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element has mouse capture; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">요소에 마우스가 캡처되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptured">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptured">
          <source>Mouse capture state is related to in-process drag-and-drop operations.</source>
          <target state="translated">마우스 캡처 상태는 in-process 끌어서 놓기 작업 관련이 있습니다.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptured">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptured">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptured">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptured">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptured">
          <source>The following example turns the mouse capture state on or off based on whether the mouse is already captured by the element.</source>
          <target state="translated">다음 예제에서는 켜거나 마우스 캡처 상태는 요소에서 이미 캡처되어 있는지 여부에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.IsMouseCapturedChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseCaptured" /&gt;</ph> property changes on this element.</source>
          <target state="translated">이 요소의 <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseCaptured" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.IsMouseCapturedChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">이 멤버는 한 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트, 라우트된 이벤트가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsMouseCapturedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseCaptured" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseCaptured" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsMouseCaptureWithin">
          <source>Gets a value that determines whether mouse capture is held by this element or by child elements in its element tree.</source>
          <target state="translated">마우스 캡처가 이 요소 또는 해당 요소 트리의 자식 요소에 의해 보류되는지 여부를 결정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptureWithin">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element or a contained element has mouse capture; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 요소 또는 포함된 요소에 마우스 캡처가 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptureWithin">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptureWithin">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptureWithin">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptureWithin">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseCaptureWithin">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" /&gt;</ph> changes on this element.</source>
          <target state="translated">이 요소의 <ph id="ph1">&lt;see cref="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" /&gt;</ph> 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">이 멤버는 한 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트, 라우트된 이벤트가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source>Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.</source>
          <target state="translated">마우스 포인터의 위치가 요소 합치기를 고려한 적중 횟수 테스트 결과와 일치하는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the mouse pointer is over the same element result as a hit test; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 마우스 포인터가 적중 횟수 테스트와 동일한 요소 결과 위에 있으면 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source>Unlike <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph>, this property is only <ph id="ph2">`true`</ph> if the mouse pointer is over the literal element—as it is for a hit test.</source>
          <target state="translated">와 달리 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph>,이 속성은만 <ph id="ph2">`true`</ph> 마우스 포인터가 literal 요소 위에 있으면-적중 횟수 테스트의 경우와 합니다.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source>If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be <ph id="ph1">`false`</ph>.</source>
          <target state="translated">마우스 포인터가 자식 요소 위에 있으면 특히 요소의 하위 수준 템플릿 및 합성 포함 된 요소를 통해이 속성은 됩니다 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source>Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</source>
          <target state="translated">컨트롤은 복합 방법을 모를 경우 (예를 들어이 속성 사용 하면 사용자 지정 컨트롤 서식 파일에서 정의 하는 컨트롤에 대 한),이 속성에서 예기치 않은 결과 반환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source>For most scenarios where you are not authoring controls, use <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph> instead.</source>
          <target state="translated">컨트롤 제작 하지 않는 대부분의 시나리오에 대 한 사용 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph> 대신 합니다.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source>If the mouse is captured by this element, and this property is <ph id="ph1">`true`</ph> at time of capture, this property will continue to return <ph id="ph2">`true`</ph> until mouse capture is lost and the pointer is not over its bounds.</source>
          <target state="translated">이 요소에 마우스가 캡처되는지 경우 및이 속성은 <ph id="ph1">`true`</ph> 캡처 시이 속성은 반환할 계속 <ph id="ph2">`true`</ph> 때까지 마우스 캡처가 손실 되 고 해당 영역 위에 포인터가 않습니다.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseDirectlyOver">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /&gt;</ph> property changes on this element.</source>
          <target state="translated">이 요소의 <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">이 멤버는 한 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트, 라우트된 이벤트가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsMouseDirectlyOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsMouseOver">
          <source>Gets a value that indicates whether the mouse pointer is located over this element (including visual child elements, or its control compositing).</source>
          <target state="translated">마우스 포인터가 시각적 자식 요소 또는 해당 컨트롤 합성을 포함하여 이 요소 위에 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if mouse pointer is over the element or its child elements; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">마우스 포인터가 요소 또는 자식 요소 위에 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseOver">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseOver">
          <source>Although an analogous "IsMouseOverChanged" event does not exist, several similar events do.</source>
          <target state="translated">유사한 "IsMouseOverChanged" 이벤트가 존재 하지 않더라도 여러 비슷한 이벤트 수행 합니다.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseOver">
          <source>For example, you can use <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;</ph>.</source>
          <target state="translated">사용할 수는 예를 들어 <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseOver">
          <source>If this element captures the mouse, this property remains <ph id="ph1">`true`</ph> until mouse capture is lost and the mouse pointer leaves the element bounds.</source>
          <target state="translated">이 속성은이 요소에서 마우스를 캡처할 경우 <ph id="ph1">`true`</ph> 마우스 캡처가 손실 되 고 마우스 포인터가 요소 범위를 벗어날 때까지 합니다.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseOver">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseOver">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseOver">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseOver">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsMouseOver">
          <source>The following example creates a style that includes a property setter that gives an alternate visual behavior when a <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> reports <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph> <ph id="ph3">`true`</ph>.</source>
          <target state="translated">다음 예제에서는 다른 시각적 동작을 제공 하는 속성 setter를 포함 하는 스타일 때는 <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> 보고서 <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph> <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsMouseOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseOver" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseOver" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsStylusCaptured">
          <source>Gets a value that indicates whether the stylus is captured to this element.</source>
          <target state="translated">이 요소에 스타일러스가 캡처되는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptured">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element has stylus capture; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">요소에 스타일러스가 캡처되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptured">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptured">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptured">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptured">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptured">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptured">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptured">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.IsStylusCapturedChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusCaptured" /&gt;</ph> property changes on this element.</source>
          <target state="translated">이 요소의 <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusCaptured" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.IsStylusCapturedChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">이 멤버는 한 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트, 라우트된 이벤트가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsStylusCapturedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusCaptured" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusCaptured" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsStylusCaptureWithin">
          <source>Gets a value that determines whether stylus capture is held by this element, including child elements and control compositing.</source>
          <target state="translated">자식 요소 및 컨트롤 합성을 포함하여 스타일러스 캡처를 이 요소에서 보관하는지를 결정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptureWithin">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if stylus capture is held within this element; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">스타일러스 캡처가 이 요소 내에 보관되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptureWithin">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptureWithin">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptureWithin">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptureWithin">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptureWithin">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusCaptureWithin">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /&gt;</ph> property changes on this element.</source>
          <target state="translated">이 요소의 <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">이 멤버는 한 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트, 라우트된 이벤트가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsStylusCaptureWithinProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.</source>
          <target state="translated">스타일러스의 위치가 요소 합치기를 고려한 적중 횟수 테스트 결과와 일치하는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stylus is over the same element as a hit test; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">스타일러스가 적중 테스트와 같은 요소 위에 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>Unlike <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph>, this property is only <ph id="ph2">`true`</ph> if the stylus is over the element.</source>
          <target state="translated">와 달리 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph>,이 속성은만 <ph id="ph2">`true`</ph> 스타일러스가 요소 위에 있는 경우.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>If the stylus is instead over a child element or over elements that are part of an element's deeper compositing, this property will be <ph id="ph1">`false`</ph>.</source>
          <target state="translated">스타일러스가 요소의 하위 수준 합성 요소 또는 자식 요소 위에 있는 경우이 속성은 됩니다 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</source>
          <target state="translated">컨트롤은 복합 방법을 모를 경우 (예를 들어이 속성 사용 하면 사용자 지정 컨트롤 서식 파일에서 정의 하는 컨트롤에 대 한),이 속성에서 예기치 않은 결과 반환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>For most scenarios where you are not authoring controls, use <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph> instead.</source>
          <target state="translated">컨트롤 제작 하지 않는 대부분의 시나리오에 대 한 사용 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph> 대신 합니다.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>If this element has stylus capture and this property is <ph id="ph1">`true`</ph> at the time of capture, this property remains <ph id="ph2">`true`</ph> until stylus capture is lost and the stylus is not over its bounds.</source>
          <target state="translated">이 속성은이 요소에 스타일러스 캡처가 경우 <ph id="ph1">`true`</ph> 캡처 시이 속성은 <ph id="ph2">`true`</ph> 스타일러스 캡처를 손실 하 고는 스타일러스가 범위 위로 때까지 합니다.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusDirectlyOver">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /&gt;</ph> property changes on this element.</source>
          <target state="translated">이 요소의 <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">이 멤버는 한 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트, 라우트된 이벤트가 아니라 합니다.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsStylusDirectlyOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.IsStylusOver">
          <source>Gets a value that indicates whether the stylus is located over this element (including visual child elements).</source>
          <target state="translated">스타일러스가 시각적 자식 요소를 포함하여 이 요소 위에 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stylus is over the element or its child elements; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">스타일러스가 요소 또는 자식 요소 위에 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusOver">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusOver">
          <source>If this element has stylus capture, this property remains <ph id="ph1">`true`</ph> until stylus capture is lost and the pointer is out of its bounds.</source>
          <target state="translated">이 속성은이 요소에 스타일러스 캡처가, <ph id="ph1">`true`</ph> 스타일러스 캡처를 손실 하 고 포인터의 범위를 벗어났습니다.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusOver">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusOver">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusOver">
          <source>Dependency Property Information</source>
          <target state="translated">종속성 속성 정보</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusOver">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusOver">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">로 메타 데이터 속성 설정 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.IsStylusOver">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.IsStylusOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusOver" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsStylusOver" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.KeyDown">
          <source>Occurs when a key is pressed while focus is on this element.</source>
          <target state="translated">이 요소에 포커스가 있는 동안 키를 누르면 발생합니다.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>Key handling interacts with other platform features such as commanding and text composition.</source>
          <target state="translated">키 처리 명령 및 텍스트 컴퍼지션 등 다른 플랫폼의 기능으로 작용합니다.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> event is a lower-level text input event that might not behave as expected on certain controls.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> 이벤트는 하위 수준의 텍스트 입력된 이벤트를 특정 컨트롤에 예상 대로 동작 하지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</source>
          <target state="translated">일부 컨트롤은 컨트롤 합성 클래스 처리에 더 높은 수준의 버전의 텍스트를 제공 하는 입력 처리 및 관련 이벤트 또는 때문입니다.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewKeyDown&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewKeyDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnKeyDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnKeyDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.KeyDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.KeyDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.KeyDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.KeyDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.KeyDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.KeyDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.KeyDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.KeyDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.KeyUp">
          <source>Occurs when a key is released while focus is on this element.</source>
          <target state="translated">이 요소에 포커스가 있는 동안 키를 놓을 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType&gt;</ph> attached event for this class so that  <ph id="ph2">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyUp">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyUp">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewKeyUp&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewKeyUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.KeyUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnKeyUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnKeyUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.KeyUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.KeyUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.KeyUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.KeyUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.KeyUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.KeyUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.KeyUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.KeyUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.LostFocus">
          <source>Occurs when this element loses logical focus.</source>
          <target state="translated">이 요소가 논리 포커스를 손실하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope.</source>
          <target state="translated">메서드 호출을 사용하여 의도적으로 포커스를 다른 위치로 이동했지만 이전 키보드 포커스가 다른 범위에 존재하는 경우 논리적 포커스와 키보드 포커스가 달라집니다.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>In this scenario, keyboard focus remains where it is, and the element where a <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph> method is called still gets logical focus.</source>
          <target state="translated">이 시나리오, 키보드 포커스 위치를 유지, 및 요소에 있는 한 <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph> 메서드는 여전히 논리적 포커스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>A more precise interpretation of this event is that it is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> property of an element in the route changes from <ph id="ph2">`true`</ph> to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">이 이벤트의 보다 정확 하 게 설명은 발생할 때의 값은 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> 에서 경로에 있는 요소의 속성 변경 <ph id="ph2">`true`</ph> 를 <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">이 이벤트는 버블링 라우팅을 사용 하므로 포커스를 손실 하는 요소는 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that gained focus.</source>
          <target state="translated">확인은 <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> 에 포커스가 있는 실제 요소를 확인 하기 위해 이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>There is no corresponding tunneling event.</source>
          <target state="translated">해당 터널링 이벤트가 없습니다.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostFocus%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.LostFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostFocus" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostFocus" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>Occurs when the keyboard is no longer focused on this element.</source>
          <target state="translated">이 요소에 더 이상 키보드 포커스가 없으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">이 이벤트는 버블링 라우팅을 사용 하므로 포커스를 잃은 요소 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost focus.</source>
          <target state="translated">확인은 <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> 에 포커스를 잃은 실제 요소를 확인 하기 위해 이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostKeyboardFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.LostKeyboardFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostKeyboardFocus" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostKeyboardFocus" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostKeyboardFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostKeyboardFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostKeyboardFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostKeyboardFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostKeyboardFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>Occurs when this element loses mouse capture.</source>
          <target state="translated">이 요소가 마우스 캡처를 손실하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds.</source>
          <target state="translated">마우스를 캡처한 요소 포인터가 해당 경계 밖에 있는 경우에 마우스 입력을 받습니다.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>The mouse is typically captured only during drag-and-drop operations.</source>
          <target state="translated">마우스는 끌어서 놓기 작업 중에 일반적으로 캡처됩니다.</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">이 이벤트는 버블링 라우팅을 사용 하므로 캡처를 손실 하는 요소는 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost capture.</source>
          <target state="translated">확인 된 <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> 이벤트 데이터 캡처를 손실 하는 실제 요소를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.LostMouseCapture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.LostMouseCapture&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.LostMouseCapture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.LostMouseCapture&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>There is no defined corresponding tunneling event.</source>
          <target state="translated">정의 된 해당 터널링 이벤트가 없습니다.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostMouseCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostMouseCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostMouseCapture%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.LostMouseCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostMouseCapture" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostMouseCapture" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostMouseCaptureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostMouseCaptureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostMouseCaptureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostMouseCaptureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostMouseCaptureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>Occurs when this element loses stylus capture.</source>
          <target state="translated">이 요소가 스타일러스 캡처를 손실하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</source>
          <target state="translated">스타일러스를 캡처한 요소 포인터가 해당 경계 밖에 있는 경우에 스타일러스 입력을 받습니다.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>The stylus is typically captured only during drag-and-drop operations.</source>
          <target state="translated">스타일러스가 일반적으로 끌어서 놓기 작업 중에 캡처됩니다.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">이 이벤트는 버블링 라우팅을 사용 하므로 포커스를 손실 하는 요소는 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost focus.</source>
          <target state="translated">확인은 <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> 에 포커스를 잃은 실제 요소를 확인 하기 위해 이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.LostStylusCapture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.LostStylusCapture&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.LostStylusCapture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.LostStylusCapture&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>There is no defined corresponding tunneling event.</source>
          <target state="translated">정의 된 해당 터널링 이벤트가 없습니다.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostStylusCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostStylusCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostStylusCapture%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.LostStylusCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostStylusCapture" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostStylusCapture" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostStylusCaptureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostStylusCaptureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostStylusCaptureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostStylusCaptureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.LostStylusCaptureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.LostTouchCapture">
          <source>Occurs when this element loses a touch capture.</source>
          <target state="translated">이 요소에서 터치 캡처가 손실될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostTouchCapture">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostTouchCapture">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostTouchCapture">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostTouchCapture">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostTouchCapture">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostTouchCapture">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.LostTouchCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.LostTouchCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostTouchCapture" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostTouchCapture" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Occurs when any mouse button is pressed while the pointer is over this element.</source>
          <target state="translated">포인터가 이 요소 위에 있는 동안 마우스 단추를 누르면 발생합니다.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> event is often raised together with either <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>, which correspond to a press of one of the two standard mouse buttons.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> 종종 발생과 함께 <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>, 두 개의 표준 마우스 단추 중 하나를 누르는 것에 해당 하는 합니다.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event reaches this element along the event route.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph> 라우트된 이벤트를는 있지만 직접 라우트된 이벤트를 서로 하며 적절 한 단추 특정 이벤트가 발생할 때는 <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 경로 되지 합니다.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>.</source>
          <target state="translated">에 대 한 설명 부분 참조 <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>A few <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes that have control-like behavior, for example, <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph>, might have inherent class handling for mouse button events.</source>
          <target state="translated">몇 가지 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 제어와 같은 동작을 예를 들어 있는 클래스의 파생 <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph>, 마우스 단추 이벤트를 처리 하는 기본적인 클래스 포함 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>The left mouse button down event is the most likely event to have class handling in a control.</source>
          <target state="translated">이벤트는 마우스 왼쪽된 단추에는 클래스는 컨트롤의 처리를 할 가능성이 가장 높은 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>The class handling often marks the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class event as handled.</source>
          <target state="translated">기본 클래스 종종 처리 표시 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 클래스 이벤트를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</source>
          <target state="translated">이벤트 처리 됨으로 표시 되 면 해당 요소에 연결 된 다른 인스턴스 처리기 일반적으로 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</source>
          <target state="translated">버블링 방향의 UI 트리의 루트에서 요소에 연결 되어 있는 다른 모든 클래스 또는 인스턴스 처리기도 하지 일반적으로 발생 합니다.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>You can resolve the issue that is outlined in the preceding Important and still receive <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</source>
          <target state="translated">앞의 중요에 설명 된 문제를 해결 하 고 계속 받을 수 <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> 클래스 이러한 솔루션 중 하나를 사용 하 여 처리 하는 파생된 클래스의 마우스 왼쪽된 단추에 대 한 이벤트:</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Attach handlers for the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> event, which is not marked as handled by the controls.</source>
          <target state="translated">연결에 대 한 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> 이벤트를 컨트롤에 의해 처리 된 것으로 표시 되어 있지 않습니다.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</source>
          <target state="translated">미리 보기 이벤트 이기 때문에 경로 루트에서 시작을 여 컨트롤로 터널링 방식을 살펴봅니다.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Register a handler on the control procedurally by calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</source>
          <target state="translated">컨트롤에 대 한 처리기를 호출 하 여 절차에 따라 등록 <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph> 처리기 라우트된 이벤트 데이터에서 처리 하는 것으로 이미 표시 된 경우에 이벤트를 수신할 수 있도록 서명 옵션을 선택 합니다.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.MouseDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>Occurs when the mouse pointer enters the bounds of this element.</source>
          <target state="translated">마우스 포인터가 이 요소의 영역 안으로 들어가면 발생합니다.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> is a <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> that uses the direct event handling routing strategy.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> 이 <bpt id="p1">[</bpt>라우트된 이벤트 개요<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> 직접 이벤트 처리 라우팅 전략을 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">경로; 직접 라우트된 이벤트를 발생 하지 않습니다. 대신,에서 처리 됩니다는 동일한 요소 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">그러나 라우트된 이벤트 동작 스타일의 이벤트 트리거 등의 다른 측면을 활성화 합니다.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>Although <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph> property value has changed from <ph id="ph3">`false`</ph> to <ph id="ph4">`true`</ph> on this element.</source>
          <target state="translated">하지만 <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> 트랙 마우스 포인터이 이벤트를 더이 요소의 영역 안으로 들어가면 직접적으로 보고 하는 <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph> 에서 속성 값이 변경 <ph id="ph3">`false`</ph> 를 <ph id="ph4">`true`</ph> 이 요소에 합니다.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseEnter">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseEnter%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.MouseEnterEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseEnter" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseEnter" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseEnterEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseEnterEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseEnterEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseEnterEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseEnterEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>Occurs when the mouse pointer leaves the bounds of this element.</source>
          <target state="translated">마우스 포인터가 이 요소의 영역을 벗어나면 발생합니다.</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> is a <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> that uses the direct event handling routing strategy.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> 이 <bpt id="p1">[</bpt>라우트된 이벤트 개요<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> 직접 이벤트 처리 라우팅 전략을 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">경로; 직접 라우트된 이벤트를 발생 하지 않습니다. 대신,에서 처리 됩니다는 동일한 요소 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">그러나 라우트된 이벤트 동작 스타일의 이벤트 트리거 등의 다른 측면을 활성화 합니다.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>Although <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> tracks when the mouse leaves an element, this event more literally reports that the <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph> property value has changed from <ph id="ph3">`true`</ph> to <ph id="ph4">`false`</ph> on this element.</source>
          <target state="translated">하지만 <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> 트랙 마우스를 벗어날 때이 이벤트는 요소를 더 직접적으로 보고 하는 <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph> 에서 속성 값이 변경 <ph id="ph3">`true`</ph> 를 <ph id="ph4">`false`</ph> 이 요소에 합니다.</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeave">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseLeave%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.MouseLeaveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseLeave" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseLeave" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeaveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeaveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeaveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeaveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeaveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Occurs when the left mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 마우스 왼쪽 단추를 누르면 발생합니다.</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">하지만이 <bpt id="p1">[</bpt>라우트된 이벤트 개요<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> 요소 트리를 통해 버블링 경로 따르는 것 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 실제로 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">이 이벤트의 인수는 기본의 인수를 노출 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 클래스).</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 에 해당 하는 대신 클래스 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>A few <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes that have control-like behavior, for example, <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph>, might have inherent class handling for mouse button events.</source>
          <target state="translated">몇 가지 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 제어와 같은 동작을 예를 들어 있는 클래스의 파생 <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph>, 마우스 단추 이벤트를 처리 하는 기본적인 클래스 포함 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>The left mouse button down event is the most likely event to have class handling in a control.</source>
          <target state="translated">이벤트는 마우스 왼쪽된 단추에는 클래스는 컨트롤의 처리를 할 가능성이 가장 높은 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>The class handling often marks the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class event as handled.</source>
          <target state="translated">기본 클래스 종종 처리 표시 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 클래스 이벤트를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</source>
          <target state="translated">이벤트 처리 됨으로 표시 되 면 해당 요소에 연결 된 다른 인스턴스 처리기 일반적으로 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</source>
          <target state="translated">버블링 방향의 UI 트리의 루트에서 요소에 연결 되어 있는 다른 모든 클래스 또는 인스턴스 처리기도 하지 일반적으로 발생 합니다.</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>You can resolve the issue that is outlined in the preceding Important and still receive <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</source>
          <target state="translated">앞의 중요에 설명 된 문제를 해결 하 고 계속 받을 수 <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> 클래스 이러한 솔루션 중 하나를 사용 하 여 처리 하는 파생된 클래스의 마우스 왼쪽된 단추에 대 한 이벤트:</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Attach handlers for the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> event, which is not marked as handled by the controls.</source>
          <target state="translated">연결에 대 한 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> 이벤트를 컨트롤에 의해 처리 된 것으로 표시 되어 있지 않습니다.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</source>
          <target state="translated">미리 보기 이벤트 이기 때문에 경로 루트에서 시작을 여 컨트롤로 터널링 방식을 살펴봅니다.</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Register a handler on the control procedurally by calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</source>
          <target state="translated">컨트롤에 대 한 처리기를 호출 하 여 절차에 따라 등록 <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph> 처리기 라우트된 이벤트 데이터에서 처리 하는 것으로 이미 표시 된 경우에 이벤트를 수신할 수 있도록 서명 옵션을 선택 합니다.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.MouseLeftButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeftButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeftButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeftButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeftButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeftButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>Occurs when the left mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 마우스 왼쪽 단추를 놓으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">하지만이 <bpt id="p1">[</bpt>라우트된 이벤트 개요<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> 요소 트리를 통해 버블링 경로 따르는 것 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 실제로 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">이 이벤트의 인수는 기본의 인수를 노출 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 클래스).</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 에 해당 하는 대신 클래스 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseLeftButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.MouseLeftButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeftButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeftButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeftButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeftButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseLeftButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.MouseMove">
          <source>Occurs when the mouse pointer moves while over this element.</source>
          <target state="translated">이 요소 위에 있는 동안 마우스 포인터를 움직이면 발생합니다.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseMove">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseMove">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseMove">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseMove">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseMove">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseMove">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseMove%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.MouseMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseMove" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseMove" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>Occurs when the right mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 마우스 오른쪽 단추를 누르면 발생합니다.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">하지만이 <bpt id="p1">[</bpt>라우트된 이벤트 개요<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> 요소 트리를 통해 버블링 경로 따르는 것 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 실제로 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">이 이벤트의 인수는 기본의 인수를 노출 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 클래스).</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 에 해당 하는 대신 클래스 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>Right button mouse events frequently have native handling in application scenarios.</source>
          <target state="translated">마우스 오른쪽 단추로 마우스 이벤트는 자주 응용 프로그램 시나리오에서 기본 처리를 가집니다.</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>For instance, a right mouse button down might display a context menu.</source>
          <target state="translated">예를 들어,를 마우스 오른쪽 단추로 상황에 맞는 메뉴를 표시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>See <bpt id="p1">[</bpt>ContextMenu Overview<ept id="p1">](~/docs/framework/wpf/controls/contextmenu-overview.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>ContextMenu 개요<ept id="p1">](~/docs/framework/wpf/controls/contextmenu-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.MouseRightButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseRightButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseRightButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseRightButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseRightButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseRightButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>Occurs when the right mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 마우스 오른쪽 단추를 놓으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">하지만이 <bpt id="p1">[</bpt>라우트된 이벤트 개요<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> 요소 트리를 통해 버블링 경로 따르는 것 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 실제로 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">이 이벤트의 인수는 기본의 인수를 노출 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 클래스).</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 에 해당 하는 대신 클래스 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseRightButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.MouseRightButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseRightButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseRightButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseRightButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseRightButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseRightButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.MouseUp">
          <source>Occurs when any mouse button is released over this element.</source>
          <target state="translated">이 요소 위에서 마우스 단추를 놓으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph> event is often raised together with either <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>, which correspond to a release of one of the two standard mouse buttons.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph> 종종 발생과 함께 <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>, 두 개의 표준 마우스 단추의 릴리스의에 해당 하는 합니다.</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event reaches this element along the event route.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph> 라우트된 이벤트를는 있지만 직접 라우트된 이벤트를 서로 하며 적절 한 단추 특정 이벤트가 발생할 때는 <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 경로 되지 합니다.</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>.</source>
          <target state="translated">에 대 한 설명 부분 참조 <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.MouseUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.MouseWheel">
          <source>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 사용자가 마우스 휠을 굴리면 발생합니다.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseWheel">
          <source>Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph> event from a focused or captured element, the mouse pointer might actually be over another element.</source>
          <target state="translated">포커스 또는 마우스 캡처 우선 마우스 포인터입니다. 따라서 수신 되 면는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph> 시점 요소에서 이벤트를 다른 요소에 마우스 포인터 수 실제로 있습니다.</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseWheel">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseWheel">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseWheel">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseWheel">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseWheel">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseWheel">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseWheel">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseWheel">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseWheel&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseWheel&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.MouseWheel">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseWheel%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseWheel%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.MouseWheelEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseWheel" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseWheel" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseWheelEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseWheelEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseWheelEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseWheelEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.MouseWheelEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</source>
          <target state="translated">기존 탭 순서에서 이동할 모드 또는 시각적으로 이동할 방향을 나타내는 속성이 포함된 이동 요청입니다.</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>Attempts to move focus from this element to another element.</source>
          <target state="translated">이 요소에서 다른 요소로 포커스를 이동하려고 시도합니다.</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.</source>
          <target state="translated">포커스를 이동하는 방향은 지시 방향에 의해 지정됩니다. 이 방향은 이 요소의 표시 부모 조직 내에서 해석됩니다.</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the requested traversal was performed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">요청된 이동이 수행되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>Make sure you check the return value of this method.</source>
          <target state="translated">이 메서드의 반환 값을 확인 하 고 있는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>A return value of <ph id="ph1">`false`</ph> might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.</source>
          <target state="translated">반환 값이 <ph id="ph1">`false`</ph> 방향으로 컨트롤의 구성에서 정의 된 탭 정지를 실행 하 고 이동 요청에서 줄 바꿈이 요청 하는 경우 반환 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnCreateAutomationPeer">
          <source>Returns class-specific <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> implementations for the <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> infrastructure.</source>
          <target state="translated"><ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 인프라에 대해 클래스 관련 <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> 구현을 반환합니다.</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnCreateAutomationPeer">
          <source>The type-specific <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> implementation.</source>
          <target state="translated">형식별 <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> 구현입니다.</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnCreateAutomationPeer">
          <source>The implementation of this method is typically to call the constructor of a specific <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> implementation, and return it as the return value.</source>
          <target state="translated">이 메서드의 구현은 특정 생성자를 호출 하는 일반적으로 <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> 구현 하 고 반환 값으로 반환 합니다.</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnCreateAutomationPeer">
          <source>All <ph id="ph1">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> derived classes should implement this method in order to provide their own specific <ph id="ph2">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> implementations to the <ph id="ph3">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> infrastructure.</source>
          <target state="translated">모든 <ph id="ph1">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> 파생된 클래스가 자신의 특정 제공 하기 위해이 메서드를 구현 해야 <ph id="ph2">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> 구현에는 <ph id="ph3">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 인프라입니다.</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnCreateAutomationPeer">
          <source>For details on implementing this pattern, see <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph>.</source>
          <target state="translated">이 패턴을 구현에 대 한 자세한 내용은 참조 하십시오. <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragEnter" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragEnter" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragLeave" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragLeave" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragOver" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragOver" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragEnter" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragEnter" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.GiveFeedbackEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.GiveFeedbackEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.GiveFeedback" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.GiveFeedback" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> that contains event data.</source>
          <target state="translated">이벤트 데이터가 들어 있는 <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>This event data must contain the identifier for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotFocus" /&gt;</ph> event.</source>
          <target state="translated">이 이벤트 데이터에는 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotFocus" /&gt;</ph> 이벤트의 식별자가 포함되어야 합니다.</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotFocus" /&gt;</ph> routed event by using the event data provided.</source>
          <target state="translated">지정된 이벤트 데이터를 사용하여 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotFocus" /&gt;</ph> 라우트된 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>This method, although virtual, does have a default implementation that raises the event.</source>
          <target state="translated">이 메서드를 가상가 이벤트를 발생 시키는 기본 구현입니다.</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> property value changes.</source>
          <target state="translated">에 대 한 * 메서드 구현 이벤트를 발생 시키기 위한 것 이며이 같은 메서드 구현을 이벤트를 발생 시키는 경우는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotFocus%2A&gt;</ph> implementation differs from some other <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> On* implementations, which only provide a convenient way to add class handling for that event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotFocus%2A&gt;</ph> 구현은 일부 다른 <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 에 * 구현과 해당 이벤트에 대 한 클래스 처리를 추가 하는 편리한 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</source>
          <target state="translated">포커스 이벤트를 발생 시 키 지를 의도적으로 필요가 없는 경우 구현 하는 기본 구현을 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Otherwise, the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotFocus" /&gt;</ph> event is not raised during typical user operations that ordinarily set focus to this element.</source>
          <target state="translated">그렇지 않은 경우는 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotFocus" /&gt;</ph> 이 요소에 포커스를 설정 하는 일반적인 사용자 작업 중에 이벤트가 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph> to <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">프로그램 요소 의도가 없으면 상태로 설정에서 요소를 방지할 수 있습니다 <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph> 를 <ph id="ph2">&lt;see langword="false" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Note that by default a <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph> is not focusable, therefore setting <ph id="ph2">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph> deliberately might not be necessary.</source>
          <target state="translated">기본적는 <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph> 포커스 설정 따라서 않습니다 <ph id="ph2">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph> 의도적으로 필요 하지 않을 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotTouchCapture" /&gt;</ph> routed event that occurs when a touch is captured to this element.</source>
          <target state="translated">이 요소에 터치가 캡처될 때 발생하는 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.GotTouchCapture" /&gt;</ph> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.GotTouchCapture&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.ContentElement.GotTouchCapture&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">기본 클래스를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> 기본 클래스가 메서드 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" /&gt;</ph> 이벤트가 이 요소에서 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocused%2A&gt;</ph> dependency property changes.</source>
          <target state="translated">이 가상 메서드는 발생 하는 경우의 값은 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocused%2A&gt;</ph> 종속성 속성이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">그런 다음 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the  <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph> event is not a routed event.</source>
          <target state="translated">에 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph> 이벤트 라우트된 이벤트가 아닙니다.</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked just before the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /&gt;</ph> event is raised by this element.</source>
          <target state="translated">이 요소에 의해 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /&gt;</ph> 이벤트가 발생하기 직전에 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A&gt;</ph> dependency property changes its value.</source>
          <target state="translated">이 가상 메서드는 발생 하는 때의 값은 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A&gt;</ph> 종속성 속성의 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">그런 다음 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph> event is not a routed event.</source>
          <target state="translated">에 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph> 이벤트 라우트된 이벤트가 아닙니다.</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsMouseCapturedChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsMouseCapturedChanged" /&gt;</ph> 이벤트가 이 요소에서 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;</ph> dependency property changes its value.</source>
          <target state="translated">이 가상 메서드는 발생 하는 때의 값은 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;</ph> 종속성 속성의 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">그런 다음 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt;</ph> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt;</ph> event is not a routed event.</source>
          <target state="translated">에 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt;</ph> 이벤트 라우트된 이벤트가 아닙니다.</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /&gt;</ph> 이벤트가 이 요소에서 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /&gt;</ph> dependency property changes its value.</source>
          <target state="translated">이 가상 메서드는 발생 하는 때의 값은 <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /&gt;</ph> 종속성 속성의 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">그런 다음 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /&gt;</ph> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the event is not a routed event; Therefore,  you cannot mark it as handled in the class handler.</source>
          <target state="translated">이 이벤트는 라우트된 이벤트의; 없습니다 따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" /&gt;</ph> 이벤트가 이 요소에서 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A&gt;</ph> dependency property changes its value.</source>
          <target state="translated">이 가상 메서드는 발생 하는 때의 값은 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A&gt;</ph> 종속성 속성의 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">그런 다음 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;</ph> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;</ph> event is not a routed event.</source>
          <target state="translated">에 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;</ph> 이벤트 라우트된 이벤트가 아닙니다.</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsStylusCapturedChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsStylusCapturedChanged" /&gt;</ph> 이벤트가 이 요소에서 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;</ph> dependency property changes its value.</source>
          <target state="translated">이 가상 메서드는 발생 하는 때의 값은 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;</ph> 종속성 속성의 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCapturedChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">그런 다음 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCapturedChanged&gt;</ph> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the event is not a routed event.</source>
          <target state="translated">이벤트 라우트된 이벤트 아닌지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" /&gt;</ph> 이벤트가 이 요소에서 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A&gt;</ph> dependency property changes its value.</source>
          <target state="translated">이 가상 메서드는 발생 하는 때의 값은 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A&gt;</ph> 종속성 속성의 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">그런 다음 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged&gt;</ph> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the event is not a routed event.</source>
          <target state="translated">이벤트 라우트된 이벤트 아닌지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" /&gt;</ph> 이벤트가 이 요소에서 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A&gt;</ph> dependency property changes its value.</source>
          <target state="translated">이 가상 메서드는 발생 하는 때의 값은 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A&gt;</ph> 종속성 속성의 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">그런 다음 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged&gt;</ph> 같은 이벤트 데이터 인스턴스에 해당 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the event is not a routed event.</source>
          <target state="translated">이벤트 라우트된 이벤트 아닌지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore you cannot mark it as handled in the class handler.</source>
          <target state="translated">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyDown" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Keystrokes are handled by a dedicated input manager.</source>
          <target state="translated">키 입력은 입력된 전용된 관리자에서 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</source>
          <target state="translated">예를 들어, 입력 및 명령 바인딩과 키 입력을 사용 하는 다른 프로그래밍 기능은 일반 키 입력으로 노출 되기 전에 키 입력을 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>If these input system features mark the event as handled, then <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnKeyDown%2A&gt;</ph> is not invoked.</source>
          <target state="translated">이러한 입력 처리 한 다음 시스템 기능에는 이벤트가 표시 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnKeyDown%2A&gt;</ph> 가 호출 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyUp" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Keystrokes are handled by a dedicated input manager.</source>
          <target state="translated">키 입력은 입력된 전용된 관리자에서 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</source>
          <target state="translated">예를 들어, 입력 및 명령 바인딩과 키 입력을 사용 하는 다른 프로그래밍 기능은 일반 키 입력으로 노출 되기 전에 키 입력을 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>If these input system features mark the event as handled, then <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnKeyUp%2A&gt;</ph> is not invoked.</source>
          <target state="translated">이러한 입력 처리 한 다음 시스템 기능에는 이벤트가 표시 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnKeyUp%2A&gt;</ph> 가 호출 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> that contains event data.</source>
          <target state="translated">이벤트 데이터가 들어 있는 <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>This event data must contain the identifier for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostFocus" /&gt;</ph> event.</source>
          <target state="translated">이 이벤트 데이터에는 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostFocus" /&gt;</ph> 이벤트의 식별자가 포함되어야 합니다.</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostFocus" /&gt;</ph> routed event by using the event data that is provided.</source>
          <target state="translated">지정된 이벤트 데이터를 사용하여 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostFocus" /&gt;</ph> 라우트된 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>This method, although virtual, does have a default implementation that raises the event.</source>
          <target state="translated">이 메서드를 가상가 이벤트를 발생 시키는 기본 구현입니다.</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> property value changes.</source>
          <target state="translated">에 대 한 * 메서드 구현 이벤트를 발생 시키기 위한 것 이며이 같은 메서드 구현을 이벤트를 발생 시키는 경우는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>This implementation differs from some other <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> On* implementations, which only provide a convenient way to add class handling for that event.</source>
          <target state="translated">이 구현은 일부 다른 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 에 * 구현과 해당 이벤트에 대 한 클래스 처리를 추가 하는 편리한 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</source>
          <target state="translated">포커스 이벤트를 발생 시 키 지를 의도적으로 필요가 없는 경우 구현 하는 기본 구현을 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>Otherwise, the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostFocus" /&gt;</ph> event is not raised during typical user operations that ordinarily set focus to this element.</source>
          <target state="translated">그렇지 않은 경우는 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostFocus" /&gt;</ph> 이 요소에 포커스를 설정 하는 일반적인 사용자 작업 중에 이벤트가 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph> to <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">프로그램 요소 의도가 없으면 상태로 설정에서 요소를 방지할 수 있습니다 <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.Focusable" /&gt;</ph> 를 <ph id="ph2">&lt;see langword="false" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph> that contains event data.</source>
          <target state="translated">이벤트 데이터가 들어 있는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains event data.</source>
          <target state="translated">이벤트 데이터가 들어 있는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains event data.</source>
          <target state="translated">이벤트 데이터가 들어 있는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostTouchCapture" /&gt;</ph> routed event that occurs when this element loses a touch capture.</source>
          <target state="translated">이 요소에서 터치 캡처가 손실될 때 발생하는 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.LostTouchCapture" /&gt;</ph> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.LostTouchCapture&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.ContentElement.LostTouchCapture&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">기본 클래스를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> 기본 클래스가 메서드 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>This event data reports details about the mouse button that was pressed and the handled state.</source>
          <target state="translated">이 이벤트 데이터는 누른 상태 및 처리된 상태의 마우스 단추에 대한 세부 사항을 보고합니다.</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseDown" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Mouse button actions are also handled by a dedicated input manager.</source>
          <target state="translated">마우스 단추 작업 입력된 전용된 관리자에서 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</source>
          <target state="translated">명령 바인딩과 및 입력과 같은 마우스 단추 작업을 사용 하는 다른 프로그래밍 기능은 일반 마우스 단추 동작으로 노출 되기 전에 작업에 대 한 처리기를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If these input system features mark the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event as handled, <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseDown%2A&gt;</ph> is not invoked.</source>
          <target state="translated">이러한 시스템 기능 표시 입력은 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 이벤트를 처리 <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseDown%2A&gt;</ph> 가 호출 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>.</source>
          <target state="translated">이 클래스 처리기를 사용 하 여 처리 된 것으로 이벤트를 표시 하는 경우 사용자에 영향을 주는 다음과 같은 이벤트: <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either of these events may be raised on the receiving element when <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> is received.</source>
          <target state="translated">이들이 이벤트는 받는 요소에서 발생할 수 있습니다 때 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 수신 합니다.</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</source>
          <target state="translated">이 이벤트를 처리 하는 클래스에서 처리 된 것으로 표시 하는 경우 하위 이벤트는 여전히 발생 됩니다. 그러나 이벤트 데이터에서의 처리 상태를 전달합니다.</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> in order to attach handlers.</source>
          <target state="translated">명시적으로 사용 하지 않는 한 인스턴스 처리기 하위 이벤트에 대 한 클래스 처리에서의 이벤트를 처리 하는 경우 호출 되지 않습니다 <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> 와 <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> 처리기를 연결 하기 위해 합니다.</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Class handlers also are not invoked unless those class handlers were registered with the <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
          <target state="translated">클래스 처리기도가 호출 되지 않으면 해당 클래스 처리기에 등록 된는 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> 서명을 <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>By handling <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseDown%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button down actions.</source>
          <target state="translated">처리 하 여 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseDown%2A&gt;</ph>을 처리 클래스 처리에 가능한 모든 마우스 단추 누르기 작업이 있습니다.</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>This behavior might be unwanted; therefore, use caution when you use this virtual method to mark events as handled.</source>
          <target state="translated">이 동작은 원치 않을 수 있습니다. 따라서이 가상 메서드를 사용 하 여 이벤트를 처리 하는 경우 주의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.</source>
          <target state="translated">각 단추 특정 직접 이벤트에는 가상 *; 메서드 여부 이러한 단추 특정 클래스 처리기를 재정의 더 적합할 수 있습니다 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseEnter" /&gt;</ph> attached event is raised on this element.</source>
          <target state="translated">이 요소에 의해 처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseEnter" /&gt;</ph> 연결된 이벤트가 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event, with a direct routing strategy.</source>
          <target state="translated">이 경우 일치 하는 이벤트는 직접 라우팅 전략으로 라우트된 이벤트를 합니다.</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">이벤트 처리로 표시 하는 것은 일반적인 인스턴스 처리기를 방지 하는 데 유용 (지정 하지 않는 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseLeave" /&gt;</ph> attached event is raised on this element.</source>
          <target state="translated">이 요소에 의해 처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseLeave" /&gt;</ph> 연결된 이벤트가 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event, with a direct routing strategy.</source>
          <target state="translated">이 경우 일치 하는 이벤트는 직접 라우팅 전략으로 라우트된 이벤트를 합니다.</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">이벤트 처리로 표시 하는 것은 일반적인 인스턴스 처리기를 방지 하는 데 유용 (지정 하지 않는 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the left mouse button was pressed.</source>
          <target state="translated">이벤트 데이터는 마우스 왼쪽 단추를 놓았음을 보고합니다.</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /&gt;</ph> routed event is raised on this element.</source>
          <target state="translated">이 요소에 의해 처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /&gt;</ph> 라우트된 이벤트가 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> 이벤트가 버블링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> is the underlying event that is bubble routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 이 이벤트는, 및 각 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시킵니다. <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">사용 하기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">일반 마우스 이벤트 처리에 대 한 기본 구현은 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 수신 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 여 적절 한 로컬 이벤트로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph>.</source>
          <target state="translated">마우스 처리 동작을 변경할 수 없습니다 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 재정의 하 여 <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">또는 이벤트는 특정 마우스 상태에 대 한 처리를 변경 하려면이 메서드를 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">기본 구현을 호출 것인지 여부는 각 시나리오에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph>.</source>
          <target state="translated">기본 호출 하지 못하면 해당 마우스 이벤트 호출 하지 못하면 하는 상위 클래스에 대 한 기본 입력된 처리를 비활성화 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>For example, you can derive from <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> and override <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph> in your derived class without calling the base implementation; however, this override disables the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
          <target state="translated">하지만 파생 될 수 예를 들어 <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> 재정의 <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph> 프로그램 파생된 클래스에서 기본 구현을 호출 하지 않고이 재정의 해제 합니다.는 <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the left mouse button was released.</source>
          <target state="translated">이벤트 데이터는 마우스 왼쪽 단추를 놓았음을 보고합니다.</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /&gt;</ph> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> 이벤트가 버블링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> is the underlying event that is bubble routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 이 이벤트는, 및 각 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시킵니다. <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">사용 하기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">일반 마우스 이벤트 처리에 대 한 기본 구현은 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 수신 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 여 적절 한 로컬 이벤트로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A&gt;</ph>.</source>
          <target state="translated">마우스 처리 동작을 변경할 수 없습니다 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 재정의 하 여 <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseMove" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the right mouse button was pressed.</source>
          <target state="translated">이벤트 데이터는 마우스 오른쪽 단추를 놓았음을 보고합니다.</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /&gt;</ph> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph> 이벤트가 버블링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> is the underlying event that is bubble routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 이 이벤트는, 및 각 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시킵니다. <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">사용 하기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">일반 마우스 이벤트 처리에 대 한 기본 구현은 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 수신 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 여 적절 한 로컬 이벤트로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph>.</source>
          <target state="translated">마우스 처리 동작을 변경할 수 없습니다 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 재정의 하 여 <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">또는 이벤트는 특정 마우스 상태에 대 한 처리를 변경 하려면이 메서드를 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">기본 구현을 호출 것인지 여부는 각 시나리오에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph>.</source>
          <target state="translated">기본 호출 하지 못하면 해당 마우스 이벤트 호출 하지 못하면 하는 상위 클래스에 대 한 기본 입력된 처리를 비활성화 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>For example, you can derive from <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> and override <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <ph id="ph3">&lt;xref:System.Windows.Controls.Control&gt;</ph> default behavior.</source>
          <target state="translated">하지만 파생 될 수 예를 들어 <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> 재정의 <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph> 기본 호출 하지 않고 파생된 클래스에서이 재정의 사용할 구성 요소인 컨트롤에 대해 상황에 맞는 메뉴 서비스의는 <ph id="ph3">&lt;xref:System.Windows.Controls.Control&gt;</ph> 기본 동작입니다.</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the right mouse button was released.</source>
          <target state="translated">이벤트 데이터는 마우스 오른쪽 단추를 놓았음을 보고합니다.</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /&gt;</ph> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph> 이벤트가 버블링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> is the underlying event that is bubble routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 이 이벤트는, 및 각 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시킵니다. <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">사용 하기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">일반 마우스 이벤트 처리에 대 한 기본 구현은 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 수신 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 여 적절 한 로컬 이벤트로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A&gt;</ph>.</source>
          <target state="translated">마우스 처리 동작을 변경할 수 없습니다 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 재정의 하 여 <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the mouse button was released.</source>
          <target state="translated">이벤트 데이터는 마우스 단추를 놓았음을 보고합니다.</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseUp" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseUp" /&gt;</ph> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Mouse button actions are also handled by a dedicated input manager.</source>
          <target state="translated">마우스 단추 작업 입력된 전용된 관리자에서 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</source>
          <target state="translated">명령 바인딩과 및 입력과 같은 마우스 단추 작업을 사용 하는 다른 프로그래밍 기능은 일반 마우스 단추 동작으로 노출 되기 전에 작업에 대 한 처리기를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If these input system features mark the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> event as handled, <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseUp%2A&gt;</ph> is not invoked.</source>
          <target state="translated">이러한 시스템 기능 표시 입력은 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 이벤트를 처리 <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseUp%2A&gt;</ph> 가 호출 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>.</source>
          <target state="translated">이 클래스 처리기를 사용 하 여 처리 된 것으로 이벤트를 표시 하는 경우 사용자에 영향을 주는 다음과 같은 이벤트: <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either of these events might be raised on the receiving element when <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> is received.</source>
          <target state="translated">이들이 이벤트는 받는 요소에서 발생할 수 있습니다 때 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 수신 합니다.</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</source>
          <target state="translated">이 이벤트를 처리 하는 클래스에서 처리 된 것으로 표시 하는 경우 하위 이벤트는 여전히 발생 됩니다. 그러나 이벤트 데이터에서의 처리 상태를 전달합니다.</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> in order to attach handlers.</source>
          <target state="translated">명시적으로 사용 하지 않는 한 인스턴스 처리기 하위 이벤트에 대 한 클래스 처리에서의 이벤트를 처리 하는 경우 호출 되지 않습니다 <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> 와 <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> 처리기를 연결 하기 위해 합니다.</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Class handlers also are not invoked unless those class handlers were registered with the <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
          <target state="translated">클래스 처리기도가 호출 되지 않으면 해당 클래스 처리기에 등록 된는 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> 서명을 <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>By handling <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseUp%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button up actions.</source>
          <target state="translated">처리 하 여 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseUp%2A&gt;</ph>을 처리 클래스 처리에 가능한 모든 마우스 단추 동작을 합니다.</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</source>
          <target state="translated">이 동작은 원치 않을 수 있습니다. 따라서이 가상 메서드를 사용 하 여 이벤트를 처리 하는 경우 주의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.</source>
          <target state="translated">각 단추 특정 직접 이벤트에는 가상 *; 메서드 여부 이러한 단추 특정 클래스 처리기를 재정의 더 적합할 수 있습니다 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseWheelEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseWheelEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseWheel" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseWheel" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragEnter" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragEnter" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragLeave" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragLeave" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragOver" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragOver" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDrop" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDrop" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.GiveFeedbackEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.GiveFeedbackEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that one or more mouse buttons were pressed.</source>
          <target state="translated">이벤트 데이터는 하나 이상의 마우스 단추를 놓았음을 보고합니다.</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /&gt;</ph> attached routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /&gt;</ph> 연결된 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Mouse button actions are also handled by a dedicated input manager.</source>
          <target state="translated">마우스 단추 작업 입력된 전용된 관리자에서 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</source>
          <target state="translated">명령 바인딩과 및 입력과 같은 마우스 단추 작업을 사용 하는 다른 프로그래밍 기능은 일반 마우스 단추 동작으로 노출 되기 전에 작업에 대 한 처리기를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If these input system features mark the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event as handled, <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseDown%2A&gt;</ph> is not invoked.</source>
          <target state="translated">이러한 시스템 기능 표시 입력은 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 이벤트를 처리 <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseDown%2A&gt;</ph> 가 호출 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph>.</source>
          <target state="translated">이 클래스 처리기를 사용 하 여 처리 된 것으로 이벤트를 표시 하는 경우 사용자에 영향을 주는 다음과 같은 이벤트: <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either of these events may be raised on the receiving element when <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> is received.</source>
          <target state="translated">이들이 이벤트는 받는 요소에서 발생할 수 있습니다 때 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 수신 합니다.</target>       </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</source>
          <target state="translated">이 이벤트를 처리 하는 클래스에서 처리 된 것으로 표시 하는 경우 하위 이벤트는 여전히 발생 됩니다. 그러나 이벤트 데이터에서의 처리 상태를 전달합니다.</target>       </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> in order to attach handlers.</source>
          <target state="translated">명시적으로 사용 하지 않는 한 인스턴스 처리기 하위 이벤트에 대 한 클래스 처리에서의 이벤트를 처리 하는 경우 호출 되지 않습니다 <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> 와 <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> 처리기를 연결 하기 위해 합니다.</target>       </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Class handlers also are not invoked unless those class handlers were registered with the <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
          <target state="translated">클래스 처리기도가 호출 되지 않으면 해당 클래스 처리기에 등록 된는 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> 서명을 <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>By handling <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseDown%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button down actions.</source>
          <target state="translated">처리 하 여 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseDown%2A&gt;</ph>을 처리 클래스 처리에 가능한 모든 마우스 단추 누르기 작업이 있습니다.</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</source>
          <target state="translated">이 동작은 원치 않을 수 있습니다. 따라서이 가상 메서드를 사용 하 여 이벤트를 처리 하는 경우 주의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.</source>
          <target state="translated">각 단추 특정 직접 이벤트에는 가상 *; 메서드 여부 이러한 단추 특정 클래스 처리기를 재정의 더 적합할 수 있습니다 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the left mouse button was pressed.</source>
          <target state="translated">이벤트 데이터는 마우스 왼쪽 단추를 놓았음을 보고합니다.</target>       </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /&gt;</ph> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> 이벤트 터널링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> is the underlying event that is tunnel routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 이 이벤트는 라우팅, 터널 및 각 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">사용 하기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">일반 마우스 이벤트 처리에 대 한 기본 구현은 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 수신 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 여 적절 한 로컬 이벤트로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</target>       </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>.</source>
          <target state="translated">마우스 처리 동작을 변경할 수 없습니다 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 재정의 하 여 <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">또는 이벤트는 특정 마우스 상태에 대 한 처리를 변경 하려면이 메서드를 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">기본 구현을 호출 것인지 여부는 각 시나리오에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>.</source>
          <target state="translated">기본 호출 하지 못하면 해당 마우스 이벤트 호출 하지 못하면 하는 상위 클래스에 대 한 기본 입력된 처리를 비활성화 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>For example, you can derive from <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> and override <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph> in your derived class without calling the base implementation; however, this override disables the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
          <target state="translated">하지만 파생 될 수 예를 들어 <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> 재정의 <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph> 프로그램 파생된 클래스에서 기본 구현을 호출 하지 않고이 재정의 해제 합니다.는 <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the left mouse button was released.</source>
          <target state="translated">이벤트 데이터는 마우스 왼쪽 단추를 놓았음을 보고합니다.</target>       </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /&gt;</ph> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> 이벤트 터널링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> is the underlying event that is tunnel routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 이 이벤트는 라우팅, 터널 및 각 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">사용 하기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">일반 마우스 이벤트 처리에 대 한 기본 구현은 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 수신 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 여 적절 한 로컬 이벤트로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</target>       </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A&gt;</ph>.</source>
          <target state="translated">마우스 처리 동작을 변경할 수 없습니다 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 재정의 하 여 <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the right mouse button was pressed.</source>
          <target state="translated">이벤트 데이터는 마우스 오른쪽 단추를 놓았음을 보고합니다.</target>       </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /&gt;</ph> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph> 이벤트 터널링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> is the underlying event that is tunnel routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 이 이벤트는 라우팅, 터널 및 각 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">사용 하기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">일반 마우스 이벤트 처리에 대 한 기본 구현은 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 수신 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 여 적절 한 로컬 이벤트로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</target>       </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>.</source>
          <target state="translated">마우스 처리 동작을 변경할 수 없습니다 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 재정의 하 여 <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">또는 이벤트는 특정 마우스 상태에 대 한 처리를 변경 하려면이 메서드를 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">기본 구현을 호출 것인지 여부는 각 시나리오에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>.</source>
          <target state="translated">기본 호출 하지 못하면 해당 마우스 이벤트 호출 하지 못하면 하는 상위 클래스에 대 한 기본 입력된 처리를 비활성화 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>For example, you can derive from <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> and override <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <ph id="ph3">&lt;xref:System.Windows.Controls.Control&gt;</ph> default behavior.</source>
          <target state="translated">하지만 파생 될 수 예를 들어 <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> 재정의 <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph> 기본 호출 하지 않고 파생된 클래스에서이 재정의 사용할 구성 요소인 컨트롤에 대해 상황에 맞는 메뉴 서비스의는 <ph id="ph3">&lt;xref:System.Windows.Controls.Control&gt;</ph> 기본 동작입니다.</target>       </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the right mouse button was released.</source>
          <target state="translated">이벤트 데이터는 마우스 오른쪽 단추를 놓았음을 보고합니다.</target>       </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /&gt;</ph> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph> 이벤트 터널링 경로 이동 하 표시 되지만 실제로 간접적인 방식에서으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> is the underlying event that is tunnel routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 이 이벤트는 라우팅, 터널 및 각 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">사용 하기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph> 처리 되므로이 요소에 대 한 이벤트를 처리 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 하려면 수 (지정 하지 않은 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">일반 마우스 이벤트 처리에 대 한 기본 구현은 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 수신 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 여 적절 한 로컬 이벤트로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</target>       </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A&gt;</ph>.</source>
          <target state="translated">마우스 처리 동작을 변경할 수 없습니다 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> 재정의 하 여 <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that one or more mouse buttons were released.</source>
          <target state="translated">이벤트 데이터는 하나 이상의 마우스 단추를 놓았음을 보고합니다.</target>       </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Mouse button actions are also handled by a dedicated input manager.</source>
          <target state="translated">마우스 단추 작업 입력된 전용된 관리자에서 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</source>
          <target state="translated">명령 바인딩과 및 입력과 같은 마우스 단추 작업을 사용 하는 다른 프로그래밍 기능은 일반 마우스 단추 동작으로 노출 되기 전에 작업에 대 한 처리기를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If these input system features mark the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event as handled, <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseUp%2A&gt;</ph> is not invoked.</source>
          <target state="translated">이러한 시스템 기능 표시 입력은 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 이벤트를 처리 <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseUp%2A&gt;</ph> 가 호출 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>.</source>
          <target state="translated">이 클래스 처리기를 사용 하 여 처리 된 것으로 이벤트를 표시 하는 경우 사용자에 영향을 주는 다음과 같은 이벤트: <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either of these events might be raised on the receiving element when <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> is received.</source>
          <target state="translated">이들이 이벤트는 받는 요소에서 발생할 수 있습니다 때 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 수신 합니다.</target>       </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</source>
          <target state="translated">이 이벤트를 처리 하는 클래스에서 처리 된 것으로 표시 하는 경우 하위 이벤트는 여전히 발생 됩니다. 그러나 이벤트 데이터에서의 처리 상태를 전달합니다.</target>       </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> in order to attach handlers.</source>
          <target state="translated">명시적으로 사용 하지 않는 한 인스턴스 처리기 하위 이벤트에 대 한 클래스 처리에서의 이벤트를 처리 하는 경우 호출 되지 않습니다 <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> 와 <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> 처리기를 연결 하기 위해 합니다.</target>       </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Class handlers also are not invoked unless those class handlers were registered with the <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
          <target state="translated">클래스 처리기도가 호출 되지 않으면 해당 클래스 처리기에 등록 된는 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> 서명을 <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>By handling <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseUp%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button up actions.</source>
          <target state="translated">처리 하 여 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseUp%2A&gt;</ph>을 처리 클래스 처리에 가능한 모든 마우스 단추 동작을 합니다.</target>       </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</source>
          <target state="translated">이 동작은 원치 않을 수 있습니다. 따라서이 가상 메서드를 사용 하 여 이벤트를 처리 하는 경우 주의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.</source>
          <target state="translated">각 단추 특정 직접 이벤트에는 가상 *; 메서드 여부 이러한 단추 특정 클래스 처리기를 재정의 더 적합할 수 있습니다 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseWheelEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseWheelEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.QueryContinueDragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.QueryContinueDragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusDownEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusDownEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.TextCompositionEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TextCompositionEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">다른 시나리오는 특별히 미리 보기 이벤트는 처리 하 여 일치 하는 버블링 클래스 처리기가 호출 되지 것으로 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchDown" /&gt;</ph> routed event that occurs when a touch presses this element.</source>
          <target state="translated">터치가 이 요소를 누를 때 발생하는 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchDown" /&gt;</ph> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</target>       </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">기본 클래스를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> 기본 클래스가 메서드 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchMove" /&gt;</ph> routed event that occurs when a touch moves while inside this element.</source>
          <target state="translated">이 요소 내부에 있는 동안 터치가 이동할 때 발생하는 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchMove" /&gt;</ph> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</target>       </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTouchMove&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTouchMove&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">기본 클래스를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> 기본 클래스가 메서드 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchUp" /&gt;</ph> routed event that occurs when a touch is released inside this element.</source>
          <target state="translated">이 요소 내에서 터치를 해제할 때 발생하는 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchUp" /&gt;</ph> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</target>       </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTouchUp&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTouchUp&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">기본 클래스를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> 기본 클래스가 메서드 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.QueryContinueDragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.QueryContinueDragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.QueryContinueDrag" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.QueryContinueDrag" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.QueryCursorEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.QueryCursorEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.QueryCursor" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.QueryCursor" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusDownEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusDownEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusDown" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusEnter" /&gt;</ph> attached event is raised by this element.</source>
          <target state="translated">이 요소에 의해 처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusEnter" /&gt;</ph> 연결된 이벤트가 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">이벤트 처리로 표시 하는 것은 일반적인 인스턴스 처리기를 방지 하는 데 유용 (지정 하지 않는 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusInRange" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusInRange" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusLeave" /&gt;</ph> attached event is raised by this element.</source>
          <target state="translated">이 요소에 의해 처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusLeave" /&gt;</ph> 연결된 이벤트가 발생할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">호출할 수 있습니다 기본 앞 이나 뒤를 별도로 처리 요구 사항에 따라.</target>       </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">이벤트 처리로 표시 하는 것은 일반적인 인스턴스 처리기를 방지 하는 데 유용 (지정 하지 않는 <ph id="ph1">`handledEventsToo`</ph>) 호출 되지 합니다.</target>       </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusMove" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusUp" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.TextCompositionEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TextCompositionEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">처리되지 않은 <ph id="ph1">&lt;see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /&gt;</ph> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</target>       </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">중간 클래스는 상속 될 수 있습니다이 메서드를 구현 하기 때문에 구현에서 기본 구현을 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 패턴에서 * 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">이 경우 일치 하는 이벤트 라우트된 이벤트가입니다.</target>       </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">On * 메서드의 구현 패턴 차이가 있는 라우트된 이벤트에 대 한 라우트된 이벤트 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">따라서 구현 이벤트 데이터의 소스 속성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">대부분의 경우에서 이벤트 reraise 하려고 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기와 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, 파생 클래스의 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">클래스 처리는 적절 한 한 가지 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchDown" /&gt;</ph> routed event that occurs when a touch presses inside this element.</source>
          <target state="translated">터치가 이 요소 내부를 누를 때 발생하는 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchDown" /&gt;</ph> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</target>       </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">기본 클래스를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> 기본 클래스가 메서드 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchEnter" /&gt;</ph> routed event that occurs when a touch moves from outside to inside the bounds of this element.</source>
          <target state="translated">터치가 이 요소의 경계 외부에서 내부로 이동할 때 발생하는 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchEnter" /&gt;</ph> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</target>       </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchEnter&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchEnter&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">기본 클래스를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> 기본 클래스가 메서드 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchLeave" /&gt;</ph> routed event that occurs when a touch moves from inside to outside the bounds of this element.</source>
          <target state="translated">터치가 이 요소의 경계 내부에서 외부로 이동할 때 발생하는 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchLeave" /&gt;</ph> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</target>       </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchLeave&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchLeave&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">기본 클래스를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> 기본 클래스가 메서드 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchMove" /&gt;</ph> routed event that occurs when a touch moves while inside this element.</source>
          <target state="translated">이 요소 내부에 있는 동안 터치가 이동할 때 발생하는 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchMove" /&gt;</ph> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</target>       </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchMove&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchMove&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">기본 클래스를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> 기본 클래스가 메서드 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchUp" /&gt;</ph> routed event that occurs when a touch is released inside this element.</source>
          <target state="translated">이 요소 내에서 터치를 해제할 때 발생하는 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchUp" /&gt;</ph> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</target>       </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> 메서드에 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchUp&gt;</ph> event.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> 처리 하려면 파생된 클래스에는 <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchUp&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">기본 클래스를 호출 해야 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> 기본 클래스가 메서드 이벤트를 받도록 합니다.</target>       </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>The direction of the requested focus traversal.</source>
          <target state="translated">요청된 포커스 이동 방향입니다.</target>       </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 지정된 포커스 이동 방향에 대해 포커스를 받는 요소를 반환하며 실제로 해당 요소로 포커스를 이동하지는 않습니다.</target>       </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>The element that would have received focus if <ph id="ph1">&lt;see cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" /&gt;</ph> were actually invoked.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" /&gt;</ph>가 실제로 호출된 경우에 포커스를 받는 요소입니다.</target>       </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>The default implementation of this method in this class is incomplete and always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">이 클래스에이 메서드의 기본 구현 완전 하지 않으며 항상 반환 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewDragEnter">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag target.</source>
          <target state="translated">입력 시스템에서 이 요소를 끌기 대상으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragEnter">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewDragEnter&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewDragEnter&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragEnter">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDragEnter&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDragEnter&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragEnter">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2013" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragEnter">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2014" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragEnter">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2015" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragEnter">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2016" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragEnter">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2017" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragEnter">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragEnter&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragEnter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2018" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragEnter">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewDragEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewDragEnter%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2019" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewDragEnterEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewDragEnter" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewDragEnter" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2020" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragEnterEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2021" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragEnterEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2022" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragEnterEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2023" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragEnterEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2024" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragEnterEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2025" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewDragLeave">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag origin.</source>
          <target state="translated">입력 시스템에서 이 요소를 끌기 원본으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2026" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragLeave">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewDragLeave&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewDragLeave&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2027" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragLeave">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDragLeave&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDragLeave&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2028" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragLeave">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2029" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragLeave">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2030" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragLeave">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2031" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragLeave">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2032" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragLeave">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2033" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragLeave">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragLeave&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragLeave&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2034" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragLeave">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewDragLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewDragLeave%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2035" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewDragLeaveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewDragLeave" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewDragLeave" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2036" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragLeaveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2037" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragLeaveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2038" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragLeaveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2039" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragLeaveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2040" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragLeaveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2041" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewDragOver">
          <source>Occurs when the input system reports an underlying drag event with this element as the potential drop target.</source>
          <target state="translated">입력 시스템에서 이 요소를 잠재적인 놓기 대상으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2042" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragOver">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewDragOver&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewDragOver&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2043" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragOver">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDragOver&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDragOver&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2044" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragOver">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2045" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragOver">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2046" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragOver">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2047" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragOver">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2048" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragOver">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2049" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragOver">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragOver&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragOver&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2050" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDragOver">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewDragOver%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewDragOver%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2051" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewDragOverEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewDragOver" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewDragOver" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2052" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragOverEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2053" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragOverEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2054" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragOverEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2055" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragOverEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2056" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDragOverEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2057" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewDrop">
          <source>Occurs when the input system reports an underlying drop event with this element as the drop target.</source>
          <target state="translated">입력 시스템에서 이 요소를 놓기 대상으로 사용하는 기본 놓기 이벤트를 보고하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2058" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDrop">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewDrop&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewDrop&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2059" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDrop">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDrop&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDrop&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2060" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDrop">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2061" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDrop">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2062" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDrop">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2063" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDrop">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2064" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDrop">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2065" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDrop">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.Drop&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.Drop&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2066" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewDrop">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewDrop%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewDrop%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2067" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewDropEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewDrop" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewDrop" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2068" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDropEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2069" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDropEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2070" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDropEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2071" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDropEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2072" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewDropEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2073" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewGiveFeedback">
          <source>Occurs when a drag-and-drop operation is started.</source>
          <target state="translated">끌어서 놓기 작업이 시작되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2074" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGiveFeedback">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph> 이벤트를 사용 하면 끌어서 놓기 작업 중 사용자의 시각적 피드백을 제공 하기 위해 마우스 포인터의 모양을 수정 하려면 끌기 이벤트의 소스입니다.</target>       </trans-unit>
        <trans-unit id="2075" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGiveFeedback">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2076" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGiveFeedback">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2077" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGiveFeedback">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2078" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGiveFeedback">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2079" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGiveFeedback">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2080" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGiveFeedback">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2081" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGiveFeedback">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2082" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGiveFeedback">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2083" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGiveFeedback">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2084" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewGiveFeedbackEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewGiveFeedback" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewGiveFeedback" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2085" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewGiveFeedbackEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2086" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewGiveFeedbackEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2087" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewGiveFeedbackEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2088" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewGiveFeedbackEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2089" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewGiveFeedbackEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2090" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>Occurs when the keyboard is focused on this element.</source>
          <target state="translated">이 요소에 키보드 포커스가 있으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2091" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">이 이벤트는 라우팅 터널링을 사용 하므로 포커스가 있는 요소는 이벤트 처리기가 실제로 연결 된 요소가 아닌 자식 요소 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2092" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has focus.</source>
          <target state="translated">확인의 <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> 이벤트 데이터에 포커스가 있는 실제 요소를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="2093" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2094" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2095" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2096" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2097" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2098" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2099" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2100" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2101" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2102" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2103" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2104" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2105" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2106" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2107" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2108" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>Occurs when a key is pressed while the keyboard is focused on this element.</source>
          <target state="translated">이 요소에 키보드 포커스가 있는 동안 키를 누르면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2109" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>Key handling interacts with other platform features such as commanding and text composition.</source>
          <target state="translated">키 처리 명령 및 텍스트 컴퍼지션 등 다른 플랫폼의 기능으로 작용합니다.</target>       </trans-unit>
        <trans-unit id="2110" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> event is a lower-level text input event that might not behave as expected on certain controls.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> 이벤트는 하위 수준의 텍스트 입력된 이벤트를 특정 컨트롤에 예상 대로 동작 하지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2111" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</source>
          <target state="translated">일부 컨트롤은 컨트롤 합성 클래스 처리에 더 높은 수준의 버전의 텍스트를 제공 하는 입력 처리 및 관련 이벤트 또는 때문입니다.</target>       </trans-unit>
        <trans-unit id="2112" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewKeyDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewKeyDown&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2113" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewKeyDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewKeyDown&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2114" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2115" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2116" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2117" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2118" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2119" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2120" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewKeyDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewKeyDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2121" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewKeyDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewKeyDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewKeyDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2122" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewKeyDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2123" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewKeyDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2124" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewKeyDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2125" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewKeyDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2126" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewKeyDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2127" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>Occurs when a key is released while the keyboard is focused on this element.</source>
          <target state="translated">이 요소에 키보드 포커스가 있는 동안 키를 놓으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2128" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>Key handling interacts with other platform features such as commanding and text composition.</source>
          <target state="translated">키 처리 명령 및 텍스트 컴퍼지션 등 다른 플랫폼의 기능으로 작용합니다.</target>       </trans-unit>
        <trans-unit id="2129" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph> event is a lower-level text input event that might not behave as expected on certain controls.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph> 이벤트는 하위 수준의 텍스트 입력된 이벤트를 특정 컨트롤에 예상 대로 동작 하지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2130" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</source>
          <target state="translated">일부 컨트롤은 컨트롤 합성 클래스 처리에 더 높은 수준의 버전의 텍스트를 제공 하는 입력 처리 및 관련 이벤트 또는 때문입니다.</target>       </trans-unit>
        <trans-unit id="2131" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>For details, check the documentation for individual controls.</source>
          <target state="translated">자세한 내용은 개별 컨트롤에 대 한 설명서를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="2132" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewKeyUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewKeyUp&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2133" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewKeyUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewKeyUp&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2134" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2135" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2136" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2137" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2138" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2139" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2140" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewKeyUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewKeyUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewKeyUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2141" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewKeyUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewKeyUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewKeyUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2142" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewKeyUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2143" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewKeyUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2144" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewKeyUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2145" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewKeyUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2146" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewKeyUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2147" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>Occurs when the keyboard is no longer focused on this element.</source>
          <target state="translated">이 요소에 더 이상 키보드 포커스가 없으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2148" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">이 이벤트는 라우팅 터널링을 사용 하므로 포커스를 잃은 요소의 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 자식 요소 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2149" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost focus.</source>
          <target state="translated">확인은 <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> 에 포커스를 잃은 실제 요소를 확인 하기 위해 이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="2150" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2151" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2152" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2153" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2154" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2155" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2156" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2157" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2158" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2159" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2160" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2161" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2162" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2163" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2164" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2165" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>Occurs when any mouse button is pressed while the pointer is over this element.</source>
          <target state="translated">포인터가 이 요소 위에 있는 동안 마우스 단추를 누르면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2166" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2167" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2168" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> event is often raised together with either <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph>, which correspond to a press of one of the two standard mouse buttons.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> 종종 발생과 함께 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph>, 두 개의 표준 마우스 단추 중 하나를 누르는 것에 해당 하는 합니다.</target>       </trans-unit>
        <trans-unit id="2169" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event reaches this element along the event route.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph> 라우트된 이벤트를는 있지만 직접 라우트된 이벤트를 서로 하며 적절 한 단추 특정 이벤트가 발생할 때는 <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 경로 되지 합니다.</target>       </trans-unit>
        <trans-unit id="2170" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph>.</source>
          <target state="translated">에 대 한 설명 부분 참조 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2171" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2172" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2173" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2174" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2175" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2176" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2177" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2178" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewMouseDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2179" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2180" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2181" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2182" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2183" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2184" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>Occurs when the left mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 마우스 왼쪽 단추를 누르면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2185" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">하지만이 <bpt id="p1">[</bpt>라우트된 이벤트 개요<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> 요소 트리를 통해 터널링 경로 따르는 것 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 실제로 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2186" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2187" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">이 이벤트의 인수는 기본의 인수를 노출 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2188" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</target>       </trans-unit>
        <trans-unit id="2189" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 클래스).</target>       </trans-unit>
        <trans-unit id="2190" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2191" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 에 해당 하는 대신 클래스 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2192" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2193" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2194" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2195" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="2196" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2197" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2198" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2199" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2200" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2201" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2202" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2203" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2204" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>Occurs when the left mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 마우스 왼쪽 단추를 놓으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2205" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">하지만이 <bpt id="p1">[</bpt>라우트된 이벤트 개요<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> 요소 트리를 통해 터널링 경로 따르는 것 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 실제로 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2206" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2207" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">이 이벤트의 인수는 기본의 인수를 노출 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2208" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</target>       </trans-unit>
        <trans-unit id="2209" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 클래스).</target>       </trans-unit>
        <trans-unit id="2210" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2211" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 에 해당 하는 대신 클래스 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2212" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2213" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2214" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2215" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="2216" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2217" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2218" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2219" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2220" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2221" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2222" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2223" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2224" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewMouseMove">
          <source>Occurs when the mouse pointer moves while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 마우스 포인터를 움직이면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2225" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseMove">
          <source>This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.</source>
          <target state="translated">마우스 포인터가 요소의 경계에 처음 실행 하면이 이벤트가 발생 둘 다도 마우스 포인터가 이동할 때 요소 범위 내에서 그대로 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="2226" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2227" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2228" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseMove">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2229" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseMove">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2230" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseMove">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2231" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseMove">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2232" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseMove">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2233" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseMove">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2234" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseMove%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2235" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewMouseMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseMove" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseMove" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2236" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2237" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2238" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2239" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2240" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2241" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>Occurs when the right mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 마우스 오른쪽 단추를 누르면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2242" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">하지만이 <bpt id="p1">[</bpt>라우트된 이벤트 개요<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> 요소 트리를 통해 터널링 경로 따르는 것 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 실제로 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2243" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2244" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">이 이벤트의 인수는 기본의 인수를 노출 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2245" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</target>       </trans-unit>
        <trans-unit id="2246" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 클래스).</target>       </trans-unit>
        <trans-unit id="2247" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2248" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 에 해당 하는 대신 클래스 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2249" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2250" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2251" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2252" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="2253" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2254" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2255" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2256" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2257" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2258" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2259" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2260" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2261" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>Occurs when the right mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 마우스 오른쪽 단추를 놓으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2262" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">하지만이 <bpt id="p1">[</bpt>라우트된 이벤트 개요<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> 요소 트리를 통해 터널링 경로 따르는 것 직접 라우트된 이벤트 발생 되 고 각 요소 트리를 따라 보이지만 실제로 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2263" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">이 이벤트를 사용 하 여 기본 마우스 단추 고유 정보를 보고 하는 여러 가지 관련된 이벤트 중 하나인 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 이벤트 경로 따라 각 요소에 의해 처리 되는 연결 된 이벤트는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2264" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">이 이벤트의 인수는 기본의 인수를 노출 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2265" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">해당 이벤트는 이벤트 경로 따라 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 그러나는 마우스 단추 관련 이벤트의 처리기를 명시적으로 호출 하 여 추가 해야 <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, 이벤트 수신기가 되려면을 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션으로 합니다.</target>       </trans-unit>
        <trans-unit id="2266" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">이 이벤트의 개념적으로 생각 (및 기타 마우스 단추 이벤트에 <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) "서비스" 마우스 되도록 (에서 제공 하 고 서비스 정의 사용는 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 클래스).</target>       </trans-unit>
        <trans-unit id="2267" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽) 이벤트 데이터의 원래 마우스 이벤트를 검사 하지 않아도 되는 편의성을 추가 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2268" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">비표준 단추의 상태 확인 등과 같은 더 고급 시나리오를 사용 하도록 해야 할 수 있습니다는 <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> 에 해당 하는 대신 클래스 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2269" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2270" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2271" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2272" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="2273" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2274" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2275" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2276" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2277" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2278" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2279" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2280" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2281" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>Occurs when any mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 마우스 단추를 놓으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2282" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2283" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2284" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph> event is often raised together with either <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>, which correspond to a press of one of the two standard mouse buttons.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph> 종종 발생과 함께 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>, 두 개의 표준 마우스 단추 중 하나를 누르는 것에 해당 하는 합니다.</target>       </trans-unit>
        <trans-unit id="2285" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event reaches this element along the event route.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph> 라우트된 이벤트를는 있지만 직접 라우트된 이벤트를 서로 하며 적절 한 단추 특정 이벤트가 발생할 때는 <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 경로 되지 합니다.</target>       </trans-unit>
        <trans-unit id="2286" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>.</source>
          <target state="translated">에 대 한 설명 부분 참조 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2287" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2288" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2289" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2290" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2291" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2292" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2293" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2294" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewMouseUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2295" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2296" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2297" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2298" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2299" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2300" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewMouseWheel">
          <source>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가 이 요소 위에 있는 동안 사용자가 마우스 휠을 굴리면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2301" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseWheel">
          <source>Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.</source>
          <target state="translated">포커스 또는 마우스 캡처 우선 마우스 포인터입니다. 따라서 시점 요소에서이 이벤트를 수신 되 면 마우스 포인터가 실제로 다른 요소 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2302" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseWheel">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2303" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseWheel">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2304" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseWheel">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2305" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseWheel">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2306" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseWheel">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2307" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseWheel">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2308" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseWheel">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2309" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseWheel">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2310" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewMouseWheel">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2311" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewMouseWheelEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseWheel" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewMouseWheel" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2312" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseWheelEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2313" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseWheelEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2314" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseWheelEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2315" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseWheelEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2316" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewMouseWheelEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2317" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
          <source>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</source>
          <target state="translated">끌어서 놓기 작업 중 키보드 또는 마우스 단추 상태가 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2318" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph> event enables the drag source to declare whether the drag-and-drop operation should be canceled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph> 이벤트를 사용 하면 끌기 소스가 끌어서 놓기 작업을 취소 해야 하는지 여부를 선언 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="2319" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2320" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2321" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2322" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2323" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2324" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2325" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2326" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2327" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2328" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewQueryContinueDragEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2329" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewQueryContinueDragEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2330" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewQueryContinueDragEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2331" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewQueryContinueDragEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2332" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewQueryContinueDragEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2333" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewQueryContinueDragEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2334" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>Occurs when the stylus button is pressed while the pointer is over this element.</source>
          <target state="translated">포인터가 이 요소 위에 있는 동안 스타일러스 단추를 누르면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2335" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonDown&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2336" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonDown&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2337" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2338" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2339" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2340" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2341" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2342" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2343" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2344" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusButtonDown&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusButtonDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2345" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2346" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewStylusButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2347" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2348" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2349" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2350" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2351" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2352" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>Occurs when the stylus button is released while the pointer is over this element.</source>
          <target state="translated">포인터가 이 요소 위에 있는 동안 스타일러스 단추를 놓으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2353" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonUp&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2354" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonUp&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2355" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2356" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2357" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2358" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2359" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2360" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2361" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2362" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusButtonUp&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusButtonUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2363" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2364" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewStylusButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2365" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2366" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2367" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2368" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2369" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2370" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>Occurs when the stylus touches the digitizer while it is over this element.</source>
          <target state="translated">이 요소 위에 있는 동안 스타일러스가 디지타이저를 건드리면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2371" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2372" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2373" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2374" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2375" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2376" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2377" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2378" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2379" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2380" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusDown&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2381" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2382" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewStylusDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2383" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2384" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2385" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2386" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2387" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2388" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>Occurs when the stylus moves over an element without actually touching the digitizer.</source>
          <target state="translated">스타일러스가 디지타이저를 실제로 건드리지 않고 요소 위로 움직이면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2389" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusInAirMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusInAirMove&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2390" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusInAirMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusInAirMove&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2391" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2392" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2393" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2394" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2395" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2396" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2397" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2398" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusInAirMove&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusInAirMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2399" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInAirMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2400" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2401" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2402" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2403" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2404" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2405" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2406" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</source>
          <target state="translated">이 요소 위에 있는 동안 스타일러스가 디지타이저를 검색할 만큼 가까이 있으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2407" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusInRange&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusInRange&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2408" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusInRange&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusInRange&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2409" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2410" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2411" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2412" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2413" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2414" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2415" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2416" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusInRange&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusInRange&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2417" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusInRange">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2418" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewStylusInRangeEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusInRange" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusInRange" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2419" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusInRangeEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2420" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusInRangeEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2421" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusInRangeEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2422" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusInRangeEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2423" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusInRangeEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2424" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>Occurs when the stylus moves while over the element.</source>
          <target state="translated">요소 위에 있는 동안 스타일러스를 움직이면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2425" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>The stylus must move while being detected by the  digitizer  to raise this event, otherwise, <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /&gt;</ph> is raised instead.</source>
          <target state="translated">이 이벤트를 발생시키려면 디지타이저에서 검색하는 동안 스타일러스를 움직여야 하며, 그렇지 않으면 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /&gt;</ph>가 대신 발생합니다.</target>       </trans-unit>
        <trans-unit id="2426" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusMove&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2427" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusMove&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2428" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2429" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2430" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2431" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2432" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2433" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2434" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2435" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusMove&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2436" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusMove%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2437" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewStylusMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusMove" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusMove" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2438" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2439" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2440" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2441" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2442" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2443" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>Occurs when the stylus is too far from the digitizer to be detected.</source>
          <target state="translated">스타일러스가 디지타이저에서 멀리 떨어져 있어 검색할 수 없으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2444" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusOutOfRange&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusOutOfRange&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2445" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusOutOfRange&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusOutOfRange&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2446" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2447" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2448" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2449" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2450" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2451" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2452" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2453" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusOutOfRange&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusOutOfRange&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2454" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2455" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2456" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2457" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2458" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2459" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2460" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2461" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>Occurs when a user performs one of several stylus gestures.</source>
          <target state="translated">사용자가 여러 스타일러스 제스처 중 하나를 수행하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2462" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>For information about stylus gestures, see <ph id="ph1">&lt;xref:System.Windows.Input.SystemGesture&gt;</ph>.</source>
          <target state="translated">스타일러스 제스처에 대 한 정보를 참조 하십시오. <ph id="ph1">&lt;xref:System.Windows.Input.SystemGesture&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2463" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusSystemGesture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusSystemGesture&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2464" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusSystemGesture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusSystemGesture&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2465" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2466" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2467" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2468" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2469" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2470" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2471" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2472" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusSystemGesture&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusSystemGesture&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2473" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2474" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2475" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2476" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2477" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2478" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2479" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2480" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>Occurs when the user raises the stylus off the digitizer while the stylus is over this element.</source>
          <target state="translated">스타일러스가 이 요소 위에 있는 동안 사용자가 디지타이저에서 스타일러스를 올리면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2481" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2482" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2483" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2484" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2485" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2486" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2487" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2488" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2489" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2490" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusUp&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2491" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewStylusUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2492" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewStylusUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewStylusUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2493" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2494" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2495" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2496" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2497" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewStylusUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2498" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>Occurs when this element gets text in a device-independent manner.</source>
          <target state="translated">이 요소가 장치와 별개의 방식으로 텍스트를 가져오면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2499" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> event allows a component or application to listen for text input in a device-independent manner.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> 이벤트를 사용 하면 구성 요소 또는 응용 프로그램을 장치에 관계 없이 텍스트 입력에 대 한 수신 대기 합니다.</target>       </trans-unit>
        <trans-unit id="2500" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>The keyboard is the primary means of <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph>; but speech, handwriting, and other input devices can also generate <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph>.</source>
          <target state="translated">키보드는 주요 수단입니다 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph>; 음성, 필기 및 기타 입력된 장치를 생성할 수도 있지만 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2501" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>Because of key combinations—either in default keyboards or through input method editors—multiple key events may raise just one text input event.</source>
          <target state="translated">키 조합으로 인해-기본 키보드 또는 입력된 방법 편집기를 통해-여러 주요 이벤트 하나만 텍스트 입력된 이벤트를 발생 시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2502" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2503" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2504" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2505" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2506" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2507" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2508" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2509" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2510" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTextInput">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTextInput%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTextInput%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2511" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewTextInputEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTextInput" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTextInput" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2512" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewTextInputEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2513" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewTextInputEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2514" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewTextInputEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2515" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewTextInputEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2516" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.PreviewTextInputEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2517" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>Occurs when a finger touches the screen while the finger is over this element.</source>
          <target state="translated">손가락이 이 요소 위에 있는 동안 화면을 터치하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2518" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>By default, the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> events do not occur until a finger touches the screen and moves.</source>
          <target state="translated">기본적으로는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> 손가락 화면을 터치 하 고 이동 될 때까지 이벤트가 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="2519" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph>.</source>
          <target state="translated">손가락 화면에서 이동 하지 않고 수행 하는 키를 눌러를 누른 채로의 동작을 보유 한 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2520" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>The press and hold behavior is equivalent to a mouse right-click.</source>
          <target state="translated">키를 누른 동작을 마우스 오른쪽 단추로 클릭 하는 것과 같습니다.</target>       </trans-unit>
        <trans-unit id="2521" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>To cause the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> events to occur as soon as a finger touches the screen, set the <ph id="ph3">&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType&gt;</ph> attached property to <ph id="ph4">`false`</ph> for this element.</source>
          <target state="translated">발생 하는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> 손가락으로 화면을 터치 하는 즉시 발생 하도록 이벤트를 설정할는 <ph id="ph3">&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType&gt;</ph> 연결 된 속성을 <ph id="ph4">`false`</ph> 이 요소에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="2522" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2523" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2524" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2525" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2526" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2527" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2528" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2529" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2530" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewTouchDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2531" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewTouchMove">
          <source>Occurs when a finger moves on the screen while the finger is over this element.</source>
          <target state="translated">손가락이 이 요소 위에 있는 동안 화면에서 손가락을 움직이면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2532" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchMove">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2533" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchMove">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2534" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchMove">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2535" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchMove">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2536" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchMove">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2537" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchMove">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2538" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchMove">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.TouchMove&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.TouchMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2539" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2540" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewTouchMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchMove" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchMove" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2541" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.PreviewTouchUp">
          <source>Occurs when a finger is raised off of the screen while the finger is over this element.</source>
          <target state="translated">손가락이 이 요소 위에 있는 동안 화면에서 손가락을 떼면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2542" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2543" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2544" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2545" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchUp">
          <source>Tunneling</source>
          <target state="translated">터널링</target>       </trans-unit>
        <trans-unit id="2546" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2547" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchUp">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2548" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchUp">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.TouchUp&gt;</ph>.</source>
          <target state="translated">해당 버블링 이벤트가 <ph id="ph1">&lt;xref:System.Windows.ContentElement.TouchUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2549" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.PreviewTouchUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2550" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.PreviewTouchUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.PreviewTouchUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2551" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.QueryContinueDrag">
          <source>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</source>
          <target state="translated">끌어서 놓기 작업 중 키보드 또는 마우스 단추 상태가 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2552" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryContinueDrag">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph> event enables the drag source to determine whether the drag-and-drop operation should be canceled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph> 이벤트를 사용 하면 끌기 소스가 끌어서 놓기 작업을 취소 해야 할지를 결정 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="2553" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryContinueDrag">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2554" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryContinueDrag">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2555" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryContinueDrag">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2556" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryContinueDrag">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2557" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryContinueDrag">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2558" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryContinueDrag">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="2559" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryContinueDrag">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2560" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryContinueDrag">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2561" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryContinueDrag">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnQueryContinueDrag%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnQueryContinueDrag%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2562" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.QueryContinueDragEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.QueryContinueDrag" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.QueryContinueDrag" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2563" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.QueryContinueDragEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2564" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.QueryContinueDragEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2565" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.QueryContinueDragEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2566" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.QueryContinueDragEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2567" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.QueryContinueDragEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2568" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>Occurs when the cursor is requested to display.</source>
          <target state="translated">커서를 표시하도록 요청하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2569" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.</source>
          <target state="translated">이 이벤트는 마우스 포인터를 새 위치로 이동할 때마다 요소에서 발생합니다. 즉, 새로운 위치에 따라 커서 개체가 변경되어야 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2570" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2571" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2572" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point).</source>
          <target state="translated">이 이벤트 이름으로 참조 하는 커서가 반드시 않습니다 텍스트 커서 (삽입점 라고도 함).</target>       </trans-unit>
        <trans-unit id="2573" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in <ph id="ph1">[!INCLUDE[TLA2#tla_win](~/includes/tla2sharptla-win-md.md)]</ph> programming.</source>
          <target state="translated">이 컨텍스트에서 커서는 가능한 여러 입력 관련 장치 또는 개념에 대해 화면의 그래픽 표시를 선언 하는 개체 대신 <ph id="ph1">[!INCLUDE[TLA2#tla_win](~/includes/tla2sharptla-win-md.md)]</ph> 프로그래밍 합니다.</target>       </trans-unit>
        <trans-unit id="2574" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>That object is represented by the <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph> class in <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>.</source>
          <target state="translated">해당 개체도 표시 됩니다는 <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph> 클래스 <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2575" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> input system enables you to change this cursor when it represents the onscreen position of the mouse pointer.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 입력된 시스템을 사용 하면 마우스 포인터의 화면 위치를 나타낼 때이 커서를 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2576" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>You can use predefined values from the <ph id="ph1">&lt;xref:System.Windows.Input.Cursors&gt;</ph> enumeration, or you can declare a custom cursor as an image file.</source>
          <target state="translated">미리 정의 된 값을 사용할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Input.Cursors&gt;</ph> 열거형 또는 있습니다 이미지 파일로 사용자 지정 커서를 선언할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2577" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>Listening for the <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> event is not an efficient technique for cursor management.</source>
          <target state="translated">에 대 한 수신 대기 하는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> 이벤트는 커서 관리를 위한 효율적인 기술 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="2578" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>Instead, each element should define its own cursor behavior with <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement.Cursor%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement.ForceCursor%2A&gt;</ph>.</source>
          <target state="translated">각 요소는 자체 커서 동작을 정의 해야 대신 <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement.Cursor%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement.ForceCursor%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2579" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>You should only rely on <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs.</source>
          <target state="translated">만 사용 해야 <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> WPF 프레임 워크 수준 기본 요소를 사용 하지 않는 경우 또는에 특별 한 경우 여기서 커서 동작을 요소 마다 별로 정의지 않습니다 요구를 충족 하지 합니다.</target>       </trans-unit>
        <trans-unit id="2580" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>For more information on implementing cursor behavior in response to <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph>, see <ph id="ph2">&lt;xref:System.Windows.Input.QueryCursorEventHandler&gt;</ph>.</source>
          <target state="translated">커서 동작에 대 한 응답에서 구현에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph>, 참조 <ph id="ph2">&lt;xref:System.Windows.Input.QueryCursorEventHandler&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2581" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2582" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2583" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2584" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="2585" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2586" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>There is no defined corresponding tunneling event.</source>
          <target state="translated">정의 된 해당 터널링 이벤트가 없습니다.</target>       </trans-unit>
        <trans-unit id="2587" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.QueryCursor">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnQueryCursor%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnQueryCursor%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2588" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.QueryCursorEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.QueryCursor" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.QueryCursor" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2589" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.QueryCursorEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2590" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.QueryCursorEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2591" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.QueryCursorEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2592" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.QueryCursorEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2593" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.QueryCursorEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2594" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> that contains the event data and also identifies the event to raise.</source>
          <target state="translated">이벤트 데이터를 포함하며 발생시킬 이벤트를 식별하는 <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2595" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>Raises a specific routed event.</source>
          <target state="translated">특정 라우트된 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2596" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEvent" /&gt;</ph> to be raised is identified within the <ph id="ph2">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> instance that is provided (as the <ph id="ph3">&lt;see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /&gt;</ph> property of that event data).</source>
          <target state="translated">발생시킬 <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEvent" /&gt;</ph>는 해당 이벤트 데이터의 <ph id="ph2">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> 속성으로 제공되는 <ph id="ph3">&lt;see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /&gt;</ph> 인스턴스 내에서 식별됩니다.</target>       </trans-unit>
        <trans-unit id="2597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>The <ph id="ph1">`e`</ph> parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <ph id="ph2">&lt;xref:System.Windows.RoutedEventArgs&gt;</ph> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.</source>
          <target state="translated">하지만 <ph id="ph1">`e`</ph> 매개 변수의 모든 라우트된 이벤트 데이터에 대 한 일반적인 기본 형식으로 지정 됩니다; 이벤트 데이터 때문에 발생 하는 이벤트에 사용할 수 있는 가장 구체적인 이벤트 데이터 형식으로 제공 되어야 <ph id="ph2">&lt;xref:System.Windows.RoutedEventArgs&gt;</ph> 파생된 클래스에 포함 된 특정 이벤트 발생 하는 경우를 위해 사용 되는 특정 실제 데이터 속성입니다.</target>       </trans-unit>
        <trans-unit id="2598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs&gt;</ph> is not just the state properties for the event; it also identifies which routed event to raise.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs&gt;</ph> 이벤트에 대 한 상태 속성만 않습니다. 라우트된 발생할 이벤트를 식별 합니다.</target>       </trans-unit>
        <trans-unit id="2599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>This event-raising pattern and the routed event data both differ from <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> events and data classes, which typically just contain properties that are related to the event.</source>
          <target state="translated">이 이벤트를 발생 시키는 패턴 및 라우트된 이벤트 데이터에서 다를 둘 다 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 이벤트 및 데이터 클래스는 이벤트에 관련 된 속성을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="2600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>The following example creates event data, appends the event identifier to the data, and then uses the event data instance to raise a custom routed event.</source>
          <target state="translated">이벤트 데이터 만들고 데이터에 이벤트 식별자를 추가한 다음 이벤트 데이터 인스턴스를 사용 하 여 사용자 지정 된 라우트된 이벤트를 발생 하는 다음 예제입니다.</target>       </trans-unit>
        <trans-unit id="2601" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ReleaseAllTouchCaptures">
          <source>Releases all captured touch devices from this element.</source>
          <target state="translated">이 요소에서 캡처된 터치 장치를 모두 해제합니다.</target>       </trans-unit>
        <trans-unit id="2602" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ReleaseMouseCapture">
          <source>Releases the mouse capture, if this element held the capture.</source>
          <target state="translated">이 요소가 마우스를 캡처한 경우 캡처를 해제합니다.</target>       </trans-unit>
        <trans-unit id="2603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ReleaseMouseCapture">
          <source>If this element did not hold the capture, calling this method has no effect.</source>
          <target state="translated">이 요소는 캡처를 유지 하지 않은 경우이 메서드를 호출 효과가 없습니다.</target>       </trans-unit>
        <trans-unit id="2604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ReleaseMouseCapture">
          <source>Consider checking the value of <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;</ph> before you call this method.</source>
          <target state="translated">값을 확인 하는 것이 좋습니다. <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;</ph> 이 메서드를 호출 하기 전에.</target>       </trans-unit>
        <trans-unit id="2605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ReleaseMouseCapture">
          <source>The following handler captures or releases mouse capture according to mouse button states.</source>
          <target state="translated">다음 처리기 캡처하거나 마우스 단추 상태에 따라 마우스 캡처를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="2606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ReleaseMouseCapture">
          <source>The example shows how to use captured mouse movement for alternative purposes other than moving the mouse pointer in the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>.</source>
          <target state="translated">마우스 포인터를 움직이는 보다 다른 용도로 캡처된 마우스 동작을 사용 하는 방법을 보여 주는 예제는는 <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2607" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ReleaseStylusCapture">
          <source>Releases the stylus device capture, if this element held the capture.</source>
          <target state="translated">이 요소가 스타일러스 장치를 캡처한 경우 캡처를 해제합니다.</target>       </trans-unit>
        <trans-unit id="2608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ReleaseStylusCapture">
          <source>If this element did not hold the capture, calling this method has no effect.</source>
          <target state="translated">이 요소는 캡처를 유지 하지 않은 경우이 메서드를 호출 효과가 없습니다.</target>       </trans-unit>
        <trans-unit id="2609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ReleaseStylusCapture">
          <source>Consider checking the value of <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;</ph> before you call this method.</source>
          <target state="translated">값을 확인 하는 것이 좋습니다. <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;</ph> 이 메서드를 호출 하기 전에.</target>       </trans-unit>
        <trans-unit id="2610" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)">
          <source>The device to release.</source>
          <target state="translated">해제할 장치입니다.</target>       </trans-unit>
        <trans-unit id="2611" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)">
          <source>Attempts to release the specified touch device from this element.</source>
          <target state="translated">이 요소에서 지정된 터치 장치를 해제하려고 합니다.</target>       </trans-unit>
        <trans-unit id="2612" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the touch device is released; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">터치 장치가 해제되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2613" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)">
          <source><ph id="ph1">&lt;paramref name="touchDevice" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="touchDevice" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="2614" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>The identifier of the.routed event for which the handler is attached.</source>
          <target state="translated">처리기가 연결된 라우트된 이벤트의 식별자입니다.</target>       </trans-unit>
        <trans-unit id="2615" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>The specific handler implementation to remove from the event handler collection on this element.</source>
          <target state="translated">이 요소의 이벤트 처리기 컬렉션에서 제거할 특정 처리기 구현입니다.</target>       </trans-unit>
        <trans-unit id="2616" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Removes the specified routed event handler from this element.</source>
          <target state="translated">지정된 라우트된 이벤트 처리기를 이 요소에서 제거합니다.</target>       </trans-unit>
        <trans-unit id="2617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>The most common scenario for using this <ph id="ph1">[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]</ph> is when you implement the <ph id="ph2">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> "wrapper" event that is associated with a custom routed event, specifically when you implement the "remove" logic for handlers at the <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> level.</source>
          <target state="translated">이 사용 하는 가장 일반적인 시나리오 <ph id="ph1">[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]</ph> 구현 하는 경우이 <ph id="ph2">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 연결 된 사용자 지정 처리기에 대 한 "제거" 논리를 구현 하는 경우에 특히 라우트된 이벤트를 "래퍼" 이벤트는 <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 수준입니다.</target>       </trans-unit>
        <trans-unit id="2618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>The example that follows this remarks section illustrates this scenario.</source>
          <target state="translated">이 다음에 나오는 예제 주의 섹션에서는이 시나리오를 설명 합니다.</target>       </trans-unit>
        <trans-unit id="2619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Calling this method has no effect if there were no handlers registered with criteria that match the input parameters for the method call.</source>
          <target state="translated">다음과 같은 메서드 호출에 대 한 입력된 매개 변수와 일치 하는 조건으로 등록 된 처리기가 경우에이 메서드를 호출 하면 효과가 없습니다.</target>       </trans-unit>
        <trans-unit id="2620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed.</source>
          <target state="translated">둘 이상의 처리기 처리기 저장소를 제거한 경우에 첫 번째 처리기는 조건과 일치 하는 연결 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="2621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>This behavior is consistent with <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> behavior of the <ph id="ph2">`-=`</ph> operator.</source>
          <target state="translated">이 동작은 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 의 동작에서 <ph id="ph2">`-=`</ph> 연산자입니다.</target>       </trans-unit>
        <trans-unit id="2622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Neither <ph id="ph1">`routedEvent`</ph> nor <ph id="ph2">`handler`</ph> may be <ph id="ph3">`null`</ph>.</source>
          <target state="translated">모두 <ph id="ph1">`routedEvent`</ph> 나 <ph id="ph2">`handler`</ph> 수 <ph id="ph3">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Attempting to provide either value as <ph id="ph1">`null`</ph> will raise an exception.</source>
          <target state="translated">와 값 중 하나를 제공 하려고 <ph id="ph1">`null`</ph> 하면 예외가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="2624" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>This method ignores the <ph id="ph1">`handledEventsToo`</ph> parameter information, which is provided if the handler was first added with the <ph id="ph2">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature that enables handling of already-handled events.</source>
          <target state="translated">이 메서드는 무시는 <ph id="ph1">`handledEventsToo`</ph> 와 첫 번째 처리기가 제공 되는 매개 변수 정보를 추가 <ph id="ph2">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> 서명을 이미 처리 된 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2625" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Either type of handler is removed.</source>
          <target state="translated">두 형식의 처리기 제거 됩니다.</target>       </trans-unit>
        <trans-unit id="2626" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ShouldSerializeCommandBindings">
          <source>Returns whether serialization processes should serialize the contents of the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.CommandBindings" /&gt;</ph> property on instances of this class.</source>
          <target state="translated">serialization 프로세스에서 이 클래스의 인스턴스에 있는 <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.CommandBindings" /&gt;</ph> 속성의 콘텐츠를 serialize해야 하는지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="2627" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ShouldSerializeCommandBindings">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="P:System.Windows.ContentElement.CommandBindings" /&gt;</ph> property value should be serialized; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="P:System.Windows.ContentElement.CommandBindings" /&gt;</ph> 속성 값을 serialize해야 하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ShouldSerializeCommandBindings">
          <source>This will return <ph id="ph1">`true`</ph> if <ph id="ph2">&lt;xref:System.Windows.ContentElement.CommandBindings%2A&gt;</ph> is locally set.</source>
          <target state="translated">이 반환 됩니다 <ph id="ph1">`true`</ph> 경우 <ph id="ph2">&lt;xref:System.Windows.ContentElement.CommandBindings%2A&gt;</ph> 로컬로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="2629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ShouldSerializeCommandBindings">
          <source>This <ph id="ph1">`ShouldSerialize`</ph> method is provided because the <ph id="ph2">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph> property does not have a simple default value.</source>
          <target state="translated">이 <ph id="ph1">`ShouldSerialize`</ph> 메서드가 때문에 제공 되는 <ph id="ph2">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph> 속성 간단한 기본 값이 없는 합니다.</target>       </trans-unit>
        <trans-unit id="2630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ShouldSerializeCommandBindings">
          <source>This method indicates whether the property has changed from its default value.</source>
          <target state="translated">이 메서드는 속성이 기본값에서 변경 되었는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="2631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ShouldSerializeCommandBindings">
          <source>You typically invoke this method if you are either developing a designer or developing your own control incorporating a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">디자이너를 개발 하거나 포함 하는 사용자 고유의 컨트롤 개발 하는 경우 일반적으로이 메서드를 호출는 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ShouldSerializeCommandBindings">
          <source>For more information, see <bpt id="p1">[</bpt>Defining Default Values with the ShouldSerialize and Reset Methods<ept id="p1">](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>ShouldSerialize 및 다시 설정 하는 메서드를 사용 하 여 기본 값 정의<ept id="p1">](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2633" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ShouldSerializeInputBindings">
          <source>Returns whether serialization processes should serialize the contents of the <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.InputBindings" /&gt;</ph> property on instances of this class.</source>
          <target state="translated">serialization 프로세스에서 이 클래스의 인스턴스에 있는 <ph id="ph1">&lt;see cref="P:System.Windows.ContentElement.InputBindings" /&gt;</ph> 속성의 콘텐츠를 serialize해야 하는지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="2634" translate="yes" xml:space="preserve" uid="M:System.Windows.ContentElement.ShouldSerializeInputBindings">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="P:System.Windows.ContentElement.InputBindings" /&gt;</ph> property value should be serialized; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="P:System.Windows.ContentElement.InputBindings" /&gt;</ph> 속성 값을 serialize해야 하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ShouldSerializeInputBindings">
          <source>This will return <ph id="ph1">`true`</ph> if <ph id="ph2">&lt;xref:System.Windows.ContentElement.InputBindings%2A&gt;</ph> is locally set.</source>
          <target state="translated">이 반환 됩니다 <ph id="ph1">`true`</ph> 경우 <ph id="ph2">&lt;xref:System.Windows.ContentElement.InputBindings%2A&gt;</ph> 로컬로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="2636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ShouldSerializeInputBindings">
          <source>This <ph id="ph1">`ShouldSerialize`</ph> method is provided because the <ph id="ph2">&lt;xref:System.Windows.UIElement.InputBindings%2A&gt;</ph> property does not have a simple default value.</source>
          <target state="translated">이 <ph id="ph1">`ShouldSerialize`</ph> 메서드가 때문에 제공 되는 <ph id="ph2">&lt;xref:System.Windows.UIElement.InputBindings%2A&gt;</ph> 속성 간단한 기본 값이 없는 합니다.</target>       </trans-unit>
        <trans-unit id="2637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ShouldSerializeInputBindings">
          <source>This method indicates whether the property has changed from its default value.</source>
          <target state="translated">이 메서드는 속성이 기본값에서 변경 되었는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="2638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ShouldSerializeInputBindings">
          <source>You typically invoke this method if you are either developing a designer or developing your own control incorporating a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">디자이너를 개발 하거나 포함 하는 사용자 고유의 컨트롤 개발 하는 경우 일반적으로이 메서드를 호출는 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ContentElement.ShouldSerializeInputBindings">
          <source>For more information, see <bpt id="p1">[</bpt>Defining Default Values with the ShouldSerialize and Reset Methods<ept id="p1">](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>ShouldSerialize 및 다시 설정 하는 메서드를 사용 하 여 기본 값 정의<ept id="p1">](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2640" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>Occurs when the stylus button is pressed while the pointer is over this element.</source>
          <target state="translated">포인터가 이 요소 위에 있는 동안 스타일러스 단추를 누르면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2641" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusButtonDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusButtonDown&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2642" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusButtonDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusButtonDown&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2643" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2644" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2645" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2646" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2647" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2648" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="2649" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2650" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonDown&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2651" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusButtonDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2652" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.StylusButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusButtonDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2653" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2654" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2655" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2656" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2657" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2658" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>Occurs when the stylus button is released while the pointer is over this element.</source>
          <target state="translated">포인터가 이 요소 위에 있는 동안 스타일러스 단추를 놓으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2659" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusButtonUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusButtonUp&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2660" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusButtonUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusButtonUp&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2661" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2662" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2663" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2664" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2665" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2666" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="2667" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2668" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonUp&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2669" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusButtonUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2670" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.StylusButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusButtonUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2671" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2672" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2673" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2674" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2675" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2676" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusDown">
          <source>Occurs when the stylus touches the digitizer while the stylus is over this element.</source>
          <target state="translated">스타일러스가 이 요소 위에 있는 동안 스타일러스가 디지타이저를 건드리면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2677" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusDown&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2678" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusDown&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2679" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusDown">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2680" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusDown">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2681" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2682" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2683" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2684" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusDown">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="2685" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2686" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusDown">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2687" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2688" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.StylusDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2689" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2690" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2691" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2692" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2693" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2694" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>Occurs when the stylus enters the bounds of this element.</source>
          <target state="translated">스타일러스가 이 요소의 영역 안으로 들어가면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2695" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> is a <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> that uses the direct event handling routing strategy.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> 이 <bpt id="p1">[</bpt>라우트된 이벤트 개요<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> 직접 이벤트 처리 라우팅 전략을 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="2696" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">경로; 직접 라우트된 이벤트를 발생 하지 않습니다. 대신,에서 처리 됩니다는 동일한 요소 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="2697" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">그러나 라우트된 이벤트 동작 스타일의 이벤트 트리거 등의 다른 측면을 활성화 합니다.</target>       </trans-unit>
        <trans-unit id="2698" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>Although <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> tracks when the stylus enters the bounds of an element, this event more literally reports that the <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph> property value has changed from <ph id="ph3">`false`</ph> to <ph id="ph4">`true`</ph> on this element.</source>
          <target state="translated">하지만 <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> 트랙 스타일러스이 이벤트를 더이 요소의 영역 안으로 들어가면 직접적으로 보고 하는 <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph> 에서 속성 값이 변경 <ph id="ph3">`false`</ph> 를 <ph id="ph4">`true`</ph> 이 요소에 합니다.</target>       </trans-unit>
        <trans-unit id="2699" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2700" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2701" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2702" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2703" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2704" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2705" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2706" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="2707" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2708" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusEnter">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusEnter%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2709" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.StylusEnterEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusEnter" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusEnter" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2710" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusEnterEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2711" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusEnterEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2712" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusEnterEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2713" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusEnterEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2714" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusEnterEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2715" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>Occurs when the stylus moves over an element without actually touching the digitizer.</source>
          <target state="translated">스타일러스가 디지타이저를 실제로 건드리지 않고 요소 위로 움직이면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2716" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusInAirMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusInAirMove&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2717" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusInAirMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusInAirMove&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2718" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2719" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2720" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2721" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2722" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2723" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="2724" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2725" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusInAirMove&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusInAirMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2726" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInAirMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusInAirMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusInAirMove%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2727" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.StylusInAirMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusInAirMove" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusInAirMove" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2728" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusInAirMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2729" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusInAirMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2730" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusInAirMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2731" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusInAirMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2732" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusInAirMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2733" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</source>
          <target state="translated">이 요소 위에 있는 동안 스타일러스가 디지타이저를 검색할 만큼 가까이 있으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2734" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusInRange&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusInRange&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2735" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusInRange&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusInRange&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2736" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2737" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2738" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2739" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2740" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2741" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="2742" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2743" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusInRange&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusInRange&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2744" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusInRange">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusInRange%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusInRange%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2745" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.StylusInRangeEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusInRange" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusInRange" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2746" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusInRangeEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2747" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusInRangeEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2748" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusInRangeEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2749" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusInRangeEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2750" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusInRangeEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2751" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>Occurs when the stylus leaves the bounds of the element.</source>
          <target state="translated">스타일러스가 요소의 영역을 벗어나면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2752" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> is a <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> that uses the direct event handling routing strategy.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> 이 <bpt id="p1">[</bpt>라우트된 이벤트 개요<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> 직접 이벤트 처리 라우팅 전략을 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="2753" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">경로; 직접 라우트된 이벤트를 발생 하지 않습니다. 대신,에서 처리 됩니다는 동일한 요소 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="2754" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">그러나 라우트된 이벤트 동작 스타일의 이벤트 트리거 등의 다른 측면을 활성화 합니다.</target>       </trans-unit>
        <trans-unit id="2755" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>Although <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph> property value has changed from <ph id="ph3">`true`</ph> to <ph id="ph4">`false`</ph> on this element.</source>
          <target state="translated">하지만 <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> 트랙 위에 있는 범위를 벗어날 때이 이벤트는 요소 중 더 직접적으로 보고 하는 <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph> 에서 속성 값이 변경 <ph id="ph3">`true`</ph> 를 <ph id="ph4">`false`</ph> 이 요소에 합니다.</target>       </trans-unit>
        <trans-unit id="2756" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2757" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2758" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2759" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2760" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2761" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2762" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2763" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="2764" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2765" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusLeave">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusLeave%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2766" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.StylusLeaveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusLeave" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusLeave" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2767" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusLeaveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2768" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusLeaveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2769" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusLeaveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2770" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusLeaveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2771" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusLeaveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2772" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusMove">
          <source>Occurs when the stylus moves over this element.</source>
          <target state="translated">스타일러스가 이 요소 위로 움직일 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="2773" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusMove">
          <source>The stylus must move while on the digitizer to raise this event.</source>
          <target state="translated">이 이벤트가 발생하려면 스타일러스가 디지타이저 위에서 움직여야 합니다.</target>       </trans-unit>
        <trans-unit id="2774" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusMove">
          <source>Otherwise, <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusInAirMove" /&gt;</ph> is raised instead.</source>
          <target state="translated">그렇지 않으면 이 이벤트 대신 <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusInAirMove" /&gt;</ph>가 발생합니다.</target>       </trans-unit>
        <trans-unit id="2775" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusMove&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2776" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusMove&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2777" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusMove">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2778" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusMove">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2779" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusMove">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2780" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusMove">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2781" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusMove">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2782" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusMove">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="2783" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusMove">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2784" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusMove">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusMove&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2785" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusMove%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2786" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.StylusMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusMove" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusMove" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2787" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2788" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2789" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2790" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2791" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2792" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>Occurs when the stylus is too far from the digitizer to be detected, while over this element.</source>
          <target state="translated">이 요소 위에 있는 동안 스타일러스가 디지타이저에서 멀리 떨어져 있어 검색할 수 없으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2793" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusOutOfRange&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusOutOfRange&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2794" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusOutOfRange&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusOutOfRange&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2795" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2796" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2797" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2798" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2799" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2800" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="2801" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2802" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusOutOfRange&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusOutOfRange&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2803" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusOutOfRange">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusOutOfRange%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusOutOfRange%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2804" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.StylusOutOfRangeEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusOutOfRange" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusOutOfRange" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2805" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusOutOfRangeEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2806" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusOutOfRangeEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2807" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusOutOfRangeEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2808" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusOutOfRangeEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2809" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusOutOfRangeEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2810" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>Occurs when a user performs one of several stylus gestures.</source>
          <target state="translated">사용자가 여러 스타일러스 제스처 중 하나를 수행하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2811" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>For more information about stylus gestures, see <ph id="ph1">&lt;xref:System.Windows.Input.SystemGesture&gt;</ph>.</source>
          <target state="translated">스타일러스 제스처에 대 한 자세한 내용은 참조 하십시오. <ph id="ph1">&lt;xref:System.Windows.Input.SystemGesture&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2812" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusSystemGesture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusSystemGesture&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2813" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusSystemGesture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusSystemGesture&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2814" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2815" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2816" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2817" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2818" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2819" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="2820" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2821" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusSystemGesture&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusSystemGesture&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2822" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusSystemGesture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusSystemGesture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusSystemGesture%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2823" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.StylusSystemGestureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusSystemGesture" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusSystemGesture" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2824" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusSystemGestureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2825" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusSystemGestureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2826" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusSystemGestureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2827" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusSystemGestureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2828" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusSystemGestureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2829" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.StylusUp">
          <source>Occurs when the user raises the stylus off the digitizer while it is over this element.</source>
          <target state="translated">스타일러스가 이 요소 위에 있는 동안 사용자가 디지타이저에서 스타일러스를 올리면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2830" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusUp&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2831" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusUp&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2832" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusUp">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">터치, 마우스, 스타일러스의 입력 특정 관계에 있습니다.</target>       </trans-unit>
        <trans-unit id="2833" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusUp">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2834" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2835" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2836" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2837" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusUp">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="2838" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2839" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusUp">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusUp&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2840" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.StylusUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2841" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.StylusUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.StylusUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2842" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2843" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2844" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2845" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2846" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.StylusUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2847" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.TextInput">
          <source>Occurs when this element gets text in a device-independent manner.</source>
          <target state="translated">이 요소가 장치와 별개의 방식으로 텍스트를 가져오면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2848" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>This event might already be marked as handled by the internal implementations of composited controls.</source>
          <target state="translated">합성 컨트롤의 내부 구현에 의해 처리 된 것으로이 이벤트가 이미 표시 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2849" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>See Remark below.</source>
          <target state="translated">아래의 설명을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="2850" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> event may already be marked as handled by the internal implementations of composited controls.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> 이벤트 합성 컨트롤의 내부 구현에 의해 처리 된 것으로 이미 표시 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2851" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> is a composited control where the <ph id="ph2">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> event is already marked as handled; within its compositing.</source>
          <target state="translated">예를 들어 한 <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> 는 합성 컨트롤 위치는 <ph id="ph2">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> 이벤트는 이미 처리;의 합성 내에서 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="2852" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control.</source>
          <target state="translated">컨트롤은 컨트롤의 입력을 해당 컨트롤에 특별 한 의미가 있는 것으로 화살표 키 같은 일부 형식을 해석 하기 때문에이 작업을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="2853" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>If you use <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> as the event where you attach handlers for text input, you may receive better results.</source>
          <target state="translated">사용 하는 경우 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> 텍스트 입력에 대 한 처리기를 연결 하는 이벤트로 더 나은 결과 나타날 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2854" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.</source>
          <target state="translated">이 방법은 대부분의 경우 컨트롤 컴퍼지션 이미 표시가이 이벤트를 처리 하 고 처리기 이벤트 경로 따라가 이벤트를 수신 하지 못하도록 하는 위치를 우회 합니다.</target>       </trans-unit>
        <trans-unit id="2855" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> event allows a component or application to listen for text input in a device-independent manner.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> 이벤트를 사용 하면 구성 요소 또는 응용 프로그램을 장치에 관계 없이 텍스트 입력에 대 한 수신 대기 합니다.</target>       </trans-unit>
        <trans-unit id="2856" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>The keyboard is the primary means of <ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph>, but speech, handwriting, and other input devices can also raise <ph id="ph2">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph>.</source>
          <target state="translated">키보드는 주요 수단입니다 <ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph>, 음성, 필기 및 기타 입력된 장치를 발생 시킬 수 있지만 <ph id="ph2">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2857" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>Because of key combinations—either in default keyboards or through input method editors—multiple key events might raise just one text input event.</source>
          <target state="translated">키 조합으로 인해-기본 키보드 또는 입력된 방법 편집기를 통해-여러 주요 이벤트 하나만 텍스트 입력된 이벤트를 발생 시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2858" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 <ph id="ph1">&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType&gt;</ph> 연결 된이 클래스에 대 한 이벤트 있도록 <ph id="ph2">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> 일부인 클래스의 멤버 때 목록을 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 의 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="2859" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">에 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> 이벤트 원본에 연결 된 <ph id="ph2">&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트 및 동일한 이벤트 데이터 인스턴스를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2860" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2861" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2862" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2863" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="2864" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2865" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2866" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TextInput">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTextInput%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTextInput%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2867" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.TextInputEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TextInput" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TextInput" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2868" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.TextInputEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="2869" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.TextInputEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="2870" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.TextInputEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2871" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.TextInputEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 등록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2872" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.ContentElement.TextInputEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2873" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.TouchDown">
          <source>Occurs when a finger touches the screen while the finger is over this element.</source>
          <target state="translated">손가락이 이 요소 위에 있는 동안 화면을 터치하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2874" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source>By default, the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> events do not occur until a finger touches the screen and moves.</source>
          <target state="translated">기본적으로는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> 손가락 화면을 터치 하 고 이동 될 때까지 이벤트가 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="2875" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source>Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph>.</source>
          <target state="translated">손가락 화면에서 이동 하지 않고 수행 하는 키를 눌러를 누른 채로의 동작을 보유 한 <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2876" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source>The press and hold behavior is equivalent to a mouse right-click.</source>
          <target state="translated">키를 누른 동작을 마우스 오른쪽 단추로 클릭 하는 것과 같습니다.</target>       </trans-unit>
        <trans-unit id="2877" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source>To cause the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> events to occur as soon as a finger touches the screen, set the <ph id="ph3">&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType&gt;</ph> attached property to <ph id="ph4">`false`</ph> for this element.</source>
          <target state="translated">발생 하는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> 손가락으로 화면을 터치 하는 즉시 발생 하도록 이벤트를 설정할는 <ph id="ph3">&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType&gt;</ph> 연결 된 속성을 <ph id="ph4">`false`</ph> 이 요소에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="2878" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2879" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2880" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2881" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="2882" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2883" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2884" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2885" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2886" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.TouchDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchDown" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchDown" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2887" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.TouchEnter">
          <source>Occurs when a touch moves from outside to inside the bounds of this element.</source>
          <target state="translated">터치가 이 요소의 경계 외부에서 내부로 이동할 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="2888" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchEnter">
          <source>This event is always raised, whether or not the touch device is captured to this UI element.</source>
          <target state="translated">이 이벤트는 항상 발생이 UI 요소에 터치 장치 캡처되는지 여부입니다.</target>       </trans-unit>
        <trans-unit id="2889" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchEnter">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2890" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchEnter">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2891" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchEnter">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2892" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchEnter">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="2893" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchEnter">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2894" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchEnter">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2895" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchEnter">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2896" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.TouchEnterEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchEnter" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchEnter" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2897" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.TouchesCaptured">
          <source>Gets all touch devices that are captured to this element.</source>
          <target state="translated">이 요소에 캡처된 터치 장치를 모두 가져옵니다.</target>       </trans-unit>
        <trans-unit id="2898" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.TouchesCaptured">
          <source>An enumeration of <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> objects that are captured to this element.</source>
          <target state="translated">이 요소에 캡처된 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> 개체의 열거형입니다.</target>       </trans-unit>
        <trans-unit id="2899" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.TouchesCapturedWithin">
          <source>Gets all touch devices that are captured to this element or any child elements in its visual tree.</source>
          <target state="translated">이 요소나 시각적 트리의 임의 자식 요소에 캡처된 터치 장치를 모두 가져옵니다.</target>       </trans-unit>
        <trans-unit id="2900" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.TouchesCapturedWithin">
          <source>An enumeration of <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> objects that are captured to this element or any child elements in its visual tree.</source>
          <target state="translated">이 요소나 시각적 트리의 임의 자식 요소에 캡처된 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> 개체의 열거형입니다.</target>       </trans-unit>
        <trans-unit id="2901" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.TouchesDirectlyOver">
          <source>Gets all touch devices that are over this element.</source>
          <target state="translated">이 요소 위에 있는 터치 장치를 모두 가져옵니다.</target>       </trans-unit>
        <trans-unit id="2902" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.TouchesDirectlyOver">
          <source>An enumeration of <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> objects that are over this element.</source>
          <target state="translated">이 요소 위에 있는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> 개체의 열거형입니다.</target>       </trans-unit>
        <trans-unit id="2903" translate="yes" xml:space="preserve" uid="P:System.Windows.ContentElement.TouchesOver">
          <source>Gets all touch devices that are over this element or any child elements in its visual tree.</source>
          <target state="translated">이 요소나 시각적 트리의 임의 자식 요소 위에 있는 터치 장치를 모두 가져옵니다.</target>       </trans-unit>
        <trans-unit id="2904" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ContentElement.TouchesOver">
          <source>An enumeration of <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> objects that are over this element or any child elements in its visual tree.</source>
          <target state="translated">이 요소나 시각적 트리의 임의 자식 요소 위에 있는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> 개체의 열거형입니다.</target>       </trans-unit>
        <trans-unit id="2905" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.TouchLeave">
          <source>Occurs when a touch moves from inside to outside the bounds of this element.</source>
          <target state="translated">터치가 이 요소의 경계 내부에서 외부로 이동할 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="2906" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchLeave">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2907" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchLeave">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2908" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchLeave">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2909" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchLeave">
          <source>Direct</source>
          <target state="translated">직접</target>       </trans-unit>
        <trans-unit id="2910" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchLeave">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2911" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchLeave">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2912" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchLeave">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2913" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.TouchLeaveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchLeave" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchLeave" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2914" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.TouchMove">
          <source>Occurs when a finger moves on the screen while the finger is over this element.</source>
          <target state="translated">손가락이 이 요소 위에 있는 동안 화면에서 손가락을 움직이면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2915" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchMove">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2916" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchMove">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2917" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchMove">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2918" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchMove">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="2919" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchMove">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2920" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchMove">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2921" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchMove">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchMove&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2922" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2923" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.TouchMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchMove" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchMove" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="2924" translate="yes" xml:space="preserve" uid="E:System.Windows.ContentElement.TouchUp">
          <source>Occurs when a finger is raised off of the screen while the finger is over this element.</source>
          <target state="translated">손가락이 이 요소 위에 있는 동안 화면에서 손가락을 떼면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2925" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchUp">
          <source>Routed Event Information</source>
          <target state="translated">라우팅 이벤트 정보</target>       </trans-unit>
        <trans-unit id="2926" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchUp">
          <source>Identifier field</source>
          <target state="translated">식별자 필드</target>       </trans-unit>
        <trans-unit id="2927" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchUp">
          <source>Routing strategy</source>
          <target state="translated">라우팅 전략</target>       </trans-unit>
        <trans-unit id="2928" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchUp">
          <source>Bubbling</source>
          <target state="translated">버블링</target>       </trans-unit>
        <trans-unit id="2929" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchUp">
          <source>Delegate</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="2930" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchUp">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2931" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchUp">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchUp&gt;</ph>.</source>
          <target state="translated">해당 터널링 이벤트는 <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchUp&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2932" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.ContentElement.TouchUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> 파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="2933" translate="yes" xml:space="preserve" uid="F:System.Windows.ContentElement.TouchUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchUp" /&gt;</ph> routed event.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="E:System.Windows.ContentElement.TouchUp" /&gt;</ph> 라우트된 이벤트를 식별합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>