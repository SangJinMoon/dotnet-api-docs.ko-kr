<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3ebfdb9ce19336f783b2dfdfa69984aebd3d731d" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37492173" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <TypeSignature Language="F#" Value="type IWeakEventListener = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="85644-101">WeakEvent 패턴 및 <see cref="T:System.Windows.WeakEventManager" />를 통해 이벤트를 수신해야 하는 클래스에 대해 이벤트 수신 대기를 지원합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="85644-101">Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <see cref="T:System.Windows.WeakEventManager" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85644-102">합니다 <xref:System.Windows.WeakEventManager> (디스패처)를 호출 하 여 이벤트를 전달 합니다 <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> 메서드를 호출 하 여 수신기로 추가 된이 인터페이스를 구현 하는 클래스를 <xref:System.Windows.WeakEventManager> 미리 메서드.</span><span class="sxs-lookup"><span data-stu-id="85644-102">The <xref:System.Windows.WeakEventManager> (a dispatcher) forwards an event by calling the <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> method on classes that implement this interface, and that have been added as listeners by calling <xref:System.Windows.WeakEventManager> methods beforehand.</span></span>  
  
 <span data-ttu-id="85644-103">WeakEvent 패턴에 대 한 주 원인은 이벤트 소스에 이벤트 수신기와 잠재적으로 독립적인 개체 수명을 지정 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="85644-103">The principal reason for following the WeakEvent pattern is when the event source has an object lifetime that is potentially independent of the event listeners.</span></span> <span data-ttu-id="85644-104">중앙 이벤트 디스패치를 사용 하는 <xref:System.Windows.WeakEventManager> 수집 (또는 수동으로 제거) 될 수신기에 대 한 처리기를 사용 하도록 설정 원본 개체 수명을 수신기를 벗어나는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="85644-104">Using the central event dispatching of a <xref:System.Windows.WeakEventManager> enables the handlers for listeners to be garbage collected (or manually purged) even if the source object lifetime extends beyond the listeners.</span></span> <span data-ttu-id="85644-105">반면, 사용 하는 일반적인 이벤트 후크 `+=` 또는 해당 하는 언어별 이벤트 구문을 하면 아직 연결 되어 잠재적으로 소스 처리기에 대 한 강력한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="85644-105">By contrast, a normal event hookup using `+=` or equivalent language-specific event syntax causes the potentially still-connected source to hold a strong reference to the handlers.</span></span> <span data-ttu-id="85644-106">이 주어진 시간에 가비지 수집에서 수신기 참조를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="85644-106">This keeps the listener references from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="85644-107">원본과 수신기 간의 관계가이 패턴의 사용을 제안 하는 위치 일반적인 경우에는 데이터 바인딩에 대 한 원본에서 들어오는 업데이트 이벤트 처리입니다.</span><span class="sxs-lookup"><span data-stu-id="85644-107">One common situation where the relationships between sources and listeners suggests the use of this pattern is the handling of update events coming from sources for data bindings.</span></span>  
  
 <span data-ttu-id="85644-108">외부 응용 프로그램에 있는 이벤트를 수신 대기할 WeakEvent 패턴을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="85644-108">You can use the WeakEvent pattern to listen for events that are external to your application.</span></span> <span data-ttu-id="85644-109">정의 해야는 <xref:System.Windows.WeakEventManager> 를 수신 동작을 제공할 <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>를 사용 하 여를 <xref:System.Windows.WeakEventManager> 참조 처리기를 연결 하려면 대신 `+=`.</span><span class="sxs-lookup"><span data-stu-id="85644-109">You only need to define a <xref:System.Windows.WeakEventManager> for it, provide listening behavior in <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, and use the <xref:System.Windows.WeakEventManager> to attach the handler references rather than `+=`.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveWeakEvent : Type * obj * EventArgs -&gt; bool" Usage="iWeakEventListener.ReceiveWeakEvent (managerType, sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType">
          <span data-ttu-id="85644-110">이 메서드를 호출하는 <see cref="T:System.Windows.WeakEventManager" />의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85644-110">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</span>
          </span>
        </param>
        <param name="sender">
          <span data-ttu-id="85644-111">이벤트를 발생시킨 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85644-111">Object that originated the event.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="85644-112">이벤트 데이터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85644-112">Event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="85644-113">중앙 집중화된 이벤트 관리자에서 이벤트를 수신합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85644-113">Receives events from the centralized event manager.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="85644-114">수신기가 이벤트를 처리했으면 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85644-114">
              <see langword="true" /> if the listener handled the event.</span>
          </span>
          <span data-ttu-id="85644-115">수신기가 처리하지 않는 이벤트에 대해 수신기를 등록하기 위해 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 처리하는 <see cref="T:System.Windows.WeakEventManager" />에서 오류로 간주합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85644-115">It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] to register a listener for an event that the listener does not handle.</span>
          </span>
          <span data-ttu-id="85644-116">이와 관계없이 메서드는 인식하거나 처리하지 않는 이벤트를 수신하는 경우 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="85644-116">Regardless, the method should return <see langword="false" /> if it receives an event that it does not recognize or handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="85644-117">다음 예제에서는 구현 <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> WeakEvent 패턴을 지 원하는 두 개의 가상 이벤트에 대 한 제공 `ClockwiseSpin` 하 고 `CounterclockwiseSpin` 전용을 포함 하는 <xref:System.Windows.WeakEventManager> (표시 되지 않음).</span><span class="sxs-lookup"><span data-stu-id="85644-117">The following example implements <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> to provide WeakEvent pattern support for two hypothetical events `ClockwiseSpin` and `CounterclockwiseSpin` that each have a dedicated <xref:System.Windows.WeakEventManager> (not shown).</span></span> <span data-ttu-id="85644-118">이 구현에서는 이벤트 데이터를 캐스팅 하는 각 지원 되는 이벤트에 대 한 클래스 처리기 스텁 호출 (두 이벤트는 이벤트 데이터 형식을 공유 하는 예제의 `SpinEventArgs`).</span><span class="sxs-lookup"><span data-stu-id="85644-118">This implementation calls class handler stubs for each supported event, casting the event data (in this case the two events share an event data type `SpinEventArgs`).</span></span> <span data-ttu-id="85644-119">구현에서는 반환 `false` 이벤트를 수신할 예상 되는 하나가 아닌 경우.</span><span class="sxs-lookup"><span data-stu-id="85644-119">The implementation returns `false` if the event received is not one that is expected.</span></span>  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="85644-120">
            <para>이 메서드가 수신기가 수신기 목록에 있는 모든 가능한 이벤트를 수신 하기 위한 합니다. 들어오는 유형을 확인 해야 합니다는 둘 이상의 이벤트를 수신 대기 하는 클래스를 구현 하는 경우에 특히 <paramref name="managerType" /> 에 해당 하는 호출 이벤트를 확인 하기 위해 매개 변수입니다. 각 이벤트 패턴의 일부가 되는 전용 있어야 합니다. 따라서 <see cref="T:System.Windows.WeakEventManager" />합니다. 또한 합니다 <paramref name="e" /> 일반 형식의 매개 변수를 <see cref="T:System.EventArgs" />입니다. 따라서 순서 대로 이벤트 데이터에서 특정 속성을 가져오기, 구현을 특정 이벤트 데이터 형식으로 캐스팅 해야 합니다.  기준으로 이벤트의 id를 가져온 후 일반적으로 <see cref="T:System.Windows.WeakEventManager" /> 형식 구현 private 클래스 처리기를 호출 해야 합니다. 클래스 처리기를 통해 추가 하는 일반적인 이벤트 패턴을 통해 추가 되는 수신기에 대 한 이벤트를 처리 하는 데 사용 되는 동일한 클래스 처리기 수 있다고 볼 <see langword="+=" /> 이벤트 발신자에 있습니다. 다음 예제 섹션 간단한 구현 템플릿을 제공합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="85644-120">
              <para>This method is intended to receive all possible events where the receiver is in a listener list. Particularly if implementing for a class that is listening for more than one event, you must check the type of the incoming <paramref name="managerType" /> parameter in order to know which event the call corresponds to. This is why each event that is to be part of the pattern must have a dedicated <see cref="T:System.Windows.WeakEventManager" />. Also, the <paramref name="e" /> parameter is typed as the general <see cref="T:System.EventArgs" />. Therefore, in order get any specific properties out of the event data, your implementation will need to cast to the specific event data type.  Typically, after checking for the identity of the event based on the <see cref="T:System.Windows.WeakEventManager" /> type, your implementation should call a private class handler. Your class handler could conceivably be the very same class handler that is used to handle that event for listeners that are added through the conventional event pattern of adding via <see langword="+=" /> to the event on the sender. The following example section provides a rough implementation template.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>