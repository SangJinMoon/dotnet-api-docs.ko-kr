<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3a1bf86fcc21c642d34254ee3721d50b914beee5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30676107" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>WeakEvent 패턴 및 <see cref="T:System.Windows.WeakEventManager" />를 통해 이벤트를 수신해야 하는 클래스에 대해 이벤트 수신 대기를 지원합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.WeakEventManager> (디스패처)를 호출 하 여 이벤트를 전달 된 <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> 메서드를 호출 하 여 수신기로 추가 되어이 인터페이스를 구현 하는 클래스를 <xref:System.Windows.WeakEventManager> 미리 메서드.  
  
 이벤트 소스에 이벤트 수신기에 잠재적으로 독립적 개체 수명 때 주 사유 WeakEvent 패턴을 표시 합니다. 중앙 이벤트 디스패치를 사용 하는 <xref:System.Windows.WeakEventManager> 하면 수집 된 (또는 수동으로 제거해) 가비지를 수신기에 대 한 처리기는 소스 개체 수명이 수신기 하는 경우에 합니다. 반면, 사용 하 여 일반 이벤트 후크 `+=` 또는 해당 하는 언어 관련 이벤트 구문 때문에 아직 연결 되어 잠재적으로 소스 처리기에 대 한 강한 참조를 저장할 수 있습니다. 이렇게 하면 수신기 참조에서 적절 한 시간에 가비지 수집 되지 않습니다.  
  
 일반적인 경우 여기서 수신기 및 소스 간 관계가이 패턴을 사용 하는의 데이터 바인딩에 대 한 원본에서 들어오는 업데이트 이벤트 처리 합니다.  
  
 외부 응용 프로그램에 있는 이벤트를 수신 하도록 WeakEvent 패턴을 사용할 수 있습니다. 정의 해야는 <xref:System.Windows.WeakEventManager> 에서 수신 대기 동작을 제공 하면 <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, 사용 하 여는 <xref:System.Windows.WeakEventManager> 참조 처리기를 연결 하려면 대신 `+=`합니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType">이 메서드를 호출하는 <see cref="T:System.Windows.WeakEventManager" />의 형식입니다.</param>
        <param name="sender">이벤트를 발생시킨 개체입니다.</param>
        <param name="e">이벤트 데이터입니다.</param>
        <summary>중앙 집중화된 이벤트 관리자에서 이벤트를 수신합니다.</summary>
        <returns>
          수신기가 이벤트를 처리했으면 <see langword="true" />입니다. 수신기가 처리하지 않는 이벤트에 대해 수신기를 등록하기 위해 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 처리하는 <see cref="T:System.Windows.WeakEventManager" />에서 오류로 간주합니다. 이와 관계없이 메서드는 인식하거나 처리하지 않는 이벤트를 수신하는 경우 <see langword="false" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 구현 <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> WeakEvent 패턴 지원 하기 위해 두 개의 가상 이벤트 `ClockwiseSpin` 및 `CounterclockwiseSpin` 전용을 포함 하는 <xref:System.Windows.WeakEventManager> (표시 되지 않음). 이 구현에서는 지원 되는 각 이벤트에 이벤트 데이터를 캐스팅에 대 한 클래스 처리기 스텁을 호출 (이 경우 두 개의 이벤트를 이벤트 데이터 형식 공유 `SpinEventArgs`). 구현은 반환 `false` 받은 이벤트가 예상 되는 하나가 아닌 경우.  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>이 메서드는 수신기가 수신기 목록에 있는 모든 가능한 이벤트를 수신 하는 데 사용 됩니다. 하나 이상의 이벤트에 대 한 수신 대기 하는 클래스를 구현 하는 경우에 특히 들어오는의 형식을 확인 해야 <paramref name="managerType" /> 매개 변수는 호출에는 이벤트를 파악 하기 위해에 해당 합니다. 이 때문에 각 이벤트 패턴의 일부가 되도록를 전용 있어야 <see cref="T:System.Windows.WeakEventManager" />합니다. 또한는 <paramref name="e" /> 일반 형식의 매개 변수를 <see cref="T:System.EventArgs" />합니다. 따라서 순서 전달 되는 이벤트 데이터에서 특정 속성, 구현 특정 이벤트 데이터 형식으로 캐스팅 해야 합니다.  
  
 기반으로 하는 이벤트의 id를 가져온 후 일반적으로 <see cref="T:System.Windows.WeakEventManager" /> 유형을 구현 전용 클래스 처리기를 호출 해야 합니다. 클래스 처리기에서 기본 이벤트 패턴을 통해 추가 수신기에 대 한 해당 이벤트를 처리 하는 데 사용 되는 동일한 클래스 처리기를 생각할 수 <see langword="+=" /> 보낸 사람에는 이벤트를 수신 합니다. 다음 예 섹션에는 간단한 구현 템플릿을 제공합니다.</para>
        </block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>