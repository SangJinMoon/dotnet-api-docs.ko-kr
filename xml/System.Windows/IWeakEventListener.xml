<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IWeakEventListener.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53a1bf86fcc21c642d34254ee3721d50b914beee5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a1bf86fcc21c642d34254ee3721d50b914beee5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.IWeakEventListener">
          <source>Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>.</source>
          <target state="translated">WeakEvent 패턴 및 <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>를 통해 이벤트를 수신해야 하는 클래스에 대해 이벤트 수신 대기를 지원합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>The <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> (a dispatcher) forwards an event by calling the <ph id="ph2">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> method on classes that implement this interface, and that have been added as listeners by calling <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> methods beforehand.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> (디스패처)를 호출 하 여 이벤트를 전달 된 <ph id="ph2">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> 메서드를 호출 하 여 수신기로 추가 되어이 인터페이스를 구현 하는 클래스를 <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> 미리 메서드.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>The principal reason for following the WeakEvent pattern is when the event source has an object lifetime that is potentially independent of the event listeners.</source>
          <target state="translated">이벤트 소스에 이벤트 수신기에 잠재적으로 독립적 개체 수명 때 주 사유 WeakEvent 패턴을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>Using the central event dispatching of a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> enables the handlers for listeners to be garbage collected (or manually purged) even if the source object lifetime extends beyond the listeners.</source>
          <target state="translated">중앙 이벤트 디스패치를 사용 하는 <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> 하면 수집 된 (또는 수동으로 제거해) 가비지를 수신기에 대 한 처리기는 소스 개체 수명이 수신기 하는 경우에 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>By contrast, a normal event hookup using <ph id="ph1">`+=`</ph> or equivalent language-specific event syntax causes the potentially still-connected source to hold a strong reference to the handlers.</source>
          <target state="translated">반면, 사용 하 여 일반 이벤트 후크 <ph id="ph1">`+=`</ph> 또는 해당 하는 언어 관련 이벤트 구문 때문에 아직 연결 되어 잠재적으로 소스 처리기에 대 한 강한 참조를 저장할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>This keeps the listener references from being garbage collected in a timely fashion.</source>
          <target state="translated">이렇게 하면 수신기 참조에서 적절 한 시간에 가비지 수집 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>One common situation where the relationships between sources and listeners suggests the use of this pattern is the handling of update events coming from sources for data bindings.</source>
          <target state="translated">일반적인 경우 여기서 수신기 및 소스 간 관계가이 패턴을 사용 하는의 데이터 바인딩에 대 한 원본에서 들어오는 업데이트 이벤트 처리 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>You can use the WeakEvent pattern to listen for events that are external to your application.</source>
          <target state="translated">외부 응용 프로그램에 있는 이벤트를 수신 하도록 WeakEvent 패턴을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.IWeakEventListener">
          <source>You only need to define a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> for it, provide listening behavior in <ph id="ph2">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph>, and use the <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> to attach the handler references rather than <ph id="ph4">`+=`</ph>.</source>
          <target state="translated">정의 해야는 <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> 에서 수신 대기 동작을 제공 하면 <ph id="ph2">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph>, 사용 하 여는 <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> 참조 처리기를 연결 하려면 대신 <ph id="ph4">`+=`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>The type of the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> calling this method.</source>
          <target state="translated">이 메서드를 호출하는 <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>의 형식입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Object that originated the event.</source>
          <target state="translated">이벤트를 발생시킨 개체입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Event data.</source>
          <target state="translated">이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Receives events from the centralized event manager.</source>
          <target state="translated">중앙 집중화된 이벤트 관리자에서 이벤트를 수신합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the listener handled the event.</source>
          <target state="translated">수신기가 이벤트를 처리했으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>It is considered an error by the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> handling in <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> to register a listener for an event that the listener does not handle.</source>
          <target state="translated">수신기가 처리하지 않는 이벤트에 대해 수신기를 등록하기 위해 <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>에서 처리하는 <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>에서 오류로 간주합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Regardless, the method should return <ph id="ph1">&lt;see langword="false" /&gt;</ph> if it receives an event that it does not recognize or handle.</source>
          <target state="translated">이와 관계없이 메서드는 인식하거나 처리하지 않는 이벤트를 수신하는 경우 <ph id="ph1">&lt;see langword="false" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>The following example implements <ph id="ph1">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> to provide WeakEvent pattern support for two hypothetical events <ph id="ph2">`ClockwiseSpin`</ph> and <ph id="ph3">`CounterclockwiseSpin`</ph> that each have a dedicated <ph id="ph4">&lt;xref:System.Windows.WeakEventManager&gt;</ph> (not shown).</source>
          <target state="translated">다음 예제에서는 구현 <ph id="ph1">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> WeakEvent 패턴 지원 하기 위해 두 개의 가상 이벤트 <ph id="ph2">`ClockwiseSpin`</ph> 및 <ph id="ph3">`CounterclockwiseSpin`</ph> 전용을 포함 하는 <ph id="ph4">&lt;xref:System.Windows.WeakEventManager&gt;</ph> (표시 되지 않음).</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>This implementation calls class handler stubs for each supported event, casting the event data (in this case the two events share an event data type <ph id="ph1">`SpinEventArgs`</ph>).</source>
          <target state="translated">이 구현에서는 지원 되는 각 이벤트에 이벤트 데이터를 캐스팅에 대 한 클래스 처리기 스텁을 호출 (이 경우 두 개의 이벤트를 이벤트 데이터 형식 공유 <ph id="ph1">`SpinEventArgs`</ph>).</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>The implementation returns <ph id="ph1">`false`</ph> if the event received is not one that is expected.</source>
          <target state="translated">구현은 반환 <ph id="ph1">`false`</ph> 받은 이벤트가 예상 되는 하나가 아닌 경우.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>This method is intended to receive all possible events where the receiver is in a listener list.</source>
          <target state="translated">이 메서드는 수신기가 수신기 목록에 있는 모든 가능한 이벤트를 수신 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Particularly if implementing for a class that is listening for more than one event, you must check the type of the incoming <ph id="ph1">&lt;paramref name="managerType" /&gt;</ph> parameter in order to know which event the call corresponds to.</source>
          <target state="translated">하나 이상의 이벤트에 대 한 수신 대기 하는 클래스를 구현 하는 경우에 특히 들어오는의 형식을 확인 해야 <ph id="ph1">&lt;paramref name="managerType" /&gt;</ph> 매개 변수는 호출에는 이벤트를 파악 하기 위해에 해당 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>This is why each event that is to be part of the pattern must have a dedicated <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>.</source>
          <target state="translated">이 때문에 각 이벤트 패턴의 일부가 되도록를 전용 있어야 <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Also, the <ph id="ph1">&lt;paramref name="e" /&gt;</ph> parameter is typed as the general <ph id="ph2">&lt;see cref="T:System.EventArgs" /&gt;</ph>.</source>
          <target state="translated">또한는 <ph id="ph1">&lt;paramref name="e" /&gt;</ph> 일반 형식의 매개 변수를 <ph id="ph2">&lt;see cref="T:System.EventArgs" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Therefore, in order get any specific properties out of the event data, your implementation will need to cast to the specific event data type.</source>
          <target state="translated">따라서 순서 전달 되는 이벤트 데이터에서 특정 속성, 구현 특정 이벤트 데이터 형식으로 캐스팅 해야 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Typically, after checking for the identity of the event based on the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> type, your implementation should call a private class handler.</source>
          <target state="translated">기반으로 하는 이벤트의 id를 가져온 후 일반적으로 <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> 유형을 구현 전용 클래스 처리기를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>Your class handler could conceivably be the very same class handler that is used to handle that event for listeners that are added through the conventional event pattern of adding via <ph id="ph1">&lt;see langword="+=" /&gt;</ph> to the event on the sender.</source>
          <target state="translated">클래스 처리기에서 기본 이벤트 패턴을 통해 추가 수신기에 대 한 해당 이벤트를 처리 하는 데 사용 되는 동일한 클래스 처리기를 생각할 수 <ph id="ph1">&lt;see langword="+=" /&gt;</ph> 보낸 사람에는 이벤트를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
          <source>The following example section provides a rough implementation template.</source>
          <target state="translated">다음 예 섹션에는 간단한 구현 템플릿을 제공합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>