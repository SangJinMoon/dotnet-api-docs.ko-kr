<Type Name="WeakEventManager" FullName="System.Windows.WeakEventManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e7a44b791800ff544c7087f3aa44377d7008c985" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36455803" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract WeakEventManager extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WeakEventManager&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class WeakEventManager abstract : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type WeakEventManager = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="391ae-101">Provides a base class for the event manager that is used in the *weak event pattern*.</span>
      <span class="sxs-lookup">
        <span data-stu-id="391ae-101">Provides a base class for the event manager that is used in the *weak event pattern*.</span>
      </span>
      <span data-ttu-id="391ae-102">The manager adds and removes listeners for events (or callbacks) that also use the pattern.</span>
      <span class="sxs-lookup">
        <span data-stu-id="391ae-102">The manager adds and removes listeners for events (or callbacks) that also use the pattern.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="391ae-103">일반적으로 이벤트 원본이 이벤트 수신기와 독립적인 개체 수명에 취약 한 이벤트 패턴을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-103">You typically use the weak event pattern when the event source has an object lifetime that is independent of the event listeners.</span></span> <span data-ttu-id="391ae-104">중앙 이벤트 디스패치 기능을 사용 하는 <xref:System.Windows.WeakEventManager> 수신기의 처리기 소스 개체가 유지 되는 경우에 가비지 수집 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-104">Using the central event dispatching capability of a <xref:System.Windows.WeakEventManager> allows the listener's handlers to be garbage collected even if the source object persists.</span></span> <span data-ttu-id="391ae-105">반면, 사용 하 여 일반 이벤트 후크는 `+=` 연산자를 사용 하면 잠재적으로 연결이 끊긴된 소스 수신기에 대 한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-105">By contrast, a regular event hookup using the `+=` operator causes the potentially disconnected source to hold a reference to the listeners.</span></span> <span data-ttu-id="391ae-106">이렇게 하면 수신기를에서 적절 한 시간에 가비지 수집 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-106">This prevents the receiver from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="391ae-107">일반적인 경우 소스와 수신기의 수명 관계 사용 해야 취약 한 이벤트 패턴의입니다 생성 되는 업데이트 이벤트에서 데이터 바인딩을 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-107">One common situation where the lifetime relationships between sources and listeners should use of the weak event pattern is the handling of update events coming from data bindings.</span></span>  
  
 <span data-ttu-id="391ae-108">콜백 및 일반 이벤트에 대 한 취약 한 이벤트 패턴을 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-108">The weak event pattern can also be used for callbacks and regular events.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="391ae-109">
        <para>사용자 지정에 대 한 예제 <see cref="T:System.Windows.WeakEventManager" />, 참조 [약한 이벤트 Patterns](~/docs/framework/wpf/advanced/weak-event-patterns.md) 합니다.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="391ae-109">
          <para>For an example of a custom <see cref="T:System.Windows.WeakEventManager" />, see [Weak Event Patterns](~/docs/framework/wpf/advanced/weak-event-patterns.md).</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WeakEventManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WeakEventManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="391ae-110">Initializes base class values when it is used as the initializer by the constructor of a derived class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-110">Initializes base class values when it is used as the initializer by the constructor of a derived class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="protected void DeliverEvent (object sender, EventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEvent(object sender, class System.EventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEvent (sender As Object, args As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEvent(System::Object ^ sender, EventArgs ^ args);" />
      <MemberSignature Language="F#" Value="member this.DeliverEvent : obj * EventArgs -&gt; unit" Usage="weakEventManager.DeliverEvent (sender, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="391ae-111">The object on which the event is being handled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-111">The object on which the event is being handled.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="391ae-112">An <see cref="T:System.EventArgs" /> that contains the event data for the event to deliver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-112">An <see cref="T:System.EventArgs" /> that contains the event data for the event to deliver.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="391ae-113">Delivers the event being managed to each listener.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-113">Delivers the event being managed to each listener.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="391ae-114">호출 된 <xref:System.Windows.WeakEventManager.DeliverEvent%2A> 추가 되거나 제거 된 이벤트 처리기에서 메서드를는 <xref:System.Windows.WeakEventManager.StartListening%2A> 및 <xref:System.Windows.WeakEventManager.StopListening%2A> 하위 클래스의 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-114">Call the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method from within the event handlers that are added or removed by the <xref:System.Windows.WeakEventManager.StartListening%2A> and <xref:System.Windows.WeakEventManager.StopListening%2A> implementations of subclasses.</span></span>  
  
 <span data-ttu-id="391ae-115">호출 하는 경우는 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 에서 메서드 프로그램 `AddListener` 구현 하거나 클래스의 이벤트를 받는 수신기 목록이 기본 컬렉션에 보관 됩니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-115">If you call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method in your `AddListener` implementation of your class, the list of listeners receiving the event is kept in an underlying collection.</span></span> <span data-ttu-id="391ae-116">(`AddListener` 인터페이스 또는 클래스 계약의 일부가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-116">(`AddListener` is not part of an interface or class contract.</span></span> <span data-ttu-id="391ae-117">`AddListener` 호출 하는 관리자 클래스의 메서드에 대 한 제안 이름 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 이벤트에 대 한 패턴 수신기 취약 한 이벤트를 추가 합니다.)</span><span class="sxs-lookup"><span data-stu-id="391ae-117">`AddListener` is the suggested name for the method of your manager class that calls <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and adds weak event pattern listeners for the event.)</span></span>  
  
 <span data-ttu-id="391ae-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 단일 목록에 수신기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single list.</span></span> <span data-ttu-id="391ae-119">관리자 구현에 둘 이상의 목록 이벤트당 수신기를 유지 관리 하는 경우 사용 하지 마십시오 <xref:System.Windows.WeakEventManager.DeliverEvent%2A> 또는 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-119">If your manager implementation maintains more than one list of listeners per event, do not use <xref:System.Windows.WeakEventManager.DeliverEvent%2A> or <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="391ae-120">대신, 구현을 만들어야 자체 <xref:System.Windows.WeakEventManager.ListenerList> 인스턴스 `AddListener` 적절 한 목록에 수신기를 추가 해야 하며 호출 하 여 이벤트를 해당 수신기 목록에 전달 해야 <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-120">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="DeliverEventToList">
      <MemberSignature Language="C#" Value="protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEventToList(object sender, class System.EventArgs args, class System.Windows.WeakEventManager/ListenerList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEventToList (sender As Object, args As EventArgs, list As WeakEventManager.ListenerList)" />
      <MemberSignature Language="F#" Value="member this.DeliverEventToList : obj * EventArgs * System.Windows.WeakEventManager.ListenerList -&gt; unit" Usage="weakEventManager.DeliverEventToList (sender, args, list)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="391ae-121">The object on which the event is being handled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-121">The object on which the event is being handled.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="391ae-122">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-122">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <param name="list">
          <span data-ttu-id="391ae-123">The provided <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-123">The provided <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="391ae-124">Delivers the event being managed to each listener in the provided list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-124">Delivers the event being managed to each listener in the provided list.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="391ae-125">이 메서드는 관리자 구현에는 이벤트 데이터에 캡처되는 정보를 기반으로 별도 수신기 목록이 유지 되는 경우에 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-125">This method is necessary if your manager implementation maintains separate listeners lists based on information that is captured in the event data.</span></span> <span data-ttu-id="391ae-126">이 고급 기술을 사용 하는 경우를 만들고 관리자 구현의 일환으로 별도 목록을 유지 관리 해야 하 고 특정 목록에 수신기를 추가 하는 방법을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-126">If you use this advanced technique, you must create and maintain the separate lists as part of your manager implementation, and you must provide a way to add listeners to a specific list.</span></span> <span data-ttu-id="391ae-127">목록, 구분 하기 위해 사용 하 고 적절 한 목록 또는 목록에만 이벤트를 전달 하는 조건에 대해 원시 이벤트를 수신 하는 처리기 구현이 작동 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-127">Your handler implementation that listens to the raw event must act upon the condition that you use to differentiate the lists, and deliver the event only to the appropriate list or lists.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentManager">
      <MemberSignature Language="C#" Value="protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Windows.WeakEventManager GetCurrentManager(class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetCurrentManager (managerType As Type) As WeakEventManager" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Windows::WeakEventManager ^ GetCurrentManager(Type ^ managerType);" />
      <MemberSignature Language="F#" Value="static member GetCurrentManager : Type -&gt; System.Windows.WeakEventManager" Usage="System.Windows.WeakEventManager.GetCurrentManager managerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managerType">
          <span data-ttu-id="391ae-128">The type to obtain the <see cref="T:System.Windows.WeakEventManager" /> for.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-128">The type to obtain the <see cref="T:System.Windows.WeakEventManager" /> for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="391ae-129">Returns the <see cref="T:System.Windows.WeakEventManager" /> implementation that is used for the provided type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-129">Returns the <see cref="T:System.Windows.WeakEventManager" /> implementation that is used for the provided type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="391ae-130">The matching <see cref="T:System.Windows.WeakEventManager" /> implementation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-130">The matching <see cref="T:System.Windows.WeakEventManager" /> implementation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="391ae-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> 전달 된를 사용 하 여이 메서드를 호출 하는 구현 `managerType`합니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementations call this method using their passed `managerType`.</span></span> <span data-ttu-id="391ae-132">반환 된 <xref:System.Windows.WeakEventManager> 개인 클래스 처리기를 호출 하 고 수신한 이벤트를 결정 하는 구분자로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-132">The returned <xref:System.Windows.WeakEventManager> is then used as the differentiator that determines which event was received, and which private class handler to invoke.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="protected object this[object source] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Protected Property Item(source As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ source); void set(System::Object ^ source, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Windows.WeakEventManager.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="391ae-133">The zero-based index of the requested source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-133">The zero-based index of the requested source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="391ae-134">Gets or sets the data being stored for the specified source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-134">Gets or sets the data being stored for the specified source.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="391ae-135">이 원본에 대 한 관리자에 의해 저장 되는 데이터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-135">Data being stored by the manager for this source.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="391ae-136">파생된 클래스는 데이터 및이 인덱서에 저장 하는 형식을 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-136">Derived classes can choose what data and type to store in this indexer.</span></span> <span data-ttu-id="391ae-137">일반적으로이 구현으로 <xref:System.Windows.WeakEventManager.ListenerList>, 수신기에 대 한 약한 참조의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-137">Typically this is implemented as a <xref:System.Windows.WeakEventManager.ListenerList>, which is a list of weak references to listeners.</span></span> <span data-ttu-id="391ae-138">경우이 유형을 변경 해야만 <xref:System.Windows.WeakEventManager.ListenerList> 유형에 필요한 정보를 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-138">You would only have to change this type if the <xref:System.Windows.WeakEventManager.ListenerList> type cannot contain your required information.</span></span> <span data-ttu-id="391ae-139">따라서 재정의 해야 합니다는 경우는 <xref:System.Windows.WeakEventManager.Purge%2A> 메서드 내부 형식의 모든 정리를 올바르게 수행 되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-139">If so, you will have to override the <xref:System.Windows.WeakEventManager.Purge%2A> method so that all cleanup of the underlying type is performed correctly.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.NewListenerList" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function NewListenerList () As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="abstract member NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList&#xA;override this.NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="weakEventManager.NewListenerList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="391ae-140">Returns a new object to contain listeners to an event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-140">Returns a new object to contain listeners to an event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="391ae-141">A new object to contain listeners to an event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-141">A new object to contain listeners to an event.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedAddHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedAddHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="391ae-142">The source object that the handler delegate subscribes to.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-142">The source object that the handler delegate subscribes to.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="391ae-143">The delegate that handles the event that is raised by <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-143">The delegate that handles the event that is raised by <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="391ae-144">Adds the specified delegate as an event handler of the specified source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-144">Adds the specified delegate as an event handler of the specified source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddListener">
      <MemberSignature Language="C#" Value="protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedAddListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="391ae-145">The source to attach listeners to.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-145">The source to attach listeners to.</span>
          </span>
        </param>
        <param name="listener">
          <span data-ttu-id="391ae-146">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-146">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="391ae-147">Adds the provided listener to the provided source for the event being managed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-147">Adds the provided listener to the provided source for the event being managed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="391ae-148">관리자 클래스 내에서이 메서드를 호출 `AddListener` 에 대 한 메서드 <xref:System.Windows.WeakEventManager> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-148">Call this method within your manager class `AddListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="391ae-149">`AddListener` 제안 이름 취약 한 이벤트 패턴에 대 한 수신기를 추가 하는 다른 클래스를 사용 하도록 설정 하려면 관리자 클래스에서 정의 된 정적 메서드.</span><span class="sxs-lookup"><span data-stu-id="391ae-149">`AddListener` is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern.</span></span> <span data-ttu-id="391ae-150">`AddListener` 두 개의 매개 변수를 취해야:는 `source` 수신기를 연결 하면 뷰어에서 위치 및 `listener` 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="391ae-150">`AddListener` should take two parameters: the `source` where the listener is attached, and the `listener` instance.</span></span> <span data-ttu-id="391ae-151">에 대 한 프로그램 `AddListener` 구현, 호출 된 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 메서드는 현재 관리자와 동일한 두 개의 패스 매개 변수를 합니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-151">For your `AddListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="391ae-152">수신기 목록이 이전에 비어 있으면 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 호출은 <xref:System.Windows.WeakEventManager.StartListening%2A> 메서드 특정 호출는 내부적으로 <xref:System.Windows.WeakEventManager.StartListening%2A> 으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-152">If the list of listeners was previously empty, <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> calls the <xref:System.Windows.WeakEventManager.StartListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StartListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="391ae-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 단일 내부에 수신기를 추가 <xref:System.Windows.WeakEventManager.ListenerList> 당 `source`합니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="391ae-154">관리자 구현에 둘 이상의 목록은 각 이벤트 소스 조합에 대 한 수신기를 유지 관리 하는 경우 사용 하지 마십시오 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-154">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="391ae-155">대신, 구현을 만들어야 자체 <xref:System.Windows.WeakEventManager.ListenerList> 인스턴스 `AddListener` 적절 한 목록에 수신기를 추가 해야 하며 호출 하 여 이벤트를 해당 수신기 목록에 전달 해야는 <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> 이벤트는 대신<xref:System.Windows.WeakEventManager.DeliverEvent%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="391ae-155">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> event instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedRemoveHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="391ae-156">The source to remove the handler from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-156">The source to remove the handler from.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="391ae-157">The delegate to remove from <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-157">The delegate to remove from <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="391ae-158">Removes the previously added handler from the specified source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-158">Removes the previously added handler from the specified source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveListener">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedRemoveListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="391ae-159">The source to remove listeners from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-159">The source to remove listeners from.</span>
          </span>
        </param>
        <param name="listener">
          <span data-ttu-id="391ae-160">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-160">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="391ae-161">Removes a previously added listener from the provided source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-161">Removes a previously added listener from the provided source.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="391ae-162">관리자 클래스 내에서이 메서드를 호출 `RemoveListener` 에 대 한 메서드 <xref:System.Windows.WeakEventManager> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-162">Call this method within your manager class `RemoveListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="391ae-163">`RemoveListener` 제안 이름 취약 한 이벤트 패턴에 대 한 수신기를 제거 하는 다른 클래스를 사용 하도록 설정 하려면 관리자 클래스에서 정의 된 정적 메서드.</span><span class="sxs-lookup"><span data-stu-id="391ae-163">`RemoveListener` is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern.</span></span> <span data-ttu-id="391ae-164">`RemoveListener` 두 개의 매개 변수를 취해야:는 `source` 수신기를 제거 하는 경우 및 `listener` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-164">`RemoveListener` should take two parameters: the `source` where the listener is removed, and the `listener` class.</span></span> <span data-ttu-id="391ae-165">에 대 한 프로그램 `RemoveListener` 구현, 호출 된 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 메서드는 현재 관리자와 동일한 두 개의 패스 매개 변수를 합니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-165">For your `RemoveListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="391ae-166">호출 하는 경우 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 목록에서 마지막 수신기가 제거 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 호출은 <xref:System.Windows.WeakEventManager.StopListening%2A> 메서드 특정 호출는 내부적으로 <xref:System.Windows.WeakEventManager.StopListening%2A> 으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-166">If a call to <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes the last listener in the list, <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> calls the <xref:System.Windows.WeakEventManager.StopListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StopListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="391ae-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 단일 내부에서 수신기 제거 <xref:System.Windows.WeakEventManager.ListenerList> 당 `source`합니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes listeners from a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="391ae-168">관리자 구현에 둘 이상의 목록은 각 이벤트 소스 조합에 대 한 수신기를 유지 관리 하는 경우 사용 하지 마십시오 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-168">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>.</span></span> <span data-ttu-id="391ae-169">대신, 구현을 만들어야 자체 <xref:System.Windows.WeakEventManager.ListenerList> 인스턴스 `RemoveListener` 적절 한 목록에서 수신기를 제거 해야 하 고 호출 하 여 이벤트를 해당 수신기 목록에 전달 해야는 <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> 메서드 대신는 <xref:System.Windows.WeakEventManager.DeliverEvent%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="391ae-169">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `RemoveListener` should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> method instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="protected virtual bool Purge (object source, object data, bool purgeAll);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool Purge(object source, object data, bool purgeAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Purge (source As Object, data As Object, purgeAll As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool Purge(System::Object ^ source, System::Object ^ data, bool purgeAll);" />
      <MemberSignature Language="F#" Value="abstract member Purge : obj * obj * bool -&gt; bool&#xA;override this.Purge : obj * obj * bool -&gt; bool" Usage="weakEventManager.Purge (source, data, purgeAll)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="purgeAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="391ae-170">The source for events being listened to.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-170">The source for events being listened to.</span>
          </span>
        </param>
        <param name="data">
          <span data-ttu-id="391ae-171">The data to check.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-171">The data to check.</span>
          </span>
          <span data-ttu-id="391ae-172">This object is expected to be a <see cref="T:System.Windows.WeakEventManager.ListenerList" /> implementation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-172">This object is expected to be a <see cref="T:System.Windows.WeakEventManager.ListenerList" /> implementation.</span>
          </span>
        </param>
        <param name="purgeAll">
          <span data-ttu-id="391ae-173">
            <see langword="true" /> to stop listening to <c>source</c>, and completely remove all entries from <c>data</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-173">
              <see langword="true" /> to stop listening to <c>source</c>, and completely remove all entries from <c>data</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="391ae-174">Removes inactive listener entries from the data list for the provided source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-174">Removes inactive listener entries from the data list for the provided source.</span>
          </span>
          <span data-ttu-id="391ae-175">Returns <see langword="true" /> if some entries were actually removed from the list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-175">Returns <see langword="true" /> if some entries were actually removed from the list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="391ae-176">
            <see langword="true" /> if some entries were actually removed; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-176">
              <see langword="true" /> if some entries were actually removed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="391ae-177"><xref:System.Windows.WeakEventManager.Purge%2A> 메서드에 데이터가 경우 모든 엔트리를 제거 하는 기본 구현이 <xref:System.Windows.WeakEventManager.ListenerList>합니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-177">The <xref:System.Windows.WeakEventManager.Purge%2A> method has a default implementation that will remove all entries when data is a <xref:System.Windows.WeakEventManager.ListenerList>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="391ae-178">
            <para>에 대 한 입력은 기본는 <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> 이외의 리 <see cref="T:System.Windows.WeakEventManager.ListenerList" />, 하거나 초과 하 여 데이터를 포함 한 <see cref="T:System.Windows.WeakEventManager.ListenerList" />, 재정의 해야 합니다는 <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> 메서드. 대체 형식 항목 목록에 대 한 재정의 제거 동작을 제공 해야 합니다. 일반적으로 재정의 기본 구현을 호출 하지 않고 동작을 제공 해야 합니다. 특정 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 정리를 호출 해야 할 필요가 <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-178">
              <para>If the underlying type for the <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> is something other than <see cref="T:System.Windows.WeakEventManager.ListenerList" />, or contains data beyond a <see cref="T:System.Windows.WeakEventManager.ListenerList" />, you must override the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method. The override should provide purge behavior for the alternate type items list. Generally, the override should provide behavior without calling the base implementation. If a specific <see cref="T:System.Windows.WeakEventManager.ListenerList" /> still needs clearing, call <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="ReadLock">
      <MemberSignature Language="C#" Value="protected IDisposable ReadLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable ReadLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ReadLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ReadLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ ReadLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadLock : IDisposable" Usage="System.Windows.WeakEventManager.ReadLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="391ae-179">Establishes a read-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-179">Establishes a read-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="391ae-180">데이터 테이블 멤버에 대 한 잠금을 설정한 다음 적절 하 게 삭제할으로 사용할 수 있는 개체는 <see langword="using" /> 생성 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-180">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="391ae-181">파생된 클래스에서 쿼리를 수행할 수에 포함 된 테이블 <xref:System.Windows.WeakEventManager.Item%2A> 내에서 항상 수행 되도록는 `using (ReadLock) { ... }` 이미 쓰기 잠금을 내에 있는 쿼리를 제외한 절.</span><span class="sxs-lookup"><span data-stu-id="391ae-181">In derived classes, queries to the table contained in <xref:System.Windows.WeakEventManager.Item%2A> should always occur within a `using (ReadLock) { ... }` clause, except for queries that are already within a write lock.</span></span> <span data-ttu-id="391ae-182">이러한 쿼리는 보다 복잡 한 클래스에서 지 원하는 경우 할 수도 있습니다 `AddListener` 구현 외의 다른 데이터를 필요로 하는 `source` 및 `listener`를 사용 하 여는 <xref:System.Windows.WeakEventManager.Item%2A> 추가 정보를 저장 하는 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-182">These queries may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.WriteLock" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="protected void Remove (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Remove(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub Remove (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void Remove(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="member this.Remove : obj -&gt; unit" Usage="weakEventManager.Remove source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="391ae-183">The source to remove listener information for.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-183">The source to remove listener information for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="391ae-184">Removes all listeners for the specified source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-184">Removes all listeners for the specified source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCleanup">
      <MemberSignature Language="C#" Value="protected void ScheduleCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ScheduleCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ScheduleCleanup" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ScheduleCleanup ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ScheduleCleanup();" />
      <MemberSignature Language="F#" Value="member this.ScheduleCleanup : unit -&gt; unit" Usage="weakEventManager.ScheduleCleanup " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="391ae-185">Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-185">Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="391ae-186">호출의 <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> 호출 하는 것과 비슷합니다는 <xref:System.Windows.WeakEventManager.Purge%2A> 스레드 우선 순위를 낮게에 현재 관리자 목록에 메서드와는 `purgeAll` 매개 변수 설정 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-186">Calling the <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> method is similar to calling the <xref:System.Windows.WeakEventManager.Purge%2A> method on the current manager's list, at lower thread priority, with the `purgeAll` parameter set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentManager">
      <MemberSignature Language="C#" Value="protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void SetCurrentManager(class System.Type managerType, class System.Windows.WeakEventManager manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub SetCurrentManager (managerType As Type, manager As WeakEventManager)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void SetCurrentManager(Type ^ managerType, System::Windows::WeakEventManager ^ manager);" />
      <MemberSignature Language="F#" Value="static member SetCurrentManager : Type * System.Windows.WeakEventManager -&gt; unit" Usage="System.Windows.WeakEventManager.SetCurrentManager (managerType, manager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="manager" Type="System.Windows.WeakEventManager" />
      </Parameters>
      <Docs>
        <param name="managerType">
          <span data-ttu-id="391ae-187">The type to set the new event manager.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-187">The type to set the new event manager.</span>
          </span>
        </param>
        <param name="manager">
          <span data-ttu-id="391ae-188">The new event manager.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-188">The new event manager.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="391ae-189">Sets the current manager for the specified manager type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-189">Sets the current manager for the specified manager type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="391ae-190">호출의 <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> 경우 해당 관리자를 초기화 하는 메서드를 호출 하 여 필요한 사용자 `CurrentManager` 속성에는 <xref:System.Windows.WeakEventManager> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-190">Call the <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> method to initialize a manager, if that is required by a call to your `CurrentManager` property on a <xref:System.Windows.WeakEventManager> implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected abstract void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StartListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StartListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StartListening : obj -&gt; unit" Usage="weakEventManager.StartListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="391ae-191">The source to begin listening on.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-191">The source to begin listening on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="391ae-192">When overridden in a derived class, starts listening for the event being managed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-192">When overridden in a derived class, starts listening for the event being managed.</span>
          </span>
          <span data-ttu-id="391ae-193">After the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method is first called, the manager should be in the state of calling <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> or <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> whenever the relevant event from the provided source is handled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-193">After the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method is first called, the manager should be in the state of calling <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> or <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> whenever the relevant event from the provided source is handled.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="391ae-194">
            <para>
              <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> 재정의를 제공 된 처리기가 추가 되어야 <paramref name="source" />합니다. 처리기가 관리자 자체에서 선언 됩니다. 클래스 처리기 공개 되지 않아야 하 고 관리 되는 이벤트에 대 한 응답에서에 호출 해야 합니다. 클래스 처리기를 호출 해야는 <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> 메서드 또는 <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> 메서드 적절 하 게 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-194">
              <para>
                <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> overrides should add a handler to the provided <paramref name="source" />. The handler is declared by the manager itself. The class handler should not be public, and it should only be called in response to the event being managed. The class handler should call the <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> method or the <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> method appropriately.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected abstract void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StopListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StopListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StopListening : obj -&gt; unit" Usage="weakEventManager.StopListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="391ae-195">The source to stop listening on.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-195">The source to stop listening on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="391ae-196">When overridden in a derived class, stops listening on the provided source for the event being managed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-196">When overridden in a derived class, stops listening on the provided source for the event being managed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="391ae-197">
            <para>
              <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> 구현을 추가 하 여 클래스 처리기를 제거 해야는 <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> 메서드. 수신기를 제거 해도 수신기 목록 선택을 취소 하지 됩니다. 대신, 클래스 처리기 (일시적으로)만 분리 해야 합니다. 다른 메서드를 같은 전체 목록을 지우는 데 사용할 수는 <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> 메서드는 <paramref name="purgeAll" /> 매개 변수 설정 <see langword="true" />합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-197">
              <para>
                <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> implementations should remove the class handler as added by the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method. Removing a listener should not clear the listener list. Instead, it should only disconnect the class handler (perhaps temporarily). Other methods are available for clearing the entire list, such as the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method with the <paramref name="purgeAll" /> parameter set to <see langword="true" />.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLock">
      <MemberSignature Language="C#" Value="protected IDisposable WriteLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable WriteLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.WriteLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property WriteLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ WriteLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WriteLock : IDisposable" Usage="System.Windows.WeakEventManager.WriteLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="391ae-198">Establishes a write-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-198">Establishes a write-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="391ae-199">데이터 테이블 멤버에 대 한 잠금을 설정한 다음 적절 하 게 삭제할으로 사용할 수 있는 개체는 <see langword="using" /> 생성 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="391ae-199">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="391ae-200">파생된 클래스에서 기본 데이터 테이블의 모든 수정 사항을 내에서 발생 해야는 `using (WriteLock) { ... }` 절.</span><span class="sxs-lookup"><span data-stu-id="391ae-200">In derived classes, all modifications to the underlying data table should occur within a `using (WriteLock) { ... }` clause.</span></span> <span data-ttu-id="391ae-201">이러한 수정 프로그램 클래스는 보다 복잡 한 지원 작업이 필요할 수 있습니다 `AddListener` 구현 외의 다른 데이터를 필요로 하는 `source` 및 `listener`를 사용 하 여는 <xref:System.Windows.WeakEventManager.Item%2A> 추가 정보를 저장 하는 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="391ae-201">These modifications may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.ReadLock" />
      </Docs>
    </Member>
  </Members>
</Type>