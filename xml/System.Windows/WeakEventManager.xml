<Type Name="WeakEventManager" FullName="System.Windows.WeakEventManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e7a44b791800ff544c7087f3aa44377d7008c985" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36455803" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract WeakEventManager extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WeakEventManager&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class WeakEventManager abstract : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type WeakEventManager = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides a base class for the event manager that is used in the *weak event pattern*. The manager adds and removes listeners for events (or callbacks) that also use the pattern.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 이벤트 원본이 이벤트 수신기와 독립적인 개체 수명에 취약 한 이벤트 패턴을 사용 합니다. 중앙 이벤트 디스패치 기능을 사용 하는 <xref:System.Windows.WeakEventManager> 수신기의 처리기 소스 개체가 유지 되는 경우에 가비지 수집 될 수 있습니다. 반면, 사용 하 여 일반 이벤트 후크는 `+=` 연산자를 사용 하면 잠재적으로 연결이 끊긴된 소스 수신기에 대 한 참조입니다. 이렇게 하면 수신기를에서 적절 한 시간에 가비지 수집 되지 않습니다.  
  
 일반적인 경우 소스와 수신기의 수명 관계 사용 해야 취약 한 이벤트 패턴의입니다 생성 되는 업데이트 이벤트에서 데이터 바인딩을 처리 합니다.  
  
 콜백 및 일반 이벤트에 대 한 취약 한 이벤트 패턴을 사용할 수도 있습니다.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>사용자 지정에 대 한 예제 <see cref="T:System.Windows.WeakEventManager" />, 참조 [약한 이벤트 Patterns](~/docs/framework/wpf/advanced/weak-event-patterns.md) 합니다.</para>
    </block>
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WeakEventManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WeakEventManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes base class values when it is used as the initializer by the constructor of a derived class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="protected void DeliverEvent (object sender, EventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEvent(object sender, class System.EventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEvent (sender As Object, args As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEvent(System::Object ^ sender, EventArgs ^ args);" />
      <MemberSignature Language="F#" Value="member this.DeliverEvent : obj * EventArgs -&gt; unit" Usage="weakEventManager.DeliverEvent (sender, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">The object on which the event is being handled.</param>
        <param name="args">An <see cref="T:System.EventArgs" /> that contains the event data for the event to deliver.</param>
        <summary>Delivers the event being managed to each listener.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 된 <xref:System.Windows.WeakEventManager.DeliverEvent%2A> 추가 되거나 제거 된 이벤트 처리기에서 메서드를는 <xref:System.Windows.WeakEventManager.StartListening%2A> 및 <xref:System.Windows.WeakEventManager.StopListening%2A> 하위 클래스의 구현입니다.  
  
 호출 하는 경우는 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 에서 메서드 프로그램 `AddListener` 구현 하거나 클래스의 이벤트를 받는 수신기 목록이 기본 컬렉션에 보관 됩니다. (`AddListener` 인터페이스 또는 클래스 계약의 일부가 아닙니다. `AddListener` 호출 하는 관리자 클래스의 메서드에 대 한 제안 이름 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 이벤트에 대 한 패턴 수신기 취약 한 이벤트를 추가 합니다.)  
  
 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 단일 목록에 수신기를 추가합니다. 관리자 구현에 둘 이상의 목록 이벤트당 수신기를 유지 관리 하는 경우 사용 하지 마십시오 <xref:System.Windows.WeakEventManager.DeliverEvent%2A> 또는 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>합니다. 대신, 구현을 만들어야 자체 <xref:System.Windows.WeakEventManager.ListenerList> 인스턴스 `AddListener` 적절 한 목록에 수신기를 추가 해야 하며 호출 하 여 이벤트를 해당 수신기 목록에 전달 해야 <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="DeliverEventToList">
      <MemberSignature Language="C#" Value="protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEventToList(object sender, class System.EventArgs args, class System.Windows.WeakEventManager/ListenerList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEventToList (sender As Object, args As EventArgs, list As WeakEventManager.ListenerList)" />
      <MemberSignature Language="F#" Value="member this.DeliverEventToList : obj * EventArgs * System.Windows.WeakEventManager.ListenerList -&gt; unit" Usage="weakEventManager.DeliverEventToList (sender, args, list)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="sender">The object on which the event is being handled.</param>
        <param name="args">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <param name="list">The provided <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</param>
        <summary>Delivers the event being managed to each listener in the provided list.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 관리자 구현에는 이벤트 데이터에 캡처되는 정보를 기반으로 별도 수신기 목록이 유지 되는 경우에 필요 합니다. 이 고급 기술을 사용 하는 경우를 만들고 관리자 구현의 일환으로 별도 목록을 유지 관리 해야 하 고 특정 목록에 수신기를 추가 하는 방법을 제공 해야 합니다. 목록, 구분 하기 위해 사용 하 고 적절 한 목록 또는 목록에만 이벤트를 전달 하는 조건에 대해 원시 이벤트를 수신 하는 처리기 구현이 작동 해야 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentManager">
      <MemberSignature Language="C#" Value="protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Windows.WeakEventManager GetCurrentManager(class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetCurrentManager (managerType As Type) As WeakEventManager" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Windows::WeakEventManager ^ GetCurrentManager(Type ^ managerType);" />
      <MemberSignature Language="F#" Value="static member GetCurrentManager : Type -&gt; System.Windows.WeakEventManager" Usage="System.Windows.WeakEventManager.GetCurrentManager managerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managerType">The type to obtain the <see cref="T:System.Windows.WeakEventManager" /> for.</param>
        <summary>Returns the <see cref="T:System.Windows.WeakEventManager" /> implementation that is used for the provided type.</summary>
        <returns>The matching <see cref="T:System.Windows.WeakEventManager" /> implementation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> 전달 된를 사용 하 여이 메서드를 호출 하는 구현 `managerType`합니다. 반환 된 <xref:System.Windows.WeakEventManager> 개인 클래스 처리기를 호출 하 고 수신한 이벤트를 결정 하는 구분자로 사용 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="protected object this[object source] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Protected Property Item(source As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ source); void set(System::Object ^ source, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Windows.WeakEventManager.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">The zero-based index of the requested source.</param>
        <summary>Gets or sets the data being stored for the specified source.</summary>
        <value>이 원본에 대 한 관리자에 의해 저장 되는 데이터입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 파생된 클래스는 데이터 및이 인덱서에 저장 하는 형식을 선택할 수 있습니다. 일반적으로이 구현으로 <xref:System.Windows.WeakEventManager.ListenerList>, 수신기에 대 한 약한 참조의 목록입니다. 경우이 유형을 변경 해야만 <xref:System.Windows.WeakEventManager.ListenerList> 유형에 필요한 정보를 사용할 수 없습니다. 따라서 재정의 해야 합니다는 경우는 <xref:System.Windows.WeakEventManager.Purge%2A> 메서드 내부 형식의 모든 정리를 올바르게 수행 되도록 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.NewListenerList" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function NewListenerList () As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="abstract member NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList&#xA;override this.NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="weakEventManager.NewListenerList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a new object to contain listeners to an event.</summary>
        <returns>A new object to contain listeners to an event.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedAddHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedAddHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">The source object that the handler delegate subscribes to.</param>
        <param name="handler">The delegate that handles the event that is raised by <c>source</c>.</param>
        <summary>Adds the specified delegate as an event handler of the specified source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddListener">
      <MemberSignature Language="C#" Value="protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedAddListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">The source to attach listeners to.</param>
        <param name="listener">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</param>
        <summary>Adds the provided listener to the provided source for the event being managed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 관리자 클래스 내에서이 메서드를 호출 `AddListener` 에 대 한 메서드 <xref:System.Windows.WeakEventManager> 구현 합니다. `AddListener` 제안 이름 취약 한 이벤트 패턴에 대 한 수신기를 추가 하는 다른 클래스를 사용 하도록 설정 하려면 관리자 클래스에서 정의 된 정적 메서드. `AddListener` 두 개의 매개 변수를 취해야:는 `source` 수신기를 연결 하면 뷰어에서 위치 및 `listener` 인스턴스. 에 대 한 프로그램 `AddListener` 구현, 호출 된 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 메서드는 현재 관리자와 동일한 두 개의 패스 매개 변수를 합니다.  
  
 수신기 목록이 이전에 비어 있으면 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 호출은 <xref:System.Windows.WeakEventManager.StartListening%2A> 메서드 특정 호출는 내부적으로 <xref:System.Windows.WeakEventManager.StartListening%2A> 으로 합니다.  
  
 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 단일 내부에 수신기를 추가 <xref:System.Windows.WeakEventManager.ListenerList> 당 `source`합니다. 관리자 구현에 둘 이상의 목록은 각 이벤트 소스 조합에 대 한 수신기를 유지 관리 하는 경우 사용 하지 마십시오 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>합니다. 대신, 구현을 만들어야 자체 <xref:System.Windows.WeakEventManager.ListenerList> 인스턴스 `AddListener` 적절 한 목록에 수신기를 추가 해야 하며 호출 하 여 이벤트를 해당 수신기 목록에 전달 해야는 <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> 이벤트는 대신<xref:System.Windows.WeakEventManager.DeliverEvent%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedRemoveHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">The source to remove the handler from.</param>
        <param name="handler">The delegate to remove from <c>source</c>.</param>
        <summary>Removes the previously added handler from the specified source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveListener">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedRemoveListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">The source to remove listeners from.</param>
        <param name="listener">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</param>
        <summary>Removes a previously added listener from the provided source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 관리자 클래스 내에서이 메서드를 호출 `RemoveListener` 에 대 한 메서드 <xref:System.Windows.WeakEventManager> 구현 합니다. `RemoveListener` 제안 이름 취약 한 이벤트 패턴에 대 한 수신기를 제거 하는 다른 클래스를 사용 하도록 설정 하려면 관리자 클래스에서 정의 된 정적 메서드. `RemoveListener` 두 개의 매개 변수를 취해야:는 `source` 수신기를 제거 하는 경우 및 `listener` 클래스입니다. 에 대 한 프로그램 `RemoveListener` 구현, 호출 된 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 메서드는 현재 관리자와 동일한 두 개의 패스 매개 변수를 합니다.  
  
 호출 하는 경우 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 목록에서 마지막 수신기가 제거 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 호출은 <xref:System.Windows.WeakEventManager.StopListening%2A> 메서드 특정 호출는 내부적으로 <xref:System.Windows.WeakEventManager.StopListening%2A> 으로 합니다.  
  
 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 단일 내부에서 수신기 제거 <xref:System.Windows.WeakEventManager.ListenerList> 당 `source`합니다. 관리자 구현에 둘 이상의 목록은 각 이벤트 소스 조합에 대 한 수신기를 유지 관리 하는 경우 사용 하지 마십시오 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>합니다. 대신, 구현을 만들어야 자체 <xref:System.Windows.WeakEventManager.ListenerList> 인스턴스 `RemoveListener` 적절 한 목록에서 수신기를 제거 해야 하 고 호출 하 여 이벤트를 해당 수신기 목록에 전달 해야는 <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> 메서드 대신는 <xref:System.Windows.WeakEventManager.DeliverEvent%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="protected virtual bool Purge (object source, object data, bool purgeAll);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool Purge(object source, object data, bool purgeAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Purge (source As Object, data As Object, purgeAll As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool Purge(System::Object ^ source, System::Object ^ data, bool purgeAll);" />
      <MemberSignature Language="F#" Value="abstract member Purge : obj * obj * bool -&gt; bool&#xA;override this.Purge : obj * obj * bool -&gt; bool" Usage="weakEventManager.Purge (source, data, purgeAll)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="purgeAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">The source for events being listened to.</param>
        <param name="data">The data to check. This object is expected to be a <see cref="T:System.Windows.WeakEventManager.ListenerList" /> implementation.</param>
        <param name="purgeAll">
          <see langword="true" /> to stop listening to <c>source</c>, and completely remove all entries from <c>data</c>.</param>
        <summary>Removes inactive listener entries from the data list for the provided source. Returns <see langword="true" /> if some entries were actually removed from the list.</summary>
        <returns>
          <see langword="true" /> if some entries were actually removed; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.WeakEventManager.Purge%2A> 메서드에 데이터가 경우 모든 엔트리를 제거 하는 기본 구현이 <xref:System.Windows.WeakEventManager.ListenerList>합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>에 대 한 입력은 기본는 <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> 이외의 리 <see cref="T:System.Windows.WeakEventManager.ListenerList" />, 하거나 초과 하 여 데이터를 포함 한 <see cref="T:System.Windows.WeakEventManager.ListenerList" />, 재정의 해야 합니다는 <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> 메서드. 대체 형식 항목 목록에 대 한 재정의 제거 동작을 제공 해야 합니다. 일반적으로 재정의 기본 구현을 호출 하지 않고 동작을 제공 해야 합니다. 특정 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 정리를 호출 해야 할 필요가 <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />합니다.</para>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="ReadLock">
      <MemberSignature Language="C#" Value="protected IDisposable ReadLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable ReadLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ReadLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ReadLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ ReadLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadLock : IDisposable" Usage="System.Windows.WeakEventManager.ReadLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Establishes a read-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</summary>
        <value>데이터 테이블 멤버에 대 한 잠금을 설정한 다음 적절 하 게 삭제할으로 사용할 수 있는 개체는 <see langword="using" /> 생성 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 파생된 클래스에서 쿼리를 수행할 수에 포함 된 테이블 <xref:System.Windows.WeakEventManager.Item%2A> 내에서 항상 수행 되도록는 `using (ReadLock) { ... }` 이미 쓰기 잠금을 내에 있는 쿼리를 제외한 절. 이러한 쿼리는 보다 복잡 한 클래스에서 지 원하는 경우 할 수도 있습니다 `AddListener` 구현 외의 다른 데이터를 필요로 하는 `source` 및 `listener`를 사용 하 여는 <xref:System.Windows.WeakEventManager.Item%2A> 추가 정보를 저장 하는 컬렉션입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.WriteLock" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="protected void Remove (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Remove(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub Remove (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void Remove(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="member this.Remove : obj -&gt; unit" Usage="weakEventManager.Remove source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">The source to remove listener information for.</param>
        <summary>Removes all listeners for the specified source.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCleanup">
      <MemberSignature Language="C#" Value="protected void ScheduleCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ScheduleCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ScheduleCleanup" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ScheduleCleanup ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ScheduleCleanup();" />
      <MemberSignature Language="F#" Value="member this.ScheduleCleanup : unit -&gt; unit" Usage="weakEventManager.ScheduleCleanup " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출의 <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> 호출 하는 것과 비슷합니다는 <xref:System.Windows.WeakEventManager.Purge%2A> 스레드 우선 순위를 낮게에 현재 관리자 목록에 메서드와는 `purgeAll` 매개 변수 설정 `false`합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentManager">
      <MemberSignature Language="C#" Value="protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void SetCurrentManager(class System.Type managerType, class System.Windows.WeakEventManager manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub SetCurrentManager (managerType As Type, manager As WeakEventManager)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void SetCurrentManager(Type ^ managerType, System::Windows::WeakEventManager ^ manager);" />
      <MemberSignature Language="F#" Value="static member SetCurrentManager : Type * System.Windows.WeakEventManager -&gt; unit" Usage="System.Windows.WeakEventManager.SetCurrentManager (managerType, manager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="manager" Type="System.Windows.WeakEventManager" />
      </Parameters>
      <Docs>
        <param name="managerType">The type to set the new event manager.</param>
        <param name="manager">The new event manager.</param>
        <summary>Sets the current manager for the specified manager type.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출의 <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> 경우 해당 관리자를 초기화 하는 메서드를 호출 하 여 필요한 사용자 `CurrentManager` 속성에는 <xref:System.Windows.WeakEventManager> 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected abstract void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StartListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StartListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StartListening : obj -&gt; unit" Usage="weakEventManager.StartListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">The source to begin listening on.</param>
        <summary>When overridden in a derived class, starts listening for the event being managed. After the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method is first called, the manager should be in the state of calling <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> or <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> whenever the relevant event from the provided source is handled.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> 재정의를 제공 된 처리기가 추가 되어야 <paramref name="source" />합니다. 처리기가 관리자 자체에서 선언 됩니다. 클래스 처리기 공개 되지 않아야 하 고 관리 되는 이벤트에 대 한 응답에서에 호출 해야 합니다. 클래스 처리기를 호출 해야는 <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> 메서드 또는 <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> 메서드 적절 하 게 합니다.</para>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected abstract void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StopListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StopListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StopListening : obj -&gt; unit" Usage="weakEventManager.StopListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">The source to stop listening on.</param>
        <summary>When overridden in a derived class, stops listening on the provided source for the event being managed.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> 구현을 추가 하 여 클래스 처리기를 제거 해야는 <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> 메서드. 수신기를 제거 해도 수신기 목록 선택을 취소 하지 됩니다. 대신, 클래스 처리기 (일시적으로)만 분리 해야 합니다. 다른 메서드를 같은 전체 목록을 지우는 데 사용할 수는 <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> 메서드는 <paramref name="purgeAll" /> 매개 변수 설정 <see langword="true" />합니다.</para>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLock">
      <MemberSignature Language="C#" Value="protected IDisposable WriteLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable WriteLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.WriteLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property WriteLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ WriteLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WriteLock : IDisposable" Usage="System.Windows.WeakEventManager.WriteLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Establishes a write-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</summary>
        <value>데이터 테이블 멤버에 대 한 잠금을 설정한 다음 적절 하 게 삭제할으로 사용할 수 있는 개체는 <see langword="using" /> 생성 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 파생된 클래스에서 기본 데이터 테이블의 모든 수정 사항을 내에서 발생 해야는 `using (WriteLock) { ... }` 절. 이러한 수정 프로그램 클래스는 보다 복잡 한 지원 작업이 필요할 수 있습니다 `AddListener` 구현 외의 다른 데이터를 필요로 하는 `source` 및 `listener`를 사용 하 여는 <xref:System.Windows.WeakEventManager.Item%2A> 추가 정보를 저장 하는 컬렉션입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.ReadLock" />
      </Docs>
    </Member>
  </Members>
</Type>