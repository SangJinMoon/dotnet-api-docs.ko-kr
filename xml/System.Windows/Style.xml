<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Style.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56eb533f7ae505f7ec3b4a36d8cb5fc407111f309.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6eb533f7ae505f7ec3b4a36d8cb5fc407111f309</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Style">
          <source>Enables the sharing of properties, resources, and event handlers between instances of a type.</source>
          <target state="translated">형식 인스턴스 간에 속성, 리소스 및 이벤트 처리기를 공유할 수 있게 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>You can set a <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> on any element that derives from <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>.</source>
          <target state="translated">설정할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> 에서 파생 된 모든 요소에 <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>A style is most commonly declared as a resource inside the <ph id="ph1">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph> section.</source>
          <target state="translated">내에 리소스로 스타일 선언 가장 일반적으로 <ph id="ph1">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph> 섹션.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>Because styles are resources, they obey the same scoping rules that apply to all resources, so where you declare a style affects where it can be applied.</source>
          <target state="translated">모든 리소스에 적용 되는 동일한 범위 지정 규칙을 따르며 스타일 리소스 이기 때문에 적용할 수 있는 위치에 영향을 줍니다. 스타일 선언 하 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>If, for instance, you declare the style in the root element of your application definition <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> file, the style can be used anywhere in your application.</source>
          <target state="translated">예를 들어, 응용 프로그램 정의의 루트 요소에 스타일 선언 하는 경우 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 파일을 응용 프로그램에서 아무 곳 이나 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>If you are creating a navigation application and declare the style in one of the application's <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> files, the style can be used only in that <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> file.</source>
          <target state="translated">탐색 응용 프로그램을 만드는 경우에 응용 프로그램의 중 하나에 선언 된 스타일 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 하에 사용할 수 파일 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 파일입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>For more information on scoping rules for resources, see <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>.</source>
          <target state="translated">범위 지정 리소스에 대 한 규칙에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>XAML 리소스<ept id="p1">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>The style declaration consists of a <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> object that contains a collection of one or more <ph id="ph2">&lt;xref:System.Windows.Setter&gt;</ph> objects.</source>
          <target state="translated">Style 선언의 이루어져는 <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> 하나 이상의 컬렉션을 포함 하는 개체 <ph id="ph2">&lt;xref:System.Windows.Setter&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>Each <ph id="ph1">&lt;xref:System.Windows.Setter&gt;</ph> consists of a <ph id="ph2">&lt;xref:System.Windows.Setter.Property%2A&gt;</ph> and a <ph id="ph3">&lt;xref:System.Windows.Setter.Value%2A&gt;</ph>.</source>
          <target state="translated">각 <ph id="ph1">&lt;xref:System.Windows.Setter&gt;</ph> 이루어져는 <ph id="ph2">&lt;xref:System.Windows.Setter.Property%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Setter.Value%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>The property is the name of the property of the element the style is to apply to.</source>
          <target state="translated">속성이 요소의 스타일 속성의 이름에 적용 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>After the style is declared as a resource, it can then be referenced just like any other resource.</source>
          <target state="translated">스타일 리소스로 선언한 후에 다른 리소스와 마찬가지로 다음 참조할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>If there is more than one setter in the setter collection with the same <ph id="ph1">&lt;xref:System.Windows.Setter.Property%2A&gt;</ph> property value, the setter that is declared last is used.</source>
          <target state="translated">가 동일한 setter 컬렉션에 둘 이상의 setter 경우 <ph id="ph1">&lt;xref:System.Windows.Setter.Property%2A&gt;</ph> 마지막 선언 된 setter를 속성 값을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>Similarly, if you set a value for the same property in a style and on an element directly, the value set on the element directly takes precedence.</source>
          <target state="translated">마찬가지로,로 설정 하면 동일한 속성에 대 한 값 및 요소 스타일에서 직접 요소에 직접 설정 값 우선 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> styling and templating model allows maintenance and sharing of a look as well as the separation of presentation and logic.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 스타일 및 템플릿 모델 유지 관리 및 확인 표시와 논리 분리의 공유를 허용 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>The styling and templating model includes a suite of features that enable you to customize your <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>.</source>
          <target state="translated">스타일 및 템플릿 모델을 사용자 지정할 수 있도록 기능 집합이 포함 되어 프로그램 <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>This suite of features includes the <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> class as well as the following:</source>
          <target state="translated">이 기능 집합이 포함 된 <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> 뿐만 아니라 다음 클래스:</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source><ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>For more information, see <bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](~/docs/framework/wpf/controls/styling-and-templating.md)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>스타일 지정 및 템플릿<ept id="p1">](~/docs/framework/wpf/controls/styling-and-templating.md)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>The following example shows a style declaration that will affect the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 영향을 주는 스타일 선언은 <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> 속성은 <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>To apply the above style, do the following:</source>
          <target state="translated">위의 스타일을 적용 하려면 다음을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>You can also apply styles to all elements of a given type by using the <ph id="ph1">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph> property.</source>
          <target state="translated">사용 하 여 스타일 지정 된 형식의 모든 요소에도 적용할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>Adding the target type to the style means that you no longer have to fully qualify the property you are setting with the <ph id="ph1">`ClassName.PropertyName`</ph> syntax.</source>
          <target state="translated">대상 유형을 스타일에 추가 의미 더 이상으로 설정 하는 속성을 정규화 해야는 <ph id="ph1">`ClassName.PropertyName`</ph> 구문입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>The following example defines a style that will be applied to every <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> element.</source>
          <target state="translated">다음 예제에서는 적용 되는 모든에 스타일을 정의 <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>Many <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> controls consist of a combination of other <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> controls, so creating a style that applies to all controls of a type can have broad impact.</source>
          <target state="translated">많은 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 컨트롤의 다른 조합으로 구성 <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 컨트롤, 형식의 모든 컨트롤에 적용 되는 스타일을 만드는 광범위 한 영향을 줄 수 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>For instance, if you create a style that targets the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> controls in a <ph id="ph2">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>, the style is applied to all <ph id="ph3">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> controls in the canvas, even if the <ph id="ph4">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> is part of another control, such as a <ph id="ph5">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>.</source>
          <target state="translated">예를 들어, 대상으로 하는 스타일을 만드는 경우는 <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> 컨트롤에 <ph id="ph2">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>, 모든 스타일 적용 됩니다 <ph id="ph3">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> 캔버스에서 컨트롤 경우에는 <ph id="ph4">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> 과 같은 다른 컨트롤의 일부를는 <ph id="ph5">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Style">
          <source>For information on how to extend or inherit from a defined style, see the <ph id="ph1">&lt;xref:System.Windows.Style.BasedOn%2A&gt;</ph> page.</source>
          <target state="translated">확장 하거나 정의 된 스타일을 상속 하는 방법에 대 한 자세한 내용은 참조는 <ph id="ph1">&lt;xref:System.Windows.Style.BasedOn%2A&gt;</ph> 페이지.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="T:System.Windows.Style">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Style" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Style" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Style" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Style" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Style.#ctor">
          <source>This constructor call requires delayed validation of <ph id="ph1">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Style.BasedOn%2A&gt;</ph> style type.</source>
          <target state="translated">이 생성자를 호출의 지연 된 유효성 검사를 요구 <ph id="ph1">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Style.BasedOn%2A&gt;</ph> 스타일 형식입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Style.#ctor">
          <source>If this is used outside the context of the parser, behavior is undefined.</source>
          <target state="translated">파서가의 컨텍스트 외부에서 사용 하는이 경우 동작이 정의 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.#ctor(System.Type)">
          <source>The type to which the style will apply.</source>
          <target state="translated">스타일을 적용할 형식입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.#ctor(System.Type)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Style" /&gt;</ph> class to use on the specified <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Style" /&gt;</ph>에 사용할 <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.#ctor(System.Type,System.Windows.Style)">
          <source>The type to which the style will apply.</source>
          <target state="translated">스타일을 적용할 형식입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.#ctor(System.Type,System.Windows.Style)">
          <source>The style to base this style on.</source>
          <target state="translated">이 스타일의 기반이 되는 스타일입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.#ctor(System.Type,System.Windows.Style)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Style" /&gt;</ph> class to use on the specified <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> and based on the specified <ph id="ph3">&lt;see cref="T:System.Windows.Style" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Style" /&gt;</ph>을 기반으로, 그리고 지정된 <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph>에 대해 사용할 <ph id="ph3">&lt;see cref="T:System.Windows.Style" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="P:System.Windows.Style.BasedOn">
          <source>Gets or sets a defined style that is the basis of the current style.</source>
          <target state="translated">현재 스타일의 기준이 되는 정의된 스타일을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.BasedOn">
          <source>A defined style that is the basis of the current style.</source>
          <target state="translated">현재 스타일의 기준이 되는 정의된 스타일입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.BasedOn">
          <source>The default value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.BasedOn">
          <source>Each style only supports one <ph id="ph1">&lt;xref:System.Windows.Style.BasedOn%2A&gt;</ph> value.</source>
          <target state="translated">각 스타일 하나만 지원 <ph id="ph1">&lt;xref:System.Windows.Style.BasedOn%2A&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.BasedOn">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 특성 사용</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.BasedOn">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.BasedOn">
          <source><bpt id="p1">*</bpt>myStyle<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>myStyle<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.BasedOn">
          <source>An existing style.</source>
          <target state="translated">기존 스타일입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.BasedOn">
          <source>Typically, you use the <bpt id="p1">[</bpt>Markup Extensions and WPF XAML<ept id="p1">](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)</ept> to refer to an existing style.</source>
          <target state="translated">일반적으로 사용는 <bpt id="p1">[</bpt>태그 확장명 및 WPF XAML<ept id="p1">](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)</ept> 기존 스타일으로 참조 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.BasedOn">
          <source>There are several ways that styles in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> can be extended or inherited.</source>
          <target state="translated">스타일을 여러 가지 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 확장 또는 상속할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.BasedOn">
          <source>Styles can be based on other styles through this property.</source>
          <target state="translated">이 속성을 통해 다른 스타일의 스타일을 따라 수 있습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.BasedOn">
          <source>When you use this property, the new style will inherit the values of the original style that are not explicitly redefined in the new style.</source>
          <target state="translated">이 속성을 사용 하면 새 스타일 새 스타일에서 명시적으로 다시 정의 되지 않은 원래 스타일의 값을 상속 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.BasedOn">
          <source>In the following example, <ph id="ph1">`Style2`</ph> inherits the <ph id="ph2">&lt;xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType&gt;</ph> value of <ph id="ph3">`Yellow`</ph>, and adds a <ph id="ph4">&lt;xref:System.Windows.Controls.Control.Foreground%2A?displayProperty=nameWithType&gt;</ph> value of <ph id="ph5">`Blue`</ph>.</source>
          <target state="translated">다음 예에서 <ph id="ph1">`Style2`</ph> 상속는 <ph id="ph2">&lt;xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType&gt;</ph> 값 <ph id="ph3">`Yellow`</ph>, 추가 <ph id="ph4">&lt;xref:System.Windows.Controls.Control.Foreground%2A?displayProperty=nameWithType&gt;</ph> 값 <ph id="ph5">`Blue`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.BasedOn">
          <source>Similarly, styles can be based on the style of an existing <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> element, as in the following example where the new style is based on the style of a <ph id="ph2">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> element.</source>
          <target state="translated">마찬가지로, 스타일 기반으로 할 수 있는 기존의 스타일 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 새 스타일의 스타일은 기반 다음 예제와 같이 요소는 <ph id="ph2">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.BasedOn">
          <source>If you create a style with a <ph id="ph1">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph> property and base it on another style that also defines a <ph id="ph2">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph> property, the target type of the derived style must be the same as or be derived from the type of the base style.</source>
          <target state="translated">사용 하 여 스타일을 만드는 경우는 <ph id="ph1">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph> 속성 및 기본 스타일을 다른 것도 정의 <ph id="ph2">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph> 속성 파생된 스타일의 대상 형식이 동일 해야 또는 기본 스타일의 형식에서 파생 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.BasedOn">
          <source>Styles defined for specific types can also be based on other styles, as in the following example.</source>
          <target state="translated">특정 형식에 대해 정의 된 스타일 또한 다음 예제와 같이 다른 스타일을에 기반 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.GetHashCode">
          <source>Returns the hash code for this <ph id="ph1">&lt;see cref="T:System.Windows.Style" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Windows.Style" /&gt;</ph>의 해시 코드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.GetHashCode">
          <source>The hash code for this <ph id="ph1">&lt;see cref="T:System.Windows.Style" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Windows.Style" /&gt;</ph>에 대한 해시 코드입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="P:System.Windows.Style.IsSealed">
          <source>Gets a value that indicates whether the style is read-only and cannot be changed.</source>
          <target state="translated">이 스타일이 읽기 전용이고 변경될 수 없는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.IsSealed">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the style is sealed; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">스타일이 봉인되어 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.IsSealed">
          <source>A style is sealed when another style is based on it or when it is applied for the first time.</source>
          <target state="translated">처음으로 적용 될 때 또는 다른 스타일 기반으로 할 때 스타일 봉인 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.RegisterName(System.String,System.Object)">
          <source>The name to register.</source>
          <target state="translated">등록할 이름입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.RegisterName(System.String,System.Object)">
          <source>The object to map to the specified <bpt id="p1">&lt;c&gt;</bpt>name<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">지정된 <bpt id="p1">&lt;c&gt;</bpt>이름<ept id="p1">&lt;/c&gt;</ept>에 매핑할 개체입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.RegisterName(System.String,System.Object)">
          <source>Registers a new name-object pair in the current namescope.</source>
          <target state="translated">현재 이름 범위에 새 이름-개체 쌍을 등록합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="P:System.Windows.Style.Resources">
          <source>Gets or sets the collection of resources that can be used within the scope of this style.</source>
          <target state="translated">이 스타일의 범위 내에서 사용할 수 있는 리소스의 컬렉션을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Resources">
          <source>The resources that can be used within the scope of this style.</source>
          <target state="translated">이 스타일의 범위 내에서 사용할 수 있는 리소스입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Resources">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML 속성 요소 사용</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Resources">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Resources">
          <source><bpt id="p1">*</bpt>oneOrMoreResourceElements<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>oneOrMoreResourceElements<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Resources">
          <source>One or more resource elements.</source>
          <target state="translated">하나 이상의 리소스 요소가 있습니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Resources">
          <source>To be referenced later in either <bpt id="p1">[</bpt>StaticResource Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/staticresource-markup-extension.md)</ept> or <bpt id="p2">[</bpt>DynamicResource Markup Extension<ept id="p2">](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)</ept> syntax in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, a resource element must have an <ph id="ph2">`x:Key`</ph> attribute.</source>
          <target state="translated">나중에 참조할 수 <bpt id="p1">[</bpt>StaticResource 태그 확장<ept id="p1">](~/docs/framework/wpf/advanced/staticresource-markup-extension.md)</ept> 또는 <bpt id="p2">[</bpt>DynamicResource 태그 확장<ept id="p2">](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)</ept> 구문을 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, 리소스 요소가 있어야는 <ph id="ph2">`x:Key`</ph> 특성입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Resources">
          <source><ph id="ph1">\&lt;</ph>ResourceDictionary Source=" <bpt id="p1">*</bpt>externalDictionarySource<ept id="p1">*</ept>"/&gt;</source>
          <target state="translated"><ph id="ph1">\&lt;</ph>ResourceDictionary Source=" <bpt id="p1">*</bpt>externalDictionarySource<ept id="p1">*</ept>"/&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Resources">
          <source>An external dictionary source.</source>
          <target state="translated">외부 사전 원본입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Resources">
          <source>For details, see <bpt id="p1">[</bpt>Merged Resource Dictionaries<ept id="p1">](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>자세한<ept id="p1">](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.Seal">
          <source>Locks this style and all factories and triggers so they cannot be changed.</source>
          <target state="translated">이 스타일과 모든 팩터리 및 트리거를 변경할 수 없도록 잠급니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="P:System.Windows.Style.Setters">
          <source>Gets a collection of <ph id="ph1">&lt;see cref="T:System.Windows.Setter" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Windows.EventSetter" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Setter" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Windows.EventSetter" /&gt;</ph> 개체의 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Setters">
          <source>A collection of <ph id="ph1">&lt;see cref="T:System.Windows.Setter" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Windows.EventSetter" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Setter" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Windows.EventSetter" /&gt;</ph> 개체의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Setters">
          <source>The default is an empty collection.</source>
          <target state="translated">기본값은 빈 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Setters">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Style.Setters%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph> object can consist only of objects assignable to <ph id="ph3">&lt;xref:System.Windows.SetterBase&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Style.Setters%2A&gt;</ph> 속성은 <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph> 개체에 할당할 수 있는 개체로 구성 될 수 <ph id="ph3">&lt;xref:System.Windows.SetterBase&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Setters">
          <source>Adding a <ph id="ph1">&lt;xref:System.Windows.SetterBase&gt;</ph> child to a <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph> object implicitly adds it to the <ph id="ph3">&lt;xref:System.Windows.SetterBaseCollection&gt;</ph> for the <ph id="ph4">&lt;xref:System.Windows.Style&gt;</ph> object.</source>
          <target state="translated">추가 <ph id="ph1">&lt;xref:System.Windows.SetterBase&gt;</ph> 자식은 <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph> 개체가 암시적으로 추가 <ph id="ph3">&lt;xref:System.Windows.SetterBaseCollection&gt;</ph> 에 대 한는 <ph id="ph4">&lt;xref:System.Windows.Style&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Setters">
          <source>An explicit property element usage  for <ph id="ph1">&lt;xref:System.Windows.Style.Setters%2A&gt;</ph> is also relatively common.</source>
          <target state="translated">가 명시적 속성 요소 사용에 대 한 <ph id="ph1">&lt;xref:System.Windows.Style.Setters%2A&gt;</ph> 상대적으로 일반적인 이기도 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Setters">
          <source>This is a markup style decision that can sometimes help distinguish <ph id="ph1">&lt;xref:System.Windows.Style.Setters%2A&gt;</ph> from <ph id="ph2">&lt;xref:System.Windows.Style.Resources%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Style.Triggers%2A&gt;</ph> items in a complex style.</source>
          <target state="translated">이것은 경우에 따라 구분할 수 있는 태그 스타일 결정 <ph id="ph1">&lt;xref:System.Windows.Style.Setters%2A&gt;</ph> 에서 <ph id="ph2">&lt;xref:System.Windows.Style.Resources%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Style.Triggers%2A&gt;</ph> 복잡 한 스타일의 항목입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Setters">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Setters">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML 속성 요소 사용</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Setters">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Setters">
          <source><bpt id="p1">*</bpt>oneOrMoreSetters<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>oneOrMoreSetters<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Setters">
          <source>One or more <ph id="ph1">&lt;xref:System.Windows.Setter&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.EventSetter&gt;</ph> objects.</source>
          <target state="translated">하나 이상의 <ph id="ph1">&lt;xref:System.Windows.Setter&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.EventSetter&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Setters">
          <source>The following example shows how to use this property.</source>
          <target state="translated">다음 예제에서는이 속성을 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Setters">
          <source>Adding a <ph id="ph1">&lt;xref:System.Windows.SetterBase&gt;</ph> child to a <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph> object implicitly adds it to the <ph id="ph3">&lt;xref:System.Windows.SetterBaseCollection&gt;</ph> for the <ph id="ph4">&lt;xref:System.Windows.Style&gt;</ph> object.</source>
          <target state="translated">추가 <ph id="ph1">&lt;xref:System.Windows.SetterBase&gt;</ph> 자식은 <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph> 개체가 암시적으로 추가 <ph id="ph3">&lt;xref:System.Windows.SetterBaseCollection&gt;</ph> 에 대 한는 <ph id="ph4">&lt;xref:System.Windows.Style&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Setters">
          <source>The following <ph id="ph1">&lt;xref:System.Windows.EventSetter&gt;</ph> is implicitly added to the <ph id="ph2">&lt;xref:System.Windows.SetterBaseCollection&gt;</ph> of the style:</source>
          <target state="translated">다음 <ph id="ph1">&lt;xref:System.Windows.EventSetter&gt;</ph> 에 암시적으로 추가 되 고 <ph id="ph2">&lt;xref:System.Windows.SetterBaseCollection&gt;</ph> 스타일의:</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.System#Windows#Markup#IAddChild#AddChild(System.Object)">
          <source>The child object to add.</source>
          <target state="translated">추가할 자식 개체입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.System#Windows#Markup#IAddChild#AddChild(System.Object)">
          <source>Adds a child object.</source>
          <target state="translated">자식 개체를 추가합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Style.System#Windows#Markup#IAddChild#AddChild(System.Object)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Style.System#Windows#Markup#IAddChild#AddChild(System.Object)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Markup.IAddChild&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Windows.Markup.IAddChild&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.System#Windows#Markup#IAddChild#AddText(System.String)">
          <source>The text to add to the object.</source>
          <target state="translated">개체에 추가할 텍스트입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.System#Windows#Markup#IAddChild#AddText(System.String)">
          <source>Adds the text content of a node to the object.</source>
          <target state="translated">노드의 텍스트 콘텐츠를 개체에 추가합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Style.System#Windows#Markup#IAddChild#AddText(System.String)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Style.System#Windows#Markup#IAddChild#AddText(System.String)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Markup.IAddChild&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Windows.Markup.IAddChild&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.System#Windows#Markup#INameScope#FindName(System.String)">
          <source>The name identifier for the object being requested.</source>
          <target state="translated">요청되는 개체의 이름 식별자입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.System#Windows#Markup#INameScope#FindName(System.String)">
          <source>Returns an object that has the provided identifying name.</source>
          <target state="translated">지정된 식별 이름이 있는 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.System#Windows#Markup#INameScope#FindName(System.String)">
          <source>The object, if found.</source>
          <target state="translated">찾을 수 있는 경우 개체입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.System#Windows#Markup#INameScope#FindName(System.String)">
          <source>Returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no object of that name was found.</source>
          <target state="translated">해당 이름의 개체가 없으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Style.System#Windows#Markup#INameScope#FindName(System.String)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Style.System#Windows#Markup#INameScope#FindName(System.String)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Markup.INameScope&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Windows.Markup.INameScope&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)">
          <source>The name of the requested ambient property.</source>
          <target state="translated">요청된 앰비언트 속성의 이름입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)">
          <source>Queries whether a specified ambient property is available in the current scope.</source>
          <target state="translated">지정된 앰비언트 속성을 현재 범위에서 사용할 수 있는지 여부를 쿼리합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the requested ambient property is available; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">요청된 앰비언트 속성을 사용할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="P:System.Windows.Style.TargetType">
          <source>Gets or sets the type for which this style is intended.</source>
          <target state="translated">이 스타일을 적용할 형식을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.TargetType">
          <source>The target type for this style.</source>
          <target state="translated">이 스타일의 대상 형식입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.TargetType">
          <source>You can set a style on any element that derives from <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>.</source>
          <target state="translated">파생 된 모든 요소에 스타일을 설정할 수 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.TargetType">
          <source>Therefore, your target type can be any of those elements.</source>
          <target state="translated">따라서 대상 유형이 이러한 모든 요소를 수 있습니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.TargetType">
          <source>However, if you create a style with a <ph id="ph1">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph> property and base it on another style that also defines a <ph id="ph2">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph> property, the target type of the derived style must be the same as or be derived from the target type of the base style.</source>
          <target state="translated">그러나와 스타일을 만드는 경우는 <ph id="ph1">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph> 속성 및 기본 스타일을 다른 것도 정의 <ph id="ph2">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph> 속성 파생된 스타일의 대상 형식이 동일 해야 또는 기본 스타일의 대상 형식에서 파생 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.TargetType">
          <source>If you do not specify a <ph id="ph1">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph>, then you must specify an <ph id="ph2">`x:Key`</ph> for your <ph id="ph3">&lt;xref:System.Windows.Style&gt;</ph> and also qualify the properties in your style with a class name.</source>
          <target state="translated">지정 하지 않는 경우는 <ph id="ph1">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph>를 지정 해야 합니다는 <ph id="ph2">`x:Key`</ph> 에 대 한 프로그램 <ph id="ph3">&lt;xref:System.Windows.Style&gt;</ph> 및 클래스 이름으로 스타일의 속성을 정규화 해야 합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.TargetType">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 특성 사용</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.TargetType">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.TargetType">
          <source>An <bpt id="p1">[</bpt>x:Type Markup Extension<ept id="p1">](~/docs/framework/xaml-services/x-type-markup-extension.md)</ept> markup extension usage.</source>
          <target state="translated"><bpt id="p1">[</bpt>X:type 태그 확장<ept id="p1">](~/docs/framework/xaml-services/x-type-markup-extension.md)</ept> 태그 확장 사용 합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.TargetType">
          <source><bpt id="p1">*</bpt>typeName<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>typeName<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.TargetType">
          <source>The type name of the class.</source>
          <target state="translated">클래스의 형식 이름입니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.TargetType">
          <source>The following example defines a style that will be applied to all instances of the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> element.</source>
          <target state="translated">다음 예제에서는 정의의 모든 인스턴스에 적용 될 스타일은 <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.TargetType">
          <source>Setting the <ph id="ph1">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph> property to the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> type without setting an <ph id="ph3">`x:Key`</ph> implicitly sets the <ph id="ph4">`x:Key`</ph> to <ph id="ph5">`{x:Type TextBlock}`</ph>.</source>
          <target state="translated">설정의 <ph id="ph1">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph> 속성을는 <ph id="ph2">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> 유형을 설정 하지 않고는 <ph id="ph3">`x:Key`</ph> 암시적으로 설정는 <ph id="ph4">`x:Key`</ph> 를 <ph id="ph5">`{x:Type TextBlock}`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.TargetType">
          <source>This also means that if you give the above <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> an <ph id="ph2">`x:Key`</ph> value of anything other than <ph id="ph3">`{x:Type TextBlock}`</ph>, the <ph id="ph4">&lt;xref:System.Windows.Style&gt;</ph> would not be applied to all <ph id="ph5">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> elements automatically.</source>
          <target state="translated">또한 즉 위의 제공 하는 경우 <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> 는 <ph id="ph2">`x:Key`</ph> 아닌 값 <ph id="ph3">`{x:Type TextBlock}`</ph>, <ph id="ph4">&lt;xref:System.Windows.Style&gt;</ph> 모든에 적용할 수는 <ph id="ph5">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> 요소 자동으로 합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.TargetType">
          <source>Instead, you need to apply the style to the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> elements explicitly.</source>
          <target state="translated">스타일을 적용 해야 하는 대신,는 <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> 요소 명시적으로 합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.TargetType">
          <source>Many <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> controls consist of a combination of other <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> controls, so creating a style that applies to all controls of a type can have broad impact.</source>
          <target state="translated">많은 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 컨트롤의 다른 조합으로 구성 <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 컨트롤, 형식의 모든 컨트롤에 적용 되는 스타일을 만드는 광범위 한 영향을 줄 수 있습니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.TargetType">
          <source>For instance, if you create a style that targets the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> controls in a <ph id="ph2">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>, the style is applied to all <ph id="ph3">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> controls in the canvas, even if the <ph id="ph4">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> is part of another control, such as a <ph id="ph5">&lt;xref:System.Windows.Controls.ComboBox&gt;</ph>.</source>
          <target state="translated">예를 들어, 대상으로 하는 스타일을 만드는 경우는 <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> 컨트롤에 <ph id="ph2">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>, 모든 스타일 적용 됩니다 <ph id="ph3">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> 캔버스에서 컨트롤 경우에는 <ph id="ph4">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> 과 같은 다른 컨트롤의 일부를는 <ph id="ph5">&lt;xref:System.Windows.Controls.ComboBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="P:System.Windows.Style.Triggers">
          <source>Gets a collection of <ph id="ph1">&lt;see cref="T:System.Windows.TriggerBase" /&gt;</ph> objects that apply property values based on specified conditions.</source>
          <target state="translated">지정된 조건에 따라 속성 값을 적용하는 <ph id="ph1">&lt;see cref="T:System.Windows.TriggerBase" /&gt;</ph> 개체 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Triggers">
          <source>A collection of <ph id="ph1">&lt;see cref="T:System.Windows.TriggerBase" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.TriggerBase" /&gt;</ph> 개체의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Triggers">
          <source>The default is an empty collection.</source>
          <target state="translated">기본값은 빈 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Triggers">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> styling and templating model enables you to specify triggers within your <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 스타일 및 템플릿 모델을 통해 내에서 트리거를 지정할 수 있습니다 프로그램 <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Triggers">
          <source>Essentially, triggers are objects that enable you to apply changes when certain conditions (such as when a certain property value becomes <ph id="ph1">`true`</ph>, or when an event occurs) are satisfied.</source>
          <target state="translated">트리거의 경우 특정 변경 내용을 적용할 수 있도록 하는 개체는 기본적으로, 조건 (특정는 속성 값이 같은 <ph id="ph1">`true`</ph>, 이벤트가 발생할 때 또는) 만족 합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Triggers">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML 속성 요소 사용</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Triggers">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Triggers">
          <source><bpt id="p1">*</bpt>oneOrMoreTriggers<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>oneOrMoreTriggers<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Triggers">
          <source>Zero or more object elements that are classes deriving from <ph id="ph1">&lt;xref:System.Windows.TriggerBase&gt;</ph>.</source>
          <target state="translated">0 개 이상의 개체 요소에서 파생 된 클래스를 <ph id="ph1">&lt;xref:System.Windows.TriggerBase&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Triggers">
          <source>The following example shows a named <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> available to <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> controls.</source>
          <target state="translated">다음 예제에서는 명명 된 <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> 를 사용할 수 있는 <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> 컨트롤입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Style.Triggers">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> defines a <ph id="ph2">&lt;xref:System.Windows.Trigger&gt;</ph> element that changes the <ph id="ph3">&lt;xref:System.Windows.Controls.Control.Foreground%2A&gt;</ph> property of a button when the <ph id="ph4">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A&gt;</ph> property is <ph id="ph5">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> 정의 <ph id="ph2">&lt;xref:System.Windows.Trigger&gt;</ph> 변경 하는 요소는 <ph id="ph3">&lt;xref:System.Windows.Controls.Control.Foreground%2A&gt;</ph> 단추의 속성 때는 <ph id="ph4">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A&gt;</ph> 속성은 <ph id="ph5">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.UnregisterName(System.String)">
          <source>The name of the mapping to remove.</source>
          <target state="translated">제거할 매핑의 이름입니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Windows.Style.UnregisterName(System.String)">
          <source>Removes a name-object mapping from the namescope.</source>
          <target state="translated">이름 범위에서 이름-개체 매핑을 제거합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>