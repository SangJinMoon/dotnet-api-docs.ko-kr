<Type Name="Style" FullName="System.Windows.Style">
  <TypeSignature Language="C#" Value="public class Style : System.Windows.Threading.DispatcherObject, System.Windows.ISealable, System.Windows.Markup.IAddChild, System.Windows.Markup.INameScope, System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Style extends System.Windows.Threading.DispatcherObject implements class System.Windows.ISealable, class System.Windows.Markup.IAddChild, class System.Windows.Markup.INameScope, class System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Style" />
  <TypeSignature Language="VB.NET" Value="Public Class Style&#xA;Inherits DispatcherObject&#xA;Implements IAddChild, INameScope, IQueryAmbient, ISealable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Style : System::Windows::Threading::DispatcherObject, System::Windows::ISealable, System::Windows::Markup::IAddChild, System::Windows::Markup::INameScope, System::Windows::Markup::IQueryAmbient" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.ISealable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.INameScope</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IQueryAmbient</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Setters")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.DictionaryKeyProperty("TargetType")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ccda2-101">형식 인스턴스 간에 속성, 리소스 및 이벤트 처리기를 공유할 수 있게 합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-101">Enables the sharing of properties, resources, and event handlers between instances of a type.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccda2-102">설정할 수 있습니다는 <xref:System.Windows.Style> 에서 파생 된 모든 요소에 <xref:System.Windows.FrameworkElement> 또는 <xref:System.Windows.FrameworkContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-102">You can set a <xref:System.Windows.Style> on any element that derives from <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>.</span></span> <span data-ttu-id="ccda2-103">내에 리소스로 스타일 선언 가장 일반적으로 <xref:System.Windows.Application.Resources%2A> 섹션.</span><span class="sxs-lookup"><span data-stu-id="ccda2-103">A style is most commonly declared as a resource inside the <xref:System.Windows.Application.Resources%2A> section.</span></span> <span data-ttu-id="ccda2-104">모든 리소스에 적용 되는 동일한 범위 지정 규칙을 따르며 스타일 리소스 이기 때문에 적용할 수 있는 위치에 영향을 줍니다. 스타일 선언 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-104">Because styles are resources, they obey the same scoping rules that apply to all resources, so where you declare a style affects where it can be applied.</span></span> <span data-ttu-id="ccda2-105">예를 들어, 응용 프로그램 정의의 루트 요소에 스타일 선언 하는 경우 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 파일을 응용 프로그램에서 아무 곳 이나 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-105">If, for instance, you declare the style in the root element of your application definition [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] file, the style can be used anywhere in your application.</span></span> <span data-ttu-id="ccda2-106">탐색 응용 프로그램을 만드는 경우에 응용 프로그램의 중 하나에 선언 된 스타일 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 하에 사용할 수 파일 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-106">If you are creating a navigation application and declare the style in one of the application's [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] files, the style can be used only in that [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] file.</span></span> <span data-ttu-id="ccda2-107">범위 지정 리소스에 대 한 규칙에 대 한 자세한 내용은 참조 하십시오. [XAML 리소스](~/docs/framework/wpf/advanced/xaml-resources.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-107">For more information on scoping rules for resources, see [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="ccda2-108">Style 선언의 이루어져는 <xref:System.Windows.Style> 하나 이상의 컬렉션을 포함 하는 개체 <xref:System.Windows.Setter> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-108">The style declaration consists of a <xref:System.Windows.Style> object that contains a collection of one or more <xref:System.Windows.Setter> objects.</span></span> <span data-ttu-id="ccda2-109">각 <xref:System.Windows.Setter> 이루어져는 <xref:System.Windows.Setter.Property%2A> 및 <xref:System.Windows.Setter.Value%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-109">Each <xref:System.Windows.Setter> consists of a <xref:System.Windows.Setter.Property%2A> and a <xref:System.Windows.Setter.Value%2A>.</span></span> <span data-ttu-id="ccda2-110">속성이 요소의 스타일 속성의 이름에 적용 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-110">The property is the name of the property of the element the style is to apply to.</span></span> <span data-ttu-id="ccda2-111">스타일 리소스로 선언한 후에 다른 리소스와 마찬가지로 다음 참조할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-111">After the style is declared as a resource, it can then be referenced just like any other resource.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccda2-112">가 동일한 setter 컬렉션에 둘 이상의 setter 경우 <xref:System.Windows.Setter.Property%2A> 마지막 선언 된 setter를 속성 값을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-112">If there is more than one setter in the setter collection with the same <xref:System.Windows.Setter.Property%2A> property value, the setter that is declared last is used.</span></span> <span data-ttu-id="ccda2-113">마찬가지로,로 설정 하면 동일한 속성에 대 한 값 및 요소 스타일에서 직접 요소에 직접 설정 값 우선 합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-113">Similarly, if you set a value for the same property in a style and on an element directly, the value set on the element directly takes precedence.</span></span>  
  
 <span data-ttu-id="ccda2-114">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 스타일 및 템플릿 모델 유지 관리 및 확인 표시와 논리 분리의 공유를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-114">The [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] styling and templating model allows maintenance and sharing of a look as well as the separation of presentation and logic.</span></span> <span data-ttu-id="ccda2-115">스타일 및 템플릿 모델을 사용자 지정할 수 있도록 기능 집합이 포함 되어 프로그램 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-115">The styling and templating model includes a suite of features that enable you to customize your [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span> <span data-ttu-id="ccda2-116">이 기능 집합이 포함 된 <xref:System.Windows.Style> 뿐만 아니라 다음 클래스:</span><span class="sxs-lookup"><span data-stu-id="ccda2-116">This suite of features includes the <xref:System.Windows.Style> class as well as the following:</span></span>  
  
-   <xref:System.Windows.Trigger>  
  
-   <span data-ttu-id="ccda2-117"><xref:System.Windows.EventTrigger> 및 <xref:System.Windows.Media.Animation.Storyboard></span><span class="sxs-lookup"><span data-stu-id="ccda2-117"><xref:System.Windows.EventTrigger> and <xref:System.Windows.Media.Animation.Storyboard></span></span>  
  
-   <xref:System.Windows.Controls.ControlTemplate>  
  
-   <xref:System.Windows.DataTemplate>  
  
 <span data-ttu-id="ccda2-118">자세한 내용은 [스타일 지정 및 템플릿](~/docs/framework/wpf/controls/styling-and-templating.md)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ccda2-118">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccda2-119">다음 예제에서는 영향을 주는 스타일 선언은 <xref:System.Windows.Controls.Control.Background%2A> 속성은 <xref:System.Windows.Controls.Control>합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-119">The following example shows a style declaration that will affect the <xref:System.Windows.Controls.Control.Background%2A> property of a <xref:System.Windows.Controls.Control>.</span></span>  
  
 [!code-xaml[StyleOvw01#StyleSimple](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#stylesimple)]   
  
 <span data-ttu-id="ccda2-120">위의 스타일을 적용 하려면 다음을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-120">To apply the above style, do the following:</span></span>  
  
 [!code-xaml[StyleOvw01#StyleSimpleApplied](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#stylesimpleapplied)]
  
 <span data-ttu-id="ccda2-121">사용 하 여 스타일 지정 된 형식의 모든 요소에도 적용할 수 있습니다는 <xref:System.Windows.Style.TargetType%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-121">You can also apply styles to all elements of a given type by using the <xref:System.Windows.Style.TargetType%2A> property.</span></span> <span data-ttu-id="ccda2-122">대상 유형을 스타일에 추가 의미 더 이상으로 설정 하는 속성을 정규화 해야는 `ClassName.PropertyName` 구문입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-122">Adding the target type to the style means that you no longer have to fully qualify the property you are setting with the `ClassName.PropertyName` syntax.</span></span> <span data-ttu-id="ccda2-123">다음 예제에서는 적용 되는 모든에 스타일을 정의 <xref:System.Windows.Controls.TextBlock> 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-123">The following example defines a style that will be applied to every <xref:System.Windows.Controls.TextBlock> element.</span></span>  
  
 [!code-xaml[PhotoStoreDemoStyled#1](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#1)]   
  
> [!NOTE]
>  <span data-ttu-id="ccda2-124">많은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 컨트롤의 다른 조합으로 구성 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 컨트롤, 형식의 모든 컨트롤에 적용 되는 스타일을 만드는 광범위 한 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-124">Many [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls consist of a combination of other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls, so creating a style that applies to all controls of a type can have broad impact.</span></span> <span data-ttu-id="ccda2-125">예를 들어, 대상으로 하는 스타일을 만드는 경우는 <xref:System.Windows.Controls.TextBlock> 컨트롤에 <xref:System.Windows.Controls.Canvas>, 모든 스타일 적용 됩니다 <xref:System.Windows.Controls.TextBlock> 캔버스에서 컨트롤 경우에는 <xref:System.Windows.Controls.TextBlock> 과 같은 다른 컨트롤의 일부를는 <xref:System.Windows.Controls.ListBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-125">For instance, if you create a style that targets the <xref:System.Windows.Controls.TextBlock> controls in a <xref:System.Windows.Controls.Canvas>, the style is applied to all <xref:System.Windows.Controls.TextBlock> controls in the canvas, even if the <xref:System.Windows.Controls.TextBlock> is part of another control, such as a <xref:System.Windows.Controls.ListBox>.</span></span>  
  
 <span data-ttu-id="ccda2-126">확장 하거나 정의 된 스타일을 상속 하는 방법에 대 한 자세한 내용은 참조는 <xref:System.Windows.Style.BasedOn%2A> 페이지.</span><span class="sxs-lookup"><span data-stu-id="ccda2-126">For information on how to extend or inherit from a defined style, see the <xref:System.Windows.Style.BasedOn%2A> page.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ccda2-127"><see cref="T:System.Windows.Style" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-127">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Style ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Style();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ccda2-128"><see cref="T:System.Windows.Style" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-128">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccda2-129">이 생성자를 호출의 지연 된 유효성 검사를 요구 <xref:System.Windows.Style.TargetType%2A> 및 <xref:System.Windows.Style.BasedOn%2A> 스타일 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-129">This constructor call requires delayed validation of <xref:System.Windows.Style.TargetType%2A> and <xref:System.Windows.Style.BasedOn%2A> style type.</span></span> <span data-ttu-id="ccda2-130">파서가의 컨텍스트 외부에서 사용 하는이 경우 동작이 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-130">If this is used outside the context of the parser, behavior is undefined.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Style (Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Style(Type ^ targetType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="targetType"><span data-ttu-id="ccda2-131">스타일을 적용할 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-131">The type to which the style will apply.</span></span></param>
        <summary><span data-ttu-id="ccda2-132">지정된 <see cref="T:System.Windows.Style" />에 사용할 <see cref="T:System.Type" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-132">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class to use on the specified <see cref="T:System.Type" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Style (Type targetType, System.Windows.Style basedOn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType, class System.Windows.Style basedOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.#ctor(System.Type,System.Windows.Style)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetType As Type, basedOn As Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Style(Type ^ targetType, System::Windows::Style ^ basedOn);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
        <Parameter Name="basedOn" Type="System.Windows.Style" />
      </Parameters>
      <Docs>
        <param name="targetType"><span data-ttu-id="ccda2-133">스타일을 적용할 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-133">The type to which the style will apply.</span></span></param>
        <param name="basedOn"><span data-ttu-id="ccda2-134">이 스타일의 기반이 되는 스타일입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-134">The style to base this style on.</span></span></param>
        <summary><span data-ttu-id="ccda2-135">지정된 <see cref="T:System.Windows.Style" />을 기반으로, 그리고 지정된 <see cref="T:System.Type" />에 대해 사용할 <see cref="T:System.Windows.Style" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-135">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class to use on the specified <see cref="T:System.Type" /> and based on the specified <see cref="T:System.Windows.Style" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BasedOn">
      <MemberSignature Language="C#" Value="public System.Windows.Style BasedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style BasedOn" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.BasedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property BasedOn As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ BasedOn { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ccda2-136">현재 스타일의 기준이 되는 정의된 스타일을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-136">Gets or sets a defined style that is the basis of the current style.</span></span></summary>
        <value><span data-ttu-id="ccda2-137">현재 스타일의 기준이 되는 정의된 스타일입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-137">A defined style that is the basis of the current style.</span></span> <span data-ttu-id="ccda2-138">기본값은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-138">The default value is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccda2-139">각 스타일 하나만 지원 <xref:System.Windows.Style.BasedOn%2A> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-139">Each style only supports one <xref:System.Windows.Style.BasedOn%2A> value.</span></span>  
  
<a name="xamlAttributeUsage_BasedOn"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="ccda2-140">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="ccda2-140">XAML Attribute Usage</span></span>  
  
```  
<object BasedOn="myStyle" .../>  
```  
  
<a name="xamlValues_BasedOn"></a>   
## <a name="xaml-values"></a><span data-ttu-id="ccda2-141">XAML 값</span><span class="sxs-lookup"><span data-stu-id="ccda2-141">XAML Values</span></span>  
 <span data-ttu-id="ccda2-142">*myStyle*</span><span class="sxs-lookup"><span data-stu-id="ccda2-142">*myStyle*</span></span>  
 <span data-ttu-id="ccda2-143">기존 스타일입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-143">An existing style.</span></span> <span data-ttu-id="ccda2-144">일반적으로 사용는 [태그 확장명 및 WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md) 기존 스타일으로 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-144">Typically, you use the [Markup Extensions and WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md) to refer to an existing style.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccda2-145">스타일을 여러 가지 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 확장 또는 상속할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-145">There are several ways that styles in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] can be extended or inherited.</span></span> <span data-ttu-id="ccda2-146">이 속성을 통해 다른 스타일의 스타일을 따라 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-146">Styles can be based on other styles through this property.</span></span> <span data-ttu-id="ccda2-147">이 속성을 사용 하면 새 스타일 새 스타일에서 명시적으로 다시 정의 되지 않은 원래 스타일의 값을 상속 합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-147">When you use this property, the new style will inherit the values of the original style that are not explicitly redefined in the new style.</span></span> <span data-ttu-id="ccda2-148">다음 예에서 `Style2` 상속는 <xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType> 값 `Yellow`, 추가 <xref:System.Windows.Controls.Control.Foreground%2A?displayProperty=nameWithType> 값 `Blue`합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-148">In the following example, `Style2` inherits the <xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType> value of `Yellow`, and adds a <xref:System.Windows.Controls.Control.Foreground%2A?displayProperty=nameWithType> value of `Blue`.</span></span>  
  
 [!code-xaml[StyleOvw01#ExtendingStyle](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#extendingstyle)]   
  
 <span data-ttu-id="ccda2-149">마찬가지로, 스타일 기반으로 할 수 있는 기존의 스타일 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 새 스타일의 스타일은 기반 다음 예제와 같이 요소는 <xref:System.Windows.Controls.TextBlock> 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-149">Similarly, styles can be based on the style of an existing [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] element, as in the following example where the new style is based on the style of a <xref:System.Windows.Controls.TextBlock> element.</span></span>  
  
 [!code-xaml[PhotoStoreDemoStyled#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#2)]   
  
> [!NOTE]
>  <span data-ttu-id="ccda2-150">사용 하 여 스타일을 만드는 경우는 <xref:System.Windows.Style.TargetType%2A> 속성 및 기본 스타일을 다른 것도 정의 <xref:System.Windows.Style.TargetType%2A> 속성 파생된 스타일의 대상 형식이 동일 해야 또는 기본 스타일의 형식에서 파생 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-150">If you create a style with a <xref:System.Windows.Style.TargetType%2A> property and base it on another style that also defines a <xref:System.Windows.Style.TargetType%2A> property, the target type of the derived style must be the same as or be derived from the type of the base style.</span></span>  
  
 <span data-ttu-id="ccda2-151">특정 형식에 대해 정의 된 스타일 또한 다음 예제와 같이 다른 스타일을에 기반 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-151">Styles defined for specific types can also be based on other styles, as in the following example.</span></span>  
  
 [!code-xaml[StyleOvw01#ExtendingStyleTargetType](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#extendingstyletargettype)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ccda2-152">이 <see cref="T:System.Windows.Style" />의 해시 코드를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-152">Returns the hash code for this <see cref="T:System.Windows.Style" />.</span></span></summary>
        <returns><span data-ttu-id="ccda2-153">이 <see cref="T:System.Windows.Style" />에 대한 해시 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-153">The hash code for this <see cref="T:System.Windows.Style" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ccda2-154">이 스타일이 읽기 전용이고 변경될 수 없는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-154">Gets a value that indicates whether the style is read-only and cannot be changed.</span></span></summary>
        <value>
          <span data-ttu-id="ccda2-155">스타일이 봉인되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-155"><see langword="true" /> if the style is sealed; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccda2-156">처음으로 적용 될 때 또는 다른 스타일 기반으로 할 때 스타일 봉인 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-156">A style is sealed when another style is based on it or when it is applied for the first time.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Style.BasedOn" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ccda2-157">등록할 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-157">The name to register.</span></span></param>
        <param name="scopedElement"><span data-ttu-id="ccda2-158">지정된 <c>이름</c>에 매핑할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-158">The object to map to the specified <c>name</c>.</span></span></param>
        <summary><span data-ttu-id="ccda2-159">현재 이름 범위에 새 이름-개체 쌍을 등록합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-159">Registers a new name-object pair in the current namescope.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Windows.ResourceDictionary Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ResourceDictionary Resources" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.Resources" />
      <MemberSignature Language="VB.NET" Value="Public Property Resources As ResourceDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResourceDictionary ^ Resources { System::Windows::ResourceDictionary ^ get(); void set(System::Windows::ResourceDictionary ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Markup.IHaveResources.Resources</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ResourceDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ccda2-160">이 스타일의 범위 내에서 사용할 수 있는 리소스의 컬렉션을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-160">Gets or sets the collection of resources that can be used within the scope of this style.</span></span></summary>
        <value><span data-ttu-id="ccda2-161">이 스타일의 범위 내에서 사용할 수 있는 리소스입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-161">The resources that can be used within the scope of this style.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Resources"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="ccda2-162">XAML 속성 요소 사용</span><span class="sxs-lookup"><span data-stu-id="ccda2-162">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Resources>  
    oneOrMoreResourceElements  
  </object.Resources>  
</object>  
- or -   
<object>  
  <object.Resources>  
    <ResourceDictionary Source="externalDictionarySource"/>  
  </object.Resources>  
</object>  
```  
  
<a name="xamlValues_Resources"></a>   
## <a name="xaml-values"></a><span data-ttu-id="ccda2-163">XAML 값</span><span class="sxs-lookup"><span data-stu-id="ccda2-163">XAML Values</span></span>  
 <span data-ttu-id="ccda2-164">*oneOrMoreResourceElements*</span><span class="sxs-lookup"><span data-stu-id="ccda2-164">*oneOrMoreResourceElements*</span></span>  
 <span data-ttu-id="ccda2-165">하나 이상의 리소스 요소가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-165">One or more resource elements.</span></span> <span data-ttu-id="ccda2-166">나중에 참조할 수 [StaticResource 태그 확장](~/docs/framework/wpf/advanced/staticresource-markup-extension.md) 또는 [DynamicResource 태그 확장](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) 구문을 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], 리소스 요소가 있어야는 `x:Key` 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-166">To be referenced later in either [StaticResource Markup Extension](~/docs/framework/wpf/advanced/staticresource-markup-extension.md) or [DynamicResource Markup Extension](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) syntax in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], a resource element must have an `x:Key` attribute.</span></span>  
  
 <span data-ttu-id="ccda2-167">\<ResourceDictionary Source=" *externalDictionarySource*"/></span><span class="sxs-lookup"><span data-stu-id="ccda2-167">\<ResourceDictionary Source=" *externalDictionarySource*"/></span></span>  
 <span data-ttu-id="ccda2-168">외부 사전 원본입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-168">An external dictionary source.</span></span> <span data-ttu-id="ccda2-169">자세한 내용은 참조 [자세한](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-169">For details, see [Merged Resource Dictionaries](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seal">
      <MemberSignature Language="C#" Value="public void Seal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.Seal" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seal ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Seal();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ccda2-170">이 스타일과 모든 팩터리 및 트리거를 변경할 수 없도록 잠급니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-170">Locks this style and all factories and triggers so they cannot be changed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Setters">
      <MemberSignature Language="C#" Value="public System.Windows.SetterBaseCollection Setters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.SetterBaseCollection Setters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.Setters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Setters As SetterBaseCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::SetterBaseCollection ^ Setters { System::Windows::SetterBaseCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.SetterBaseCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ccda2-171"><see cref="T:System.Windows.Setter" /> 및 <see cref="T:System.Windows.EventSetter" /> 개체의 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-171">Gets a collection of <see cref="T:System.Windows.Setter" /> and <see cref="T:System.Windows.EventSetter" /> objects.</span></span></summary>
        <value><span data-ttu-id="ccda2-172"><see cref="T:System.Windows.Setter" /> 및 <see cref="T:System.Windows.EventSetter" /> 개체의 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-172">A collection of <see cref="T:System.Windows.Setter" /> and <see cref="T:System.Windows.EventSetter" /> objects.</span></span> <span data-ttu-id="ccda2-173">기본값은 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-173">The default is an empty collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccda2-174"><xref:System.Windows.Style.Setters%2A> 속성은 <xref:System.Windows.Style> 개체에 할당할 수 있는 개체로 구성 될 수 <xref:System.Windows.SetterBase>합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-174">The <xref:System.Windows.Style.Setters%2A> property of a <xref:System.Windows.Style> object can consist only of objects assignable to <xref:System.Windows.SetterBase>.</span></span> <span data-ttu-id="ccda2-175">추가 <xref:System.Windows.SetterBase> 자식은 <xref:System.Windows.Style> 개체가 암시적으로 추가 <xref:System.Windows.SetterBaseCollection> 에 대 한는 <xref:System.Windows.Style> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-175">Adding a <xref:System.Windows.SetterBase> child to a <xref:System.Windows.Style> object implicitly adds it to the <xref:System.Windows.SetterBaseCollection> for the <xref:System.Windows.Style> object.</span></span>  
  
 <span data-ttu-id="ccda2-176">가 명시적 속성 요소 사용에 대 한 <xref:System.Windows.Style.Setters%2A> 상대적으로 일반적인 이기도 합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-176">An explicit property element usage  for <xref:System.Windows.Style.Setters%2A> is also relatively common.</span></span> <span data-ttu-id="ccda2-177">이것은 경우에 따라 구분할 수 있는 태그 스타일 결정 <xref:System.Windows.Style.Setters%2A> 에서 <xref:System.Windows.Style.Resources%2A> 및 <xref:System.Windows.Style.Triggers%2A> 복잡 한 스타일의 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-177">This is a markup style decision that can sometimes help distinguish <xref:System.Windows.Style.Setters%2A> from <xref:System.Windows.Style.Resources%2A> and <xref:System.Windows.Style.Triggers%2A> items in a complex style.</span></span> <span data-ttu-id="ccda2-178">예:</span><span class="sxs-lookup"><span data-stu-id="ccda2-178">For example:</span></span>  
  
```  
<Style>  
  <Style.Setters>  
    <!--one or more SetterBase derived object elements here-->  
  </Style.Setters>  
</Style>  
```  
  
<a name="xamlPropertyElementUsage_Setters"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="ccda2-179">XAML 속성 요소 사용</span><span class="sxs-lookup"><span data-stu-id="ccda2-179">XAML Property Element Usage</span></span>  
  
```  
<object>  
  oneOrMoreSetters  
</object>  
```  
  
<a name="xamlValues_Setters"></a>   
## <a name="xaml-values"></a><span data-ttu-id="ccda2-180">XAML 값</span><span class="sxs-lookup"><span data-stu-id="ccda2-180">XAML Values</span></span>  
 <span data-ttu-id="ccda2-181">*oneOrMoreSetters*</span><span class="sxs-lookup"><span data-stu-id="ccda2-181">*oneOrMoreSetters*</span></span>  
 <span data-ttu-id="ccda2-182">하나 이상의 <xref:System.Windows.Setter> 또는 <xref:System.Windows.EventSetter> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-182">One or more <xref:System.Windows.Setter> or <xref:System.Windows.EventSetter> objects.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccda2-183">다음 예제에서는이 속성을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-183">The following example shows how to use this property.</span></span>  
  
 [!code-csharp[listboxitemstyle#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ListBoxItemStyle/CSharp/Pane1.xaml.cs#1)]
 [!code-vb[listboxitemstyle#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ListBoxItemStyle/VisualBasic/Pane1.xaml.vb#1)]  
  
 <span data-ttu-id="ccda2-184">추가 <xref:System.Windows.SetterBase> 자식은 <xref:System.Windows.Style> 개체가 암시적으로 추가 <xref:System.Windows.SetterBaseCollection> 에 대 한는 <xref:System.Windows.Style> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-184">Adding a <xref:System.Windows.SetterBase> child to a <xref:System.Windows.Style> object implicitly adds it to the <xref:System.Windows.SetterBaseCollection> for the <xref:System.Windows.Style> object.</span></span> <span data-ttu-id="ccda2-185">다음 <xref:System.Windows.EventSetter> 에 암시적으로 추가 되 고 <xref:System.Windows.SetterBaseCollection> 스타일의:</span><span class="sxs-lookup"><span data-stu-id="ccda2-185">The following <xref:System.Windows.EventSetter> is implicitly added to the <xref:System.Windows.SetterBaseCollection> of the style:</span></span>  
  
 [!code-xaml[eventovwsupport#XAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml#xaml2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Setter" />
        <altmember cref="T:System.Windows.EventSetter" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.ISealable.CanSeal">
      <MemberSignature Language="C#" Value="bool System.Windows.ISealable.CanSeal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Windows.ISealable.CanSeal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.System#Windows#ISealable#CanSeal" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property CanSeal As Boolean Implements ISealable.CanSeal" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Windows.ISealable.CanSeal { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.ISealable.IsSealed">
      <MemberSignature Language="C#" Value="bool System.Windows.ISealable.IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Windows.ISealable.IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.System#Windows#ISealable#IsSealed" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSealed As Boolean Implements ISealable.IsSealed" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Windows.ISealable.IsSealed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.ISealable.Seal">
      <MemberSignature Language="C#" Value="void ISealable.Seal ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.ISealable.Seal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#ISealable#Seal" />
      <MemberSignature Language="VB.NET" Value="Sub Seal () Implements ISealable.Seal" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.ISealable.Seal() = System::Windows::ISealable::Seal;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ccda2-186">추가할 자식 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-186">The child object to add.</span></span></param>
        <summary><span data-ttu-id="ccda2-187">자식 개체를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-187">Adds a child object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccda2-188">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="ccda2-188">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="ccda2-189"><xref:System.Windows.Style> 인스턴스가 <xref:System.Windows.Markup.IAddChild> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-189">It can be used only when the <xref:System.Windows.Style> instance is cast to an <xref:System.Windows.Markup.IAddChild> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="ccda2-190">개체에 추가할 텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-190">The text to add to the object.</span></span></param>
        <summary><span data-ttu-id="ccda2-191">노드의 텍스트 콘텐츠를 개체에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-191">Adds the text content of a node to the object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccda2-192">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="ccda2-192">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="ccda2-193"><xref:System.Windows.Style> 인스턴스가 <xref:System.Windows.Markup.IAddChild> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-193">It can be used only when the <xref:System.Windows.Style> instance is cast to an <xref:System.Windows.Markup.IAddChild> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.INameScope.FindName">
      <MemberSignature Language="C#" Value="object INameScope.FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Windows.Markup.INameScope.FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#INameScope#FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function FindName (name As String) As Object Implements INameScope.FindName" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Windows.Markup.INameScope.FindName(System::String ^ name) = System::Windows::Markup::INameScope::FindName;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.INameScope.FindName(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ccda2-194">요청되는 개체의 이름 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-194">The name identifier for the object being requested.</span></span></param>
        <summary><span data-ttu-id="ccda2-195">지정된 식별 이름이 있는 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-195">Returns an object that has the provided identifying name.</span></span></summary>
        <returns><span data-ttu-id="ccda2-196">찾을 수 있는 경우 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-196">The object, if found.</span></span> <span data-ttu-id="ccda2-197">해당 이름의 개체가 없으면 <see langword="null" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-197">Returns <see langword="null" /> if no object of that name was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccda2-198">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="ccda2-198">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="ccda2-199"><xref:System.Windows.Style> 인스턴스가 <xref:System.Windows.Markup.INameScope> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-199">It can be used only when the <xref:System.Windows.Style> instance is cast to an <xref:System.Windows.Markup.INameScope> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsAmbientPropertyAvailable (propertyName As String) As Boolean Implements IQueryAmbient.IsAmbientPropertyAvailable" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System::String ^ propertyName) = System::Windows::Markup::IQueryAmbient::IsAmbientPropertyAvailable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ccda2-200">요청된 앰비언트 속성의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-200">The name of the requested ambient property.</span></span></param>
        <summary><span data-ttu-id="ccda2-201">지정된 앰비언트 속성을 현재 범위에서 사용할 수 있는지 여부를 쿼리합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-201">Queries whether a specified ambient property is available in the current scope.</span></span></summary>
        <returns>
          <span data-ttu-id="ccda2-202">요청된 앰비언트 속성을 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-202"><see langword="true" /> if the requested ambient property is available; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Markup.IQueryAmbient" />
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public Type TargetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.TargetType" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ TargetType { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ccda2-203">이 스타일을 적용할 형식을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-203">Gets or sets the type for which this style is intended.</span></span></summary>
        <value><span data-ttu-id="ccda2-204">이 스타일의 대상 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-204">The target type for this style.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccda2-205">파생 된 모든 요소에 스타일을 설정할 수 <xref:System.Windows.FrameworkElement> 또는 <xref:System.Windows.FrameworkContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-205">You can set a style on any element that derives from <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>.</span></span> <span data-ttu-id="ccda2-206">따라서 대상 유형이 이러한 모든 요소를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-206">Therefore, your target type can be any of those elements.</span></span> <span data-ttu-id="ccda2-207">그러나와 스타일을 만드는 경우는 <xref:System.Windows.Style.TargetType%2A> 속성 및 기본 스타일을 다른 것도 정의 <xref:System.Windows.Style.TargetType%2A> 속성 파생된 스타일의 대상 형식이 동일 해야 또는 기본 스타일의 대상 형식에서 파생 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-207">However, if you create a style with a <xref:System.Windows.Style.TargetType%2A> property and base it on another style that also defines a <xref:System.Windows.Style.TargetType%2A> property, the target type of the derived style must be the same as or be derived from the target type of the base style.</span></span>  
  
 <span data-ttu-id="ccda2-208">지정 하지 않는 경우는 <xref:System.Windows.Style.TargetType%2A>를 지정 해야 합니다는 `x:Key` 에 대 한 프로그램 <xref:System.Windows.Style> 및 클래스 이름으로 스타일의 속성을 정규화 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-208">If you do not specify a <xref:System.Windows.Style.TargetType%2A>, then you must specify an `x:Key` for your <xref:System.Windows.Style> and also qualify the properties in your style with a class name.</span></span>  
  
<a name="xamlAttributeUsage_TargetType"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="ccda2-209">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="ccda2-209">XAML Attribute Usage</span></span>  
  
```  
<object  TargetType="{x:Type typeName}"/>  
-or-  
<object  TargetType="typeName"/>  
```  
  
<a name="xamlValues_TargetType"></a>   
## <a name="xaml-values"></a><span data-ttu-id="ccda2-210">XAML 값</span><span class="sxs-lookup"><span data-stu-id="ccda2-210">XAML Values</span></span>  
 `{x:Type ...}`  
 <span data-ttu-id="ccda2-211">[X:type 태그 확장](~/docs/framework/xaml-services/x-type-markup-extension.md) 태그 확장 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-211">An [x:Type Markup Extension](~/docs/framework/xaml-services/x-type-markup-extension.md) markup extension usage.</span></span>  
  
 <span data-ttu-id="ccda2-212">*typeName*</span><span class="sxs-lookup"><span data-stu-id="ccda2-212">*typeName*</span></span>  
 <span data-ttu-id="ccda2-213">클래스의 형식 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-213">The type name of the class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccda2-214">다음 예제에서는 정의의 모든 인스턴스에 적용 될 스타일은 <xref:System.Windows.Controls.TextBlock> 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-214">The following example defines a style that will be applied to all instances of the <xref:System.Windows.Controls.TextBlock> element.</span></span>  
  
 [!code-xaml[PhotoStoreDemoStyled#1](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#1)]   
  
 <span data-ttu-id="ccda2-215">설정의 <xref:System.Windows.Style.TargetType%2A> 속성을는 <xref:System.Windows.Controls.TextBlock> 유형을 설정 하지 않고는 `x:Key` 암시적으로 설정는 `x:Key` 를 `{x:Type TextBlock}`합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-215">Setting the <xref:System.Windows.Style.TargetType%2A> property to the <xref:System.Windows.Controls.TextBlock> type without setting an `x:Key` implicitly sets the `x:Key` to `{x:Type TextBlock}`.</span></span> <span data-ttu-id="ccda2-216">또한 즉 위의 제공 하는 경우 <xref:System.Windows.Style> 는 `x:Key` 아닌 값 `{x:Type TextBlock}`, <xref:System.Windows.Style> 모든에 적용할 수는 <xref:System.Windows.Controls.TextBlock> 요소 자동으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-216">This also means that if you give the above <xref:System.Windows.Style> an `x:Key` value of anything other than `{x:Type TextBlock}`, the <xref:System.Windows.Style> would not be applied to all <xref:System.Windows.Controls.TextBlock> elements automatically.</span></span> <span data-ttu-id="ccda2-217">스타일을 적용 해야 하는 대신,는 <xref:System.Windows.Controls.TextBlock> 요소 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-217">Instead, you need to apply the style to the <xref:System.Windows.Controls.TextBlock> elements explicitly.</span></span>  
  
 <span data-ttu-id="ccda2-218">많은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 컨트롤의 다른 조합으로 구성 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 컨트롤, 형식의 모든 컨트롤에 적용 되는 스타일을 만드는 광범위 한 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-218">Many [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls consist of a combination of other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls, so creating a style that applies to all controls of a type can have broad impact.</span></span> <span data-ttu-id="ccda2-219">예를 들어, 대상으로 하는 스타일을 만드는 경우는 <xref:System.Windows.Controls.TextBox> 컨트롤에 <xref:System.Windows.Controls.Canvas>, 모든 스타일 적용 됩니다 <xref:System.Windows.Controls.TextBox> 캔버스에서 컨트롤 경우에는 <xref:System.Windows.Controls.TextBox> 과 같은 다른 컨트롤의 일부를는 <xref:System.Windows.Controls.ComboBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-219">For instance, if you create a style that targets the <xref:System.Windows.Controls.TextBox> controls in a <xref:System.Windows.Controls.Canvas>, the style is applied to all <xref:System.Windows.Controls.TextBox> controls in the canvas, even if the <xref:System.Windows.Controls.TextBox> is part of another control, such as a <xref:System.Windows.Controls.ComboBox>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ccda2-220">지정된 조건에 따라 속성 값을 적용하는 <see cref="T:System.Windows.TriggerBase" /> 개체 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-220">Gets a collection of <see cref="T:System.Windows.TriggerBase" /> objects that apply property values based on specified conditions.</span></span></summary>
        <value><span data-ttu-id="ccda2-221"><see cref="T:System.Windows.TriggerBase" /> 개체의 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-221">A collection of <see cref="T:System.Windows.TriggerBase" /> objects.</span></span> <span data-ttu-id="ccda2-222">기본값은 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-222">The default is an empty collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccda2-223">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 스타일 및 템플릿 모델을 통해 내에서 트리거를 지정할 수 있습니다 프로그램 <xref:System.Windows.Style>합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-223">The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] styling and templating model enables you to specify triggers within your <xref:System.Windows.Style>.</span></span> <span data-ttu-id="ccda2-224">트리거의 경우 특정 변경 내용을 적용할 수 있도록 하는 개체는 기본적으로, 조건 (특정는 속성 값이 같은 `true`, 이벤트가 발생할 때 또는) 만족 합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-224">Essentially, triggers are objects that enable you to apply changes when certain conditions (such as when a certain property value becomes `true`, or when an event occurs) are satisfied.</span></span>  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="ccda2-225">XAML 속성 요소 사용</span><span class="sxs-lookup"><span data-stu-id="ccda2-225">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a><span data-ttu-id="ccda2-226">XAML 값</span><span class="sxs-lookup"><span data-stu-id="ccda2-226">XAML Values</span></span>  
 <span data-ttu-id="ccda2-227">*oneOrMoreTriggers*</span><span class="sxs-lookup"><span data-stu-id="ccda2-227">*oneOrMoreTriggers*</span></span>  
 <span data-ttu-id="ccda2-228">0 개 이상의 개체 요소에서 파생 된 클래스를 <xref:System.Windows.TriggerBase>합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-228">Zero or more object elements that are classes deriving from <xref:System.Windows.TriggerBase>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccda2-229">다음 예제에서는 명명 된 <xref:System.Windows.Style> 를 사용할 수 있는 <xref:System.Windows.Controls.Button> 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-229">The following example shows a named <xref:System.Windows.Style> available to <xref:System.Windows.Controls.Button> controls.</span></span> <span data-ttu-id="ccda2-230"><xref:System.Windows.Style> 정의 <xref:System.Windows.Trigger> 변경 하는 요소는 <xref:System.Windows.Controls.Control.Foreground%2A> 단추의 속성 때는 <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-230">The <xref:System.Windows.Style> defines a <xref:System.Windows.Trigger> element that changes the <xref:System.Windows.Controls.Control.Foreground%2A> property of a button when the <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> property is `true`.</span></span>  
  
 [!code-xaml[BtnStyles#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnStyles/CS/app.xaml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DataTrigger" />
        <altmember cref="T:System.Windows.EventTrigger" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void UnregisterName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.INameScope.UnregisterName(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ccda2-231">제거할 매핑의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-231">The name of the mapping to remove.</span></span></param>
        <summary><span data-ttu-id="ccda2-232">이름 범위에서 이름-개체 매핑을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="ccda2-232">Removes a name-object mapping from the namescope.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>