<Type Name="PropertyMetadata" FullName="System.Windows.PropertyMetadata">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5c5dfef7a02e9b858a22854c1ef79b198ef1d9bc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30680017" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PropertyMetadata" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyMetadata extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.PropertyMetadata" />
  <TypeSignature Language="VB.NET" Value="Public Class PropertyMetadata" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyMetadata" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>등록하는 조건을 포함하여 특정 형식에 적용될 때 종속성 속성의 특정 동작 측면을 정의합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 속성 메타 데이터를 정의 하 고 호출 하는 경우 종속성 속성을 등록할 때 사용 될 수는 <xref:System.Windows.DependencyProperty.Register%2A> 메서드 (또는 연결 된 속성 또는 읽기 전용 종속성 속성에 대 한 변형) 또는 를호출할때원래소유자등록후<xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> 메서드. <xref:System.Windows.DependencyProperty.AddOwner%2A> 또한 속성 메타 데이터를 사용합니다.  
  
 이 클래스는 이러한 각 호출에 사용할 수 있는 구체적 기본 클래스입니다. 그러나 것은 매우 일반적와 같은 파생된 클래스 중 하나를 사용 하는 메타 데이터를 지정할 <xref:System.Windows.FrameworkPropertyMetadata>합니다. 이러한 파생된 클래스는 감지 또는에 구현 되는 일부 속성 시스템 및 레이아웃 동작을 사용 하도록 설정 하는 데 필요한 부울 속성 값으로 전달 하는 보다 자세한 메타 데이터 지원의 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 프레임 워크 수준입니다.  
  
 이 클래스의 몇 가지 속성을와 같은 속성 시스템 작업에 사용 되는 인스턴스가 이전에 쓸 수 있지만 개체 모델에 읽기 / 쓰기 <xref:System.Windows.DependencyProperty.Register%2A> 또는 <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>합니다. 이러한 각 속성 또한 설정 될 수는 생성자가 있지만 표시 됩니다 되도록 <xref:System.Windows.PropertyMetadata.Merge%2A> 메서드 구현에서는 속성을 설정할 수 있습니다.  
  
<a name="xamlTextUsage_PropertyMetadata"></a>   
## <a name="xaml-text-usage"></a>XAML 텍스트 사용  
 이 형식과이 형식의 멤버 일반적으로에서 사용 되지 않는 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]합니다.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.PropertyMetadata" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.PropertyMetadata" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata (object defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata(System::Object ^ defaultValue);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="defaultValue">종속성 속성에 대해 지정할 기본값이며, 일반적으로 특정 형식의 값으로 제공됩니다.</param>
        <summary>이 메타데이터가 적용될 종속성 속성에 대한 지정된 기본값을 사용하여 <see cref="T:System.Windows.PropertyMetadata" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 제공 된 값의 형식 `defaultValue` 일치 하거나이 메타 데이터가 적용 하는 종속성 속성의 원본 등록에 지정 된 형식과 연관 되어야 합니다. 메타 데이터의 기본 값 형식과 메타 데이터에 적용 되는 종속성 속성의 형식이 불일치 (일치 하지 않는 런타임 예외가 발생 합니다) 컴파일하는 동안 불일치를 감지할 수 없기 때문에 디버깅을 어려울 수 있습니다.  
  
 매개 변수가 없는 생성자에 대해 기본값으로 있지만 `defaultValue` 의 <xref:System.Windows.DependencyProperty.UnsetValue> 지정할 수 없습니다. 이렇게 하면 예외가 발생 합니다.  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  
[!code-csharp[PropertyMetadataAPIs#PMCtor1param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor1param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="defaultValue" />는 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> 값으로 설정할 수 없습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback">속성의 유효 값이 변경될 때마다 속성 시스템에서 호출할 처리기 구현에 대한 참조입니다.</param>
        <summary>지정된 <see cref="T:System.Windows.PropertyMetadata" /> 구현 참조를 사용하여 <see cref="T:System.Windows.PropertyChangedCallback" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  
[!code-csharp[PropertyMetadataAPIs#PMCtor1paramcallback](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor1paramcallback)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">종속성 속성의 기본값이며, 일반적으로 특정 형식의 값으로 제공됩니다.</param>
        <param name="propertyChangedCallback">속성의 유효 값이 변경될 때마다 속성 시스템에서 호출할 처리기 구현에 대한 참조입니다.</param>
        <summary>제공된 기본값 및 <see cref="T:System.Windows.PropertyMetadata" /> 구현 참조를 사용하여 <see cref="T:System.Windows.PropertyChangedCallback" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 제공 된 값 형식 `defaultValue` 일치 하거나이 메타 데이터가 적용 하는 종속성 속성의 원본 등록에 지정 된 형식과 연관 되어야 합니다. 메타 데이터의 기본 값 형식과 메타 데이터에 적용 되는 종속성 속성의 형식이 불일치 (일치 하지 않는 런타임 예외가 발생 합니다) 컴파일하는 동안 불일치를 감지할 수 없기 때문에 디버깅을 어려울 수 있습니다.  
  
 매개 변수가 없는 생성자에 대해 기본값으로 있지만 `defaultValue` 의 <xref:System.Windows.DependencyProperty.UnsetValue> 지정할 수 없습니다. 이렇게 하면 예외가 발생 합니다.  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  
[!code-csharp[PropertyMetadataAPIs#PMCtor2param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor2param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="defaultValue" />는 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> 값으로 설정할 수 없습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">종속성 속성의 기본값이며, 일반적으로 특정 형식의 값으로 제공됩니다.</param>
        <param name="propertyChangedCallback">속성의 유효 값이 변경될 때마다 속성 시스템에서 호출할 처리기 구현에 대한 참조입니다.</param>
        <param name="coerceValueCallback">속성 시스템에서 이 속성에 대해 <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" />를 호출할 때마다 호출되는 처리기 구현에 대한 참조입니다.</param>
        <summary>지정된 기본값 및 콜백을 사용하여 <see cref="T:System.Windows.PropertyMetadata" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정 하려는 경우는 <xref:System.Windows.CoerceValueCallback> 하지 않고는 <xref:System.Windows.PropertyChangedCallback>를 전달할 수 있습니다 `null` 에 대 한는 `propertyChangedCallback` 매개 변수입니다.  
  
 제공 된 값의 형식 `defaultValue` 일치 하거나이 메타 데이터가 적용 하는 종속성 속성의 원본 등록에 지정 된 형식과 연관 되어야 합니다. 메타 데이터의 기본 값 형식과 메타 데이터에 적용 되는 종속성 속성의 형식이 불일치 (일치 하지 않는 런타임 예외가 발생 합니다) 컴파일하는 동안 불일치를 감지할 수 없기 때문에 디버깅을 어려울 수 있습니다.  
  
 매개 변수가 없는 생성자에 대해 기본값으로 있지만 `defaultValue` 의 <xref:System.Windows.DependencyProperty.UnsetValue> 지정할 수 없습니다. 이렇게 하면 예외가 발생 합니다.  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  
[!code-csharp[PropertyMetadataAPIs#PMCtor3param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor3param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="defaultValue" />는 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> 값으로 설정할 수 없습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="CoerceValueCallback">
      <MemberSignature Language="C#" Value="public System.Windows.CoerceValueCallback CoerceValueCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.CoerceValueCallback CoerceValueCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyMetadata.CoerceValueCallback" />
      <MemberSignature Language="VB.NET" Value="Public Property CoerceValueCallback As CoerceValueCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::CoerceValueCallback ^ CoerceValueCallback { System::Windows::CoerceValueCallback ^ get(); void set(System::Windows::CoerceValueCallback ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.CoerceValueCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 메타데이터에 지정되어 있는 <see cref="T:System.Windows.CoerceValueCallback" /> 구현에 대한 참조를 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Windows.CoerceValueCallback" /> 구현 참조입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 속성 메타 데이터에 대 한 콜백이 되지 않으므로 일반적으로 public 멤버를 포함 하는 형식,이 속성의 값은 기존 종속성 속성의 메타 데이터를 사용 하는 대부분의 시나리오에 대 한 중요 하지 않습니다. 이 속성을 노출 하는 한 가지 이유는 메타 데이터의 하위 클래스는 기본 메타 데이터와 메타 데이터 재정의/추가 지정 하는 경우 원하는 병합 논리를 수행할 수 있도록는 <xref:System.Windows.CoerceValueCallback>합니다. 그러나 기본 병합에 대 한 논리는 <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> 이전을 대체 하는 것입니다.  
  
 <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다. 따라서 <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> 초기화 한 후 조정 될 수 있습니다는 <xref:System.Windows.PropertyMetadata> 개체 자체입니다. 그러나 메타 데이터에 대 한 호출의 일부로 사용 된 경우 <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, 또는 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 현재 변경할 수 없는 것으로 간주 됩니다. 설정 하는 <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> 면 <xref:System.Windows.PropertyMetadata.IsSealed%2A> 은 `true` 이 메타 데이터 인스턴스 예외를 발생 시킵니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">종속성 속성 작업에 적용된 후에는 메타데이터 속성을 설정할 수 없습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultValue">
      <MemberSignature Language="C#" Value="public object DefaultValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyMetadata.DefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DefaultValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>종속성 속성의 기본값을 가져오거나 설정합니다.</summary>
        <value>속성의 기본값입니다. 값에서 기본값을 <see cref="T:System.Windows.PropertyMetadata" /> 인스턴스가 매개 변수가 없는 생성자를 사용 하 여 만든 됩니다 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.PropertyMetadata.DefaultValue%2A> 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다. 따라서 <xref:System.Windows.PropertyMetadata.DefaultValue%2A> 초기화 한 후 조정 될 수 있습니다는 <xref:System.Windows.PropertyMetadata> 개체 자체입니다. 그러나 메타 데이터에 대 한 호출의 일부로 사용 된 경우 <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, 또는 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 현재 변경할 수 없는 것으로 간주 됩니다. 설정 하는 <xref:System.Windows.PropertyMetadata.DefaultValue%2A> 면 <xref:System.Windows.PropertyMetadata.IsSealed%2A> 은 `true` 이 메타 데이터 인스턴스 예외를 발생 시킵니다.  
  
 매개 변수가 없는 생성자에 대해 기본값으로 있지만 `defaultValue` 의 <xref:System.Windows.DependencyProperty.UnsetValue> 중 하나를 사용 하 여 설정할 수 없습니다 <xref:System.Windows.PropertyMetadata.DefaultValue%2A> 또는 생성자입니다. 이렇게 하면 예외가 발생 합니다.  
  
<a name="xamlTextUsage_PropertyChangedCallback"></a>   
## <a name="xaml-text-usage"></a>XAML 텍스트 사용  
 이 형식의 멤버에 일반적으로 사용 되지 않는 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">만든 후에는 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> 값으로 설정할 수 없습니다.</exception>
        <exception cref="T:System.InvalidOperationException">종속성 속성 작업에 적용된 후에는 메타데이터 속성을 설정할 수 없습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="protected bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyMetadata.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsSealed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>메타데이터가 속성에 적용되어 해당 메타데이터 인스턴스가 변경될 수 없는 상태가 되었는지 여부를 결정하는 값을 가져옵니다.</summary>
        <value>
          메타데이터 인스턴스를 변경할 수 없으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다양 한 속성을 <xref:System.Windows.PropertyMetadata>와 같은 <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다. 따라서 초기화 한 후 해당 속성을 조정할 수는 <xref:System.Windows.PropertyMetadata> 개체 자체입니다. 그러나 메타 데이터에 대 한 호출의 일부로 종속성 속성에 적용 되 고 나면 <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, 또는 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 현재 변경할 수 없는 것으로 간주 됩니다. 이러한 호출 중 하나의 시 <xref:System.Windows.PropertyMetadata.OnApply%2A> 를 호출 하 고이 속성의 값 설정 `true`합니다.  
  
   
  
## Examples  
 다음 예제에서는 검사 <xref:System.Windows.PropertyMetadata.IsSealed%2A> 사용자 지정 메타 데이터 속성의 set 작업 이전 합니다.  
  
 [!code-csharp[PropertyMetadataAPIs#MergeImpl](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#mergeimpl)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="protected virtual void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Merge(class System.Windows.PropertyMetadata baseMetadata, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Merge (baseMetadata As PropertyMetadata, dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Merge(System::Windows::PropertyMetadata ^ baseMetadata, System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="baseMetadata">이 인스턴스의 값과 병합할 기본 메타데이터입니다.</param>
        <param name="dp">이 메타데이터를 적용하는 종속성 속성입니다.</param>
        <summary>이 메타데이터를 기본 메타데이터와 병합합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 메타 데이터 재정의 될 때 내부적으로 사용 됩니다 (<xref:System.Windows.DependencyProperty.OverrideMetadata%2A> 메서드).  
  
   
  
## Examples  
 다음 예제에서는 속성 메타 데이터에 추가 속성을 추가 하는 사용자 지정 메타 데이터 형식에 대 한 병합을 구현 합니다.  
  
 [!code-csharp[PropertyMetadataAPIs#MergeImpl](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#mergeimpl)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>클래스에서 파생 되는 구현은 <see cref="T:System.Windows.PropertyMetadata" /> 구현에서 추가한 모든 메타 데이터 속성을 설명 하기 위해이 메서드를 재정의 해야 합니다. 예를 들어, 구현 추가 했을 수는 새 플래그 열거형 값 및 <see cref="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> 구현을 올바르게 이러한 플래그를 결합 할 수 있어야 합니다.  
  
 항상 기본 구현을 구현 코드를 이전에 이미 정의 된 모든 속성을 병합 해 주므로 때문에 <see cref="T:System.Windows.PropertyMetadata" /> 유형입니다.  
  
 병합의 정확한 동작은 사용자의 책임입니다. 값을 병합, 파생 된 메타 데이터는 기본 또는 특정 메타 데이터 클래스 및 해당 의미에 추가한 속성의 유형을 기반으로 하는 다른 여러 동작 유지 되는 경우 기준 값으로 되돌립니다 하도록 선택할 수 있습니다.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="OnApply">
      <MemberSignature Language="C#" Value="protected virtual void OnApply (System.Windows.DependencyProperty dp, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnApply(class System.Windows.DependencyProperty dp, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnApply (dp As DependencyProperty, targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnApply(System::Windows::DependencyProperty ^ dp, Type ^ targetType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="dp">메타데이터를 적용한 종속성 속성입니다.</param>
        <param name="targetType">형식별 메타데이터인 경우 이 메타데이터에 연결된 형식입니다. 기본 메타데이터의 경우 이 값은 null 참조입니다.</param>
        <summary>이 메타데이터가 속성에 적용되어 메타데이터가 봉인될 때 호출됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 서브 클래스 해야 속하는 어떠한 방법으로의 데이터 구조는 <xref:System.Windows.PropertyMetadata> 하위 클래스 표시 해야 변경할 수 없는 것 한 번 <xref:System.Windows.PropertyMetadata.OnApply%2A> 라고 합니다. 메타 데이터 속성 시스템 작업에 적용 된 후 호출 됩니다 (등록, 소유자를 추가, 메타 데이터 재정의).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyChangedCallback">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyChangedCallback PropertyChangedCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyChangedCallback PropertyChangedCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyMetadata.PropertyChangedCallback" />
      <MemberSignature Language="VB.NET" Value="Public Property PropertyChangedCallback As PropertyChangedCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyChangedCallback ^ PropertyChangedCallback { System::Windows::PropertyChangedCallback ^ get(); void set(System::Windows::PropertyChangedCallback ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyChangedCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 메타데이터에 지정되어 있는 <see cref="T:System.Windows.PropertyChangedCallback" /> 구현에 대한 참조를 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Windows.PropertyChangedCallback" /> 구현 참조입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 속성 메타 데이터의 콜백은 되지 않으므로 정의 형식에 대해 일반적으로 public 멤버가이 속성의 값은 기존 종속성 속성의 메타 데이터를 사용 하는 대부분의 시나리오에 대 한 중요 하지 않습니다. 이 속성을 노출 하는 한 가지 이유는 메타 데이터 클래스는 기본 메타 데이터와 메타 데이터 재정의/추가 지정 하는 경우 원하는 병합 논리를 수행할 수 있도록는 <xref:System.Windows.PropertyChangedCallback>합니다. 모든 유지 관리 하는 기본 병합 논리는 <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> 테이블을 각 호출의 첫 번째 실행 하는 계층 구조에서 가장 깊은 클래스에 설정 된 콜백이 구현 합니다.  
  
 <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다. 따라서 <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> 초기화 한 후 조정 될 수 있습니다는 <xref:System.Windows.PropertyMetadata> 개체 자체입니다. 그러나 메타 데이터에 대 한 호출의 일부로 사용 된 경우 <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, 또는 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 현재 변경할 수 없는 것으로 간주 됩니다. 설정 하는 <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> 면 <xref:System.Windows.PropertyMetadata.IsSealed%2A> 은 `true` 이 메타 데이터 인스턴스 예외를 발생 시킵니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">종속성 속성 작업에 적용된 후에는 메타데이터 속성을 설정할 수 없습니다.</exception>
      </Docs>
    </Member>
  </Members>
</Type>