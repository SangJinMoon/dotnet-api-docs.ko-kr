<Type Name="EventManager" FullName="System.Windows.EventManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c77ae0f0dbeb2878102af1c07c306ec83ccf92c4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class EventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class EventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventManager abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="7a4ed-101">클래스 소유자에 대한 라우트된 이벤트를 등록하고 클래스 처리기를 추가하는 이벤트 관련 유틸리티 메서드를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7a4ed-101">Provides event-related utility methods that register routed events for class owners and add class handlers.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a4ed-102">이 클래스는 가장 일반적으로 새 라우트된 이벤트를 등록 하는 데 사용 됩니다 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-102">This class is most commonly used to register a new routed event, with <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span>  
  
 <span data-ttu-id="7a4ed-103">두 번째 가장 일반적인 [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] 사용량이 <xref:System.Windows.EventManager.RegisterClassHandler%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-103">The second most common [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] usage is <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span> <span data-ttu-id="7a4ed-104">이 메서드를 사용 하 여 클래스에 대해 라우트된 이벤트 또는 연결된 된 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-104">You use this method to enable class handling of a routed event on the class, or an attached event.</span></span> <span data-ttu-id="7a4ed-105">자세한 내용은 참조 [표시 라우트된 이벤트로 클래스를 처리 하 고,](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-105">For details, see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a4ed-106">다음 예제에서는이 클래스를 클래스 멤버로 추가 재정의 하는 라우트된 이벤트 "래퍼" 기술 함께 새 라우트된 이벤트를 등록 하려면 사용에 대 한 구현을 제거 하는 방법을 보여는 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-106">The following example show how to use this class to register a new routed event as a class member, along with the routed event "wrapper" technique of overriding the add and remove implementations for a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event.</span></span>  
  
 [!code-csharp[DPCustom#EventManagerClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#eventmanagerclass)]
 [!code-vb[DPCustom#EventManagerClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#eventmanagerclass)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRoutedEvents">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEvents () As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEvents();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7a4ed-107">이벤트 시스템에 등록된 라우트된 이벤트의 식별자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-107">Returns identifiers for routed events that have been registered to the event system.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7a4ed-108">등록된 개체가 들어 있는 <see cref="T:System.Windows.RoutedEvent" /> 형식 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-108">An array of type <see cref="T:System.Windows.RoutedEvent" /> that contains the registered objects.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a4ed-109">더 많은 <xref:System.Windows.RoutedEvent> 개체를 나중에 등록할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-109">More <xref:System.Windows.RoutedEvent> objects can be registered later.</span></span> <span data-ttu-id="7a4ed-110">이 메서드는 스냅숏 가져오고 라우트된 이벤트의 컬렉션은 응용 프로그램의 수명 주기 동안 쓰기 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-110">This method gets a snapshot and the collection of routed events is writeable throughout an application's lifetime.</span></span> <span data-ttu-id="7a4ed-111">반환 되는 컬렉션은 매우 클 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-111">The collection returned might be quite large.</span></span> <span data-ttu-id="7a4ed-112">이벤트의 일부인 계산 해도 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], 컬렉션 수는 수백 개에 이릅니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-112">Even just counting the events that are part of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], the collection count is in the high hundreds.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoutedEventsForOwner">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEventsForOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEventsForOwner (ownerType As Type) As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEventsForOwner(Type ^ ownerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">
          <span data-ttu-id="7a4ed-113">검색을 시작할 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-113">The type to start the search with.</span>
          </span>
          <span data-ttu-id="7a4ed-114">기본 클래스도 검색됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-114">Base classes are included in the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7a4ed-115">제공된 소유자 형식으로 등록된 이벤트의 모든 라우트된 이벤트 식별자를 찾습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-115">Finds all routed event identifiers for events that are registered with the provided owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7a4ed-116">일치하는 라우트된 이벤트 식별자가 있으면 이러한 식별자의 배열이고, 그렇지 않으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-116">An array of matching routed event identifiers if any match is found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClassHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7a4ed-117">특정 라우트된 이벤트에 대한 클래스 처리기를 등록합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-117">Registers a class handler for a particular routed event.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="classType">
          <span data-ttu-id="7a4ed-118">클래스 처리를 선언하는 클래스의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-118">The type of the class that is declaring class handling.</span>
          </span>
        </param>
        <param name="routedEvent">
          <span data-ttu-id="7a4ed-119">처리할 이벤트의 라우트된 이벤트 식별자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-119">The routed event identifier of the event to handle.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="7a4ed-120">클래스 처리기 구현에 대한 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-120">A reference to the class handler implementation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7a4ed-121">특정 라우트된 이벤트에 대한 클래스 처리기를 등록합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-121">Registers a class handler for a particular routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a4ed-122">클래스 처리에 백업 하는 라우트된 이벤트 구현 되는 연결 된 이벤트를 비롯 한 라우트된 이벤트를 사용할 수 있는 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-122">Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing.</span></span> <span data-ttu-id="7a4ed-123">클래스 처리기 클래스의 모든 인스턴스에 대 한 존재 하는 정적 처리기와 비슷합니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-123">A class handler is like a static handler that exists for all instances of the class.</span></span> <span data-ttu-id="7a4ed-124">처리기가 정적, 클래스 처리기를 사용 하 여 직접 인스턴스 속성을 변경할 수 없지만 통해 인스턴스에 액세스할 수 때문에 `sender` 매개 변수 및/또는 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-124">Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the `sender` parameter and/or the event data.</span></span>  
  
 <span data-ttu-id="7a4ed-125">인스턴스 처리기 앞 클래스 처리기가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-125">Class handlers are invoked before instance handlers.</span></span> <span data-ttu-id="7a4ed-126">이벤트 처리로 표시의 동작을 포함 하는 클래스 처리기를 구현할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-126">You can implement a class handler that has the behavior of marking the event as handled.</span></span> <span data-ttu-id="7a4ed-127">따라서 처리 된 이벤트에 대해 특별히 인스턴스 처리기 등록 하지 않는 한 클래스 처리 이벤트에 대 한 인스턴스 처리기 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-127">Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.</span></span>  
  
 <span data-ttu-id="7a4ed-128">대부분의 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 의 이벤트는 가상 메서드를 처리 하는 클래스를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-128">Many of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] base element events provide class handling virtual methods.</span></span> <span data-ttu-id="7a4ed-129">기본 클래스를 상속 하는 클래스에서 이러한 메서드를 재정의 하 여 클래스 호출 하지 않고 처리를 구현할 수 있습니다 <xref:System.Windows.EventManager.RegisterClassHandler%2A> 정적 생성자에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-129">By overriding these methods in classes that inherit the base classes, you can implement class handling without calling <xref:System.Windows.EventManager.RegisterClassHandler%2A> in static constructors.</span></span> <span data-ttu-id="7a4ed-130">일반적으로 이러한 클래스 처리 메서드는 입력된 이벤트에 대해 존재 하 고 이름이 "On"으로 시작 되 고 클래스에서 처리 되는 이벤트의 이름으로 끝납니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-130">These class handling methods typically exist for input events and have names that start with "On" and end with the name of the event being class handled.</span></span>  
  
 <span data-ttu-id="7a4ed-131">클래스 처리에 대 한 자세한 내용은 참조 [표시 라우트된 이벤트로 클래스를 처리 하 고,](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-131">For more information about class handling, see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).</span></span>  
  
 <span data-ttu-id="7a4ed-132">이 서명을 사용 하 여, 처리 되지 않은 이벤트에 대 한 응답에만 호출할 클래스 처리기를 등록 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-132">Using this signature, class handlers will be registered to invoke only in response to unhandled events.</span></span> <span data-ttu-id="7a4ed-133">이벤트 인수를 사용 하 여 처리, 표시 된 경우에 호출 하는 클래스 처리기를 등록할 수도 있습니다는 <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 서명을와 `handledEventsToo` 로 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-133">You can also register class handlers to invoke even if the event arguments are marked handled, by using the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature, with `handledEventsToo` set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a4ed-134">에 대 한 처리기를 추가 하는 다음 예제에서는 <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>호출, <xref:System.Windows.EventManager.RegisterClassHandler%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-134">The following example adds a handler for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, calling <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 [!code-csharp[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]
 [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#staticandregisterclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="classType">
          <span data-ttu-id="7a4ed-135">클래스 처리를 선언하는 클래스의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-135">The type of the class that is declaring class handling.</span>
          </span>
        </param>
        <param name="routedEvent">
          <span data-ttu-id="7a4ed-136">처리할 이벤트의 라우트된 이벤트 식별자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-136">The routed event identifier of the event to handle.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="7a4ed-137">클래스 처리기 구현에 대한 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-137">A reference to the class handler implementation.</span>
          </span>
        </param>
        <param name="handledEventsToo">
          <span data-ttu-id="7a4ed-138">라우트된 이벤트의 인수가 처리된 것으로 표시된 경우에도 이 클래스 처리기를 호출하려면 <see langword="true" />이고, 이벤트가 처리된 것으로 표시된 경우 처리기를 호출하지 않는 기본 동작을 유지하려면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-138">
              <see langword="true" /> to invoke this class handler even if arguments of the routed event have been marked as handled; <see langword="false" /> to retain the default behavior of not invoking the handler on any marked-handled event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7a4ed-139">특정 라우트된 이벤트에 대한 클래스 처리기를 등록하며, 이벤트 데이터가 이미 처리된 것으로 표시된 경우에도 이벤트를 처리할 수 있는 옵션이 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-139">Registers a class handler for a particular routed event, with the option to handle events where event data is already marked handled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a4ed-140">클래스 처리에 백업 하는 라우트된 이벤트 구현 되는 연결 된 이벤트를 비롯 한 라우트된 이벤트를 사용할 수 있는 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-140">Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing.</span></span> <span data-ttu-id="7a4ed-141">클래스 처리기 클래스의 모든 인스턴스에 대 한 존재 하는 정적 처리기와 비슷합니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-141">A class handler is like a static handler that exists for all instances of the class.</span></span> <span data-ttu-id="7a4ed-142">처리기가 정적, 클래스 처리기를 사용 하 여 직접 인스턴스 속성을 변경할 수 없지만 통해 인스턴스에 액세스할 수 때문에 `sender` 매개 변수 및/또는 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-142">Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the `sender` parameter and/or the event data.</span></span>  
  
 <span data-ttu-id="7a4ed-143">인스턴스 처리기 앞 클래스 처리기가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-143">Class handlers are invoked before instance handlers.</span></span> <span data-ttu-id="7a4ed-144">이벤트 처리로 표시의 동작을 포함 하는 클래스 처리기를 구현할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-144">You can implement a class handler that has the behavior of marking the event as handled.</span></span> <span data-ttu-id="7a4ed-145">따라서 처리 된 이벤트에 대해 특별히 인스턴스 처리기 등록 하지 않는 한 클래스 처리 이벤트에 대 한 인스턴스 처리기 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-145">Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.</span></span>  
  
 <span data-ttu-id="7a4ed-146">대부분의 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 의 이벤트는 가상 메서드를 처리 하는 클래스를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-146">Many of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] base element events provide class handling virtual methods.</span></span> <span data-ttu-id="7a4ed-147">기본 클래스를 상속 하는 클래스에서 이러한 메서드를 재정의 하 여 클래스 호출 하지 않고 처리를 구현할 수 있습니다 <xref:System.Windows.EventManager.RegisterClassHandler%2A> 정적 생성자에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-147">By overriding these methods in classes that inherit the base classes, you can implement class handling without calling <xref:System.Windows.EventManager.RegisterClassHandler%2A> in static constructors.</span></span> <span data-ttu-id="7a4ed-148">일반적으로 이러한 클래스 처리 메서드는 입력된 이벤트에 대해 존재 하 고 이름이 "On"으로 시작 되 고 클래스에서 처리 되는 이벤트의 이름으로 끝납니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-148">These class handling methods typically exist for input events and have names that start with "On" and end with the name of the event being class handled.</span></span>  
  
 <span data-ttu-id="7a4ed-149">클래스 처리에 대 한 자세한 내용은 참조 [표시 라우트된 이벤트로 클래스를 처리 하 고,](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-149">For more information about class handling, see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).</span></span>  
  
 <span data-ttu-id="7a4ed-150">이 서명을 사용 하 여, 클래스 처리기 등록할 수를 설정 하 여 이벤트가 처리 시 호출할 `handledEventsToo` 로 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-150">Using this signature, class handlers can be registered to invoke upon handled events, by setting `handledEventsToo` set to `true`.</span></span> <span data-ttu-id="7a4ed-151">일반적으로 마우스 또는 키보드 이벤트를 처리 하는 입력된 시스템 등 해결 하려고 하는 알려진된 처리 문제가 있는 경우에이 작업을 수행 해야 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-151">Generally, you should do this only if there is a known handling issue you are trying to work around, such as input system handling from mouse or keyboard events.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterRoutedEvent">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent RegisterRoutedEvent(string name, valuetype System.Windows.RoutingStrategy routingStrategy, class System.Type handlerType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::RoutedEvent ^ RegisterRoutedEvent(System::String ^ name, System::Windows::RoutingStrategy routingStrategy, Type ^ handlerType, Type ^ ownerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="routingStrategy" Type="System.Windows.RoutingStrategy" />
        <Parameter Name="handlerType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="7a4ed-152">라우트된 이벤트의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-152">The name of the routed event.</span>
          </span>
          <span data-ttu-id="7a4ed-153">이 이름은 소유자 형식 내에서 고유해야 하며 <see langword="null" /> 또는 빈 문자열이 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-153">The name must be unique within the owner type and cannot be <see langword="null" /> or an empty string.</span>
          </span>
        </param>
        <param name="routingStrategy">
          <span data-ttu-id="7a4ed-154">열거형의 값으로 이벤트의 라우팅 전략입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-154">The routing strategy of the event as a value of the enumeration.</span>
          </span>
        </param>
        <param name="handlerType">
          <span data-ttu-id="7a4ed-155">이벤트 처리기의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-155">The type of the event handler.</span>
          </span>
          <span data-ttu-id="7a4ed-156">이는 대리자 형식이어야 하며 <see langword="null" />이 될 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-156">This must be a delegate type and cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="7a4ed-157">라우트된 이벤트의 소유자 클래스 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-157">The owner class type of the routed event.</span>
          </span>
          <span data-ttu-id="7a4ed-158">이는 <see langword="null" />일 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-158">This cannot be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7a4ed-159">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 이벤트 시스템에 새 라우트된 이벤트를 등록합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-159">Registers a new routed event with the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] event system.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7a4ed-160">새로 등록된 라우트된 이벤트의 식별자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-160">The identifier for the newly registered routed event.</span>
          </span>
          <span data-ttu-id="7a4ed-161">이 식별자 개체는 클래스의 정적 필드로 저장한 다음 이벤트에 처리기를 연결하는 메서드에 대한 매개 변수로 사용할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-161">This identifier object can now be stored as a static field in a class and then used as a parameter for methods that attach handlers to the event.</span>
          </span>
          <span data-ttu-id="7a4ed-162">라우트된 이벤트 식별자는 다른 이벤트 시스템 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]에도 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a4ed-162">The routed event identifier is also used for other event system [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)].</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a4ed-163">이 메서드의 반환 값을 사용 하 여 고유한에 대 한 정적 선언을 만들려면 <xref:System.Windows.RoutedEvent> 식별자 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-163">Use the return value of this method to create the static declaration for a unique <xref:System.Windows.RoutedEvent> identifier field.</span></span> <span data-ttu-id="7a4ed-164">이 필드는 소유자 형식 내에서 저장 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-164">This field should be stored within the owner type.</span></span>  
  
 <span data-ttu-id="7a4ed-165">규칙의 상당한 여러 가지 고 라우트된 이벤트와 관련 된 모범 사례 됩니다 라는, 등록, 클래스에 노출 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-165">There are a considerable number of conventions and best practices associated with how routed events should be named, registered, and exposed in a class.</span></span> <span data-ttu-id="7a4ed-166">자세한 내용은 참조 [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7a4ed-166">For more information, see [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>