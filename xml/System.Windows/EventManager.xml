<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="EventManager.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c77ae0f0dbeb2878102af1c07c306ec83ccf92c4.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c77ae0f0dbeb2878102af1c07c306ec83ccf92c4</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.EventManager">
          <source>Provides event-related utility methods that register routed events for class owners and add class handlers.</source>
          <target state="translated">클래스 소유자에 대한 라우트된 이벤트를 등록하고 클래스 처리기를 추가하는 이벤트 관련 유틸리티 메서드를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.EventManager">
          <source>This class is most commonly used to register a new routed event, with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">이 클래스는 가장 일반적으로 새 라우트된 이벤트를 등록 하는 데 사용 됩니다 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.EventManager">
          <source>The second most common <ph id="ph1">[!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)]</ph> usage is <ph id="ph2">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">두 번째 가장 일반적인 <ph id="ph1">[!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)]</ph> 사용량이 <ph id="ph2">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.EventManager">
          <source>You use this method to enable class handling of a routed event on the class, or an attached event.</source>
          <target state="translated">이 메서드를 사용 하 여 클래스에 대해 라우트된 이벤트 또는 연결된 된 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.EventManager">
          <source>For details, see <bpt id="p1">[</bpt>Marking Routed Events as Handled, and Class Handling<ept id="p1">](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>표시 라우트된 이벤트로 클래스를 처리 하 고,<ept id="p1">](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.EventManager">
          <source>The following example show how to use this class to register a new routed event as a class member, along with the routed event "wrapper" technique of overriding the add and remove implementations for a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event.</source>
          <target state="translated">다음 예제에서는이 클래스를 클래스 멤버로 추가 재정의 하는 라우트된 이벤트 "래퍼" 기술 함께 새 라우트된 이벤트를 등록 하려면 사용에 대 한 구현을 제거 하는 방법을 보여는 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.GetRoutedEvents">
          <source>Returns identifiers for routed events that have been registered to the event system.</source>
          <target state="translated">이벤트 시스템에 등록된 라우트된 이벤트의 식별자를 반환합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.GetRoutedEvents">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEvent" /&gt;</ph> that contains the registered objects.</source>
          <target state="translated">등록된 개체가 들어 있는 <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEvent" /&gt;</ph> 형식 배열입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.GetRoutedEvents">
          <source>More <ph id="ph1">&lt;xref:System.Windows.RoutedEvent&gt;</ph> objects can be registered later.</source>
          <target state="translated">더 많은 <ph id="ph1">&lt;xref:System.Windows.RoutedEvent&gt;</ph> 개체를 나중에 등록할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.GetRoutedEvents">
          <source>This method gets a snapshot and the collection of routed events is writeable throughout an application's lifetime.</source>
          <target state="translated">이 메서드는 스냅숏 가져오고 라우트된 이벤트의 컬렉션은 응용 프로그램의 수명 주기 동안 쓰기 가능 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.GetRoutedEvents">
          <source>The collection returned might be quite large.</source>
          <target state="translated">반환 되는 컬렉션은 매우 클 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.GetRoutedEvents">
          <source>Even just counting the events that are part of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph>, the collection count is in the high hundreds.</source>
          <target state="translated">이벤트의 일부인 계산 해도 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph>, 컬렉션 수는 수백 개에 이릅니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)">
          <source>The type to start the search with.</source>
          <target state="translated">검색을 시작할 형식입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)">
          <source>Base classes are included in the search.</source>
          <target state="translated">기본 클래스도 검색됩니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)">
          <source>Finds all routed event identifiers for events that are registered with the provided owner type.</source>
          <target state="translated">제공된 소유자 형식으로 등록된 이벤트의 모든 라우트된 이벤트 식별자를 찾습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)">
          <source>An array of matching routed event identifiers if any match is found; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">일치하는 라우트된 이벤트 식별자가 있으면 이러한 식별자의 배열이고, 그렇지 않으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:System.Windows.EventManager">
          <source>Registers a class handler for a particular routed event.</source>
          <target state="translated">특정 라우트된 이벤트에 대한 클래스 처리기를 등록합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>The type of the class that is declaring class handling.</source>
          <target state="translated">클래스 처리를 선언하는 클래스의 형식입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>The routed event identifier of the event to handle.</source>
          <target state="translated">처리할 이벤트의 라우트된 이벤트 식별자입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>A reference to the class handler implementation.</source>
          <target state="translated">클래스 처리기 구현에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>Registers a class handler for a particular routed event.</source>
          <target state="translated">특정 라우트된 이벤트에 대한 클래스 처리기를 등록합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing.</source>
          <target state="translated">클래스 처리에 백업 하는 라우트된 이벤트 구현 되는 연결 된 이벤트를 비롯 한 라우트된 이벤트를 사용할 수 있는 기능입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>A class handler is like a static handler that exists for all instances of the class.</source>
          <target state="translated">클래스 처리기 클래스의 모든 인스턴스에 대 한 존재 하는 정적 처리기와 비슷합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the <ph id="ph1">`sender`</ph> parameter and/or the event data.</source>
          <target state="translated">처리기가 정적, 클래스 처리기를 사용 하 여 직접 인스턴스 속성을 변경할 수 없지만 통해 인스턴스에 액세스할 수 때문에 <ph id="ph1">`sender`</ph> 매개 변수 및/또는 이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>Class handlers are invoked before instance handlers.</source>
          <target state="translated">인스턴스 처리기 앞 클래스 처리기가 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>You can implement a class handler that has the behavior of marking the event as handled.</source>
          <target state="translated">이벤트 처리로 표시의 동작을 포함 하는 클래스 처리기를 구현할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.</source>
          <target state="translated">따라서 처리 된 이벤트에 대해 특별히 인스턴스 처리기 등록 하지 않는 한 클래스 처리 이벤트에 대 한 인스턴스 처리기 호출 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>Many of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> base element events provide class handling virtual methods.</source>
          <target state="translated">대부분의 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 의 이벤트는 가상 메서드를 처리 하는 클래스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>By overriding these methods in classes that inherit the base classes, you can implement class handling without calling <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph> in static constructors.</source>
          <target state="translated">기본 클래스를 상속 하는 클래스에서 이러한 메서드를 재정의 하 여 클래스 호출 하지 않고 처리를 구현할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph> 정적 생성자에 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>These class handling methods typically exist for input events and have names that start with "On" and end with the name of the event being class handled.</source>
          <target state="translated">일반적으로 이러한 클래스 처리 메서드는 입력된 이벤트에 대해 존재 하 고 이름이 "On"으로 시작 되 고 클래스에서 처리 되는 이벤트의 이름으로 끝납니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>For more information about class handling, see <bpt id="p1">[</bpt>Marking Routed Events as Handled, and Class Handling<ept id="p1">](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)</ept>.</source>
          <target state="translated">클래스 처리에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>표시 라우트된 이벤트로 클래스를 처리 하 고,<ept id="p1">](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>Using this signature, class handlers will be registered to invoke only in response to unhandled events.</source>
          <target state="translated">이 서명을 사용 하 여, 처리 되지 않은 이벤트에 대 한 응답에만 호출할 클래스 처리기를 등록 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>You can also register class handlers to invoke even if the event arguments are marked handled, by using the <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature, with <ph id="ph2">`handledEventsToo`</ph> set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">이벤트 인수를 사용 하 여 처리, 표시 된 경우에 호출 하는 클래스 처리기를 등록할 수도 있습니다는 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> 서명을와 <ph id="ph2">`handledEventsToo`</ph> 로 설정 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
          <source>The following example adds a handler for <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph>, calling <ph id="ph2">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">에 대 한 처리기를 추가 하는 다음 예제에서는 <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph>호출, <ph id="ph2">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>The type of the class that is declaring class handling.</source>
          <target state="translated">클래스 처리를 선언하는 클래스의 형식입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>The routed event identifier of the event to handle.</source>
          <target state="translated">처리할 이벤트의 라우트된 이벤트 식별자입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>A reference to the class handler implementation.</source>
          <target state="translated">클래스 처리기 구현에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to invoke this class handler even if arguments of the routed event have been marked as handled; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to retain the default behavior of not invoking the handler on any marked-handled event.</source>
          <target state="translated">라우트된 이벤트의 인수가 처리된 것으로 표시된 경우에도 이 클래스 처리기를 호출하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 이벤트가 처리된 것으로 표시된 경우 처리기를 호출하지 않는 기본 동작을 유지하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Registers a class handler for a particular routed event, with the option to handle events where event data is already marked handled.</source>
          <target state="translated">특정 라우트된 이벤트에 대한 클래스 처리기를 등록하며, 이벤트 데이터가 이미 처리된 것으로 표시된 경우에도 이벤트를 처리할 수 있는 옵션이 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing.</source>
          <target state="translated">클래스 처리에 백업 하는 라우트된 이벤트 구현 되는 연결 된 이벤트를 비롯 한 라우트된 이벤트를 사용할 수 있는 기능입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>A class handler is like a static handler that exists for all instances of the class.</source>
          <target state="translated">클래스 처리기 클래스의 모든 인스턴스에 대 한 존재 하는 정적 처리기와 비슷합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the <ph id="ph1">`sender`</ph> parameter and/or the event data.</source>
          <target state="translated">처리기가 정적, 클래스 처리기를 사용 하 여 직접 인스턴스 속성을 변경할 수 없지만 통해 인스턴스에 액세스할 수 때문에 <ph id="ph1">`sender`</ph> 매개 변수 및/또는 이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Class handlers are invoked before instance handlers.</source>
          <target state="translated">인스턴스 처리기 앞 클래스 처리기가 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>You can implement a class handler that has the behavior of marking the event as handled.</source>
          <target state="translated">이벤트 처리로 표시의 동작을 포함 하는 클래스 처리기를 구현할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.</source>
          <target state="translated">따라서 처리 된 이벤트에 대해 특별히 인스턴스 처리기 등록 하지 않는 한 클래스 처리 이벤트에 대 한 인스턴스 처리기 호출 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Many of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> base element events provide class handling virtual methods.</source>
          <target state="translated">대부분의 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 의 이벤트는 가상 메서드를 처리 하는 클래스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>By overriding these methods in classes that inherit the base classes, you can implement class handling without calling <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph> in static constructors.</source>
          <target state="translated">기본 클래스를 상속 하는 클래스에서 이러한 메서드를 재정의 하 여 클래스 호출 하지 않고 처리를 구현할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph> 정적 생성자에 있습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>These class handling methods typically exist for input events and have names that start with "On" and end with the name of the event being class handled.</source>
          <target state="translated">일반적으로 이러한 클래스 처리 메서드는 입력된 이벤트에 대해 존재 하 고 이름이 "On"으로 시작 되 고 클래스에서 처리 되는 이벤트의 이름으로 끝납니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>For more information about class handling, see <bpt id="p1">[</bpt>Marking Routed Events as Handled, and Class Handling<ept id="p1">](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)</ept>.</source>
          <target state="translated">클래스 처리에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>표시 라우트된 이벤트로 클래스를 처리 하 고,<ept id="p1">](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Using this signature, class handlers can be registered to invoke upon handled events, by setting <ph id="ph1">`handledEventsToo`</ph> set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">이 서명을 사용 하 여, 클래스 처리기 등록할 수를 설정 하 여 이벤트가 처리 시 호출할 <ph id="ph1">`handledEventsToo`</ph> 로 설정 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Generally, you should do this only if there is a known handling issue you are trying to work around, such as input system handling from mouse or keyboard events.</source>
          <target state="translated">일반적으로 마우스 또는 키보드 이벤트를 처리 하는 입력된 시스템 등 해결 하려고 하는 알려진된 처리 문제가 있는 경우에이 작업을 수행 해야 있습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>The name of the routed event.</source>
          <target state="translated">라우트된 이벤트의 이름입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>The name must be unique within the owner type and cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph> or an empty string.</source>
          <target state="translated">이 이름은 소유자 형식 내에서 고유해야 하며 <ph id="ph1">&lt;see langword="null" /&gt;</ph> 또는 빈 문자열이 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>The routing strategy of the event as a value of the enumeration.</source>
          <target state="translated">열거형의 값으로 이벤트의 라우팅 전략입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>The type of the event handler.</source>
          <target state="translated">이벤트 처리기의 형식입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>This must be a delegate type and cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이는 대리자 형식이어야 하며 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>The owner class type of the routed event.</source>
          <target state="translated">라우트된 이벤트의 소유자 클래스 형식입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>This cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 없습니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>Registers a new routed event with the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> event system.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 이벤트 시스템에 새 라우트된 이벤트를 등록합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>The identifier for the newly registered routed event.</source>
          <target state="translated">새로 등록된 라우트된 이벤트의 식별자입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>This identifier object can now be stored as a static field in a class and then used as a parameter for methods that attach handlers to the event.</source>
          <target state="translated">이 식별자 개체는 클래스의 정적 필드로 저장한 다음 이벤트에 처리기를 연결하는 메서드에 대한 매개 변수로 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>The routed event identifier is also used for other event system <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자는 다른 이벤트 시스템 <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph>에도 사용됩니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>Use the return value of this method to create the static declaration for a unique <ph id="ph1">&lt;xref:System.Windows.RoutedEvent&gt;</ph> identifier field.</source>
          <target state="translated">이 메서드의 반환 값을 사용 하 여 고유한에 대 한 정적 선언을 만들려면 <ph id="ph1">&lt;xref:System.Windows.RoutedEvent&gt;</ph> 식별자 필드입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>This field should be stored within the owner type.</source>
          <target state="translated">이 필드는 소유자 형식 내에서 저장 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>There are a considerable number of conventions and best practices associated with how routed events should be named, registered, and exposed in a class.</source>
          <target state="translated">규칙의 상당한 여러 가지 고 라우트된 이벤트와 관련 된 모범 사례 됩니다 라는, 등록, 클래스에 노출 합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
          <source>For more information, see <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>라우트된 이벤트 개요<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept>합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>