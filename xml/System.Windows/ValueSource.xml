<Type Name="ValueSource" FullName="System.Windows.ValueSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c64500fcc9768d42490c1ff18e54293bdc46149c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct ValueSource" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ValueSource extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Windows.ValueSource" />
  <TypeSignature Language="VB.NET" Value="Public Structure ValueSource" />
  <TypeSignature Language="C++ CLI" Value="public value class ValueSource" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="1ea38-101">
        <see cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />에서 반환되는 정보를 보고합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1ea38-101">Reports the information returned from <see cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ea38-102">대부분의 정보는 <xref:System.Windows.ValueSource> 전송에 포함 되어는 <xref:System.Windows.ValueSource.BaseValueSource%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="1ea38-102">Most of the information that <xref:System.Windows.ValueSource> transmits is contained in the <xref:System.Windows.ValueSource.BaseValueSource%2A> property.</span></span> <span data-ttu-id="1ea38-103">이 속성의 전체 정확히 한 가지 측면을 지정 하는 열거형 값을 포함 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 속성 시스템은 종속성 속성의 유효 값에 대 한 책임 지는 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ea38-103">This property contains an enumeration value that specifies exactly one aspect of the overall [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system that is responsible for the effective value of a dependency property.</span></span>  
  
 <span data-ttu-id="1ea38-104">종속성 속성 값에 대 한 흥미로운 될 수 있는 다른 정보에는 기준 값 이외 여부 값은 애니메이션 효과 줄 값 (예: 바인딩 또는 동적 리소스 참조)는 식과 관련 되어 있는지 여부 및입니다.</span><span class="sxs-lookup"><span data-stu-id="1ea38-104">Besides the base value, the other information that might be interesting about a dependency property value is whether the value is being animated, and whether the value involves an expression (such as a binding, or a dynamic resource reference).</span></span> <span data-ttu-id="1ea38-105">이 정보를 보고 <xref:System.Windows.ValueSource.IsAnimated%2A> 및 <xref:System.Windows.ValueSource.IsExpression%2A> 각각.</span><span class="sxs-lookup"><span data-stu-id="1ea38-105">This information is reported by <xref:System.Windows.ValueSource.IsAnimated%2A> and <xref:System.Windows.ValueSource.IsExpression%2A> respectively.</span></span> <span data-ttu-id="1ea38-106">또한 강제 변환 속성 값에 대해 작동 하는 경우 속성은 적절된 한 값을 유지 하 고 속성 값이 특정 강제 변환의 제약 조건을 변경 되거나 리프트 원하는 값에 도달 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ea38-106">Also, if coercion is acting on a property value, the property retains a desired value, and the property value will attempt to reach that desired value if the constraints of the specific coercion are changed or lifted.</span></span> <span data-ttu-id="1ea38-107">강제 변환된 속성 값이 적절 하지 않은 보고 합니다 <xref:System.Windows.ValueSource.IsCoerced%2A> 은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="1ea38-107">A coerced property that is not at its desired value will report that <xref:System.Windows.ValueSource.IsCoerced%2A> is `true`.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyPropertyHelper" />
    <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
  </Docs>
  <Members>
    <Member MemberName="BaseValueSource">
      <MemberSignature Language="C#" Value="public System.Windows.BaseValueSource BaseValueSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.BaseValueSource BaseValueSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.BaseValueSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseValueSource As BaseValueSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::BaseValueSource BaseValueSource { System::Windows::BaseValueSource get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.BaseValueSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1ea38-108">값이 포함된 종속성 속성 시스템을 제공한 소스를 보고하는 <see cref="T:System.Windows.BaseValueSource" /> 열거형의 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-108">Gets a value of the <see cref="T:System.Windows.BaseValueSource" /> enumeration, which reports the source that provided the dependency property system with a value.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1ea38-109">열거형 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-109">A value of the enumeration.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ea38-110">기본 값이 유효 값 강제 변환 또는 애니메이션이 속성에서 수행 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="1ea38-110">The base value is not the effective value if either coercion or animation is acting on the property.</span></span> <span data-ttu-id="1ea38-111">확인 <xref:System.Windows.ValueSource.IsAnimated%2A> 및 <xref:System.Windows.ValueSource.IsCoerced%2A> 기준 값이 유효한 지 여부를 확인 하려는 경우.</span><span class="sxs-lookup"><span data-stu-id="1ea38-111">Check <xref:System.Windows.ValueSource.IsAnimated%2A> and <xref:System.Windows.ValueSource.IsCoerced%2A> if you want to determine whether the base value is the effective value.</span></span>  
  
 <span data-ttu-id="1ea38-112">확인할 수도 있습니다 <xref:System.Windows.ValueSource.IsExpression%2A> 기준 값 식을 계산 것을 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1ea38-112">You might also want to check <xref:System.Windows.ValueSource.IsExpression%2A> to see if the base value was evaluated out of an expression.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="1ea38-113">해당 <see cref="T:System.Windows.ValueSource" />과 비교할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-113">The object to compare with this <see cref="T:System.Windows.ValueSource" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ea38-114">이 <see cref="T:System.Windows.ValueSource" />가 지정된 개체와 같은지 여부를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-114">Returns a value indicating whether this <see cref="T:System.Windows.ValueSource" /> is equal to a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ea38-115">제공된 개체가 현재 <see cref="T:System.Windows.ValueSource" />와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-115">
              <see langword="true" /> if the provided object is equivalent to the current <see cref="T:System.Windows.ValueSource" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ea38-116">이 구현에서는 값이 같은지를 각각의 각 속성 값에 따라 <xref:System.Windows.ValueSource> 구조입니다.</span><span class="sxs-lookup"><span data-stu-id="1ea38-116">This implementation supports value equality, based on each of the property values of each <xref:System.Windows.ValueSource> structure.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1ea38-117">이 <see cref="T:System.Windows.ValueSource" />의 해시 코드를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-117">Returns the hash code for this <see cref="T:System.Windows.ValueSource" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ea38-118">부호 없는 32비트 정수 해시 코드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-118">A 32-bit unsigned integer hash code.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ea38-119">기반으로이 해시 코드는 <xref:System.Windows.ValueSource.BaseValueSource%2A> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="1ea38-119">This hash code is based on the <xref:System.Windows.ValueSource.BaseValueSource%2A> value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="IsAnimated">
      <MemberSignature Language="C#" Value="public bool IsAnimated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnimated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsAnimated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnimated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnimated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1ea38-120">속성에 애니메이션이 적용되는지 여부를 선언하는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-120">Gets a value that declares whether the property is being animated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1ea38-121">속성에 애니메이션이 적용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-121">
              <see langword="true" /> if the property is animated; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ea38-122">현재 애니메이션을 적용 하는 모든 속성에 대 한 소스에서 보고 <xref:System.Windows.ValueSource.BaseValueSource%2A> 종속성 속성 보다 우선 순위가 기준 값에 애니메이션 작동 하기 때문에 즉시 관련 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1ea38-122">For any property that is currently being animated, the source reported by <xref:System.Windows.ValueSource.BaseValueSource%2A> is not immediately relevant, because the animation operates at higher dependency property precedence than the base value.</span></span> <span data-ttu-id="1ea38-123">우선 순위 및 애니메이션에 대 한 자세한 내용은 참조 [종속성 속성 값 우선 순위](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="1ea38-123">For more information about precedence and animations, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="IsCoerced">
      <MemberSignature Language="C#" Value="public bool IsCoerced { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCoerced" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsCoerced" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCoerced As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCoerced { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1ea38-124">이 값이 종속성 속성에 적용된 <see cref="T:System.Windows.CoerceValueCallback" /> 구현의 결과인지 여부를 선언하는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-124">Gets a value that declares whether this value resulted from a <see cref="T:System.Windows.CoerceValueCallback" /> implementation applied to a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1ea38-125">값이 종속성 속성에 적용된 <see cref="T:System.Windows.CoerceValueCallback" /> 구현에 의해 생성되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-125">
              <see langword="true" /> if the value resulted from a <see cref="T:System.Windows.CoerceValueCallback" /> implementation applied to a dependency property; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ea38-126">강제 변환 속성 값에 대해 작동 하는 경우 속성은 적절된 한 값을 유지 하 고 속성 값이 특정 강제 변환의 제약 조건을 변경 되거나 리프트 원하는 값에 도달 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ea38-126">If coercion is acting on a property value, the property retains a desired value, and the property value will attempt to reach that desired value if the constraints of the specific coercion are changed or lifted.</span></span> <span data-ttu-id="1ea38-127">강제 변환된 속성 값이 적절 하지 않은 보고 합니다 <xref:System.Windows.ValueSource.IsCoerced%2A> 은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="1ea38-127">A coerced property that is not at its desired value will report that <xref:System.Windows.ValueSource.IsCoerced%2A> is `true`.</span></span>  
  
 <span data-ttu-id="1ea38-128">기준 값 보다 높은 우선 순위로 역할 수 있고 기본 값이 설정 되는 방식에 참여 엄밀히 말해이 강제 합니다.</span><span class="sxs-lookup"><span data-stu-id="1ea38-128">Coercion acts at higher precedence than the base value, and is not strictly speaking a participant in how the base value is set.</span></span> <span data-ttu-id="1ea38-129">이 속성의 값이 아니라 강제 변환 상태 따라서 보고 되는 <xref:System.Windows.BaseValueSource> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="1ea38-129">Therefore the state of being coerced is reported by this property, rather than by a value of the <xref:System.Windows.BaseValueSource> enumeration.</span></span> <span data-ttu-id="1ea38-130">강제 변환, 기준 값 및 우선 순위에 대 한 자세한 내용은 참조 [종속성 속성 값 우선 순위](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="1ea38-130">For more information about coercion, base values, and precedence, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="IsCurrent">
      <MemberSignature Language="C#" Value="public bool IsCurrent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsCurrent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCurrent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCurrent { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1ea38-131">값이 <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> 메서드에 의해 설정되었는지 여부를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-131">Gets whether the value was set by the <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1ea38-132">값이 <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> 메서드에 의해 설정되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-132">
              <see langword="true" /> if the value was set by the <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> method; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExpression">
      <MemberSignature Language="C#" Value="public bool IsExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExpression" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsExpression" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExpression As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExpression { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1ea38-133">이 값이 계산된 식에 의해 생성되는지 여부를 선언하는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-133">Gets a value that declares whether this value resulted from an evaluated expression.</span>
          </span>
          <span data-ttu-id="1ea38-134">이 식은 바인딩을 지원하는 <see cref="T:System.Windows.Data.BindingExpression" />이거나 [DynamicResource 태그 확장](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)을 지원하는 식 등의 내부 식일 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-134">This might be a <see cref="T:System.Windows.Data.BindingExpression" /> supporting a binding, or an internal expression such as those that support the [DynamicResource Markup Extension](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1ea38-135">값이 계산된 식에서 생성되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-135">
              <see langword="true" /> if the value came from an evaluated expression; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ea38-136">계산된 된 식 또한 설정 조건,에 값으로, 식이 적용 된 특정 기준 값을 보고할 <xref:System.Windows.ValueSource.BaseValueSource%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ea38-136">An evaluated expression will also report the specific base value setting condition where the expression was applied, as a value in <xref:System.Windows.ValueSource.BaseValueSource%2A>.</span></span> <span data-ttu-id="1ea38-137"><xref:System.Windows.ValueSource.BaseValueSource%2A> 는 여전히 모든 속성에 대 한 매우 관련 여기서 <xref:System.Windows.ValueSource.IsExpression%2A> 은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="1ea38-137">The <xref:System.Windows.ValueSource.BaseValueSource%2A> is still very relevant for any property where <xref:System.Windows.ValueSource.IsExpression%2A> is `true`.</span></span> <span data-ttu-id="1ea38-138">값 식을 통해 반환 되었는지 여부를 이해 하는 값이 설정 되지를 직접 같은 상속 된 속성 값 또는 서식 파일을 통해 처럼 경우에 특히 유용 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1ea38-138">Knowing whether a value came through an expression can be particularly useful if the value was set indirectly, such as through a template or an inherited property value.</span></span>  
  
 <span data-ttu-id="1ea38-139">식을 계산 하지 못하게 하는 경우 (바인딩이 실패 했습니다.; 해당 이름의 리소스가 없습니다) 기본값 값에서 가장 가능성이 높은 속성 시스템의 다른 참가자에 일부 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1ea38-139">If an expression fails to evaluate (the binding failed; no resource of that name was found), then the value will come from some other participant in the property system, most likely the default value.</span></span> <span data-ttu-id="1ea38-140">해당 소스에서 보고 됩니다 <xref:System.Windows.ValueSource.BaseValueSource%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ea38-140">That source is then reported in <xref:System.Windows.ValueSource.BaseValueSource%2A>.</span></span> <span data-ttu-id="1ea38-141">식 계산이 실패는 반환 `false` 에 대 한 <xref:System.Windows.ValueSource.IsExpression%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ea38-141">Failed expression evaluations will return `false` for <xref:System.Windows.ValueSource.IsExpression%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.ValueSource vs1, System.Windows.ValueSource vs2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.ValueSource vs1, valuetype System.Windows.ValueSource vs2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.op_Equality(System.Windows.ValueSource,System.Windows.ValueSource)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (vs1 As ValueSource, vs2 As ValueSource) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::ValueSource vs1, System::Windows::ValueSource vs2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vs1" Type="System.Windows.ValueSource" />
        <Parameter Name="vs2" Type="System.Windows.ValueSource" />
      </Parameters>
      <Docs>
        <param name="vs1">
          <span data-ttu-id="1ea38-142">비교할 첫 번째 <see cref="T:System.Windows.ValueSource" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-142">The first <see cref="T:System.Windows.ValueSource" /> to compare.</span>
          </span>
        </param>
        <param name="vs2">
          <span data-ttu-id="1ea38-143">비교할 두 번째 <see cref="T:System.Windows.ValueSource" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-143">The second <see cref="T:System.Windows.ValueSource" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ea38-144">두 <see cref="T:System.Windows.ValueSource" /> 인스턴스의 값이 같은지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-144">Determines whether two <see cref="T:System.Windows.ValueSource" /> instances have the same value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ea38-145">두 <see cref="T:System.Windows.ValueSource" /> 인스턴스가 동일하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-145">
              <see langword="true" /> if the two <see cref="T:System.Windows.ValueSource" /> instances are equivalent; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ea38-146">이 구현에서는 호출 <xref:System.Windows.ValueSource.Equals%2A>, 지원 값의 모든 속성을 기준으로 같은지 여부 및 <xref:System.Windows.ValueSource>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ea38-146">This implementation calls <xref:System.Windows.ValueSource.Equals%2A>, and supports value equality based on all properties of <xref:System.Windows.ValueSource>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.ValueSource vs1, System.Windows.ValueSource vs2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.ValueSource vs1, valuetype System.Windows.ValueSource vs2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.op_Inequality(System.Windows.ValueSource,System.Windows.ValueSource)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (vs1 As ValueSource, vs2 As ValueSource) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::ValueSource vs1, System::Windows::ValueSource vs2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vs1" Type="System.Windows.ValueSource" />
        <Parameter Name="vs2" Type="System.Windows.ValueSource" />
      </Parameters>
      <Docs>
        <param name="vs1">
          <span data-ttu-id="1ea38-147">비교할 첫 번째 <see cref="T:System.Windows.ValueSource" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-147">The first <see cref="T:System.Windows.ValueSource" /> to compare.</span>
          </span>
        </param>
        <param name="vs2">
          <span data-ttu-id="1ea38-148">비교할 두 번째 <see cref="T:System.Windows.ValueSource" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-148">The second <see cref="T:System.Windows.ValueSource" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ea38-149">두 <see cref="T:System.Windows.ValueSource" /> 인스턴스의 값이 다른지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-149">Determines whether two <see cref="T:System.Windows.ValueSource" /> instances do not have the same value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ea38-150">두 <see cref="T:System.Windows.ValueSource" /> 인스턴스가 서로 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ea38-150">
              <see langword="true" /> if the two <see cref="T:System.Windows.ValueSource" /> instances are not equivalent; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ea38-151">이 구현에서는 호출 <xref:System.Windows.ValueSource.Equals%2A>, 부정, 및의 모든 속성에 따라 지원 값이 같으면 해당 반환 <xref:System.Windows.ValueSource>합니다.</span><span class="sxs-lookup"><span data-stu-id="1ea38-151">This implementation calls <xref:System.Windows.ValueSource.Equals%2A>, returning its negation, and supports value equality based on all properties of <xref:System.Windows.ValueSource>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
  </Members>
</Type>