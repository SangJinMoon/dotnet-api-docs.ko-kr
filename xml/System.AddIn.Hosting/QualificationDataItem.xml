<Type Name="QualificationDataItem" FullName="System.AddIn.Hosting.QualificationDataItem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0f1d66d0271cf2645ad9234541243065f0b539f6" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36647690" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct QualificationDataItem" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit QualificationDataItem extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Hosting.QualificationDataItem" />
  <TypeSignature Language="VB.NET" Value="Public Structure QualificationDataItem" />
  <TypeSignature Language="C++ CLI" Value="public value class QualificationDataItem" />
  <TypeSignature Language="F#" Value="type QualificationDataItem = struct" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>호스트에서 사용하기 위해 파이프라인 세그먼트의 개발자가 제공하는 정보를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여 파이프라인 세그먼트에 적용 된 이름/값 쌍으로 구성 된 정규화 데이터의 각 항목은 <xref:System.AddIn.Pipeline.QualificationDataAttribute> 특성 (예를 들어 세그먼트에 대 한 권장 되는 격리 수준) 세그먼트의 사용을 정규화 하는 정보를 제공 합니다. <xref:System.AddIn.Hosting.QualificationDataItem> 구조 하나의 이름/값 쌍 및에 적용 된 파이프라인 세그먼트의 형식을 포함 합니다.  
  
 사용 하 여는 <xref:System.AddIn.Hosting.AddInToken.QualificationData%2A?displayProperty=nameWithType> 속성을 포함 하는 중첩 된 사전 집합이 <xref:System.AddIn.Hosting.QualificationDataItem> 와 관련 된 파이프라인 세그먼트에 대 한 구조는 <xref:System.AddIn.Hosting.AddInToken>합니다.  
  
 또는 사용 하 여는 <xref:System.AddIn.Hosting.AddInToken.GetEnumerator%2A?displayProperty=nameWithType> 방법에 대 한 열거자를 가져옵니다는 <xref:System.AddIn.Hosting.QualificationDataItem> 파이프라인 세그먼트의 구조 또는 연결 된 토큰을 사용 하 여 단순히는 `foreach` 문 (`For Each` Visual Basic의 `for each` Visual c + +에서)를 토큰의 컬렉션 처럼 처리할 <xref:System.AddIn.Hosting.QualificationDataItem> 구조입니다.  
  
   
  
## Examples  
 다음 예에서는 나열 각각와 연관 된 파이프라인 세그먼트에 대 한 정규화 데이터 <xref:System.AddIn.Hosting.AddInToken> 토큰의 컬렉션에 있습니다.  
  
 [!code-csharp[AddInP3Host#12](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#12)]
 [!code-vb[AddInP3Host#12](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#12)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.QualificationDataItem.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="qualificationDataItem.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">비교할 개체입니다.</param>
        <summary>지정된 개체가 현재 정규화 데이터 항목과 같은지 확인합니다.</summary>
        <returns>
          <paramref name="obj" />가 현재 인스턴스와 동일하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.QualificationDataItem.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="qualificationDataItem.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 정규화 데이터 항목의 해시 코드를 가져옵니다.</summary>
        <returns>해시 코드입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.QualificationDataItem.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.AddIn.Hosting.QualificationDataItem.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>정규화 데이터 항목의 이름을 가져옵니다.</summary>
        <value>정규화 데이터 항목의 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여 파이프라인 세그먼트에 적용 된 이름/값 쌍으로 구성 된 정규화 데이터의 각 항목은 <xref:System.AddIn.Pipeline.QualificationDataAttribute> 특성이 추가 기능에 소비자에 게 정보를 제공 합니다. <xref:System.AddIn.Hosting.QualificationDataItem.Name%2A> 속성 이름을 가져옵니다. 사용 하 여는 <xref:System.AddIn.Hosting.QualificationDataItem.Value%2A> 속성 값을 가져옵니다.  
  
   
  
## Examples  
 다음 예에서는 나열 각각와 연관 된 파이프라인 세그먼트에 대 한 정규화 데이터 <xref:System.AddIn.Hosting.AddInToken> 토큰의 컬렉션에 있습니다. <xref:System.AddIn.Hosting.QualificationDataItem.Name%2A> 속성은 각 항목의 이름을 표시 하는 데 사용 합니다.  
  
 [!code-csharp[AddInP3Host#12](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#12)]
 [!code-vb[AddInP3Host#12](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.AddIn.Hosting.QualificationDataItem item1, System.AddIn.Hosting.QualificationDataItem item2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.AddIn.Hosting.QualificationDataItem item1, valuetype System.AddIn.Hosting.QualificationDataItem item2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.QualificationDataItem.op_Equality(System.AddIn.Hosting.QualificationDataItem,System.AddIn.Hosting.QualificationDataItem)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (item1 As QualificationDataItem, item2 As QualificationDataItem) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::AddIn::Hosting::QualificationDataItem item1, System::AddIn::Hosting::QualificationDataItem item2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.AddIn.Hosting.QualificationDataItem * System.AddIn.Hosting.QualificationDataItem -&gt; bool" Usage="item1 = item2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item1" Type="System.AddIn.Hosting.QualificationDataItem" />
        <Parameter Name="item2" Type="System.AddIn.Hosting.QualificationDataItem" />
      </Parameters>
      <Docs>
        <param name="item1">비교할 첫 번째 <see cref="T:System.AddIn.Hosting.QualificationDataItem" />입니다.</param>
        <param name="item2">비교할 두 번째 <see cref="T:System.AddIn.Hosting.QualificationDataItem" />입니다.</param>
        <summary>두 <see cref="T:System.AddIn.Hosting.QualificationDataItem" /> 구조체가 같은지 확인합니다.</summary>
        <returns>
          <paramref name="item1" />과 <paramref name="item2" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.AddIn.Hosting.QualificationDataItem item1, System.AddIn.Hosting.QualificationDataItem item2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.AddIn.Hosting.QualificationDataItem item1, valuetype System.AddIn.Hosting.QualificationDataItem item2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.QualificationDataItem.op_Inequality(System.AddIn.Hosting.QualificationDataItem,System.AddIn.Hosting.QualificationDataItem)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (item1 As QualificationDataItem, item2 As QualificationDataItem) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::AddIn::Hosting::QualificationDataItem item1, System::AddIn::Hosting::QualificationDataItem item2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.AddIn.Hosting.QualificationDataItem * System.AddIn.Hosting.QualificationDataItem -&gt; bool" Usage="System.AddIn.Hosting.QualificationDataItem.op_Inequality (item1, item2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item1" Type="System.AddIn.Hosting.QualificationDataItem" />
        <Parameter Name="item2" Type="System.AddIn.Hosting.QualificationDataItem" />
      </Parameters>
      <Docs>
        <param name="item1">비교할 첫 번째 <see cref="T:System.AddIn.Hosting.QualificationDataItem" />입니다.</param>
        <param name="item2">비교할 두 번째 <see cref="T:System.AddIn.Hosting.QualificationDataItem" />입니다.</param>
        <summary>두 <see cref="T:System.AddIn.Hosting.QualificationDataItem" /> 구조체가 서로 다른지 확인합니다.</summary>
        <returns>
          <paramref name="item1" />과 <paramref name="item2" />가 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Segment">
      <MemberSignature Language="C#" Value="public System.AddIn.Hosting.AddInSegmentType Segment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.AddIn.Hosting.AddInSegmentType Segment" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.QualificationDataItem.Segment" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Segment As AddInSegmentType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::AddIn::Hosting::AddInSegmentType Segment { System::AddIn::Hosting::AddInSegmentType get(); };" />
      <MemberSignature Language="F#" Value="member this.Segment : System.AddIn.Hosting.AddInSegmentType" Usage="System.AddIn.Hosting.QualificationDataItem.Segment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Hosting.AddInSegmentType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>정규화 데이터가 적용된 파이프라인 세그먼트를 식별하는 값을 가져옵니다.</summary>
        <value>데이터 항목이 적용된 파이프라인 세그먼트의 종류입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 정규화 데이터를 열거 하는 경우이 속성을 사용 하 여 파이프라인의 특정 세그먼트에 속하는 자격 데이터를 확인 합니다.  
  
> [!NOTE]
>  추가 기능 모델의 추가 기능 [호스트] 보기에 적용 되는 정규화 데이터를 사용 하지 않습니다. 결과적으로, 검색 되지 것입니다 정규화 데이터 항목을 열거할 때 인 항목 <xref:System.AddIn.Hosting.QualificationDataItem.Segment%2A> 속성은 <xref:System.AddIn.Hosting.AddInSegmentType.HostViewOfAddIn>합니다.  
  
   
  
## Examples  
 다음 예에서는 나열 각각와 연관 된 파이프라인 세그먼트에 대 한 정규화 데이터 <xref:System.AddIn.Hosting.AddInToken> 토큰의 컬렉션에 있습니다. <xref:System.AddIn.Hosting.QualificationDataItem.Segment%2A> 속성 세그먼트의 종류를 표시 하는 데 사용 됩니다.  
  
 [!code-csharp[AddInP3Host#12](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#12)]
 [!code-vb[AddInP3Host#12](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.QualificationDataItem.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.AddIn.Hosting.QualificationDataItem.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>정규화 데이터 항목의 값을 가져옵니다.</summary>
        <value>항목의 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여 파이프라인 세그먼트에 적용 된 이름/값 쌍으로 구성 된 정규화 데이터의 각 항목은 <xref:System.AddIn.Pipeline.QualificationDataAttribute> 특성이 추가 기능에 소비자에 게 정보를 제공 합니다. <xref:System.AddIn.Hosting.QualificationDataItem.Value%2A> 속성 값을 가져옵니다. 사용 하 여는 <xref:System.AddIn.Hosting.QualificationDataItem.Name%2A> 속성 이름을 가져올 수 있습니다.  
  
   
  
## Examples  
 다음 예에서는 나열 각각와 연관 된 파이프라인 세그먼트에 대 한 정규화 데이터 <xref:System.AddIn.Hosting.AddInToken> 토큰의 컬렉션에 있습니다. <xref:System.AddIn.Hosting.QualificationDataItem.Value%2A> 속성 항목의 값을 표시 하는 데 사용 됩니다.  
  
 [!code-csharp[AddInP3Host#12](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#12)]
 [!code-vb[AddInP3Host#12](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>