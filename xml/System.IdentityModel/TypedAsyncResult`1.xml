<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TypedAsyncResult`1.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f3b78f94e783d490a1ab918e17ca5b6ba36d5969.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f3b78f94e783d490a1ab918e17ca5b6ba36d5969</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.TypedAsyncResult`1">
          <source>The type of the result.</source>
          <target state="translated">결과의 형식입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.IdentityModel.TypedAsyncResult`1">
          <source>A concrete implementation of <ph id="ph1">&lt;see cref="T:System.IdentityModel.AsyncResult" /&gt;</ph> that will wrap the result <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> and return it when the <ph id="ph3">&lt;see cref="M:System.IdentityModel.TypedAsyncResult`1.End(System.IAsyncResult)" /&gt;</ph> method is called.</source>
          
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.IdentityModel.TypedAsyncResult`1">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IdentityModel.TypedAsyncResult`1" /&gt;</ph> class.</source>
          
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.TypedAsyncResult`1.#ctor(System.Object)">
          <source>A user-defined object that qualifies or contains information about an asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.TypedAsyncResult`1.#ctor(System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IdentityModel.TypedAsyncResult`1" /&gt;</ph> class that has a state object.</source>
          
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.TypedAsyncResult`1.#ctor(System.Object)">
          <source>Use this constructor if your <ph id="ph1">&lt;xref:System.IdentityModel.TypedAsyncResult%601&gt;</ph> instance does not need a callback delegate.</source>
          <target state="translated">경우에이 생성자를 사용 하 여 프로그램 <ph id="ph1">&lt;xref:System.IdentityModel.TypedAsyncResult%601&gt;</ph> 인스턴스 콜백 대리자를 필요 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.TypedAsyncResult`1.#ctor(System.AsyncCallback,System.Object)">
          <source>The method to be called when the asynchronous operation completes.</source>
          
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.TypedAsyncResult`1.#ctor(System.AsyncCallback,System.Object)">
          <source>A user-defined object that qualifies or contains information about an asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.TypedAsyncResult`1.#ctor(System.AsyncCallback,System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IdentityModel.TypedAsyncResult`1" /&gt;</ph> class that has a callback delegate and a state object.</source>
          
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="T:System.IdentityModel.TypedAsyncResult`1">
          <source>Called to complete the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.TypedAsyncResult`1.Complete(`0,System.Boolean)">
          <source>The result to be wrapped.</source>
          
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.TypedAsyncResult`1.Complete(`0,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the asynchronous operation completed synchronously; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.TypedAsyncResult`1.Complete(`0,System.Boolean)">
          <source>Call this version of complete when your asynchronous operation is complete and no exception was encountered.</source>
          
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.TypedAsyncResult`1.Complete(`0,System.Boolean)">
          <source>It updates the state of the operation and notifies the callback.</source>
          
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.TypedAsyncResult`1.Complete(`0,System.Boolean,System.Exception)">
          <source>The result to be wrapped.</source>
          
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.TypedAsyncResult`1.Complete(`0,System.Boolean,System.Exception)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the asynchronous operation completed synchronously; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.TypedAsyncResult`1.Complete(`0,System.Boolean,System.Exception)">
          <source>The exception that occurred during the processing of the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.TypedAsyncResult`1.Complete(`0,System.Boolean,System.Exception)">
          <source>Call this version of complete if you raise an exception during processing.</source>
          
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.TypedAsyncResult`1.Complete(`0,System.Boolean,System.Exception)">
          <source>In addition to notifying the callback, it captures the exception and stores it to be thrown during the call to the <ph id="ph1">&lt;see cref="M:System.IdentityModel.TypedAsyncResult`1.End(System.IAsyncResult)" /&gt;</ph> method.</source>
          
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.TypedAsyncResult`1.End(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> representing the status of an asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.TypedAsyncResult`1.End(System.IAsyncResult)">
          <source>End should be called when the End function for the asynchronous operation is complete.</source>
          
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.TypedAsyncResult`1.End(System.IAsyncResult)">
          <source>It ensures the asynchronous operation is complete, and does some common validation.</source>
          
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.TypedAsyncResult`1.End(System.IAsyncResult)">
          <source>The typed result of the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="P:System.IdentityModel.TypedAsyncResult`1.Result">
          <source>Gets the typed result of the completed asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.TypedAsyncResult`1.Result">
          <source>The typed result of the completed asynchronous operation.</source>
          <target state="translated">완료 된 비동기 작업의 형식화 된 결과입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>