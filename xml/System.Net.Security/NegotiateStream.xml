<Type Name="NegotiateStream" FullName="System.Net.Security.NegotiateStream">
  <Metadata><Meta Name="ms.openlocfilehash" Value="11db0f7e9d3843d1816a582e23224cbcdac14a7f" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52234167" /></Metadata><TypeSignature Language="C#" Value="public class NegotiateStream : System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NegotiateStream extends System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="DocId" Value="T:System.Net.Security.NegotiateStream" />
  <TypeSignature Language="VB.NET" Value="Public Class NegotiateStream&#xA;Inherits AuthenticatedStream" />
  <TypeSignature Language="C++ CLI" Value="public ref class NegotiateStream : System::Net::Security::AuthenticatedStream" />
  <TypeSignature Language="F#" Value="type NegotiateStream = class&#xA;    inherit AuthenticatedStream" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Security.AuthenticatedStream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="9e646-101">클라이언트 및 서버 클라이언트-서버 통신에 필요에 따라 인증 협상 보안 프로토콜을 사용 하는 스트림을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-101">Provides a stream that uses the Negotiate security protocol to authenticate the client, and optionally the server, in client-server communication.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-102">사용 된 <xref:System.Net.Security.NegotiateStream> 클라이언트와 서버 간에 전송 되는 인증에 대 한 정보를 보호 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-102">Use the <xref:System.Net.Security.NegotiateStream> class for authentication and to help secure information transmitted between a client and a server.</span></span> <span data-ttu-id="9e646-103">사용 하 여 <xref:System.Net.Security.NegotiateStream>, 다음을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-103">Using <xref:System.Net.Security.NegotiateStream>, you can do the following.</span></span>  
  
-   <span data-ttu-id="9e646-104">가장 또는 위임에 대 한 서버에 클라이언트의 자격 증명을 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-104">Send the client's credentials to the server for Impersonation or Delegation.</span></span>  
  
-   <span data-ttu-id="9e646-105">서버 인증을 요청 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-105">Request server authentication.</span></span>  
  
-   <span data-ttu-id="9e646-106">암호화 및/또는 전송 하기 전에 데이터에 서명</span><span class="sxs-lookup"><span data-stu-id="9e646-106">Encrypt and/or sign data before transmitting it.</span></span>  
  
 <span data-ttu-id="9e646-107">인증 정보를 전송 하기 전에 수행 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-107">Authentication must be performed before transmitting information.</span></span> <span data-ttu-id="9e646-108">클라이언트 요청 인증을 사용 하 여 동기 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 인증 완료 될 때까지 차단 하는 메서드 또는 비동기 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> 메서드는 인증이 완료 되기를 기다리는 동안 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-108">Clients request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> methods, which block until the authentication completes, or the asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods, which do not block while waiting for the authentication to complete.</span></span> <span data-ttu-id="9e646-109">서버에서 동기를 사용 하 여 인증을 요청할 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 비동기적인지 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-109">Servers request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span> <span data-ttu-id="9e646-110">클라이언트와 서버를 필요에 따라 보안 협상 프로토콜을 사용 하 여 인증 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-110">The client, and optionally the server, is authenticated using the Negotiate security protocol.</span></span> <span data-ttu-id="9e646-111">Windows 95/98 시스템에서 Windows NT LAN Manager (NTLM) 인증에 사용 되는 프로토콜입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-111">On Windows 95/98 systems, Windows NT LAN Manager (NTLM) is the protocol used for authentication.</span></span> <span data-ttu-id="9e646-112">다른 플랫폼 Kerberos 프로토콜은 인증에 대 한 클라이언트와 서버 모두에서 지 원하는 경우; 그렇지 않으면 NTLM이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-112">On other platforms the Kerberos protocol is used for authentication if both client and server support it; otherwise NTLM is used.</span></span> <span data-ttu-id="9e646-113">에 대 한 자세한 설명은 이러한 프로토콜을 msdn.microsoft.com/library/에 MSDN의 Platform SDK 설명서를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-113">For detailed descriptions of these protocols, see the Platform SDK documentation on MSDN, at msdn.microsoft.com/library/.</span></span> <span data-ttu-id="9e646-114"><xref:System.Net.Security.NegotiateStream> 클래스 보안 지원 공급자 인터페이스 (SSPI)를 사용 하 여 인증을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-114">The <xref:System.Net.Security.NegotiateStream> class performs the authentication using the Security Support Provider Interface (SSPI).</span></span>  
  
 <span data-ttu-id="9e646-115">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용할 보안 서비스를 결정 하는 속성은 <xref:System.Net.Security.NegotiateStream> 전송 중 데이터를 보호 하기 위해.</span><span class="sxs-lookup"><span data-stu-id="9e646-115">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services will be used by the <xref:System.Net.Security.NegotiateStream> to help secure your data during transmission.</span></span> <span data-ttu-id="9e646-116">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-116">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span> <span data-ttu-id="9e646-117">원격 클라이언트를 사용 하 여 서버에 대 한 정보를 얻을 수는 <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-117">You can get information about the remote client or server using the <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> property.</span></span>  
  
 <span data-ttu-id="9e646-118">인증에 실패 하는 경우 받게를 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-118">If the authentication fails, you will receive an <xref:System.Security.Authentication.AuthenticationException> or a <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-119">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-119">In this case, you can retry the authentication with a different credential.</span></span>  
  
 <span data-ttu-id="9e646-120">동기 버전을 사용 하 여 데이터를 보낼 <xref:System.Net.Security.NegotiateStream.Write%2A> 비동기적인지 <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-120">You send data using the synchronous <xref:System.Net.Security.NegotiateStream.Write%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> methods.</span></span> <span data-ttu-id="9e646-121">동기 버전을 사용 하 여 데이터를 수신할 <xref:System.Net.Security.NegotiateStream.Read%2A> 비동기적인지 <xref:System.Net.Security.NegotiateStream.BeginRead%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-121">You receive data using the synchronous <xref:System.Net.Security.NegotiateStream.Read%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginRead%2A> methods.</span></span> <span data-ttu-id="9e646-122">보안에는 암호화 또는 서명 사용 하도록 설정 같은 서비스를 이러한는 자동으로 적용 하 여 데이터를 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-122">If security services such as encryption or signing are enabled, these are automatically applied to your data by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="9e646-123">합니다 <xref:System.Net.Security.NegotiateStream> 를 만들 때 제공 하는 스트림을 사용 하 여 데이터를 전송 합니다 <xref:System.Net.Security.NegotiateStream>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-123">The <xref:System.Net.Security.NegotiateStream> transmits data using a stream that you supply when creating the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9e646-124">지정 하는 옵션이 있는이 내부 스트림을 입력 하면 닫는 지 여부를 <xref:System.Net.Security.NegotiateStream> 기본 스트림도 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-124">When you supply this underlying stream, you have the option to specify whether closing the <xref:System.Net.Security.NegotiateStream> also closes the underlying stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-125">다음 코드 예제에서는 사용 하는 클라이언트-서버 연결의 클라이언트측을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-125">The following code example demonstrates the client side of a client-server connection that uses the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9e646-126">클라이언트를 인증 하 고 서버로 메시지를 비동기적으로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-126">The client authenticates and sends a message to the server asynchronously.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#0)]
 [!code-csharp[NclNegoAsyncClient#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#0)]  
  
 <span data-ttu-id="9e646-127">다음 코드 예제에서는 사용 하는 클라이언트-서버 연결의 서버 쪽의 <xref:System.Net.Security.NegotiateStream> 클라이언트에서 보낸 메시지를 읽고 클라이언트를 인증 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-127">The following code example demonstrates the server side of a client-server connection that uses the <xref:System.Net.Security.NegotiateStream> to authenticate the client and read a message sent by the client.</span></span>  
  
 [!code-cpp[NclNegoAsyncServer#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#0)]
 [!code-csharp[NclNegoAsyncServer#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#0)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/8bf0b428-5a21-4299-8d6e-bf8251fd978a"><span data-ttu-id="9e646-128">버전 3.5 SP1에서에서 HTTPWebRequest에 대 한 NTLM 인증 변경 내용</span><span class="sxs-lookup"><span data-stu-id="9e646-128">Changes to NTLM authentication for HTTPWebRequest in Version 3.5 SP1</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9e646-129"><see cref="T:System.Net.Security.NegotiateStream" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-129">Initializes a new instance of the <see cref="T:System.Net.Security.NegotiateStream" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-130">방지 하기 위해 합니다 <xref:System.Net.Security.NegotiateStream> 에서 제공 하는 스트림을 닫는 사용 하 여는 <xref:System.Net.Security.NegotiateStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-130">To prevent the <xref:System.Net.Security.NegotiateStream> from closing the stream that you supply, use the <xref:System.Net.Security.NegotiateStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream);" />
      <MemberSignature Language="F#" Value="new System.Net.Security.NegotiateStream : System.IO.Stream -&gt; System.Net.Security.NegotiateStream" Usage="new System.Net.Security.NegotiateStream innerStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="innerStream"><span data-ttu-id="9e646-131">A <see cref="T:System.IO.Stream" /> 에서 사용 하는 개체는 <see cref="T:System.Net.Security.NegotiateStream" /> 데이터 보내기 및 받기에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-131">A <see cref="T:System.IO.Stream" /> object used by the <see cref="T:System.Net.Security.NegotiateStream" /> for sending and receiving data.</span></span></param>
        <summary><span data-ttu-id="9e646-132">지정된 <see cref="T:System.Net.Security.NegotiateStream" />를 사용하여 <see cref="T:System.IO.Stream" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-132">Initializes a new instance of the <see cref="T:System.Net.Security.NegotiateStream" /> class using the specified <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9e646-133">다음 코드 예제에서는이 생성자를 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-133">The following code example demonstrates calling this constructor.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#3)]
 [!code-csharp[NclNegoSyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream, bool leaveInnerStreamOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream, leaveInnerStreamOpen As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream, bool leaveInnerStreamOpen);" />
      <MemberSignature Language="F#" Value="new System.Net.Security.NegotiateStream : System.IO.Stream * bool -&gt; System.Net.Security.NegotiateStream" Usage="new System.Net.Security.NegotiateStream (innerStream, leaveInnerStreamOpen)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
        <Parameter Name="leaveInnerStreamOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="innerStream"><span data-ttu-id="9e646-134">A <see cref="T:System.IO.Stream" /> 에서 사용 하는 개체는 <see cref="T:System.Net.Security.NegotiateStream" /> 데이터 보내기 및 받기에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-134">A <see cref="T:System.IO.Stream" /> object used by the <see cref="T:System.Net.Security.NegotiateStream" /> for sending and receiving data.</span></span></param>
        <param name="leaveInnerStreamOpen"><span data-ttu-id="9e646-135">이 <see cref="T:System.Net.Security.NegotiateStream" />을 닫아도 <c>innerstream</c>에 영향을 주지 않으려면 <see langword="true" />로 설정하고, 이 <see cref="T:System.Net.Security.NegotiateStream" />을 닫을 때 <paramref name="innerStream" />도 함께 닫으려면 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-135"><see langword="true" /> to indicate that closing this <see cref="T:System.Net.Security.NegotiateStream" /> has no effect on <c>innerstream</c>; <see langword="false" /> to indicate that closing this <see cref="T:System.Net.Security.NegotiateStream" /> also closes <paramref name="innerStream" />.</span></span></param>
        <summary><span data-ttu-id="9e646-136">새 인스턴스를 초기화 합니다 <see cref="T:System.Net.Security.NegotiateStream" /> 지정 된 클래스 <see cref="T:System.IO.Stream" /> 과 스트림 닫기 동작 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-136">Initializes a new instance of the <see cref="T:System.Net.Security.NegotiateStream" /> class using the specified <see cref="T:System.IO.Stream" /> and stream closure behavior.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-137">지정 하는 경우 `true` 에 대 한는 `leaveStreamOpen` 매개 변수를 닫는 합니다 <xref:System.Net.Security.NegotiateStream> 영향을 주지 않습니다를 `innerStream` 스트림이 명시적으로 닫아야 `innerStream` 이상 필요할 때.</span><span class="sxs-lookup"><span data-stu-id="9e646-137">When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.NegotiateStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-138">다음 코드 예제에서는이 생성자를 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-138">The following code example demonstrates calling this constructor.</span></span> <span data-ttu-id="9e646-139">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Net.Security.NegotiateStream> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-139">This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#1)]
 [!code-csharp[NclNegoAsyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-140"><paramref name="innerStream" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-140"><paramref name="innerStream" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9e646-141">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-141">\- or -</span></span> 
 <span data-ttu-id="9e646-142"><paramref name="innerStream" />가 <see cref="F:System.IO.Stream.Null" />와 같은 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-142"><paramref name="innerStream" /> is equal to <see cref="F:System.IO.Stream.Null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9e646-143">클라이언트 및 필요에 따라 클라이언트-서버 연결에서 서버를 인증 하는 클라이언트에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-143">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : unit -&gt; unit&#xA;override this.AuthenticateAsClient : unit -&gt; unit" Usage="negotiateStream.AuthenticateAsClient " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9e646-144">클라이언트 및 필요에 따라 클라이언트-서버 연결에서 서버를 인증 하는 클라이언트에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-144">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-145">인증을 사용 하 여 클라이언트의 <xref:System.Net.CredentialCache.DefaultCredentials%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-145">The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="9e646-146">없는 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-146">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="9e646-147">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 상호 인증이 요청 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-147">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="9e646-148"><xref:System.Net.Security.NegotiateStream> 클래스 상호 인증에 사용 되는 SPN을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-148">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="9e646-149">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-149">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9e646-150">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-150">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9e646-151">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-151">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-152">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-152">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-153">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-153">The authentication failed.</span></span> <span data-ttu-id="9e646-154">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-154">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-155">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-155">The authentication failed.</span></span> <span data-ttu-id="9e646-156">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-156">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-157">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-157">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-158">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-158">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9e646-159">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-159">\- or -</span></span> 
<span data-ttu-id="9e646-160">이 스트림에 서버로 인증을 시도한 경우 이전에 사용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-160">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9e646-161">스트림을 사용 하 여 클라이언트 인증을 다시 시도할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-161">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9e646-162">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-162">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9e646-163">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="9e646-163">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * string -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * string -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9e646-164"><see cref="T:System.Net.NetworkCredential" /> 클라이언트의 id를 설정 하는 데 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-164">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="9e646-165">주체 이름 SPN (서비스) 인증 하도록 서버를 고유 하 게 식별 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-165">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <summary><span data-ttu-id="9e646-166">클라이언트 및 필요에 따라 클라이언트-서버 연결에서 서버를 인증 하는 클라이언트에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-166">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9e646-167">인증 프로세스에서는 지정 된 클라이언트 자격 증명을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-167">The authentication process uses the specified client credential.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-168">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 상호 인증이 요청 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-168">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="9e646-169"><xref:System.Net.Security.NegotiateStream> 클래스 상호 인증에 사용 되는 SPN을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-169">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="9e646-170">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-170">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9e646-171">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-171">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-172">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-172">The authentication failed.</span></span> <span data-ttu-id="9e646-173">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-173">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-174">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-174">The authentication failed.</span></span> <span data-ttu-id="9e646-175">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-175">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-176">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-176">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-177">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-177">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9e646-178">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-178">\- or -</span></span> 
<span data-ttu-id="9e646-179">이 스트림에 서버로 인증을 시도한 경우 이전에 사용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-179">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9e646-180">스트림을 사용 하 여 클라이언트 인증을 다시 시도할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-180">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-181"><paramref name="targetName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-181"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9e646-182">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-182">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9e646-183">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="9e646-183">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, binding, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9e646-184"><see cref="T:System.Net.NetworkCredential" /> 클라이언트의 id를 설정 하는 데 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-184">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="9e646-185"><see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 확장 된 보호에 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-185">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="9e646-186">주체 이름 SPN (서비스) 인증 하도록 서버를 고유 하 게 식별 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-186">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <summary><span data-ttu-id="9e646-187">클라이언트 및 필요에 따라 클라이언트-서버 연결에서 서버를 인증 하는 클라이언트에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-187">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9e646-188">인증 프로세스에는 지정 된 클라이언트 자격 증명과 채널 바인딩이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-188">The authentication process uses the specified client credential and the channel binding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-189">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 상호 인증이 요청 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-189">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="9e646-190"><xref:System.Net.Security.NegotiateStream> 클래스 상호 인증에 사용 되는 SPN을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-190">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="9e646-191"><xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> 이 메서드에 전달 되는 확장 된 보호에 사용 합니다 `binding` 매개 변수에서 응용 프로그램에 의해 검색 되 <xref:System.Net.Security.SslStream.TransportContext%2A> 연결 된 속성 <xref:System.Net.Security.SslStream>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-191">The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.</span></span>  
  
 <span data-ttu-id="9e646-192">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-192">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9e646-193">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-193">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-194"><paramref name="targetName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-194"><paramref name="targetName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9e646-195">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-195">\- or -</span></span> 
 <span data-ttu-id="9e646-196"><paramref name="credential" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-196"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-197">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-197">The authentication failed.</span></span> <span data-ttu-id="9e646-198">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-198">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-199">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-199">The authentication failed.</span></span> <span data-ttu-id="9e646-200">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-200">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-201">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-201">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9e646-202">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-202">\- or -</span></span> 
<span data-ttu-id="9e646-203">이 스트림에 서버로 인증을 시도한 경우 이전에 사용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-203">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9e646-204">스트림을 사용 하 여 클라이언트 인증을 다시 시도할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-204">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-205">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-205">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9e646-206">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="9e646-206">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9e646-207"><see cref="T:System.Net.NetworkCredential" /> 클라이언트의 id를 설정 하는 데 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-207">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="9e646-208">주체 이름 SPN (서비스) 인증 하도록 서버를 고유 하 게 식별 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-208">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9e646-209">중 하나는 <see cref="T:System.Net.Security.ProtectionLevel" /> 스트림에 대 한 보안 서비스를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-209">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="9e646-210">중 하나는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 서버 클라이언트의 자격 증명을 사용 하 여 리소스에 액세스 하는 방법을 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-210">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="9e646-211">클라이언트 및 필요에 따라 클라이언트-서버 연결에서 서버를 인증 하는 클라이언트에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-211">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9e646-212">인증 프로세스에는 지정 된 자격 증명 및 인증 옵션을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-212">The authentication process uses the specified credentials and authentication options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-213">사용 된 `requiredProtectionLevel` 보안 서비스 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 요청 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-213">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="9e646-214">예를 들어, 데이터 암호화 및 서명이 수행 하도록 지정 합니다 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-214">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="9e646-215">인증 성공 보장 하지 않습니다 하는 요청 된 <xref:System.Net.Security.ProtectionLevel> 권한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-215">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="9e646-216">확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-216">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="9e646-217">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-217">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-218">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-218">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9e646-219"><paramref name="allowedImpersonationLevel" /> 유효한 값이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-219"><paramref name="allowedImpersonationLevel" /> is not a valid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-220"><paramref name="targetName" />가 null인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-220"><paramref name="targetName" /> is null.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-221">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-221">The authentication failed.</span></span> <span data-ttu-id="9e646-222">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-222">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-223">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-223">The authentication failed.</span></span> <span data-ttu-id="9e646-224">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-224">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-225">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-225">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-226">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-226">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9e646-227">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-227">\- or -</span></span> 
<span data-ttu-id="9e646-228">이 스트림에 서버로 인증을 시도한 경우 이전에 사용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-228">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9e646-229">스트림을 사용 하 여 클라이언트 인증을 다시 시도할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-229">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9e646-230">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-230">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9e646-231">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="9e646-231">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9e646-232"><see cref="T:System.Net.NetworkCredential" /> 클라이언트의 id를 설정 하는 데 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-232">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="9e646-233"><see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 확장 된 보호에 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-233">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="9e646-234">주체 이름 SPN (서비스) 인증 하도록 서버를 고유 하 게 식별 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-234">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9e646-235">중 하나는 <see cref="T:System.Net.Security.ProtectionLevel" /> 스트림에 대 한 보안 서비스를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-235">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="9e646-236">중 하나는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 서버 클라이언트의 자격 증명을 사용 하 여 리소스에 액세스 하는 방법을 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-236">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="9e646-237">클라이언트 및 필요에 따라 클라이언트-서버 연결에서 서버를 인증 하는 클라이언트에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-237">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9e646-238">인증 프로세스에는 지정 된 자격 증명, 인증 옵션 및 채널 바인딩을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-238">The authentication process uses the specified credential, authentication options, and channel binding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-239">사용 된 `requiredProtectionLevel` 보안 서비스 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 요청 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-239">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="9e646-240">예를 들어, 데이터 암호화 및 서명이 수행 하도록 지정 합니다 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-240">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="9e646-241">인증 성공 보장 하지 않습니다 하는 요청 된 <xref:System.Net.Security.ProtectionLevel> 권한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-241">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="9e646-242">확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-242">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="9e646-243"><xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> 이 메서드에 전달 되는 확장 된 보호에 사용 합니다 `binding` 매개 변수에서 응용 프로그램에 의해 검색 되 <xref:System.Net.Security.SslStream.TransportContext%2A> 연결 된 속성 <xref:System.Net.Security.SslStream>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-243">The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.</span></span>  
  
 <span data-ttu-id="9e646-244">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-244">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-245">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-245">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-246"><paramref name="targetName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-246"><paramref name="targetName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9e646-247">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-247">\- or -</span></span> 
 <span data-ttu-id="9e646-248"><paramref name="credential" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-248"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9e646-249"><paramref name="allowedImpersonationLevel" /> 유효한 값이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-249"><paramref name="allowedImpersonationLevel" /> is not a valid value.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-250">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-250">The authentication failed.</span></span> <span data-ttu-id="9e646-251">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-251">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-252">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-252">The authentication failed.</span></span> <span data-ttu-id="9e646-253">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-253">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-254">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-254">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9e646-255">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-255">\- or -</span></span> 
<span data-ttu-id="9e646-256">이 스트림에 서버로 인증을 시도한 경우 이전에 사용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-256">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9e646-257">스트림을 사용 하 여 클라이언트 인증을 다시 시도할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-257">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-258">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-258">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9e646-259">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="9e646-259">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClientAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9e646-260">클라이언트 및 필요에 따라 비동기 작업으로 클라이언트-서버 연결에서 서버를 인증 하는 클라이언트에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-260">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : unit -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9e646-261">클라이언트 및 필요에 따라 비동기 작업으로 클라이언트-서버 연결에서 서버를 인증 하는 클라이언트에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-261">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="9e646-262"><see cref="T:System.Threading.Tasks.Task" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-262">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
<span data-ttu-id="9e646-263">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-263">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-264">인증을 사용 하 여 클라이언트의 <xref:System.Net.CredentialCache.DefaultCredentials%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-264">The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="9e646-265">없는 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-265">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="9e646-266">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 상호 인증이 요청 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-266">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="9e646-267"><xref:System.Net.Security.NegotiateStream> 클래스 상호 인증에 사용 되는 SPN을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-267">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="9e646-268">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-268">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9e646-269">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-269">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9e646-270">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-270">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-271">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-271">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-272">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-272">The authentication failed.</span></span> <span data-ttu-id="9e646-273">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-273">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-274">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-274">The authentication failed.</span></span> <span data-ttu-id="9e646-275">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-275">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-276">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-276">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-277">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-277">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9e646-278">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-278">\- or -</span></span> 
<span data-ttu-id="9e646-279">이 스트림에 서버로 인증을 시도한 경우 이전에 사용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-279">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9e646-280">스트림을 사용 하 여 클라이언트 인증을 다시 시도할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-280">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9e646-281">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-281">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9e646-282">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="9e646-282">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * string -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * string -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9e646-283"><see cref="T:System.Net.NetworkCredential" /> 클라이언트의 id를 설정 하는 데 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-283">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="9e646-284">주체 이름 SPN (서비스) 인증 하도록 서버를 고유 하 게 식별 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-284">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <summary><span data-ttu-id="9e646-285">클라이언트 및 필요에 따라 비동기 작업으로 클라이언트-서버 연결에서 서버를 인증 하는 클라이언트에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-285">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="9e646-286">인증 프로세스에서는 지정 된 클라이언트 자격 증명을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-286">The authentication process uses the specified client credential.</span></span></summary>
        <returns><span data-ttu-id="9e646-287"><see cref="T:System.Threading.Tasks.Task" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-287">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
<span data-ttu-id="9e646-288">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-288">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-289">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 상호 인증이 요청 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-289">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="9e646-290"><xref:System.Net.Security.NegotiateStream> 클래스 상호 인증에 사용 되는 SPN을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-290">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="9e646-291">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-291">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9e646-292">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-292">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-293">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-293">The authentication failed.</span></span> <span data-ttu-id="9e646-294">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-294">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-295">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-295">The authentication failed.</span></span> <span data-ttu-id="9e646-296">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-296">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-297">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-297">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-298">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-298">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9e646-299">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-299">\- or -</span></span> 
<span data-ttu-id="9e646-300">이 스트림에 서버로 인증을 시도한 경우 이전에 사용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-300">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9e646-301">스트림을 사용 하 여 클라이언트 인증을 다시 시도할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-301">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-302"><paramref name="targetName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-302"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9e646-303">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-303">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9e646-304">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="9e646-304">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, binding, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9e646-305"><see cref="T:System.Net.NetworkCredential" /> 클라이언트의 id를 설정 하는 데 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-305">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="9e646-306"><see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 확장 된 보호에 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-306">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="9e646-307">주체 이름 SPN (서비스) 인증 하도록 서버를 고유 하 게 식별 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-307">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <summary><span data-ttu-id="9e646-308">클라이언트 및 필요에 따라 비동기 작업으로 클라이언트-서버 연결에서 서버를 인증 하는 클라이언트에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-308">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="9e646-309">인증 프로세스에는 지정 된 클라이언트 자격 증명과 채널 바인딩이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-309">The authentication process uses the specified client credential and the channel binding.</span></span></summary>
        <returns><span data-ttu-id="9e646-310"><see cref="T:System.Threading.Tasks.Task" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-310">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
<span data-ttu-id="9e646-311">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-311">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-312">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 상호 인증이 요청 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-312">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="9e646-313"><xref:System.Net.Security.NegotiateStream> 클래스 상호 인증에 사용 되는 SPN을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-313">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="9e646-314"><xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> 이 메서드에 전달 되는 확장 된 보호에 사용 합니다 `binding` 매개 변수에서 응용 프로그램에 의해 검색 되 <xref:System.Net.Security.SslStream.TransportContext%2A> 연결 된 속성 <xref:System.Net.Security.SslStream>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-314">The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.</span></span>  
  
 <span data-ttu-id="9e646-315">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-315">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9e646-316">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-316">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-317"><paramref name="targetName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-317"><paramref name="targetName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9e646-318">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-318">\- or -</span></span> 
 <span data-ttu-id="9e646-319"><paramref name="credential" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-319"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-320">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-320">The authentication failed.</span></span> <span data-ttu-id="9e646-321">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-321">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-322">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-322">The authentication failed.</span></span> <span data-ttu-id="9e646-323">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-323">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-324">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-324">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9e646-325">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-325">\- or -</span></span> 
<span data-ttu-id="9e646-326">이 스트림에 서버로 인증을 시도한 경우 이전에 사용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-326">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9e646-327">스트림을 사용 하 여 클라이언트 인증을 다시 시도할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-327">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-328">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-328">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9e646-329">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="9e646-329">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9e646-330"><see cref="T:System.Net.NetworkCredential" /> 클라이언트의 id를 설정 하는 데 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-330">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="9e646-331">주체 이름 SPN (서비스) 인증 하도록 서버를 고유 하 게 식별 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-331">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9e646-332">중 하나는 <see cref="T:System.Net.Security.ProtectionLevel" /> 스트림에 대 한 보안 서비스를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-332">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="9e646-333">중 하나는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 서버 클라이언트의 자격 증명을 사용 하 여 리소스에 액세스 하는 방법을 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-333">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="9e646-334">클라이언트 및 필요에 따라 비동기 작업으로 클라이언트-서버 연결에서 서버를 인증 하는 클라이언트에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-334">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="9e646-335">인증 프로세스에는 지정 된 자격 증명 및 인증 옵션을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-335">The authentication process uses the specified credentials and authentication options.</span></span></summary>
        <returns><span data-ttu-id="9e646-336"><see cref="T:System.Threading.Tasks.Task" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-336">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
<span data-ttu-id="9e646-337">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-337">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-338">사용 된 `requiredProtectionLevel` 보안 서비스 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 요청 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-338">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="9e646-339">예를 들어, 데이터 암호화 및 서명이 수행 하도록 지정 합니다 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-339">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="9e646-340">인증 성공 보장 하지 않습니다 하는 요청 된 <xref:System.Net.Security.ProtectionLevel> 권한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-340">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="9e646-341">확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-341">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="9e646-342">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-342">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-343">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-343">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9e646-344"><paramref name="allowedImpersonationLevel" /> 유효한 값이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-344"><paramref name="allowedImpersonationLevel" /> is not a valid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-345"><paramref name="targetName" />가 null인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-345"><paramref name="targetName" /> is null.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-346">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-346">The authentication failed.</span></span> <span data-ttu-id="9e646-347">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-347">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-348">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-348">The authentication failed.</span></span> <span data-ttu-id="9e646-349">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-349">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-350">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-350">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-351">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-351">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9e646-352">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-352">\- or -</span></span> 
<span data-ttu-id="9e646-353">이 스트림에 서버로 인증을 시도한 경우 이전에 사용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-353">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9e646-354">스트림을 사용 하 여 클라이언트 인증을 다시 시도할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-354">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9e646-355">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-355">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9e646-356">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="9e646-356">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9e646-357"><see cref="T:System.Net.NetworkCredential" /> 클라이언트의 id를 설정 하는 데 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-357">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="9e646-358"><see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 확장 된 보호에 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-358">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="9e646-359">주체 이름 SPN (서비스) 인증 하도록 서버를 고유 하 게 식별 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-359">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9e646-360">중 하나는 <see cref="T:System.Net.Security.ProtectionLevel" /> 스트림에 대 한 보안 서비스를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-360">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="9e646-361">중 하나는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 서버 클라이언트의 자격 증명을 사용 하 여 리소스에 액세스 하는 방법을 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-361">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="9e646-362">클라이언트 및 필요에 따라 비동기 작업으로 클라이언트-서버 연결에서 서버를 인증 하는 클라이언트에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-362">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="9e646-363">인증 프로세스에는 지정 된 자격 증명, 인증 옵션 및 채널 바인딩을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-363">The authentication process uses the specified credential, authentication options, and channel binding.</span></span></summary>
        <returns><span data-ttu-id="9e646-364"><see cref="T:System.Threading.Tasks.Task" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-364">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
<span data-ttu-id="9e646-365">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-365">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-366">사용 된 `requiredProtectionLevel` 보안 서비스 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 요청 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-366">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="9e646-367">예를 들어, 데이터 암호화 및 서명이 수행 하도록 지정 합니다 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-367">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="9e646-368">인증 성공 보장 하지 않습니다 하는 요청 된 <xref:System.Net.Security.ProtectionLevel> 권한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-368">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="9e646-369">확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-369">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="9e646-370"><xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> 이 메서드에 전달 되는 확장 된 보호에 사용 합니다 `binding` 매개 변수에서 응용 프로그램에 의해 검색 되 <xref:System.Net.Security.SslStream.TransportContext%2A> 연결 된 속성 <xref:System.Net.Security.SslStream>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-370">The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.</span></span>  
  
 <span data-ttu-id="9e646-371">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-371">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-372">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-372">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-373"><paramref name="targetName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-373"><paramref name="targetName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9e646-374">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-374">\- or -</span></span> 
 <span data-ttu-id="9e646-375"><paramref name="credential" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-375"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9e646-376"><paramref name="allowedImpersonationLevel" /> 유효한 값이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-376"><paramref name="allowedImpersonationLevel" /> is not a valid value.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-377">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-377">The authentication failed.</span></span> <span data-ttu-id="9e646-378">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-378">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-379">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-379">The authentication failed.</span></span> <span data-ttu-id="9e646-380">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-380">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-381">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-381">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9e646-382">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-382">\- or -</span></span> 
<span data-ttu-id="9e646-383">이 스트림에 서버로 인증을 시도한 경우 이전에 사용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-383">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9e646-384">스트림을 사용 하 여 클라이언트 인증을 다시 시도할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-384">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-385">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-385">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9e646-386">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="9e646-386">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9e646-387">클라이언트-서버 연결에 대 한 인증의 서버 쪽을 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-387">Handles the server side of an authentication for a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-388">이러한 메서드는 인증이 진행에서 되는 동안 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-388">These methods block while the authentication is in progress.</span></span> <span data-ttu-id="9e646-389">인증이 완료 되기를 기다리는 동안 차단에서 응용 프로그램을 방지 하려면 사용 된 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-389">To prevent the application from blocking while waiting for the authentication to complete, use the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : unit -&gt; unit&#xA;override this.AuthenticateAsServer : unit -&gt; unit" Usage="negotiateStream.AuthenticateAsServer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9e646-390">클라이언트를 인증 하는 서버 및 필요에 따라 서버, 클라이언트-서버 연결에 의해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-390">Called by servers to authenticate the client, and optionally the server, in a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-391">인증 서버를 사용 하 여 <xref:System.Net.CredentialCache.DefaultCredentials%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-391">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="9e646-392">없는 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-392">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="9e646-393">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준을 이며 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-393">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="9e646-394">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-394">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9e646-395">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-395">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9e646-396">이 메서드는 작업이 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-396">This method blocks until the operation completes.</span></span> <span data-ttu-id="9e646-397">작업이 완료 될 때까지 차단 사용 하지 않으려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-397">To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9e646-398">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-398">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-399">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-399">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-400">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-400">The authentication failed.</span></span> <span data-ttu-id="9e646-401">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-401">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-402">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-402">The authentication failed.</span></span> <span data-ttu-id="9e646-403">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-403">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-404">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-404">This object has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9e646-405">Windows 95 및 Windows 98 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-405">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9e646-406">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-406">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9e646-407">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="9e646-407">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (policy As ExtendedProtectionPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; unit&#xA;override this.AuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; unit" Usage="negotiateStream.AuthenticateAsServer policy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy"><span data-ttu-id="9e646-408"><see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 확장 된 보호에 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-408">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <summary><span data-ttu-id="9e646-409">클라이언트를 인증 하는 서버 및 필요에 따라 서버, 클라이언트-서버 연결에 의해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-409">Called by servers to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9e646-410">인증 프로세스에는 지정 된 확장된 보호 정책을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-410">The authentication process uses the specified extended protection policy.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-411">인증 서버를 사용 하 여 <xref:System.Net.CredentialCache.DefaultCredentials%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-411">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="9e646-412">없는 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-412">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="9e646-413">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준을 이며 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-413">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="9e646-414">경우는 `policy` 매개 변수는 `null`에 있는 확장된 된 보호 정책이 사용 됩니다 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 로 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-414">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="9e646-415">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-415">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9e646-416">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-416">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9e646-417">이 메서드는 작업이 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-417">This method blocks until the operation completes.</span></span> <span data-ttu-id="9e646-418">작업이 완료 될 때까지 차단 사용 하지 않으려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-418">To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9e646-419">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-419">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-420">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-420">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9e646-421"><see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 하 고 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 전달 확장 된 보호 정책에는 <paramref name="policy" /> 매개 변수는 모두 <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9e646-421">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-422">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-422">The authentication failed.</span></span> <span data-ttu-id="9e646-423">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-423">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-424">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-424">The authentication failed.</span></span> <span data-ttu-id="9e646-425">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-425">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9e646-426">Windows 95 및 Windows 98 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-426">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-427">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-427">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="9e646-428">합니다 <paramref name="policy" /> 매개 변수 설정한 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> 확장 된 보호를 지원 하지 않는 플랫폼에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-428">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9e646-429">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="9e646-429">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsServer (credential, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9e646-430"><see cref="T:System.Net.NetworkCredential" /> 서버의 id를 설정 하는 데 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-430">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the server.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9e646-431">중 하나는 <see cref="T:System.Net.Security.ProtectionLevel" /> 스트림에 대 한 보안 서비스를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-431">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="9e646-432">중 하나는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 서버 클라이언트의 자격 증명을 사용 하 여 리소스에 액세스 하는 방법을 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-432">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="9e646-433">클라이언트를 인증 하는 서버 및 필요에 따라 서버, 클라이언트-서버 연결에 의해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-433">Called by servers to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9e646-434">인증 프로세스에는 지정 된 서버 자격 증명 및 인증 옵션을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-434">The authentication process uses the specified server credentials and authentication options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-435">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-435">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9e646-436">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-436">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9e646-437">이 메서드는 작업이 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-437">This method blocks until the operation completes.</span></span> <span data-ttu-id="9e646-438">작업이 완료 될 때까지 차단 사용 하지 않으려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-438">To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9e646-439">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-439">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-440">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-440">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-441"><paramref name="credential" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-441"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9e646-442"><paramref name="requiredImpersonationLevel" /> 여야 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, 또는 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span><span class="sxs-lookup"><span data-stu-id="9e646-442"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-443">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-443">The authentication failed.</span></span> <span data-ttu-id="9e646-444">인증을 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-444">You can use this object to try to r-authenticate.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-445">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-445">The authentication failed.</span></span> <span data-ttu-id="9e646-446">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-446">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-447">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-447">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-448">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-448">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9e646-449">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-449">\- or -</span></span> 
<span data-ttu-id="9e646-450">이 스트림은 클라이언트 인증을 시도한 경우 이전에 사용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-450">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="9e646-451">스트림을 사용 하 여 서버로 인증을 다시 시도할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-451">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9e646-452">Windows 95 및 Windows 98 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-452">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9e646-453">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-453">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9e646-454">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="9e646-454">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsServer (credential, policy, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9e646-455"><see cref="T:System.Net.NetworkCredential" /> 클라이언트의 id를 설정 하는 데 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-455">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="policy"><span data-ttu-id="9e646-456"><see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 확장 된 보호에 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-456">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9e646-457">중 하나는 <see cref="T:System.Net.Security.ProtectionLevel" /> 스트림에 대 한 보안 서비스를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-457">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="9e646-458">중 하나는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 서버 클라이언트의 자격 증명을 사용 하 여 리소스에 액세스 하는 방법을 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-458">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="9e646-459">클라이언트를 인증 하는 서버 및 필요에 따라 서버, 클라이언트-서버 연결에 의해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-459">Called by servers to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9e646-460">인증 프로세스는 지정 된 서버 자격 증명, 인증 옵션을 사용 하 여 및 확장 보호 정책입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-460">The authentication process uses the specified server credentials, authentication options, and extended protection policy.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-461">경우는 `policy` 매개 변수는 `null`에 있는 확장된 된 보호 정책이 사용 됩니다 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 로 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-461">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="9e646-462">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-462">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9e646-463">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-463">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9e646-464">이 메서드는 작업이 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-464">This method blocks until the operation completes.</span></span> <span data-ttu-id="9e646-465">작업이 완료 될 때까지 차단 사용 하지 않으려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-465">To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9e646-466">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-466">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-467">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-467">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9e646-468"><see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 하 고 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 전달 확장 된 보호 정책에는 <paramref name="policy" /> 매개 변수는 모두 <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9e646-468">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-469"><paramref name="credential" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-469"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9e646-470"><paramref name="requiredImpersonationLevel" /> 여야 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, 또는 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span><span class="sxs-lookup"><span data-stu-id="9e646-470"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-471">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-471">The authentication failed.</span></span> <span data-ttu-id="9e646-472">인증을 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-472">You can use this object to try to r-authenticate.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-473">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-473">The authentication failed.</span></span> <span data-ttu-id="9e646-474">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-474">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-475">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-475">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9e646-476">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-476">\- or -</span></span> 
<span data-ttu-id="9e646-477">이 스트림은 클라이언트 인증을 시도한 경우 이전에 사용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-477">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="9e646-478">스트림을 사용 하 여 서버로 인증을 다시 시도할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-478">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9e646-479">Windows 95 및 Windows 98 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-479">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-480">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-480">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="9e646-481">합니다 <paramref name="policy" /> 매개 변수 설정한 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> 확장 된 보호를 지원 하지 않는 플랫폼에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-481">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9e646-482">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="9e646-482">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9e646-483">비동기 작업으로 클라이언트-서버 연결에 대 한 인증의 서버 쪽을 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-483">Handles the server side of an authentication for a client-server connection as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : unit -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9e646-484">클라이언트를 인증 하는 서버 및 필요에 따라 서버는 비동기 작업으로 클라이언트-서버 연결에 의해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-484">Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="9e646-485"><see cref="T:System.Threading.Tasks.Task" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-485">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
<span data-ttu-id="9e646-486">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-486">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-487">인증 서버를 사용 하 여 <xref:System.Net.CredentialCache.DefaultCredentials%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-487">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="9e646-488">없는 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-488">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="9e646-489">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준을 이며 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-489">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="9e646-490">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-490">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9e646-491">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-491">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9e646-492">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-492">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-493">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-493">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-494">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-494">The authentication failed.</span></span> <span data-ttu-id="9e646-495">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-495">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-496">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-496">The authentication failed.</span></span> <span data-ttu-id="9e646-497">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-497">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-498">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-498">This object has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9e646-499">Windows 95 및 Windows 98 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-499">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9e646-500">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-500">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9e646-501">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="9e646-501">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (policy As ExtendedProtectionPolicy) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync policy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy"><span data-ttu-id="9e646-502"><see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 확장 된 보호에 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-502">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <summary><span data-ttu-id="9e646-503">클라이언트를 인증 하는 서버 및 필요에 따라 서버는 비동기 작업으로 클라이언트-서버 연결에 의해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-503">Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="9e646-504">인증 프로세스에는 지정 된 확장된 보호 정책을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-504">The authentication process uses the specified extended protection policy.</span></span></summary>
        <returns><span data-ttu-id="9e646-505"><see cref="T:System.Threading.Tasks.Task" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-505">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
<span data-ttu-id="9e646-506">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-506">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-507">인증 서버를 사용 하 여 <xref:System.Net.CredentialCache.DefaultCredentials%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-507">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="9e646-508">없는 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-508">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="9e646-509">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준을 이며 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-509">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="9e646-510">경우는 `policy` 매개 변수는 `null`에 있는 확장된 된 보호 정책이 사용 됩니다 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 로 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-510">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="9e646-511">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-511">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9e646-512">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-512">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9e646-513">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-513">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-514">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-514">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9e646-515"><see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 하 고 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 전달 확장 된 보호 정책에는 <paramref name="policy" /> 매개 변수는 모두 <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9e646-515">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-516">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-516">The authentication failed.</span></span> <span data-ttu-id="9e646-517">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-517">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-518">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-518">The authentication failed.</span></span> <span data-ttu-id="9e646-519">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-519">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9e646-520">Windows 95 및 Windows 98 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-520">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-521">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-521">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="9e646-522">합니다 <paramref name="policy" /> 매개 변수 설정한 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> 확장 된 보호를 지원 하지 않는 플랫폼에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-522">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9e646-523">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="9e646-523">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync (credential, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9e646-524"><see cref="T:System.Net.NetworkCredential" /> 서버의 id를 설정 하는 데 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-524">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the server.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9e646-525">중 하나는 <see cref="T:System.Net.Security.ProtectionLevel" /> 스트림에 대 한 보안 서비스를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-525">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="9e646-526">중 하나는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 서버 클라이언트의 자격 증명을 사용 하 여 리소스에 액세스 하는 방법을 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-526">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="9e646-527">클라이언트를 인증 하는 서버 및 필요에 따라 서버는 비동기 작업으로 클라이언트-서버 연결에 의해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-527">Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="9e646-528">인증 프로세스에는 지정 된 서버 자격 증명 및 인증 옵션을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-528">The authentication process uses the specified server credentials and authentication options.</span></span></summary>
        <returns><span data-ttu-id="9e646-529"><see cref="T:System.Threading.Tasks.Task" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-529">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
<span data-ttu-id="9e646-530">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-530">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-531">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-531">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9e646-532">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-532">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9e646-533">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-533">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-534">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-534">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-535"><paramref name="credential" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-535"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9e646-536"><paramref name="requiredImpersonationLevel" /> 여야 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, 또는 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span><span class="sxs-lookup"><span data-stu-id="9e646-536"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-537">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-537">The authentication failed.</span></span> <span data-ttu-id="9e646-538">인증을 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-538">You can use this object to try to r-authenticate.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-539">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-539">The authentication failed.</span></span> <span data-ttu-id="9e646-540">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-540">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-541">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-541">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-542">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-542">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9e646-543">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-543">\- or -</span></span> 
<span data-ttu-id="9e646-544">이 스트림은 클라이언트 인증을 시도한 경우 이전에 사용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-544">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="9e646-545">스트림을 사용 하 여 서버로 인증을 다시 시도할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-545">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9e646-546">Windows 95 및 Windows 98 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-546">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9e646-547">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-547">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9e646-548">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="9e646-548">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync (credential, policy, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9e646-549"><see cref="T:System.Net.NetworkCredential" /> 클라이언트의 id를 설정 하는 데 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-549">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="policy"><span data-ttu-id="9e646-550"><see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 확장 된 보호에 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-550">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9e646-551">중 하나는 <see cref="T:System.Net.Security.ProtectionLevel" /> 스트림에 대 한 보안 서비스를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-551">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="9e646-552">중 하나는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 서버 클라이언트의 자격 증명을 사용 하 여 리소스에 액세스 하는 방법을 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-552">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="9e646-553">클라이언트를 인증 하는 서버 및 필요에 따라 서버는 비동기 작업으로 클라이언트-서버 연결에 의해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-553">Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="9e646-554">인증 프로세스는 지정 된 서버 자격 증명, 인증 옵션을 사용 하 여 및 확장 보호 정책입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-554">The authentication process uses the specified server credentials, authentication options, and extended protection policy.</span></span></summary>
        <returns><span data-ttu-id="9e646-555"><see cref="T:System.Threading.Tasks.Task" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-555">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
<span data-ttu-id="9e646-556">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-556">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-557">경우는 `policy` 매개 변수는 `null`에 있는 확장된 된 보호 정책이 사용 됩니다 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 로 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-557">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="9e646-558">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-558">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9e646-559">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-559">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9e646-560">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-560">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-561">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-561">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9e646-562"><see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 하 고 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 전달 확장 된 보호 정책에는 <paramref name="policy" /> 매개 변수는 모두 <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9e646-562">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-563"><paramref name="credential" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-563"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9e646-564"><paramref name="requiredImpersonationLevel" /> 여야 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, 또는 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span><span class="sxs-lookup"><span data-stu-id="9e646-564"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-565">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-565">The authentication failed.</span></span> <span data-ttu-id="9e646-566">인증을 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-566">You can use this object to try to r-authenticate.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-567">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-567">The authentication failed.</span></span> <span data-ttu-id="9e646-568">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-568">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-569">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-569">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9e646-570">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-570">\- or -</span></span> 
<span data-ttu-id="9e646-571">이 스트림은 클라이언트 인증을 시도한 경우 이전에 사용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-571">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="9e646-572">스트림을 사용 하 여 서버로 인증을 다시 시도할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-572">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9e646-573">Windows 95 및 Windows 98 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-573">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-574">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-574">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="9e646-575">합니다 <paramref name="policy" /> 매개 변수 설정한 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> 확장 된 보호를 지원 하지 않는 플랫폼에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-575">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9e646-576">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="9e646-576">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9e646-577">클라이언트-서버 연결의 클라이언트측을 인증 하기 위해 비동기 작업을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-577">Begins an asynchronous operation to authenticate the client side of a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-578">인증 진행 중인 동안이 메서드의 오버 로드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-578">The overloads of this method do not block while authentication is in progress.</span></span> <span data-ttu-id="9e646-579">인증이 완료 되기를 기다리는 동안 차단 하려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-579">To block while waiting for the authentication to complete, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback"><span data-ttu-id="9e646-580">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-580">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="9e646-581">작업에 대 한 정보를 포함 하는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-581">A user-defined object containing information about the operation.</span></span> <span data-ttu-id="9e646-582">이 개체는 작업이 완료되면 <paramref name="asyncCallback" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-582">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="9e646-583">클라이언트와 필요에 따라 클라이언트-서버 연결에서 서버를 인증 하는 비동기 작업을 시작 하기 위해 클라이언트에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-583">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9e646-584">이 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-584">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="9e646-585"><see cref="T:System.IAsyncResult" /> 비동기 작업의 상태를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-585">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-586">인증을 사용 하 여 클라이언트의 <xref:System.Net.CredentialCache.DefaultCredentials%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-586">The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="9e646-587">없는 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-587">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="9e646-588">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준을 이며 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-588">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span> <span data-ttu-id="9e646-589"><xref:System.Net.Security.NegotiateStream> 클래스 상호 인증에 사용 되는 SPN을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-589">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="9e646-590">이 메서드는 비동기적 이며 작업이 완료 될 때 차단 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-590">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="9e646-591">작업이 완료 될 때까지 차단 하려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-591">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9e646-592">호출 하 여 비동기 인증 작업을 완료 해야 합니다 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-592">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="9e646-593">메서드는 일반적으로 `asyncCallback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-593">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="9e646-594">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="9e646-594">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="9e646-595">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-595">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-596">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-596">In this case, you can retry the authentication with a different credential.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-597">다음 코드 예제에서는 클라이언트에 대 한 비동기 인증 하려면이 메서드를 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-597">The following code example demonstrates calling this method to begin an asynchronous authentication for the client.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#2)]
 [!code-csharp[NclNegoAsyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-598">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-598">The authentication failed.</span></span> <span data-ttu-id="9e646-599">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-599">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-600">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-600">The authentication failed.</span></span> <span data-ttu-id="9e646-601">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-601">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-602">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-602">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-603">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-603">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9e646-604">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-604">\- or -</span></span> 
<span data-ttu-id="9e646-605">이 스트림에 서버로 인증을 시도한 경우 이전에 사용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-605">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9e646-606">스트림을 사용 하 여 클라이언트 인증을 다시 시도할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-606">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9e646-607">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-607">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9e646-608">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="9e646-608">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * string * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * string * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, targetName, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9e646-609"><see cref="T:System.Net.NetworkCredential" /> 클라이언트의 id를 설정 하는 데 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-609">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="9e646-610">주체 이름 SPN (서비스) 인증 하도록 서버를 고유 하 게 식별 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-610">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="9e646-611">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-611">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="9e646-612">쓰기 작업에 대 한 정보를 포함 하는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-612">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="9e646-613">이 개체는 작업이 완료되면 <paramref name="asyncCallback" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-613">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="9e646-614">클라이언트와 필요에 따라 클라이언트-서버 연결에서 서버를 인증 하는 비동기 작업을 시작 하기 위해 클라이언트에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-614">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9e646-615">인증 프로세스는 지정 된 자격 증명을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-615">The authentication process uses the specified credentials.</span></span> <span data-ttu-id="9e646-616">이 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-616">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="9e646-617"><see cref="T:System.IAsyncResult" /> 비동기 작업의 상태를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-617">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-618">이 메서드는 비동기적 이며 작업이 완료 될 때 차단 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-618">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="9e646-619">작업이 완료 될 때까지 차단 하려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-619">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9e646-620">호출 하 여 비동기 인증 작업을 완료 해야 합니다 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-620">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="9e646-621">메서드는 일반적으로 `asyncCallback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-621">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="9e646-622">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="9e646-622">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="9e646-623">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-623">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-624">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-624">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-625"><paramref name="credential" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-625"><paramref name="credential" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9e646-626">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-626">\- or -</span></span> 
 <span data-ttu-id="9e646-627"><paramref name="targetName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-627"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-628">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-628">The authentication failed.</span></span> <span data-ttu-id="9e646-629">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-629">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-630">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-630">The authentication failed.</span></span> <span data-ttu-id="9e646-631">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-631">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-632">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-632">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-633">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-633">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9e646-634">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-634">\- or -</span></span> 
<span data-ttu-id="9e646-635">이 스트림에 서버로 인증을 시도한 경우 이전에 사용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-635">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9e646-636">스트림을 사용 하 여 클라이언트 인증을 다시 시도할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-636">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9e646-637">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-637">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9e646-638">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="9e646-638">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, binding, targetName, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9e646-639"><see cref="T:System.Net.NetworkCredential" /> 클라이언트의 id를 설정 하는 데 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-639">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="9e646-640"><see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 확장 된 보호에 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-640">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="9e646-641">주체 이름 SPN (서비스) 인증 하도록 서버를 고유 하 게 식별 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-641">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="9e646-642">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-642">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="9e646-643">쓰기 작업에 대 한 정보를 포함 하는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-643">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="9e646-644">이 개체는 작업이 완료되면 <paramref name="asyncCallback" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-644">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="9e646-645">클라이언트와 필요에 따라 클라이언트-서버 연결에서 서버를 인증 하는 비동기 작업을 시작 하기 위해 클라이언트에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-645">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9e646-646">인증 프로세스에는 지정 된 자격 증명과 채널 바인딩이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-646">The authentication process uses the specified credentials and channel binding.</span></span> <span data-ttu-id="9e646-647">이 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-647">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="9e646-648"><see cref="T:System.IAsyncResult" /> 비동기 작업의 상태를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-648">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-649">이 메서드는 비동기적 이며 작업이 완료 될 때 차단 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-649">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="9e646-650">작업이 완료 될 때까지 차단 하려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-650">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9e646-651">호출 하 여 비동기 인증 작업을 완료 해야 합니다 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-651">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="9e646-652">메서드는 일반적으로 `asyncCallback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-652">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="9e646-653">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="9e646-653">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="9e646-654">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-654">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-655">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-655">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-656"><paramref name="credential" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-656"><paramref name="credential" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9e646-657">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-657">\- or -</span></span> 
 <span data-ttu-id="9e646-658"><paramref name="targetName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-658"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-659">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-659">The authentication failed.</span></span> <span data-ttu-id="9e646-660">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-660">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-661">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-661">The authentication failed.</span></span> <span data-ttu-id="9e646-662">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-662">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-663">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-663">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9e646-664">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-664">\- or -</span></span> 
<span data-ttu-id="9e646-665">이 스트림에 서버로 인증을 시도한 경우 이전에 사용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-665">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9e646-666">스트림을 사용 하 여 클라이언트 인증을 다시 시도할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-666">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-667">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-667">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9e646-668">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="9e646-668">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, targetName, requiredProtectionLevel, allowedImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9e646-669"><see cref="T:System.Net.NetworkCredential" /> 클라이언트의 id를 설정 하는 데 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-669">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="9e646-670">주체 이름 SPN (서비스) 인증 하도록 서버를 고유 하 게 식별 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-670">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9e646-671">중 하나는 <see cref="T:System.Net.Security.ProtectionLevel" /> 스트림에 대 한 보안 서비스를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-671">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="9e646-672">중 하나는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 서버 클라이언트의 자격 증명을 사용 하 여 리소스에 액세스 하는 방법을 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-672">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="9e646-673">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-673">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="9e646-674">쓰기 작업에 대 한 정보를 포함 하는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-674">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="9e646-675">이 개체는 작업이 완료되면 <paramref name="asyncCallback" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-675">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="9e646-676">클라이언트와 필요에 따라 클라이언트-서버 연결에서 서버를 인증 하는 비동기 작업을 시작 하기 위해 클라이언트에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-676">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9e646-677">인증 프로세스에는 지정 된 자격 증명 및 인증 옵션을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-677">The authentication process uses the specified credentials and authentication options.</span></span> <span data-ttu-id="9e646-678">이 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-678">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="9e646-679"><see cref="T:System.IAsyncResult" /> 비동기 작업의 상태를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-679">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-680">사용 된 `requiredProtectionLevel` 보안 서비스 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 요청 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-680">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="9e646-681">예를 들어, 데이터 암호화 및 서명이 수행 하도록 지정 합니다 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-681">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="9e646-682">인증 성공 보장 하지 않습니다 하는 요청 된 <xref:System.Net.Security.ProtectionLevel> 권한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-682">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="9e646-683">확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-683">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="9e646-684">이 메서드는 비동기적 이며 작업이 완료 될 때 차단 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-684">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="9e646-685">작업이 완료 될 때까지 차단 하려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-685">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9e646-686">호출 하 여 비동기 인증 작업을 완료 해야 합니다 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-686">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="9e646-687">메서드는 일반적으로 `asyncCallback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-687">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="9e646-688">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="9e646-688">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="9e646-689">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-689">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-690">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-690">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-691"><paramref name="credential" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-691"><paramref name="credential" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9e646-692">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-692">\- or -</span></span> 
 <span data-ttu-id="9e646-693"><paramref name="targetName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-693"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-694">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-694">The authentication failed.</span></span> <span data-ttu-id="9e646-695">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-695">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-696">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-696">The authentication failed.</span></span> <span data-ttu-id="9e646-697">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-697">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-698">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-698">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-699">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-699">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9e646-700">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-700">\- or -</span></span> 
<span data-ttu-id="9e646-701">이 스트림에 서버로 인증을 시도한 경우 이전에 사용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-701">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9e646-702">스트림을 사용 하 여 클라이언트 인증을 다시 시도할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-702">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9e646-703">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-703">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9e646-704">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="9e646-704">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9e646-705"><see cref="T:System.Net.NetworkCredential" /> 클라이언트의 id를 설정 하는 데 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-705">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="9e646-706"><see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 확장 된 보호에 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-706">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="9e646-707">주체 이름 SPN (서비스) 인증 하도록 서버를 고유 하 게 식별 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-707">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9e646-708">중 하나는 <see cref="T:System.Net.Security.ProtectionLevel" /> 스트림에 대 한 보안 서비스를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-708">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="9e646-709">중 하나는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 서버 클라이언트의 자격 증명을 사용 하 여 리소스에 액세스 하는 방법을 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-709">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="9e646-710">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-710">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="9e646-711">쓰기 작업에 대 한 정보를 포함 하는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-711">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="9e646-712">이 개체는 작업이 완료되면 <paramref name="asyncCallback" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-712">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="9e646-713">클라이언트와 필요에 따라 클라이언트-서버 연결에서 서버를 인증 하는 비동기 작업을 시작 하기 위해 클라이언트에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-713">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9e646-714">인증 프로세스에는 지정 된 자격 증명, 인증 옵션 및 채널 바인딩을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-714">The authentication process uses the specified credentials, authentication options, and channel binding.</span></span> <span data-ttu-id="9e646-715">이 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-715">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="9e646-716"><see cref="T:System.IAsyncResult" /> 비동기 작업의 상태를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-716">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-717">사용 된 `requiredProtectionLevel` 보안 서비스 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 요청 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-717">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="9e646-718">예를 들어, 데이터 암호화 및 서명이 수행 하도록 지정 합니다 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-718">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="9e646-719">인증 성공 보장 하지 않습니다 하는 요청 된 <xref:System.Net.Security.ProtectionLevel> 권한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-719">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="9e646-720">확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-720">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="9e646-721">이 메서드는 비동기적 이며 작업이 완료 될 때 차단 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-721">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="9e646-722">작업이 완료 될 때까지 차단 하려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-722">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9e646-723">호출 하 여 비동기 인증 작업을 완료 해야 합니다 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-723">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="9e646-724">메서드는 일반적으로 `asyncCallback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-724">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="9e646-725">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="9e646-725">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="9e646-726">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-726">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-727">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-727">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-728"><paramref name="credential" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-728"><paramref name="credential" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9e646-729">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-729">\- or -</span></span> 
 <span data-ttu-id="9e646-730"><paramref name="targetName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-730"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-731">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-731">The authentication failed.</span></span> <span data-ttu-id="9e646-732">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-732">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-733">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-733">The authentication failed.</span></span> <span data-ttu-id="9e646-734">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-734">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-735">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-735">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9e646-736">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-736">\- or -</span></span> 
<span data-ttu-id="9e646-737">이 스트림에 서버로 인증을 시도한 경우 이전에 사용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-737">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9e646-738">스트림을 사용 하 여 클라이언트 인증을 다시 시도할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-738">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-739">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-739">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9e646-740">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="9e646-740">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9e646-741">클라이언트-서버 연결을 인증 하는 서버 쪽 처리 하기 위해 비동기 작업을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-741">Begins an asynchronous operation to handle the server side of authenticating a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-742">인증 진행 중인 동안이 메서드의 오버 로드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-742">The overloads of this method do not block while the authentication is in progress.</span></span> <span data-ttu-id="9e646-743">인증이 완료 되기를 기다리는 동안 차단 된 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-743">To block while waiting for the authentication to complete, use the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback"><span data-ttu-id="9e646-744">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-744">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="9e646-745">작업에 대 한 정보를 포함 하는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-745">A user-defined object containing information about the operation.</span></span> <span data-ttu-id="9e646-746">이 개체는 작업이 완료되면 <paramref name="asyncCallback" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-746">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="9e646-747">클라이언트를 인증 하는 비동기 작업을 시작 하기 위해 서버 및 필요에 따라 서버, 클라이언트-서버 연결에 의해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-747">Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9e646-748">이 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-748">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="9e646-749"><see cref="T:System.IAsyncResult" /> 비동기 작업의 상태를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-749">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-750">인증 서버를 사용 하 여 <xref:System.Net.CredentialCache.DefaultCredentials%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-750">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="9e646-751">없는 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-751">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="9e646-752">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-752">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="9e646-753">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-753">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9e646-754">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-754">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9e646-755">작업이 완료 될 때까지 차단 하려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-755">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9e646-756">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-756">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-757">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-757">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-758">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-758">The authentication failed.</span></span> <span data-ttu-id="9e646-759">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-759">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-760">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-760">The authentication failed.</span></span> <span data-ttu-id="9e646-761">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-761">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-762">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-762">This object has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9e646-763">Windows 95 및 Windows 98 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-763">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9e646-764">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-764">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9e646-765">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="9e646-765">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (policy, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="policy"><span data-ttu-id="9e646-766"><see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 확장 된 보호에 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-766">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="9e646-767">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-767">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="9e646-768">쓰기 작업에 대 한 정보를 포함 하는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-768">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="9e646-769">이 개체는 작업이 완료되면 <paramref name="asyncCallback" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-769">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="9e646-770">클라이언트를 인증 하는 비동기 작업을 시작 하기 위해 서버 및 필요에 따라 서버, 클라이언트-서버 연결에 의해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-770">Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9e646-771">인증 프로세스에는 지정 된 확장된 보호 정책을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-771">The authentication process uses the specified extended protection policy.</span></span> <span data-ttu-id="9e646-772">이 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-772">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="9e646-773"><see cref="T:System.IAsyncResult" /> 비동기 작업의 상태를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-773">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-774">인증 서버를 사용 하 여 <xref:System.Net.CredentialCache.DefaultCredentials%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-774">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="9e646-775">없는 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-775">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="9e646-776">가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-776">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="9e646-777">경우는 `policy` 매개 변수는 `null`에 있는 확장된 된 보호 정책이 사용 됩니다 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 로 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-777">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="9e646-778">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-778">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9e646-779">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-779">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9e646-780">작업이 완료 될 때까지 차단 하려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-780">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9e646-781">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-781">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-782">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-782">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9e646-783"><see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 하 고 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 전달 확장 된 보호 정책에는 <paramref name="policy" /> 매개 변수는 모두 <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9e646-783">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-784">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-784">The authentication failed.</span></span> <span data-ttu-id="9e646-785">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-785">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-786">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-786">The authentication failed.</span></span> <span data-ttu-id="9e646-787">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-787">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9e646-788">Windows 95 및 Windows 98 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-788">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-789">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-789">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="9e646-790">합니다 <paramref name="policy" /> 매개 변수 설정한 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> 확장 된 보호를 지원 하지 않는 플랫폼에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-790">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9e646-791">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="9e646-791">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (credential, requiredProtectionLevel, requiredImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9e646-792"><see cref="T:System.Net.NetworkCredential" /> 클라이언트의 id를 설정 하는 데 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-792">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9e646-793">중 하나는 <see cref="T:System.Net.Security.ProtectionLevel" /> 스트림에 대 한 보안 서비스를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-793">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="9e646-794">중 하나는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 서버 클라이언트의 자격 증명을 사용 하 여 리소스에 액세스 하는 방법을 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-794">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="9e646-795">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-795">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="9e646-796">작업에 대 한 정보를 포함 하는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-796">A user-defined object containing information about the operation.</span></span> <span data-ttu-id="9e646-797">이 개체는 작업이 완료되면 <paramref name="asyncCallback" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-797">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="9e646-798">클라이언트를 인증 하는 비동기 작업을 시작 하기 위해 서버 및 필요에 따라 서버, 클라이언트-서버 연결에 의해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-798">Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9e646-799">인증 프로세스에는 지정 된 서버 자격 증명 및 인증 옵션을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-799">The authentication process uses the specified server credentials and authentication options.</span></span> <span data-ttu-id="9e646-800">이 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-800">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="9e646-801"><see cref="T:System.IAsyncResult" /> 비동기 작업의 상태를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-801">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-802">사용 된 `requiredProtectionLevel` 보안 서비스 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 요청 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-802">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="9e646-803">예를 들어, 데이터 암호화 및 서명이 수행 하도록 지정 합니다 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-803">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="9e646-804">성공적으로 인증 요청 된 보장 하지 않습니다 <xref:System.Net.Security.ProtectionLevel> 권한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-804">Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="9e646-805">확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-805">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="9e646-806">이 메서드는 비동기적 이며 작업이 완료 될 때 차단 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-806">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="9e646-807">작업이 완료 될 때까지 차단 하려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-807">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9e646-808">호출 하 여 비동기 인증 작업을 완료 해야 합니다 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-808">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method.</span></span> <span data-ttu-id="9e646-809">메서드는 일반적으로 `asyncCallback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-809">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="9e646-810">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="9e646-810">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="9e646-811">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-811">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-812">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-812">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-813"><paramref name="credential" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-813"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9e646-814"><paramref name="requiredImpersonationLevel" /> 여야 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, 또는 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span><span class="sxs-lookup"><span data-stu-id="9e646-814"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-815">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-815">The authentication failed.</span></span> <span data-ttu-id="9e646-816">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-816">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-817">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-817">The authentication failed.</span></span> <span data-ttu-id="9e646-818">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-818">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-819">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-819">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-820">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-820">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9e646-821">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-821">\- or -</span></span> 
<span data-ttu-id="9e646-822">이 스트림은 클라이언트 인증을 시도한 경우 이전에 사용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-822">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="9e646-823">스트림을 사용 하 여 서버로 인증을 다시 시도할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-823">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9e646-824">Windows 95 및 Windows 98 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-824">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9e646-825">명시적 데 <see cref="T:System.Net.NetworkCredential" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-825">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9e646-826">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="9e646-826">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (credential, policy, requiredProtectionLevel, requiredImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9e646-827"><see cref="T:System.Net.NetworkCredential" /> 클라이언트의 id를 설정 하는 데 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-827">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="policy"><span data-ttu-id="9e646-828"><see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 확장 된 보호에 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-828">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9e646-829">중 하나는 <see cref="T:System.Net.Security.ProtectionLevel" /> 스트림에 대 한 보안 서비스를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-829">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="9e646-830">중 하나는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 서버 클라이언트의 자격 증명을 사용 하 여 리소스에 액세스 하는 방법을 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-830">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="9e646-831">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-831">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="9e646-832">쓰기 작업에 대 한 정보를 포함 하는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-832">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="9e646-833">이 개체는 작업이 완료되면 <paramref name="asyncCallback" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-833">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="9e646-834">클라이언트를 인증 하는 비동기 작업을 시작 하기 위해 서버 및 필요에 따라 서버, 클라이언트-서버 연결에 의해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-834">Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9e646-835">인증 프로세스는 지정 된 서버 자격 증명, 인증 옵션을 사용 하 여 및 확장 보호 정책입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-835">The authentication process uses the specified server credentials, authentication options, and extended protection policy.</span></span> <span data-ttu-id="9e646-836">이 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-836">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="9e646-837"><see cref="T:System.IAsyncResult" /> 비동기 작업의 상태를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-837">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-838">사용 된 `requiredProtectionLevel` 보안 서비스 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 요청 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-838">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="9e646-839">예를 들어, 데이터 암호화 및 서명이 수행 하도록 지정 합니다 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-839">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="9e646-840">성공적으로 인증 요청 된 보장 하지 않습니다 <xref:System.Net.Security.ProtectionLevel> 권한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-840">Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="9e646-841">확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-841">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="9e646-842">경우는 `policy` 매개 변수는 `null`에 있는 확장된 된 보호 정책이 사용 됩니다 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 로 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-842">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="9e646-843">이 메서드는 비동기적 이며 작업이 완료 될 때 차단 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-843">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="9e646-844">작업이 완료 될 때까지 차단 하려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-844">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9e646-845">호출 하 여 비동기 인증 작업을 완료 해야 합니다 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-845">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method.</span></span> <span data-ttu-id="9e646-846">메서드는 일반적으로 `asyncCallback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-846">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="9e646-847">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="9e646-847">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="9e646-848">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-848">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-849">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-849">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9e646-850"><see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 하 고 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 전달 확장 된 보호 정책에는 <paramref name="policy" /> 매개 변수는 모두 <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9e646-850">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-851"><paramref name="credential" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-851"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9e646-852"><paramref name="requiredImpersonationLevel" /> 여야 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, 또는 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span><span class="sxs-lookup"><span data-stu-id="9e646-852"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-853">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-853">The authentication failed.</span></span> <span data-ttu-id="9e646-854">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-854">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-855">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-855">The authentication failed.</span></span> <span data-ttu-id="9e646-856">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-856">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-857">인증이 이미 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-857">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9e646-858">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-858">\- or -</span></span> 
<span data-ttu-id="9e646-859">이 스트림은 클라이언트 인증을 시도한 경우 이전에 사용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-859">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="9e646-860">스트림을 사용 하 여 서버로 인증을 다시 시도할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-860">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9e646-861">Windows 95 및 Windows 98 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-861">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-862">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-862">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="9e646-863">합니다 <paramref name="policy" /> 매개 변수 설정한 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> 확장 된 보호를 지원 하지 않는 플랫폼에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-863">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9e646-864">확장된 보호를 사용하는 Windows 통합 인증</span><span class="sxs-lookup"><span data-stu-id="9e646-864">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="override this.BeginRead : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginRead (buffer, offset, count, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="9e646-865"><see cref="T:System.Byte" /> 스트림에서 읽은 바이트를 수신 하는 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-865">A <see cref="T:System.Byte" /> array that receives the bytes read from the stream.</span></span></param>
        <param name="offset"><span data-ttu-id="9e646-866">0부터 시작 위치 <paramref name="buffer" /> 이 스트림에서 읽은 데이터를 저장 하기 시작 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-866">The zero-based location in <paramref name="buffer" /> at which to begin storing the data read from this stream.</span></span></param>
        <param name="count"><span data-ttu-id="9e646-867">스트림에서 읽을 바이트의 최대 수입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-867">The maximum number of bytes to read from the stream.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="9e646-868"><see cref="T:System.AsyncCallback" /> 읽기 작업이 완료 될 때 호출할 메서드를 참조 하는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-868">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the read operation is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="9e646-869">읽기 작업에 대 한 정보를 포함 하는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-869">A user-defined object containing information about the read operation.</span></span> <span data-ttu-id="9e646-870">이 개체는 작업이 완료되면 <paramref name="asyncCallback" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-870">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="9e646-871">스트림에서 데이터를 읽고 지정된 된 배열에 저장 하는 비동기 읽기 작업을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-871">Begins an asynchronous read operation that reads data from the stream and stores it in the specified array.</span></span></summary>
        <returns><span data-ttu-id="9e646-872"><see cref="T:System.IAsyncResult" /> 비동기 작업의 상태를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-872">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-873">암호화, 서명 또는 암호화 및 서명를 사용 하는 경우 읽기 작업 내부 스트림에서 데이터를 읽고, 데이터의 무결성을 검사 및 암호를 해독 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-873">If encryption, signing, or encryption and signing are enabled, the read operation reads the data from the underlying stream, checks the integrity of the data, and decrypts it.</span></span> <span data-ttu-id="9e646-874">보안 없이 사용 중인 데이터 암호화 또는 서명 같은 서비스를 하는 경우이 메서드는 기본 스트림의 비동기 읽기 작업을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-874">If no security services such as data encryption or signing are in use, this method starts an asynchronous read operation on the underlying stream.</span></span>  
  
 <span data-ttu-id="9e646-875">이 메서드는 비동기적 이며 작업이 완료 될 때 차단 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-875">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="9e646-876">작업이 완료 될 때까지 차단 합니다 <xref:System.Net.Security.NegotiateStream.Read%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-876">To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.</span></span>  
  
 <span data-ttu-id="9e646-877">호출 하 여 비동기 읽기 작업을 완료 해야 합니다는 <xref:System.Net.Security.NegotiateStream.EndRead%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-877">The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndRead%2A> method.</span></span> <span data-ttu-id="9e646-878">메서드는 일반적으로 `asyncCallback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-878">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="9e646-879">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="9e646-879">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="9e646-880"><xref:System.Net.Security.NegotiateStream> 클래스가 여러 동시 읽기 작업을 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-880">The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous read operations.</span></span> <span data-ttu-id="9e646-881">읽는 동안 다른 작업 같은 스트림에서 실행 하는 작업을 시작 하려는 경우는 <xref:System.NotSupportedException> 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-881">If you attempt to start a read operation while another read operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.</span></span>  
  
 <span data-ttu-id="9e646-882">사용자가 성공적으로 인증 될 때까지이 메서드를 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-882">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="9e646-883">인증 중 하나를 호출 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>를 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-883">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-884">다음 코드 예제에서는 비동기 읽기 작업을 시작 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-884">The following code example demonstrates starting an asynchronous read operation.</span></span> <span data-ttu-id="9e646-885">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Net.Security.NegotiateStream> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-885">This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
 [!code-cpp[NclNegoAsyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#1)]
 [!code-csharp[NclNegoAsyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-886"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-886"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9e646-887"><paramref name="offset" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-887"><paramref name="offset" /> is less than 0.</span></span>  
  
<span data-ttu-id="9e646-888">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-888">\- or -</span></span> 
 <span data-ttu-id="9e646-889"><paramref name="offset" /> 이 <paramref name="buffer" />의 길이보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-889"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="9e646-890">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-890">\- or -</span></span> 
 <span data-ttu-id="9e646-891"><paramref name="offset" /> + <paramref name="count" />가 <paramref name="buffer" />의 길이보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-891"><paramref name="offset" /> plus <paramref name="count" /> is greater than the length of <paramref name="buffer" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="9e646-892">읽기 작업이 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-892">The read operation failed.</span></span>  
  
<span data-ttu-id="9e646-893">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-893">\- or -</span></span> 
<span data-ttu-id="9e646-894">암호화 사용 중이지만 데이터를 해독할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-894">Encryption is in use, but the data could not be decrypted.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9e646-895">진행 중인 읽기 작업이 이미 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-895">There is already a read operation in progress.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-896">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-896">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-897">인증 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-897">Authentication has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="override this.BeginWrite : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginWrite (buffer, offset, count, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="9e646-898"><see cref="T:System.Byte" /> 스트림에 쓸 바이트를 제공 하는 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-898">A <see cref="T:System.Byte" /> array that supplies the bytes to be written to the stream.</span></span></param>
        <param name="offset"><span data-ttu-id="9e646-899">스트림에 쓸 바이트를 읽기 시작하는 <paramref name="buffer" /> 내의 위치(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-899">The zero-based location in <paramref name="buffer" /> at which to begin reading bytes to be written to the stream.</span></span></param>
        <param name="count"><span data-ttu-id="9e646-900"><see cref="T:System.Int32" /> 에서 읽을 바이트 수를 지정 하는 값 <paramref name="buffer" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-900">An <see cref="T:System.Int32" /> value that specifies the number of bytes to read from <paramref name="buffer" />.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="9e646-901"><see cref="T:System.AsyncCallback" /> 쓰기 작업이 완료 될 때 호출할 메서드를 참조 하는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-901">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the write operation is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="9e646-902">쓰기 작업에 대 한 정보를 포함 하는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-902">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="9e646-903">이 개체는 작업이 완료되면 <paramref name="asyncCallback" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-903">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="9e646-904">비동기 쓰기 작업을 기록 하는 <see cref="T:System.Byte" />스트림에 지정된 된 버퍼에서 s입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-904">Begins an asynchronous write operation that writes <see cref="T:System.Byte" />s from the specified buffer to the stream.</span></span></summary>
        <returns><span data-ttu-id="9e646-905"><see cref="T:System.IAsyncResult" /> 비동기 작업의 상태를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-905">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-906">암호화, 서명 또는 암호화 및 서명를 사용 하는 경우이 메서드 버퍼에서 데이터를 읽고, 암호화, 서명, 또는 암호화, 서명 및 기본 스트림을 사용 하 여 전송 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-906">If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream.</span></span> <span data-ttu-id="9e646-907">보안 없이 사용 중인 데이터 암호화 또는 서명 같은 서비스를 하는 경우이 메서드는 기본 스트림의 비동기 쓰기 작업을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-907">If no security services such as data encryption or signing are in use, this method starts an asynchronous write operation on the underlying stream.</span></span>  
  
 <span data-ttu-id="9e646-908">이 메서드는 비동기적 이며 작업이 완료 될 때 차단 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-908">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="9e646-909">작업이 완료 될 때까지 차단 합니다 <xref:System.Net.Security.NegotiateStream.Read%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-909">To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.</span></span>  
  
 <span data-ttu-id="9e646-910">호출 하 여 비동기 읽기 작업을 완료 해야 합니다는 <xref:System.Net.Security.NegotiateStream.EndWrite%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-910">The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndWrite%2A> method.</span></span> <span data-ttu-id="9e646-911">메서드는 일반적으로 `asyncCallback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-911">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="9e646-912">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="9e646-912">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="9e646-913"><xref:System.Net.Security.NegotiateStream> 클래스가 여러 동시 쓰기 작업을 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-913">The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations.</span></span> <span data-ttu-id="9e646-914">같은 스트림에서 다른 쓰기 작업이 이미 실행 되는 동안 작업을 시작 하려는 경우는 <xref:System.NotSupportedException> 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-914">If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.</span></span>  
  
 <span data-ttu-id="9e646-915">사용자가 성공적으로 인증 될 때까지이 메서드를 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-915">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="9e646-916">인증 중 하나를 호출 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>를 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-916">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-917">다음 코드 예제에서는 비동기 쓰기 작업을 시작 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-917">The following code example demonstrates beginning an asynchronous write operation.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#3)]
 [!code-csharp[NclNegoAsyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#3)]  
  
 <span data-ttu-id="9e646-918">다음 메서드는 작업이 완료 될 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-918">The following method is called when the operation completes.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-919"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-919"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9e646-920"><paramref name="offset is less than 0" />.</span><span class="sxs-lookup"><span data-stu-id="9e646-920"><paramref name="offset is less than 0" />.</span></span>  
  
<span data-ttu-id="9e646-921">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-921">\- or -</span></span> 
 <span data-ttu-id="9e646-922"><paramref name="offset" /> 이 <paramref name="buffer" />의 길이보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-922"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="9e646-923">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-923">\- or -</span></span> 
 <span data-ttu-id="9e646-924"><paramref name="offset" /> count가의 길이 보다 크면 plus <paramref name="buffer" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-924"><paramref name="offset" /> plus count is greater than the length of <paramref name="buffer" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="9e646-925">쓰기 작업이 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-925">The write operation failed.</span></span>  
  
<span data-ttu-id="9e646-926">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-926">\- or -</span></span> 
<span data-ttu-id="9e646-927">암호화 사용 중이지만 데이터를 암호화할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-927">Encryption is in use, but the data could not be encrypted.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9e646-928">진행 중인 쓰기 작업이 이미 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-928">There is already a write operation in progress.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-929">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-929">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-930">인증 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-930">Authentication has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Net.Security.NegotiateStream.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e646-931">가져옵니다는 <see cref="T:System.Boolean" /> 기본 스트림을 읽을 수 있는지 여부를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-931">Gets a <see cref="T:System.Boolean" /> value that indicates whether the underlying stream is readable.</span></span></summary>
        <value><span data-ttu-id="9e646-932"><see langword="true" /> 인증이 수행 되 고 내부 스트림이 읽을 수 있는; 그렇지 않으면 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-932"><see langword="true" /> if authentication has occurred and the underlying stream is readable; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-933">인증이 성공적으로 수행 되 면이 속성 호출에서 반환 된 값을 반환 합니다 <xref:System.IO.Stream.CanRead%2A> 내부 스트림의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-933">If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanRead%2A> property on the underlying stream.</span></span> <span data-ttu-id="9e646-934">인스턴스를 만들 때 기본 스트림을 지정 된 <xref:System.Net.Security.NegotiateStream> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-934">The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-935">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-935">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="System.Net.Security.NegotiateStream.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e646-936">가져옵니다는 <see cref="T:System.Boolean" /> 기본 스트림을 검색할 수 있는지 여부를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-936">Gets a <see cref="T:System.Boolean" /> value that indicates whether the underlying stream is seekable.</span></span></summary>
        <value><span data-ttu-id="9e646-937">이 속성은 항상 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-937">This property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-938">위치를 설정 하지 않아야 합니다 <xref:System.Net.Security.NegotiateStream> 개체 또는 해당 기본 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-938">You should not attempt to set the position of the <xref:System.Net.Security.NegotiateStream> object or its underlying stream.</span></span> <span data-ttu-id="9e646-939">인스턴스를 만들 때 기본 스트림을 지정 된 <xref:System.Net.Security.NegotiateStream> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-939">The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-940">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-940">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Security.NegotiateStream.Position" />
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public override bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanTimeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTimeout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanTimeout : bool" Usage="System.Net.Security.NegotiateStream.CanTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e646-941">가져옵니다는 <see cref="T:System.Boolean" /> 내부 스트림에 제한 시간을 지원 하는지 여부를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-941">Gets a <see cref="T:System.Boolean" /> value that indicates whether the underlying stream supports time-outs.</span></span></summary>
        <value><span data-ttu-id="9e646-942"><see langword="true" /> 내부 스트림에 제한 시간을 지원 하는 경우 그렇지 않으면 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-942"><see langword="true" /> if the underlying stream supports time-outs; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-943">호출에서 반환 된 값을 반환 하는이 속성은 <xref:System.IO.Stream.CanTimeout%2A> 내부 스트림의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-943">This property returns the value returned by invoking the <xref:System.IO.Stream.CanTimeout%2A> property on the underlying stream.</span></span> <span data-ttu-id="9e646-944">인스턴스를 만들 때 기본 스트림을 지정 된 <xref:System.Net.Security.NegotiateStream> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-944">The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-945">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-945">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Net.Security.NegotiateStream.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e646-946">가져옵니다는 <see cref="T:System.Boolean" /> 내부 스트림이 쓰기 가능한 지 여부를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-946">Gets a <see cref="T:System.Boolean" /> value that indicates whether the underlying stream is writable.</span></span></summary>
        <value><span data-ttu-id="9e646-947"><see langword="true" /> 인증이 수행 되 고 내부 스트림이 쓰기 가능한; 그렇지 않으면 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-947"><see langword="true" /> if authentication has occurred and the underlying stream is writable; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-948">인증이 성공적으로 수행 되 면이 속성 호출에서 반환 된 값을 반환 합니다 <xref:System.IO.Stream.CanWrite%2A> 내부 스트림의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-948">If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanWrite%2A> property on the underlying stream.</span></span> <span data-ttu-id="9e646-949">인스턴스를 만들 때 기본 스트림을 지정 된 <xref:System.Net.Security.NegotiateStream> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-949">The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-950">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-950">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="negotiateStream.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="9e646-951">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-951"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="9e646-952"><see cref="T:System.Net.Security.NegotiateStream" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-952">Releases the unmanaged resources used by the <see cref="T:System.Net.Security.NegotiateStream" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-953">이 메서드는 공용 `Dispose()` 메서드 및 <xref:System.Object.Finalize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-953">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="9e646-954">`Dispose()` 보호 된 호출 `Dispose(Boolean)` 메서드를 `disposing` 매개 변수 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-954">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="9e646-955"><xref:System.Object.Finalize%2A> 호출 `Dispose` 사용 하 여 `disposing` 로 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-955"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="9e646-956">경우는 `disposing` 매개 변수가 true 이면이 메서드는 관리 되는 개체가 보유 한 모든 리소스를 해제이 <xref:System.Net.Security.NegotiateStream> 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-956">When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Security.NegotiateStream> references.</span></span> <span data-ttu-id="9e646-957">이 메서드는 참조되는 각 개체의 `Dispose()` 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-957">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9e646-958">
            <see langword="Dispose" />는 다른 개체에서 여러 번 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-958">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="9e646-959">재정의 하는 경우 <see langword="Dispose(Boolean)" /> 대 한 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 해야 <see langword="Dispose" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-959">When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="9e646-960">구현 하는 방법에 대 한 자세한 내용은 <see langword="Dispose(Boolean)" />를 참조 하세요 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-960">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="9e646-961">에 대 한 자세한 내용은 <see langword="Dispose" /> 및 <see cref="M:System.Object.Finalize" />를 참조 하십시오 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Finalize 메서드 재정의](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-961">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsClient (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsClient(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="abstract member EndAuthenticateAsClient : IAsyncResult -&gt; unit&#xA;override this.EndAuthenticateAsClient : IAsyncResult -&gt; unit" Usage="negotiateStream.EndAuthenticateAsClient asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="9e646-962"><see cref="T:System.IAsyncResult" /> 에 대 한 호출에서 반환한 인스턴스 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-962">An <see cref="T:System.IAsyncResult" /> instance returned by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</span></span></param>
        <summary><span data-ttu-id="9e646-963">호출 하 여 시작한 보류 상태의 비동기 클라이언트 인증 작업을 종료 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-963">Ends a pending asynchronous client authentication operation that was started with a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-964">작업이 완료 되지 않은 경우이 메서드는 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-964">If the operation has not completed, this method blocks until it does.</span></span> <span data-ttu-id="9e646-965">때 인증에 성공 하면 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-965">When the authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9e646-966">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-966">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9e646-967">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-967">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-968">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-968">In this case, you can retry the authentication with a different credential.</span></span>  
  
 <span data-ttu-id="9e646-969">이 작업을 동기적으로 수행 하려면 중 하나를 사용 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-969">To perform this operation synchronously, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-970"><paramref name="asyncResult" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-970"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9e646-971"><paramref name="asyncResult" /> 호출 하 여 만들어지지 않은 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-971"><paramref name="asyncResult" /> was not created by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-972">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-972">The authentication failed.</span></span> <span data-ttu-id="9e646-973">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-973">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-974">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-974">The authentication failed.</span></span> <span data-ttu-id="9e646-975">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-975">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-976">완료할 보류 상태의 클라이언트 인증이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-976">There is no pending client authentication to complete.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsServer(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsServer (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsServer(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="abstract member EndAuthenticateAsServer : IAsyncResult -&gt; unit&#xA;override this.EndAuthenticateAsServer : IAsyncResult -&gt; unit" Usage="negotiateStream.EndAuthenticateAsServer asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="9e646-977"><see cref="T:System.IAsyncResult" /> 에 대 한 호출에서 반환한 인스턴스 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-977">An <see cref="T:System.IAsyncResult" /> instance returned by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</span></span></param>
        <summary><span data-ttu-id="9e646-978">호출 하 여 시작한 보류 상태의 비동기 클라이언트 인증 작업을 종료 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-978">Ends a pending asynchronous client authentication operation that was started with a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-979">작업이 완료 되지 않은 경우이 메서드는 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-979">If the operation has not completed, this method blocks until it does.</span></span>  
  
 <span data-ttu-id="9e646-980">인증이 성공 하면, 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 에서 사용 하는 보안 서비스를 결정 하는 속성을 <xref:System.Net.Security.NegotiateStream>입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-980">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9e646-981">확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-981">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9e646-982">수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 요소나 <xref:System.Security.Authentication.InvalidCredentialException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-982">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9e646-983">이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-983">In this case, you can retry the authentication with a different credential.</span></span>  
  
 <span data-ttu-id="9e646-984">이 작업을 동기적으로 수행 하려면 사용 된 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-984">To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-985"><paramref name="asyncResult" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-985"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9e646-986"><paramref name="asyncResult" /> 호출 하 여 만들어지지 않은 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-986"><paramref name="asyncResult" /> was not created by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9e646-987">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-987">The authentication failed.</span></span> <span data-ttu-id="9e646-988">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-988">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9e646-989">인증에 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-989">The authentication failed.</span></span> <span data-ttu-id="9e646-990">인증을 다시 시도 하려면이 개체를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-990">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-991">완료할 보류 중인 인증이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-991">There is no pending authentication to complete.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndRead : IAsyncResult -&gt; int" Usage="negotiateStream.EndRead asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="9e646-992"><see cref="T:System.IAsyncResult" /> 를 호출 하 여 반환 된 인스턴스 <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></span><span class="sxs-lookup"><span data-stu-id="9e646-992">An <see cref="T:System.IAsyncResult" /> instance returned by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></span></span></param>
        <summary><span data-ttu-id="9e646-993">비동기 읽기 작업에 대 한 호출을 사용 하 여 시작 된 종료 <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-993">Ends an asynchronous read operation that was started with a call to <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</span></span></summary>
        <returns><span data-ttu-id="9e646-994"><see cref="T:System.Int32" /> 내부 스트림에서 읽은 바이트 수를 지정 하는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-994">A <see cref="T:System.Int32" /> value that specifies the number of bytes read from the underlying stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-995">작업이 완료 되지 않은 경우이 메서드는 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-995">If the operation has not completed, this method blocks until it does.</span></span>  
  
 <span data-ttu-id="9e646-996">이 작업을 동기적으로 수행 하려면 사용 된 <xref:System.Net.Security.NegotiateStream.Read%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-996">To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.</span></span>  
  
 <span data-ttu-id="9e646-997">사용자가 성공적으로 인증 될 때까지이 메서드를 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-997">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="9e646-998">인증 중 하나를 호출 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>를 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-998">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-999">다음 코드 예제에서는 읽기 작업을 비동기 종료 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-999">The following code example demonstrates ending an asynchronous read operation.</span></span> <span data-ttu-id="9e646-1000">작업을 시작 하는 방법을 보여 주는 예제를 참조 하세요. <xref:System.Net.Security.NegotiateStream.BeginRead%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1000">For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginRead%2A>.</span></span>  
  
 [!code-cpp[NclNegoAsyncServer#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#3)]
 [!code-csharp[NclNegoAsyncServer#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-1001"><paramref name="asyncResult" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-1001"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9e646-1002">에 대 한 호출에서 asyncResult 만들어지지 <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1002">The asyncResult was not created by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-1003">인증 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1003">Authentication has not occurred.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="9e646-1004">읽기 작업이 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1004">The read operation failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndWrite : IAsyncResult -&gt; unit" Usage="negotiateStream.EndWrite asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="9e646-1005"><see cref="T:System.IAsyncResult" /> 를 호출 하 여 반환 된 인스턴스 <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></span><span class="sxs-lookup"><span data-stu-id="9e646-1005">An <see cref="T:System.IAsyncResult" /> instance returned by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></span></span></param>
        <summary><span data-ttu-id="9e646-1006">호출 하 여 시작한 비동기 쓰기 작업을 끝냅니다 <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1006">Ends an asynchronous write operation that was started with a call to <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-1007">작업이 완료 되지 않은 경우이 메서드는 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1007">If the operation has not completed, this method blocks until it does.</span></span>  
  
 <span data-ttu-id="9e646-1008">사용자가 성공적으로 인증 될 때까지이 메서드를 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1008">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="9e646-1009">인증 중 하나를 호출 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>를 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-1009">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
 <span data-ttu-id="9e646-1010">이 작업을 동기적으로 수행 하려면 사용 된 <xref:System.Net.Security.NegotiateStream.Write%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-1010">To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Write%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-1011">다음 코드 예제에서는 비동기 쓰기 작업을 완료 하기 위해 호출 되는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1011">The following code example demonstrates a method that is called to complete the asynchronous write operation.</span></span> <span data-ttu-id="9e646-1012">작업을 시작 하는 방법을 보여 주는 예제를 참조 하세요. <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1012">For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-1013"><paramref name="asyncResult" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-1013"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9e646-1014">에 대 한 호출에서 asyncResult 만들어지지 <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1014">The asyncResult was not created by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-1015">인증 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1015">Authentication has not occurred.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="9e646-1016">쓰기 작업이 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1016">The write operation failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="negotiateStream.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9e646-1017">기본 장치에 쓸 버퍼링 된 모든 데이터가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1017">Causes any buffered data to be written to the underlying device.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-1018">이 메서드를 호출 <xref:System.IO.Stream.Flush%2A> 내부 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1018">This method invokes <xref:System.IO.Stream.Flush%2A> on the underlying stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-1019">다음 코드 예제에서는 스트림을 플러시하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1019">The following code example demonstrates flushing the stream.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImpersonationLevel">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Principal.TokenImpersonationLevel ImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ImpersonationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ImpersonationLevel As TokenImpersonationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::TokenImpersonationLevel ImpersonationLevel { System::Security::Principal::TokenImpersonationLevel get(); };" />
      <MemberSignature Language="F#" Value="member this.ImpersonationLevel : System.Security.Principal.TokenImpersonationLevel" Usage="System.Net.Security.NegotiateStream.ImpersonationLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.TokenImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e646-1020">서버에서 클라이언트의 자격 증명을 사용 하는 방법을 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1020">Gets a value that indicates how the server can use the client's credentials.</span></span></summary>
        <value><span data-ttu-id="9e646-1021"><see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1021">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-1022">이 메서드를 호출 하기 전에 성공적으로 인증 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1022">You must successfully authenticate before calling this method.</span></span> <span data-ttu-id="9e646-1023">클라이언트 중 하나를 호출 하 여 인증을 요청할 때 가장 수준을 지정 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-1023">Clients specify the impersonation level when they request authentication by calling one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods.</span></span> <span data-ttu-id="9e646-1024">지정 하지 않고 인증 하는 경우는 <xref:System.Security.Principal.TokenImpersonationLevel> , <xref:System.Security.Principal.TokenImpersonationLevel.Identification> 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1024">If you authenticate without specifying a <xref:System.Security.Principal.TokenImpersonationLevel> , <xref:System.Security.Principal.TokenImpersonationLevel.Identification> is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-1025">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1025">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-1026">인증이 실패 하거나 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1026">Authentication failed or has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAuthenticated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAuthenticated : bool" Usage="System.Net.Security.NegotiateStream.IsAuthenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e646-1027">가져옵니다는 <see cref="T:System.Boolean" /> 인증의 성공 여부를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1027">Gets a <see cref="T:System.Boolean" /> value that indicates whether authentication was successful.</span></span></summary>
        <value><span data-ttu-id="9e646-1028"><see langword="true" /> 인증이 성공 하는 경우 그렇지 않으면 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1028"><see langword="true" /> if successful authentication occurred; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-1029">호출 하 여 클라이언트를 인증 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-1029">Clients authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods.</span></span> <span data-ttu-id="9e646-1030">서버를 호출 하 여 인증 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-1030">Servers authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-1031">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1031">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEncrypted">
      <MemberSignature Language="C#" Value="public override bool IsEncrypted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEncrypted" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsEncrypted" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEncrypted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEncrypted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEncrypted : bool" Usage="System.Net.Security.NegotiateStream.IsEncrypted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e646-1032">가져옵니다를 <see cref="T:System.Boolean" /> 나타내는 값 여부를이 <see cref="T:System.Net.Security.NegotiateStream" /> 데이터 암호화를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1032">Gets a <see cref="T:System.Boolean" /> value that indicates whether this <see cref="T:System.Net.Security.NegotiateStream" /> uses data encryption.</span></span></summary>
        <value><span data-ttu-id="9e646-1033"><see langword="true" /> 데이터는 네트워크를 통해 전송 되기 전에 암호화 및 해독 하는 경우에 도달한 경우에 원격 끝점 그렇지 않으면 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1033"><see langword="true" /> if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-1034">암호화 된 데이터의 개인 정보를 보호할 수 있습니다. 즉,는 전송 중에 데이터를 해독할 수 없으므로 제 3 자에서 확인 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1034">Encryption helps to protect the privacy of the data; namely, it helps to ensure that while data is in transit it cannot be deciphered by third parties.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-1035">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1035">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Security.ProtectionLevel" />
      </Docs>
    </Member>
    <Member MemberName="IsMutuallyAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsMutuallyAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMutuallyAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsMutuallyAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMutuallyAuthenticated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMutuallyAuthenticated : bool" Usage="System.Net.Security.NegotiateStream.IsMutuallyAuthenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e646-1036">가져옵니다는 <see cref="T:System.Boolean" /> 서버와 클라이언트 모두 인증 되었는지 여부를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1036">Gets a <see cref="T:System.Boolean" /> value that indicates whether both the server and the client have been authenticated.</span></span></summary>
        <value><span data-ttu-id="9e646-1037"><see langword="true" /> 서버가 인증 되었으면 하는 경우 그렇지 않으면 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1037"><see langword="true" /> if the server has been authenticated; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-1038">클라이언트 인증에 대 한 자격 증명을 제공 하도록 서버를 원하는 경우 클라이언트에서 상호 인증을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1038">Mutual authentication is specified by the client when the client wants the server to provide credentials for authentication.</span></span> <span data-ttu-id="9e646-1039">기본적으로 클라이언트는 상호 인증을 요청합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1039">By default, clients request mutual authentication.</span></span>  
  
 <span data-ttu-id="9e646-1040">협상 프로토콜은 클라이언트와 서버에서 지 원하는 보안 프로토콜에 따라 NTLM 이나 Kerberos를 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1040">The Negotiate protocol selects either NTLM or Kerberos depending on the security protocols supported by the client and server.</span></span> <span data-ttu-id="9e646-1041">NTLM 상호 인증을 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1041">NTLM does not support mutual authentication.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-1042">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1042">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsServer">
      <MemberSignature Language="C#" Value="public override bool IsServer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServer" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsServer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsServer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsServer : bool" Usage="System.Net.Security.NegotiateStream.IsServer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e646-1043">가져옵니다를 <see cref="T:System.Boolean" /> 연결의 로컬측이 사용 여부를 나타내는 값 <see cref="T:System.Net.Security.NegotiateStream" /> 서버로 인증 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1043">Gets a <see cref="T:System.Boolean" /> value that indicates whether the local side of the connection used by this <see cref="T:System.Net.Security.NegotiateStream" /> was authenticated as the server.</span></span></summary>
        <value><span data-ttu-id="9e646-1044"><see langword="true" /> 로컬 끝점이 인증 된 연결의 서버측으로 인증 되 면 그렇지 않으면 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1044"><see langword="true" /> if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-1045">이 속성을 반환 하는 경우 인증이 실패 하거나 발생 하지 않은, `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1045">If authentication failed or did not occur, this property returns `false`.</span></span>  
  
 <span data-ttu-id="9e646-1046">서버를 인증 하려면 호출을 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-1046">To authenticate as the server, call the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-1047">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1047">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSigned">
      <MemberSignature Language="C#" Value="public override bool IsSigned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSigned" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsSigned" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSigned { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSigned : bool" Usage="System.Net.Security.NegotiateStream.IsSigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e646-1048">가져옵니다는 <see cref="T:System.Boolean" /> 이 스트림을 사용 하 여 전송 된 데이터가 서명 되었는지 여부를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1048">Gets a <see cref="T:System.Boolean" /> value that indicates whether the data sent using this stream is signed.</span></span></summary>
        <value><span data-ttu-id="9e646-1049"><see langword="true" /> 데이터를 전송 하기 전에 서명 하는 경우 그렇지 않으면 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1049"><see langword="true" /> if the data is signed before being transmitted; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-1050">데이터의 무결성을 보호 하는 데 도움이 데이터 서명 즉, 수신자가 데이터 전송 중에 사용 하 여 훼손 되었는지 여부를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1050">Data signing helps to protect the integrity of the data; namely, it helps the recipient determine whether the data has been tampered with while in transit.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-1051">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1051">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Net.Security.NegotiateStream.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e646-1052">내부 스트림의 길이 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1052">Gets the length of the underlying stream.</span></span></summary>
        <value><span data-ttu-id="9e646-1053"><see cref="T:System.Int64" /> 는 내부 스트림의 길이 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1053">A <see cref="T:System.Int64" /> that specifies the length of the underlying stream.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-1054">호출에서 반환 된 값을 반환 하는이 속성은 <xref:System.IO.Stream.Length%2A> 내부 스트림의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1054">This property returns the value returned by invoking the <xref:System.IO.Stream.Length%2A> property on the underlying stream.</span></span> <span data-ttu-id="9e646-1055">내부 스트림을 검색할 수 없는 경우이 속성은 일반적으로 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1055">If the underlying stream is not seekable, this property will typically throw an exception.</span></span> <span data-ttu-id="9e646-1056">기본 스트림의 런타임 형식을 throw 되는 예외의 런타임 형식이 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1056">The run-time type of the underlying stream determines the run-time type of the exception that is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-1057">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1057">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9e646-1058">이 속성의 값을 가져올 때 내부 스트림 지원 되지 않습니다는 <see cref="T:System.Net.Sockets.NetworkStream" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1058">Getting the value of this property is not supported when the underlying stream is a <see cref="T:System.Net.Sockets.NetworkStream" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="System.Net.Security.NegotiateStream.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e646-1059">내부 스트림 내의 현재 위치를 가져오거나 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1059">Gets or sets the current position in the underlying stream.</span></span></summary>
        <value><span data-ttu-id="9e646-1060"><see cref="T:System.Int64" /> 내부 스트림 내의 현재 위치를 지정 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1060">A <see cref="T:System.Int64" /> that specifies the current position in the underlying stream.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-1061">호출에서 반환 된 값을 반환 하는이 속성은 <xref:System.IO.Stream.Position%2A> 내부 스트림의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1061">This property returns the value returned by invoking the <xref:System.IO.Stream.Position%2A> property on the underlying stream.</span></span> <span data-ttu-id="9e646-1062">내부 스트림을 검색할 수 없는 경우이 속성은 일반적으로 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1062">If the underlying stream is not seekable, this property will typically throw an exception.</span></span> <span data-ttu-id="9e646-1063">기본 스트림의 런타임 형식을 throw 되는 예외의 런타임 형식이 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1063">The run-time type of the underlying stream determines the run-time type of the exception that is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9e646-1064">이 속성을 설정 하는 것은 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1064">Setting this property is not supported.</span></span>  
  
<span data-ttu-id="9e646-1065">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-1065">\- or -</span></span> 
<span data-ttu-id="9e646-1066">이 속성의 값을 가져올 때 내부 스트림 지원 되지 않습니다는 <see cref="T:System.Net.Sockets.NetworkStream" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1066">Getting the value of this property is not supported when the underlying stream is a <see cref="T:System.Net.Sockets.NetworkStream" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] * int * int -&gt; int" Usage="negotiateStream.Read (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="9e646-1067"><see cref="T:System.Byte" /> 스트림에서 읽은 바이트를 수신 하는 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1067">A <see cref="T:System.Byte" /> array that receives the bytes read from the stream.</span></span></param>
        <param name="offset"><span data-ttu-id="9e646-1068">A <see cref="T:System.Int32" /> 의 0부터 시작 위치가 들어 있는 <paramref name="buffer" /> 이 스트림에서 읽은 데이터를 저장 하기 시작 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1068">A <see cref="T:System.Int32" /> containing the zero-based location in <paramref name="buffer" /> at which to begin storing the data read from this stream.</span></span></param>
        <param name="count"><span data-ttu-id="9e646-1069"><see cref="T:System.Int32" /> 스트림에서 읽을 바이트의 최대 수를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1069">A <see cref="T:System.Int32" /> containing the maximum number of bytes to read from the stream.</span></span></param>
        <summary><span data-ttu-id="9e646-1070">이 스트림에서 데이터를 읽고 지정된 된 배열에 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1070">Reads data from this stream and stores it in the specified array.</span></span></summary>
        <returns><span data-ttu-id="9e646-1071"><see cref="T:System.Int32" /> 내부 스트림에서 읽은 바이트 수를 지정 하는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1071">A <see cref="T:System.Int32" /> value that specifies the number of bytes read from the underlying stream.</span></span> <span data-ttu-id="9e646-1072">읽을 데이터가 더 이상 있으면 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1072">When there is no more data to be read, returns 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-1073">메서드는 최대 읽습니다 `count` 현재에서는 바이트 스트림 및에 저장 합니다 `buffer` 부터 `offset`합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1073">The method reads a maximum of `count` bytes from the current stream and stores them in `buffer` beginning at `offset`.</span></span>  
  
 <span data-ttu-id="9e646-1074">사용자가 성공적으로 인증 될 때까지이 메서드를 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1074">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="9e646-1075">인증 중 하나를 호출 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>를 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-1075">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
 <span data-ttu-id="9e646-1076">이 작업을 비동기적으로 수행 하려면 사용 된 <xref:System.Net.Security.NegotiateStream.BeginRead%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-1076">To perform this operation asynchronously, use the <xref:System.Net.Security.NegotiateStream.BeginRead%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-1077">다음 코드 예제에서 읽는 방법을 보여 줍니다는 <xref:System.Net.Security.NegotiateStream>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1077">The following code example demonstrates reading from a <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 [!code-cpp[NclNegoSyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncServer/CPP/NclNegoSyncServer.cpp#1)]
 [!code-csharp[NclNegoSyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="9e646-1078">읽기 작업이 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1078">The read operation failed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-1079">인증 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1079">Authentication has not occurred.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9e646-1080"><see cref="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" /> 작업이 이미 진행 중입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1080">A <see cref="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" /> operation is already in progress.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public override int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ReadTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReadTimeout : int with get, set" Usage="System.Net.Security.NegotiateStream.ReadTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e646-1081">데이터에 대 한 대기를 차단 하는 읽기 작업을 하는 시간을 가져오거나 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1081">Gets or sets the amount of time a read operation blocks waiting for data.</span></span></summary>
        <value><span data-ttu-id="9e646-1082"><see cref="T:System.Int32" /> 읽기 작업이 실패할 때까지 걸리는 시간을 지정 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1082">A <see cref="T:System.Int32" /> that specifies the amount of time that will elapse before a read operation fails.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-1083">호출에서 반환 된 값을 반환 하는이 속성은 <xref:System.IO.Stream.ReadTimeout%2A> 내부 스트림의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1083">This property returns the value returned by invoking the <xref:System.IO.Stream.ReadTimeout%2A> property on the underlying stream.</span></span> <span data-ttu-id="9e646-1084">이 속성을 설정 하는 경우는 <xref:System.IO.Stream.ReadTimeout%2A> 내부 스트림의 값이 지정된 된 값으로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1084">When you set this property, the <xref:System.IO.Stream.ReadTimeout%2A> value on the underlying stream is set to the specified value.</span></span>  
  
 <span data-ttu-id="9e646-1085">내부 스트림이 경우는 <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.ReadTimeout%2A> 밀리초에서 이며로 설정 된 <xref:System.Threading.Timeout.Infinite> 는 읽기 작업 시간 초과 되지 않습니다 있도록 기본적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1085">If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.ReadTimeout%2A> is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that read operations do not time out.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-1086">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1086">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteIdentity">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.IIdentity RemoteIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IIdentity RemoteIdentity" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.RemoteIdentity" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RemoteIdentity As IIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::IIdentity ^ RemoteIdentity { System::Security::Principal::IIdentity ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RemoteIdentity : System.Security.Principal.IIdentity" Usage="System.Net.Security.NegotiateStream.RemoteIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e646-1087">인증 된이 스트림을 공유 하는 원격 대상의 id에 대 한 정보를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1087">Gets information about the identity of the remote party sharing this authenticated stream.</span></span></summary>
        <value><span data-ttu-id="9e646-1088"><see cref="T:System.Security.Principal.IIdentity" /> 원격 끝점의 id를 설명 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1088">An <see cref="T:System.Security.Principal.IIdentity" /> object that describes the identity of the remote endpoint.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-1089">클라이언트에서 액세스 하는 경우 반환을 <xref:System.Security.Principal.GenericIdentity> 주체 이름 SPN (서비스) 서버 및 사용 하는 인증 프로토콜을 포함 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1089">When accessed by the client, this property returns a <xref:System.Security.Principal.GenericIdentity> containing the Service Principal Name (SPN) of the server and the authentication protocol used.</span></span> <span data-ttu-id="9e646-1090">서버에서 액세스 하는 경우 반환을 <xref:System.Security.Principal.WindowsIdentity> 는 클라이언트에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1090">When accessed by the server, this property returns a <xref:System.Security.Principal.WindowsIdentity> that describes the client.</span></span> <span data-ttu-id="9e646-1091">경우는 <xref:System.Security.Principal.WindowsIdentity> 는 사용할 수 없는 클라이언트 정보를 서버에 반환 됩니다는 <xref:System.Security.Principal.GenericIdentity>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1091">If the <xref:System.Security.Principal.WindowsIdentity> is not available, client information is returned to the server in a <xref:System.Security.Principal.GenericIdentity>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-1092">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1092">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoAsyncServer#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#2)]
 [!code-csharp[NclNegoAsyncServer#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-1093">인증이 실패 하거나 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1093">Authentication failed or has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="negotiateStream.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset"><span data-ttu-id="9e646-1094">이 값은 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1094">This value is ignored.</span></span></param>
        <param name="origin"><span data-ttu-id="9e646-1095">이 값은 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1095">This value is ignored.</span></span></param>
        <summary><span data-ttu-id="9e646-1096">Throw <see cref="T:System.NotSupportedException" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1096">Throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <returns><span data-ttu-id="9e646-1097">항상 <see cref="T:System.NotSupportedException" />을 throw합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1097">Always throws a <see cref="T:System.NotSupportedException" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-1098">이 메서드를 호출 하지 마세요.</span><span class="sxs-lookup"><span data-stu-id="9e646-1098">Do not call this method.</span></span> <span data-ttu-id="9e646-1099">이 상속 되지만 지원 되지 않습니다 <xref:System.Net.Security.NegotiateStream>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1099">It is inherited, but is not supported by <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9e646-1100">검색에서 지원 되지 않습니다 <see cref="T:System.Net.Security.NegotiateStream" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1100">Seeking is not supported on <see cref="T:System.Net.Security.NegotiateStream" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="negotiateStream.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="9e646-1101"><see cref="T:System.Int64" /> 스트림의 길이 지정 하는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1101">An <see cref="T:System.Int64" /> value that specifies the length of the stream.</span></span></param>
        <summary><span data-ttu-id="9e646-1102">내부 스트림의 길이 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1102">Sets the length of the underlying stream.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="negotiateStream.Write (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="9e646-1103"><see cref="T:System.Byte" /> 스트림에 쓸 바이트를 제공 하는 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1103">A <see cref="T:System.Byte" /> array that supplies the bytes written to the stream.</span></span></param>
        <param name="offset"><span data-ttu-id="9e646-1104">스트림에 쓸 바이트를 읽기 시작하는 <paramref name="buffer" /> 내의 위치(0부터 시작)가 포함된 <see cref="T:System.Int32" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1104">An <see cref="T:System.Int32" /> containing the zero-based location in <paramref name="buffer" /> at which to begin reading bytes to be written to the stream.</span></span></param>
        <param name="count"><span data-ttu-id="9e646-1105">A <see cref="T:System.Int32" /> 에서 읽을 바이트 수가 들어 있는 <paramref name="buffer" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1105">A <see cref="T:System.Int32" /> containing the number of bytes to read from <paramref name="buffer" />.</span></span></param>
        <summary><span data-ttu-id="9e646-1106">지정된 된 수의 쓰기 <see cref="T:System.Byte" />지정 된 버퍼와 오프셋을 사용 하 여 기본 스트림 s입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1106">Write the specified number of <see cref="T:System.Byte" />s to the underlying stream using the specified buffer and offset.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-1107">암호화, 서명 또는 암호화 및 서명를 사용 하는 경우이 메서드 버퍼에서 데이터를 읽고, 암호화, 서명, 또는 암호화, 서명 및 기본 스트림을 사용 하 여 전송 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1107">If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream.</span></span> <span data-ttu-id="9e646-1108">이 메서드를 호출 하는 경우 보안 없이 사용 중인 데이터 암호화 또는 서명 같은 서비스를 <xref:System.IO.Stream.Write%2A> 내부 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1108">If no security services such as data encryption or signing are in use, this method invokes <xref:System.IO.Stream.Write%2A> on the underlying stream.</span></span>  
  
 <span data-ttu-id="9e646-1109">이 메서드는 쓰기 작업이 완료 될 때 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1109">This method blocks while the write operation completes.</span></span> <span data-ttu-id="9e646-1110">작업이 완료 될 때까지 차단 하지 않으려면, 사용 된 <xref:System.Net.Security.NegotiateStream.Write%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-1110">To prevent blocking while the operation completes, use the <xref:System.Net.Security.NegotiateStream.Write%2A> method.</span></span>  
  
 <span data-ttu-id="9e646-1111">사용자가 성공적으로 인증 될 때까지이 메서드를 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1111">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="9e646-1112">인증 중 하나를 호출 합니다 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>를 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9e646-1112">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
 <span data-ttu-id="9e646-1113"><xref:System.Net.Security.NegotiateStream> 클래스가 여러 동시 쓰기 작업을 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1113">The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations.</span></span> <span data-ttu-id="9e646-1114">같은 스트림에서 다른 쓰기 작업이 이미 실행 되는 동안 작업을 시작 하려는 경우는 <xref:System.NotSupportedException> 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1114">If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-1115">다음 코드 예제에서는 쓸은 <xref:System.Net.Security.NegotiateStream>합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1115">The following code example demonstrates writing to a <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9e646-1116"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-1116"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9e646-1117"><paramref name="offset is less than 0" />.</span><span class="sxs-lookup"><span data-stu-id="9e646-1117"><paramref name="offset is less than 0" />.</span></span>  
  
<span data-ttu-id="9e646-1118">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-1118">\- or -</span></span> 
 <span data-ttu-id="9e646-1119"><paramref name="offset" /> 이 <paramref name="buffer" />의 길이보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1119"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="9e646-1120">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-1120">\- or -</span></span> 
 <span data-ttu-id="9e646-1121"><paramref name="offset" /> count가의 길이 보다 크면 plus <paramref name="buffer" />합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1121"><paramref name="offset" /> plus count is greater than the length of <paramref name="buffer" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="9e646-1122">쓰기 작업이 실패 했습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1122">The write operation failed.</span></span>  
  
<span data-ttu-id="9e646-1123">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="9e646-1123">\- or -</span></span> 
<span data-ttu-id="9e646-1124">암호화 사용 중이지만 데이터를 암호화할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1124">Encryption is in use, but the data could not be encrypted.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9e646-1125">진행 중인 쓰기 작업이 이미 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1125">There is already a write operation in progress.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9e646-1126">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="9e646-1126">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9e646-1127">인증 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1127">Authentication has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public override int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WriteTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WriteTimeout : int with get, set" Usage="System.Net.Security.NegotiateStream.WriteTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9e646-1128">데이터에 대 한 대기를 차단 하는 쓰기 작업을 하는 시간을 가져오거나 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1128">Gets or sets the amount of time a write operation blocks waiting for data.</span></span></summary>
        <value><span data-ttu-id="9e646-1129"><see cref="T:System.Int32" /> 쓰기 작업이 실패할 때까지 걸리는 시간을 지정 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1129">A <see cref="T:System.Int32" /> that specifies the amount of time that will elapse before a write operation fails.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9e646-1130">호출에서 반환 된 값을 반환 하는이 속성은 <xref:System.IO.Stream.WriteTimeout%2A> 내부 스트림의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1130">This property returns the value returned by invoking the <xref:System.IO.Stream.WriteTimeout%2A> property on the underlying stream.</span></span> <span data-ttu-id="9e646-1131">집합 작업에 대 한 지정 된 값을 설정 합니다 <xref:System.IO.Stream.WriteTimeout%2A> 내부 스트림의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1131">For set operations, the specified value sets the <xref:System.IO.Stream.WriteTimeout%2A> value on the underlying stream.</span></span>  
  
 <span data-ttu-id="9e646-1132">기본 스트림이 <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.WriteTimeout%2A> 밀리초에서 이며로 설정 되어 <xref:System.Threading.Timeout.Infinite> 기본적으로 쓰기 작업 시간이 초과 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1132">If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.WriteTimeout%2A> is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that write operations do not time out.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9e646-1133">다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9e646-1133">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>