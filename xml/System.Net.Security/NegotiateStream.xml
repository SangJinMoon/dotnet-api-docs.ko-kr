<Type Name="NegotiateStream" FullName="System.Net.Security.NegotiateStream">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c14dd401696189bb315395ed828de5f1c0c89ba3" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30461137" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NegotiateStream : System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NegotiateStream extends System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="DocId" Value="T:System.Net.Security.NegotiateStream" />
  <TypeSignature Language="VB.NET" Value="Public Class NegotiateStream&#xA;Inherits AuthenticatedStream" />
  <TypeSignature Language="C++ CLI" Value="public ref class NegotiateStream : System::Net::Security::AuthenticatedStream" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Security.AuthenticatedStream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>클라이언트-서버 통신에서 협상 보안 프로토콜을 사용하여 클라이언트를 인증하고 선택적으로 서버를 인증하는 스트림을 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Net.Security.NegotiateStream> 인증에 대 한 정보를 보호 하려면 클래스는 클라이언트와 서버 간에 전송 합니다. 사용 하 여 <xref:System.Net.Security.NegotiateStream>, 다음을 수행할 수 있습니다.  
  
-   가장 또는 위임에 대 한 서버에 클라이언트의 자격 증명을 보냅니다.  
  
-   서버 인증을 요청 합니다.  
  
-   암호화 및/또는 전송 하기 전에 데이터에 서명  
  
 인증 정보를 전송 하기 전에 수행 되어야 합니다. 클라이언트가 동기를 사용 하 여 인증을 요청할 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 인증 완료할 때까지 차단 하는 메서드 또는 비동기 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> 메서드 인증이 완료 되기를 기다리는 동안 차단 하지 않습니다. 서버 인증을 사용 하 여 동기 요청 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 또는 비동기 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드. 클라이언트 및 필요에 따라 서버에 보안 협상 프로토콜을 사용 하 여 인증 됩니다. Windows 95/98 시스템에서 Windows NT LAN Manager (NTLM) 인증에 사용 되는 프로토콜입니다. 다른 플랫폼 Kerberos 프로토콜이 인증에 사용 되 클라이언트와 서버 모두에서 지 원하는 경우; 그렇지 않으면 NTLM이 사용 됩니다. 대 한 이러한 프로토콜의 자세한 설명은 MSDN Platform SDK 설명서를 msdn.microsoft.com/library/에서 참조 하십시오. <xref:System.Net.Security.NegotiateStream> 클래스 보안 지원 공급자 인터페이스 (SSPI)를 사용 하 여 인증을 수행 합니다.  
  
 인증이 성공 하면, 체크는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 보안 서비스를 확인 하려면 속성에서 사용할는 <xref:System.Net.Security.NegotiateStream> 을 전송 하는 동안 데이터를 보호 합니다. 확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다. 원격 클라이언트 또는 사용 하 여 서버에 대 한 정보를 읽을 수는 <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> 속성입니다.  
  
 인증에 실패 하는 경우 표시 됩니다는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 동기 버전을 사용 하 여 데이터를 보내는 <xref:System.Net.Security.NegotiateStream.Write%2A> 또는 비동기 <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> 메서드. 동기 버전을 사용 하 여 데이터를 수신 <xref:System.Net.Security.NegotiateStream.Read%2A> 또는 비동기 <xref:System.Net.Security.NegotiateStream.BeginRead%2A> 메서드. 암호화 또는 서명이 설정 되어 같은 보안 서비스를 이러한 자동 적용 됩니다 하 여 데이터에는 <xref:System.Net.Security.NegotiateStream>합니다.  
  
 <xref:System.Net.Security.NegotiateStream> 만들 때 제공 하는 스트림을 사용 하 여 데이터를 전송에서 <xref:System.Net.Security.NegotiateStream>합니다. 지정 하는 옵션이 있는이 내부 스트림을 제공 하는 경우 여부는 <xref:System.Net.Security.NegotiateStream> 내부 스트림도 닫힙니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 클라이언트 서버 연결의 클라이언트 쪽에서 <xref:System.Net.Security.NegotiateStream>합니다. 클라이언트를 인증 하 고 서버에 메시지를 비동기적으로 보냅니다.  
  
 [!code-cpp[NclNegoAsyncClient#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#0)]
 [!code-csharp[NclNegoAsyncClient#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#0)]  
  
 다음 코드 예제에서는 사용 하는 클라이언트 서버 연결의 서버 쪽에서 <xref:System.Net.Security.NegotiateStream> 클라이언트 인증을 받고 클라이언트에서 보낸 메시지를 읽습니다.  
  
 [!code-cpp[NclNegoAsyncServer#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#0)]
 [!code-csharp[NclNegoAsyncServer#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Net.Security.NegotiateStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 방지 하기 위해는 <xref:System.Net.Security.NegotiateStream> 에서 제공 하는 스트림을 닫는 사용 하 여는 <xref:System.Net.Security.NegotiateStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29> 생성자입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="innerStream">
          <see cref="T:System.IO.Stream" />에서 데이터를 보내고 받는 데 사용하는 <see cref="T:System.Net.Security.NegotiateStream" /> 개체입니다.</param>
        <summary>지정된 <see cref="T:System.Net.Security.NegotiateStream" />를 사용하여 <see cref="T:System.IO.Stream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에서는이 생성자를 호출 하는 방법을 보여 줍니다.  
  
 [!code-cpp[NclNegoSyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#3)]
 [!code-csharp[NclNegoSyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream, bool leaveInnerStreamOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream, leaveInnerStreamOpen As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream, bool leaveInnerStreamOpen);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
        <Parameter Name="leaveInnerStreamOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="innerStream">
          <see cref="T:System.IO.Stream" />에서 데이터를 보내고 받는 데 사용하는 <see cref="T:System.Net.Security.NegotiateStream" /> 개체입니다.</param>
        <param name="leaveInnerStreamOpen">
          이 <see cref="T:System.Net.Security.NegotiateStream" />을 닫아도 <c>innerstream</c>에 영향을 주지 않으려면 <see langword="true" />로 설정하고, 이 <see cref="T:System.Net.Security.NegotiateStream" />을 닫을 때 <c>innerStream</c>도 함께 닫으려면 <see langword="false" />로 설정합니다.</param>
        <summary>지정된 <see cref="T:System.Net.Security.NegotiateStream" />과 스트림 닫기 동작을 사용해서 <see cref="T:System.IO.Stream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정 하는 경우 `true` 에 대 한는 `leaveStreamOpen` 닫는 매개 변수는 <xref:System.Net.Security.NegotiateStream> 영향을 주지 않습니다는 `innerStream` 스트림; 명시적으로 닫아야 `innerStream` 더 이상 필요할 때.  
  
   
  
## Examples  
 다음 코드 예제에서는이 생성자를 호출 하는 방법을 보여 줍니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Net.Security.NegotiateStream> 클래스입니다.  
  
 [!code-cpp[NclNegoAsyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#1)]
 [!code-csharp[NclNegoAsyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="innerStream" />가 <see langword="null" />인 경우  
  
 \- 또는 -  
  
 <paramref name="innerStream" />가 <see cref="F:System.IO.Stream.Null" />와 같은 경우</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하기 위해 클라이언트에서 호출합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하기 위해 클라이언트에서 호출합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 클라이언트를 사용 하는 인증 <xref:System.Net.CredentialCache.DefaultCredentials%2A>합니다. 없음 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다. 가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 상호 인증을 요청 합니다. <xref:System.Net.Security.NegotiateStream> 클래스 상호 인증에 사용 되는 SPN을 생성 합니다.  
  
 인증이 성공 하면, 체크는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다. 확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.InvalidOperationException">인증이 이미 발생한 경우  
  
 \- 또는 -  
  
 이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우. 해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">명시적 사용 하려면 <see cref="T:System.Net.NetworkCredential" />합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</param>
        <param name="targetName">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</param>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하기 위해 클라이언트에서 호출합니다. 인증 프로세스에는 지정된 클라이언트 자격 증명이 사용됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 상호 인증을 요청 합니다. <xref:System.Net.Security.NegotiateStream> 클래스 상호 인증에 사용 되는 SPN을 생성 합니다.  
  
 인증이 성공 하면, 체크는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다. 확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.InvalidOperationException">인증이 이미 발생한 경우  
  
 \- 또는 -  
  
 이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우. 해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" />가 <see langword="null" />인 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">명시적 사용 하려면 <see cref="T:System.Net.NetworkCredential" />합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</param>
        <param name="binding">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />입니다.</param>
        <param name="targetName">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</param>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하기 위해 클라이언트에서 호출합니다. 인증 프로세스에는 지정된 클라이언트 자격 증명과 채널 바인딩이 사용됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 상호 인증을 요청 합니다. <xref:System.Net.Security.NegotiateStream> 클래스 상호 인증에 사용 되는 SPN을 생성 합니다.  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> 이 메서드에 전달 되는 확장 된 보호에 사용 되는 `binding` 매개 변수에서 응용 프로그램에 의해 검색 되 <xref:System.Net.Security.SslStream.TransportContext%2A> 속성은 관련 <xref:System.Net.Security.SslStream>합니다.  
  
 인증이 성공 하면, 체크는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다. 확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" />가 <see langword="null" />인 경우  
  
 \- 또는 -  
  
 <paramref name="credential" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.InvalidOperationException">인증이 이미 발생한 경우  
  
 \- 또는 -  
  
 이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우. 해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</param>
        <param name="targetName">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</param>
        <param name="requiredProtectionLevel">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</param>
        <param name="allowedImpersonationLevel">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</param>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하기 위해 클라이언트에서 호출합니다. 인증 프로세스에는 지정된 자격 증명과 인증 옵션이 사용됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 `requiredProtectionLevel` 매개 변수를 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 보안 서비스를 요청 합니다. 예를 들어 데이터를 암호화 및 서명이 수행 하려면, 지정 된 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다. 인증이 성공 보장 하지 않습니다는 요청 된 <xref:System.Net.Security.ProtectionLevel> 승인 합니다. 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다.  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" />은(는) 올바른 값이 아닙니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" />가 null인 경우</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.InvalidOperationException">인증이 이미 발생한 경우  
  
 \- 또는 -  
  
 이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우. 해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">명시적 사용 하려면 <see cref="T:System.Net.NetworkCredential" />합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</param>
        <param name="binding">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />입니다.</param>
        <param name="targetName">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</param>
        <param name="requiredProtectionLevel">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</param>
        <param name="allowedImpersonationLevel">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</param>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하기 위해 클라이언트에서 호출합니다. 인증 프로세스에는 지정된 자격 증명, 인증 옵션 및 채널 바인딩이 사용됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 `requiredProtectionLevel` 매개 변수를 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 보안 서비스를 요청 합니다. 예를 들어 데이터를 암호화 및 서명이 수행 하려면, 지정 된 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다. 인증이 성공 보장 하지 않습니다는 요청 된 <xref:System.Net.Security.ProtectionLevel> 승인 합니다. 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다.  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> 이 메서드에 전달 되는 확장 된 보호에 사용 되는 `binding` 매개 변수에서 응용 프로그램에 의해 검색 되 <xref:System.Net.Security.SslStream.TransportContext%2A> 속성은 관련 <xref:System.Net.Security.SslStream>합니다.  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" />가 <see langword="null" />인 경우  
  
 \- 또는 -  
  
 <paramref name="credential" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" />은(는) 올바른 값이 아닙니다.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.InvalidOperationException">인증이 이미 발생한 경우  
  
 \- 또는 -  
  
 이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우. 해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClientAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업으로 클라이언트에 의해 호출됩니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업으로 클라이언트에 의해 호출됩니다.</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" />를 반환합니다.  
  
 비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 클라이언트를 사용 하는 인증 <xref:System.Net.CredentialCache.DefaultCredentials%2A>합니다. 없음 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다. 가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 상호 인증을 요청 합니다. <xref:System.Net.Security.NegotiateStream> 클래스 상호 인증에 사용 되는 SPN을 생성 합니다.  
  
 인증이 성공 하면, 체크는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다. 확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.InvalidOperationException">인증이 이미 발생한 경우  
  
 \- 또는 -  
  
 이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우. 해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">명시적 사용 하려면 <see cref="T:System.Net.NetworkCredential" />합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</param>
        <param name="targetName">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</param>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업으로 클라이언트에 의해 호출됩니다. 인증 프로세스에는 지정된 클라이언트 자격 증명이 사용됩니다.</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" />를 반환합니다.  
  
 비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 상호 인증을 요청 합니다. <xref:System.Net.Security.NegotiateStream> 클래스 상호 인증에 사용 되는 SPN을 생성 합니다.  
  
 인증이 성공 하면, 체크는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다. 확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.InvalidOperationException">인증이 이미 발생한 경우  
  
 \- 또는 -  
  
 이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우. 해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" />가 <see langword="null" />인 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">명시적 사용 하려면 <see cref="T:System.Net.NetworkCredential" />합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</param>
        <param name="binding">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />입니다.</param>
        <param name="targetName">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</param>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업으로 클라이언트에 의해 호출됩니다. 인증 프로세스에는 지정된 클라이언트 자격 증명과 채널 바인딩이 사용됩니다.</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" />를 반환합니다.  
  
 비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 상호 인증을 요청 합니다. <xref:System.Net.Security.NegotiateStream> 클래스 상호 인증에 사용 되는 SPN을 생성 합니다.  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> 이 메서드에 전달 되는 확장 된 보호에 사용 되는 `binding` 매개 변수에서 응용 프로그램에 의해 검색 되 <xref:System.Net.Security.SslStream.TransportContext%2A> 속성은 관련 <xref:System.Net.Security.SslStream>합니다.  
  
 인증이 성공 하면, 체크는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다. 확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" />가 <see langword="null" />인 경우  
  
 \- 또는 -  
  
 <paramref name="credential" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.InvalidOperationException">인증이 이미 발생한 경우  
  
 \- 또는 -  
  
 이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우. 해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</param>
        <param name="targetName">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</param>
        <param name="requiredProtectionLevel">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</param>
        <param name="allowedImpersonationLevel">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</param>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업으로 클라이언트에 의해 호출됩니다. 인증 프로세스에는 지정된 자격 증명과 인증 옵션이 사용됩니다.</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" />를 반환합니다.  
  
 비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 `requiredProtectionLevel` 매개 변수를 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 보안 서비스를 요청 합니다. 예를 들어 데이터를 암호화 및 서명이 수행 하려면, 지정 된 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다. 인증이 성공 보장 하지 않습니다는 요청 된 <xref:System.Net.Security.ProtectionLevel> 승인 합니다. 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다.  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" />은(는) 올바른 값이 아닙니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" />가 null인 경우</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.InvalidOperationException">인증이 이미 발생한 경우  
  
 \- 또는 -  
  
 이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우. 해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">명시적 사용 하려면 <see cref="T:System.Net.NetworkCredential" />합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</param>
        <param name="binding">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />입니다.</param>
        <param name="targetName">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</param>
        <param name="requiredProtectionLevel">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</param>
        <param name="allowedImpersonationLevel">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</param>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업으로 클라이언트에 의해 호출됩니다. 인증 프로세스에는 지정된 자격 증명, 인증 옵션 및 채널 바인딩이 사용됩니다.</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" />를 반환합니다.  
  
 비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 `requiredProtectionLevel` 매개 변수를 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 보안 서비스를 요청 합니다. 예를 들어 데이터를 암호화 및 서명이 수행 하려면, 지정 된 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다. 인증이 성공 보장 하지 않습니다는 요청 된 <xref:System.Net.Security.ProtectionLevel> 승인 합니다. 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다.  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> 이 메서드에 전달 되는 확장 된 보호에 사용 되는 `binding` 매개 변수에서 응용 프로그램에 의해 검색 되 <xref:System.Net.Security.SslStream.TransportContext%2A> 속성은 관련 <xref:System.Net.Security.SslStream>합니다.  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" />가 <see langword="null" />인 경우  
  
 \- 또는 -  
  
 <paramref name="credential" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" />은(는) 올바른 값이 아닙니다.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.InvalidOperationException">인증이 이미 발생한 경우  
  
 \- 또는 -  
  
 이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우. 해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>클라이언트-서버 연결의 서버측 인증을 처리합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이러한 메서드는 인증 진행 중인 동안 차단 합니다. 사용 하 여 응용 프로그램을 완료 하기 위한 인증 될 때까지 기다리는 동안 차단 하지 않으려면는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하기 위해 서버에서 호출합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인증 서버를 사용 하 여 <xref:System.Net.CredentialCache.DefaultCredentials%2A>합니다. 없음 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다. 가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>합니다.  
  
 인증이 성공 하면, 체크는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다. 확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.  
  
 이 메서드는 작업이 완료 될 때까지 차단 됩니다. 작업이 완료 될 때까지 차단를 방지 하려면 중 하나를 사용는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드 오버 로드 합니다.  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 및 Windows 98이 지원되지 않는 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">명시적 사용 하려면 <see cref="T:System.Net.NetworkCredential" />합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (policy As ExtendedProtectionPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />입니다.</param>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하기 위해 서버에서 호출합니다. 인증 프로세스에는 지정된 확장 보호 정책이 사용됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인증 서버를 사용 하 여 <xref:System.Net.CredentialCache.DefaultCredentials%2A>합니다. 없음 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다. 가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>합니다.  
  
 경우는 `policy` 매개 변수는 `null`, 확장된 보호 정책은 사용 된 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 로 설정 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>합니다.  
  
 인증이 성공 하면, 체크는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다. 확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.  
  
 이 메서드는 작업이 완료 될 때까지 차단 됩니다. 작업이 완료 될 때까지 차단를 방지 하려면 중 하나를 사용는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드 오버 로드 합니다.  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" />와 <paramref name="policy" /> 매개 변수에서 전달된, 확장된 보호 정책 상의 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 모두 <see langword="null" />입니다.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 및 Windows 98이 지원되지 않는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="policy" /> 매개 변수는 확장된 보호를 지원하지 않는 플랫폼에서 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />로 설정되었습니다.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">서버의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</param>
        <param name="requiredProtectionLevel">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</param>
        <param name="requiredImpersonationLevel">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</param>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하기 위해 서버에서 호출합니다. 인증 프로세스에는 지정된 서버 자격 증명과 인증 옵션이 사용됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인증이 성공 하면, 체크는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다. 확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.  
  
 이 메서드는 작업이 완료 될 때까지 차단 됩니다. 작업이 완료 될 때까지 차단를 방지 하려면 중 하나를 사용는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드 오버 로드 합니다.  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" />이 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 또는 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />이어야 하는 경우</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.InvalidOperationException">인증이 이미 발생한 경우  
  
 \- 또는 -  
  
 이전에 이 스트림을 사용하여 클라이언트로 인증을 시도한 경우. 서버로 인증을 다시 시도하는 데 스트림을 사용할 수 없습니다.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 및 Windows 98이 지원되지 않는 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">명시적 사용 하려면 <see cref="T:System.Net.NetworkCredential" />합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</param>
        <param name="policy">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />입니다.</param>
        <param name="requiredProtectionLevel">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</param>
        <param name="requiredImpersonationLevel">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</param>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하기 위해 서버에서 호출합니다. 인증 프로세스에는 지정된 서버 자격 증명, 인증 옵션 및 확장 보호 정책이 사용됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 `policy` 매개 변수는 `null`, 확장된 보호 정책은 사용 된 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 로 설정 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>합니다.  
  
 인증이 성공 하면, 체크는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다. 확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.  
  
 이 메서드는 작업이 완료 될 때까지 차단 됩니다. 작업이 완료 될 때까지 차단를 방지 하려면 중 하나를 사용는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드 오버 로드 합니다.  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" />와 <paramref name="policy" /> 매개 변수에서 전달된, 확장된 보호 정책 상의 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 모두 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" />이 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 또는 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />이어야 하는 경우</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.InvalidOperationException">인증이 이미 발생한 경우  
  
 \- 또는 -  
  
 이전에 이 스트림을 사용하여 클라이언트로 인증을 시도한 경우. 서버로 인증을 다시 시도하는 데 스트림을 사용할 수 없습니다.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 및 Windows 98이 지원되지 않는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="policy" /> 매개 변수는 확장된 보호를 지원하지 않는 플랫폼에서 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />로 설정되었습니다.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>클라이언트-서버 연결의 서버 측 인증을 비동기 작업으로 처리합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업으로 서버에서 호출합니다.</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" />를 반환합니다.  
  
 비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인증 서버를 사용 하 여 <xref:System.Net.CredentialCache.DefaultCredentials%2A>합니다. 없음 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다. 가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>합니다.  
  
 인증이 성공 하면, 체크는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다. 확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 및 Windows 98이 지원되지 않는 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">명시적 사용 하려면 <see cref="T:System.Net.NetworkCredential" />합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (policy As ExtendedProtectionPolicy) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />입니다.</param>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업으로 서버에서 호출합니다. 인증 프로세스에는 지정된 확장 보호 정책이 사용됩니다.</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" />를 반환합니다.  
  
 비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인증 서버를 사용 하 여 <xref:System.Net.CredentialCache.DefaultCredentials%2A>합니다. 없음 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다. 가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>합니다.  
  
 경우는 `policy` 매개 변수는 `null`, 확장된 보호 정책은 사용 된 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 로 설정 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>합니다.  
  
 인증이 성공 하면, 체크는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다. 확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" />와 <paramref name="policy" /> 매개 변수에서 전달된, 확장된 보호 정책 상의 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 모두 <see langword="null" />입니다.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 및 Windows 98이 지원되지 않는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="policy" /> 매개 변수는 확장된 보호를 지원하지 않는 플랫폼에서 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />로 설정되었습니다.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">서버의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</param>
        <param name="requiredProtectionLevel">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</param>
        <param name="requiredImpersonationLevel">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</param>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업으로 서버에서 호출합니다. 인증 프로세스에는 지정된 서버 자격 증명과 인증 옵션이 사용됩니다.</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" />를 반환합니다.  
  
 비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인증이 성공 하면, 체크는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다. 확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" />이 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 또는 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />이어야 하는 경우</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.InvalidOperationException">인증이 이미 발생한 경우  
  
 \- 또는 -  
  
 이전에 이 스트림을 사용하여 클라이언트로 인증을 시도한 경우. 서버로 인증을 다시 시도하는 데 스트림을 사용할 수 없습니다.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 및 Windows 98이 지원되지 않는 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">명시적 사용 하려면 <see cref="T:System.Net.NetworkCredential" />합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</param>
        <param name="policy">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />입니다.</param>
        <param name="requiredProtectionLevel">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</param>
        <param name="requiredImpersonationLevel">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</param>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업으로 서버에서 호출합니다. 인증 프로세스에는 지정된 서버 자격 증명, 인증 옵션 및 확장 보호 정책이 사용됩니다.</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" />를 반환합니다.  
  
 비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 `policy` 매개 변수는 `null`, 확장된 보호 정책은 사용 된 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 로 설정 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>합니다.  
  
 인증이 성공 하면, 체크는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다. 확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" />와 <paramref name="policy" /> 매개 변수에서 전달된, 확장된 보호 정책 상의 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 모두 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" />이 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 또는 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />이어야 하는 경우</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.InvalidOperationException">인증이 이미 발생한 경우  
  
 \- 또는 -  
  
 이전에 이 스트림을 사용하여 클라이언트로 인증을 시도한 경우. 서버로 인증을 다시 시도하는 데 스트림을 사용할 수 없습니다.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 및 Windows 98이 지원되지 않는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="policy" /> 매개 변수는 확장된 보호를 지원하지 않는 플랫폼에서 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />로 설정되었습니다.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>클라이언트-서버 연결의 클라이언트측을 인증하는 비동기 작업을 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인증이 진행 중인 동안이 메서드의 오버 로드를 차단 하지 않습니다. 인증이 완료 되기를 기다리는 동안 차단 중 하나를 사용는 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 메서드.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</param>
        <param name="asyncState">작업에 대한 정보가 들어 있는 사용자 정의 개체입니다. 이 개체는 작업이 완료되면 <c>asyncCallback</c> 대리자에 전달됩니다.</param>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업을 시작하기 위해 클라이언트에서 호출합니다. 이 메서드는 차단되지 않습니다.</summary>
        <returns>비동기 작업의 상태를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 클라이언트를 사용 하는 인증 <xref:System.Net.CredentialCache.DefaultCredentials%2A>합니다. 없음 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다. 가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>합니다. <xref:System.Net.Security.NegotiateStream> 클래스 상호 인증에 사용 되는 SPN을 생성 합니다.  
  
 이 메서드는 비동기적 이며 작업이 완료 될 때 차단 하지 않습니다. 작업이 완료 될 때까지 차단 하려면 중 사용 된 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 메서드 오버 로드 합니다.  
  
 호출 하 여 비동기 인증 작업을 완료 해야는 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> 메서드. 메서드는 일반적으로 `asyncCallback` 위임 합니다. 비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 클라이언트에 대 한 비동기 인증을 시작 하려면이 메서드를 호출 하는 방법을 보여 줍니다.  
  
 [!code-cpp[NclNegoAsyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#2)]
 [!code-csharp[NclNegoAsyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.InvalidOperationException">인증이 이미 발생한 경우  
  
 \- 또는 -  
  
 이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우. 해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">명시적 사용 하려면 <see cref="T:System.Net.NetworkCredential" />합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</param>
        <param name="targetName">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</param>
        <param name="asyncCallback">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</param>
        <param name="asyncState">쓰기 작업에 대한 정보가 포함된 사용자 정의 개체입니다. 이 개체는 작업이 완료되면 <c>asyncCallback</c> 대리자에 전달됩니다.</param>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업을 시작하기 위해 클라이언트에서 호출합니다. 인증 프로세스에는 지정된 자격 증명이 사용됩니다. 이 메서드는 차단되지 않습니다.</summary>
        <returns>비동기 작업의 상태를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 비동기적 이며 작업이 완료 될 때 차단 하지 않습니다. 작업이 완료 될 때까지 차단 하려면 중 사용 된 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 메서드 오버 로드 합니다.  
  
 호출 하 여 비동기 인증 작업을 완료 해야는 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> 메서드. 메서드는 일반적으로 `asyncCallback` 위임 합니다. 비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" />가 <see langword="null" />인 경우  
  
 \- 또는 -  
  
 <paramref name="targetName" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.InvalidOperationException">인증이 이미 발생한 경우  
  
 \- 또는 -  
  
 이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우. 해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">명시적 사용 하려면 <see cref="T:System.Net.NetworkCredential" />합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</param>
        <param name="binding">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />입니다.</param>
        <param name="targetName">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</param>
        <param name="asyncCallback">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</param>
        <param name="asyncState">쓰기 작업에 대한 정보가 포함된 사용자 정의 개체입니다. 이 개체는 작업이 완료되면 <c>asyncCallback</c> 대리자에 전달됩니다.</param>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업을 시작하기 위해 클라이언트에서 호출합니다. 인증 프로세스에는 지정된 자격 증명과 채널 바인딩이 사용됩니다. 이 메서드는 차단되지 않습니다.</summary>
        <returns>비동기 작업의 상태를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 비동기적 이며 작업이 완료 될 때 차단 하지 않습니다. 작업이 완료 될 때까지 차단 하려면 중 사용 된 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 메서드 오버 로드 합니다.  
  
 호출 하 여 비동기 인증 작업을 완료 해야는 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> 메서드. 메서드는 일반적으로 `asyncCallback` 위임 합니다. 비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" />가 <see langword="null" />인 경우  
  
 \- 또는 -  
  
 <paramref name="targetName" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.InvalidOperationException">인증이 이미 발생한 경우  
  
 \- 또는 -  
  
 이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우. 해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</param>
        <param name="targetName">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</param>
        <param name="requiredProtectionLevel">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</param>
        <param name="allowedImpersonationLevel">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</param>
        <param name="asyncCallback">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</param>
        <param name="asyncState">쓰기 작업에 대한 정보가 포함된 사용자 정의 개체입니다. 이 개체는 작업이 완료되면 <c>asyncCallback</c> 대리자에 전달됩니다.</param>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업을 시작하기 위해 클라이언트에서 호출합니다. 인증 프로세스에는 지정된 자격 증명과 인증 옵션이 사용됩니다. 이 메서드는 차단되지 않습니다.</summary>
        <returns>비동기 작업의 상태를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 `requiredProtectionLevel` 매개 변수를 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 보안 서비스를 요청 합니다. 예를 들어 데이터를 암호화 및 서명이 수행 하려면, 지정 된 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다. 인증이 성공 보장 하지 않습니다는 요청 된 <xref:System.Net.Security.ProtectionLevel> 승인 합니다. 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다.  
  
 이 메서드는 비동기적 이며 작업이 완료 될 때 차단 하지 않습니다. 작업이 완료 될 때까지 차단 하려면 중 사용 된 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 메서드 오버 로드 합니다.  
  
 호출 하 여 비동기 인증 작업을 완료 해야는 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> 메서드. 메서드는 일반적으로 `asyncCallback` 위임 합니다. 비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" />가 <see langword="null" />인 경우  
  
 \- 또는 -  
  
 <paramref name="targetName" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.InvalidOperationException">인증이 이미 발생한 경우  
  
 \- 또는 -  
  
 이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우. 해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">명시적 사용 하려면 <see cref="T:System.Net.NetworkCredential" />합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</param>
        <param name="binding">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />입니다.</param>
        <param name="targetName">인증할 서버를 고유하게 식별하는 SPN(서비스 사용자 이름)입니다.</param>
        <param name="requiredProtectionLevel">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</param>
        <param name="allowedImpersonationLevel">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</param>
        <param name="asyncCallback">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</param>
        <param name="asyncState">쓰기 작업에 대한 정보가 포함된 사용자 정의 개체입니다. 이 개체는 작업이 완료되면 <c>asyncCallback</c> 대리자에 전달됩니다.</param>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업을 시작하기 위해 클라이언트에서 호출합니다. 인증 프로세스에는 지정된 자격 증명, 인증 옵션 및 채널 바인딩이 사용됩니다. 이 메서드는 차단되지 않습니다.</summary>
        <returns>비동기 작업의 상태를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 `requiredProtectionLevel` 매개 변수를 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 보안 서비스를 요청 합니다. 예를 들어 데이터를 암호화 및 서명이 수행 하려면, 지정 된 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다. 인증이 성공 보장 하지 않습니다는 요청 된 <xref:System.Net.Security.ProtectionLevel> 승인 합니다. 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다.  
  
 이 메서드는 비동기적 이며 작업이 완료 될 때 차단 하지 않습니다. 작업이 완료 될 때까지 차단 하려면 중 사용 된 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 메서드 오버 로드 합니다.  
  
 호출 하 여 비동기 인증 작업을 완료 해야는 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> 메서드. 메서드는 일반적으로 `asyncCallback` 위임 합니다. 비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" />가 <see langword="null" />인 경우  
  
 \- 또는 -  
  
 <paramref name="targetName" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.InvalidOperationException">인증이 이미 발생한 경우  
  
 \- 또는 -  
  
 이전에 이 스트림을 사용하여 서버로 인증을 시도한 경우. 해당 스트림을 사용하여 클라이언트로 인증을 다시 시도할 수는 없습니다.</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>클라이언트-서버 연결의 서버 측 인증을 처리하는 비동기 작업을 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인증이 진행 중인 동안이 메서드의 오버 로드를 차단 하지 않습니다. 인증이 완료 되기를 기다리는 동안 차단 된 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 메서드.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</param>
        <param name="asyncState">작업에 대한 정보가 들어 있는 사용자 정의 개체입니다. 이 개체는 작업이 완료되면 <c>asyncCallback</c> 대리자에 전달됩니다.</param>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업을 시작하기 위해 서버에서 호출합니다. 이 메서드는 차단되지 않습니다.</summary>
        <returns>비동기 작업의 상태를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인증 서버를 사용 하 여 <xref:System.Net.CredentialCache.DefaultCredentials%2A>합니다. 없음 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다. 가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>합니다.  
  
 인증이 성공 하면, 체크는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다. 확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.  
  
 작업이 완료 될 때까지 차단 하려면 중 사용 된 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 메서드 오버 로드 합니다.  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 및 Windows 98이 지원되지 않는 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">명시적 사용 하려면 <see cref="T:System.Net.NetworkCredential" />합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="policy">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />입니다.</param>
        <param name="asyncCallback">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</param>
        <param name="asyncState">쓰기 작업에 대한 정보가 포함된 사용자 정의 개체입니다. 이 개체는 작업이 완료되면 <c>asyncCallback</c> 대리자에 전달됩니다.</param>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업을 시작하기 위해 서버에서 호출합니다. 인증 프로세스에는 지정된 확장 보호 정책이 사용됩니다. 이 메서드는 차단되지 않습니다.</summary>
        <returns>비동기 작업의 상태를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인증 서버를 사용 하 여 <xref:System.Net.CredentialCache.DefaultCredentials%2A>합니다. 없음 이름 SPN (서비스 사용자)는 서버에 대해 지정 됩니다. 가장 수준이 <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 보안 수준이 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>합니다.  
  
 경우는 `policy` 매개 변수는 `null`, 확장된 보호 정책은 사용 된 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 로 설정 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>합니다.  
  
 인증이 성공 하면, 체크는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다. 확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.  
  
 작업이 완료 될 때까지 차단 하려면 중 사용 된 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 메서드 오버 로드 합니다.  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" />와 <paramref name="policy" /> 매개 변수에서 전달된, 확장된 보호 정책 상의 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 모두 <see langword="null" />입니다.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 및 Windows 98이 지원되지 않는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="policy" /> 매개 변수는 확장된 보호를 지원하지 않는 플랫폼에서 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />로 설정되었습니다.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</param>
        <param name="requiredProtectionLevel">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</param>
        <param name="requiredImpersonationLevel">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</param>
        <param name="asyncCallback">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</param>
        <param name="asyncState">작업에 대한 정보가 들어 있는 사용자 정의 개체입니다. 이 개체는 작업이 완료되면 <c>asyncCallback</c> 대리자에 전달됩니다.</param>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업을 시작하기 위해 서버에서 호출합니다. 인증 프로세스에는 지정된 서버 자격 증명과 인증 옵션이 사용됩니다. 이 메서드는 차단되지 않습니다.</summary>
        <returns>비동기 작업의 상태를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 `requiredProtectionLevel` 매개 변수를 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 보안 서비스를 요청 합니다. 예를 들어 데이터를 암호화 및 서명이 수행 하려면, 지정 된 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다. 인증이 성공 요청 된 보장 하지 않습니다 <xref:System.Net.Security.ProtectionLevel> 승인 합니다. 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다.  
  
 이 메서드는 비동기적 이며 작업이 완료 될 때 차단 하지 않습니다. 작업이 완료 될 때까지 차단 하려면 중 사용 된 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 메서드 오버 로드 합니다.  
  
 호출 하 여 비동기 인증 작업을 완료 해야는 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> 메서드. 메서드는 일반적으로 `asyncCallback` 위임 합니다. 비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" />이 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 또는 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />이어야 하는 경우</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.InvalidOperationException">인증이 이미 발생한 경우  
  
 \- 또는 -  
  
 이전에 이 스트림을 사용하여 클라이언트로 인증을 시도한 경우. 서버로 인증을 다시 시도하는 데 스트림을 사용할 수 없습니다.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 및 Windows 98이 지원되지 않는 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">명시적 사용 하려면 <see cref="T:System.Net.NetworkCredential" />합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">클라이언트의 ID를 설정하는 데 사용되는 <see cref="T:System.Net.NetworkCredential" />입니다.</param>
        <param name="policy">확장 보호에 사용되는 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />입니다.</param>
        <param name="requiredProtectionLevel">스트림의 보안 서비스를 나타내는 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</param>
        <param name="requiredImpersonationLevel">서버에서 클라이언트의 자격 증명을 사용하여 리소스에 액세스하는 방법을 나타내는 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</param>
        <param name="asyncCallback">인증이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</param>
        <param name="asyncState">쓰기 작업에 대한 정보가 포함된 사용자 정의 개체입니다. 이 개체는 작업이 완료되면 <c>asyncCallback</c> 대리자에 전달됩니다.</param>
        <summary>클라이언트-서버 연결에서 클라이언트를 인증하고 선택적으로 서버를 인증하는 비동기 작업을 시작하기 위해 서버에서 호출합니다. 인증 프로세스에는 지정된 서버 자격 증명, 인증 옵션 및 확장 보호 정책이 사용됩니다. 이 메서드는 차단되지 않습니다.</summary>
        <returns>비동기 작업의 상태를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 `requiredProtectionLevel` 매개 변수를 인증 된 스트림을 사용 하 여 전송 되는 데이터에 대 한 보안 서비스를 요청 합니다. 예를 들어 데이터를 암호화 및 서명이 수행 하려면, 지정 된 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 값입니다. 인증이 성공 요청 된 보장 하지 않습니다 <xref:System.Net.Security.ProtectionLevel> 승인 합니다. 확인 해야 합니다는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다.  
  
 경우는 `policy` 매개 변수는 `null`, 확장된 보호 정책은 사용 된 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 로 설정 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>합니다.  
  
 이 메서드는 비동기적 이며 작업이 완료 될 때 차단 하지 않습니다. 작업이 완료 될 때까지 차단 하려면 중 사용 된 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 메서드 오버 로드 합니다.  
  
 호출 하 여 비동기 인증 작업을 완료 해야는 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> 메서드. 메서드는 일반적으로 `asyncCallback` 위임 합니다. 비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" />와 <paramref name="policy" /> 매개 변수에서 전달된, 확장된 보호 정책 상의 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 모두 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" />이 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> 또는 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />이어야 하는 경우</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.InvalidOperationException">인증이 이미 발생한 경우  
  
 \- 또는 -  
  
 이전에 이 스트림을 사용하여 클라이언트로 인증을 시도한 경우. 서버로 인증을 다시 시도하는 데 스트림을 사용할 수 없습니다.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 및 Windows 98이 지원되지 않는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="policy" /> 매개 변수는 확장된 보호를 지원하지 않는 플랫폼에서 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />로 설정되었습니다.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">스트림에서 읽은 바이트를 받는 <see cref="T:System.Byte" /> 배열입니다.</param>
        <param name="offset">이 스트림에서 읽은 데이터를 저장하기 시작하는 <c>버퍼</c> 내의 위치(0부터 시작)입니다.</param>
        <param name="count">스트림에서 읽을 최대 바이트 수입니다.</param>
        <param name="asyncCallback">읽기 작업이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</param>
        <param name="asyncState">읽기 작업에 대한 정보가 포함된 사용자 정의 개체입니다. 이 개체는 작업이 완료되면 <c>asyncCallback</c> 대리자에 전달됩니다.</param>
        <summary>스트림에서 데이터를 읽어 지정된 배열에 저장하는 비동기 읽기 작업을 시작합니다.</summary>
        <returns>비동기 작업의 상태를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 암호화, 서명 또는 암호화 및 서명에 사용 되는 경우 읽기 작업 기본 스트림에서 데이터를 읽고, 데이터의 무결성을 확인 및 암호를 해독 합니다. 보안 데이터 암호화 또는 서명 사용 중인 같은 서비스를 하는 경우이 메서드는 내부 스트림에서 비동기 읽기 작업을 시작 합니다.  
  
 이 메서드는 비동기적 이며 작업이 완료 될 때 차단 하지 않습니다. 작업이 완료 될 때까지 차단 된 <xref:System.Net.Security.NegotiateStream.Read%2A> 메서드.  
  
 비동기 읽기 작업을 호출 하 여 완료 해야 합니다는 <xref:System.Net.Security.NegotiateStream.EndRead%2A> 메서드. 메서드는 일반적으로 `asyncCallback` 위임 합니다. 비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 <xref:System.Net.Security.NegotiateStream> 클래스는 여러 개의 읽기 작업을 지원 하지 않습니다. 동안 다른 작업은 동일한 스트림을에 실행 하는 읽기 작업을 시작 하려고 하면 한 <xref:System.NotSupportedException> 예외가 throw 됩니다.  
  
 성공적으로 인증 될 때까지이 메서드를 호출할 수 없습니다. 인증 중 하나를 호출는 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서는 비동기 읽기 작업을 시작 하는 방법을 보여 줍니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Net.Security.NegotiateStream> 클래스입니다.  
  
 [!code-cpp[NclNegoAsyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#1)]
 [!code-csharp[NclNegoAsyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" />가 0보다 작습니다.  
  
 \- 또는 -  
  
 <paramref name="offset" /> 이 <paramref name="buffer" />의 길이보다 큽니다.  
  
 \- 또는 -  
  
 <paramref name="offset" />과 <paramref name="count" />의 합이 <paramref name="buffer" />의 길이보다 큰 경우</exception>
        <exception cref="T:System.IO.IOException">읽기 작업이 실패한 경우  
  
 \- 또는 -  
  
 암호화를 사용 중이지만 데이터를 해독할 수 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">읽기 작업을 진행 중인 경우</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.InvalidOperationException">인증이 수행되지 않은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">스트림에 쓸 바이트를 제공하는 <see cref="T:System.Byte" /> 배열입니다.</param>
        <param name="offset">스트림에 쓸 바이트를 읽기 시작하는 <c>버퍼</c> 내의 위치(0부터 시작)입니다.</param>
        <param name="count">
          <c>버퍼</c>에서 읽을 바이트 수를 지정하는 <see cref="T:System.Int32" /> 값입니다.</param>
        <param name="asyncCallback">쓰기 작업이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</param>
        <param name="asyncState">쓰기 작업에 대한 정보가 포함된 사용자 정의 개체입니다. 이 개체는 작업이 완료되면 <c>asyncCallback</c> 대리자에 전달됩니다.</param>
        <summary>지정된 버퍼에서 스트림에 <see cref="T:System.Byte" />를 쓰는 비동기 쓰기 작업을 시작합니다.</summary>
        <returns>비동기 작업의 상태를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 암호화, 서명 또는 암호화 및 서명에 사용 되는 경우이 메서드 버퍼에서 데이터를 읽을, 암호화, 서명, 또는 암호화 하 고, 서명 및 기본 스트림을 사용 하 여 전송 합니다. 보안 데이터 암호화 또는 서명 사용 중인 같은 서비스를 하는 경우이 메서드는 내부 스트림의 비동기 쓰기 작업을 시작 합니다.  
  
 이 메서드는 비동기적 이며 작업이 완료 될 때 차단 하지 않습니다. 작업이 완료 될 때까지 차단 된 <xref:System.Net.Security.NegotiateStream.Read%2A> 메서드.  
  
 비동기 읽기 작업을 호출 하 여 완료 해야 합니다는 <xref:System.Net.Security.NegotiateStream.EndWrite%2A> 메서드. 메서드는 일반적으로 `asyncCallback` 위임 합니다. 비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 <xref:System.Net.Security.NegotiateStream> 클래스가 여러 동시 쓰기 작업을 지원 하지 않습니다. 또 다른 쓰기 작업은 동일한 스트림의을 실행 하는 동안 작업을 시작 하려고 하면 한 <xref:System.NotSupportedException> 예외가 throw 됩니다.  
  
 성공적으로 인증 될 때까지이 메서드를 호출할 수 없습니다. 인증 중 하나를 호출는 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서는 비동기 쓰기 작업을 시작 하는 방법을 보여 줍니다.  
  
 [!code-cpp[NclNegoAsyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#3)]
 [!code-csharp[NclNegoAsyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#3)]  
  
 다음 메서드는 작업이 완료 될 때 호출 됩니다.  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset is less than 0" />.  
  
 \- 또는 -  
  
 <paramref name="offset" /> 이 <paramref name="buffer" />의 길이보다 큽니다.  
  
 \- 또는 -  
  
 <paramref name="offset" />과 count의 합이 <paramref name="buffer" />의 길이보다 큰 경우</exception>
        <exception cref="T:System.IO.IOException">쓰기 작업이 실패했습니다.  
  
 \- 또는 -  
  
 암호화를 사용 중이지만 데이터를 암호화할 수 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">쓰기 작업을 진행 중인 경우</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.InvalidOperationException">인증이 수행되지 않은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>내부 스트림을 읽을 수 있는지 여부를 나타내는 <see cref="T:System.Boolean" /> 값을 가져옵니다.</summary>
        <value>
          인증이 수행되고 내부 스트림을 읽을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성이 호출에서 반환 된 값을 반환 정상적으로 인증 수행 되 면는 <xref:System.IO.Stream.CanRead%2A> 내부 스트림의 속성입니다. 인스턴스를 만들 때 지정 하 고 내부 스트림이 <xref:System.Net.Security.NegotiateStream> 클래스입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>내부 스트림을 검색할 수 있는지 여부를 나타내는 <see cref="T:System.Boolean" /> 값을 가져옵니다.</summary>
        <value>이 속성은 항상 <see langword="false" />를 반환합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 위치를 설정 하려고 해서는 안는 <xref:System.Net.Security.NegotiateStream> 개체 또는 해당 하는 내부 스트림의 합니다. 인스턴스를 만들 때 지정 하 고 내부 스트림이 <xref:System.Net.Security.NegotiateStream> 클래스입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Security.NegotiateStream.Position" />
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public override bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanTimeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTimeout { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>내부 스트림에 제한 시간을 설정할 수 있는지 여부를 나타내는 <see cref="T:System.Boolean" /> 값을 가져옵니다.</summary>
        <value>
          내부 스트림이 제한 시간을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출에서 반환 된 값을 반환 하는이 속성은 <xref:System.IO.Stream.CanTimeout%2A> 내부 스트림의 속성입니다. 인스턴스를 만들 때 지정 하 고 내부 스트림이 <xref:System.Net.Security.NegotiateStream> 클래스입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>내부 스트림에 쓸 수 있는지 여부를 나타내는 <see cref="T:System.Boolean" /> 값을 가져옵니다.</summary>
        <value>
          인증이 수행되고 내부 스트림에 쓸 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성이 호출에서 반환 된 값을 반환 정상적으로 인증 수행 되 면는 <xref:System.IO.Stream.CanWrite%2A> 내부 스트림의 속성입니다. 인스턴스를 만들 때 지정 하 고 내부 스트림이 <xref:System.Net.Security.NegotiateStream> 클래스입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
        <summary>
          <see cref="T:System.Net.Security.NegotiateStream" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 public `Dispose()` 메서드 및 <xref:System.Object.Finalize%2A> 메서드. `Dispose()` 보호 된 호출 `Dispose(Boolean)` 메서드는 `disposing` 매개 변수 설정 `true`합니다. <xref:System.Object.Finalize%2A> 호출 `Dispose` 와 `disposing` 로 설정 `false`합니다.  
  
 경우는 `disposing` 매개 변수가 true 이면이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <xref:System.Net.Security.NegotiateStream> 참조 합니다. 이 메서드는 참조되는 각 개체의 `Dispose()` 메서드를 호출합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" />는 다른 개체에서 여러 번 호출할 수 있습니다. 재정의 하는 경우 <see langword="Dispose(Boolean)" /> 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 <see langword="Dispose" />합니다. 구현 하는 방법에 대 한 자세한 내용은 <see langword="Dispose(Boolean)" />, 참조 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.  
  
 에 대 한 자세한 내용은 <see langword="Dispose" /> 및 <see cref="M:System.Object.Finalize" />, 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Finalize 메서드를 재정의](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsClient (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsClient(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" />를 호출했을 때 반환되는 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" /> 인스턴스입니다.</param>
        <summary>
          <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />를 호출하여 시작한 보류 상태의 비동기 클라이언트 인증 작업을 끝냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 작업이 완료 되지 않은 경우이 메서드는 완료 될 때까지 차단 됩니다. 인증이 성공 하면, 체크는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다. 확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 이 작업을 동기적으로 수행 하려면 중 사용 된 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />를 호출했지만 <paramref name="asyncResult" />가 만들어지지 않은 경우</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.InvalidOperationException">완료할 보류 상태의 클라이언트 인증이 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsServer(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsServer (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsServer(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" />를 호출했을 때 반환되는 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" /> 인스턴스입니다.</param>
        <summary>
          <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />를 호출하여 시작한 보류 상태의 비동기 클라이언트 인증 작업을 끝냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 작업이 완료 되지 않은 경우이 메서드는 완료 될 때까지 차단 됩니다.  
  
 인증이 성공 하면, 체크는 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> 및 <xref:System.Net.Security.NegotiateStream.IsSigned%2A> 속성을 확인 보안 서비스에서 사용 되는 <xref:System.Net.Security.NegotiateStream>합니다. 확인 된 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> 상호 인증이 발생 했는지 여부를 결정 하는 속성입니다.  
  
 수신 인증에 실패 하는 경우는 <xref:System.Security.Authentication.AuthenticationException> 또는 <xref:System.Security.Authentication.InvalidCredentialException>합니다. 이 경우 다른 자격 증명을 사용 하 여 인증을 다시 시도할 수 있습니다.  
  
 이 작업을 동기적으로 수행 하려면는 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />를 호출했지만 <paramref name="asyncResult" />가 만들어지지 않은 경우</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">인증이 실패한 경우. 이 개체를 사용하여 인증을 다시 시도할 수 있습니다.</exception>
        <exception cref="T:System.InvalidOperationException">완료할 보류 상태의 인증이 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" />를 호출했을 때 반환되는 <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 인스턴스입니다.</param>
        <summary>
          <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />를 호출하여 시작한 비동기 읽기 작업을 끝냅니다.</summary>
        <returns>내부 스트림에서 읽은 바이트 수를 지정하는 <see cref="T:System.Int32" /> 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 작업이 완료 되지 않은 경우이 메서드는 완료 될 때까지 차단 됩니다.  
  
 이 작업을 동기적으로 수행 하려면는 <xref:System.Net.Security.NegotiateStream.Read%2A> 메서드.  
  
 성공적으로 인증 될 때까지이 메서드를 호출할 수 없습니다. 인증 중 하나를 호출는 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서는 읽기는 비동기 종료 작업을 보여 줍니다. 작업을 시작 하는 방법을 보여 주는 예제를 보려면 <xref:System.Net.Security.NegotiateStream.BeginRead%2A>합니다.  
  
 [!code-cpp[NclNegoAsyncServer#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#3)]
 [!code-csharp[NclNegoAsyncServer#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />를 호출했지만 asyncResult가 만들어지지 않은 경우</exception>
        <exception cref="T:System.InvalidOperationException">인증이 수행되지 않은 경우</exception>
        <exception cref="T:System.IO.IOException">읽기 작업이 실패한 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" />를 호출했을 때 반환되는 <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 인스턴스입니다.</param>
        <summary>
          <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />를 호출하여 시작한 비동기 쓰기 작업을 끝냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 작업이 완료 되지 않은 경우이 메서드는 완료 될 때까지 차단 됩니다.  
  
 성공적으로 인증 될 때까지이 메서드를 호출할 수 없습니다. 인증 중 하나를 호출는 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.  
  
 이 작업을 동기적으로 수행 하려면는 <xref:System.Net.Security.NegotiateStream.Write%2A> 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서는 비동기 쓰기 작업을 완료 하기 위해 호출 하는 방법을 보여 줍니다. 작업을 시작 하는 방법을 보여 주는 예제를 보려면 <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>합니다.  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />를 호출했지만 asyncResult가 만들어지지 않은 경우</exception>
        <exception cref="T:System.InvalidOperationException">인증이 수행되지 않은 경우</exception>
        <exception cref="T:System.IO.IOException">쓰기 작업이 실패했습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>버퍼링된 모든 데이터를 내부 장치에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 <xref:System.IO.Stream.Flush%2A> 내부 스트림의 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 스트림을 플러시하는 방법을 보여 줍니다.  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImpersonationLevel">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Principal.TokenImpersonationLevel ImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ImpersonationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ImpersonationLevel As TokenImpersonationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::TokenImpersonationLevel ImpersonationLevel { System::Security::Principal::TokenImpersonationLevel get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.TokenImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>서버에서 클라이언트의 자격 증명을 사용하는 방법을 나타내는 값을 가져옵니다.</summary>
        <value>
          <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값 중 하나입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하기 전에 성공적으로 인증 해야 합니다. 중 하나를 호출 하 여 인증을 요청할 때 클라이언트를 가장 수준이 지정 된 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> 메서드. 지정 하지 않고 인증 하는 경우는 <xref:System.Security.Principal.TokenImpersonationLevel> , <xref:System.Security.Principal.TokenImpersonationLevel.Identification> 사용 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">인증이 실패하거나 수행되지 않은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAuthenticated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인증이 성공했는지 여부를 나타내는 <see cref="T:System.Boolean" /> 값을 가져옵니다.</summary>
        <value>
          인증이 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 하 여 클라이언트 인증의 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> 메서드. 호출 하 여 서버 인증의 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEncrypted">
      <MemberSignature Language="C#" Value="public override bool IsEncrypted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEncrypted" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsEncrypted" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEncrypted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEncrypted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Boolean" />에서 데이터 암호화를 사용하는지 여부를 나타내는 <see cref="T:System.Net.Security.NegotiateStream" /> 값을 가져옵니다.</summary>
        <value>
          네트워크를 통해 전송하기 전에 데이터를 암호화하고 원격 끝점에 도달한 후 해독하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 암호화가 데이터의 개인 정보를 보호 하는 즉,는 데이터가 전송 되는 동안 해독할 수 없으므로 제 3 자가 확인할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Security.ProtectionLevel" />
      </Docs>
    </Member>
    <Member MemberName="IsMutuallyAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsMutuallyAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMutuallyAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsMutuallyAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMutuallyAuthenticated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>서버와 클라이언트 모두 인증되었는지 여부를 나타내는 <see cref="T:System.Boolean" /> 값을 가져옵니다.</summary>
        <value>
          서버가 인증되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 클라이언트가 서버를 인증에 대 한 자격 증명을 제공 하는 경우 클라이언트에서 상호 인증을 지정 합니다. 기본적으로 클라이언트는 상호 인증을 요청합니다.  
  
 협상 프로토콜은 클라이언트와 서버에서 지 원하는 보안 프로토콜에 따라 NTLM 이나 Kerberos를 선택 합니다. NTLM 상호 인증을 지원 하지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsServer">
      <MemberSignature Language="C#" Value="public override bool IsServer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServer" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsServer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsServer { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Boolean" />에서 사용하는 연결의 로컬측이 서버로 인증되었는지 여부를 나타내는 <see cref="T:System.Net.Security.NegotiateStream" /> 값을 가져옵니다.</summary>
        <value>
          로컬 끝점이 인증된 연결의 서버측으로 인증되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 반환 하는 경우 인증이 실패 하거나 발생 하지 않은, `false`합니다.  
  
 서버로 인증 하려면 호출는 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSigned">
      <MemberSignature Language="C#" Value="public override bool IsSigned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSigned" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsSigned" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSigned { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 스트림을 사용하여 보내는 데이터에 서명할지 여부를 나타내는 <see cref="T:System.Boolean" /> 값을 가져옵니다.</summary>
        <value>
          데이터를 전송하기 전에 서명하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 데이터의 무결성을 보호 하는 데 도움이 데이터 서명 즉, 수신자가 데이터가 전송 중에 있는 훼손 되었는지 여부를 확인할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>내부 스트림의 길이를 가져옵니다.</summary>
        <value>내부 스트림의 길이를 지정하는 <see cref="T:System.Int64" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출에서 반환 된 값을 반환 하는이 속성은 <xref:System.IO.Stream.Length%2A> 내부 스트림의 속성입니다. 내부 스트림을 검색할 수 없는 경우이 속성 일반적으로 예외를 throw 합니다. 내부 스트림의 런타임 형식에 throw 되는 예외의 런타임 형식이 결정 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">내부 스트림이 <see cref="T:System.Net.Sockets.NetworkStream" />일 때 이 속성의 값을 가져올 수 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>내부 스트림 내의 현재 위치를 가져오거나 설정합니다.</summary>
        <value>내부 스트림 내의 현재 위치를 지정하는 <see cref="T:System.Int64" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출에서 반환 된 값을 반환 하는이 속성은 <xref:System.IO.Stream.Position%2A> 내부 스트림의 속성입니다. 내부 스트림을 검색할 수 없는 경우이 속성 일반적으로 예외를 throw 합니다. 내부 스트림의 런타임 형식에 throw 되는 예외의 런타임 형식이 결정 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">이 속성 설정이 지원되지 않는 경우  
  
 \- 또는 -  
  
 내부 스트림이 <see cref="T:System.Net.Sockets.NetworkStream" />일 때 이 속성의 값을 가져올 수 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">스트림에서 읽은 바이트를 받는 <see cref="T:System.Byte" /> 배열입니다.</param>
        <param name="offset">이 스트림에서 읽은 데이터를 저장하기 시작하는 <c>버퍼</c> 내의 위치(0부터 시작)가 포함된 <see cref="T:System.Int32" />입니다.</param>
        <param name="count">스트림에서 읽을 최대 바이트 수가 포함된 <see cref="T:System.Int32" />입니다.</param>
        <summary>이 스트림에서 데이터를 읽어 지정된 배열에 저장합니다.</summary>
        <returns>내부 스트림에서 읽은 바이트 수를 지정하는 <see cref="T:System.Int32" /> 값입니다. 읽을 데이터가 더 이상 없으면 0이 반환됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 메서드는 최대 읽고 `count` 바이트 스트림 및에 저장 합니다 `buffer` 부터 `offset`합니다.  
  
 성공적으로 인증 될 때까지이 메서드를 호출할 수 없습니다. 인증 중 하나를 호출는 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.  
  
 이 작업을 비동기적으로 수행 하려면는 <xref:System.Net.Security.NegotiateStream.BeginRead%2A> 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서 읽기는 <xref:System.Net.Security.NegotiateStream>합니다.  
  
 [!code-cpp[NclNegoSyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncServer/CPP/NclNegoSyncServer.cpp#1)]
 [!code-csharp[NclNegoSyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">읽기 작업이 실패한 경우</exception>
        <exception cref="T:System.InvalidOperationException">인증이 수행되지 않은 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" /> 작업이 이미 진행 중인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public override int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ReadTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>읽기 작업에서 데이터 대기를 차단하는 시간을 가져오거나 설정합니다.</summary>
        <value>읽기 작업이 실패할 때까지 걸리는 시간을 지정하는 <see cref="T:System.Int32" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출에서 반환 된 값을 반환 하는이 속성은 <xref:System.IO.Stream.ReadTimeout%2A> 내부 스트림의 속성입니다. 이 속성을 설정 하는 경우는 <xref:System.IO.Stream.ReadTimeout%2A> 내부 스트림의 값이 지정된 된 값으로 설정 합니다.  
  
 기본 스트림이 <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.ReadTimeout%2A> 밀리초 이며로 설정 되어 <xref:System.Threading.Timeout.Infinite> 작업 제한 시간이 초과 되지 않는 읽기를 기본적으로 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteIdentity">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.IIdentity RemoteIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IIdentity RemoteIdentity" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.RemoteIdentity" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RemoteIdentity As IIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::IIdentity ^ RemoteIdentity { System::Security::Principal::IIdentity ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인증된 이 스트림을 공유하는 원격 대상의 ID 정보를 가져옵니다.</summary>
        <value>원격 끝점의 ID를 설명하는 <see cref="T:System.Security.Principal.IIdentity" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 반환 클라이언트에서 액세스 하는 <xref:System.Security.Principal.GenericIdentity> 는 이름 SPN (서비스 사용자)는 서버와 사용 되는 인증 프로토콜을 포함 하 합니다. 이 속성을 반환 하 여 서버에 액세스 하는 <xref:System.Security.Principal.WindowsIdentity> 클라이언트를 설명 하는 합니다. 경우는 <xref:System.Security.Principal.WindowsIdentity> 은 사용할 수 없는 클라이언트 정보에 서버에 반환 되는 <xref:System.Security.Principal.GenericIdentity>합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.  
  
 [!code-cpp[NclNegoAsyncServer#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#2)]
 [!code-csharp[NclNegoAsyncServer#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">인증이 실패하거나 수행되지 않은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">이 값은 무시됩니다.</param>
        <param name="origin">이 값은 무시됩니다.</param>
        <summary>
          <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
        <returns>항상 <see cref="T:System.NotSupportedException" />을 throw합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하지 마십시오. 를 상속 하지만에서 지원 되지 않습니다 <xref:System.Net.Security.NegotiateStream>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Net.Security.NegotiateStream" />에서 검색을 지원하지 않는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">스트림의 길이를 지정하는 <see cref="T:System.Int64" /> 값입니다.</param>
        <summary>내부 스트림의 길이를 설정합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">스트림에 쓸 바이트를 제공하는 <see cref="T:System.Byte" /> 배열입니다.</param>
        <param name="offset">스트림에 쓸 바이트를 읽기 시작하는 <c>버퍼</c> 내의 위치(0부터 시작)가 포함된 <see cref="T:System.Int32" />입니다.</param>
        <param name="count">
          <c>버퍼</c>에서 읽을 바이트 수가 포함된 <see cref="T:System.Int32" />입니다.</param>
        <summary>지정된 버퍼와 오프셋을 사용하여 지정된 수의 <see cref="T:System.Byte" />를 내부 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 암호화, 서명 또는 암호화 및 서명에 사용 되는 경우이 메서드 버퍼에서 데이터를 읽을, 암호화, 서명, 또는 암호화 하 고, 서명 및 기본 스트림을 사용 하 여 전송 합니다. 이 메서드를 호출 하는 경우 보안 데이터 암호화 또는 서명 사용 중인 같은 서비스를 <xref:System.IO.Stream.Write%2A> 내부 스트림의 합니다.  
  
 이 메서드는 쓰기 작업이 완료 될 때 차단 됩니다. 작업이 완료 될 때까지 차단 하지 않으려면을 사용 하 여는 <xref:System.Net.Security.NegotiateStream.Write%2A> 메서드.  
  
 성공적으로 인증 될 때까지이 메서드를 호출할 수 없습니다. 인증 중 하나를 호출는 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 또는 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> 메서드.  
  
 <xref:System.Net.Security.NegotiateStream> 클래스가 여러 동시 쓰기 작업을 지원 하지 않습니다. 또 다른 쓰기 작업은 동일한 스트림의을 실행 하는 동안 작업을 시작 하려고 하면 한 <xref:System.NotSupportedException> 예외가 throw 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에 쓰기는 <xref:System.Net.Security.NegotiateStream>합니다.  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset is less than 0" />.  
  
 \- 또는 -  
  
 <paramref name="offset" /> 이 <paramref name="buffer" />의 길이보다 큽니다.  
  
 \- 또는 -  
  
 <paramref name="offset" />과 count의 합이 <paramref name="buffer" />의 길이보다 큰 경우</exception>
        <exception cref="T:System.IO.IOException">쓰기 작업이 실패했습니다.  
  
 \- 또는 -  
  
 암호화를 사용 중이지만 데이터를 암호화할 수 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">쓰기 작업을 진행 중인 경우</exception>
        <exception cref="T:System.ObjectDisposedException">이 개체가 닫힌 경우</exception>
        <exception cref="T:System.InvalidOperationException">인증이 수행되지 않은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public override int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WriteTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>쓰기 작업에서 데이터 대기를 차단하는 시간을 가져오거나 설정합니다.</summary>
        <value>쓰기 작업이 실패할 때까지 걸리는 시간을 지정하는 <see cref="T:System.Int32" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출에서 반환 된 값을 반환 하는이 속성은 <xref:System.IO.Stream.WriteTimeout%2A> 내부 스트림의 속성입니다. 집합 작업에 대 한 지정 된 값이 설정의 <xref:System.IO.Stream.WriteTimeout%2A> 내부 스트림의 값.  
  
 기본 스트림이 <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.WriteTimeout%2A> 밀리초 이며로 설정 되어 <xref:System.Threading.Timeout.Infinite> 기본적으로 쓰기에 작업 제한 시간이 초과 되지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 속성의 값을 표시 하는 방법을 보여 줍니다.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>