<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PersistenceProvider.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac547c79f6c0b41f17304c2993fb11979f822b05793.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47c79f6c0b41f17304c2993fb11979f822b05793</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Persistence.PersistenceProvider">
          <source>The abstract base class from which all durable service persistence providers are derived.</source>
          <target state="translated">모든 영속 서비스 지속성 공급자가 파생되는 추상 기본 클래스입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Persistence.PersistenceProvider">
          <source>Users can create classes derived from this type to create durable service persistence providers that use custom persistence stores, such as third-party databases, the file system, or storage systems accessed remotely.</source>
          <target state="translated">사용자는 이 형식에서 파생된 클래스를 만들어 타사 데이터베이스, 파일 시스템 또는 원격으로 액세스한 저장소 시스템과 같은 사용자 지정 지속성 저장소를 사용하는 영속 서비스 지속성 제공자를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Persistence.PersistenceProvider">
          <source>To create a system-provided implementation of this type that uses Microsoft SQL Server as a persistence store, see <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory&gt;</ph>.</source>
          <target state="translated">Microsoft SQL Server를 지속성 저장소로 사용하는 이 형식의 시스템 제공 구현을 만들려면 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Persistence.PersistenceProvider">
          <source>When creating persistence provider implementations, it is important to maintain the thread's original identity in the new provider's methods (such as <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A&gt;</ph>.</source>
          <target state="translated">지속성 공급자 구현을 만들 때는 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A&gt;</ph>와 같은 새 공급자의 메서드에서 스레드의 원래 ID를 유지하는 것이 중요합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Persistence.PersistenceProvider">
          <source>Otherwise, security loopholes could be created, because operations would then run under the wrong identity.</source>
          <target state="translated">그렇지 않으면 작업이 잘못된 ID로 실행되어 보안 루프홀이 생성될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Persistence.PersistenceProvider">
          <source>For an implementation of this type that uses the file system as a persistence store, see the FilePersistenceProviderFactory.cs file in the DurableServiceFactory SDK sample.</source>
          <target state="translated">파일 시스템을 지속성 저장소로 사용하는 이 형식의 구현에 대해서는 DurableServiceFactory SDK 샘플에서 FilePersistenceProviderFactory.cs 파일을 참조하십시오.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)">
          <source>The unique identifier of the service state data being saved.</source>
          <target state="translated">저장할 서비스 상태 데이터의 고유 식별자입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)">
          <source>When implemented in a derived class, initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.Persistence.PersistenceProvider" /&gt;</ph> class.</source>
          <target state="translated">파생 클래스에서 구현되는 경우에는 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Persistence.PersistenceProvider" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)">
          <source>The following code demonstrates how to use the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider&gt;</ph> constructor.</source>
          <target state="translated">다음 코드에서는 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider&gt;</ph> 생성자를 사용하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)">
          <source>This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</source>
          <target state="translated">이 코드 예제는 FilePersistenceProviderFactory.cs 파일에 있는 DurableServiceFactory SDK 샘플의 일부입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> the DurableServiceFactory SDK sample.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> DurableServiceFactory SDK 샘플입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The actual instance state.</source>
          <target state="translated">실제 인스턴스 상태입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">시도에 대한 제한 시간으로서 이 시간이 지나면 지속성 제공자가 시도를 중단합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the operation is completed.</source>
          <target state="translated">작업이 완료되면 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous operation from other operations.</source>
          <target state="translated">특정 비동기 작업을 다른 작업과 구별하는 사용자 제공 개체입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>When implemented in a derived class, represents the beginning of the Create phase.</source>
          <target state="translated">파생 클래스에서 구현되는 경우 Create 단계의 시작을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The Create phase occurs when service instance records are first created in the persistence store.</source>
          <target state="translated">Create 단계는 서비스 인스턴스 레코드가 지속성 저장소에 처음으로 만들어질 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The state of the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> asynchronous method call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> 비동기 메서드 호출의 상태입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate%2A&gt;</ph> method.</source>
          <target state="translated">다음 코드에서는 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate%2A&gt;</ph> 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The actual instance state.</source>
          <target state="translated">실제 인스턴스 상태입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">시도에 대한 제한 시간으로서 이 시간이 지나면 지속성 제공자가 시도를 중단합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the operation is completed.</source>
          <target state="translated">작업이 완료되면 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous operation from other operations.</source>
          <target state="translated">특정 비동기 작업을 다른 작업과 구별하는 사용자 제공 개체입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>When implemented in a derived class, represents the beginning of the Delete phase.</source>
          <target state="translated">파생 클래스에서 구현되는 경우 Delete 단계의 시작을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The Delete phase occurs when service state data is permanently deleted from the persistence store.</source>
          <target state="translated">Delete 단계는 서비스 상태 데이터가 지속성 저장소에서 영구적으로 삭제될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The state of the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> asynchronous method call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> 비동기 메서드 호출의 상태입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code demonstrates how to implement the <ph id="ph1">`BeginDelete`</ph> method.</source>
          <target state="translated">다음 코드에서는 <ph id="ph1">`BeginDelete`</ph> 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</source>
          <target state="translated">이 코드 예제는 FilePersistenceProviderFactory.cs 파일에 있는 DurableServiceFactory SDK 샘플의 일부입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> the DurableServiceFactory SDK sample.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> DurableServiceFactory SDK 샘플입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">시도에 대한 제한 시간으로서 이 시간이 지나면 지속성 제공자가 시도를 중단합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the operation is completed.</source>
          <target state="translated">작업이 완료되면 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous operation from other operations.</source>
          <target state="translated">특정 비동기 작업을 다른 작업과 구별하는 사용자 제공 개체입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>When implemented in a derived class, represents the beginning of the Load phase.</source>
          <target state="translated">파생 클래스에서 구현되는 경우 Load 단계의 시작을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The Load phase occurs when state data is loaded into the persistence provider from the persistence store.</source>
          <target state="translated">Load 단계는 상태 데이터가 지속성 저장소에서 지속성 제공자로 로드될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The state of the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> asynchronous method call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> 비동기 메서드 호출의 상태입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code demonstrates how to implement the <ph id="ph1">`BeginLoad`</ph> method.</source>
          <target state="translated">다음 코드에서는 <ph id="ph1">`BeginLoad`</ph> 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</source>
          <target state="translated">이 코드 예제는 FilePersistenceProviderFactory.cs 파일에 있는 DurableServiceFactory SDK 샘플의 일부입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> the DurableServiceFactory SDK sample.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> DurableServiceFactory SDK 샘플입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">시도에 대한 제한 시간으로서 이 시간이 지나면 지속성 제공자가 시도를 중단합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>The token returned by a previous <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /&gt;</ph> or <ph id="ph2">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" /&gt;</ph> that represents the current state held by the caller.</source>
          <target state="translated">이전 <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" /&gt;</ph>에서 반환된 토큰으로, 호출자가 보유하고 있는 현재 상태를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>The method to be called when the operation is completed.</source>
          <target state="translated">작업이 완료되면 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous operation from other operations.</source>
          <target state="translated">특정 비동기 작업을 다른 작업과 구별하는 사용자 제공 개체입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>When implemented in a derived class, represents the beginning of the LoadIfChanged phase.</source>
          <target state="translated">파생 클래스에서 구현되는 경우 LoadIfChanged 단계의 시작을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>The LoadIfChanged phase occurs when state data is loaded into the persistence provider from the persistence store, and the state data in the persistence store has been changed.</source>
          <target state="translated">LoadIfChanged 단계는 상태 데이터가 지속성 저장소에서 지속성 공급자로 로드되고 지속성 저장소의 상태 데이터가 변경된 경우에 발생합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>The state of the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)" /&gt;</ph> asynchronous method call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)" /&gt;</ph> 비동기 메서드 호출의 상태입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged%2A&gt;</ph> method.</source>
          <target state="translated">다음 코드에서는 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged%2A&gt;</ph> 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The actual instance state.</source>
          <target state="translated">실제 인스턴스 상태입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">시도에 대한 제한 시간으로서 이 시간이 지나면 지속성 제공자가 시도를 중단합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the operation is completed.</source>
          <target state="translated">작업이 완료되면 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous operation from other operations.</source>
          <target state="translated">특정 비동기 작업을 다른 작업과 구별하는 사용자 제공 개체입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>When implemented in a derived class, represents the beginning of the Update phase.</source>
          <target state="translated">파생 클래스에서 구현되는 경우 Update 단계의 시작을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The Update phase occurs when service state data is updated in the persistence store.</source>
          <target state="translated">Update 단계는 서비스 상태 데이터가 지속성 저장소에서 업데이트될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The state of the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> asynchronous method call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> 비동기 메서드 호출의 상태입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate%2A&gt;</ph> method.</source>
          <target state="translated">다음 코드에서는 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate%2A&gt;</ph> 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)">
          <source>The actual instance state.</source>
          <target state="translated">실제 인스턴스 상태입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">시도에 대한 제한 시간으로서 이 시간이 지나면 지속성 제공자가 시도를 중단합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)">
          <source>When implemented in a derived class, creates a service state record in the persistence store.</source>
          <target state="translated">파생 클래스에서 구현되는 경우 지속성 저장소에 서비스 상태 레코드를 만듭니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)">
          <source>The instance token corresponding to the state just saved.</source>
          <target state="translated">방금 저장한 상태에 해당하는 인스턴스 토큰입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)">
          <source>This can be passed to <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph> to determine whether the state in the persistence store differs from the state when Create was called.</source>
          <target state="translated">이 토큰을 <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph>에 전달하여 지속성 저장소의 상태가 Create가 호출될 때의 상태와 다른지 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Create%2A&gt;</ph> method.</source>
          <target state="translated">다음 코드에서는 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Create%2A&gt;</ph> 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)">
          <source>The actual instance state.</source>
          <target state="translated">실제 인스턴스 상태입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">시도에 대한 제한 시간으로서 이 시간이 지나면 지속성 제공자가 시도를 중단합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)">
          <source>When implemented in a derived class, permanently deletes service state information from the persistence store.</source>
          <target state="translated">파생 클래스에서 구현되는 경우 지속성 저장소에서 서비스 상태 정보를 영구적으로 삭제합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Delete%2A&gt;</ph> method.</source>
          <target state="translated">다음 코드에서는 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Delete%2A&gt;</ph> 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)">
          <source>This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</source>
          <target state="translated">이 코드 예제는 FilePersistenceProviderFactory.cs 파일에 있는 DurableServiceFactory SDK 샘플의 일부입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> the DurableServiceFactory SDK sample.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> DurableServiceFactory SDK 샘플입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)">
          <source>A reference to the result of the operation.</source>
          <target state="translated">작업 결과에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)">
          <source>When implemented in a derived class, represents the end of the Create phase.</source>
          <target state="translated">파생 클래스에서 구현되는 경우 Create 단계의 끝을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)">
          <source>The Create phase occurs when service state records are first created in the persistence store.</source>
          <target state="translated">Create 단계는 서비스 상태 레코드가 지속성 저장소에 처음으로 만들어질 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)">
          <source>The instance token corresponding to the state just saved.</source>
          <target state="translated">방금 저장한 상태에 해당하는 인스턴스 토큰입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)">
          <source>This can be passed to <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph> to determine whether the state in the persistence store differs from the state when Create was called.</source>
          <target state="translated">이 토큰을 <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph>에 전달하여 지속성 저장소의 상태가 Create가 호출될 때의 상태와 다른지 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndCreate%2A&gt;</ph> method.</source>
          <target state="translated">다음 코드에서는 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndCreate%2A&gt;</ph> 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)">
          <source>A reference to the result of the operation.</source>
          <target state="translated">작업 결과에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)">
          <source>When implemented in a derived class, represents the end of the Delete phase.</source>
          <target state="translated">파생 클래스에서 구현되는 경우 Delete 단계의 끝을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)">
          <source>The Delete phase occurs when state data is permanently deleted from the persistence store.</source>
          <target state="translated">Delete 단계는 상태 데이터가 지속성 저장소에서 영구적으로 삭제될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndDelete%2A&gt;</ph> method.</source>
          <target state="translated">다음 코드에서는 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndDelete%2A&gt;</ph> 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)">
          <source>This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</source>
          <target state="translated">이 코드 예제는 FilePersistenceProviderFactory.cs 파일에 있는 DurableServiceFactory SDK 샘플의 일부입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)">
          <source>For more information, see the DurableServiceFactory SDK sample.</source>
          <target state="translated">자세한 내용은 DurableServiceFactory SDK 샘플을 참조하십시오.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)">
          <source>A reference to the result of the operation.</source>
          <target state="translated">작업 결과에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)">
          <source>When implemented in a derived class, represents the end of the Load phase.</source>
          <target state="translated">파생 클래스에서 구현되는 경우 Load 단계의 끝을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)">
          <source>The Load phase occurs when state data is loaded into the persistence provider from the persistence store.</source>
          <target state="translated">Load 단계는 상태 데이터가 지속성 저장소에서 지속성 제공자로 로드될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)">
          <source>The service state information.</source>
          <target state="translated">서비스 상태 정보입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)">
          <source>The following code demonstrates how to use the <ph id="ph1">`EndLoad`</ph> method.</source>
          <target state="translated">다음 코드에서는 <ph id="ph1">`EndLoad`</ph> 메서드를 사용하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)">
          <source>This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</source>
          <target state="translated">이 코드 예제는 FilePersistenceProviderFactory.cs 파일에 있는 DurableServiceFactory SDK 샘플의 일부입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> the DurableServiceFactory SDK sample.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> DurableServiceFactory SDK 샘플입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)">
          <source>A reference to the result of the operation.</source>
          <target state="translated">작업 결과에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)">
          <source>The actual instance state.</source>
          <target state="translated">실제 인스턴스 상태입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)">
          <source>When implemented in a derived class, represents the end of the LoadIfChanged phase.</source>
          <target state="translated">파생 클래스에서 구현되는 경우 LoadIfChanged 단계의 끝을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)">
          <source>The LoadIfChanged phase occurs when state data is loaded into the persistence provider from the persistence store, and the state data in the persistence store has been changed.</source>
          <target state="translated">LoadIfChanged 단계는 상태 데이터가 지속성 저장소에서 지속성 공급자로 로드되고 지속성 저장소의 상태 데이터가 변경된 경우에 발생합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the instance <ph id="ph2">&lt;see langword="out" /&gt;</ph> parameter has been set with the latest copy from the persistence store; <ph id="ph3">&lt;see langword="false" /&gt;</ph> if the locally cached state is already up-to-date.</source>
          <target state="translated">인스턴스 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 매개 변수가 지속성 저장소의 최신 복사본으로 설정되어 있으면 <ph id="ph2">&lt;see langword="out" /&gt;</ph>이고, 로컬에 캐시된 상태가 이미 최신 상태이면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged%2A&gt;</ph> method.</source>
          <target state="translated">다음 코드에서는 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged%2A&gt;</ph> 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)">
          <source>A reference to the result of the operation.</source>
          <target state="translated">작업 결과에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)">
          <source>Represents the end of the Update phase.</source>
          <target state="translated">Update 단계의 끝을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)">
          <source>The Update phase occurs when service state records are updated in the persistence store.</source>
          <target state="translated">Update 단계는 서비스 상태 레코드가 지속성 저장소에 업데이트될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)">
          <source>The instance token corresponding to the state just saved.</source>
          <target state="translated">방금 저장한 상태에 해당하는 인스턴스 토큰입니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)">
          <source>This can be passed to <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph> to determine whether the state in the persistence store differs from the state when Create was called.</source>
          <target state="translated">이 토큰을 <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph>에 전달하여 지속성 저장소의 상태가 Create가 호출될 때의 상태와 다른지 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate%2A&gt;</ph> method.</source>
          <target state="translated">다음 코드에서는 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate%2A&gt;</ph> 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Persistence.PersistenceProvider.Id">
          <source>Represents the <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> associated with this instance.</source>
          <target state="translated">이 인스턴스와 연결된 <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph>를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Persistence.PersistenceProvider.Id">
          <source>The GUID associated with this instance.</source>
          <target state="translated">이 인스턴스와 연결된 GUID입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Persistence.PersistenceProvider.Id">
          <source>The following code demonstrates how to use the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Id%2A&gt;</ph> property.</source>
          <target state="translated">다음 코드에서는 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Id%2A&gt;</ph> 속성을 사용하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">시도에 대한 제한 시간으로서 이 시간이 지나면 지속성 제공자가 시도를 중단합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source>When implemented in a derived class, loads service state information from the persistence store.</source>
          <target state="translated">파생 클래스에서 구현되는 경우 지속성 저장소에서 서비스 상태 정보를 로드합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source>The loaded instance state.</source>
          <target state="translated">로드된 인스턴스 상태입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source>Changes made to the security token in the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A&gt;</ph> method, if not reverted, stay in effect for the remainder of that message's processing.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A&gt;</ph> 메서드의 보안 토큰에 대한 변경 내용은 되돌리지 않는 한 메시지 처리의 나머지 부분에 계속 적용됩니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source>This means that the service operation's user code, the response message path through the dispatcher, as well as any error paths, run in the changed security context.</source>
          <target state="translated">즉, 서비스 작업의 사용자 코드, 디스패처를 통한 응답 메시지 경로뿐만 아니라 모든 오류 경로도 변경된 보안 컨텍스트에서 실행됩니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A&gt;</ph> method.</source>
          <target state="translated">다음 코드에서는 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A&gt;</ph> 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source>This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</source>
          <target state="translated">이 코드 예제는 FilePersistenceProviderFactory.cs 파일에 있는 DurableServiceFactory SDK 샘플의 일부입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> the DurableServiceFactory SDK sample.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> DurableServiceFactory SDK 샘플입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">시도에 대한 제한 시간으로서 이 시간이 지나면 지속성 제공자가 시도를 중단합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)">
          <source>The token returned by a previous <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /&gt;</ph> or <ph id="ph2">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" /&gt;</ph>, which represents the current state held by the caller.</source>
          <target state="translated">호출자가 보유한 현재 상태를 나타내는 이전 <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" /&gt;</ph>에서 반환하는 토큰입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)">
          <source>The actual instance state.</source>
          <target state="translated">실제 인스턴스 상태입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)">
          <source>When implemented in a derived class, loads service state information from the persistence store if that data has been changed.</source>
          <target state="translated">파생 클래스에서 구현되는 경우 해당 데이터가 변경되면 지속성 저장소에서 서비스 상태 정보를 로드합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="instance" /&gt;</ph><ph id="ph3">&lt;see langword="out" /&gt;</ph> parameter has been set with the latest copy from the persistence store; <ph id="ph4">&lt;see langword="false" /&gt;</ph> if the locally cached state is already up to date.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="instance" /&gt;</ph><ph id="ph1">&lt;see langword="true" /&gt;</ph> 매개 변수가 지속성 저장소의 최신 복사본으로 설정되어 있으면 <ph id="ph3">&lt;see langword="out" /&gt;</ph>이고, 로컬에 캐시된 상태가 이미 최신 상태이면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged%2A&gt;</ph> method.</source>
          <target state="translated">다음 코드에서는 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged%2A&gt;</ph> 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)">
          <source>The actual instance state.</source>
          <target state="translated">실제 인스턴스 상태입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">시도에 대한 제한 시간으로서 이 시간이 지나면 지속성 제공자가 시도를 중단합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)">
          <source>When implemented in a derived class, updates service state records in the persistence store.</source>
          <target state="translated">파생 클래스에서 구현되는 경우 지속성 저장소에 서비스 상태 레코드를 업데이트합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)">
          <source>The instance token corresponding to the state just saved.</source>
          <target state="translated">방금 저장한 상태에 해당하는 인스턴스 토큰입니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)">
          <source>This can be passed to <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph> to determine whether the state in the persistence store differs from the state when Create was called.</source>
          <target state="translated">이 토큰을 <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph>에 전달하여 지속성 저장소의 상태가 Create가 호출될 때의 상태와 다른지 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Update%2A&gt;</ph> method.</source>
          <target state="translated">다음 코드에서는 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Update%2A&gt;</ph> 메서드를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>