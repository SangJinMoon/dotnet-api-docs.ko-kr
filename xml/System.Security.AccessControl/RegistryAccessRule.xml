<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="RegistryAccessRule.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac562c3253705ce2579586fdcfa198c3e0977ef242d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">62c3253705ce2579586fdcfa198c3e0977ef242d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>Represents a set of access rights allowed or denied for a user or group.</source>
          <target state="translated">사용자 또는 그룹에 대해 허용 또는 거부된 액세스 권한 집합을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>This class cannot be inherited.</source>
          <target state="translated">이 클래스는 상속될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>The <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> class is one of a set of classes that the .NET Framework provides for managing Windows access control security on registry keys.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> 클래스는 Windows 레지스트리 키에 액세스 제어 보안을 관리 하기 위한.NET Framework가 제공 하는 클래스 집합 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>For an overview of these classes, and their relationship to the underlying Windows access control structures, see <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>.</source>
          <target state="translated">이러한 클래스와의 관계는 기본 Windows 액세스 제어 구조를의 개요를 참조 하십시오. <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>Windows access control security can only be applied to registry keys.</source>
          <target state="translated">Windows 액세스 제어 보안 레지스트리 키에만 적용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>It cannot be applied to individual key/value pairs stored in a key.</source>
          <target state="translated">키에 저장 된 개별 키/값 쌍에 적용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>To get a list of the rules currently applied to a registry key, use the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method to get a <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object, and then use its <ph id="ph3">&lt;xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A&gt;</ph> method to obtain a collection of <ph id="ph4">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> objects.</source>
          <target state="translated">현재 레지스트리 키에 적용 된 규칙 목록이 사용는 <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> 가져올 메서드를 한 <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> 개체를 사용 하 여 해당 <ph id="ph3">&lt;xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A&gt;</ph> 메서드의 컬렉션을 가져옵니다 <ph id="ph4">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> objects do not map one-to-one with access control entries in the underlying discretionary control access list (DACL).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> 개체가 내부 임의 제어 액세스 목록 (DACL)에서 액세스 제어 항목으로 일대일로 매핑되지 않습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>When you get the set of all access rules for a registry key, the set contains the minimum number of rules currently required to express all the access control entries.</source>
          <target state="translated">레지스트리 키에 대 한 모든 액세스 규칙 집합이 나타나면 집합은 현재 모든 액세스 제어 항목을 나타내는 데 필요한 규칙의 최소 수를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>The underlying access control entries change as you apply and remove rules.</source>
          <target state="translated">기본 액세스 제어 항목에 적용 하 고 규칙을 제거 하는 대로 변경 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>The information in rules is merged if possible, to maintain the smallest number of access control entries.</source>
          <target state="translated">규칙의 정보는 액세스 제어 항목의 가장 작은 수를 유지 하기 위해 가능 하면 병합 됩니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>Thus, when you read the current list of rules, it might not look exactly like the list of all the rules you have added.</source>
          <target state="translated">따라서 규칙의 현재 목록의 읽을 때 하지 같습니다 정확 하 게 사용자가 추가한 모든 규칙의 목록입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>Use <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> objects to specify access rights to allow or deny to a user or group.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> 개체를 허용 하거나 거부할 사용자 또는 그룹에 대 한 액세스 권한을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>A <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> object always represents either allowed access or denied access, never both.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> 개체는 항상 액세스를 허용 하거나 거부 된 액세스 권한 나타내며 하지 둘 다 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>To apply a rule to a registry key, use the <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method to get the <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object.</source>
          <target state="translated">레지스트리 키에 규칙을 적용 하려면 사용 하 여는 <ph id="ph1">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType&gt;</ph> 가져올 메서드를는 <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>Modify the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object by using its methods to add the rule, and then use the <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method to reattach the security object.</source>
          <target state="translated">수정 된 <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> 추가 규칙을 사용 하 여 해당 메서드를 사용 하 여 개체는 <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph> 메서드를 보안 개체를 다시 연결 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>Changes you make to a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object do not affect the access levels of the registry key until you call the <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph> method to assign the altered security object to the registry key.</source>
          <target state="translated">변경 내용은 한 <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> 개체를 호출 하기 전에 레지스트리 키의 액세스 수준을 적용 되지 않습니다는 <ph id="ph2">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType&gt;</ph> 레지스트리 키로 변경 된 보안 개체를 지정 하는 메서드.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> objects are immutable.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> 개체는 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>Security for a registry key is modified using the methods of the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> class to add or remove rules; as you do this, the underlying access control entries are modified.</source>
          <target state="translated">레지스트리 키에 대 한 보안의 메서드를 사용 하 여 수정 되는 <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> 규칙을 추가 하거나 제거 하는 클래스, 이렇게 하면 기본 액세스 제어 항목 수정 됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>The following code example demonstrates access rules with inheritance and propagation.</source>
          <target state="translated">다음 코드 예제에서는 상속 및 전파 액세스 규칙을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object, then creates and adds two rules that have the <ph id="ph2">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit&gt;</ph> flag.</source>
          <target state="translated">이 예에서는 만듭니다는 <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> 개체을 다음을 추가 하는 두 개의 규칙은 <ph id="ph2">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>The first rule has no propagation flags, while the second has <ph id="ph1">&lt;xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.AccessControl.PropagationFlags.InheritOnly&gt;</ph>.</source>
          <target state="translated">첫 번째 규칙에 없는 전파 플래그는 있지만 두 번째에 <ph id="ph1">&lt;xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Security.AccessControl.PropagationFlags.InheritOnly&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>The program displays the rules in the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object, and then uses the object to create a subkey.</source>
          <target state="translated">프로그램에 규칙을 표시는 <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> 개체를 다음 개체를 사용 하 여 하위 키를 만듭니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>The program creates a child subkey and a grandchild subkey, and then displays the security for each subkey.</source>
          <target state="translated">자식 하위 키와 손자 하위 키를 만들고 각 하위 키에 대 한 보안을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>Finally, the program deletes the test keys.</source>
          <target state="translated">마지막으로, 프로그램 테스트 키를 삭제 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="T:System.Security.AccessControl.RegistryAccessRule">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source>The user or group the rule applies to.</source>
          <target state="translated">규칙을 적용할 사용자나 그룹입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source>Must be of type <ph id="ph1">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph> or a type such as <ph id="ph2">&lt;see cref="T:System.Security.Principal.NTAccount" /&gt;</ph> that can be converted to type <ph id="ph3">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>.</source>
          <target state="translated">이 값은 <ph id="ph1">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph> 형식이거나 <ph id="ph2">&lt;see cref="T:System.Security.Principal.NTAccount" /&gt;</ph>와 같이 <ph id="ph3">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph> 형식으로 변환할 수 있는 형식이어야 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryRights" /&gt;</ph> values indicating the rights allowed or denied.</source>
          <target state="translated">허용 또는 거부 권한을 나타내는 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryRights" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> values indicating whether the rights are allowed or denied.</source>
          <target state="translated">권한 허용 여부를 나타내는 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> class, specifying the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> 클래스의 새 인스턴스를 초기화하여 규칙을 적용할 사용자 또는 그룹, 액세스 권한 및 지정된 액세스 권한의 허용 또는 거부를 지정합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source>This constructor specifies default propagation and inheritance.</source>
          <target state="translated">이 생성자는 기본 전파 및 상속을 지정합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source>That is, <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">즉, <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="registryRights" /&gt;</ph> specifies an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="registryRights" /&gt;</ph>가 잘못된 값을 지정하는 경우</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> specifies an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph>가 잘못된 값을 지정하는 경우</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="identity" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="identity" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="eventRights" /&gt;</ph> is zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="eventRights" /&gt;</ph>가 0입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="identity" /&gt;</ph> is neither of type <ph id="ph2">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph> nor of a type such as <ph id="ph3">&lt;see cref="T:System.Security.Principal.NTAccount" /&gt;</ph> that can be converted to type <ph id="ph4">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="identity" /&gt;</ph>의 형식이 <ph id="ph2">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>도 아니고 <ph id="ph3">&lt;see cref="T:System.Security.Principal.NTAccount" /&gt;</ph>와 같이 <ph id="ph4">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph> 형식으로 변환할 수 있는 형식도 아닌 경우</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source>The name of the user or group the rule applies to.</source>
          <target state="translated">규칙을 적용할 사용자나 그룹의 이름입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryRights" /&gt;</ph> values indicating the rights allowed or denied.</source>
          <target state="translated">허용 또는 거부 권한을 나타내는 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryRights" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> values indicating whether the rights are allowed or denied.</source>
          <target state="translated">권한 허용 여부를 나타내는 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> class, specifying the name of the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> 클래스의 새 인스턴스를 초기화하여 규칙을 적용할 사용자 또는 그룹의 이름, 액세스 권한 및 지정된 액세스 권한의 허용 또는 거부 여부를 지정합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source>This constructor specifies default propagation and inheritance.</source>
          <target state="translated">이 생성자는 기본 전파 및 상속을 지정합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source>That is, <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">즉, <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source>This constructor is equivalent to creating an <ph id="ph1">&lt;xref:System.Security.Principal.NTAccount&gt;</ph> object, by passing <ph id="ph2">`identity`</ph> to the <ph id="ph3">&lt;xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType&gt;</ph> constructor, and passing the newly created <ph id="ph4">&lt;xref:System.Security.Principal.NTAccount&gt;</ph> object to the <ph id="ph5">&lt;xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29&gt;</ph> constructor.</source>
          <target state="translated">이 생성자는 만들기는 <ph id="ph1">&lt;xref:System.Security.Principal.NTAccount&gt;</ph> 개체를 전달 하 여 <ph id="ph2">`identity`</ph> 에 <ph id="ph3">&lt;xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType&gt;</ph> 생성자 및 새로 만든 전달 <ph id="ph4">&lt;xref:System.Security.Principal.NTAccount&gt;</ph> 개체를 <ph id="ph5">&lt;xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source>The following code example creates registry access rules and adds them to a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object, showing how rules that allow and deny rights remain separate, while compatible rules of the same kind are merged.</source>
          <target state="translated">다음 코드 예제에서는 레지스트리 액세스 규칙을 만들고에 추가 <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> 을 보여 주는 개체 권한을 허용 및 거부 하는 규칙에 동일한의 호환 규칙 동안 별도로 유지 방법을 kind 병합 됩니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="registryRights" /&gt;</ph> specifies an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="registryRights" /&gt;</ph>가 잘못된 값을 지정하는 경우</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> specifies an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph>가 잘못된 값을 지정하는 경우</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="registryRights" /&gt;</ph> is zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="registryRights" /&gt;</ph>가 0입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="identity" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="identity" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="identity" /&gt;</ph> is a zero-length string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="identity" /&gt;</ph>이 빈 문자열인 경우</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="identity" /&gt;</ph> is longer than 512 characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="identity" /&gt;</ph>이 512자보다 깁니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>The user or group the rule applies to.</source>
          <target state="translated">규칙을 적용할 사용자나 그룹입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Must be of type <ph id="ph1">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph> or a type such as <ph id="ph2">&lt;see cref="T:System.Security.Principal.NTAccount" /&gt;</ph> that can be converted to type <ph id="ph3">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>.</source>
          <target state="translated">이 값은 <ph id="ph1">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph> 형식이거나 <ph id="ph2">&lt;see cref="T:System.Security.Principal.NTAccount" /&gt;</ph>와 같이 <ph id="ph3">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph> 형식으로 변환할 수 있는 형식이어야 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryRights" /&gt;</ph> values specifying the rights allowed or denied.</source>
          <target state="translated">허용 또는 거부 권한을 지정하는 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryRights" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.InheritanceFlags" /&gt;</ph> flags specifying how access rights are inherited from other objects.</source>
          <target state="translated">액세스 권한이 다른 개체에서 상속되는 방식을 지정하는 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.InheritanceFlags" /&gt;</ph> 플래그의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.PropagationFlags" /&gt;</ph> flags specifying how access rights are propagated to other objects.</source>
          <target state="translated">액세스 권한이 다른 개체로 전파되는 방식을 지정하는 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.PropagationFlags" /&gt;</ph> 플래그의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> values specifying whether the rights are allowed or denied.</source>
          <target state="translated">권한 허용 여부를 지정하는 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> class, specifying the user or group the rule applies to, the access rights, the inheritance flags, the propagation flags, and whether the specified access rights are allowed or denied.</source>
          <target state="translated">규칙을 적용할 사용자 또는 그룹, 액세스 권한, 상속 플래그, 전파 플래그 및 지정된 액세스 권한의 허용 여부를 지정하여 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">레지스트리 키에 대 한 의미 있는 유일한 상속 플래그는 모든 레지스트리 키가 컨테이너는 <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected.</source>
          <target state="translated">이 플래그를 지정 하지 않으면 전파 플래그 무시 되 고 직접 키만 영향을 받습니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>If the flag is present, the rule is propagated as shown in the following table.</source>
          <target state="translated">플래그가 있는 경우에 다음 표에 나와 있는 것 처럼 규칙 전파 됩니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>The table assumes there is a subkey S with child subkey CS and grandchild subkey GS.</source>
          <target state="translated">테이블 자식 하위 키가 CS 및 GS 손자 하위 키와 하위 키 S 가정 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>That is, the path for the grandchild subkey is S\CS\GS.</source>
          <target state="translated">즉, 손자 하위 키에 대 한 경로가 S\CS\GS입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Propagation flags</source>
          <target state="translated">전파 플래그</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>S</source>
          <target state="translated">S</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>CS</source>
          <target state="translated">CS</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>GS</source>
          <target state="translated">GS</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>X</source>
          <target state="translated">X</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>X</source>
          <target state="translated">X</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>X</source>
          <target state="translated">X</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>X</source>
          <target state="translated">X</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>X</source>
          <target state="translated">X</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>X</source>
          <target state="translated">X</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>X</source>
          <target state="translated">X</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.AccessControl.PropagationFlags.InheritOnly&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.AccessControl.PropagationFlags.InheritOnly&gt;</ph></target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>X</source>
          <target state="translated">X</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.</source>
          <target state="translated">손자 하위 키에 대 한 패턴에 포함 된 모든 하위 키를 관리 합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>For example, if the <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit&gt;</ph> flag is specified for <ph id="ph2">`inheritanceFlags`</ph> and the <ph id="ph3">&lt;xref:System.Security.AccessControl.PropagationFlags.InheritOnly&gt;</ph> propagation flag is specified for <ph id="ph4">`propagationFlags`</ph>, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.</source>
          <target state="translated">예를 들어 경우는 <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit&gt;</ph> 플래그가 지정 되어 <ph id="ph2">`inheritanceFlags`</ph> 및 <ph id="ph3">&lt;xref:System.Security.AccessControl.PropagationFlags.InheritOnly&gt;</ph> 전파 플래그에 지정 된 <ph id="ph4">`propagationFlags`</ph>,이 규칙이 직접 하위 키에 적용 되지 않습니다 되지만 모든 하위 키 및 모든 직계 자식 하위 키에 적용 하는 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Although you can specify the <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType&gt;</ph> flag for <ph id="ph2">`inheritanceFlags`</ph>, there is no point in doing so.</source>
          <target state="translated">지정할 수는 있지만 <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType&gt;</ph> 플래그에 대 한 <ph id="ph2">`inheritanceFlags`</ph>, 그렇게 하는 이유가 없습니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>For the purposes of access control, the name/value pairs in a subkey are not separate objects.</source>
          <target state="translated">액세스 제어를 위해 하위 키에서 이름/값 쌍은 별개의 개체 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>The access rights to name/value pairs are controlled by the rights of the subkey.</source>
          <target state="translated">이름/값 쌍에 대 한 액세스 권한은 하위 키의 권한에 의해 제어 됩니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> flag.</source>
          <target state="translated">또한 모든 하위 키 컨테이너는 (즉, 이러한를 포함할 수는 다른 하위 키) 하 여 영향을 받지 않습니다는 <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Finally, specifying the <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> flag needlessly complicates the maintenance of rules, because it interferes with the combination of otherwise compatible rules.</source>
          <target state="translated">마지막으로 지정 하는 <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> 플래그, 규칙의 유지 관리를 그렇지 않으면 호환 가능한 규칙의 조합을 사용 하 여 충돌 하므로 불필요 하 게 복잡해 집니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="registryRights" /&gt;</ph> specifies an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="registryRights" /&gt;</ph>가 잘못된 값을 지정하는 경우</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> specifies an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph>가 잘못된 값을 지정하는 경우</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="inheritanceFlags" /&gt;</ph> specifies an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inheritanceFlags" /&gt;</ph>가 잘못된 값을 지정하는 경우</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="propagationFlags" /&gt;</ph> specifies an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="propagationFlags" /&gt;</ph>가 잘못된 값을 지정하는 경우</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="identity" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="identity" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="registryRights" /&gt;</ph> is zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="registryRights" /&gt;</ph>가 0입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="identity" /&gt;</ph> is neither of type <ph id="ph2">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>, nor of a type such as <ph id="ph3">&lt;see cref="T:System.Security.Principal.NTAccount" /&gt;</ph> that can be converted to type <ph id="ph4">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="identity" /&gt;</ph>의 형식이 <ph id="ph2">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>도 아니고 <ph id="ph3">&lt;see cref="T:System.Security.Principal.NTAccount" /&gt;</ph>와 같이 <ph id="ph4">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph> 형식으로 변환할 수 있는 형식도 아닌 경우</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>The name of the user or group the rule applies to.</source>
          <target state="translated">규칙을 적용할 사용자나 그룹의 이름입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryRights" /&gt;</ph> values indicating the rights allowed or denied.</source>
          <target state="translated">허용 또는 거부 권한을 나타내는 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryRights" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.InheritanceFlags" /&gt;</ph> flags specifying how access rights are inherited from other objects.</source>
          <target state="translated">액세스 권한이 다른 개체에서 상속되는 방식을 지정하는 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.InheritanceFlags" /&gt;</ph> 플래그의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.PropagationFlags" /&gt;</ph> flags specifying how access rights are propagated to other objects.</source>
          <target state="translated">액세스 권한이 다른 개체로 전파되는 방식을 지정하는 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.PropagationFlags" /&gt;</ph> 플래그의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> values specifying whether the rights are allowed or denied.</source>
          <target state="translated">권한 허용 여부를 지정하는 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.AccessControlType" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> class, specifying the name of the user or group the rule applies to, the access rights, the inheritance flags, the propagation flags, and whether the specified access rights are allowed or denied.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryAccessRule" /&gt;</ph> 클래스의 새 인스턴스를 초기화하여 규칙을 적용할 사용자 또는 그룹의 이름, 액세스 권한, 상속 플래그, 전파 플래그 및 지정된 액세스 권한의 허용 또는 거부 여부를 지정합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">레지스트리 키에 대 한 의미 있는 유일한 상속 플래그는 모든 레지스트리 키가 컨테이너는 <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected.</source>
          <target state="translated">이 플래그를 지정 하지 않으면 전파 플래그 무시 되 고 직접 키만 영향을 받습니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>If the flag is present, the rule is propagated as shown in the following table.</source>
          <target state="translated">플래그가 있는 경우에 다음 표에 나와 있는 것 처럼 규칙 전파 됩니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>The table assumes there is a subkey S with child subkey CS and grandchild subkey GS.</source>
          <target state="translated">테이블 자식 하위 키가 CS 및 GS 손자 하위 키와 하위 키 S 가정 합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>That is, the path for the grandchild subkey is S\CS\GS.</source>
          <target state="translated">즉, 손자 하위 키에 대 한 경로가 S\CS\GS입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Propagation flags</source>
          <target state="translated">전파 플래그</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>S</source>
          <target state="translated">S</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>CS</source>
          <target state="translated">CS</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>GS</source>
          <target state="translated">GS</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>X</source>
          <target state="translated">X</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>X</source>
          <target state="translated">X</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>X</source>
          <target state="translated">X</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>X</source>
          <target state="translated">X</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>X</source>
          <target state="translated">X</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>X</source>
          <target state="translated">X</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>X</source>
          <target state="translated">X</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.AccessControl.PropagationFlags.InheritOnly&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.AccessControl.PropagationFlags.InheritOnly&gt;</ph></target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>X</source>
          <target state="translated">X</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.</source>
          <target state="translated">손자 하위 키에 대 한 패턴에 포함 된 모든 하위 키를 관리 합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>For example, if the <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit&gt;</ph> flag is specified for <ph id="ph2">`inheritanceFlags`</ph> and the <ph id="ph3">&lt;xref:System.Security.AccessControl.PropagationFlags.InheritOnly&gt;</ph> propagation flag is specified for <ph id="ph4">`propagationFlags`</ph>, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.</source>
          <target state="translated">예를 들어 경우는 <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit&gt;</ph> 플래그가 지정 되어 <ph id="ph2">`inheritanceFlags`</ph> 및 <ph id="ph3">&lt;xref:System.Security.AccessControl.PropagationFlags.InheritOnly&gt;</ph> 전파 플래그에 지정 된 <ph id="ph4">`propagationFlags`</ph>,이 규칙이 직접 하위 키에 적용 되지 않습니다 되지만 모든 하위 키 및 모든 직계 자식 하위 키에 적용 하는 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Although you can specify the <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType&gt;</ph> flag for <ph id="ph2">`inheritanceFlags`</ph>, there is no point in doing so.</source>
          <target state="translated">지정할 수는 있지만 <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType&gt;</ph> 플래그에 대 한 <ph id="ph2">`inheritanceFlags`</ph>, 그렇게 하는 이유가 없습니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>For the purposes of access control, the name/value pairs in a subkey are not separate objects.</source>
          <target state="translated">액세스 제어를 위해 하위 키에서 이름/값 쌍은 별개의 개체 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>The access rights to name/value pairs are controlled by the rights of the subkey.</source>
          <target state="translated">이름/값 쌍에 대 한 액세스 권한은 하위 키의 권한에 의해 제어 됩니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> flag.</source>
          <target state="translated">또한 모든 하위 키 컨테이너는 (즉, 이러한를 포함할 수는 다른 하위 키) 하 여 영향을 받지 않습니다는 <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Finally, specifying the <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> flag needlessly complicates the maintenance of rules, because it interferes with the combination of otherwise compatible rules.</source>
          <target state="translated">마지막으로 지정 하는 <ph id="ph1">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> 플래그, 규칙의 유지 관리를 그렇지 않으면 호환 가능한 규칙의 조합을 사용 하 여 충돌 하므로 불필요 하 게 복잡해 집니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>This constructor is equivalent to creating an <ph id="ph1">&lt;xref:System.Security.Principal.NTAccount&gt;</ph> object, by passing <ph id="ph2">`identity`</ph> to the <ph id="ph3">&lt;xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType&gt;</ph> constructor, and passing the newly created <ph id="ph4">&lt;xref:System.Security.Principal.NTAccount&gt;</ph> object to the <ph id="ph5">&lt;xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AccessControlType%29&gt;</ph> constructor.</source>
          <target state="translated">이 생성자는 만들기는 <ph id="ph1">&lt;xref:System.Security.Principal.NTAccount&gt;</ph> 개체를 전달 하 여 <ph id="ph2">`identity`</ph> 에 <ph id="ph3">&lt;xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType&gt;</ph> 생성자 및 새로 만든 전달 <ph id="ph4">&lt;xref:System.Security.Principal.NTAccount&gt;</ph> 개체를 <ph id="ph5">&lt;xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AccessControlType%29&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>The following code example demonstrates access rules with inheritance and propagation.</source>
          <target state="translated">다음 코드 예제에서는 상속 및 전파 액세스 규칙을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object, and then creates and adds two rules that have the <ph id="ph2">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit&gt;</ph> flag.</source>
          <target state="translated">이 예에서는 만듭니다는 <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> 개체를 로컬 폴더를 만들고 있는 두 개의 규칙을 추가 <ph id="ph2">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>The first rule has no propagation flags, while the second has <ph id="ph1">&lt;xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.AccessControl.PropagationFlags.InheritOnly&gt;</ph>.</source>
          <target state="translated">첫 번째 규칙에 없는 전파 플래그는 있지만 두 번째에 <ph id="ph1">&lt;xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Security.AccessControl.PropagationFlags.InheritOnly&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>The program displays the rules in the <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object, and then uses the <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object to create a subkey.</source>
          <target state="translated">프로그램에 규칙을 표시는 <ph id="ph1">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> 개체, 한 다음 사용 하는 <ph id="ph2">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> 하위 키를 만들 개체입니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>The program creates a child subkey and a grandchild subkey, and then displays the rules for each subkey.</source>
          <target state="translated">자식 하위 키와 손자 하위 키를 만들고 각 하위 키에 대 한 규칙을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>Finally, the program deletes the test keys.</source>
          <target state="translated">마지막으로, 프로그램 테스트 키를 삭제 합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="registryRights" /&gt;</ph> specifies an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="registryRights" /&gt;</ph>가 잘못된 값을 지정하는 경우</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> specifies an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph>가 잘못된 값을 지정하는 경우</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="inheritanceFlags" /&gt;</ph> specifies an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inheritanceFlags" /&gt;</ph>가 잘못된 값을 지정하는 경우</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="propagationFlags" /&gt;</ph> specifies an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="propagationFlags" /&gt;</ph>가 잘못된 값을 지정하는 경우</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="eventRights" /&gt;</ph> is zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="eventRights" /&gt;</ph>가 0입니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="identity" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="identity" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="identity" /&gt;</ph> is a zero-length string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="identity" /&gt;</ph>이 빈 문자열인 경우</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
          <source><ph id="ph1">&lt;paramref name="identity" /&gt;</ph> is longer than 512 characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="identity" /&gt;</ph>이 512자보다 깁니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.RegistryAccessRule.RegistryRights">
          <source>Gets the rights allowed or denied by the access rule.</source>
          <target state="translated">액세스 규칙에 의해 허용 또는 거부된 권한을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.RegistryAccessRule.RegistryRights">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryRights" /&gt;</ph> values indicating the rights allowed or denied by the access rule.</source>
          <target state="translated">액세스 규칙에 의해 허용되거나 거부된 권한을 나타내는 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.RegistryRights" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.RegistryAccessRule.RegistryRights">
          <source><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> objects are immutable.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.RegistryAccessRule&gt;</ph> 개체는 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.RegistryAccessRule.RegistryRights">
          <source>You can create a new access rule representing a different user, different rights, or a different <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>, but you cannot modify an existing access rule.</source>
          <target state="translated">다른 사용자, 서로 다른 권한을 또는 다른를 나타내는 새 액세스 규칙을 만들 수 있습니다 <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>, 있지만 기존 액세스 규칙을 수정할 수 없습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>