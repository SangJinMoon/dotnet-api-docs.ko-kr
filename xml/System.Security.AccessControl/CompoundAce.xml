<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CompoundAce.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c34e5242e9849ab07a837f7743975acb08d1df9c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c34e5242e9849ab07a837f7743975acb08d1df9c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.AccessControl.CompoundAce">
          <source>Represents a compound Access Control Entry (ACE).</source>
          <target state="translated">복합 ACE(액세스 제어 항목)를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.CompoundAce.#ctor(System.Security.AccessControl.AceFlags,System.Int32,System.Security.AccessControl.CompoundAceType,System.Security.Principal.SecurityIdentifier)">
          <source>Contains flags that specify information about the inheritance, inheritance propagation, and auditing conditions for the new Access Control Entry (ACE).</source>
          <target state="translated">새 ACE(액세스 제어 항목)의 상속, 상속 전파 및 감사 조건에 대한 정보를 지정하는 플래그가 포함되어 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.CompoundAce.#ctor(System.Security.AccessControl.AceFlags,System.Int32,System.Security.AccessControl.CompoundAceType,System.Security.Principal.SecurityIdentifier)">
          <source>The access mask for the ACE.</source>
          <target state="translated">ACE의 액세스 마스크입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.CompoundAce.#ctor(System.Security.AccessControl.AceFlags,System.Int32,System.Security.AccessControl.CompoundAceType,System.Security.Principal.SecurityIdentifier)">
          <source>A value from the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.CompoundAceType" /&gt;</ph> enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.CompoundAceType" /&gt;</ph> 열거형의 값입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.CompoundAce.#ctor(System.Security.AccessControl.AceFlags,System.Int32,System.Security.AccessControl.CompoundAceType,System.Security.Principal.SecurityIdentifier)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph> associated with the new ACE.</source>
          <target state="translated">새 ACE와 관련된 <ph id="ph1">&lt;see cref="T:System.Security.Principal.SecurityIdentifier" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.CompoundAce.#ctor(System.Security.AccessControl.AceFlags,System.Int32,System.Security.AccessControl.CompoundAceType,System.Security.Principal.SecurityIdentifier)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.CompoundAce" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.CompoundAce" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.CompoundAce.BinaryLength">
          <source>Gets the length, in bytes, of the binary representation of the current <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.CompoundAce" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.CompoundAce" /&gt;</ph> 개체에 대한 이진 표현의 길이(바이트)를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.CompoundAce.BinaryLength">
          <source>This length should be used before marshaling the ACL into a binary array with the <ph id="ph1">&lt;see cref="M:System.Security.AccessControl.CompoundAce.GetBinaryForm(System.Byte[],System.Int32)" /&gt;</ph> method.</source>
          <target state="translated">이 길이는 ACL을 이진 배열로 마샬링하기 전에 <ph id="ph1">&lt;see cref="M:System.Security.AccessControl.CompoundAce.GetBinaryForm(System.Byte[],System.Int32)" /&gt;</ph> 메서드를 사용하여 ACL을 이진 배열로 마샬링하기 전에 사용됩니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.CompoundAce.BinaryLength">
          <source>The length, in bytes, of the binary representation of the current <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.CompoundAce" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.CompoundAce" /&gt;</ph> 개체의 이진 표현 길이(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.CompoundAce.CompoundAceType">
          <source>Gets or sets the type of this <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.CompoundAce" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.CompoundAce" /&gt;</ph> 개체의 형식을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.CompoundAce.CompoundAceType">
          <source>The type of this <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.CompoundAce" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.CompoundAce" /&gt;</ph> 개체의 형식입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.CompoundAce.GetBinaryForm(System.Byte[],System.Int32)">
          <source>The byte array into which the contents of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.CompoundAce" /&gt;</ph> is marshaled.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.CompoundAce" /&gt;</ph>의 내용이 마샬링되는 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.CompoundAce.GetBinaryForm(System.Byte[],System.Int32)">
          <source>The offset at which to start marshaling.</source>
          <target state="translated">마샬링을 시작할 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.CompoundAce.GetBinaryForm(System.Byte[],System.Int32)">
          <source>Marshals the contents of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.CompoundAce" /&gt;</ph> object into the specified byte array beginning at the specified offset.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.AccessControl.CompoundAce" /&gt;</ph> 개체의 내용을 특정 오프셋에서 시작하여 지정된 바이트 배열에 마샬링합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.CompoundAce.GetBinaryForm(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> is negative or too high to allow the entire <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.CompoundAce" /&gt;</ph> to be copied into <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph>이 음수이거나 너무 높아서 전체 <ph id="ph2">&lt;see cref="T:System.Security.AccessControl.CompoundAce" /&gt;</ph>를 <ph id="ph3">&lt;paramref name="array" /&gt;</ph>에 복사할 수 없습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>