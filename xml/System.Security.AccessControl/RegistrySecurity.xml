<Type Name="RegistrySecurity" FullName="System.Security.AccessControl.RegistrySecurity">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="29a33c426d863c3351e76033a8ef74e3bb7b04ba" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36532364" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class RegistrySecurity : System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistrySecurity extends System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistrySecurity" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegistrySecurity&#xA;Inherits NativeObjectSecurity" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegistrySecurity sealed : System::Security::AccessControl::NativeObjectSecurity" />
  <TypeSignature Language="F#" Value="type RegistrySecurity = class&#xA;    inherit NativeObjectSecurity" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.NativeObjectSecurity</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>레지스트리 키에 대한 Windows 액세스 제어 보안을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Security.AccessControl.RegistrySecurity> 개체 레지스트리 키에 대 한 액세스 권한을 지정 하 고 액세스 시도 감사 하는 방법을 지정 합니다. 레지스트리 키에 대 한 액세스 권한을 규칙 각 액세스 규칙으로 표시 됩니다는 <xref:System.Security.AccessControl.RegistryAccessRule> 개체입니다. 각 감사 규칙으로 표시 됩니다는 <xref:System.Security.AccessControl.RegistryAuditRule> 개체입니다.  
  
 각 보안 개체에 최대 한 임의 액세스 제어 목록 (DACL) 보안된 개체 및 최대 하나의 시스템 액세스 제어 목록 (SACL) 되는 액세스를 지정 하는 액세스를 제어 하는 기본 Windows 보안 시스템을 미러링합니다. 시도 감사 합니다. DACL과 SACL는 액세스 및 사용자 및 그룹에 대 한 감사를 지정 하는 액세스 제어 항목 (ACE)의 목록을 정렬 하는 데 사용 됩니다. A <xref:System.Security.AccessControl.RegistryAccessRule> 또는 <xref:System.Security.AccessControl.RegistryAuditRule> 개체는 둘 이상의 ACE를 나타낼 수 있습니다.  
  
> [!NOTE]
>  Windows 액세스 제어 보안 레지스트리 키에만 적용할 수 있습니다. 키에 저장 된 개별 키/값 쌍에 적용할 수 없습니다.  
  
 <xref:System.Security.AccessControl.RegistrySecurity>, <xref:System.Security.AccessControl.RegistryAccessRule>, 및 <xref:System.Security.AccessControl.RegistryAuditRule> 클래스 Acl 및 Ace의 구현 세부 정보를 숨깁니다. 17 다양 한 ACE 유형 및 상속 및 액세스 권한의 전파를 올바르게 유지 관리의 복잡성을 무시할 수 있습니다. 이러한 개체는 또한 다음과 같은 일반적인 액세스 제어 오류를 방지 하기 위해 설계 되었습니다.  
  
-   Null의 DACL을 사용 하 여 보안 설명자 만들기 DACL에 null 참조를 모든 사용자를 서비스 거부 공격을 잠재적으로 만드는 개체에 액세스 규칙을 추가할 수 있습니다. 새 <xref:System.Security.AccessControl.RegistrySecurity> 개체는 항상 빈 DACL에서 모든 사용자에 대 한 모든 액세스를 거부로 시작 합니다.  
  
-   Ace의 정식 순서 위반입니다. DACL 목록의 ACE가 정식 순서 대로 유지 되지 않을, 사용자가 실수로에 부여 될 수 액세스 보안된 개체입니다. 예를 들어, 거부 된 액세스 권한은 항상 액세스 권한이 허용된 하기 전에 나타나야 합니다. <xref:System.Security.AccessControl.RegistrySecurity> 개체는 내부적으로 올바른 순서를 유지합니다.  
  
-   리소스 관리자 컨트롤 에서만 있어야 하 고 보안 설명자 플래그를 조작 합니다.  
  
-   ACE 플래그의 잘못 된 조합 만드는 중입니다.  
  
-   상속 된 Ace를 조작 합니다. 상속 및 전파 리소스 관리자의 액세스 및 감사 규칙을 적용 한 변경 내용에 대 한 응답에 의해 처리 됩니다.  
  
-   Acl에 의미 없는 Ace를 삽입 합니다.  
  
 유일한 기능은.NET 보안 개체에서 지원 되지 않습니다에 다음과 같은 응용 프로그램 개발자의 과반수가 피해 야 하는 위험한 작업입니다.  
  
-   리소스 관리자가 정상적으로 수행 하는 하위 수준 작업입니다.  
  
-   추가 또는 정식 순서를 유지 하지 않는 방법으로 액세스 제어 항목을 제거 합니다.  
  
 Windows 레지스트리 키에 대 한 액세스 제어 보안을 수정 하려면 사용 하 여는 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> 가져올 메서드를는 <xref:System.Security.AccessControl.RegistrySecurity> 개체입니다. 추가 하 고 규칙을 제거 하 여 보안 개체를 수정 하 고 사용 하 여는 <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> 메서드를 다시 연결 합니다.  
  
> [!IMPORTANT]
>  변경 내용은 한 <xref:System.Security.AccessControl.RegistrySecurity> 개체를 호출 하기 전에 레지스트리 키의 액세스 수준을 적용 되지 않습니다는 <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> 레지스트리 키로 변경 된 보안 개체를 지정 하는 메서드.  
  
 액세스 제어 보안을 한 레지스트리 키에서 다른 위치로 복사를 사용 하 여는 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> 가져올 메서드를 한 <xref:System.Security.AccessControl.RegistrySecurity> 첫 번째 레지스트리 키에 대 한 액세스 및 감사 규칙을 나타내는 개체를 사용 하 여는 <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> 메서드를 이러한 규칙을 지정 하는 두 번째 레지스트리 키입니다. 규칙으로 두 번째 레지스트리 키를 할당할 수도 있습니다는 <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A?displayProperty=nameWithType> 또는 <xref:Microsoft.Win32.RegistryKey.CreateSubKey%2A?displayProperty=nameWithType> 를 받는 메서드에 <xref:System.Security.AccessControl.RegistrySecurity> 개체 매개 변수입니다.  
  
 보안 설명자 정의 언어 (SDDL)에 투자 사용자가 사용할 수는 <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> 레지스트리 키에 대 한 액세스 규칙을 설정 하는 메서드 및 <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> 메서드 SDDL 형식의 액세스 규칙을 나타내는 문자열입니다. 새로운 개발에는 권장 되지 않습니다.  
  
   
  
## Examples  
 이 섹션에는 두 가지 코드 예제가 포함 되어 있습니다. 첫 번째 예제에서는 추가 및 제거를 하면 어떻게 호환 규칙 병합 하 고 두 번째에 표시 된 상속 및 전파 플래그 추가 삭제 규칙의 영향을 줄 합니다.  
  
 예제 1  
  
 다음 코드 예제는 방법을 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> 메서드 호환 되는 규칙에서 권한을 제거 방식 <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> 메서드 호환 규칙에 대 한 권한을 병합 합니다.  
  
 이 예에서는 만듭니다는 <xref:System.Security.AccessControl.RegistrySecurity> 개체를 추가 하는 현재 사용자를 허용 하는 규칙 <xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType> 권한. 예제 사용자에 게 부여 하는 규칙을 만든 후 <xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType>, 동일한 상속 및 첫 번째 규칙을 사용 하 여 전파 권한을 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> 에서이 새 규칙을 제거 하는 메서드는 <xref:System.Security.AccessControl.RegistrySecurity> 개체입니다. <xref:System.Security.AccessControl.RegistryRights.SetValue> 구성 요소는 <xref:System.Security.AccessControl.RegistryRights.ReadKey>이므로 호환 되는 규칙에서 제거 됩니다. 규칙에는 <xref:System.Security.AccessControl.RegistrySecurity> 개체의 나머지 구성 요소를 함께 표시 됩니다 <xref:System.Security.AccessControl.RegistryRights.ReadKey>합니다.  
  
 다음 예제에서는 코드에서 호출는 <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> 병합 하는 메서드는 <xref:System.Security.AccessControl.RegistryRights.SetValue> 의 규칙으로 다시 마우스 오른쪽 단추로 <xref:System.Security.AccessControl.RegistrySecurity> 개체입니다.  
  
> [!NOTE]
>  이 예제에 대 한 보안 개체를 연결 하지 않습니다는 <xref:Microsoft.Win32.RegistryKey> 개체입니다. 이 섹션의 두 번째 예에서는 보안 개체를 연결의 마찬가지로 예제 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> 및 <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>합니다.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 예제 2  
  
 다음 코드 예제에서는 상속 및 전파 액세스 규칙을 보여 줍니다. 이 예에서는 만듭니다는 <xref:System.Security.AccessControl.RegistrySecurity> 개체을 다음을 추가 하는 두 개의 규칙은 <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> 플래그입니다. 첫 번째 규칙에 없는 전파 플래그는 있지만 두 번째에 <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> 및 <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>합니다.  
  
 프로그램에 규칙을 표시는 <xref:System.Security.AccessControl.RegistrySecurity> 개체, 한 다음 사용 하는 <xref:System.Security.AccessControl.RegistrySecurity> 하위 키를 만들 개체입니다. 프로그램을 하위 키와 손자 하위 키를 자식을 만들고 각 하위 키에 대 한 보안을 표시 합니다. 마지막으로, 프로그램 테스트 키를 삭제 합니다.  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistrySecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistrySecurity();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>기본값을 사용하여 <see cref="T:System.Security.AccessControl.RegistrySecurity" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 새 <xref:System.Security.AccessControl.RegistrySecurity> 개체는 항상 모든 사용자에 대 한 모든 액세스를 거부 하는 빈 임의 액세스 목록 (DACL)으로 시작 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRightType">
      <MemberSignature Language="C#" Value="public override Type AccessRightType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRightType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AccessRightType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRightType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRightType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRightType : Type" Usage="System.Security.AccessControl.RegistrySecurity.AccessRightType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Security.AccessControl.RegistrySecurity" /> 클래스가 액세스 권한을 나타내는 데 사용하는 열거형을 가져옵니다.</summary>
        <value>
          <see cref="T:System.Type" /> 열거형을 나타내는 <see cref="T:System.Security.AccessControl.RegistryRights" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 파생 된 클래스는 <xref:System.Security.AccessControl.ObjectSecurity> 재정의 클래스는 <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> 속성 및 액세스 권한을 나타내는 데 사용 하는 형식 반환 합니다. 배열 또는 여러 유형의 보안 개체를 포함 하는 컬렉션으로 작업할 때 각 보안 개체에 사용할 올바른 열거형 형식을 확인 하려면이 속성을 사용 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AccessRule AccessRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AccessRule ^ AccessRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="override this.AccessRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.AccessRule" Usage="registrySecurity.AccessRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AccessRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identityReference">규칙을 적용할 사용자 또는 그룹을 식별하는 <see cref="T:System.Security.Principal.IdentityReference" />입니다.</param>
        <param name="accessMask">정수로 캐스팅된 허용하거나 거부할 액세스 권한을 지정하는 <see cref="T:System.Security.AccessControl.RegistryRights" /> 값의 비트 조합입니다.</param>
        <param name="isInherited">규칙의 상속 여부를 지정하는 부울 값입니다.</param>
        <param name="inheritanceFlags">규칙이 하위 키에 상속되는 방식을 지정하는 <see cref="T:System.Security.AccessControl.InheritanceFlags" /> 값의 비트 조합입니다.</param>
        <param name="propagationFlags">규칙이 하위 키에 상속되는 방식을 수정하는 <see cref="T:System.Security.AccessControl.PropagationFlags" /> 값의 비트 조합입니다. <c>inheritanceFlags</c>의 값이 <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />이면 의미가 없습니다.</param>
        <param name="type">권한 허용 여부를 지정하는 <see cref="T:System.Security.AccessControl.AccessControlType" /> 값 중 하나입니다.</param>
        <summary>지정된 액세스 권한, 액세스 제어 및 플래그로 지정한 사용자의 새 액세스 제어 규칙을 만듭니다.</summary>
        <returns>지정한 사용자의 지정한 권한을 나타내는 <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 권장 하는 액세스 제어 규칙을 만드는 방법은의 생성자를 사용 하 여 <xref:System.Security.AccessControl.RegistryAccessRule> 클래스입니다.  
  
> [!NOTE]
>  지정할 수는 있지만 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> 플래그, 그렇게 하는 이유가 없습니다. 액세스 제어를 위해 하위 키에서 이름/값 쌍은 별개의 개체 되지 않습니다. 이름/값 쌍에 대 한 액세스 권한은 하위 키의 권한에 의해 제어 됩니다. 또한 모든 하위 키 컨테이너는 (즉, 이러한를 포함할 수는 다른 하위 키) 하 여 영향을 받지 않습니다는 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> 플래그입니다. 마지막으로 지정 하는 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> 플래그, 규칙의 유지 관리를 호환 가능한 규칙의 일반 조합을 사용 하 여 충돌 하므로 불필요 하 게 복잡해 집니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" /> 또는 <paramref name="type" />에 잘못된 값을 지정하는 경우</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identityReference" />가 <see langword="null" />인 경우  -또는-  <paramref name="accessMask" />가 0입니다.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identityReference" />의 형식이 <see cref="T:System.Security.Principal.SecurityIdentifier" />도 아니고 <see cref="T:System.Security.Principal.NTAccount" />와 같이 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 형식으로 변환할 수 있는 형식도 아닌 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleType">
      <MemberSignature Language="C#" Value="public override Type AccessRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AccessRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRuleType : Type" Usage="System.Security.AccessControl.RegistrySecurity.AccessRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Security.AccessControl.RegistrySecurity" /> 클래스가 액세스 규칙을 나타내는 데 사용하는 형식을 가져옵니다.</summary>
        <value>
          <see cref="T:System.Type" /> 클래스를 나타내는 <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 파생 된 클래스는 <xref:System.Security.AccessControl.ObjectSecurity> 재정의 클래스는 <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> 속성과 액세스 규칙을 나타내는 데 사용 하는 형식 반환 합니다. 배열 또는 여러 유형의 보안 개체를 포함 하는 컬렉션으로 작업할 때 각 보안 개체에 사용할 올바른 액세스 규칙을 확인 하려면이 속성을 사용 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccessRule">
      <MemberSignature Language="C#" Value="public void AddAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAccessRule (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAccessRule : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.AddAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">추가할 액세스 제어 규칙입니다.</param>
        <summary>새 규칙을 병합할 수 있는 일치하는 액세스 제어를 검색합니다. 아무 것도 발견되지 않으면 새 규칙을 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> 메서드를 사용 하 여 동일한 사용자 또는 그룹 및 동일한 규칙에 대 한 검색 <xref:System.Security.AccessControl.AccessControlType> 으로 `rule`합니다. 발견 되 면 `rule` 추가 됩니다. 일치 하는 규칙 발견 되 면 권한에 `rule` 기존 규칙과 함께 병합 됩니다.  
  
 다른 상속 플래그를 있는 경우에 규칙을 병합할 수 없습니다. 예를 들어, 사용자가 읽기 권한이 상속 플래그 없이 수 및 <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> 하위 키에 대 한 상속을 사용 하 여 사용자 쓰기 액세스를 제공 하는 규칙을 추가 하는 데 사용 됩니다 (<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>), 두 개의 규칙을 병합할 수 없습니다.  
  
 다른 규칙은 <xref:System.Security.AccessControl.AccessControlType> 값 병합 되지 않습니다.  
  
 규칙 권한을 가장 실용적인 방식으로 표현합니다. 예를 들어, 사용자에 게 <xref:System.Security.AccessControl.RegistryRights.QueryValues>, <xref:System.Security.AccessControl.RegistryRights.Notify> 및 <xref:System.Security.AccessControl.RegistryRights.ReadPermissions> 권한 및 사용자 추가 허용 하는 규칙 <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> 권한, 사용자의 모든 구성 요소에 <xref:System.Security.AccessControl.RegistryRights.ReadKey> 권한. 포함 하는 규칙에 표시 됩니다는 사용자의 권한을 쿼리 하는 경우 <xref:System.Security.AccessControl.RegistryRights.ReadKey> 권한. 마찬가지로, 제거 하는 경우 <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> 권한, 다른 구성 요소가 <xref:System.Security.AccessControl.RegistryRights.ReadKey> 권한 다시 나타납니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 레지스트리 액세스 규칙을 만들고에 추가 <xref:System.Security.AccessControl.RegistrySecurity> 을 보여 주는 개체 권한을 허용 및 거부 하는 규칙에 동일한의 호환 규칙 동안 별도로 유지 방법을 kind 병합 됩니다.  
  
> [!NOTE]
>  이 예제에 대 한 보안 개체를 연결 하지 않습니다는 <xref:Microsoft.Win32.RegistryKey> 개체입니다. 보안 개체를 연결 하는 예제에 나와 있습니다 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> 및 <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>합니다.  
  
 상속 및 전파 플래그를 보여 주는 코드 예제에서 확인할 수 있습니다는 <xref:System.Security.AccessControl.RegistryAccessRule> 클래스입니다.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="AddAuditRule">
      <MemberSignature Language="C#" Value="public void AddAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAuditRule (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAuditRule(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAuditRule : System.Security.AccessControl.RegistryAuditRule -&gt; unit" Usage="registrySecurity.AddAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">추가할 감사 규칙입니다. 이 규칙에서 지정하는 사용자가 검색을 결정합니다.</param>
        <summary>새 규칙을 병합할 수 있는 감사 규칙을 검색합니다. 아무 것도 발견되지 않으면 새 규칙을 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> 같은 사용자 또는 그룹을 사용 하 여 규칙에 대 한 메서드 검색 `rule`합니다. 발견 되 면 `rule` 추가 됩니다. 일치 하는 규칙 발견 되 면 플래그에 `rule` 기존 규칙에 병합 됩니다.  
  
 다른 상속 플래그를 있는 경우에 규칙을 병합할 수 없습니다. 예를 들어 키를 쓰려고 하면 실패 한 경우는, 상속 플래그 없이 특정 사용자에 대 한 감사 및 <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> 사용 권한을 변경 하려면 실패 한 시도 대 한 상속 하지만 동일한 사용자에 대해 감사할 되는지 지정 하는 규칙을 추가 하는 데 사용 됩니다 하위 키 (<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType>), 두 개의 규칙을 병합할 수 없습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AuditRule AuditRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AuditRule ^ AuditRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberSignature Language="F#" Value="override this.AuditRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AuditFlags -&gt; System.Security.AccessControl.AuditRule" Usage="registrySecurity.AuditRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AuditRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identityReference">규칙을 적용할 사용자 또는 그룹을 식별하는 <see cref="T:System.Security.Principal.IdentityReference" />입니다.</param>
        <param name="accessMask">정수로 캐스팅된 감사할 액세스 권한을 지정하는 <see cref="T:System.Security.AccessControl.RegistryRights" /> 값의 비트 조합입니다.</param>
        <param name="isInherited">규칙의 상속 여부를 지정하는 부울 값입니다.</param>
        <param name="inheritanceFlags">규칙이 하위 키에 상속되는 방식을 지정하는 <see cref="T:System.Security.AccessControl.InheritanceFlags" /> 값의 비트 조합입니다.</param>
        <param name="propagationFlags">규칙이 하위 키에 상속되는 방식을 수정하는 <see cref="T:System.Security.AccessControl.PropagationFlags" /> 값의 비트 조합입니다. <c>inheritanceFlags</c>의 값이 <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />이면 의미가 없습니다.</param>
        <param name="flags">성공 또는 실패를 감사할지 아니면 둘 다 감사할지를 지정하는 <see cref="T:System.Security.AccessControl.AuditFlags" /> 값의 비트 조합입니다.</param>
        <summary>새 감사 규칙을 만들어 규칙을 적용할 사용자, 감사할 액세스 권한, 규칙의 상속과 전파 및 감사 규칙을 트리거할 결과를 지정합니다.</summary>
        <returns>지정한 플래그를 사용하여 지정한 사용자의 지정한 감사 규칙을 나타내는 <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> 개체입니다. 메서드의 반환 형식은 기본 클래스 <see cref="T:System.Security.AccessControl.AuditRule" />이지만 반환 값은 파생 클래스로 안전하게 캐스팅할 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 권장 하는 감사 규칙을 만드는 방법은의 생성자를 사용 하 여 <xref:System.Security.AccessControl.RegistryAuditRule> 클래스입니다.  
  
> [!NOTE]
>  지정할 수는 있지만 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> 플래그, 그렇게 하는 이유가 없습니다. 감사 제어를 위해 하위 키에서 이름/값 쌍은 하지 별개의 개체입니다. 이름/값 쌍에 대 한 감사 권한은 하위 키의 권한에 의해 제어 됩니다. 또한 모든 하위 키 컨테이너는 (즉, 이러한를 포함할 수는 다른 하위 키) 하 여 영향을 받지 않습니다는 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> 플래그입니다. 마지막으로 지정 하는 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> 플래그, 규칙의 유지 관리를 호환 가능한 규칙의 일반 조합을 사용 하 여 충돌 하므로 불필요 하 게 복잡해 집니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" /> 또는 <paramref name="flags" />에 잘못된 값을 지정하는 경우</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identityReference" />가 <see langword="null" />인 경우  -또는-  <paramref name="accessMask" />가 0입니다.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identityReference" />의 형식이 <see cref="T:System.Security.Principal.SecurityIdentifier" />도 아니고 <see cref="T:System.Security.Principal.NTAccount" />와 같이 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 형식으로 변환할 수 있는 형식도 아닌 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleType">
      <MemberSignature Language="C#" Value="public override Type AuditRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AuditRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AuditRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AuditRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AuditRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AuditRuleType : Type" Usage="System.Security.AccessControl.RegistrySecurity.AuditRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Security.AccessControl.RegistrySecurity" /> 클래스에서 감사 규칙을 나타내는 데 사용하는 형식을 가져옵니다.</summary>
        <value>
          <see cref="T:System.Type" /> 클래스를 나타내는 <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 파생 된 클래스는 <xref:System.Security.AccessControl.ObjectSecurity> 재정의 클래스는 <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> 속성 및 감사 권한을 나타내는 데 사용 하는 형식 반환 합니다. 배열 또는 여러 유형의 보안 개체를 포함 하는 컬렉션으로 작업할 때 각 보안 개체에 사용할 올바른 감사 규칙을 확인 하려면이 속성을 사용 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRule">
      <MemberSignature Language="C#" Value="public bool RemoveAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAccessRule (rule As RegistryAccessRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRule : System.Security.AccessControl.RegistryAccessRule -&gt; bool" Usage="registrySecurity.RemoveAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">검색할 사용자 및 <see cref="T:System.Security.AccessControl.RegistryAccessRule" />을 비롯하여 일치하는 규칙(있다면)과 호환되어야 하는 상속 및 전파 플래그 집합을 지정하는 <see cref="T:System.Security.AccessControl.AccessControlType" />입니다. 발견된 경우 호환되는 규칙에서 제거할 권한을 지정합니다.</param>
        <summary>지정한 액세스 규칙과 사용자 및 <see cref="T:System.Security.AccessControl.AccessControlType" />(허용 또는 거부)이 같고 상속 및 전파 플래그가 호환되는 액세스 제어 규칙을 검색합니다. 그러한 규칙이 있으면 지정한 액세스 규칙에 포함된 권한이 규칙에서 제거됩니다.</summary>
        <returns>호환 가능한 규칙이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 <xref:System.Security.AccessControl.RegistrySecurity> 된 동일한 사용자와 동일한 규칙에 대 한 검색 <xref:System.Security.AccessControl.AccessControlType> 값 `rule`합니다. 그러한 규칙이 아무 작업도 및 메서드 반환 `false`합니다. 일치 하는 규칙 발견 되 면 해당 상속 및 호환성 플래그에 지정 된 플래그와의 호환성에 대 한 확인 `rule`합니다. 호환 가능한 규칙이 아무 작업도 및 메서드 반환 `false`합니다. 에 지정 된 호환 플래그와 함께 규칙이 없으면 권한은 `rule` 호환 되는 규칙에서 제거 됩니다 메서드에서 반환 `true`합니다. 경우 `rule` 아무 작업도 수행 해당 권리에 대해, 호환 되는 규칙에 포함 되지 않은 권한을 지정 합니다. 현재에서 전체 규칙을 제거할 모든 권리를 호환 되는 규칙에서 제거 하면 <xref:System.Security.AccessControl.RegistrySecurity> 개체입니다.  
  
   
  
## Examples  
 다음 코드 예제는 방법을 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> 메서드 호환 되는 규칙에서 권한을 제거 방식 <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> 메서드 호환 규칙에 대 한 권한을 병합 합니다.  
  
 이 예에서는 만듭니다는 <xref:System.Security.AccessControl.RegistrySecurity> 개체를 추가 하는 현재 사용자를 허용 하는 규칙 <xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=nameWithType> 권한. 예제 사용자에 게 부여 하는 규칙을 만든 후 <xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=nameWithType>, 동일한 상속 및 첫 번째 규칙을 사용 하 여 전파 권한을 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> 에서이 새 규칙을 제거 하는 메서드는 <xref:System.Security.AccessControl.RegistrySecurity> 개체입니다. <xref:System.Security.AccessControl.RegistryRights.SetValue> 구성 요소는 <xref:System.Security.AccessControl.RegistryRights.ReadKey>이므로 호환 되는 규칙에서 제거 됩니다. 규칙에는 <xref:System.Security.AccessControl.RegistrySecurity> 개체의 나머지 구성 요소를 함께 표시 됩니다 <xref:System.Security.AccessControl.RegistryRights.ReadKey>합니다.  
  
 다음 예제에서는 코드에서 호출는 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> 병합 하는 메서드는 <xref:System.Security.AccessControl.RegistryRights.SetValue> 의 규칙으로 다시 마우스 오른쪽 단추로 <xref:System.Security.AccessControl.RegistrySecurity> 개체입니다.  
  
> [!NOTE]
>  이 예제에 대 한 보안 개체를 연결 하지 않습니다는 <xref:Microsoft.Win32.RegistryKey> 개체입니다. 이 섹션의 두 번째 예에서는 보안 개체를 연결의 마찬가지로 예제 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>합니다.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleAll (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleAll(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleAll (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleAll(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRuleAll : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.RemoveAccessRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">검색할 사용자 및 <see cref="T:System.Security.AccessControl.RegistryAccessRule" />을 지정하는 <see cref="T:System.Security.AccessControl.AccessControlType" />입니다. 이 규칙에서 지정한 모든 권한, 상속 플래그 또는 전파 플래그는 무시됩니다.</param>
        <summary>지정한 규칙과 사용자 및 <see cref="T:System.Security.AccessControl.AccessControlType" />(허용 또는 거부)이 같은 모든 액세스 제어 규칙을 검색하여 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 <xref:System.Security.AccessControl.RegistrySecurity> 동일한 사용자와 동일한 규칙에 대 한 검색 <xref:System.Security.AccessControl.AccessControlType> 값 `rule`합니다. 모든 권한, 상속 플래그, 또는로 지정 된 전파 플래그 `rule` 이 검색을 수행할 때 무시 됩니다. 일치 하는 규칙 발견 되 면 아무 작업도 수행 합니다.  
  
 예를 들어 사용자는 다른 상속 전파 플래그와 다양 한 권한을 허용 하는 여러 규칙을 제거할 수 있습니다 이러한 모든 규칙을 만들어서는 <xref:System.Security.AccessControl.RegistryAccessRule> 사용자를 지정 하는 개체 및 <xref:System.Security.AccessControl.AccessControlType.Allow?displayProperty=nameWithType>, 임의의 권한 및 플래그를 사용 하 여 해당 규칙을 전달 하는 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> 사용자와 일치 하는 모든 규칙을 제거 하는 메서드 및 <xref:System.Security.AccessControl.AccessControlType>, 권한 및 플래그를 무시 합니다.  
  
 이 예에서는 만듭니다는 <xref:System.Security.AccessControl.RegistrySecurity> 개체를 허용 하 고 다른 상속 및 전파 플래그와 함께 현재 사용자에 대 한 다양 한 권한을 거부 하는 규칙을 추가 합니다. 현재 사용자가 소유권을 허용 하 고 해당 규칙을 전달 하는 새 규칙을 만듭니다는 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> 메서드 액세스를 허용 하는 두 개의 규칙을 제거 합니다.  
  
> [!NOTE]
>  이 예제에 대 한 보안 개체를 연결 하지 않습니다는 <xref:Microsoft.Win32.RegistryKey> 개체입니다. 참조는 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> 메서드 및 <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> 메서드.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleSpecific (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleSpecific(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleSpecific (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleSpecific(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRuleSpecific : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.RemoveAccessRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">제거할 <see cref="T:System.Security.AccessControl.RegistryAccessRule" />입니다.</param>
        <summary>지정한 규칙과 정확히 일치하는 액세스 제어 규칙을 검색하여 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 정확히 일치 하는 규칙을 제거할 `rule` 모든 세부 정보에 플래그를 포함 합니다. 동일한 사용자와 다른 규칙 및 <xref:System.Security.AccessControl.AccessControlType> 영향을 받지 않습니다.  
  
> [!IMPORTANT]
>  규칙을 나타내는 하나 또는 이상의 기본 액세스 제어 항목 (ACE), 이러한 항목은 분할 되거나 사용자에 대 한 액세스 보안 규칙을 수정 하는 경우 필요에 따라 결합 합니다. 따라서 규칙을 더 이상 존재 하 여 사용할 경우 추가 될 때 특정 폼에는 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> 메서드는 제거할 수 없습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> 메서드 정확 하 게 일치 하는 경우에 규칙을 제거 합니다.  
  
 이 예제에서는 서로 다른 권한을 허용 하는 두 개의 규칙을 만듭니다. 규칙은 호환 가능한 상속 및 전파 플래그 없으므로 첫 번째와 병합 하는 경우 두 번째 규칙이 추가 됩니다. 예제에서는 호출은 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> 첫 번째 규칙을 지정 하는 메서드를 하지만 규칙 병합 되므로 일치 하는 규칙이 있습니다. 이 예에서는 다음 호출에서 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> 결합 된 규칙 및 마지막으로 호출에서 두 번째 규칙 제거 메서드는 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> 첫 번째 규칙을 제거 하는 메서드.  
  
> [!NOTE]
>  이 예제에 대 한 보안 개체를 연결 하지 않습니다는 <xref:Microsoft.Win32.RegistryKey> 개체입니다. 참조는 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> 메서드 및 <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> 메서드.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRule">
      <MemberSignature Language="C#" Value="public bool RemoveAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAuditRule (rule As RegistryAuditRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAuditRule(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRule : System.Security.AccessControl.RegistryAuditRule -&gt; bool" Usage="registrySecurity.RemoveAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">검색할 사용자 및 일치하는 규칙(있다면)이 호환되어야 하는 상속 및 전파 플래그 집합을 지정하는 <see cref="T:System.Security.AccessControl.RegistryAuditRule" />입니다. 발견된 경우 호환되는 규칙에서 제거할 권한을 지정합니다.</param>
        <summary>지정한 규칙과 사용자가 같고 상속 및 전파 플래그가 호환되는 감사 제어 규칙을 검색합니다. 호환되는 규칙이 있으면 지정한 규칙에 포함된 권한이 규칙에서 제거됩니다.</summary>
        <returns>호환 가능한 규칙이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 <xref:System.Security.AccessControl.RegistrySecurity> 사용자와 동일한 사용자가 감사 규칙에 대 한 검색 `rule`합니다. 그러한 규칙이 아무 작업도 및 메서드 반환 `false`합니다. 일치 하는 규칙 발견 되 면 해당 상속 및 호환성 플래그에 지정 된 플래그와의 호환성에 대 한 확인 `rule`합니다. 호환 가능한 규칙이 아무 작업도 및 메서드 반환 `false`합니다. 에 지정 된 호환 플래그와 함께 규칙이 없으면 권한은 `rule` 호환 되는 규칙에서 제거 됩니다 메서드에서 반환 `true`합니다. 경우 `rule` 아무 작업도 수행 해당 권리에 대해, 호환 되는 규칙에 포함 되지 않은 권한을 지정 합니다. 현재에서 전체 규칙을 제거할 모든 권리를 호환 되는 규칙에서 제거 하면 <xref:System.Security.AccessControl.RegistrySecurity> 개체입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleAll (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleAll(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleAll (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleAll(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleAll : System.Security.AccessControl.RegistryAuditRule -&gt; unit" Usage="registrySecurity.RemoveAuditRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">검색할 사용자를 지정하는 <see cref="T:System.Security.AccessControl.RegistryAuditRule" />입니다. 이 규칙에서 지정한 모든 권한, 상속 플래그 또는 전파 플래그는 무시됩니다.</param>
        <summary>지정한 규칙과 같은 사용자를 가진 모든 감사 규칙을 검색하고 해당 규칙이 있을 경우 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 <xref:System.Security.AccessControl.RegistrySecurity> 는 동일한 사용자로 포함 하는 감사 규칙에 대 한 검색 `rule`합니다. 모든 권한, 상속 플래그, 또는로 지정 된 전파 플래그 `rule` 이 검색을 수행할 때 무시 됩니다. 일치 하는 규칙 발견 되 면 아무 작업도 수행 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleSpecific (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleSpecific(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleSpecific (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleSpecific(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleSpecific : System.Security.AccessControl.RegistryAuditRule -&gt; unit" Usage="registrySecurity.RemoveAuditRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">제거할 <see cref="T:System.Security.AccessControl.RegistryAuditRule" />입니다.</param>
        <summary>지정한 규칙과 정확히 일치하는 감사 규칙을 검색하여 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 정확히 일치 하는 규칙을 제거할 `rule` 모든 세부 정보에 플래그를 포함 합니다. 동일한 사용자에 대 한 다른 감사 규칙의 영향을 받지 않습니다.  
  
> [!IMPORTANT]
>  규칙을 나타내는 하나 또는 이상의 기본 액세스 제어 항목 (ACE), 이러한 항목은 분할 되거나 사용자에 대 한 감사 보안 규칙을 수정 하는 경우 필요에 따라 결합 합니다. 따라서 규칙을 더 이상 존재 하 여 사용할 경우 추가 될 때 특정 폼에는 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific%2A> 메서드는 제거할 수 없습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="ResetAccessRule">
      <MemberSignature Language="C#" Value="public void ResetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetAccessRule (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.ResetAccessRule : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.ResetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">추가할 <see cref="T:System.Security.AccessControl.RegistryAccessRule" />입니다. 이 규칙에서 지정하는 사용자가 이 규칙이 추가되기 전에 제거할 규칙을 결정합니다.</param>
        <summary>
          <see cref="T:System.Security.AccessControl.AccessControlType" />과 상관없이 지정한 규칙과 사용자가 같은 모든 액세스 제어 규칙을 제거한 다음 지정한 규칙을 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자가 지정한 규칙과 일치 하는 액세스 규칙이 없으면 없으면 `rule` 추가 됩니다.  
  
   
  
## Examples  
 다음 코드 예제는 방법을 <xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A> 메서드는 일치 항목에 대해 지정 된 규칙과 일치 하는 사용자에 대 한 모든 규칙을 대체 합니다.  
  
 이 예에서는 만듭니다는 <xref:System.Security.AccessControl.RegistrySecurity> 개체를 허용 하 고 다른 상속 및 전파 플래그와 함께 현재 사용자에 대 한 다양 한 권한을 거부 하는 규칙을 추가 합니다. 현재 사용자 키를 읽을 수만 허용 하 여 사용 하 여 새 규칙을 만듭니다는 <xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A> 메서드를 사용자에 대 한 모든 규칙을 제거 하 고 새 규칙으로 바꿉니다.  
  
> [!NOTE]
>  이 예제에 대 한 보안 개체를 연결 하지 않습니다는 <xref:Microsoft.Win32.RegistryKey> 개체입니다. 참조는 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> 메서드 및 <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> 메서드.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.ResetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.ResetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.ResetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.ResetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccessRule">
      <MemberSignature Language="C#" Value="public void SetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAccessRule (rule As RegistryAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessRule(System::Security::AccessControl::RegistryAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAccessRule : System.Security.AccessControl.RegistryAccessRule -&gt; unit" Usage="registrySecurity.SetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">추가할 <see cref="T:System.Security.AccessControl.RegistryAccessRule" />입니다. 이 규칙의 사용자 및 <see cref="T:System.Security.AccessControl.AccessControlType" />은 이 규칙이 추가되기 전에 제거할 규칙을 결정합니다.</param>
        <summary>지정된 규칙과 사용자 및 <see cref="T:System.Security.AccessControl.AccessControlType" />(허용 또는 거부)이 같은 모든 액세스 제어 규칙을 제거한 다음 지정한 규칙을 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정 된 규칙의 경우 <xref:System.Security.AccessControl.AccessControlType.Allow>,이 방법의 효과 모두 제거 하는 <xref:System.Security.AccessControl.AccessControlType.Allow> 지정한 규칙으로 대체 하는 지정 된 사용자에 대 한 규칙입니다. 지정 된 규칙의 경우 <xref:System.Security.AccessControl.AccessControlType.Deny>모든 <xref:System.Security.AccessControl.AccessControlType.Deny> 지정된 된 사용자에 대 한 규칙은 지정 된 규칙으로 대체 됩니다.  
  
 있는 경우 규칙이 없으면 해당 사용자 및 <xref:System.Security.AccessControl.AccessControlType> 지정 된 규칙과 일치 `rule` 추가 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A> 메서드 모두 사용자와 일치 하는 모든 규칙을 제거 및 <xref:System.Security.AccessControl.AccessControlType> 의 `rule`권한 및 플래그를 무시 하 고 대체를 사용 하 여 `rule`합니다.  
  
 이 예에서는 만듭니다는 <xref:System.Security.AccessControl.RegistrySecurity> 개체를 허용 하 고 다른 상속 및 전파 플래그와 함께 현재 사용자에 대 한 다양 한 권한을 거부 하는 규칙을 추가 합니다. 현재 사용자 키를 읽을 수만 허용 하 여 사용 하 여 새 규칙을 만듭니다는 <xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A> 메서드 액세스를 허용 하는 두 개의 규칙을 제거 하 고 새 규칙으로 바꿉니다. 액세스를 거부 하는 규칙의 영향을 받지 않습니다.  
  
> [!NOTE]
>  이 예제에 대 한 보안 개체를 연결 하지 않습니다는 <xref:Microsoft.Win32.RegistryKey> 개체입니다. 참조는 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> 메서드 및 <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> 메서드.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.SetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.SetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.SetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.SetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAuditRule">
      <MemberSignature Language="C#" Value="public void SetAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAuditRule (rule As RegistryAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAuditRule(System::Security::AccessControl::RegistryAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAuditRule : System.Security.AccessControl.RegistryAuditRule -&gt; unit" Usage="registrySecurity.SetAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">추가할 <see cref="T:System.Security.AccessControl.RegistryAuditRule" />입니다. 이 규칙에서 지정하는 사용자가 이 규칙이 추가되기 전에 제거할 규칙을 결정합니다.</param>
        <summary>
          <see cref="T:System.Security.AccessControl.AuditFlags" /> 과 상관없이 지정한 규칙과 사용자가 같은 모든 감사 규칙을 제거한 다음 지정한 규칙을 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자가 지정한 규칙과 일치 하는 감사 규칙이 없으면 없으면 `rule` 추가 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
  </Members>
</Type>