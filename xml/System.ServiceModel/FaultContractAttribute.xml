<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="FaultContractAttribute.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73cd4428-9abd-4836-b1ef-ba70fe2e0b72580fa93e9a7d56a6e252da7977c1826741e78c93.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">580fa93e9a7d56a6e252da7977c1826741e78c93</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>Specifies one or more SOAP faults that are returned when a service operation encounters processing errors.</source>
          <target state="translated">서비스 작업에서 처리 오류가 발생하는 경우 반환되는 SOAP 오류를 하나 이상 지정합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>Mark an operation with the <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> attribute to declare one or more specific exception conditions that are added to the Web Service Description Language (WSDL) description of the service operation as explicit SOAP fault messages returned by the operation.</source>
          <target state="translated">서비스 작업의 WSDL(Web Service Description Language) 설명에 추가되는 하나 이상의 특정 예외 조건을 작업에서 반환하는 명시적 SOAP 오류 메시지로 선언하려면 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> 특성을 사용하여 작업을 표시하십시오.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>In all managed applications, processing errors are represented by <ph id="ph1">&lt;xref:System.Exception&gt;</ph> objects.</source>
          <target state="translated">관리되는 모든 응용 프로그램에서 처리 오류는 <ph id="ph1">&lt;xref:System.Exception&gt;</ph> 개체로 표시됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>In SOAP-based applications such as <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> applications, service methods communicate processing error information using SOAP fault messages.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> 응용 프로그램 같은 SOAP 기반 응용 프로그램의 경우 서비스 메서드는 SOAP 오류 메시지를 사용하여 처리 오류 정보와 통신합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>Because WCF applications execute under both types of error systems, any managed exception information that must be sent to the client must be converted from exceptions into SOAP faults.</source>
          <target state="translated">두 유형의 오류 시스템에서 WCF 응용 프로그램 실행, 되기 때문에 클라이언트에 보내야 하는 모든 관리 되는 예외 정보는 예외에서 SOAP 오류로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>You can use the default service exception behaviors, or you can explicitly control whether -- and how -- exceptions are mapped to fault messages.</source>
          <target state="translated">기본 서비스 예외 동작을 사용하거나, 오류 메시지에 예외 매핑 여부 및 방법을 명시적으로 제어할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>For an overview of exceptions and SOAP faults in WCF applications, see <bpt id="p1">[</bpt>Specifying and Handling Faults in Contracts and Services<ept id="p1">](~/docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md)</ept>.</source>
          <target state="translated">예외 및 WCF 응용 프로그램에서 SOAP 오류의 개요를 참조 하십시오. <bpt id="p1">[</bpt>지정 및 계약 및 서비스에서 처리 오류<ept id="p1">](~/docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>It is recommended that service operations use the <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> to formally specify all SOAP faults that a client can expect to receive in the normal course of an operation.</source>
          <target state="translated">서비스 작업에서 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph>를 사용하여 클라이언트가 정상적인 작업 중 받을 가능성이 있는 모든 SOAP 오류를 공식적으로 지정하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>It is also recommended that only that information a client must know is returned in a SOAP fault to minimize information disclosure.</source>
          <target state="translated">또한 클라이언트가 알아야 하는 정보만 SOAP 오류에 반환하여 정보 노출을 최소화하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.Action%2A&gt;</ph> property controls the action of the fault message.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.Action%2A&gt;</ph> 속성은 오류 메시지의 동작을 제어합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.DetailType%2A&gt;</ph> property gets the type of the detail object serialized in the fault message.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.DetailType%2A&gt;</ph> 속성은 오류 메시지에서 serialize된 세부 개체 형식을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.Name%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute.Namespace%2A&gt;</ph> properties control the name and namespace, respectively, of the fault message.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.Name%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute.Namespace%2A&gt;</ph> 속성은 오류 메시지의 이름과 네임스페이스를 각각 제어합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A&gt;</ph> indicates whether the fault message has a protection level specified, and if so, the <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> property controls that level of protection.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A&gt;</ph>은 오류 메시지에 보호 수준이 지정되어 있는지 여부를 나타냅니다. 보호 수준이 지정되어 있으면 <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> 속성이 해당 보호 수준을 제어합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>If a fault message carries information that is sensitive or can lead to security problems, it is strongly recommended that the <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> property be set.</source>
          <target state="translated">오류 메시지는 중요한 정보를 포함하거나 보안 문제를 일으킬 수 있으므로 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> 속성을 설정하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>If you set the <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> explicitly to either <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType&gt;</ph>, then you must use a binding with security enabled using the <ph id="ph4">&lt;xref:System.ServiceModel.SecurityMode?displayProperty=nameWithType&gt;</ph> property on the binding or an exception is thrown.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph>을 명시적으로 <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType&gt;</ph>으로 설정하면 바인딩의 <ph id="ph4">&lt;xref:System.ServiceModel.SecurityMode?displayProperty=nameWithType&gt;</ph> 속성을 사용하여 보안이 활성화된 바인딩을 사용해야 합니다. 그렇지 않으면 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>If you select a binding that enables security and you do not set the <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> property anywhere on the contract, all application data will be encrypted and signed.</source>
          <target state="translated">보안이 활성화된 바인딩을 선택하고 계약의 어떤 위치에서도 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> 속성을 설정하지 않으면, 모든 응용 프로그램 데이터가 암호화되거나 서명됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>If you select a binding that does not have security enabled (for example, the <ph id="ph1">&lt;xref:System.ServiceModel.BasicHttpBinding?displayProperty=nameWithType&gt;</ph> has security disabled by default), and the <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> is not explicitly set, then none of the application data will be protected.</source>
          <target state="translated">보안이 활성화되지 않은 바인딩(예: <ph id="ph1">&lt;xref:System.ServiceModel.BasicHttpBinding?displayProperty=nameWithType&gt;</ph>에서는 기본적으로 보안이 비활성화됨)을 선택하고 <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph>이 명시적으로 설정되지 않은 경우 응용 프로그램 데이터가 보호되지 않습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>For many scenarios setting <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph> for fault messages is sufficient.</source>
          <target state="translated">대부분의 시나리오에서 오류 메시지에 대해 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph>을 <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign&gt;</ph>으로 설정하면 충분합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>For more details, see <bpt id="p1">[</bpt>Understanding Protection Level<ept id="p1">](~/docs/framework/wcf/understanding-protection-level.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>보호 수준 이해<ept id="p1">](~/docs/framework/wcf/understanding-protection-level.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>To return a specified fault from an operation marked with <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph>, throw a <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> (where the type parameter is the serializable error information) when the managed exception occurs during the operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph>로 표시된 작업에서 지정된 오류를 반환하려면 작업 중에 관리되는 예외가 발생할 때 <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph>을 throw합니다. 여기서 형식 매개 변수는 serialize할 수 있는 오류 정보입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>WCF client applications surface the SOAP fault as the same type as was thrown in the client implementation -- that is, as a <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> (where the typeparameter is the serializable error information).</source>
          <target state="translated">즉, 클라이언트 구현에서 throw 된 것과 같은 형식으로 SOAP 오류는 WCF 클라이언트 응용 프로그램 화면으로 <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> (여기서는 typeparameter는 직렬화 가능 오류 정보).</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> can be used only to specify SOAP faults for two-way service operations and for asynchronous operation pairs; one-way operations do not support SOAP faults and therefore do not support <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph>는 양방향 서비스 작업과 비동기 작업 쌍에 대한 SOAP 오류를 지정하는 데만 사용할 수 있습니다. 단방향 작업은 SOAP 오류를 지원하지 않으므로 <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph>를 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>You can use any serializable type to convey error information.</source>
          <target state="translated">serialize할 수 있는 형식을 사용하여 오류 정보를 전달할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>The only restriction in this version of WCF is that types specified in a <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> must be serializable by the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">WCF의이 버전의 유일한 제한 사항은 형식은에 지정 되는 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> 으로 직렬화 해야는 <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>For the serialization support the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> provides, see <bpt id="p1">[</bpt>Data Contract Serializer<ept id="p1">](~/docs/framework/wcf/feature-details/data-contract-serializer.md)</ept>.</source>
          <target state="translated">serialization 지원에 대 한는 <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> 제공 참조 <bpt id="p1">[</bpt>데이터 계약 Serializer<ept id="p1">](~/docs/framework/wcf/feature-details/data-contract-serializer.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>For example, to specify that clients can expect a SOAP fault that contains an <ph id="ph1">&lt;xref:System.Int32&gt;</ph>, place that type parameter in the <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> on your service method.</source>
          <target state="translated">예를 들어 클라이언트가 <ph id="ph1">&lt;xref:System.Int32&gt;</ph>가 포함된 SOAP 오류를 예상할 수 있도록 지정하려면 해당 형식 매개 변수를 서비스 메서드의 <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph>에 배치합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>The following code examples do not set the <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute.Name%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.ServiceModel.FaultContractAttribute.Namespace%2A&gt;</ph> properties.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute.Name%2A&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.ServiceModel.FaultContractAttribute.Namespace%2A&gt;</ph> 속성을 설정하지 않습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>Then, in your service method, throw a new <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> where the type parameter is the type that contains the error information (in the above case, a <ph id="ph2">&lt;xref:System.Int32&gt;</ph>).</source>
          <target state="translated">그러면 서비스 메서드에서 새 <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph>을 throw합니다. 여기서 형식 매개 변수는 오류 정보가 포함된 형식(위의 경우 <ph id="ph2">&lt;xref:System.Int32&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>The preceding example is very basic; almost any information can be passed using an <ph id="ph1">&lt;xref:System.Int32?displayProperty=nameWithType&gt;</ph> code, so this detail type is not the most useful.</source>
          <target state="translated">앞의 예제는 매우 기본적이지만 <ph id="ph1">&lt;xref:System.Int32?displayProperty=nameWithType&gt;</ph> 코드를 사용하면 거의 모든 정보를 전달할 수 있으므로 이 세부 유형보다 유용한 경우가 많습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>Typically, WCF applications specify SOAP faults with detail types specific to the error information requirements of the client.</source>
          <target state="translated">일반적으로 WCF 응용 프로그램 클라이언트의 오류 정보 요구 사항에 적합 한 세부 유형을 사용 SOAP 오류를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>For a more complete example, see the Example section.</source>
          <target state="translated">자세한 예제는 예제 단원을 참조하십시오.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>If you specify a <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> where the type parameter is a <ph id="ph2">&lt;xref:System.String?displayProperty=nameWithType&gt;</ph>, the string value is assigned to the Detail property in the client application; clients cannot retrieve that string by calling the <ph id="ph3">&lt;xref:System.ServiceModel.FaultException%601.ToString%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">형식 매개 변수가 <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph>인 <ph id="ph2">&lt;xref:System.String?displayProperty=nameWithType&gt;</ph>을 지정하면 문자열 값이 클라이언트 응용 프로그램의 Detail 속성에 할당되므로 클라이언트가 <ph id="ph3">&lt;xref:System.ServiceModel.FaultException%601.ToString%2A?displayProperty=nameWithType&gt;</ph> 메서드를 호출하여 해당 문자열을 가져올 수 없습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>To have the string value returned when the client application calls <ph id="ph1">&lt;xref:System.Exception.ToString%2A?displayProperty=nameWithType&gt;</ph>, throw a <ph id="ph2">&lt;xref:System.ServiceModel.FaultException?displayProperty=nameWithType&gt;</ph> exception inside the operation and pass the string to the constructor.</source>
          <target state="translated">클라이언트 응용 프로그램이 <ph id="ph1">&lt;xref:System.Exception.ToString%2A?displayProperty=nameWithType&gt;</ph>을 호출할 때 문자열 값이 반환되도록 하려면 작업 내에서 <ph id="ph2">&lt;xref:System.ServiceModel.FaultException?displayProperty=nameWithType&gt;</ph> 예외를 throw하고 문자열을 생성자에 전달합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>To explicitly control the behavior of the application when an exception or <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> is thrown, implement the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType&gt;</ph> interface on an <ph id="ph3">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType&gt;</ph> or <ph id="ph5">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> and assign it to the <ph id="ph6">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">예외 또는 <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph>이 throw될 때 응용 프로그램의 동작을 명시적으로 제어하려면 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph4">&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType&gt;</ph>에서 <ph id="ph5">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> 인터페이스를 구현하고 이 인터페이스를 <ph id="ph6">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType&gt;</ph> 속성에 할당합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> enables you to explicitly control the SOAP fault that is generated and whether to send it back to the client.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> 클라이언트로 다시 보낼 것인지 및 생성 되는 SOAP 오류를 명시적으로 제어할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>To facilitate debugging, set the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> to <ph id="ph2">`true`</ph> in code or you can use the <ph id="ph3">&lt;xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> in an application configuration file.</source>
          <target state="translated">디버깅을 손쉽게 하려면 설정는 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> 를 <ph id="ph2">`true`</ph> 코드 또는 있습니다 사용할 수는 <ph id="ph3">&lt;xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> 응용 프로그램 구성 파일에 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>When enabled, the service automatically returns exception information to the caller.</source>
          <target state="translated">이 설정을 사용하면 서비스에서 자동으로 예외 정보를 호출자에게 반환합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>These faults appear to the client as <ph id="ph1">&lt;xref:System.ServiceModel.FaultException&gt;</ph> exceptions.</source>
          <target state="translated">이러한 오류는 클라이언트에 <ph id="ph1">&lt;xref:System.ServiceModel.FaultException&gt;</ph> 예외로 표시됩니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>Because managed exceptions can expose internal application information, setting <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> to <ph id="ph3">`true`</ph> can permit WCF clients to obtain information about internal service operation exceptions, including personally identifiable or other sensitive information.</source>
          <target state="translated">관리 되는 예외는 내부 응용 프로그램 정보를 노출할 수 있습니다, 때문에 설정 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> 를 <ph id="ph3">`true`</ph> WCF 클라이언트에서는 개인적으로 포함 하 여 내부 서비스 작업 예외에 대 한 정보를 얻을 수 있도록 허용할 수 식별할 수 있는 정보나 기타 중요 한 정보입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>Therefore, setting <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> to <ph id="ph3">`true`</ph> is only recommended as a way of temporarily debugging a service application.</source>
          <target state="translated">그러므로 임시로 서비스 응용 프로그램을 디버깅하려는 경우 권장되는 유일한 방법은 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph>를 <ph id="ph3">`true`</ph>로 설정하는 것입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>In addition, the WSDL for a method that returns unhandled managed exceptions in this way does not contain the contract for the <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">또한 이 방법으로 처리되지 않은 관리되는 예외를 반환하는 메서드의 WSDL에는 <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> 형식의 <ph id="ph2">&lt;xref:System.String&gt;</ph>에 대한 계약이 포함되지 않습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>Clients must expect the possibility of an unknown SOAP fault (returned to WCF clients as <ph id="ph1">&lt;xref:System.ServiceModel.FaultException?displayProperty=nameWithType&gt;</ph> objects) to obtain the debugging information properly.</source>
          <target state="translated">클라이언트는 알 수 없는 SOAP 오류의 가능성을 예상 해야 합니다 (으로 WCF 클라이언트에 반환 <ph id="ph1">&lt;xref:System.ServiceModel.FaultException?displayProperty=nameWithType&gt;</ph> 개체) 디버깅 정보를 제대로 얻으려면 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>The following code example shows the use of <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> to specify that the <ph id="ph2">`SampleMethod`</ph> operation can return a SOAP fault with the detail type of <ph id="ph3">`GreetingFault`</ph>.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph>를 사용하여 <ph id="ph2">`SampleMethod`</ph> 작업이 <ph id="ph3">`GreetingFault`</ph>의 세부 유형이 있는 SOAP 오류를 반환할 수 있도록 지정하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.FaultContractAttribute">
          <source>The following code example shows that WCF clients of <ph id="ph1">`ISampleService`</ph> experience this SOAP fault as a <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> of type <ph id="ph3">`GreetingFault`</ph>.</source>
          <target state="translated">다음 코드 예제에서는의 WCF 클라이언트 <ph id="ph1">`ISampleService`</ph> 로이 SOAP 오류가 발생 한 <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> 형식의 <ph id="ph3">`GreetingFault`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)">
          <source>The serializable type that contains error information for the caller.</source>
          <target state="translated">호출자에 대한 오류 정보가 포함된 serialize할 수 있는 형식입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.FaultContractAttribute" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.FaultContractAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)">
          <source>The constructor is typically executed by applying the attribute to a service method and specifying a type as the argument in the attribute.</source>
          <target state="translated">일반적으로 생성자는 서비스 메서드에 특성을 적용하고 형식을 특성의 인수로 지정하여 실행됩니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)">
          <source>The following code example shows the use of <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> to specify that the <ph id="ph2">`SampleMethod`</ph> operation can return a SOAP fault with the detail type of <ph id="ph3">`GreetingFault`</ph>.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph>를 사용하여 <ph id="ph2">`SampleMethod`</ph> 작업이 <ph id="ph3">`GreetingFault`</ph>의 세부 유형이 있는 SOAP 오류를 반환할 수 있도록 지정하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)">
          <source>The <ph id="ph1">&lt;paramref name="detailType" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="detailType" /&gt;</ph> 인수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.FaultContractAttribute.Action">
          <source>Gets or sets the action of the SOAP fault message that is specified as part of the operation contract.</source>
          <target state="translated">작업 계약의 일부로 지정된 SOAP 오류 메시지의 동작을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.Action">
          <source>The value of the action for the SOAP fault message.</source>
          <target state="translated">SOAP 오류 메시지의 동작 값입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.Action">
          <source>Use to control the action of the SOAP fault message.</source>
          <target state="translated">SOAP 오류 메시지의 동작을 제어하는 데 사용합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.FaultContractAttribute.DetailType">
          <source>Gets the type of a serializable object that contains error information.</source>
          <target state="translated">오류 정보가 포함된 serialize할 수 있는 개체의 형식을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.DetailType">
          <source>The type that represents the serializable error class.</source>
          <target state="translated">serialize할 수 있는 오류 클래스를 나타내는 형식입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.DetailType">
          <source>The following code example shows the use of <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> to specify that the <ph id="ph2">`SampleMethod`</ph> operation can return a SOAP fault with the detail type of <ph id="ph3">`GreetingFault`</ph>.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph>를 사용하여 <ph id="ph2">`SampleMethod`</ph> 작업이 <ph id="ph3">`GreetingFault`</ph>의 세부 유형이 있는 SOAP 오류를 반환할 수 있도록 지정하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.FaultContractAttribute.HasProtectionLevel">
          <source>Gets a value that indicates whether the SOAP fault message has a protection level assigned.</source>
          <target state="translated">SOAP 오류 메시지에 보호 수준이 할당되어 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.HasProtectionLevel">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the fault message has a protection level; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">오류 메시지에 보호 수준이 지정되어 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.HasProtectionLevel">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.HasProtectionLevel">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A&gt;</ph> property to specify whether the SOAP fault message must be encrypted, signed, or both.</source>
          <target state="translated">SOAP 오류 메시지에 대해 암호화, 서명 또는 둘 모두를 수행해야 할지 지정하려면 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A&gt;</ph> 속성을 사용합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.HasProtectionLevel">
          <source>See the <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> property for details.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> 속성을 참조하십시오.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.FaultContractAttribute.Name">
          <source>Gets or sets the name of the fault message in Web Services Description Language (WSDL).</source>
          <target state="translated">WSDL(웹 서비스 기술 언어)에서 오류 메시지의 이름을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.Name">
          <source>The fault message name.</source>
          <target state="translated">오류 메시지 이름입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.Name">
          <source>The default is the name of the type used as the fault detail.</source>
          <target state="translated">기본값은 오류 정보로 사용되는 유형의 이름입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.FaultContractAttribute.Namespace">
          <source>Gets or sets the namespace of the SOAP fault.</source>
          <target state="translated">SOAP 오류의 네임스페이스를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.Namespace">
          <source>The namespace of the SOAP fault.</source>
          <target state="translated">SOAP 오류의 네임스페이스입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>Specifies the level of protection the SOAP fault requires from the binding.</source>
          <target state="translated">바인딩에서 SOAP 오류에 필요한 보호 수준을 지정합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Net.Security.ProtectionLevel" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Security.ProtectionLevel" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Net.Security.ProtectionLevel.None" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Net.Security.ProtectionLevel.None" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Description.FaultDescription.ProtectionLevel%2A?displayProperty=nameWithType&gt;</ph> property to specify the degree to which the binding must encrypt, sign, or both when sending the SOAP fault.</source>
          <target state="translated">SOAP 오류 메시지를 보낼 때 바인딩에 대해 어떤 수준으로 암호화, 서명 또는 둘 모두를 수행해야 할지 지정하려면 <ph id="ph1">&lt;xref:System.ServiceModel.Description.FaultDescription.ProtectionLevel%2A?displayProperty=nameWithType&gt;</ph> 속성을 사용합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>It is strongly recommended that an operation's fault explicitly decide the security protection level requirements on the contract.</source>
          <target state="translated">작업의 오류에서 계약의 보안 보호 수준 요구 사항을 명시적으로 결정하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>The default protection level is <ph id="ph1">&lt;xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType&gt;</ph>, meaning that the SOAP fault message you are defining does not require encryption or a digital signature (although your binding may provide this support if it is configured to do so).</source>
          <target state="translated">기본 보호 수준은 <ph id="ph1">&lt;xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType&gt;</ph>으로, 사용자가 정의하는 SOAP 오류 메시지에 암호화 또는 디지털 서명이 필요하지 않음을 의미합니다. 단, 바인딩이 암호화 및/또는 서명을 수행하도록 구성되어 있는 경우 이러한 지원이 제공될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>If a fault message carries information that is sensitive or can lead to security problems, it is strongly recommended that the <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> property be set to <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">오류 메시지는 중요한 정보를 포함하거나 보안 문제를 일으킬 수 있으므로 <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A&gt;</ph> 속성을 <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType&gt;</ph>으로 설정하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>For more about security issues, see <bpt id="p1">[</bpt>Understanding Protection Level<ept id="p1">](~/docs/framework/wcf/understanding-protection-level.md)</ept>.</source>
          <target state="translated">보안 문제에 대 한 자세한 내용은 <bpt id="p1">[</bpt>보호 수준 이해<ept id="p1">](~/docs/framework/wcf/understanding-protection-level.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>The protection behavior at runtime is the combination of the protection-level properties that have a hierarchical structure.</source>
          <target state="translated">런타임의 보호 동작은 계층 구조로 된 보호 수준 속성의 조합입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>Setting the outermost value establishes the default setting for all narrower scopes unless a different value for a narrower scope is explicitly set.</source>
          <target state="translated">가장 바깥쪽 값을 설정하면 더 좁은 범위에 명시적으로 다른 값을 설정하지 않는 한 모든 더 좁은 범위에 이 값이 기본 설정으로 지정됩니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>In this case, the outer value remains the default for all narrower scopes with the exception of that specifically set.</source>
          <target state="translated">이 경우 특별히 설정된 범위를 제외하고 바깥쪽 값은 모든 더 좁은 범위의 기본값으로 유지됩니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>For example, if <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType&gt;</ph> and no other narrower scopes have protection level settings, all messages in an operation contract are encrypted and signed, including fault messages.</source>
          <target state="translated">예를 들어 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType&gt;</ph>을 <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType&gt;</ph>으로 설정한 경우 더 좁은 다른 범위에는 보호 수준 설정이 없다면 오류 메시지를 포함한 작업 계약의 모든 메시지에 대해 암호화 및 서명이 수행됩니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>If, however, one of those operations has the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> set to <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType&gt;</ph>, then the messages for that operation are signed but all other messages in the contract are encrypted and signed, including fault messages.</source>
          <target state="translated">이러한 작업 중 하나에 <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph>으로 설정된 <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType&gt;</ph>가 있으면 해당 작업의 메시지에 대해서는 서명이 수행되지만, 오류 메시지를 포함한 계약의 다른 모든 메시지의 경우 암호화 및 서명이 수행됩니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>The scopes at which these values are set are:</source>
          <target state="translated">이러한 값이 설정된 범위는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType&gt;</ph> property on <ph id="ph2">&lt;xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType&gt;</ph>의 <ph id="ph2">&lt;xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType&gt;</ph> 속성</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType&gt;</ph> property on <ph id="ph2">&lt;xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType&gt;</ph>의 <ph id="ph2">&lt;xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType&gt;</ph> 속성</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>When there is no protection level explicitly specified on the contract and the underlying binding supports security (whether at the transport or message level), the effective protection level for the whole contract is <ph id="ph1">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">계약에 명시적으로 지정된 보호 수준이 없고 기본 바인딩이 전송 수준이나 메시지 수준에서 보안을 지원하는 경우 전체 계약에서 유효한 보호 수준은 <ph id="ph1">&lt;xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>If the binding does not support security (such as <ph id="ph1">&lt;xref:System.ServiceModel.BasicHttpBinding&gt;</ph>), the effective <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType&gt;</ph> is <ph id="ph3">&lt;xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType&gt;</ph> for the whole contract.</source>
          <target state="translated">바인딩에서 보안을 지원하지 않는 경우(예: <ph id="ph1">&lt;xref:System.ServiceModel.BasicHttpBinding&gt;</ph>) 전체 계약에서 유효한 <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType&gt;</ph>은 <ph id="ph3">&lt;xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel">
          <source>The result is that depending upon the endpoint binding, clients can require different message or transport level security protection even when the contract specifies <ph id="ph1">&lt;xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">결과는 끝점 바인딩에 따라 다르며, 계약에서 <ph id="ph1">&lt;xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType&gt;</ph>을 지정하더라도 클라이언트가 다른 메시지 수준이나 전송 수준의 보안 보호를 요청할 수 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>