<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ServiceKnownTypeAttribute.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d32ea625b1739a39c8b4ee8dab59202ab8c57344.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d32ea625b1739a39c8b4ee8dab59202ab8c57344</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.ServiceKnownTypeAttribute">
          <source>Specifies known types to be used by a service when serializing or deserializing.</source>
          <target state="translated">serialize 또는 deserialize할 때 서비스에서 사용할 알려진 형식을 지정합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceKnownTypeAttribute">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ServiceKnownTypeAttribute&gt;</ph> is intended for use when creating <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> service contracts (interfaces that define the service and its methods).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ServiceKnownTypeAttribute&gt;</ph>는 <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> 서비스 계약(서비스 및 해당 메서드를 정의하는 인터페이스)을 만들 때 사용됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceKnownTypeAttribute">
          <source>The <bpt id="p1">*</bpt>known types<ept id="p1">*</ept> are types that may be present in an object graph when serialization or deserialization occurs.</source>
          <target state="translated"><bpt id="p1">*</bpt>알려진 형식<ept id="p1">*</ept> 은 serialization 또는 deserialization이 발생 하는 경우 개체 그래프에 나타날 수 있는 형식입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceKnownTypeAttribute">
          <source>For more information about known types, see <bpt id="p1">[</bpt>Data Contract Known Types<ept id="p1">](~/docs/framework/wcf/feature-details/data-contract-known-types.md)</ept>.</source>
          <target state="translated">알려진된 형식에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 계약 알려진 형식을<ept id="p1">](~/docs/framework/wcf/feature-details/data-contract-known-types.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceKnownTypeAttribute">
          <source>To use the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceKnownTypeAttribute.MethodName%2A&gt;</ph> property, create a class that contains a method (or methods) that returns an array of types (each being a known type).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ServiceKnownTypeAttribute.MethodName%2A&gt;</ph> 속성을 사용하려면 알려진 형식의 배열을 반환하는 메서드가 하나 이상 포함된 클래스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceKnownTypeAttribute">
          <source>When applying the attribute, set the <ph id="ph1">`methodName`</ph> to the name of a method that returns the list of types and set the <ph id="ph2">`declaringType`</ph> to the type that contains the method.</source>
          <target state="translated">특성을 적용할 때 <ph id="ph1">`methodName`</ph>은 형식 목록을 반환하는 메서드 이름으로 설정하고 <ph id="ph2">`declaringType`</ph>은 해당 메서드가 포함된 형식으로 설정합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceKnownTypeAttribute">
          <source>The method must return a type that implements the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface.</source>
          <target state="translated">메서드는 <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> 인터페이스를 구현하는 형식을 반환해야 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceKnownTypeAttribute">
          <source>The method must also include a parameter of type <ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider&gt;</ph>.</source>
          <target state="translated">메서드는 <ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider&gt;</ph> 형식의 매개 변수도 포함해야 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceKnownTypeAttribute">
          <source>You can also apply the attribute several times to an interface, class, or method, each time specifying a new known type.</source>
          <target state="translated">알려진 형식을 새로 지정할 때마다 특성을 인터페이스, 클래스 또는 메서드에 여러 번 적용할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceKnownTypeAttribute">
          <source>You can use the word <ph id="ph1">`ServiceKnownType`</ph> in your Microsoft Visual Basic or C# code instead of the longer <ph id="ph2">`ServiceKnownTypeAttribute`</ph>.</source>
          <target state="translated">긴 <ph id="ph1">`ServiceKnownType`</ph> 대신 <ph id="ph2">`ServiceKnownTypeAttribute`</ph>이라는 단어를 Microsoft Visual Basic 또는 C# 코드에서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceKnownTypeAttribute">
          <source>The following example applies the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceKnownTypeAttribute&gt;</ph> attribute to an interface where the attribute specifies a method name and a declaring type.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceKnownTypeAttribute&gt;</ph> 특성이 메서드 이름 및 선언 형식을 지정하는 인터페이스에 해당 특성을 적용합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ServiceKnownTypeAttribute">
          <source>Alternatively, apply the attribute to the interface specifying the known type to include.</source>
          <target state="translated">포함할 알려진 형식을 지정하는 인터페이스에 이 특성을 적용해도 됩니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.ServiceKnownTypeAttribute">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String)">
          <source>The name of a method that returns the known types.</source>
          <target state="translated">알려진 형식을 반환하는 메서드의 이름입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /&gt;</ph> class and specifies the name of a method that returns the known types.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화하고 알려진 형식을 반환하는 메서드 이름을 지정합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String)">
          <source>Use this constructor when applying the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceKnownTypeAttribute&gt;</ph> to a class that contains methods that return known types.</source>
          <target state="translated">알려진 형식을 반환하는 메서드가 포함된 클래스에 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceKnownTypeAttribute&gt;</ph>를 적용하려면 이 생성자를 사용합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.Type)">
          <source>Specifies a known type that can be used in a parameter or return value defined by the service.</source>
          <target state="translated">서비스에서 정의한 매개 변수 또는 반환 값에서 사용할 수 있는 알려진 형식을 지정합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.Type)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /&gt;</ph> class with the specified known type.</source>
          <target state="translated">지정된 알려진 형식을 사용하여 <ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ServiceKnownTypeAttribute&gt;</ph> can be applied several times to a method, with each application naming a different known type that may be present in the object graph returned by the method.</source>
          <target state="translated">메서드에서 반환되는 개체 그래프에 나타날 수 있는 알려진 형식의 이름을 서로 다르게 지정하는 각 응용 프로그램을 사용하여 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceKnownTypeAttribute&gt;</ph>를 메서드에 여러 번 적용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.Type)">
          <source>The following example applies the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceKnownTypeAttribute&gt;</ph> attribute to an interface where the attribute specifies the type to include.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceKnownTypeAttribute&gt;</ph> 특성이 포함할 형식을 지정하는 인터페이스에 해당 특성을 적용합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String,System.Type)">
          <source>The name of a method that returns the known types.</source>
          <target state="translated">알려진 형식을 반환하는 메서드의 이름입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String,System.Type)">
          <source>The type that can use the known types in its object graph.</source>
          <target state="translated">개체 그래프에서 알려진 형식을 사용할 수 있는 형식입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String,System.Type)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /&gt;</ph> class with the name of a method that returns the known types and the type that contains the method (or methods) that returns the known types.</source>
          <target state="translated">알려진 형식을 반환하는 메서드의 이름과 알려진 형식을 반환하는 하나 이상의 메서드가 포함된 형식을 사용하여 <ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String,System.Type)">
          <source>The following example applies the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceKnownTypeAttribute&gt;</ph> attribute to an interface where the attribute specifies a method name and a declaring type.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceKnownTypeAttribute&gt;</ph> 특성이 메서드 이름 및 선언 형식을 지정하는 인터페이스에 해당 특성을 적용합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.ServiceKnownTypeAttribute.DeclaringType">
          <source>Gets the type that contains the methods that return the known types.</source>
          <target state="translated">알려진 형식을 반환하는 메서드가 포함된 형식을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceKnownTypeAttribute.DeclaringType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that contains the methods that return the known types.</source>
          <target state="translated">알려진 형식을 반환하는 메서드가 포함된 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.ServiceKnownTypeAttribute.MethodName">
          <source>Gets the name of a method that returns the collection of known types.</source>
          <target state="translated">알려진 형식의 컬렉션을 반환하는 메서드의 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceKnownTypeAttribute.MethodName">
          <source>The name of the method that returns the known types.</source>
          <target state="translated">알려진 형식을 반환하는 메서드의 이름입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceKnownTypeAttribute.MethodName">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ServiceKnownTypeAttribute.MethodName%2A&gt;</ph> must be the name of a method on the type specified by the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceKnownTypeAttribute.DeclaringType%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ServiceKnownTypeAttribute.MethodName%2A&gt;</ph>은 <ph id="ph2">&lt;xref:System.ServiceModel.ServiceKnownTypeAttribute.DeclaringType%2A&gt;</ph> 속성에서 지정한 형식에 있는 메서드의 이름이어야 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.ServiceKnownTypeAttribute.Type">
          <source>The known type that can be included in an object graph.</source>
          <target state="translated">개체 그래프에 포함할 수 있는 알려진 형식입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ServiceKnownTypeAttribute.Type">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the known type.</source>
          <target state="translated">알려진 형식의 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>