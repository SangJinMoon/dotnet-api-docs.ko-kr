<Type Name="PeerResolver" FullName="System.ServiceModel.PeerResolver">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fda55d2dc47eb9b0549d78f23f1f270804159402" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39747759" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class PeerResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PeerResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.PeerResolver" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PeerResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class PeerResolver abstract" />
  <TypeSignature Language="F#" Value="type PeerResolver = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="110c8-101">피어 메시 ID의 등록 및 확인을 위한 계약을 메시에 참여하는 노드의 끝점 주소로 정의하는 데 사용되는 기본 형식을 지정합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="110c8-101">Specifies a base type used to define the contract for the registration and resolution of a peer mesh ID to the endpoint addresses of nodes participating in the mesh.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="110c8-102">이 클래스는 사용자 지정 피어 이름 확인자의 구현을 위한 기본 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="110c8-102">This class is the base class for the implementation of custom peer name resolvers.</span></span> <span data-ttu-id="110c8-103">피어 이름 확인자는 피어 메시에 참여하는 피어 노드를 찾기 위해 피어 채널에서 사용하는 검색 서비스입니다.</span><span class="sxs-lookup"><span data-stu-id="110c8-103">A peer name resolver is a discovery service used by peer channels to find peer nodes participating in a peer mesh.</span></span> <span data-ttu-id="110c8-104">또한 이 확인자는 피어 노드가 알려지고 피어 메시에서 사용할 수 있게 되는 메커니즘인 피어 메시를 통해 노드를 "등록"하는 데에도 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="110c8-104">It is also used to "register" a node with a peer mesh, the mechanism by which the peer node becomes known and available from the peer mesh.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PeerResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PeerResolver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="110c8-105">
            <see cref="T:System.ServiceModel.PeerResolver" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-105">Initializes a new instance of the <see cref="T:System.ServiceModel.PeerResolver" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanShareReferrals">
      <MemberSignature Language="C#" Value="public abstract bool CanShareReferrals { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanShareReferrals" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.PeerResolver.CanShareReferrals" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanShareReferrals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanShareReferrals { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanShareReferrals : bool" Usage="System.ServiceModel.PeerResolver.CanShareReferrals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="110c8-106">피어 이름 확인자에서 조회를 공유할 수 있는지 여부를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-106">Gets whether the peer name resolver can share referrals.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="110c8-107">true이면 피어 이름 확인자에서 조회를 공유할 수 있고, false이면 공유할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-107">If true, the peer name resolver can share referrals; if false, it cannot.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public virtual void Initialize (System.ServiceModel.EndpointAddress address, System.ServiceModel.Channels.Binding binding, System.ServiceModel.Description.ClientCredentials credentials, System.ServiceModel.PeerResolvers.PeerReferralPolicy referralPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(class System.ServiceModel.EndpointAddress address, class System.ServiceModel.Channels.Binding binding, class System.ServiceModel.Description.ClientCredentials credentials, valuetype System.ServiceModel.PeerResolvers.PeerReferralPolicy referralPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.Initialize(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.ServiceModel.PeerResolvers.PeerReferralPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Initialize(System::ServiceModel::EndpointAddress ^ address, System::ServiceModel::Channels::Binding ^ binding, System::ServiceModel::Description::ClientCredentials ^ credentials, System::ServiceModel::PeerResolvers::PeerReferralPolicy referralPolicy);" />
      <MemberSignature Language="F#" Value="abstract member Initialize : System.ServiceModel.EndpointAddress * System.ServiceModel.Channels.Binding * System.ServiceModel.Description.ClientCredentials * System.ServiceModel.PeerResolvers.PeerReferralPolicy -&gt; unit&#xA;override this.Initialize : System.ServiceModel.EndpointAddress * System.ServiceModel.Channels.Binding * System.ServiceModel.Description.ClientCredentials * System.ServiceModel.PeerResolvers.PeerReferralPolicy -&gt; unit" Usage="peerResolver.Initialize (address, binding, credentials, referralPolicy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="binding" Type="System.ServiceModel.Channels.Binding" />
        <Parameter Name="credentials" Type="System.ServiceModel.Description.ClientCredentials" />
        <Parameter Name="referralPolicy" Type="System.ServiceModel.PeerResolvers.PeerReferralPolicy" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="110c8-108">이 피어 확인자 인스턴스의 새 끝점 주소가 포함된 <see cref="T:System.ServiceModel.EndpointAddress" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-108">
              <see cref="T:System.ServiceModel.EndpointAddress" /> that contains the new endpoint address of this peer resolver instance.</span>
          </span>
        </param>
        <param name="binding">
          <span data-ttu-id="110c8-109">이 피어 확인자의 새 네트워크 바인딩을 지정하는 <see cref="T:System.ServiceModel.Channels.Binding" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-109">
              <see cref="T:System.ServiceModel.Channels.Binding" /> that specifies the new network binding for this peer resolver.</span>
          </span>
        </param>
        <param name="credentials">
          <span data-ttu-id="110c8-110">이 피어 확인자에 대한 새 클라이언트 자격 증명을 지정하는 <see cref="T:System.ServiceModel.Description.ClientCredentials" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-110">
              <see cref="T:System.ServiceModel.Description.ClientCredentials" /> that specifies the new client credentials for this peer resolver.</span>
          </span>
        </param>
        <param name="referralPolicy">
          <span data-ttu-id="110c8-111">이 피어 확인자의 새 조회 정책을 지정하는 <see cref="T:System.ServiceModel.PeerResolvers.PeerReferralPolicy" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-111">
              <see cref="T:System.ServiceModel.PeerResolvers.PeerReferralPolicy" /> that specifies the new referral policy for this peer resolver.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="110c8-112">새로 제공한 끝점 주소 및 설정을 사용하여 현재 피어 확인자 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-112">Initializes the current peer resolver instance with the new supplied endpoint address and settings.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="110c8-113">이 메서드는 기존 피어 확인자 인스턴스를 초기화하지만 새 인스턴스를 만들지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="110c8-113">This method simply initializes the existing peer resolver instance; it does not create a new one.</span></span> <span data-ttu-id="110c8-114">새 피어 확인자를 만들려면 해당 바인딩 요소(예: <xref:System.ServiceModel.Channels.PnrpPeerResolverBindingElement>)에 대한 CreatePeerResolver 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="110c8-114">To create a new peer resolver, call the CreatePeerResolver method on the corresponding binding element (for example, <xref:System.ServiceModel.Channels.PnrpPeerResolverBindingElement>).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public abstract object Register (string meshId, System.ServiceModel.PeerNodeAddress nodeAddress, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Register(string meshId, class System.ServiceModel.PeerNodeAddress nodeAddress, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Register (meshId As String, nodeAddress As PeerNodeAddress, timeout As TimeSpan) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ Register(System::String ^ meshId, System::ServiceModel::PeerNodeAddress ^ nodeAddress, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Register : string * System.ServiceModel.PeerNodeAddress * TimeSpan -&gt; obj" Usage="peerResolver.Register (meshId, nodeAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="meshId" Type="System.String" />
        <Parameter Name="nodeAddress" Type="System.ServiceModel.PeerNodeAddress" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="meshId">
          <span data-ttu-id="110c8-115">피어 노드를 등록할 피어 메시의 ID입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-115">The ID of the peer mesh in which the peer node is to be registered.</span>
          </span>
        </param>
        <param name="nodeAddress">
          <span data-ttu-id="110c8-116">피어 메시에 등록할 <see cref="T:System.ServiceModel.PeerNodeAddress" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-116">The <see cref="T:System.ServiceModel.PeerNodeAddress" /> to be registered with the peer mesh.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="110c8-117">피어 메시에 등록하려는 시도가 성공할 때까지 대기하는 시간입니다. 대기 시간이 지나면 등록 시도가 중단됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-117">The length of time to wait for success before aborting the attempt to register with the peer mesh.</span>
          </span>
          <span data-ttu-id="110c8-118">시도가 실패하면 피어에 <see cref="T:System.TimeoutException" />이 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-118">If the attempt fails, <see cref="T:System.TimeoutException" /> is raised on the peer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="110c8-119">특정 피어 메시에 대한 <see cref="T:System.ServiceModel.PeerNodeAddress" />를 등록합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-119">Registers a <see cref="T:System.ServiceModel.PeerNodeAddress" /> for a specific peer mesh.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="110c8-120">등록 ID를 나타내는 <see cref="T:System.Object" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-120">An <see cref="T:System.Object" /> that represents the registration ID.</span>
          </span>
          <span data-ttu-id="110c8-121">이 등록 ID 개체는 <see cref="M:System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" /> 및 <see cref="M:System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)" /> 메서드에 전달됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-121">This registration ID object is passed to the <see cref="M:System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" /> and <see cref="M:System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)" /> methods.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public abstract System.Collections.ObjectModel.ReadOnlyCollection&lt;System.ServiceModel.PeerNodeAddress&gt; Resolve (string meshId, int maxAddresses, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.ServiceModel.PeerNodeAddress&gt; Resolve(string meshId, int32 maxAddresses, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.Resolve(System.String,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Resolve (meshId As String, maxAddresses As Integer, timeout As TimeSpan) As ReadOnlyCollection(Of PeerNodeAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::ObjectModel::ReadOnlyCollection&lt;System::ServiceModel::PeerNodeAddress ^&gt; ^ Resolve(System::String ^ meshId, int maxAddresses, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Resolve : string * int * TimeSpan -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.ServiceModel.PeerNodeAddress&gt;" Usage="peerResolver.Resolve (meshId, maxAddresses, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.ServiceModel.PeerNodeAddress&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="meshId" Type="System.String" />
        <Parameter Name="maxAddresses" Type="System.Int32" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="meshId">
          <span data-ttu-id="110c8-122">참여 중인 노드를 나타내는 <see cref="T:System.ServiceModel.PeerNodeAddress" /> 개체를 가져올 피어 메시의 메시 ID입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-122">The mesh ID of the peer mesh within which the <see cref="T:System.ServiceModel.PeerNodeAddress" /> objects representing participating nodes are to be obtained.</span>
          </span>
        </param>
        <param name="maxAddresses">
          <span data-ttu-id="110c8-123">반환할 끝점 주소의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-123">The number of endpoint addresses to return.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="110c8-124">피어 메시 내에서 끝점 주소를 확인할 때까지 대기하는 시간입니다. 대기 시간이 지나면 확인 시도가 중단됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-124">The length of time to wait for success before aborting the attempt to resolve endpoint addresses within the peer mesh.</span>
          </span>
          <span data-ttu-id="110c8-125">시도가 실패하면 피어에 <see cref="T:System.TimeoutException" />이 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-125">If the attempt fails, <see cref="T:System.TimeoutException" /> is raised on the peer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="110c8-126">피어 메시에 참여하는 0개 이상의 노드 끝점 주소에 대한 제공된 메시 ID를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-126">Resolves the supplied mesh ID to zero or more endpoint addresses of nodes participating in the peer mesh.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="110c8-127">피어 메시에 참여 중인 노드를 나타내는 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 개체가 포함된 <see cref="T:System.ServiceModel.PeerNodeAddress" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-127">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains <see cref="T:System.ServiceModel.PeerNodeAddress" /> objects representing nodes participating in the peer mesh.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public abstract void Unregister (object registrationId, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unregister(object registrationId, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Unregister (registrationId As Object, timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Unregister(System::Object ^ registrationId, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Unregister : obj * TimeSpan -&gt; unit" Usage="peerResolver.Unregister (registrationId, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="registrationId" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="registrationId">
          <span data-ttu-id="110c8-128">이전에 <see cref="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" />를 호출하여 가져온 노드의 등록 ID입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-128">A registration ID for the node obtained by a previous call to <see cref="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" />.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="110c8-129">피어 메시에서 등록이 제거될 때까지 대기하는 시간입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-129">The length of time to wait for a successful removal of the registration from the peer mesh.</span>
          </span>
          <span data-ttu-id="110c8-130">시도가 실패하면 피어에 <see cref="T:System.TimeoutException" />이 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-130">If the attempt fails, <see cref="T:System.TimeoutException" /> is raised on the peer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="110c8-131">피어 메시에서 노드의 등록 항목을 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-131">Removes the registration entry for a node from a peer mesh.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="110c8-132">등록 ID는 최소한 피어 노드 ID와 메시 ID의 튜플을 나타내는 피어 확인자 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="110c8-132">A registration ID is a peer resolver token, that, at the very minimum, represents the tuple of a peer node ID and the mesh ID.</span></span> <span data-ttu-id="110c8-133">이전에 <xref:System.ServiceModel.PeerResolver.Register%2A>를 호출했을 때 이 ID 값을 가져왔어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="110c8-133">This ID value must have been obtained in a previous call to <xref:System.ServiceModel.PeerResolver.Register%2A>.</span></span>  
  
 <span data-ttu-id="110c8-134">다음 두 가지 특정한 경우에 <xref:System.ServiceModel.PeerResolver.Unregister%2A>가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="110c8-134"><xref:System.ServiceModel.PeerResolver.Unregister%2A> is called in two specific cases:</span></span>  
  
-   <span data-ttu-id="110c8-135">일반적으로 마지막 피어 채널이나 이 채널과 연결된 서비스 호스트를 닫은 결과로서 <xref:System.ServiceModel.PeerNode>가 피어 메시를 벗어나는 경우에 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="110c8-135">When the <xref:System.ServiceModel.PeerNode> is leaving the peer mesh (usually as the result of closing the last peer channel or service host that is associated with it).</span></span>  
  
-   <span data-ttu-id="110c8-136"><xref:System.ServiceModel.PeerNode>가 피어 메시에 참여 중인 다른 노드의 끝점 주소를 사용할 수 없는 경우에 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="110c8-136">When the <xref:System.ServiceModel.PeerNode> can find no available endpoint addresses of other nodes participating in the peer mesh.</span></span> <span data-ttu-id="110c8-137">그 결과 <xref:System.ServiceModel.PeerNode>는 더 이상 연결할 수 없으며 <xref:System.ServiceModel.PeerResolver.Unregister%2A>에서 등록을 해제하기 위해 <xref:System.ServiceModel.PeerResolver>를 호출하려고 시도합니다.</span><span class="sxs-lookup"><span data-stu-id="110c8-137">As a result, the <xref:System.ServiceModel.PeerNode> is no longer reachable, and it will attempt to call <xref:System.ServiceModel.PeerResolver.Unregister%2A> to unregister itself from the <xref:System.ServiceModel.PeerResolver>.</span></span> <span data-ttu-id="110c8-138">등록을 해제한 후에 메시에 있는 다른 피어 노드를 사용할 수 있는 경우 <xref:System.ServiceModel.PeerResolver.Register%2A>를 호출하고 새 등록 ID를 가져와 이 노드를 다시 등록할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="110c8-138">If other peer nodes within the mesh become available subsequent to unregistration, the node can re-register itself by calling <xref:System.ServiceModel.PeerResolver.Register%2A> and obtaining a new registration ID.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public abstract void Update (object registrationId, System.ServiceModel.PeerNodeAddress updatedNodeAddress, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Update(object registrationId, class System.ServiceModel.PeerNodeAddress updatedNodeAddress, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Update (registrationId As Object, updatedNodeAddress As PeerNodeAddress, timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Update(System::Object ^ registrationId, System::ServiceModel::PeerNodeAddress ^ updatedNodeAddress, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Update : obj * System.ServiceModel.PeerNodeAddress * TimeSpan -&gt; unit" Usage="peerResolver.Update (registrationId, updatedNodeAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="registrationId" Type="System.Object" />
        <Parameter Name="updatedNodeAddress" Type="System.ServiceModel.PeerNodeAddress" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="registrationId">
          <span data-ttu-id="110c8-139">이전에 <see cref="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" />를 호출하여 가져온 노드의 등록 ID 토큰입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-139">A registration ID token for the node, obtained by a previous call to <see cref="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" /></span>
          </span>
        </param>
        <param name="updatedNodeAddress">
          <span data-ttu-id="110c8-140">업데이트된 끝점 주소 및 기타 멀티호밍 IP 주소입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-140">The updated endpoint address (and other multihoming IP addresses).</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="110c8-141">피어 메시 내에서 노드의 등록을 업데이트할 때까지 대기하는 시간입니다. 대기 시간이 지나면 업데이트 시도가 중단됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-141">The length of time to wait for success before aborting the attempt to update the node's registration within the peer mesh.</span>
          </span>
          <span data-ttu-id="110c8-142">시도가 실패하면 피어에 <see cref="T:System.TimeoutException" />이 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-142">If the attempt fails, <see cref="T:System.TimeoutException" /> is raised on the peer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="110c8-143">특정 피어 메시를 사용하여 등록한 노드에 대해 <see cref="T:System.ServiceModel.PeerNodeAddress" />를 업데이트합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="110c8-143">Updates the <see cref="T:System.ServiceModel.PeerNodeAddress" /> for a node registered with a specific peer mesh.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="110c8-144">로컬 컴퓨터에서 <xref:System.ServiceModel.PeerResolver.Update%2A>의 주소가 변경되면 <xref:System.ServiceModel.PeerNode>가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="110c8-144"><xref:System.ServiceModel.PeerResolver.Update%2A> is called when the address of the <xref:System.ServiceModel.PeerNode> changes on the local machine.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>