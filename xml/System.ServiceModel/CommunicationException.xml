<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CommunicationException.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52f8b221ea64a80044aa970aacb49bced5262950f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2f8b221ea64a80044aa970aacb49bced5262950f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.CommunicationException">
          <source>Represents a communication error in either the service or client application.</source>
          <target state="translated">서비스 또는 클라이언트 응용 프로그램의 통신 오류를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source>Robust client and service <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> applications handle <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> objects that may be thrown during communication.</source>
          <target state="translated">강력한 클라이언트 및 서비스 <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> 프로그램에서 통신 중 throw될 수 있는 <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> 개체를 처리합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source>There are also two <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph>-derived exception types (<ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.FaultException&gt;</ph>) that clients also often expect.</source>
          <target state="translated">클라이언트에서도 자주 예상하는 두 개의 <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> 파생 예외 형식(<ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> 및 <ph id="ph3">&lt;xref:System.ServiceModel.FaultException&gt;</ph>)이 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source>Therefore, in order to prevent the generic <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> handler from catching these more specific exception types, catch these exceptions prior to handling <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph>.</source>
          <target state="translated">제네릭 <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> 처리기에서 이처럼 좀 더 구체적인 예외 형식을 catch하지 않도록 하려면 <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph>을 처리하기 전에 이러한 예외를 catch합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> objects are thrown on the client when a SOAP fault that is specified in the operation contract is received in response to a two-way operation (that is, a method with an <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> attribute with <ph id="ph3">&lt;xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A&gt;</ph> set to <ph id="ph4">`false`</ph>).</source>
          <target state="translated">양방향 작업(즉, <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph>가 <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph>로 설정된 <ph id="ph3">&lt;xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A&gt;</ph> 특성이 있는 메서드)에 대한 응답으로 작업 계약에서 지정한 SOAP 오류를 받은 경우 클라이언트에서 <ph id="ph4">`false`</ph> 개체가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.FaultException&gt;</ph> objects are thrown when a listener receives a SOAP fault that is not expected or specified in the operation contract.</source>
          <target state="translated">수신기에서 작업 계약에 예상되거나 지정되지 않은 SOAP 오류를 받은 경우 <ph id="ph1">&lt;xref:System.ServiceModel.FaultException&gt;</ph> 개체가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source>This usually occurs when the application is being debugged and the service has the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A&gt;</ph> property set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">이러한 상황은 응용 프로그램이 디버깅 중이고 서비스에서 <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A&gt;</ph> 속성을 <ph id="ph2">`true`</ph>로 설정한 경우에 주로 발생합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source>When implementing custom channels and binding elements, it is strongly recommended that your components throw only <ph id="ph1">&lt;xref:System.TimeoutException?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph>-derived objects.</source>
          <target state="translated">사용자 지정 채널 및 바인딩 요소를 구현하는 경우 구성 요소에서 <ph id="ph1">&lt;xref:System.TimeoutException?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> 파생 개체만 throw하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source>In the case where your components throw a recoverable exception that is specific to the component, wrap that exception inside a <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> object.</source>
          <target state="translated">해당 구성 요소에 대해서만 복구할 수 있는 예외를 throw할 경우 해당 예외를 <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> 개체 내에서 래핑합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source>For more details about designing and using the <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> fault system, see <bpt id="p1">[</bpt>Specifying and Handling Faults in Contracts and Services<ept id="p1">](~/docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md)</ept>.</source>
          <target state="translated">디자인 및 사용 하는 방법에 대 한 자세한 내용은 <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> 오류 시스템을 참조 하십시오. <bpt id="p1">[</bpt>지정 및 계약 및 서비스에서 처리 오류<ept id="p1">](~/docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source>The WCF Runtime will not throw a <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> that is unsafe to handle at the point where it leaves the WCF Runtime and enters user code.</source>
          <target state="translated">WCF 런타임 throw 하지 것입니다는 <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> 있는 WCF 런타임 유지 하 고 사용자 코드가 실행 지점에서 처리 하는 안전 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source>The following code example shows a client that handles <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> types.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> 형식을 처리하는 클라이언트를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source>This client also handles <ph id="ph1">&lt;xref:System.ServiceModel.FaultException&gt;</ph> objects because the service has <ph id="ph2">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A&gt;</ph> set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">서비스에서 <ph id="ph1">&lt;xref:System.ServiceModel.FaultException&gt;</ph>를 <ph id="ph2">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A&gt;</ph>로 설정했으므로 이 클라이언트는 <ph id="ph3">`true`</ph> 개체도 처리합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.CommunicationException">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationException" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationException" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.CommunicationException.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationException" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationException" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.CommunicationException.#ctor(System.String)">
          <source>The description of the error condition.</source>
          <target state="translated">오류 조건에 대한 설명입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.CommunicationException.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationException" /&gt;</ph> class, using the specified message.</source>
          <target state="translated">지정된 메시지를 사용하여 <ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationException" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.CommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Information relevant to the deserialization process.</source>
          <target state="translated">deserialization 프로세스와 관련된 정보입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.CommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The context of the deserialization process.</source>
          <target state="translated">deserialization 프로세스의 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.CommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationException" /&gt;</ph> class, using the specified serialization information and context objects.</source>
          <target state="translated">지정된 serialization 정보와 컨텍스트 개체를 사용하여 <ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationException" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.CommunicationException.#ctor(System.String,System.Exception)">
          <source>The description of the error condition.</source>
          <target state="translated">오류 조건에 대한 설명입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.CommunicationException.#ctor(System.String,System.Exception)">
          <source>The inner exception to be used.</source>
          <target state="translated">사용할 내부 예외입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.CommunicationException.#ctor(System.String,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationException" /&gt;</ph> class, using the specified message and the inner exception.</source>
          <target state="translated">지정된 메시지와 내부 예외를 사용하여 <ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationException" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>