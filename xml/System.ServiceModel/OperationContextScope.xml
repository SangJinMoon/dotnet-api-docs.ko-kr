<Type Name="OperationContextScope" FullName="System.ServiceModel.OperationContextScope">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="92b68d48771b6c7c4987c3fb267fd7fc41d167e5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class OperationContextScope : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OperationContextScope extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.OperationContextScope" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OperationContextScope&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class OperationContextScope sealed : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="22fee-101">범위에 <see cref="T:System.ServiceModel.OperationContext" /> 개체가 있는 블록을 만듭니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="22fee-101">Creates a block within which an <see cref="T:System.ServiceModel.OperationContext" /> object is in scope.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22fee-102">특정 <xref:System.ServiceModel.OperationContextScope> 개체에 대한 범위를 만들거나, 지정된 <xref:System.ServiceModel.OperationContext> 개체를 사용하여 새 <xref:System.ServiceModel.OperationContext> 개체에 대한 범위를 만들려면 <xref:System.ServiceModel.IContextChannel> 클래스를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="22fee-102">Use the <xref:System.ServiceModel.OperationContextScope> class to create a scope for a specific <xref:System.ServiceModel.OperationContext> object or a scope for a new <xref:System.ServiceModel.OperationContext> object using a specified <xref:System.ServiceModel.IContextChannel> object.</span></span> <span data-ttu-id="22fee-103"><xref:System.ServiceModel.OperationContextScope>는 [!INCLUDE[indigo1](~/includes/indigo1-md.md)] 서비스 또는 [!INCLUDE[indigo2](~/includes/indigo2-md.md)] 클라이언트 응용 프로그램에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="22fee-103">An <xref:System.ServiceModel.OperationContextScope> can be used in a [!INCLUDE[indigo1](~/includes/indigo1-md.md)] service or [!INCLUDE[indigo2](~/includes/indigo2-md.md)] client application.</span></span>  
  
 <span data-ttu-id="22fee-104"><xref:System.ServiceModel.OperationContextScope> 개체에서 현재 작업 컨텍스트를 설정하면 <xref:System.ServiceModel.OperationContext>를 사용하여 다음 작업을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="22fee-104">Once the <xref:System.ServiceModel.OperationContextScope> object has established the current operation context, you can use the <xref:System.ServiceModel.OperationContext> to:</span></span>  
  
-   <span data-ttu-id="22fee-105">들어오는 메시지와 보내는 메시지의 헤더 및 기타 속성에 액세스하고 수정합니다.</span><span class="sxs-lookup"><span data-stu-id="22fee-105">Access and modify incoming and outgoing message headers and other properties.</span></span>  
  
-   <span data-ttu-id="22fee-106">디스패처, 호스트, 채널 및 확장을 포함하여 런타임에 액세스합니다.</span><span class="sxs-lookup"><span data-stu-id="22fee-106">Access the runtime, including dispatchers, the host, channel, and extensions.</span></span>  
  
-   <span data-ttu-id="22fee-107">보안, 인스턴스 및 요청 컨텍스트 등 다른 형식의 컨텍스트에 액세스합니다.</span><span class="sxs-lookup"><span data-stu-id="22fee-107">Access other types of contexts, such as security, instance, and request contexts.</span></span>  
  
-   <span data-ttu-id="22fee-108"><xref:System.ServiceModel.OperationContext> 개체와 연결된 채널 또는 채널에서 <xref:System.ServiceModel.Channels.ISession?displayProperty=nameWithType>을 구현하는 경우 연결된 채널의 세션 식별자와 연결된 채널에 액세스합니다.</span><span class="sxs-lookup"><span data-stu-id="22fee-108">Access the channel associated with the <xref:System.ServiceModel.OperationContext> object or (if the channel implements <xref:System.ServiceModel.Channels.ISession?displayProperty=nameWithType>) the associated channel's session identifier.</span></span>  
  
 <span data-ttu-id="22fee-109"><xref:System.ServiceModel.OperationContextScope>를 만든 경우 현재 <xref:System.ServiceModel.OperationContext>가 저장되고 새 <xref:System.ServiceModel.OperationContext>가 <xref:System.ServiceModel.OperationContext.Current%2A> 속성에 의해 반환된 컨텍스트가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="22fee-109">When an <xref:System.ServiceModel.OperationContextScope> is created, the current <xref:System.ServiceModel.OperationContext> is stored and the new <xref:System.ServiceModel.OperationContext> becomes the one returned by the <xref:System.ServiceModel.OperationContext.Current%2A> property.</span></span> <span data-ttu-id="22fee-110"><xref:System.ServiceModel.OperationContextScope>가 삭제된 경우 원래 <xref:System.ServiceModel.OperationContext>가 복원됩니다.</span><span class="sxs-lookup"><span data-stu-id="22fee-110">When the <xref:System.ServiceModel.OperationContextScope> is disposed, the original <xref:System.ServiceModel.OperationContext> is restored.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="22fee-111">OperationContextScope 블록 내에서 "await" 비동기 패턴을 사용 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="22fee-111">Do not use the asynchronous "await" pattern within a OperationContextScope block.</span></span> <span data-ttu-id="22fee-112">연속 작업이 발생할 때 다른 스레드에서 실행 될 수 있습니다 및 OperationContextScope 특정 스레드 문화권 인 합니다.</span><span class="sxs-lookup"><span data-stu-id="22fee-112">When the continuation occurs, it may run on a different thread and OperationContextScope is thread specific.</span></span> <span data-ttu-id="22fee-113">비동기 호출에 대 한 "await"를 호출 해야 하는 경우 OperationContextScope 블록 외부에서 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="22fee-113">If you need to call "await" for an async call, use it outside of the OperationContextScope block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="22fee-114">다음 예제에서는 <xref:System.ServiceModel.OperationContextScope>를 사용하여 클라이언트 응용 프로그램에서 새 컨텍스트를 만들어 사용자 지정 헤더를 보내는 메시지에 추가하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="22fee-114">The following example shows how to use the <xref:System.ServiceModel.OperationContextScope> to create a new context in a client application to add a custom header to the outgoing message.</span></span>  
  
 [!code-csharp[OperationContextScope#3](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontextscope/cs/client.cs#3)]
 [!code-vb[OperationContextScope#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontextscope/vb/client.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="22fee-115">
            <see cref="T:System.ServiceModel.OperationContextScope" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fee-115">Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContextScope" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OperationContextScope (System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (channel As IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OperationContextScope(System::ServiceModel::IContextChannel ^ channel);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="channel">
          <span data-ttu-id="22fee-116">새 <see cref="T:System.ServiceModel.OperationContext" />의 범위를 만들 때 사용할 채널입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fee-116">The channel to use when creating the scope for a new <see cref="T:System.ServiceModel.OperationContext" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="22fee-117">지정된 <see cref="T:System.ServiceModel.OperationContextScope" />을 사용하여 범위에 대해 새 <see cref="T:System.ServiceModel.IContextChannel" />를 만드는 <see cref="T:System.ServiceModel.OperationContext" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fee-117">Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContextScope" /> class that uses the specified <see cref="T:System.ServiceModel.IContextChannel" /> to create a new <see cref="T:System.ServiceModel.OperationContext" /> for the scope.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22fee-118">아웃바운드 메시지 헤더를 추가 또는 수정하거나, 들어오는 메시지 헤더를 읽거나, <xref:System.ServiceModel.OperationContextScope.%23ctor%2A>의 다른 런타임 속성에 액세스하는 데 사용할 수 있는 클라이언트 채널의 새 <xref:System.ServiceModel.OperationContext>를 만들려면 <xref:System.ServiceModel.OperationContext> 생성자를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="22fee-118">Use the <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> constructor to create a new <xref:System.ServiceModel.OperationContext> for a client channel that can be used to add or modify outbound message headers, read incoming message headers, or access other run-time properties of the <xref:System.ServiceModel.OperationContext>.</span></span>  
  
 <span data-ttu-id="22fee-119">새로 만들어진 <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A?displayProperty=nameWithType>의 <xref:System.ServiceModel.OperationContext> 속성에 추가한 헤더는 <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> 생성자로 전달된 채널에만 적용됩니다.</span><span class="sxs-lookup"><span data-stu-id="22fee-119">The headers added to the <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A?displayProperty=nameWithType> property of the newly created <xref:System.ServiceModel.OperationContext> apply only to the channel that was passed to the <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> constructor.</span></span> <span data-ttu-id="22fee-120">사용자가 해당 범위 내에 새 채널을 만들면 헤더는 해당 새 채널에서 보낸 메시지에 적용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="22fee-120">If the user creates a new channel within its scope then the headers are not applied to messages sent on the new channel.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="22fee-121">다음 예제에서는 보내는 메시지에 사용자 지정 헤더를 추가하기 위해 <xref:System.ServiceModel.OperationContextScope>를 사용하여 클라이언트 응용 프로그램에서 새 컨텍스트를 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="22fee-121">The following example shows how to use the <xref:System.ServiceModel.OperationContextScope> to create a new context in a client application in order to add a custom header to the outgoing message.</span></span>  
  
 [!code-csharp[OperationContextScope#4](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontextscope/cs/client.cs#4)]
 [!code-vb[OperationContextScope#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontextscope/vb/client.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OperationContextScope (System.ServiceModel.OperationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.OperationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (context As OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OperationContextScope(System::ServiceModel::OperationContext ^ context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="22fee-122">만들어진 범위의 활성 <see cref="T:System.ServiceModel.OperationContext" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fee-122">The active <see cref="T:System.ServiceModel.OperationContext" /> in the created scope.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="22fee-123">지정된 <see cref="T:System.ServiceModel.OperationContextScope" /> 개체의 범위를 만들기 위해 <see cref="T:System.ServiceModel.OperationContext" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fee-123">Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContextScope" /> class to create a scope for the specified <see cref="T:System.ServiceModel.OperationContext" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22fee-124">현재 범위의 지정된 <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> 개체가 있는 코드 블록을 만들려면 <xref:System.ServiceModel.OperationContextScope> 생성자를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="22fee-124">Use the <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> constructor to create a code block within which the specified <xref:System.ServiceModel.OperationContextScope> object is the current scope.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContextScope.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="22fee-125">원래 <see cref="T:System.ServiceModel.OperationContext" />를 활성 컨텍스트로 복원하고 <see cref="T:System.ServiceModel.OperationContextScope" /> 개체를 재활용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fee-125">Restores the original <see cref="T:System.ServiceModel.OperationContext" /> to the active context and recycles the <see cref="T:System.ServiceModel.OperationContextScope" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>