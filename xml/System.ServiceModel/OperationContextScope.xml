<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="OperationContextScope.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac592b68d48771b6c7c4987c3fb267fd7fc41d167e5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92b68d48771b6c7c4987c3fb267fd7fc41d167e5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.OperationContextScope">
          <source>Creates a block within which an <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph> object is in scope.</source>
          <target state="translated">범위에 <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph> 개체가 있는 블록을 만듭니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> class to create a scope for a specific <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> object or a scope for a new <ph id="ph3">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> object using a specified <ph id="ph4">&lt;xref:System.ServiceModel.IContextChannel&gt;</ph> object.</source>
          <target state="translated">특정 <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> 개체에 대한 범위를 만들거나, 지정된 <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> 개체를 사용하여 새 <ph id="ph3">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> 개체에 대한 범위를 만들려면 <ph id="ph4">&lt;xref:System.ServiceModel.IContextChannel&gt;</ph> 클래스를 사용합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>An <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> can be used in a <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> service or <ph id="ph3">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> client application.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph>는 <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> 서비스 또는 <ph id="ph3">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> 클라이언트 응용 프로그램에서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>Once the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> object has established the current operation context, you can use the <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> to:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> 개체에서 현재 작업 컨텍스트를 설정하면 <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph>를 사용하여 다음 작업을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>Access and modify incoming and outgoing message headers and other properties.</source>
          <target state="translated">들어오는 메시지와 보내는 메시지의 헤더 및 기타 속성에 액세스하고 수정합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>Access the runtime, including dispatchers, the host, channel, and extensions.</source>
          <target state="translated">디스패처, 호스트, 채널 및 확장을 포함하여 런타임에 액세스합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>Access other types of contexts, such as security, instance, and request contexts.</source>
          <target state="translated">보안, 인스턴스 및 요청 컨텍스트 등 다른 형식의 컨텍스트에 액세스합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>Access the channel associated with the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> object or (if the channel implements <ph id="ph2">&lt;xref:System.ServiceModel.Channels.ISession?displayProperty=nameWithType&gt;</ph>) the associated channel's session identifier.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> 개체와 연결된 채널 또는 채널에서 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.ISession?displayProperty=nameWithType&gt;</ph>을 구현하는 경우 연결된 채널의 세션 식별자와 연결된 채널에 액세스합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>When an <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> is created, the current <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> is stored and the new <ph id="ph3">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> becomes the one returned by the <ph id="ph4">&lt;xref:System.ServiceModel.OperationContext.Current%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph>를 만든 경우 현재 <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph>가 저장되고 새 <ph id="ph3">&lt;xref:System.ServiceModel.OperationContext&gt;</ph>가 <ph id="ph4">&lt;xref:System.ServiceModel.OperationContext.Current%2A&gt;</ph> 속성에 의해 반환된 컨텍스트가 됩니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>When the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> is disposed, the original <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> is restored.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph>가 삭제된 경우 원래 <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph>가 복원됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>Do not use the asynchronous "await" pattern within a OperationContextScope block.</source>
          <target state="translated">OperationContextScope 블록 내에서 "await" 비동기 패턴을 사용 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>When the continuation occurs, it may run on a different thread and OperationContextScope is thread specific.</source>
          <target state="translated">연속 작업이 발생할 때 다른 스레드에서 실행 될 수 있습니다 및 OperationContextScope 특정 스레드 문화권 인 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>If you need to call "await" for an async call, use it outside of the OperationContextScope block.</source>
          <target state="translated">비동기 호출에 대 한 "await"를 호출 해야 하는 경우 OperationContextScope 블록 외부에서 사용 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> to create a new context in a client application to add a custom header to the outgoing message.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph>를 사용하여 클라이언트 응용 프로그램에서 새 컨텍스트를 만들어 사용자 지정 헤더를 보내는 메시지에 추가하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.OperationContextScope">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContextScope" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContextScope" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)">
          <source>The channel to use when creating the scope for a new <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph>.</source>
          <target state="translated">새 <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph>의 범위를 만들 때 사용할 채널입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContextScope" /&gt;</ph> class that uses the specified <ph id="ph2">&lt;see cref="T:System.ServiceModel.IContextChannel" /&gt;</ph> to create a new <ph id="ph3">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph> for the scope.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContextScope" /&gt;</ph>을 사용하여 범위에 대해 새 <ph id="ph2">&lt;see cref="T:System.ServiceModel.IContextChannel" /&gt;</ph>를 만드는 <ph id="ph3">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope.%23ctor%2A&gt;</ph> constructor to create a new <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> for a client channel that can be used to add or modify outbound message headers, read incoming message headers, or access other run-time properties of the <ph id="ph3">&lt;xref:System.ServiceModel.OperationContext&gt;</ph>.</source>
          <target state="translated">아웃바운드 메시지 헤더를 추가 또는 수정하거나, 들어오는 메시지 헤더를 읽거나, <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope.%23ctor%2A&gt;</ph>의 다른 런타임 속성에 액세스하는 데 사용할 수 있는 클라이언트 채널의 새 <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph>를 만들려면 <ph id="ph3">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> 생성자를 사용합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)">
          <source>The headers added to the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A?displayProperty=nameWithType&gt;</ph> property of the newly created <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> apply only to the channel that was passed to the <ph id="ph3">&lt;xref:System.ServiceModel.OperationContextScope.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">새로 만들어진 <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A?displayProperty=nameWithType&gt;</ph>의 <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> 속성에 추가한 헤더는 <ph id="ph3">&lt;xref:System.ServiceModel.OperationContextScope.%23ctor%2A&gt;</ph> 생성자로 전달된 채널에만 적용됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)">
          <source>If the user creates a new channel within its scope then the headers are not applied to messages sent on the new channel.</source>
          <target state="translated">사용자가 해당 범위 내에 새 채널을 만들면 헤더는 해당 새 채널에서 보낸 메시지에 적용되지 않습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> to create a new context in a client application in order to add a custom header to the outgoing message.</source>
          <target state="translated">다음 예제에서는 보내는 메시지에 사용자 지정 헤더를 추가하기 위해 <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph>를 사용하여 클라이언트 응용 프로그램에서 새 컨텍스트를 만드는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.OperationContext)">
          <source>The active <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph> in the created scope.</source>
          <target state="translated">만들어진 범위의 활성 <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.OperationContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContextScope" /&gt;</ph> class to create a scope for the specified <ph id="ph2">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph> object.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContextScope" /&gt;</ph> 개체의 범위를 만들기 위해 <ph id="ph2">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.OperationContext)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope.%23ctor%2A&gt;</ph> constructor to create a code block within which the specified <ph id="ph2">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> object is the current scope.</source>
          <target state="translated">현재 범위의 지정된 <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope.%23ctor%2A&gt;</ph> 개체가 있는 코드 블록을 만들려면 <ph id="ph2">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> 생성자를 사용합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.OperationContextScope.Dispose">
          <source>Restores the original <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph> to the active context and recycles the <ph id="ph2">&lt;see cref="T:System.ServiceModel.OperationContextScope" /&gt;</ph> object.</source>
          <target state="translated">원래 <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph>를 활성 컨텍스트로 복원하고 <ph id="ph2">&lt;see cref="T:System.ServiceModel.OperationContextScope" /&gt;</ph> 개체를 재활용합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>