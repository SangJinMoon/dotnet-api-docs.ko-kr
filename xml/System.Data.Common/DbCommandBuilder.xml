<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DbCommandBuilder.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac55bfb54f7b76a4739f53cb9e965eb71e14aa89733.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5bfb54f7b76a4739f53cb9e965eb71e14aa89733</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Data.Common.DbCommandBuilder">
          <source>Automatically generates single-table commands used to reconcile changes made to a <ph id="ph1">&lt;see cref="T:System.Data.DataSet" /&gt;</ph> with the associated database.</source>
          <target state="translated">관련 데이터베이스를 사용하여 <ph id="ph1">&lt;see cref="T:System.Data.DataSet" /&gt;</ph>에 변경한 내용을 조정하는 데 사용되는 단일 테이블 명령을 자동으로 생성합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Data.Common.DbCommandBuilder">
          <source>This is an abstract class that can only be inherited.</source>
          <target state="translated">이 클래스는 상속될 수만 있는 추상 클래스입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>The <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> class is provided for the convenience of provider writers creating their own command builders.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> 클래스 자체 명령 작성기를 만드는 공급자 작성자의 편의 위해 제공 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>By inheriting from this class, developers can implement provider specific behavior in their own code.</source>
          <target state="translated">이 클래스에서 상속 하 여 개발자는 자신의 코드에 공급자 특정 동작을 구현할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>The <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph> does not automatically generate the SQL statements required to reconcile changes made to a <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph> with the associated data source.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph> 변경 내용을 조정 하는 데 필요한 SQL 문을 자동으로 생성 되지 않습니다는 <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph> 연결 된 데이터 원본을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>However, you can create a <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> object to automatically generate SQL statements for single-table updates if you set the <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>.</source>
          <target state="translated">만들 수 있습니다는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> 설정 하는 경우 단일 테이블 업데이트에 대 한 SQL 문을 자동으로 생성 하는 개체는 <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt;</ph> 의 속성은 <ph id="ph3">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>Then, any additional SQL statements that you do not set are generated by the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph>.</source>
          <target state="translated">를 설정 하지 않는 추가적인 모든 SQL 문을 그러면는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>The <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> registers itself as a listener for <ph id="ph2">&lt;xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating&gt;</ph> events whenever you set the <ph id="ph3">&lt;xref:System.Data.Common.DbCommandBuilder.DataAdapter%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> 자체에 대 한 수신기로 등록 <ph id="ph2">&lt;xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating&gt;</ph> 설정할 때마다 이벤트는 <ph id="ph3">&lt;xref:System.Data.Common.DbCommandBuilder.DataAdapter%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>You can only associate one <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> object with each other at one time.</source>
          <target state="translated">만 연결할 수 있습니다 <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> 서로 개체를 한 번에 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>To generate INSERT, UPDATE, or DELETE statements, the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> uses the <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt;</ph> property to retrieve a required set of metadata automatically.</source>
          <target state="translated">INSERT, UPDATE 또는 DELETE 문을 생성 하는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> 사용 하 여는 <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt;</ph> 속성을 필수 메타 데이터 집합을 자동으로 검색 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>If you change the <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt;</ph> after the metadata has been retrieved (for example, after the first update), you should call the <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> method to update the metadata.</source>
          <target state="translated">변경 하는 경우는 <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt;</ph> 호출 해야 (예를 들어 첫 번째 업데이트 후) 메타 데이터를 검색 한 후의 <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> 메서드 메타 데이터를 업데이트 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>The <ph id="ph1">`SelectCommand`</ph> must also return at least one primary key or unique column.</source>
          <target state="translated">또한 <ph id="ph1">`SelectCommand`</ph>는 기본 키 열이나 고유 열을 하나 이상 반환해야 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>If none exist, an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception is generated, and the commands are not generated.</source>
          <target state="translated">항목이 없으면는 <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> 예외가 생성 되 고 명령은 생성 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>The <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> also uses the <ph id="ph2">&lt;xref:System.Data.Common.DbCommand.Connection%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Data.Common.DbCommand.CommandTimeout%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Data.Common.DbCommand.Transaction%2A&gt;</ph> properties referenced by the <ph id="ph5">&lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> 또한 사용 하 여는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommand.Connection%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Data.Common.DbCommand.CommandTimeout%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Data.Common.DbCommand.Transaction%2A&gt;</ph> 속성에서 참조 되는 <ph id="ph5">&lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>The user should call <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> if any of these properties are modified, or if the <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt;</ph> itself is replaced.</source>
          <target state="translated">사용자를 호출 해야 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> 이러한 속성을 수정 하거나는 <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt;</ph> 자체는 대체 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>Otherwise the <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.InsertCommand%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Data.Common.DbDataAdapter.DeleteCommand%2A&gt;</ph> properties retain their previous values.</source>
          <target state="translated">그렇지 않은 경우는 <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.InsertCommand%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Data.Common.DbDataAdapter.DeleteCommand%2A&gt;</ph> 속성 이전 값을 유지 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>If you call <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph>, the <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> is disassociated from the <ph id="ph3">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>, and the generated commands are no longer used.</source>
          <target state="translated">호출 하는 경우 <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> 에서 분리는 <ph id="ph3">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>, 생성된 된 명령을 더 이상 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.#ctor">
          <source>Initializes a new instance of a class that inherits from the <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph> 클래스에서 상속하는 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.Common.DbParameter" /&gt;</ph> to which the additional modifications are applied.</source>
          <target state="translated">추가 수정 사항이 적용될 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbParameter" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph> from the schema table provided by <ph id="ph2">&lt;see cref="M:System.Data.Common.DbDataReader.GetSchemaTable" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.DataRow" /&gt;</ph>에서 제공하는 스키마 테이블의 <ph id="ph2">&lt;see cref="M:System.Data.Common.DbDataReader.GetSchemaTable" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)">
          <source>The type of command being generated; INSERT, UPDATE or DELETE.</source>
          <target state="translated">생성되는 명령의 형식인 INSERT, UPDATE 또는 DELETE입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is part of the update or delete WHERE clause, <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it is part of the insert or update values.</source>
          <target state="translated">매개 변수가 WHERE 절을 업데이트하거나 삭제하는 데 사용되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 값을 삽입하거나 업데이트하는 데 사용되면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)">
          <source>Allows the provider implementation of the <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph> class to handle additional parameter properties.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph> 클래스의 공급자 구현에서 추가 매개 변수 속성을 처리할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)">
          <source>This method allows an implementation of the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> class to handle provider-specific parameter properties.</source>
          <target state="translated">이 방법을 사용 하면는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> 공급자 특정 매개 변수 속성을 처리 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="P:System.Data.Common.DbCommandBuilder.CatalogLocation">
          <source>Sets or gets the <ph id="ph1">&lt;see cref="T:System.Data.Common.CatalogLocation" /&gt;</ph> for an instance of the <ph id="ph2">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.Common.CatalogLocation" /&gt;</ph> 클래스의 인스턴스에 대한 <ph id="ph2">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph>을 설정하거나 가져옵니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbCommandBuilder.CatalogLocation">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.Common.CatalogLocation" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.Common.CatalogLocation" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.Data.Common.DbCommandBuilder.CatalogSeparator">
          <source>Sets or gets a string used as the catalog separator for an instance of the <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph> 클래스의 인스턴스에 대한 카탈로그 구분 기호로 사용되는 문자열을 설정하거나 가져옵니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbCommandBuilder.CatalogSeparator">
          <source>A string indicating the catalog separator for use with an instance of the <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph> 클래스의 인스턴스에서 사용할 카탈로그 구분 기호를 나타내는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="P:System.Data.Common.DbCommandBuilder.ConflictOption">
          <source>Specifies which <ph id="ph1">&lt;see cref="T:System.Data.ConflictOption" /&gt;</ph> is to be used by the <ph id="ph2">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.ConflictOption" /&gt;</ph>가 사용할 <ph id="ph2">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph>을 지정합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbCommandBuilder.ConflictOption">
          <source>Returns one of the <ph id="ph1">&lt;see cref="T:System.Data.ConflictOption" /&gt;</ph> values describing the behavior of this <ph id="ph2">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Data.ConflictOption" /&gt;</ph>의 동작을 설명하는 <ph id="ph2">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph> 값 중 하나를 반환합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.Data.Common.DbCommandBuilder.DataAdapter">
          <source>Gets or sets a <ph id="ph1">&lt;see cref="T:System.Data.Common.DbDataAdapter" /&gt;</ph> object for which Transact-SQL statements are automatically generated.</source>
          <target state="translated">Transact-SQL 문을 자동으로 생성할 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbDataAdapter" /&gt;</ph> 개체를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbCommandBuilder.DataAdapter">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.Common.DbDataAdapter" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.Common.DbDataAdapter" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbCommandBuilder.DataAdapter">
          <source>The <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> registers itself as a listener for <ph id="ph2">&lt;xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating&gt;</ph> events that are generated by the <ph id="ph3">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph> specified in this property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> 자체에 대 한 수신기로 등록 <ph id="ph2">&lt;xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating&gt;</ph> 에서 생성 되는 이벤트는 <ph id="ph3">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph> 이 속성에 지정 된 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbCommandBuilder.DataAdapter">
          <source>When you create a new instance of <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph>, any existing <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> associated with this <ph id="ph3">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph> is released.</source>
          <target state="translated">새 인스턴스를 만들 때 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph>, 모든 기존 <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> 이 연관 <ph id="ph3">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph> 해제 됩니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>로 설정하고, 관리되지 않는 리소스만 해제하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph>에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.Dispose%2A&gt;</ph> method and the <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">이 메서드는 public <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.Dispose%2A&gt;</ph> 메서드 및 <ph id="ph2">`Finalize`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.Dispose%2A&gt;</ph> invokes the protected <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.Dispose%2A&gt;</ph> method with the disposing parameter set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.Dispose%2A&gt;</ph> 보호 된 호출 <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.Dispose%2A&gt;</ph> 로 설정 disposing 매개 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)">
          <source><ph id="ph1">`Finalize`</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`Finalize`</ph> 호출 <ph id="ph2">`Dispose`</ph> 와 <ph id="ph3">`disposing`</ph> 로 설정 <ph id="ph4">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">`disposing`</ph> 매개 변수가 <ph id="ph2">`true`</ph>인 경우 이 메서드는 이 <ph id="ph3">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.Dispose%2A&gt;</ph> method of each referenced object.</source>
          <target state="translated">이 메서드는 참조되는 각 개체의 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.Dispose%2A&gt;</ph> 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see cref="Overload:System.Data.Common.DbCommandBuilder.Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Data.Common.DbCommandBuilder.Dispose" /&gt;</ph>는 다른 개체에서 여러 번 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see cref="Overload:System.Data.Common.DbCommandBuilder.Dispose" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)" /&gt;</ph>를 재정의할 때 이전 <ph id="ph2">&lt;see cref="Overload:System.Data.Common.DbCommandBuilder.Dispose" /&gt;</ph> 호출에서 삭제된 개체를 참조하지 않도록 주의하십시오.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see cref="M:System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">구현 하는 방법에 대 한 자세한 내용은 <ph id="ph1">&lt;see cref="M:System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>Dispose 메서드를 구현<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> and <ph id="ph2">&lt;see langword="Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Overriding the Finalize Method<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> 및 <ph id="ph2">&lt;see langword="Finalize" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>관리 되지 않는 리소스 정리<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> 및 <bpt id="p2">[</bpt>Finalize 메서드를 재정의<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="T:System.Data.Common.DbCommandBuilder">
          <source>Gets the automatically generated <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> object required to perform deletions at the data source.</source>
          <target state="translated">데이터 소스에서 삭제하는 데 필요한 자동으로 생성된 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>An application can use the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> method for informational or troubleshooting purposes because it returns the <ph id="ph2">&lt;xref:System.Data.Common.DbCommand&gt;</ph> object to be executed.</source>
          <target state="translated">응용 프로그램이 사용할 수는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> 반환 하기 때문에 목적으로 하는 문제 해결에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommand&gt;</ph> 실행할 개체입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>You can also use <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> as the basis of a modified command.</source>
          <target state="translated">사용할 수도 있습니다 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> 의 수정 된 명령 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>For example, you might call <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> and modify the associated command text, and then explicitly set that on the <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>.</source>
          <target state="translated">예를 들어, 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> 및 관련된 명령 텍스트를 수정 하 고 다음에 명시적으로 설정 하는 <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>After the SQL statement is first generated, the application must explicitly call <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> if it changes the statement in any way.</source>
          <target state="translated">먼저 SQL 문의 생성 한 후 응용 프로그램이 명시적으로 호출 해야 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> 문을 어떤 식으로든에서 변경 하는 경우.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>Otherwise, the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> will still be using information from the previous statement, which might not be correct.</source>
          <target state="translated">그렇지 않은 경우는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> 정보 올바르지 않을 수 있는 이전 문의를 계속 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>The SQL statements are first generated either when the application calls <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph>.</source>
          <target state="translated">SQL 문은 첫 번째 응용 프로그램 호출 때 생성 <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>The default behavior, when generating parameter names, is to use <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, and so on for the various parameters.</source>
          <target state="translated">매개 변수 이름을 생성할 때의 기본 동작을 사용 하는 <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, 다양 한 매개 변수 대.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>If the overloaded version of <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> allows you to specify this behavior by supplying a Boolean value, you can cause the <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> to generate parameters based on the column names instead by passing <ph id="ph3">`True`</ph>.</source>
          <target state="translated">경우 오버 로드 된 버전의 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> 발생할 수 있습니다는 부울 값을 제공 하 여이 동작을 지정할 수 있습니다는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> 전달 하 여 대신 열 이름에 따라 매개 변수를 생성 <ph id="ph3">`True`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand">
          <source>Gets the automatically generated <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> object required to perform deletions at the data source.</source>
          <target state="translated">데이터 소스에서 삭제하는 데 필요한 자동으로 생성된 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand">
          <source>The automatically generated <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> object required to perform deletions.</source>
          <target state="translated">삭제하는 데 필요한 자동으로 생성된 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand">
          <source>An application can use the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> method for informational or troubleshooting purposes because it returns the <ph id="ph2">&lt;xref:System.Data.Common.DbCommand&gt;</ph> object to be executed.</source>
          <target state="translated">응용 프로그램이 사용할 수는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> 반환 하기 때문에 목적으로 하는 문제 해결에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommand&gt;</ph> 실행할 개체입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand">
          <source>You can also use <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> as the basis of a modified command.</source>
          <target state="translated">사용할 수도 있습니다 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> 의 수정 된 명령 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand">
          <source>For example, you might call <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> and modify the command text, and then explicitly set that on the <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>.</source>
          <target state="translated">예를 들어, 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> 및 명령 텍스트를 수정 하 고 다음에 명시적으로 설정 하는 <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand">
          <source>After the SQL statement is first generated, the application must explicitly call <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> if it changes the statement in any way.</source>
          <target state="translated">먼저 SQL 문의 생성 한 후 응용 프로그램이 명시적으로 호출 해야 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> 문을 어떤 식으로든에서 변경 하는 경우.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand">
          <source>Otherwise, the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> will still be using information from the previous statement, which might not be correct.</source>
          <target state="translated">그렇지 않은 경우는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> 정보 올바르지 않을 수 있는 이전 문의를 계속 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand">
          <source>The SQL statements are first generated either when the application calls <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph>.</source>
          <target state="translated">SQL 문은 첫 번째 응용 프로그램 호출 때 생성 <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, generate parameter names matching column names, if possible.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>인 경우 가능하면 열 이름과 일치하는 매개 변수 이름을 생성합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="false" /&gt;</ph>, generate <ph id="ph2">@p1</ph>, <ph id="ph3">@p2</ph>, and so on.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph>이면 <ph id="ph2">@p1</ph>, <ph id="ph3">@p2</ph> 등을 생성합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
          <source>Gets the automatically generated <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> object required to perform deletions at the data source, optionally using columns for parameter names.</source>
          <target state="translated">선택적으로 매개 변수 이름에 열을 사용하여 데이터 소스에서 삭제하는 데 필요한 자동으로 생성된 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
          <source>The automatically generated <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> object required to perform deletions.</source>
          <target state="translated">삭제하는 데 필요한 자동으로 생성된 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
          <source>An application can use the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> method for informational or troubleshooting purposes because it returns the <ph id="ph2">&lt;xref:System.Data.Common.DbCommand&gt;</ph> object to be executed.</source>
          <target state="translated">응용 프로그램이 사용할 수는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> 반환 하기 때문에 목적으로 하는 문제 해결에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommand&gt;</ph> 실행할 개체입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
          <source>You can also use <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> as the basis of a modified command.</source>
          <target state="translated">사용할 수도 있습니다 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> 의 수정 된 명령 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
          <source>For example, you might call <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> and modify the command text, and then explicitly set that on the <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>.</source>
          <target state="translated">예를 들어, 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> 및 명령 텍스트를 수정 하 고 다음에 명시적으로 설정 하는 <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
          <source>After the SQL statement is first generated, the application must explicitly call <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> if it changes the statement in any way.</source>
          <target state="translated">먼저 SQL 문의 생성 한 후 응용 프로그램이 명시적으로 호출 해야 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> 문을 어떤 식으로든에서 변경 하는 경우.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
          <source>Otherwise, the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> will still be using information from the previous statement, which might not be correct.</source>
          <target state="translated">그렇지 않은 경우는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph> 정보 올바르지 않을 수 있는 이전 문의를 계속 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
          <source>The SQL statements are first generated either when the application calls <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph>.</source>
          <target state="translated">SQL 문은 첫 번째 응용 프로그램 호출 때 생성 <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
          <source>The default behavior, when generating parameter names, is to use <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, and so on for the various parameters.</source>
          <target state="translated">매개 변수 이름을 생성할 때의 기본 동작을 사용 하는 <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, 다양 한 매개 변수 대.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
          <source>Passing <ph id="ph1">`true`</ph> for the <ph id="ph2">`useColumnsForParameterNames`</ph> parameter allows you to force the <ph id="ph3">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> to generate parameters based on the column names instead.</source>
          <target state="translated">전달 <ph id="ph1">`true`</ph> 에 대 한는 <ph id="ph2">`useColumnsForParameterNames`</ph> 매개 변수를 사용 하면 강제로 <ph id="ph3">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> 대신 열 이름에 따라 매개 변수를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
          <source>This succeeds only if the following conditions are met:</source>
          <target state="translated">다음 조건에 해당 하는 경우에 성공 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength&gt;</ph> has been specified and its length is equal to or greater than the generated parameter name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength&gt;</ph> 지정 된이 고 길이 생성 된 매개 변수 이름 보다 크거나 같은 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
          <source>The generated parameter name meets the criteria specified in the <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern&gt;</ph> regular expression.</source>
          <target state="translated">생성 된 매개 변수 이름에 지정 된 조건에 부합는 <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern&gt;</ph> 정규식입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
          <source>A <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat&gt;</ph> is specified.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat&gt;</ph> 지정 됩니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="T:System.Data.Common.DbCommandBuilder">
          <source>Gets the automatically generated <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> object required to perform insertions at the data source.</source>
          <target state="translated">데이터 소스에서 삽입하는 데 필요한 자동으로 생성된 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>An application can use the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> method for informational or troubleshooting purposes because it returns the text of the <ph id="ph2">&lt;xref:System.Data.Common.DbCommand&gt;</ph> object to be executed.</source>
          <target state="translated">응용 프로그램이 사용할 수는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> 의 텍스트를 반환 하기 때문에 목적으로 하는 문제 해결에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommand&gt;</ph> 실행할 개체입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>You can also use <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> as the basis of a modified command.</source>
          <target state="translated">사용할 수도 있습니다 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> 의 수정 된 명령 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>For example, you might call <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> and modify command text, and then explicitly set that on the <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>.</source>
          <target state="translated">예를 들어, 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> 및 명령 텍스트를 수정 하 고 다음에 명시적으로 설정 하는 <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>After the SQL statement is first generated, the application must explicitly call <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> if it changes the statement in any way.</source>
          <target state="translated">먼저 SQL 문의 생성 한 후 응용 프로그램이 명시적으로 호출 해야 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> 문을 어떤 식으로든에서 변경 하는 경우.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>Otherwise, the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> will still be using information from the previous statement, which might not be correct.</source>
          <target state="translated">그렇지 않은 경우는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> 정보 올바르지 않을 수 있는 이전 문의를 계속 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>The SQL statements are first generated either when the application calls <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph>.</source>
          <target state="translated">SQL 문은 첫 번째 응용 프로그램 호출 때 생성 <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>The default behavior, when generating parameter names, is to use <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, and so on for the various parameters.</source>
          <target state="translated">매개 변수 이름을 생성할 때의 기본 동작을 사용 하는 <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, 다양 한 매개 변수 대.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>If the overloaded version of <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> allows you to specify this behavior, you can cause the <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> to generate parameters based on the column names instead.</source>
          <target state="translated">경우 오버 로드 된 버전의 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> 이 동작을 지정할 수 있습니다, 발생할 수 있습니다는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> 대신 열 이름에 따라 매개 변수를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand">
          <source>Gets the automatically generated <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> object required to perform insertions at the data source.</source>
          <target state="translated">데이터 소스에서 삽입하는 데 필요한 자동으로 생성된 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand">
          <source>The automatically generated <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> object required to perform insertions.</source>
          <target state="translated">삽입하는 데 필요한 자동으로 생성된 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand">
          <source>An application can use the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> method for informational or troubleshooting purposes because it returns the text of the <ph id="ph2">&lt;xref:System.Data.Common.DbCommand&gt;</ph> object to be executed.</source>
          <target state="translated">응용 프로그램이 사용할 수는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> 의 텍스트를 반환 하기 때문에 목적으로 하는 문제 해결에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommand&gt;</ph> 실행할 개체입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand">
          <source>You can also use <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> as the basis of a modified command.</source>
          <target state="translated">사용할 수도 있습니다 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> 의 수정 된 명령 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand">
          <source>For example, you might call <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> and modify the command text, and then explicitly set that on the <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>.</source>
          <target state="translated">예를 들어, 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> 및 명령 텍스트를 수정 하 고 다음에 명시적으로 설정 하는 <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand">
          <source>After the SQL statement is first generated, the application must explicitly call <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> if it changes the statement in any way.</source>
          <target state="translated">먼저 SQL 문의 생성 한 후 응용 프로그램이 명시적으로 호출 해야 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> 문을 어떤 식으로든에서 변경 하는 경우.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand">
          <source>Otherwise, the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> will still be using information from the previous statement, which might not be correct.</source>
          <target state="translated">그렇지 않은 경우는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> 정보 올바르지 않을 수 있는 이전 문의를 계속 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand">
          <source>The SQL statements are first generated either when the application calls <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph>.</source>
          <target state="translated">SQL 문은 첫 번째 응용 프로그램 호출 때 생성 <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, generate parameter names matching column names, if possible.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>인 경우 가능하면 열 이름과 일치하는 매개 변수 이름을 생성합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="false" /&gt;</ph>, generate <ph id="ph2">@p1</ph>, <ph id="ph3">@p2</ph>, and so on.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph>이면 <ph id="ph2">@p1</ph>, <ph id="ph3">@p2</ph> 등을 생성합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)">
          <source>Gets the automatically generated <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> object required to perform insertions at the data source, optionally using columns for parameter names.</source>
          <target state="translated">선택적으로 매개 변수 이름에 열을 사용하여 데이터 소스에서 삽입하는 데 필요한 자동으로 생성된 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)">
          <source>The automatically generated <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> object required to perform insertions.</source>
          <target state="translated">삽입하는 데 필요한 자동으로 생성된 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)">
          <source>An application can use the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> method for informational or troubleshooting purposes because it returns the text of the <ph id="ph2">&lt;xref:System.Data.Common.DbCommand&gt;</ph> object to be executed.</source>
          <target state="translated">응용 프로그램이 사용할 수는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> 의 텍스트를 반환 하기 때문에 목적으로 하는 문제 해결에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommand&gt;</ph> 실행할 개체입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)">
          <source>You can also use <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> as the basis of a modified command.</source>
          <target state="translated">사용할 수도 있습니다 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> 의 수정 된 명령 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)">
          <source>For example, you might call <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> and modify the command text, and then explicitly set that on the <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>.</source>
          <target state="translated">예를 들어, 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> 및 명령 텍스트를 수정 하 고 다음에 명시적으로 설정 하는 <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)">
          <source>After the SQL statement is first generated, the application must explicitly call <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> if it changes the statement in any way.</source>
          <target state="translated">먼저 SQL 문의 생성 한 후 응용 프로그램이 명시적으로 호출 해야 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> 문을 어떤 식으로든에서 변경 하는 경우.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)">
          <source>Otherwise, the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> will still be using information from the previous statement, which might not be correct.</source>
          <target state="translated">그렇지 않은 경우는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph> 정보 올바르지 않을 수 있는 이전 문의를 계속 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)">
          <source>The SQL statements are first generated either when the application calls <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph>.</source>
          <target state="translated">SQL 문은 첫 번째 응용 프로그램 호출 때 생성 <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)">
          <source>The default behavior, when generating parameter names, is to use <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, and so on for the various parameters.</source>
          <target state="translated">매개 변수 이름을 생성할 때의 기본 동작을 사용 하는 <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, 다양 한 매개 변수 대.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)">
          <source>Passing <ph id="ph1">`true`</ph> for the <ph id="ph2">`useColumnsForParameterNames`</ph> parameter allows you to force the <ph id="ph3">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> to generate parameters based on the column names instead.</source>
          <target state="translated">전달 <ph id="ph1">`true`</ph> 에 대 한는 <ph id="ph2">`useColumnsForParameterNames`</ph> 매개 변수를 사용 하면 강제로 <ph id="ph3">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> 대신 열 이름에 따라 매개 변수를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)">
          <source>Generation of the parameters based on column names succeeds only if the following conditions are met:</source>
          <target state="translated">열 이름에 따라 매개 변수를 생성할 다음 조건이 충족 되는 경우에 성공 합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength&gt;</ph> has been specified and its length is equal to or greater than the generated parameter name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength&gt;</ph> 지정 된이 고 길이 생성 된 매개 변수 이름 보다 크거나 같은 합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)">
          <source>The generated parameter name meets the criteria specified in the <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern&gt;</ph> regular expression.</source>
          <target state="translated">생성 된 매개 변수 이름에 지정 된 조건에 부합는 <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern&gt;</ph> 정규식입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)">
          <source>A <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat&gt;</ph> is specified.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat&gt;</ph> 지정 됩니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="T:System.Data.Common.DbCommandBuilder">
          <source>Returns the name of the specified parameter.</source>
          <target state="translated">지정된 매개 변수의 이름을 반환합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetParameterName(System.Int32)">
          <source>The number to be included as part of the parameter's name..</source>
          <target state="translated">매개 변수 이름의 일부로 포함될 수입니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetParameterName(System.Int32)">
          <source>Returns the name of the specified parameter in the format of <ph id="ph1">@p</ph><bpt id="p1">*</bpt><ph id="ph2">#</ph><ept id="p1">*</ept>.</source>
          <target state="translated"><ph id="ph1">@p</ph><bpt id="p1">*</bpt><ph id="ph2">#</ph><ept id="p1">*</ept> 형식으로 지정된 매개 변수의 이름을 반환합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetParameterName(System.Int32)">
          <source>Use when building a custom command builder.</source>
          <target state="translated">사용자 지정 명령 작성기를 만들 때 사용합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetParameterName(System.Int32)">
          <source>The name of the parameter with the specified number appended as part of the parameter name.</source>
          <target state="translated">매개 변수 이름의 일부로 지정된 수가 추가된 매개 변수 이름입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetParameterName(System.String)">
          <source>The partial name of the parameter.</source>
          <target state="translated">매개 변수의 부분 이름입니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetParameterName(System.String)">
          <source>Returns the full parameter name, given the partial parameter name.</source>
          <target state="translated">부분 매개 변수 이름이 제공된 경우 전체 매개 변수 이름을 반환합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetParameterName(System.String)">
          <source>The full parameter name corresponding to the partial parameter name requested.</source>
          <target state="translated">요청된 부분 매개 변수 이름에 해당하는 전체 매개 변수 이름입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetParameterPlaceholder(System.Int32)">
          <source>The number to be included as part of the parameter's name.</source>
          <target state="translated">매개 변수 이름의 일부로 포함될 수입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetParameterPlaceholder(System.Int32)">
          <source>Returns the placeholder for the parameter in the associated SQL statement.</source>
          <target state="translated">연결된 SQL 문에서 매개 변수의 자리 표시자를 반환합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetParameterPlaceholder(System.Int32)">
          <source>The name of the parameter with the specified number appended.</source>
          <target state="translated">지정된 수가 추가된 매개 변수 이름입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetParameterPlaceholder(System.Int32)">
          <source>This method is intended for use by provider writers building a custom command builder.</source>
          <target state="translated">이 메서드는 사용자 지정 명령 작성기를 만드는 공급자 작성자가 사용이 됩니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> for which to retrieve the corresponding schema table.</source>
          <target state="translated">해당 스키마 테이블을 검색할 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)">
          <source>Returns the schema table for the <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph>의 스키마 테이블을 반환합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph> that represents the schema for the specific <ph id="ph2">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph>.</source>
          <target state="translated">특정 <ph id="ph1">&lt;see cref="T:System.Data.DataTable" /&gt;</ph>의 스키마를 나타내는 <ph id="ph2">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)">
          <source>This method is intended for use by provider writers building a custom command builder.</source>
          <target state="translated">이 메서드는 사용자 지정 명령 작성기를 만드는 공급자 작성자가 사용이 됩니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="T:System.Data.Common.DbCommandBuilder">
          <source>Gets the automatically generated <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> object required to perform updates at the data source.</source>
          <target state="translated">데이터 소스에서 업데이트하는 데 필요한 자동으로 생성된 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>An application can use the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> method for informational or troubleshooting purposes because it returns the <ph id="ph2">&lt;xref:System.Data.Common.DbCommand&gt;</ph> object to be executed.</source>
          <target state="translated">응용 프로그램이 사용할 수는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> 반환 하기 때문에 목적으로 하는 문제 해결에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommand&gt;</ph> 실행할 개체입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>You can also use <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> as the basis of a modified command.</source>
          <target state="translated">사용할 수도 있습니다 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> 의 수정 된 명령 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>For example, you might call <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> and modify the command text, and then explicitly set that on the <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>.</source>
          <target state="translated">예를 들어, 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> 및 명령 텍스트를 수정 하 고 다음에 명시적으로 설정 하는 <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>After the SQL statement is first generated, the application must explicitly call <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> if it changes the statement in any way.</source>
          <target state="translated">먼저 SQL 문의 생성 한 후 응용 프로그램이 명시적으로 호출 해야 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> 문을 어떤 식으로든에서 변경 하는 경우.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>Otherwise, the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> will still be using information from the previous statement, which might not be correct.</source>
          <target state="translated">그렇지 않은 경우는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> 정보 올바르지 않을 수 있는 이전 문의를 계속 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>The SQL statements are first generated either when the application calls <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph>.</source>
          <target state="translated">SQL 문은 첫 번째 응용 프로그램 호출 때 생성 <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>The default behavior, when generating parameter names, is to use <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, and so on for the various parameters.</source>
          <target state="translated">매개 변수 이름을 생성할 때의 기본 동작을 사용 하는 <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, 다양 한 매개 변수 대.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbCommandBuilder">
          <source>If the overloaded version of <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> allows you to specify this behavior, you can cause the <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> to generate parameters based on the column names instead.</source>
          <target state="translated">경우 오버 로드 된 버전의 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> 이 동작을 지정할 수 있습니다, 발생할 수 있습니다는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> 대신 열 이름에 따라 매개 변수를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand">
          <source>Gets the automatically generated <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> object required to perform updates at the data source.</source>
          <target state="translated">데이터 소스에서 업데이트하는 데 필요한 자동으로 생성된 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand">
          <source>The automatically generated <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> object required to perform updates.</source>
          <target state="translated">업데이트하는 데 필요한 자동으로 생성된 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand">
          <source>An application can use the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> method for informational or troubleshooting purposes because it returns the <ph id="ph2">&lt;xref:System.Data.Common.DbCommand&gt;</ph> object to be executed.</source>
          <target state="translated">응용 프로그램이 사용할 수는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> 반환 하기 때문에 목적으로 하는 문제 해결에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommand&gt;</ph> 실행할 개체입니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand">
          <source>You can also use <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> as the basis of a modified command.</source>
          <target state="translated">사용할 수도 있습니다 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> 의 수정 된 명령 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand">
          <source>For example, you might call <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> and modify the command text, and then explicitly set that on the <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>.</source>
          <target state="translated">예를 들어, 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> 및 명령 텍스트를 수정 하 고 다음에 명시적으로 설정 하는 <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand">
          <source>After the SQL statement is first generated, the application must explicitly call <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> if it changes the statement in any way.</source>
          <target state="translated">먼저 SQL 문의 생성 한 후 응용 프로그램이 명시적으로 호출 해야 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> 문을 어떤 식으로든에서 변경 하는 경우.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand">
          <source>Otherwise, the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> will still be using information from the previous statement, which might not be correct.</source>
          <target state="translated">그렇지 않은 경우는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> 정보 올바르지 않을 수 있는 이전 문의를 계속 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand">
          <source>The SQL statements are first generated either when the application calls <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph>.</source>
          <target state="translated">SQL 문은 첫 번째 응용 프로그램 호출 때 생성 <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, generate parameter names matching column names, if possible.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>인 경우 가능하면 열 이름과 일치하는 매개 변수 이름을 생성합니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="false" /&gt;</ph>, generate <ph id="ph2">@p1</ph>, <ph id="ph3">@p2</ph>, and so on.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph>이면 <ph id="ph2">@p1</ph>, <ph id="ph3">@p2</ph> 등을 생성합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
          <source>Gets the automatically generated <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> object required to perform updates at the data source, optionally using columns for parameter names.</source>
          <target state="translated">선택적으로 매개 변수 이름에 열을 사용하여 데이터 소스에서 업데이트하는 데 필요한 자동으로 생성된 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
          <source>The automatically generated <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> object required to perform updates.</source>
          <target state="translated">업데이트하는 데 필요한 자동으로 생성된 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
          <source>An application can use the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> method for informational or troubleshooting purposes because it returns the <ph id="ph2">&lt;xref:System.Data.Common.DbCommand&gt;</ph> object to be executed.</source>
          <target state="translated">응용 프로그램이 사용할 수는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> 반환 하기 때문에 목적으로 하는 문제 해결에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommand&gt;</ph> 실행할 개체입니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
          <source>You can also use <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> as the basis of a modified command.</source>
          <target state="translated">사용할 수도 있습니다 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> 의 수정 된 명령 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
          <source>For example, you might call <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> and modify command text, and then explicitly set that on the <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>.</source>
          <target state="translated">예를 들어, 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> 및 명령 텍스트를 수정 하 고 다음에 명시적으로 설정 하는 <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
          <source>After the SQL statement is first generated, the application must explicitly call <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> if it changes the statement in any way.</source>
          <target state="translated">먼저 SQL 문의 생성 한 후 응용 프로그램이 명시적으로 호출 해야 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> 문을 어떤 식으로든에서 변경 하는 경우.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
          <source>Otherwise, the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> will still be using information from the previous statement, which might not be correct.</source>
          <target state="translated">그렇지 않은 경우는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph> 정보 올바르지 않을 수 있는 이전 문의를 계속 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
          <source>The SQL statements are first generated either when the application calls <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph>.</source>
          <target state="translated">SQL 문은 첫 번째 응용 프로그램 호출 때 생성 <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
          <source>The default behavior, when generating parameter names, is to use <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, and so on for the various parameters.</source>
          <target state="translated">매개 변수 이름을 생성할 때의 기본 동작을 사용 하는 <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, 다양 한 매개 변수 대.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
          <source>Passing <ph id="ph1">`true`</ph> for the <ph id="ph2">`useColumnsForParameterNames`</ph> parameter allows you to force the <ph id="ph3">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> to generate parameters based on the column names instead.</source>
          <target state="translated">전달 <ph id="ph1">`true`</ph> 에 대 한는 <ph id="ph2">`useColumnsForParameterNames`</ph> 매개 변수를 사용 하면 강제로 <ph id="ph3">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> 대신 열 이름에 따라 매개 변수를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
          <source>Generation of the parameters based on column names succeeds only if the following conditions are met:</source>
          <target state="translated">열 이름에 따라 매개 변수를 생성할 다음 조건이 충족 되는 경우에 성공 합니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength&gt;</ph> has been specified and its length is equal to or greater than the generated parameter name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength&gt;</ph> 지정 된이 고 길이 생성 된 매개 변수 이름 보다 크거나 같은 합니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
          <source>The generated parameter name meets the criteria specified in the <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern&gt;</ph> regular expression.</source>
          <target state="translated">생성 된 매개 변수 이름에 지정 된 조건에 부합는 <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern&gt;</ph> 정규식입니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
          <source>A <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat&gt;</ph> is specified.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat&gt;</ph> 지정 됩니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> to be used by the command builder for the corresponding insert, update, or delete command.</source>
          <target state="translated">명령 작성기가 해당하는 삽입, 업데이트 또는 삭제 명령에 사용할 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)">
          <source>Resets the <ph id="ph1">&lt;see cref="P:System.Data.Common.DbCommand.CommandTimeout" /&gt;</ph>, <ph id="ph2">&lt;see cref="P:System.Data.Common.DbCommand.Transaction" /&gt;</ph>, <ph id="ph3">&lt;see cref="P:System.Data.Common.DbCommand.CommandType" /&gt;</ph>, and <ph id="ph4">&lt;see cref="T:System.Data.UpdateRowSource" /&gt;</ph> properties on the <ph id="ph5">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Data.Common.DbCommand.CommandTimeout" /&gt;</ph>에 대한 <ph id="ph2">&lt;see cref="P:System.Data.Common.DbCommand.Transaction" /&gt;</ph>, <ph id="ph3">&lt;see cref="P:System.Data.Common.DbCommand.CommandType" /&gt;</ph>, <ph id="ph4">&lt;see cref="T:System.Data.UpdateRowSource" /&gt;</ph> 및 <ph id="ph5">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> 속성을 다시 설정합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> instance to use for each insert, update, or delete operation.</source>
          <target state="translated">각각의 삽입, 업데이트 또는 삭제 작업에 사용할 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)">
          <source>Passing a null value allows the <ph id="ph1">&lt;see cref="M:System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)" /&gt;</ph> method to create a <ph id="ph2">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph> object based on the Select command associated with the <ph id="ph3">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph>.</source>
          <target state="translated">null 값을 전달하면 <ph id="ph1">&lt;see cref="M:System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)" /&gt;</ph> 메서드에서 <ph id="ph2">&lt;see cref="T:System.Data.Common.DbCommand" /&gt;</ph>와 연결된 Select 명령에 따라 <ph id="ph3">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph> 개체를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)">
          <source>This method is intended for use by provider writers building a custom command builder.</source>
          <target state="translated">이 메서드는 사용자 지정 명령 작성기를 만드는 공급자 작성자가 사용이 됩니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String)">
          <source>The original unquoted identifier.</source>
          <target state="translated">따옴표 붙지 않은 원래 식별자입니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String)">
          <source>Given an unquoted identifier in the correct catalog case, returns the correct quoted form of that identifier, including properly escaping any embedded quotes in the identifier.</source>
          <target state="translated">올바른 카탈로그 대/소문자로 따옴표 붙지 않은 식별자가 제공되는 경우 따옴표 붙은 올바른 형식의 해당 식별자를 반환합니다. 여기에는 식별자에 포함된 모든 따옴표를 이스케이프하는 작업이 포함됩니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String)">
          <source>The quoted version of the identifier.</source>
          <target state="translated">따옴표를 사용한 식별자입니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String)">
          <source>Embedded quotes within the identifier are properly escaped.</source>
          <target state="translated">식별자에 포함된 따옴표가 올바르게 이스케이프되었습니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="P:System.Data.Common.DbCommandBuilder.QuotePrefix">
          <source>Gets or sets the beginning character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens.</source>
          <target state="translated">이름에 공백 또는 예약된 토큰과 같은 문자가 포함된 데이터베이스 개체(예: 테이블 또는 열)를 지정할 때 사용할 시작 문자를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbCommandBuilder.QuotePrefix">
          <source>The beginning character or characters to use.</source>
          <target state="translated">사용할 시작 문자입니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbCommandBuilder.QuotePrefix">
          <source>The default is an empty string.</source>
          <target state="translated">기본값은 빈 문자열입니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbCommandBuilder.QuotePrefix">
          <source>Some data sources may have objects that can contain characters such as spaces, commas, and semicolons.</source>
          <target state="translated">일부 데이터 원본에는 공백, 쉼표 및 세미콜론 등의 문자를 포함할 수 있는 개체 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbCommandBuilder.QuotePrefix">
          <source>To accommodate this capability, use the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.QuotePrefix%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.QuoteSuffix%2A&gt;</ph> properties to specify delimiters such as a left bracket and a right bracket to encapsulate the object name.</source>
          <target state="translated">이 기능을 사용 하 여는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.QuotePrefix%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.QuoteSuffix%2A&gt;</ph> 왼쪽된 대괄호 문자와 오른쪽 대괄호를 개체 이름 캡슐화와 같은 구분 기호를 지정 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbCommandBuilder.QuotePrefix">
          <source>Although you cannot change the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.QuotePrefix%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.QuoteSuffix%2A&gt;</ph> properties after an insert, update, or delete command has been generated, you can change their settings after calling the <ph id="ph3">`Update`</ph> method of a <ph id="ph4">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>.</source>
          <target state="translated">변경할 수 없지만 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.QuotePrefix%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.QuoteSuffix%2A&gt;</ph> 속성 삽입, 업데이트 또는 삭제 명령을 생성 한 후, 호출한 후 해당 설정을 변경할 수는 <ph id="ph3">`Update`</ph> 의 메서드는 <ph id="ph4">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="P:System.Data.Common.DbCommandBuilder.QuotePrefix">
          <source>This property cannot be changed after an insert, update, or delete command has been generated.</source>
          <target state="translated">삽입, 업데이트 또는 삭제 명령이 생성된 후에 이 속성을 변경할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="P:System.Data.Common.DbCommandBuilder.QuoteSuffix">
          <source>Gets or sets the ending character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens.</source>
          <target state="translated">이름에 공백 또는 예약된 토큰과 같은 문자가 포함된 데이터베이스 개체(예: 테이블 또는 열)를 지정할 때 사용할 끝 문자를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbCommandBuilder.QuoteSuffix">
          <source>The ending character or characters to use.</source>
          <target state="translated">사용할 끝 문자입니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbCommandBuilder.QuoteSuffix">
          <source>The default is an empty string.</source>
          <target state="translated">기본값은 빈 문자열입니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbCommandBuilder.QuoteSuffix">
          <source>Some data sources may have objects that can contain characters such as spaces, commas, and semicolons.</source>
          <target state="translated">일부 데이터 원본에는 공백, 쉼표 및 세미콜론 등의 문자를 포함할 수 있는 개체 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbCommandBuilder.QuoteSuffix">
          <source>To accommodate this capability, use the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.QuotePrefix%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.QuoteSuffix%2A&gt;</ph> properties to specify delimiters such as a left bracket and a right bracket to encapsulate the object name.</source>
          <target state="translated">이 기능을 사용 하 여는 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.QuotePrefix%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.QuoteSuffix%2A&gt;</ph> 왼쪽된 대괄호 문자와 오른쪽 대괄호를 개체 이름 캡슐화와 같은 구분 기호를 지정 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbCommandBuilder.QuoteSuffix">
          <source>Although you cannot change the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.QuotePrefix%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.QuoteSuffix%2A&gt;</ph> properties after an insert, update, or delete command has been generated, you can change their settings after calling the <ph id="ph3">`Update`</ph> method of a <ph id="ph4">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>.</source>
          <target state="translated">변경할 수 없지만 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.QuotePrefix%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder.QuoteSuffix%2A&gt;</ph> 속성 삽입, 업데이트 또는 삭제 명령을 생성 한 후, 호출한 후 해당 설정을 변경할 수는 <ph id="ph3">`Update`</ph> 의 메서드는 <ph id="ph4">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.RefreshSchema">
          <source>Clears the commands associated with this <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph>와 연결된 명령을 지웁니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.RefreshSchema">
          <source>Calling the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> method effectively removes all the <ph id="ph2">&lt;xref:System.Data.Common.DbCommand&gt;</ph> objects referred to by the <ph id="ph3">&lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt;</ph>,</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A&gt;</ph> 메서드는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommand&gt;</ph> 개체에서 참조 하는 <ph id="ph3">&lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.RefreshSchema">
          <source><ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.RefreshSchema">
          <source><ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.DeleteCommand%2A&gt;</ph>, and</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.DeleteCommand%2A&gt;</ph>및</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.RefreshSchema">
          <source><ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.InsertCommand%2A&gt;</ph> properties.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.InsertCommand%2A&gt;</ph> 속성</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.RowUpdatingHandler(System.Data.Common.RowUpdatingEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Data.Common.RowUpdatingEventArgs" /&gt;</ph> instance containing information about the event.</source>
          <target state="translated">이벤트에 대한 정보를 포함하는 <ph id="ph1">&lt;see cref="T:System.Data.Common.RowUpdatingEventArgs" /&gt;</ph> 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.RowUpdatingHandler(System.Data.Common.RowUpdatingEventArgs)">
          <source>Adds an event handler for the <ph id="ph1">&lt;see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" /&gt;</ph> 이벤트에 대한 이벤트 처리기를 추가합니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="P:System.Data.Common.DbCommandBuilder.SchemaSeparator">
          <source>Gets or sets the character to be used for the separator between the schema identifier and any other identifiers.</source>
          <target state="translated">스키마 식별자와 다른 식별자 간의 구분 기호로 사용할 문자를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbCommandBuilder.SchemaSeparator">
          <source>The character to be used as the schema separator.</source>
          <target state="translated">스키마 구분 기호로 사용할 문자입니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbCommandBuilder.SchemaSeparator">
          <source>Generally, database servers indicate the schema for an identifier by separating the schema name from the identifier with some character.</source>
          <target state="translated">일반적으로 데이터베이스 서버는 일부 문자로 식별자에서 스키마 이름을 구분 식별자에 대 한 스키마를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbCommandBuilder.SchemaSeparator">
          <source>For example, SQL Server uses a colon, creating complete identifiers such as <bpt id="p1">**</bpt>Person:CustomerName<ept id="p1">**</ept>, where "Person" is the schema name and "CustomerName" is the identifier.</source>
          <target state="translated">예를 들어 SQL Server 사용 콜론을 같은 완료 식별자를 만들어 <bpt id="p1">**</bpt>사람: CustomerName<ept id="p1">**</ept>, 여기서 스키마 이름인 "Person" 및 "CustomerName"는 식별자입니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbCommandBuilder.SchemaSeparator">
          <source>Setting this property allows developers to modify this behavior.</source>
          <target state="translated">이 속성을 설정 개발자가이 동작을 수정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="P:System.Data.Common.DbCommandBuilder.SetAllValues">
          <source>Specifies whether all column values in an update statement are included or only changed ones.</source>
          <target state="translated">UPDATE 문에 모든 열 값이 포함되어 있는지 아니면 변경된 열 값만 포함되어 있는지를 지정합니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbCommandBuilder.SetAllValues">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the UPDATE statement generated by the <ph id="ph2">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph> includes all columns; <ph id="ph3">&lt;see langword="false" /&gt;</ph> if it includes only changed columns.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph>가 생성한 UPDATE 문에 모든 열이 포함되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 변경된 열만 포함되면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbCommandBuilder.SetAllValues">
          <source>The UPDATE statement generated by a <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> can include update information about all the columns, or it can include information only about those columns whose values have changed.</source>
          <target state="translated">에 의해 생성 된 UPDATE 문에 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> 모든 열에 대 한 업데이트 정보를 포함할 수 또는 값이 변경 된 열에 대 한 정보를 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbCommandBuilder.SetAllValues">
          <source>Setting the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.SetAllValues%2A&gt;</ph> property to <ph id="ph2">`true`</ph> causes the generated UPDATE statement to include all the columns, whether their values have changed or not.</source>
          <target state="translated">설정의 <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder.SetAllValues%2A&gt;</ph> 속성을 <ph id="ph2">`true`</ph> 여부의 값이 변경 되었는지 여부를 때문에 생성 된 UPDATE 문이 열이 모두 포함 합니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Data.Common.DbDataAdapter" /&gt;</ph> to be used for the update.</source>
          <target state="translated">업데이트에 사용할 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbDataAdapter" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)">
          <source>Registers the <ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph> to handle the <ph id="ph2">&lt;see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" /&gt;</ph> event for a <ph id="ph3">&lt;see cref="T:System.Data.Common.DbDataAdapter" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.Common.DbCommandBuilder" /&gt;</ph>에 대한 <ph id="ph2">&lt;see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" /&gt;</ph> 이벤트를 처리하기 위해 <ph id="ph3">&lt;see cref="T:System.Data.Common.DbDataAdapter" /&gt;</ph>를 등록합니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)">
          <source>This method is intended for use by provider writers building a custom command builder.</source>
          <target state="translated">이 메서드는 사용자 지정 명령 작성기를 만드는 공급자 작성자가 사용이 됩니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)">
          <source>When a new <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph> is added to the <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph>, it is registered for the DbDataAdapter's <bpt id="p1">**</bpt>RowUpdating<ept id="p1">**</ept> event.</source>
          <target state="translated">새 <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph> 에 추가 되는 <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph>, DbDataAdapter의에 대 한 등록 <bpt id="p1">**</bpt>RowUpdating<ept id="p1">**</ept> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)">
          <source>If this method is called again with the same <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>, the <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> is unregistered for that DbDataAdapter's <bpt id="p1">**</bpt>RowUpdating<ept id="p1">**</ept> event.</source>
          <target state="translated">이 메서드는 동일한로 다시 호출 되 면 <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>, <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> 해당 DbDataAdapter에 대 한 등록 되어 있지 않은 <bpt id="p1">**</bpt>RowUpdating<ept id="p1">**</ept> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.UnquoteIdentifier(System.String)">
          <source>The identifier that will have its embedded quotes removed.</source>
          <target state="translated">포함된 따옴표를 제거할 식별자입니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.UnquoteIdentifier(System.String)">
          <source>Given a quoted identifier, returns the correct unquoted form of that identifier, including properly un-escaping any embedded quotes in the identifier.</source>
          <target state="translated">따옴표 붙은 식별자가 제공되는 경우 따옴표 붙지 않은 올바른 형식의 해당 식별자를 반환합니다. 여기에는 식별자에 포함된 모든 따옴표를 이스케이프 해제하는 작업이 포함됩니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbCommandBuilder.UnquoteIdentifier(System.String)">
          <source>The unquoted identifier, with embedded quotes properly un-escaped.</source>
          <target state="translated">포함된 따옴표가 이스케이프 해제된, 따옴표 붙지 않은 식별자입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>