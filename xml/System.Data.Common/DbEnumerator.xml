<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DbEnumerator.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac51bde5ae17b68c87de51dbd180afb527c0932b925.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1bde5ae17b68c87de51dbd180afb527c0932b925</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Data.Common.DbEnumerator">
          <source>Exposes the <ph id="ph1">&lt;see cref="M:System.Collections.IEnumerable.GetEnumerator" /&gt;</ph> method, which supports a simple iteration over a collection by a .NET Framework data provider.</source>
          <target state="translated">.NET Framework 데이터 공급자별로 컬렉션에 대한 단순 반복을 지원하는 <ph id="ph1">&lt;see cref="M:System.Collections.IEnumerable.GetEnumerator" /&gt;</ph> 메서드를 표시합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator&gt;</ph> class is implemented by a .NET Framework data provider to provide data binding support.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator&gt;</ph> 클래스는 데이터 바인딩 기능을 제공 하는.NET Framework 데이터 공급자에 의해 구현 됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbEnumerator">
          <source>By design, the <ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator&gt;</ph> object is intended for use with only one resultset.</source>
          <target state="translated">기본적으로 <ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator&gt;</ph> 하나의 결과 집합 에서만 사용 하기 위한 개체입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbEnumerator">
          <source>For example, if you execute a batch statement containing two SQL SELECT statements that return different schemas, the second statement might not retun the entire schema.</source>
          <target state="translated">예를 들어 서로 다른 스키마를 반환 하는 두 개의 SQL SELECT 문이 포함 된 일괄 처리 문을 실행 하는 경우 두 번째 문은 전체 스키마를 반환을 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.Common.DbEnumerator">
          <source>To avoid this situation, obtain a <ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator&gt;</ph> for each resultset, and then call the <ph id="ph2">`NextResult`</ph> method of a .NET Framework data provider DataReader object.</source>
          <target state="translated">이러한 상황을 방지 하려면 가져옵니다는 <ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator&gt;</ph> 각 결과 집합 및 호출에 대해는 <ph id="ph2">`NextResult`</ph> .NET Framework 데이터 공급자 DataReader 개체의 메서드.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="T:System.Data.Common.DbEnumerator">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Data.Common.DbEnumerator" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Data.Common.DbEnumerator" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader)">
          <source>The DataReader through which to iterate.</source>
          <target state="translated">반복할 DataReader입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Data.Common.DbEnumerator" /&gt;</ph> class with the give n data reader.</source>
          <target state="translated">지정된 데이터 판독기를 사용하여 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbEnumerator" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader)">
          <source>The <ph id="ph1">&lt;see langword="DataReader" /&gt;</ph> through which to iterate.</source>
          <target state="translated">반복할 <ph id="ph1">&lt;see langword="DataReader" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Data.Common.DbEnumerator" /&gt;</ph> class using the specified <ph id="ph2">&lt;see langword="DataReader" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbEnumerator" /&gt;</ph>를 사용하여 <ph id="ph2">&lt;see langword="DataReader" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader,System.Boolean)">
          <source>The DataReader through which to iterate.</source>
          <target state="translated">반복할 DataReader입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to automatically close the DataReader after iterating through its data; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">자동으로 해당 데이터를 반복한 후 DataReader를 닫으려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 닫지 않으려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Data.Common.DbEnumerator" /&gt;</ph> class using the specified reader and indicates whether to automatically close the reader after iterating through its data.</source>
          <target state="translated">지정된 판독기를 사용하여 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbEnumerator" /&gt;</ph> 클래스의 새 인스턴스를 초기화하고 데이터를 반복한 후에 판독기를 자동으로 닫을지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)">
          <source>The <ph id="ph1">&lt;see langword="DataReader" /&gt;</ph> through which to iterate.</source>
          <target state="translated">반복할 <ph id="ph1">&lt;see langword="DataReader" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to automatically close the <ph id="ph2">&lt;see langword="DataReader" /&gt;</ph> after iterating through its data; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">자동으로 해당 데이터를 반복한 후 <ph id="ph2">&lt;see langword="DataReader" /&gt;</ph>를 닫으려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 닫지 않으려면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Data.Common.DbEnumerator" /&gt;</ph> class using the specified <ph id="ph2">&lt;see langword="DataReader" /&gt;</ph>, and indicates whether to automatically close the <ph id="ph3">&lt;see langword="DataReader" /&gt;</ph> after iterating through its data.</source>
          <target state="translated">지정된 <ph id="ph2">&lt;see langword="DataReader" /&gt;</ph>를 사용하여 <ph id="ph1">&lt;see cref="T:System.Data.Common.DbEnumerator" /&gt;</ph> 클래스의 새 인스턴스를 초기화하고 데이터를 반복한 후에 <ph id="ph3">&lt;see langword="DataReader" /&gt;</ph>를 자동으로 닫을지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="P:System.Data.Common.DbEnumerator.Current">
          <source>Gets the current element in the collection.</source>
          <target state="translated">컬렉션의 현재 요소를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbEnumerator.Current">
          <source>The current element in the collection.</source>
          <target state="translated">컬렉션의 현재 요소입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbEnumerator.Current">
          <source>After an enumerator is created or after a <ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> must be called to advance the enumerator to the first element of the collection before reading the value of <ph id="ph3">&lt;xref:System.Data.Common.DbEnumerator.Current%2A&gt;</ph>; otherwise, <ph id="ph4">&lt;xref:System.Data.Common.DbEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">열거자를 만들거나는 <ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> 호출 하 여 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소를 <ph id="ph3">&lt;xref:System.Data.Common.DbEnumerator.Current%2A&gt;</ph>, 그렇지 않으면 <ph id="ph4">&lt;xref:System.Data.Common.DbEnumerator.Current%2A&gt;</ph> 정의 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbEnumerator.Current">
          <source><ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator.Current%2A&gt;</ph> also throws an exception if the last call to <ph id="ph2">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> returned false, which indicates the end of the collection.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator.Current%2A&gt;</ph> 마지막으로 호출 하는 경우 예외를 throw <ph id="ph2">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> 컬렉션의 끝을 나타내는 false를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbEnumerator.Current">
          <source><ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator.Current%2A&gt;</ph> does not move the position of the enumerator and consecutive calls to <ph id="ph2">&lt;xref:System.Data.Common.DbEnumerator.Current%2A&gt;</ph> return the same object until either <ph id="ph3">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator.Current%2A&gt;</ph> 연속으로 호출 하 고 열거자의 위치를 이동 하지 않는 <ph id="ph2">&lt;xref:System.Data.Common.DbEnumerator.Current%2A&gt;</ph> 될 때까지 동일한 개체를 반환 합니다. <ph id="ph3">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> 또는 <ph id="ph4">&lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</ph> 라고 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbEnumerator.Current">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbEnumerator.Current">
          <source>If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</ph> generates an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">컬렉션 변경 되 면, 추가 하는 등 요소, 수정 또는 삭제 열거자는 무효화 하 고을 다음에 호출할 <ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</ph> 생성 한 <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.Common.DbEnumerator.Current">
          <source>If the collection is modified between <ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.Common.DbEnumerator.Current%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Data.Common.DbEnumerator.Current%2A&gt;</ph> returns the element to which it is set, even if the enumerator is already invalidated.</source>
          <target state="translated">사이 컬렉션이 수정 되는 경우 <ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Data.Common.DbEnumerator.Current%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Data.Common.DbEnumerator.Current%2A&gt;</ph> 열거자가 이미 무효로 되 었 하는 경우에, 설정 되어 있는 요소를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="P:System.Data.Common.DbEnumerator.Current">
          <source>The enumerator is positioned before the first element of the collection or after the last element.</source>
          <target state="translated">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbEnumerator.MoveNext">
          <source>Advances the enumerator to the next element of the collection.</source>
          <target state="translated">열거자를 컬렉션의 다음 요소로 이동합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbEnumerator.MoveNext">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the enumerator was successfully advanced to the next element; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the enumerator has passed the end of the collection.</source>
          <target state="translated">열거자가 다음 요소로 이동한 경우 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이(가) 반환되고, 컬렉션의 끝을 지난 경우 <ph id="ph2">&lt;see langword="false" /&gt;</ph>이(가) 반환됩니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbEnumerator.MoveNext">
          <source>After an enumerator is created or after a call to <ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</ph>, an enumerator is positioned before the first element of the collection, and the first call to <ph id="ph2">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> moves the enumerator over the first element of the collection.</source>
          <target state="translated">열거자를 만든 후 또는를 호출한 후 <ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</ph>, 열거자는 컬렉션 및 첫 번째 호출의 첫 번째 요소 앞에 배치 됩니다 <ph id="ph2">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> 열거자를 컬렉션의 첫 번째 요소로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbEnumerator.MoveNext">
          <source>After the end of the collection is passed, subsequent calls to <ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> return false until <ph id="ph2">&lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated">컬렉션의 끝이 전달 된를 다시 호출 하면 후 <ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> 반환 될 때까지 false <ph id="ph2">&lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</ph> 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbEnumerator.MoveNext">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbEnumerator.MoveNext">
          <source>If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">컬렉션 변경 되 면, 추가 하는 등 요소, 수정 또는 삭제 열거자는 무효화 하 고을 다음에 호출할 <ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</ph> throw는 <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbEnumerator.MoveNext">
          <source>The collection was modified after the enumerator was created.</source>
          <target state="translated">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbEnumerator.Reset">
          <source>Sets the enumerator to its initial position, which is before the first element in the collection.</source>
          <target state="translated">컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbEnumerator.Reset">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.Common.DbEnumerator.Reset">
          <source>If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">컬렉션 변경 되 면, 추가 하는 등 요소, 수정 또는 삭제 열거자는 무효화 하 고을 다음에 호출할 <ph id="ph1">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</ph> throw는 <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Data.Common.DbEnumerator.Reset">
          <source>The collection was modified after the enumerator was created.</source>
          <target state="translated">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>