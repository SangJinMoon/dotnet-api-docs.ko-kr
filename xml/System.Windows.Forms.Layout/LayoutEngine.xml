<Type Name="LayoutEngine" FullName="System.Windows.Forms.Layout.LayoutEngine">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d763d9741de1ef3eae2cf1833e7afef65840c972" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37576423" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class LayoutEngine" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit LayoutEngine extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Layout.LayoutEngine" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class LayoutEngine" />
  <TypeSignature Language="C++ CLI" Value="public ref class LayoutEngine abstract" />
  <TypeSignature Language="F#" Value="type LayoutEngine = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="8137b-101">레이아웃 엔진을 구현하기 위한 기본 클래스를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8137b-101">Provides the base class for implementing layout engines.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8137b-102">사용 된 <xref:System.Windows.Forms.Layout.LayoutEngine> 런타임에 사용자 지정 레이아웃 동작을 생성 하려는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="8137b-102">Use the <xref:System.Windows.Forms.Layout.LayoutEngine> class when you want to create custom layout behavior at run time.</span></span> <span data-ttu-id="8137b-103">고유한 클래스를 파생 합니다 <xref:System.Windows.Forms.Layout.LayoutEngine> 클래스를 재정의 합니다 <xref:System.Windows.Forms.Layout.LayoutEngine.Layout%2A> 사용자 지정 레이아웃 동작을 정의 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="8137b-103">Derive your own class from the <xref:System.Windows.Forms.Layout.LayoutEngine> class and override the <xref:System.Windows.Forms.Layout.LayoutEngine.Layout%2A> method to define your custom layout behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8137b-104">다음 코드 예제에서는 <xref:System.Windows.Forms.Layout.LayoutEngine> 사용자 지정 레이아웃 동작을 구현 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="8137b-104">The following code example demonstrates the use of the <xref:System.Windows.Forms.Layout.LayoutEngine> class to implement custom layout behavior.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Layout.LayoutEngine#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Layout.LayoutEngine/cpp/DemoFlowLayout.cpp#1)]
 [!code-csharp[System.Windows.Forms.Layout.LayoutEngine#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Layout.LayoutEngine/CS/DemoFlowLayout.cs#1)]
 [!code-vb[System.Windows.Forms.Layout.LayoutEngine#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Layout.LayoutEngine/VB/DemoFlowLayout.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LayoutEngine ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Layout.LayoutEngine.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; LayoutEngine();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8137b-105">
            <see cref="T:System.Windows.Forms.Layout.LayoutEngine" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8137b-105">Initializes a new instance of the <see cref="T:System.Windows.Forms.Layout.LayoutEngine" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="8137b-106">
            <para>레이아웃 동작 레이아웃 엔진의 연결 된 컨테이너 클래스의 모든 인스턴스에 대해 동일 해야 합니다. 따라서이 레이아웃 엔진의 생성자를 선언 것이 좋습니다. <see langword="protected" /> 또는 <see langword="private" />, 및 단일 클래스로 레이아웃 엔진을 구현 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="8137b-106">
              <para>Layout behavior should be the same for any instance of your layout engine's associated container class. For this reason, consider declaring your layout engine's constructor <see langword="protected" /> or <see langword="private" />, and implementing your layout engine as a singleton class.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="InitLayout">
      <MemberSignature Language="C#" Value="public virtual void InitLayout (object child, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitLayout(object child, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Layout.LayoutEngine.InitLayout(System.Object,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub InitLayout (child As Object, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void InitLayout(System::Object ^ child, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="abstract member InitLayout : obj * System.Windows.Forms.BoundsSpecified -&gt; unit&#xA;override this.InitLayout : obj * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="layoutEngine.InitLayout (child, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="child">
          <span data-ttu-id="8137b-107">레이아웃 엔진이 작업할 컨테이너입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8137b-107">The container on which the layout engine will operate.</span>
          </span>
        </param>
        <param name="specified">
          <span data-ttu-id="8137b-108">컨테이너의 크기와 위치를 정의하는 범위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8137b-108">The bounds defining the container's size and position.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8137b-109">레이아웃 엔진을 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8137b-109">Initializes the layout engine.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8137b-110">필요에 따라 초기화 논리를 제공 합니다 <xref:System.Windows.Forms.Layout.LayoutEngine.InitLayout%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="8137b-110">Optionally provide initialization logic in the <xref:System.Windows.Forms.Layout.LayoutEngine.InitLayout%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8137b-111">
            <paramref name="child" />가 <see cref="T:System.Windows.Forms.Layout.LayoutEngine" />이 레이아웃을 수행할 수 없는 형식인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="8137b-111">
              <paramref name="child" /> is not a type on which <see cref="T:System.Windows.Forms.Layout.LayoutEngine" /> can perform layout.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="8137b-112">
            <para>재정의 <see cref="M:System.Windows.Forms.Layout.LayoutEngine.InitLayout(System.Object,System.Windows.Forms.BoundsSpecified)" /> 메서드를 사용자 지정 초기화 동작을 제공 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="8137b-112">
              <para>Override the <see cref="M:System.Windows.Forms.Layout.LayoutEngine.InitLayout(System.Object,System.Windows.Forms.BoundsSpecified)" /> method to provide your custom initialization behavior.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Layout">
      <MemberSignature Language="C#" Value="public virtual bool Layout (object container, System.Windows.Forms.LayoutEventArgs layoutEventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Layout(object container, class System.Windows.Forms.LayoutEventArgs layoutEventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Layout.LayoutEngine.Layout(System.Object,System.Windows.Forms.LayoutEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Layout(System::Object ^ container, System::Windows::Forms::LayoutEventArgs ^ layoutEventArgs);" />
      <MemberSignature Language="F#" Value="abstract member Layout : obj * System.Windows.Forms.LayoutEventArgs -&gt; bool&#xA;override this.Layout : obj * System.Windows.Forms.LayoutEventArgs -&gt; bool" Usage="layoutEngine.Layout (container, layoutEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.Object" />
        <Parameter Name="layoutEventArgs" Type="System.Windows.Forms.LayoutEventArgs" />
      </Parameters>
      <Docs>
        <param name="container">
          <span data-ttu-id="8137b-113">레이아웃 엔진이 작업할 컨테이너입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8137b-113">The container on which the layout engine will operate.</span>
          </span>
        </param>
        <param name="layoutEventArgs">
          <span data-ttu-id="8137b-114">
            <see cref="E:System.Windows.Forms.Control.Layout" /> 이벤트에서 가져온 이벤트 인수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8137b-114">An event argument from a <see cref="E:System.Windows.Forms.Control.Layout" /> event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8137b-115">레이아웃 엔진에서 레이아웃 작업을 수행하도록 요청합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8137b-115">Requests that the layout engine perform a layout operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8137b-116">
            <paramref name="container" />의 부모가 레이아웃을 다시 수행해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8137b-116">
              <see langword="true" /> if layout should be performed again by the parent of <paramref name="container" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8137b-117">이 메서드는 레이아웃 엔진에서 레이아웃 작업을 수행 하는 것은 `container` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="8137b-117">This method is called when the layout engine is to perform a layout operation on the `container` parameter.</span></span> <span data-ttu-id="8137b-118">값을 확인할 수 있습니다를 <xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A>, <xref:System.Windows.Forms.LayoutEventArgs.AffectedComponent%2A>, 및 <xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A> 속성을 `layoutEventArgs` 레이아웃 작업을 필요한 경우를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="8137b-118">You can check the value of the <xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A>, <xref:System.Windows.Forms.LayoutEventArgs.AffectedComponent%2A>, and <xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A> properties on `layoutEventArgs` to decide if a layout operation is necessary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8137b-119">다음 코드 예제에서는 <xref:System.Windows.Forms.Layout.LayoutEngine.Layout%2A> 사용자 지정 레이아웃 동작을 구현 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="8137b-119">The following code example demonstrates the use of the <xref:System.Windows.Forms.Layout.LayoutEngine.Layout%2A> method to implement custom layout behavior.</span></span> <span data-ttu-id="8137b-120">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Windows.Forms.Layout.LayoutEngine> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="8137b-120">This code example is part of a larger example provided for the <xref:System.Windows.Forms.Layout.LayoutEngine> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Layout.LayoutEngine#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Layout.LayoutEngine/cpp/DemoFlowLayout.cpp#4)]
 [!code-csharp[System.Windows.Forms.Layout.LayoutEngine#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Layout.LayoutEngine/CS/DemoFlowLayout.cs#4)]
 [!code-vb[System.Windows.Forms.Layout.LayoutEngine#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Layout.LayoutEngine/VB/DemoFlowLayout.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="8137b-121">
            <paramref name="container" />가 <see cref="T:System.Windows.Forms.Layout.LayoutEngine" />이 레이아웃을 수행할 수 없는 형식인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="8137b-121">
              <paramref name="container" /> is not a type on which <see cref="T:System.Windows.Forms.Layout.LayoutEngine" /> can perform layout.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="8137b-122">
            <para>재정의 <see cref="M:System.Windows.Forms.Layout.LayoutEngine.Layout(System.Object,System.Windows.Forms.LayoutEventArgs)" /> 메서드를 사용자 지정 레이아웃 동작을 제공 합니다.  내용의 레이아웃 하는 경우는 <paramref name="container" /> 매개 변수를 확인 해야 합니다 <see cref="P:System.Windows.Forms.Control.Visible" /> 각 자식 컨트롤의 속성입니다.  반환 <see langword="true" /> 레이아웃 엔진 논리 결정 컨테이너의 부모에 의해 해당 레이아웃을 다시 수행 해야 합니다. 이 발생할 수 있습니다, 예를 들어 레이아웃 엔진 자식 컨트롤의 크기를 조정 하 고 컨테이너를 새 레이아웃에 맞게 크기를 늘려야 결정 하는 경우.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="8137b-122">
              <para>Override the <see cref="M:System.Windows.Forms.Layout.LayoutEngine.Layout(System.Object,System.Windows.Forms.LayoutEventArgs)" /> method to provide your custom layout behavior.  When laying out the contents of the <paramref name="container" /> parameter, be sure to check the <see cref="P:System.Windows.Forms.Control.Visible" /> property of each child control.  Return <see langword="true" /> if your layout engine logic determines that layout should be performed again by the parent of the container. This might occur, for example, when the layout engine resizes child controls and determines that the container must be increased in size to accommodate the new layout.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.Forms.LayoutEventArgs" />
      </Docs>
    </Member>
  </Members>
</Type>